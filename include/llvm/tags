!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	Analysis/DependenceAnalysis.h	/^      const SCEV *A;$/;"	m	class:llvm::DependenceAnalysis::Constraint
A	Analysis/LoopDependenceAnalysis.h	/^    Value *A;$/;"	m	struct:llvm::LoopDependenceAnalysis::DependencePair
AA	Analysis/AliasAnalysis.h	/^  AliasAnalysis *AA;       \/\/ Previous Alias Analysis to chain to.$/;"	m	class:llvm::AliasAnalysis
AA	Analysis/AliasSetTracker.h	/^  AliasAnalysis &AA;$/;"	m	class:llvm::AliasSetTracker
AA	Analysis/DependenceAnalysis.h	/^    AliasAnalysis *AA;$/;"	m	class:llvm::DependenceAnalysis
AA	Analysis/LoopDependenceAnalysis.h	/^  AliasAnalysis *AA;$/;"	m	class:llvm::LoopDependenceAnalysis
AA	Analysis/MemoryDependenceAnalysis.h	/^    AliasAnalysis *AA;$/;"	m	class:llvm::MemoryDependenceAnalysis
AA	CodeGen/LiveIntervalAnalysis.h	/^    AliasAnalysis *AA;$/;"	m	class:llvm::LiveIntervals
AA	CodeGen/MachineScheduler.h	/^  AliasAnalysis *AA;$/;"	m	class:llvm::ScheduleDAGMI
AA	CodeGen/MachineScheduler.h	/^  AliasAnalysis *AA;$/;"	m	struct:llvm::MachineSchedContext
AA	CodeGen/SelectionDAGISel.h	/^  AliasAnalysis *AA;$/;"	m	class:llvm::SelectionDAGISel
ABIAlign	DataLayout.h	/^  unsigned            ABIAlign;       \/\/\/< ABI alignment for this type\/bitw$/;"	m	struct:llvm::PointerAlignElem
ABIAlign	DataLayout.h	/^  unsigned ABIAlign     : 16; \/\/\/< ABI alignment for this type\/bitw$/;"	m	struct:llvm::LayoutAlignElem
ABIType	Target/TargetOptions.h	/^    enum ABIType {$/;"	g	namespace:llvm::FloatABI
ADD	CodeGen/ISDOpcodes.h	/^    ADD, SUB, MUL, SDIV, UDIV, SREM, UREM,$/;"	e	enum:llvm::ISD::NodeType
ADDC	CodeGen/ISDOpcodes.h	/^    ADDC, SUBC,$/;"	e	enum:llvm::ISD::NodeType
ADDE	CodeGen/ISDOpcodes.h	/^    ADDE, SUBE,$/;"	e	enum:llvm::ISD::NodeType
ADD_F32	CodeGen/RuntimeLibcalls.h	/^    ADD_F32,$/;"	e	enum:llvm::RTLIB::Libcall
ADD_F64	CodeGen/RuntimeLibcalls.h	/^    ADD_F64,$/;"	e	enum:llvm::RTLIB::Libcall
ADD_F80	CodeGen/RuntimeLibcalls.h	/^    ADD_F80,$/;"	e	enum:llvm::RTLIB::Libcall
ADD_PPCF128	CodeGen/RuntimeLibcalls.h	/^    ADD_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
ADJUST_TRAMPOLINE	CodeGen/ISDOpcodes.h	/^    ADJUST_TRAMPOLINE,$/;"	e	enum:llvm::ISD::NodeType
AD_ATT	InlineAsm.h	/^    AD_ATT,$/;"	e	enum:llvm::InlineAsm::AsmDialect
AD_Intel	InlineAsm.h	/^    AD_Intel$/;"	e	enum:llvm::InlineAsm::AsmDialect
AExt	CodeGen/CallingConvLower.h	/^    AExt,   \/\/ The value is extended with undefined upper bits.$/;"	e	enum:llvm::CCValAssign::LocInfo
AGGREGATE_ALIGN	DataLayout.h	/^  AGGREGATE_ALIGN = 'a',             \/\/\/< Aggregate alignment$/;"	e	enum:llvm::AlignTypeEnum
AIX	ADT/Triple.h	/^    AIX$/;"	e	enum:llvm::Triple::OSType
AK_AnyFloat	Intrinsics.h	/^      AK_AnyFloat,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::ArgKind
AK_AnyInteger	Intrinsics.h	/^      AK_AnyInteger,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::ArgKind
AK_AnyPointer	Intrinsics.h	/^      AK_AnyPointer$/;"	e	enum:llvm::Intrinsic::IITDescriptor::ArgKind
AK_AnyVector	Intrinsics.h	/^      AK_AnyVector,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::ArgKind
ALL	Analysis/DependenceAnalysis.h	/^             ALL = 7 };$/;"	e	enum:llvm::Dependence::DVEntry::__anon25
ALL_IS_CLOSED	Support/IntegersSubsetMapping.h	/^    ALL_IS_CLOSED$/;"	e	enum:llvm::IntegersSubsetMapping::DiffProcessState
AND	CodeGen/ISDOpcodes.h	/^    AND, OR, XOR,$/;"	e	enum:llvm::ISD::NodeType
ANTIDEP_ALL	Target/TargetSubtargetInfo.h	/^  typedef enum { ANTIDEP_NONE, ANTIDEP_CRITICAL, ANTIDEP_ALL } AntiDepBreakMode;$/;"	e	enum:llvm::TargetSubtargetInfo::__anon140
ANTIDEP_CRITICAL	Target/TargetSubtargetInfo.h	/^  typedef enum { ANTIDEP_NONE, ANTIDEP_CRITICAL, ANTIDEP_ALL } AntiDepBreakMode;$/;"	e	enum:llvm::TargetSubtargetInfo::__anon140
ANTIDEP_NONE	Target/TargetSubtargetInfo.h	/^  typedef enum { ANTIDEP_NONE, ANTIDEP_CRITICAL, ANTIDEP_ALL } AntiDepBreakMode;$/;"	e	enum:llvm::TargetSubtargetInfo::__anon140
ANY_EXTEND	CodeGen/ISDOpcodes.h	/^    ANY_EXTEND,$/;"	e	enum:llvm::ISD::NodeType
APFloat	ADT/APFloat.h	/^  class APFloat {$/;"	c	namespace:llvm
APINT_BITS_PER_WORD	ADT/APInt.h	/^    APINT_BITS_PER_WORD = static_cast<unsigned int>(sizeof(uint64_t)) *$/;"	e	enum:llvm::APInt::__anon8
APINT_WORD_SIZE	ADT/APInt.h	/^    APINT_WORD_SIZE = static_cast<unsigned int>(sizeof(uint64_t))$/;"	e	enum:llvm::APInt::__anon8
APInt	ADT/APInt.h	/^  APInt(APInt&& that) : BitWidth(that.BitWidth), VAL(that.VAL) {$/;"	f	class:llvm::APInt
APInt	ADT/APInt.h	/^  APInt(const APInt& that)$/;"	f	class:llvm::APInt
APInt	ADT/APInt.h	/^  APInt(uint64_t* val, unsigned bits) : BitWidth(bits), pVal(val) { }$/;"	f	class:llvm::APInt
APInt	ADT/APInt.h	/^  APInt(unsigned numBits, uint64_t val, bool isSigned = false)$/;"	f	class:llvm::APInt
APInt	ADT/APInt.h	/^  explicit APInt() : BitWidth(1) {}$/;"	f	class:llvm::APInt
APInt	ADT/APInt.h	/^class APInt {$/;"	c	namespace:llvm
APIntOps	ADT/APInt.h	/^namespace APIntOps {$/;"	n	namespace:llvm
APIntVal	Support/IntegersSubset.h	/^  const APInt* APIntVal;$/;"	m	class:llvm::IntItem
APSInt	ADT/APSInt.h	/^  explicit APSInt() {}$/;"	f	class:llvm::APSInt
APSInt	ADT/APSInt.h	/^  explicit APSInt(const APInt &I, bool isUnsigned = true)$/;"	f	class:llvm::APSInt
APSInt	ADT/APSInt.h	/^  explicit APSInt(uint32_t BitWidth, bool isUnsigned = true)$/;"	f	class:llvm::APSInt
APSInt	ADT/APSInt.h	/^class APSInt : public APInt {$/;"	c	namespace:llvm
ARM	MC/MCAsmInfo.h	/^    enum ExceptionsType { None, DwarfCFI, SjLj, ARM, Win64 };$/;"	e	enum:llvm::ExceptionHandling::ExceptionsType
ARM_AAPCS	CallingConv.h	/^    ARM_AAPCS = 67,$/;"	e	enum:llvm::CallingConv::ID
ARM_AAPCS_VFP	CallingConv.h	/^    ARM_AAPCS_VFP = 68,$/;"	e	enum:llvm::CallingConv::ID
ARM_APCS	CallingConv.h	/^    ARM_APCS = 66,$/;"	e	enum:llvm::CallingConv::ID
AS	Analysis/AliasSetTracker.h	/^    AliasSet *AS;$/;"	m	class:llvm::AliasSet::PointerRec
ASMCOND_H	MC/MCParser/AsmCond.h	11;"	d
ASMLEXER_H	MC/MCParser/AsmLexer.h	15;"	d
AST	Analysis/AliasSetTracker.h	/^    AliasSetTracker *AST;$/;"	m	class:llvm::AliasSetTracker::ASTCallbackVH
ASTCallbackVH	Analysis/AliasSetTracker.h	/^  class ASTCallbackVH : public CallbackVH {$/;"	c	class:llvm::AliasSetTracker
ASTCallbackVHDenseMapInfo	Analysis/AliasSetTracker.h	/^  struct ASTCallbackVHDenseMapInfo : public DenseMapInfo<Value *> {};$/;"	s	class:llvm::AliasSetTracker
AShrOperator	Operator.h	/^class AShrOperator$/;"	c	namespace:llvm
ATOMIC_CMP_SWAP	CodeGen/ISDOpcodes.h	/^    ATOMIC_CMP_SWAP,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_FENCE	CodeGen/ISDOpcodes.h	/^    ATOMIC_FENCE,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_ADD	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_ADD,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_AND	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_AND,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_MAX	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_MAX,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_MIN	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_MIN,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_NAND	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_NAND,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_OR	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_OR,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_SUB	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_SUB,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_UMAX	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_UMAX,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_UMIN	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_UMIN,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_LOAD_XOR	CodeGen/ISDOpcodes.h	/^    ATOMIC_LOAD_XOR,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_STORE	CodeGen/ISDOpcodes.h	/^    ATOMIC_STORE,$/;"	e	enum:llvm::ISD::NodeType
ATOMIC_SWAP	CodeGen/ISDOpcodes.h	/^    ATOMIC_SWAP,$/;"	e	enum:llvm::ISD::NodeType
AV	CodeGen/MachineSSAUpdater.h	/^  void *AV;$/;"	m	class:llvm::MachineSSAUpdater
AV	Transforms/Utils/SSAUpdater.h	/^  void *AV;$/;"	m	class:llvm::SSAUpdater
Abbrevs	Bitcode/BitstreamReader.h	/^    std::vector<BitCodeAbbrev*> Abbrevs;$/;"	m	struct:llvm::BitstreamReader::BlockInfo
Abbrevs	Bitcode/BitstreamWriter.h	/^    std::vector<BitCodeAbbrev*> Abbrevs;$/;"	m	struct:llvm::BitstreamWriter::BlockInfo
AbortProcessAction	Analysis/Verifier.h	/^  AbortProcessAction,   \/\/\/< verifyModule will print to stderr and abort()$/;"	e	enum:llvm::VerifierFailureAction
AbsoluteFilePath	DebugInfo/DIContext.h	/^    AbsoluteFilePath = 1 << 1,$/;"	e	enum:llvm::DILineInfoSpecifier::Specification
AbsolutePseudoSection	MC/MCSymbol.h	/^    static const MCSection *AbsolutePseudoSection;$/;"	m	class:llvm::MCSymbol
AbstractLatticeFunction	Analysis/SparsePropagation.h	/^  AbstractLatticeFunction(LatticeVal undefVal, LatticeVal overdefinedVal,$/;"	f	class:llvm::AbstractLatticeFunction
AbstractLatticeFunction	Analysis/SparsePropagation.h	/^class AbstractLatticeFunction {$/;"	c	namespace:llvm
AbstractScope	CodeGen/LexicalScopes.h	/^  bool AbstractScope;                            \/\/ Abstract Scope$/;"	m	class:llvm::LexicalScope
AbstractScopeMap	CodeGen/LexicalScopes.h	/^  DenseMap<const MDNode *, LexicalScope *> AbstractScopeMap;$/;"	m	class:llvm::LexicalScopes
AbstractScopesList	CodeGen/LexicalScopes.h	/^  SmallVector<LexicalScope *, 4>AbstractScopesList;$/;"	m	class:llvm::LexicalScopes
AccessTy	Transforms/Utils/AddrModeMatcher.h	/^  Type *AccessTy;$/;"	m	class:llvm::AddressingModeMatcher
AccessType	Analysis/AliasSetTracker.h	/^  enum AccessType {$/;"	g	class:llvm::AliasSet
Acquire	Instructions.h	/^  Acquire = 4,$/;"	e	enum:llvm::AtomicOrdering
AcquireRelease	Instructions.h	/^  AcquireRelease = 6,$/;"	e	enum:llvm::AtomicOrdering
Add	ADT/FoldingSet.h	/^  inline void Add(const T &x) { FoldingSetTrait<T>::Profile(x, *this); }$/;"	f	class:llvm::FoldingSetNodeID
Add	ADT/ImmutableIntervalMap.h	/^  TreeTy *Add(TreeTy *T, value_type_ref V) {$/;"	f	class:llvm::ImutIntervalAVLFactory
Add	Bitcode/BitCodes.h	/^  void Add(const BitCodeAbbrevOp &OpInfo) {$/;"	f	class:llvm::BitCodeAbbrev
Add	Instructions.h	/^    Add,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
Add	MC/MCExpr.h	/^    Add,  \/\/\/< Addition.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
Add	Support/Registry.h	/^      Add(const char *Name, const char *Desc)$/;"	f	class:llvm::Registry::Add
Add	Support/Registry.h	/^    class Add {$/;"	c	class:llvm::Registry
AddAsInput	Analysis/PHITransAddr.h	/^  Value *AddAsInput(Value *V) {$/;"	f	class:llvm::PHITransAddr
AddBlankLine	MC/MCStreamer.h	/^    virtual void AddBlankLine() {}$/;"	f	class:llvm::MCStreamer
AddBoolean	ADT/FoldingSet.h	/^  void AddBoolean(bool B) { AddInteger(B ? 1U : 0U); }$/;"	f	class:llvm::FoldingSetNodeID
AddComment	MC/MCStreamer.h	/^    virtual void AddComment(const Twine &T) {}$/;"	f	class:llvm::MCStreamer
AddFPMathTag	IRBuilder.h	/^  Instruction *AddFPMathTag(Instruction *I, MDNode *FPMathTag) const {$/;"	f	class:llvm::IRBuilder
AddLiveOutRegInfo	CodeGen/FunctionLoweringInfo.h	/^  void AddLiveOutRegInfo(unsigned Reg, unsigned NumSignBits,$/;"	f	class:llvm::FunctionLoweringInfo
AddNewSourceBuffer	Support/SourceMgr.h	/^  unsigned AddNewSourceBuffer(MemoryBuffer *F, SMLoc IncludeLoc) {$/;"	f	class:llvm::SourceMgr
AddOperator	Operator.h	/^class AddOperator$/;"	c	namespace:llvm
AddPromotedToType	Target/TargetLowering.h	/^  void AddPromotedToType(unsigned Opc, MVT OrigVT, MVT DestVT) {$/;"	f	class:llvm::TargetLowering
AddRef	Analysis/CallGraph.h	/^  void AddRef() { ++NumReferences; }$/;"	f	class:llvm::CallGraphNode
AdditionalVals	Support/CommandLine.h	/^  unsigned AdditionalVals;$/;"	m	struct:llvm::cl::multi_val
AdditionalVals	Support/CommandLine.h	/^  unsigned AdditionalVals;\/\/ Greater than 0 for multi-valued option.$/;"	m	class:llvm::cl::Option
Addr	Analysis/PHITransAddr.h	/^  Value *Addr;$/;"	m	class:llvm::PHITransAddr
AddrDelta	MC/MCAssembler.h	/^  const MCExpr *AddrDelta;$/;"	m	class:llvm::MCDwarfCallFrameFragment
AddrDelta	MC/MCAssembler.h	/^  const MCExpr *AddrDelta;$/;"	m	class:llvm::MCDwarfLineAddrFragment
AddrLabelSymbols	CodeGen/MachineModuleInfo.h	/^  MMIAddrLabelMap *AddrLabelSymbols;$/;"	m	class:llvm::MachineModuleInfo
AddrMode	AddressingMode.h	/^  AddrMode() : BaseGV(0), BaseOffs(0), HasBaseReg(false), Scale(0) {}$/;"	f	struct:llvm::AddrMode
AddrMode	AddressingMode.h	/^struct AddrMode {$/;"	s	namespace:llvm
AddrMode	Transforms/Utils/AddrModeMatcher.h	/^  ExtAddrMode &AddrMode;$/;"	m	class:llvm::AddressingModeMatcher
AddrModeInsts	Transforms/Utils/AddrModeMatcher.h	/^  SmallVectorImpl<Instruction*> &AddrModeInsts;$/;"	m	class:llvm::AddressingModeMatcher
Address	Analysis/MemoryDependenceAnalysis.h	/^    Value *Address;$/;"	m	class:llvm::NonLocalDepResult
Address	CodeGen/MachineCodeInfo.h	/^  void *Address; \/\/ The address of the function in memory$/;"	m	class:llvm::MachineCodeInfo
Address	ExecutionEngine/JITEventListener.h	/^    uintptr_t Address;$/;"	m	struct:llvm::JITEvent_EmittedFunctionDetails::LineStart
Address	Object/MachOFormat.h	/^    uint32_t Address;$/;"	m	struct:llvm::object::macho::Section
Address	Object/MachOFormat.h	/^    uint64_t Address;$/;"	m	struct:llvm::object::macho::Section64
Address	Support/Memory.h	/^    void *Address;    \/\/\/< Address of first byte of memory area$/;"	m	class:llvm::sys::MemoryBlock
AddressMapConfig	ExecutionEngine/ExecutionEngine.h	/^  struct AddressMapConfig : public ValueMapConfig<const GlobalValue*> {$/;"	s	class:llvm::ExecutionEngineState
AddressOfEntryPoint	Support/COFF.h	/^    uint32_t AddressOfEntryPoint; \/\/ RVA$/;"	m	struct:llvm::COFF::PEHeader
AddressOfNewExeHeader	Support/COFF.h	/^    uint32_t AddressOfNewExeHeader;$/;"	m	struct:llvm::COFF::DOSHeader
AddressOfRelocationTable	Support/COFF.h	/^    uint16_t AddressOfRelocationTable;$/;"	m	struct:llvm::COFF::DOSHeader
AddressSafety	Attributes.h	/^    AddressSafety   = 1,   \/\/\/< Address safety checking is on.$/;"	e	enum:llvm::Attributes::AttrVal
AddressSpace	DataLayout.h	/^  uint32_t            AddressSpace;   \/\/\/< Address space for the pointer type$/;"	m	struct:llvm::PointerAlignElem
AddressTaken	CodeGen/MachineBasicBlock.h	/^  bool AddressTaken;$/;"	m	class:llvm::MachineBasicBlock
AddressType	CodeGen/MachineRelocation.h	/^  enum AddressType {$/;"	g	class:llvm::MachineRelocation
AddressingModeMatcher	Transforms/Utils/AddrModeMatcher.h	/^  AddressingModeMatcher(SmallVectorImpl<Instruction*> &AMI,$/;"	f	class:llvm::AddressingModeMatcher
AddressingModeMatcher	Transforms/Utils/AddrModeMatcher.h	/^class AddressingModeMatcher {$/;"	c	namespace:llvm
AdjEdgeItr	CodeGen/PBQP/Graph.h	/^    typedef AdjEdgeList::iterator AdjEdgeItr;$/;"	t	class:PBQP::Graph
AdjEdgeList	CodeGen/PBQP/Graph.h	/^    typedef std::list<EdgeItr> AdjEdgeList;$/;"	t	class:PBQP::Graph
AdjustBlockAddressRefCount	BasicBlock.h	/^  void AdjustBlockAddressRefCount(int Amt) {$/;"	f	class:llvm::BasicBlock
AdjustsStack	CodeGen/MachineFrameInfo.h	/^  bool AdjustsStack;$/;"	m	class:llvm::MachineFrameInfo
AdvanceCycle	CodeGen/ScheduleHazardRecognizer.h	/^  virtual void AdvanceCycle() {}$/;"	f	class:llvm::ScheduleHazardRecognizer
AdvanceIfNotValid	ADT/SmallPtrSet.h	/^  void AdvanceIfNotValid() {$/;"	f	class:llvm::SmallPtrSetIteratorImpl
AdvancePastEmptyBuckets	ADT/DenseMap.h	/^  void AdvancePastEmptyBuckets() {$/;"	f	class:llvm::DenseMapIterator
AdvancePastEmptyBuckets	ADT/StringMap.h	/^  void AdvancePastEmptyBuckets() {$/;"	f	class:llvm::StringMapConstIterator
AdvanceToFirstNonZero	ADT/SparseBitVector.h	/^    void AdvanceToFirstNonZero() {$/;"	f	class:llvm::SparseBitVector::SparseBitVectorIterator
AdvanceToNextNonZero	ADT/SparseBitVector.h	/^    void AdvanceToNextNonZero() {$/;"	f	class:llvm::SparseBitVector::SparseBitVectorIterator
AfterLegalizeDAG	CodeGen/SelectionDAG.h	/^  AfterLegalizeDAG$/;"	e	enum:llvm::CombineLevel
AfterLegalizeTypes	CodeGen/SelectionDAG.h	/^  AfterLegalizeTypes,$/;"	e	enum:llvm::CombineLevel
AfterLegalizeVectorOps	CodeGen/SelectionDAG.h	/^  AfterLegalizeVectorOps,$/;"	e	enum:llvm::CombineLevel
Agent	ExecutionEngine/OProfileWrapper.h	/^  op_agent_t                      Agent;$/;"	m	class:llvm::OProfileWrapper
AggregateArgs	Transforms/Utils/CodeExtractor.h	/^    const bool AggregateArgs;$/;"	m	class:llvm::CodeExtractor
Aggressive	Support/CodeGen.h	/^      Aggressive   \/\/ -O3$/;"	e	enum:llvm::CodeGenOpt::Level
AliasAnalysis	Analysis/AliasAnalysis.h	/^  AliasAnalysis() : TD(0), TLI(0), AA(0) {}$/;"	f	class:llvm::AliasAnalysis
AliasAnalysis	Analysis/AliasAnalysis.h	/^class AliasAnalysis {$/;"	c	namespace:llvm
AliasAnalysis	DefaultPasses.h	/^    AliasAnalysis,$/;"	e	enum:llvm::StandardPass::StandardSet
AliasFor	Support/CommandLine.h	/^  Option *AliasFor;$/;"	m	class:llvm::cl::alias
AliasList	Module.h	/^  AliasListType AliasList;        \/\/\/< The Aliases in the module$/;"	m	class:llvm::Module
AliasListType	Module.h	/^  typedef iplist<GlobalAlias> AliasListType;$/;"	t	class:llvm::Module
AliasNode	Support/YAMLParser.h	/^  AliasNode(OwningPtr<Document> &D, StringRef Val)$/;"	f	class:llvm::yaml::AliasNode
AliasNode	Support/YAMLParser.h	/^class AliasNode : public Node {$/;"	c	namespace:llvm::yaml
AliasResult	Analysis/AliasAnalysis.h	/^  enum AliasResult {$/;"	g	class:llvm::AliasAnalysis
AliasSet	Analysis/AliasSetTracker.h	/^  AliasSet() : PtrList(0), PtrListEnd(&PtrList), Forward(0), RefCount(0),$/;"	f	class:llvm::AliasSet
AliasSet	Analysis/AliasSetTracker.h	/^class AliasSet : public ilist_node<AliasSet> {$/;"	c	namespace:llvm
AliasSetTracker	Analysis/AliasSetTracker.h	/^  explicit AliasSetTracker(AliasAnalysis &aa) : AA(aa) {}$/;"	f	class:llvm::AliasSetTracker
AliasSetTracker	Analysis/AliasSetTracker.h	/^class AliasSetTracker {$/;"	c	namespace:llvm
AliasSets	Analysis/AliasSetTracker.h	/^  ilist<AliasSet> AliasSets;$/;"	m	class:llvm::AliasSetTracker
AliasType	Analysis/AliasSetTracker.h	/^  enum AliasType {$/;"	g	class:llvm::AliasSet
Align	Object/MachOFormat.h	/^    uint32_t Align;$/;"	m	struct:llvm::object::macho::Section
Align	Object/MachOFormat.h	/^    uint32_t Align;$/;"	m	struct:llvm::object::macho::Section64
AlignDirective	MC/MCAsmInfo.h	/^    const char *AlignDirective;              \/\/ Defaults to "\\t.align\\t"$/;"	m	class:llvm::MCAsmInfo
AlignOf	Support/AlignOf.h	/^struct AlignOf {$/;"	s	namespace:llvm
AlignType	DataLayout.h	/^  unsigned AlignType    : 8;  \/\/\/< Alignment type (AlignTypeEnum)$/;"	m	struct:llvm::LayoutAlignElem
AlignTypeEnum	DataLayout.h	/^enum AlignTypeEnum {$/;"	g	namespace:llvm
AlignedCharArrayImpl	Support/AlignOf.h	/^template <> struct AlignedCharArrayImpl<1> { char aligned; };$/;"	s	namespace:llvm
AlignedCharArrayImpl	Support/AlignOf.h	/^template <> struct AlignedCharArrayImpl<2> { short aligned; };$/;"	s	namespace:llvm
AlignedCharArrayImpl	Support/AlignOf.h	/^template <> struct AlignedCharArrayImpl<4> { int aligned; };$/;"	s	namespace:llvm
AlignedCharArrayImpl	Support/AlignOf.h	/^template <> struct AlignedCharArrayImpl<8> { double aligned; };$/;"	s	namespace:llvm
AlignedCharArrayUnion	Support/AlignOf.h	/^union AlignedCharArrayUnion {$/;"	u	namespace:llvm
AlignedOnly	Transforms/Vectorize.h	/^  bool AlignedOnly;$/;"	m	struct:llvm::VectorizeConfig
AlignerImpl	Support/AlignOf.h	/^  class AlignerImpl {$/;"	c	union:llvm::AlignedCharArrayUnion
Alignment	Attributes.h	/^    Alignment       = 2,   \/\/\/< Alignment of parameter (5 bits)$/;"	e	enum:llvm::Attributes::AttrVal
Alignment	CodeGen/MachineBasicBlock.h	/^  unsigned Alignment;$/;"	m	class:llvm::MachineBasicBlock
Alignment	CodeGen/MachineConstantPool.h	/^  unsigned Alignment;$/;"	m	class:llvm::MachineConstantPoolEntry
Alignment	CodeGen/MachineFrameInfo.h	/^    unsigned Alignment;$/;"	m	struct:llvm::MachineFrameInfo::StackObject
Alignment	CodeGen/MachineFunction.h	/^  unsigned Alignment;$/;"	m	class:llvm::MachineFunction
Alignment	CodeGen/SelectionDAGNodes.h	/^  unsigned Alignment;  \/\/ Minimum alignment requirement of CP (not log2 value).$/;"	m	class:llvm::ConstantPoolSDNode
Alignment	MC/MCAssembler.h	/^  unsigned Alignment;$/;"	m	class:llvm::MCAlignFragment
Alignment	MC/MCAssembler.h	/^  unsigned Alignment;$/;"	m	class:llvm::MCSectionData
Alignment	MC/MCRegisterInfo.h	/^  const uint16_t RegSize, Alignment; \/\/ Size & Alignment of register in bytes$/;"	m	class:llvm::MCRegisterClass
Alignment	Support/AlignOf.h	/^  enum { Alignment =$/;"	e	enum:llvm::AlignOf::__anon117
Alignment	Target/TargetJITInfo.h	/^      size_t Alignment;$/;"	m	struct:llvm::TargetJITInfo::StubLayout
Alignment	Target/TargetLowering.h	/^    uint16_t Alignment;$/;"	m	struct:llvm::TargetLowering::ArgListEntry
AlignmentCalcImpl	Support/AlignOf.h	/^  AlignmentCalcImpl() {} \/\/ Never instantiate.$/;"	f	struct:llvm::AlignmentCalcImpl
AlignmentCalcImpl	Support/AlignOf.h	/^struct AlignmentCalcImpl {$/;"	s	namespace:llvm
AlignmentIsInBytes	MC/MCAsmInfo.h	/^    bool AlignmentIsInBytes;                 \/\/ Defaults to true$/;"	m	class:llvm::MCAsmInfo
Alignment_GreaterEqual_16Bytes	Support/AlignOf.h	/^  enum { Alignment_GreaterEqual_16Bytes = Alignment >= 16 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon121
Alignment_GreaterEqual_2Bytes	Support/AlignOf.h	/^  enum { Alignment_GreaterEqual_2Bytes = Alignment >= 2 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon118
Alignment_GreaterEqual_4Bytes	Support/AlignOf.h	/^  enum { Alignment_GreaterEqual_4Bytes = Alignment >= 4 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon119
Alignment_GreaterEqual_8Bytes	Support/AlignOf.h	/^  enum { Alignment_GreaterEqual_8Bytes = Alignment >= 8 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon120
Alignment_LessEqual_16Bytes	Support/AlignOf.h	/^  enum { Alignment_LessEqual_16Bytes = Alignment <= 16 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon125
Alignment_LessEqual_2Bytes	Support/AlignOf.h	/^  enum { Alignment_LessEqual_2Bytes = Alignment <= 2 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon122
Alignment_LessEqual_4Bytes	Support/AlignOf.h	/^  enum { Alignment_LessEqual_4Bytes = Alignment <= 4 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon123
Alignment_LessEqual_8Bytes	Support/AlignOf.h	/^  enum { Alignment_LessEqual_8Bytes = Alignment <= 8 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon124
Alignments	DataLayout.h	/^  SmallVector<LayoutAlignElem, 16> Alignments;$/;"	m	class:llvm::DataLayout
AliveBlocks	CodeGen/LiveVariables.h	/^    SparseBitVector<> AliveBlocks;$/;"	m	struct:llvm::LiveVariables::VarInfo
AllEnumTypes	DIBuilder.h	/^    SmallVector<Value *, 4> AllEnumTypes;$/;"	m	class:llvm::DIBuilder
AllExceptionTables	ExecutionEngine/ExecutionEngine.h	/^  DenseMap<const Function*, void*> AllExceptionTables;$/;"	m	class:llvm::ExecutionEngine
AllGVs	DIBuilder.h	/^    SmallVector<Value *, 4> AllGVs;$/;"	m	class:llvm::DIBuilder
AllInBundle	CodeGen/MachineInstr.h	/^    AllInBundle      \/\/ Return true if all instructions in bundle have property$/;"	e	enum:llvm::MachineInstr::QueryType
AllNodes	CodeGen/SelectionDAG.h	/^  ilist<SDNode> AllNodes;$/;"	m	class:llvm::SelectionDAG
AllRetainTypes	DIBuilder.h	/^    SmallVector<Value *, 4> AllRetainTypes;$/;"	m	class:llvm::DIBuilder
AllSubprograms	DIBuilder.h	/^    SmallVector<Value *, 4> AllSubprograms;$/;"	m	class:llvm::DIBuilder
AllocBytes	ADT/IntervalMap.h	/^    AllocBytes = (sizeof(LeafBase) + CacheLineBytes-1) & ~(CacheLineBytes-1),$/;"	e	enum:llvm::IntervalMapImpl::NodeSizer::__anon21
Alloca	CodeGen/MachineFrameInfo.h	/^    const AllocaInst *Alloca;$/;"	m	struct:llvm::MachineFrameInfo::StackObject
AllocaInst	Instructions.h	/^class AllocaInst : public UnaryInstruction {$/;"	c	namespace:llvm
Allocatable	MC/MCRegisterInfo.h	/^  const bool Allocatable;$/;"	m	class:llvm::MCRegisterClass
Allocate	MC/MCContext.h	/^    void *Allocate(unsigned Size, unsigned Align = 8) {$/;"	f	class:llvm::MCContext
Allocate	Support/Allocator.h	/^  T *Allocate() { return static_cast<T*>(malloc(sizeof(T))); }$/;"	f	class:llvm::MallocAllocator
Allocate	Support/Allocator.h	/^  T *Allocate() {$/;"	f	class:llvm::BumpPtrAllocator
Allocate	Support/Allocator.h	/^  T *Allocate(size_t Num) {$/;"	f	class:llvm::BumpPtrAllocator
Allocate	Support/Allocator.h	/^  T *Allocate(size_t Num) {$/;"	f	class:llvm::MallocAllocator
Allocate	Support/Allocator.h	/^  T *Allocate(size_t Num, size_t Alignment) {$/;"	f	class:llvm::BumpPtrAllocator
Allocate	Support/Allocator.h	/^  T *Allocate(size_t num = 1) {$/;"	f	class:llvm::SpecificBumpPtrAllocator
Allocate	Support/Allocator.h	/^  void *Allocate(size_t Size, size_t \/*Alignment*\/) { return malloc(Size); }$/;"	f	class:llvm::MallocAllocator
Allocate	Support/Recycler.h	/^  SubClass *Allocate(AllocatorType &Allocator) {$/;"	f	class:llvm::Recycler
Allocate	Support/Recycler.h	/^  T *Allocate(AllocatorType &Allocator) {$/;"	f	class:llvm::Recycler
Allocate	Support/RecyclingAllocator.h	/^  SubClass *Allocate() { return Base.template Allocate<SubClass>(Allocator); }$/;"	f	class:llvm::RecyclingAllocator
Allocate	Support/RecyclingAllocator.h	/^  T *Allocate() { return Base.Allocate(Allocator); }$/;"	f	class:llvm::RecyclingAllocator
AllocateGVsWithCode	ExecutionEngine/ExecutionEngine.h	/^  bool AllocateGVsWithCode;$/;"	m	class:llvm::EngineBuilder
AllocateReg	CodeGen/CallingConvLower.h	/^  unsigned AllocateReg(const uint16_t *Regs, const uint16_t *ShadowRegs,$/;"	f	class:llvm::CCState
AllocateReg	CodeGen/CallingConvLower.h	/^  unsigned AllocateReg(const uint16_t *Regs, unsigned NumRegs) {$/;"	f	class:llvm::CCState
AllocateReg	CodeGen/CallingConvLower.h	/^  unsigned AllocateReg(unsigned Reg) {$/;"	f	class:llvm::CCState
AllocateReg	CodeGen/CallingConvLower.h	/^  unsigned AllocateReg(unsigned Reg, unsigned ShadowReg) {$/;"	f	class:llvm::CCState
AllocateStack	CodeGen/CallingConvLower.h	/^  unsigned AllocateStack(unsigned Size, unsigned Align) {$/;"	f	class:llvm::CCState
AllocateStack	CodeGen/CallingConvLower.h	/^  unsigned AllocateStack(unsigned Size, unsigned Align, unsigned ShadowReg) {$/;"	f	class:llvm::CCState
Allocator	ADT/ImmutableList.h	/^  uintptr_t Allocator;$/;"	m	class:llvm::ImmutableListFactory
Allocator	ADT/ImmutableSet.h	/^  uintptr_t Allocator;$/;"	m	class:llvm::ImutAVLFactory
Allocator	ADT/IntervalMap.h	/^                             AllocBytes, CacheLineBytes> Allocator;$/;"	t	struct:llvm::IntervalMapImpl::NodeSizer
Allocator	ADT/IntervalMap.h	/^  typedef typename Sizer::Allocator Allocator;$/;"	t	class:llvm::IntervalMap
Allocator	ADT/ScopedHashTable.h	/^  AllocatorTy Allocator;$/;"	m	class:llvm::ScopedHashTable
Allocator	ADT/StringMap.h	/^  AllocatorTy Allocator;$/;"	m	class:llvm::StringMap
Allocator	CodeGen/LiveInterval.h	/^    typedef BumpPtrAllocator Allocator;$/;"	t	class:llvm::VNInfo
Allocator	CodeGen/MachineFunction.h	/^  BumpPtrAllocator Allocator;$/;"	m	class:llvm::MachineFunction
Allocator	CodeGen/MachineLoopRanges.h	/^  MapAllocator Allocator;$/;"	m	class:llvm::MachineLoopRanges
Allocator	CodeGen/MachineLoopRanges.h	/^  typedef Map::Allocator Allocator;$/;"	t	class:llvm::MachineLoopRange
Allocator	CodeGen/SelectionDAG.h	/^  BumpPtrAllocator Allocator;$/;"	m	class:llvm::SelectionDAG
Allocator	MC/MCContext.h	/^    BumpPtrAllocator Allocator;$/;"	m	class:llvm::MCContext
Allocator	Support/Allocator.h	/^  BumpPtrAllocator Allocator;$/;"	m	class:llvm::SpecificBumpPtrAllocator
Allocator	Support/Allocator.h	/^  MallocAllocator Allocator;$/;"	m	class:llvm::MallocSlabAllocator
Allocator	Support/Allocator.h	/^  SlabAllocator &Allocator;$/;"	m	class:llvm::BumpPtrAllocator
Allocator	Support/RecyclingAllocator.h	/^  AllocatorType Allocator;$/;"	m	class:llvm::RecyclingAllocator
Allocator	Support/TargetRegistry.h	/^    static AsmPrinter *Allocator(TargetMachine &TM, MCStreamer &Streamer) {$/;"	f	struct:llvm::RegisterAsmPrinter
Allocator	Support/TargetRegistry.h	/^    static MCAsmBackend *Allocator(const Target &T, StringRef Triple,$/;"	f	struct:llvm::RegisterMCAsmBackend
Allocator	Support/TargetRegistry.h	/^    static MCAsmInfo *Allocator(const Target &T, StringRef TT) {$/;"	f	struct:llvm::RegisterMCAsmInfo
Allocator	Support/TargetRegistry.h	/^    static MCCodeEmitter *Allocator(const MCInstrInfo &II,$/;"	f	struct:llvm::RegisterMCCodeEmitter
Allocator	Support/TargetRegistry.h	/^    static MCCodeGenInfo *Allocator(StringRef TT, Reloc::Model RM,$/;"	f	struct:llvm::RegisterMCCodeGenInfo
Allocator	Support/TargetRegistry.h	/^    static MCInstrAnalysis *Allocator(const MCInstrInfo *Info) {$/;"	f	struct:llvm::RegisterMCInstrAnalysis
Allocator	Support/TargetRegistry.h	/^    static MCInstrInfo *Allocator() {$/;"	f	struct:llvm::RegisterMCInstrInfo
Allocator	Support/TargetRegistry.h	/^    static MCRegisterInfo *Allocator(StringRef TT) {$/;"	f	struct:llvm::RegisterMCRegInfo
Allocator	Support/TargetRegistry.h	/^    static MCSubtargetInfo *Allocator(StringRef TT, StringRef CPU,$/;"	f	struct:llvm::RegisterMCSubtargetInfo
Allocator	Support/TargetRegistry.h	/^    static MCTargetAsmLexer *Allocator(const Target &T,$/;"	f	struct:llvm::RegisterMCAsmLexer
Allocator	Support/TargetRegistry.h	/^    static MCTargetAsmParser *Allocator(MCSubtargetInfo &STI, MCAsmParser &P) {$/;"	f	struct:llvm::RegisterMCAsmParser
Allocator	Support/TargetRegistry.h	/^    static TargetMachine *Allocator(const Target &T, StringRef TT,$/;"	f	struct:llvm::RegisterTargetMachine
Allocator	Transforms/Utils/SSAUpdaterImpl.h	/^  BumpPtrAllocator Allocator;$/;"	m	class:llvm::SSAUpdaterImpl
AllocatorCRefTy	ADT/ScopedHashTable.h	/^  typedef typename ReferenceAdder<const AllocatorTy>::result AllocatorCRefTy;$/;"	t	class:llvm::ScopedHashTable
AllocatorCRefTy	ADT/StringMap.h	/^  typedef typename ReferenceAdder<const AllocatorTy>::result AllocatorCRefTy;$/;"	t	class:llvm::StringMap
AllocatorRefTy	ADT/ScopedHashTable.h	/^  typedef typename ReferenceAdder<AllocatorTy>::result AllocatorRefTy;$/;"	t	class:llvm::ScopedHashTable
AllocatorRefTy	ADT/StringMap.h	/^  typedef typename ReferenceAdder<AllocatorTy>::result AllocatorRefTy;$/;"	t	class:llvm::StringMap
AllowFPOpFusion	Target/TargetOptions.h	/^    FPOpFusion::FPOpFusionMode AllowFPOpFusion;$/;"	m	class:llvm::TargetOptions
AllowNameToStartWithDigit	MC/MCAsmInfo.h	/^    bool AllowNameToStartWithDigit;$/;"	m	class:llvm::MCAsmInfo
AllowPeriodsInName	MC/MCAsmInfo.h	/^    bool AllowPeriodsInName;$/;"	m	class:llvm::MCAsmInfo
AllowQuotesInName	MC/MCAsmInfo.h	/^    bool AllowQuotesInName;$/;"	m	class:llvm::MCAsmInfo
AllowTemporaryLabels	MC/MCContext.h	/^    bool AllowTemporaryLabels;$/;"	m	class:llvm::MCContext
AllowUTF8	MC/MCAsmInfo.h	/^    bool AllowUTF8;$/;"	m	class:llvm::MCAsmInfo
AllowedSet	CodeGen/RegAllocPBQP.h	/^    typedef SmallVector<unsigned, 16> AllowedSet;$/;"	t	class:llvm::PBQPRAProblem
AllowedSetMap	CodeGen/RegAllocPBQP.h	/^    typedef DenseMap<unsigned, AllowedSet> AllowedSetMap;$/;"	t	class:llvm::PBQPRAProblem
AlwaysInline	Attributes.h	/^    AlwaysInline    = 3,   \/\/\/< inline=always$/;"	e	enum:llvm::Attributes::AttrVal
AlwaysInlineCost	Analysis/InlineCost.h	/^      AlwaysInlineCost = INT_MIN,$/;"	e	enum:llvm::InlineCost::SentinelValues
Amp	MC/MCParser/MCAsmLexer.h	/^    Amp, AmpAmp, Exclaim, ExclaimEqual, Percent, Hash,$/;"	e	enum:llvm::AsmToken::TokenKind
AmpAmp	MC/MCParser/MCAsmLexer.h	/^    Amp, AmpAmp, Exclaim, ExclaimEqual, Percent, Hash,$/;"	e	enum:llvm::AsmToken::TokenKind
AnUsageMap	PassManagers.h	/^  DenseMap<Pass *, AnalysisUsage *> AnUsageMap;$/;"	m	class:llvm::PMTopLevelManager
AnalysisID	Pass.h	/^typedef const void* AnalysisID;$/;"	t	namespace:llvm
AnalysisImpls	PassAnalysisSupport.h	/^  std::vector<std::pair<AnalysisID, Pass*> > AnalysisImpls;$/;"	m	class:llvm::AnalysisResolver
AnalysisResolver	PassAnalysisSupport.h	/^  explicit AnalysisResolver(PMDataManager &P) : PM(P) { }$/;"	f	class:llvm::AnalysisResolver
AnalysisResolver	PassAnalysisSupport.h	/^class AnalysisResolver {$/;"	c	namespace:llvm
AnalysisUsage	PassAnalysisSupport.h	/^  AnalysisUsage() : PreservesAll(false) {}$/;"	f	class:llvm::AnalysisUsage
AnalysisUsage	PassAnalysisSupport.h	/^class AnalysisUsage {$/;"	c	namespace:llvm
Analyze	Analysis/LoopInfoImpl.h	/^Analyze(DominatorTreeBase<BlockT> &DomTree) {$/;"	f	class:llvm::LoopInfoBase
AnalyzeBranch	Target/TargetInstrInfo.h	/^  virtual bool AnalyzeBranch(MachineBasicBlock &MBB, MachineBasicBlock *&TBB,$/;"	f	class:llvm::TargetInstrInfo
Anchor	Support/YAMLParser.h	/^  StringRef Anchor;$/;"	m	class:llvm::yaml::Node
And	ADT/APInt.h	/^  APInt And(const APInt& RHS) const {$/;"	f	class:llvm::APInt
And	ADT/APInt.h	/^inline APInt And(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
And	ADT/APSInt.h	/^  APSInt And(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
And	Instructions.h	/^    And,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
And	MC/MCExpr.h	/^    And,  \/\/\/< Bitwise and.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
Android	ADT/Triple.h	/^    Android,$/;"	e	enum:llvm::Triple::EnvironmentType
Announce	Support/Registry.h	/^    static void Announce(const entry &E) {$/;"	f	class:llvm::Registry
AnonGlobalIDs	Target/Mangler.h	/^  DenseMap<const GlobalValue*, unsigned> AnonGlobalIDs;$/;"	m	class:llvm::Mangler
Anti	CodeGen/ScheduleDAG.h	/^      Anti,        \/\/\/< A register anti-dependedence (aka WAR).$/;"	e	enum:llvm::SDep::Kind
AntiDepBreakMode	Target/TargetSubtargetInfo.h	/^  typedef enum { ANTIDEP_NONE, ANTIDEP_CRITICAL, ANTIDEP_ALL } AntiDepBreakMode;$/;"	t	class:llvm::TargetSubtargetInfo	typeref:enum:llvm::TargetSubtargetInfo::__anon140
Any	Analysis/DependenceAnalysis.h	/^      enum ConstraintKind { Empty, Point, Distance, Line, Any } Kind;$/;"	e	enum:llvm::DependenceAnalysis::Constraint::ConstraintKind
AnyEndianness	Module.h	/^  enum Endianness  { AnyEndianness, LittleEndian, BigEndian };$/;"	e	enum:llvm::Module::Endianness
AnyInBundle	CodeGen/MachineInstr.h	/^    AnyInBundle,     \/\/ Return true if any instruction in bundle has property$/;"	e	enum:llvm::MachineInstr::QueryType
AnyPointerSize	Module.h	/^  enum PointerSize { AnyPointerSize, Pointer32, Pointer64 };$/;"	e	enum:llvm::Module::PointerSize
Anywhere	Analysis/AliasAnalysis.h	/^  enum { Nowhere = 0, ArgumentPointees = 4, Anywhere = 8 | ArgumentPointees };$/;"	e	enum:llvm::AliasAnalysis::__anon29
AppendingLinkage	GlobalValue.h	/^    AppendingLinkage,   \/\/\/< Special purpose, only applies to global arrays$/;"	e	enum:llvm::GlobalValue::LinkageTypes
Apple	ADT/Triple.h	/^    Apple,$/;"	e	enum:llvm::Triple::VendorType
Arch	ADT/Triple.h	/^  ArchType Arch;$/;"	m	class:llvm::Triple
ArchType	ADT/Triple.h	/^  enum ArchType {$/;"	g	class:llvm::Triple
Archive	Bitcode/Archive.h	/^class Archive {$/;"	c	namespace:llvm
Archive	Object/Archive.h	/^class Archive : public Binary {$/;"	c	namespace:llvm::object
ArchiveMember	Bitcode/Archive.h	/^class ArchiveMember : public ilist_node<ArchiveMember> {$/;"	c	namespace:llvm
Archive_FileType	Support/PathV1.h	/^    Archive_FileType,                  \/\/\/< ar style archive file$/;"	e	enum:llvm::sys::LLVMFileType
Area	CodeGen/MachineLoopRanges.h	/^  unsigned Area;$/;"	m	class:llvm::MachineLoopRange
ArgC	Support/PrettyStackTrace.h	/^    int ArgC;$/;"	m	class:llvm::PrettyStackTraceProgram
ArgDbgValues	CodeGen/FunctionLoweringInfo.h	/^  SmallVector<MachineInstr*, 8> ArgDbgValues;$/;"	m	class:llvm::FunctionLoweringInfo
ArgFlagsTy	Target/TargetCallingConv.h	/^    ArgFlagsTy() : Flags(0) { }$/;"	f	struct:llvm::ISD::ArgFlagsTy
ArgFlagsTy	Target/TargetCallingConv.h	/^  struct ArgFlagsTy {$/;"	s	namespace:llvm::ISD
ArgKind	Intrinsics.h	/^    enum ArgKind {$/;"	g	struct:llvm::Intrinsic::IITDescriptor
ArgListEntry	Target/TargetLowering.h	/^    ArgListEntry() : isSExt(false), isZExt(false), isInReg(false),$/;"	f	struct:llvm::TargetLowering::ArgListEntry
ArgListEntry	Target/TargetLowering.h	/^  struct ArgListEntry {$/;"	s	class:llvm::TargetLowering
ArgListTy	Target/TargetLowering.h	/^  typedef std::vector<ArgListEntry> ArgListTy;$/;"	t	class:llvm::TargetLowering
ArgNames	TableGen/Record.h	/^  std::vector<std::string> ArgNames;$/;"	m	class:llvm::DagInit
ArgStr	Support/CommandLine.h	/^  const char *ArgStr;     \/\/ The argument string itself (ex: "help", "o")$/;"	m	class:llvm::cl::Option
ArgStr	Support/CommandLine.h	/^  const char *ArgStr;$/;"	m	class:llvm::cl::parser
ArgV	Support/PrettyStackTrace.h	/^    const char *const *ArgV;$/;"	m	class:llvm::PrettyStackTraceProgram
Args	TableGen/Record.h	/^  std::vector<Init*> Args;$/;"	m	class:llvm::DagInit
Args	Target/TargetLowering.h	/^    ArgListTy &Args;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
Argument	Argument.h	/^class Argument : public Value, public ilist_node<Argument> {$/;"	c	namespace:llvm
Argument	Intrinsics.h	/^      Argument, ExtendVecArgument, TruncVecArgument$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
ArgumentInfo	Analysis/ProfileDataTypes.h	/^  ArgumentInfo  = 1,   \/* The command line argument block *\/$/;"	e	enum:ProfilingType
ArgumentList	Function.h	/^  mutable ArgumentListType ArgumentList;  \/\/\/< The formal arguments$/;"	m	class:llvm::Function
ArgumentListType	Function.h	/^  typedef iplist<Argument> ArgumentListType;$/;"	t	class:llvm::Function
ArgumentPointees	Analysis/AliasAnalysis.h	/^  enum { Nowhere = 0, ArgumentPointees = 4, Anywhere = 8 | ArgumentPointees };$/;"	e	enum:llvm::AliasAnalysis::__anon29
ArgumentVal	Value.h	/^    ArgumentVal,              \/\/ This is an instance of Argument$/;"	e	enum:llvm::Value::ValueTy
Argument_Info	Intrinsics.h	/^      unsigned Argument_Info;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon60
Array	Bitcode/BitCodes.h	/^    Array = 3,  \/\/ A sequence of fields, next field species elt encoding.$/;"	e	enum:llvm::BitCodeAbbrevOp::Encoding
ArrayRef	ADT/ArrayRef.h	/^      : ArrayRef<T>(Arr) {}$/;"	f	class:llvm::MutableArrayRef
ArrayRef	ADT/ArrayRef.h	/^    ArrayRef(const T *begin, const T *end)$/;"	f	class:llvm::ArrayRef
ArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ ArrayRef() : Data(0), Length(0) {}$/;"	f	class:llvm::ArrayRef
ArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ ArrayRef(const SmallVectorTemplateCommon<T, U> &Vec)$/;"	f	class:llvm::ArrayRef
ArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ ArrayRef(const T &OneElt)$/;"	f	class:llvm::ArrayRef
ArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ ArrayRef(const T *data, size_t length)$/;"	f	class:llvm::ArrayRef
ArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ ArrayRef(const std::vector<T, A> &Vec)$/;"	f	class:llvm::ArrayRef
ArrayRef	ADT/ArrayRef.h	/^  class ArrayRef {$/;"	c	namespace:llvm
ArrayTyID	Type.h	/^    ArrayTyID,       \/\/\/< 13: Arrays$/;"	e	enum:llvm::Type::TypeID
ArrayType	DerivedTypes.h	/^class ArrayType : public SequentialType {$/;"	c	namespace:llvm
AsciiDirective	MC/MCAsmInfo.h	/^    const char *AsciiDirective;              \/\/ Defaults to "\\t.ascii\\t"$/;"	m	class:llvm::MCAsmInfo
AscizDirective	MC/MCAsmInfo.h	/^    const char *AscizDirective;              \/\/ Defaults to "\\t.asciz\\t"$/;"	m	class:llvm::MCAsmInfo
AsmCond	MC/MCParser/AsmCond.h	/^  AsmCond() : TheCond(NoCond), CondMet(false), Ignore(false) {}$/;"	f	class:llvm::AsmCond
AsmCond	MC/MCParser/AsmCond.h	/^class AsmCond {$/;"	c	namespace:llvm
AsmDialect	InlineAsm.h	/^  enum AsmDialect {$/;"	g	class:llvm::InlineAsm
AsmInfo	Target/TargetMachine.h	/^  const MCAsmInfo *AsmInfo;$/;"	m	class:llvm::TargetMachine
AsmLexer	MC/MCParser/AsmLexer.h	/^class AsmLexer : public MCAsmLexer {$/;"	c	namespace:llvm
AsmOperandInfo	Target/TargetLowering.h	/^    AsmOperandInfo(const AsmOperandInfo &info)$/;"	f	struct:llvm::TargetLowering::AsmOperandInfo
AsmOperandInfo	Target/TargetLowering.h	/^    AsmOperandInfo(const InlineAsm::ConstraintInfo &info)$/;"	f	struct:llvm::TargetLowering::AsmOperandInfo
AsmOperandInfo	Target/TargetLowering.h	/^  struct AsmOperandInfo : public InlineAsm::ConstraintInfo {$/;"	s	class:llvm::TargetLowering
AsmOperandInfoVector	Target/TargetLowering.h	/^  typedef std::vector<AsmOperandInfo> AsmOperandInfoVector;$/;"	t	class:llvm::TargetLowering
AsmPrinter	CodeGen/AsmPrinter.h	/^  class AsmPrinter : public MachineFunctionPass {$/;"	c	namespace:llvm
AsmPrinterCtorFn	Support/TargetRegistry.h	/^    AsmPrinterCtorTy AsmPrinterCtorFn;$/;"	m	class:llvm::Target
AsmPrinterCtorTy	Support/TargetRegistry.h	/^    typedef AsmPrinter *(*AsmPrinterCtorTy)(TargetMachine &TM,$/;"	t	class:llvm::Target
AsmPrinterFlags	CodeGen/MachineInstr.h	/^  uint8_t AsmPrinterFlags;              \/\/ Various bits of information used by$/;"	m	class:llvm::MachineInstr
AsmStreamerCtorFn	Support/TargetRegistry.h	/^    AsmStreamerCtorTy AsmStreamerCtorFn;$/;"	m	class:llvm::Target
AsmStreamerCtorTy	Support/TargetRegistry.h	/^    typedef MCStreamer *(*AsmStreamerCtorTy)(MCContext &Ctx,$/;"	t	class:llvm::Target
AsmString	InlineAsm.h	/^  std::string AsmString, Constraints;$/;"	m	class:llvm::InlineAsm
AsmToken	MC/MCParser/MCAsmLexer.h	/^  AsmToken() {}$/;"	f	class:llvm::AsmToken
AsmToken	MC/MCParser/MCAsmLexer.h	/^  AsmToken(TokenKind _Kind, StringRef _Str, int64_t _IntVal = 0)$/;"	f	class:llvm::AsmToken
AsmToken	MC/MCParser/MCAsmLexer.h	/^class AsmToken {$/;"	c	namespace:llvm
Assembler	MC/MCAsmLayout.h	/^  MCAssembler &Assembler;$/;"	m	class:llvm::MCAsmLayout
Assembler	MC/MCObjectStreamer.h	/^  MCAssembler *Assembler;$/;"	m	class:llvm::MCObjectStreamer
AssemblerDialect	MC/MCAsmInfo.h	/^    unsigned AssemblerDialect;               \/\/ Defaults to 0$/;"	m	class:llvm::MCAsmInfo
AssemblyAnnotationWriter	Assembly/AssemblyAnnotationWriter.h	/^class AssemblyAnnotationWriter {$/;"	c	namespace:llvm
Assert	Support/ValueHandle.h	/^    Assert,$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
AssertSext	CodeGen/ISDOpcodes.h	/^    AssertSext, AssertZext,$/;"	e	enum:llvm::ISD::NodeType
AssertZext	CodeGen/ISDOpcodes.h	/^    AssertSext, AssertZext,$/;"	e	enum:llvm::ISD::NodeType
AssertingVH	Support/ValueHandle.h	/^  AssertingVH() : ThePtr(0) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	Support/ValueHandle.h	/^  AssertingVH() : ValueHandleBase(Assert) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	Support/ValueHandle.h	/^  AssertingVH(ValueTy *P) : ThePtr(P) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	Support/ValueHandle.h	/^  AssertingVH(ValueTy *P) : ValueHandleBase(Assert, GetAsValue(P)) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	Support/ValueHandle.h	/^  AssertingVH(const AssertingVH &RHS) : ValueHandleBase(Assert, RHS) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	Support/ValueHandle.h	/^class AssertingVH$/;"	c	namespace:llvm
AssociatedLoop	Analysis/DependenceAnalysis.h	/^      const Loop *AssociatedLoop;$/;"	m	class:llvm::DependenceAnalysis::Constraint
At	MC/MCParser/MCAsmLexer.h	/^    Greater, GreaterEqual, GreaterGreater, At$/;"	e	enum:llvm::AsmToken::TokenKind
AtEnd	ADT/SparseBitVector.h	/^    bool AtEnd;$/;"	m	class:llvm::SparseBitVector::SparseBitVectorIterator
AtEndOfStream	Bitcode/BitstreamReader.h	/^  bool AtEndOfStream() {$/;"	f	class:llvm::BitstreamCursor
Atom	MC/MCAssembler.h	/^  MCSymbolData *Atom;$/;"	m	class:llvm::MCFragment
AtomAllocationTracker	MC/MCModule.h	/^  SmallPtrSet<MCAtom*, 8> AtomAllocationTracker;$/;"	m	class:llvm::MCModule
AtomType	MC/MCAtom.h	/^  typedef enum { TextAtom, DataAtom } AtomType;$/;"	t	class:llvm::MCAtom	typeref:enum:llvm::MCAtom::__anon64
AtomicCmpXchgInst	Instructions.h	/^class AtomicCmpXchgInst : public Instruction {$/;"	c	namespace:llvm
AtomicOrdering	Instructions.h	/^enum AtomicOrdering {$/;"	g	namespace:llvm
AtomicOrderingCodes	Bitcode/LLVMBitCodes.h	/^  enum AtomicOrderingCodes {$/;"	g	namespace:llvm::bitc
AtomicRMWInst	Instructions.h	/^class AtomicRMWInst : public Instruction {$/;"	c	namespace:llvm
AtomicSDNode	CodeGen/SelectionDAGNodes.h	/^  AtomicSDNode(unsigned Opc, DebugLoc dl, SDVTList VTL, EVT MemVT,$/;"	f	class:llvm::AtomicSDNode
AtomicSDNode	CodeGen/SelectionDAGNodes.h	/^class AtomicSDNode : public MemSDNode {$/;"	c	namespace:llvm
AtomicSynchScopeCodes	Bitcode/LLVMBitCodes.h	/^  enum AtomicSynchScopeCodes {$/;"	g	namespace:llvm::bitc
AttrBuilder	Attributes.h	/^  AttrBuilder() : Bits(0) {}$/;"	f	class:llvm::AttrBuilder
AttrBuilder	Attributes.h	/^  AttrBuilder(const AttrBuilder &B) : Bits(B.Bits) {}$/;"	f	class:llvm::AttrBuilder
AttrBuilder	Attributes.h	/^  AttrBuilder(const Attributes &A) : Bits(A.Raw()) {}$/;"	f	class:llvm::AttrBuilder
AttrBuilder	Attributes.h	/^  explicit AttrBuilder(uint64_t B) : Bits(B) {}$/;"	f	class:llvm::AttrBuilder
AttrBuilder	Attributes.h	/^class AttrBuilder {$/;"	c	namespace:llvm
AttrIndex	Attributes.h	/^  enum AttrIndex {$/;"	g	class:llvm::AttrListPtr
AttrList	Attributes.h	/^  AttributeListImpl *AttrList;$/;"	m	class:llvm::AttrListPtr
AttrListPtr	Attributes.h	/^  AttrListPtr() : AttrList(0) {}$/;"	f	class:llvm::AttrListPtr
AttrListPtr	Attributes.h	/^class AttrListPtr {$/;"	c	namespace:llvm
AttrVal	Attributes.h	/^  enum AttrVal {$/;"	g	class:llvm::Attributes
AttributeCodes	Bitcode/LLVMBitCodes.h	/^  enum AttributeCodes {$/;"	g	namespace:llvm::bitc
AttributeList	Function.h	/^  AttrListPtr AttributeList;              \/\/\/< Parameter attributes$/;"	m	class:llvm::Function
AttributeList	Instructions.h	/^  AttrListPtr AttributeList; \/\/\/< parameter attributes for call$/;"	m	class:llvm::CallInst
AttributeList	Instructions.h	/^  AttrListPtr AttributeList;$/;"	m	class:llvm::InvokeInst
AttributeWithIndex	Attributes.h	/^struct AttributeWithIndex {$/;"	s	namespace:llvm
Attributes	Attributes.h	/^  Attributes() : Attrs(0) {}$/;"	f	class:llvm::Attributes
Attributes	Attributes.h	/^  Attributes(AttributesImpl *A) : Attrs(A) {}$/;"	f	class:llvm::Attributes
Attributes	Attributes.h	/^  Attributes(const Attributes &A) : Attrs(A.Attrs) {}$/;"	f	class:llvm::Attributes
Attributes	Attributes.h	/^class Attributes {$/;"	c	namespace:llvm
Attrs	Attributes.h	/^  Attributes Attrs;  \/\/\/< The attributes that are set, or'd together.$/;"	m	struct:llvm::AttributeWithIndex
Attrs	Attributes.h	/^  AttributesImpl *Attrs;$/;"	m	class:llvm::Attributes
AuroraUX	ADT/Triple.h	/^    AuroraUX,$/;"	e	enum:llvm::Triple::OSType
Auxiliary	Support/COFF.h	/^  union Auxiliary {$/;"	u	namespace:llvm::COFF
AuxiliaryFile	Support/COFF.h	/^  struct AuxiliaryFile {$/;"	s	namespace:llvm::COFF
AuxiliaryFunctionDefinition	Support/COFF.h	/^  struct AuxiliaryFunctionDefinition {$/;"	s	namespace:llvm::COFF
AuxiliarySectionDefinition	Support/COFF.h	/^  struct AuxiliarySectionDefinition {$/;"	s	namespace:llvm::COFF
AuxiliaryWeakExternal	Support/COFF.h	/^  struct AuxiliaryWeakExternal {$/;"	s	namespace:llvm::COFF
AuxiliarybfAndefSymbol	Support/COFF.h	/^  struct AuxiliarybfAndefSymbol {$/;"	s	namespace:llvm::COFF
AvailabilityState	Target/TargetLibraryInfo.h	/^  enum AvailabilityState {$/;"	g	class:llvm::TargetLibraryInfo
AvailableAnalysis	PassManagers.h	/^  std::map<AnalysisID, Pass*> AvailableAnalysis;$/;"	m	class:llvm::PMDataManager
AvailableArray	Target/TargetLibraryInfo.h	/^  unsigned char AvailableArray[(LibFunc::NumLibFuncs+3)\/4];$/;"	m	class:llvm::TargetLibraryInfo
AvailableExternallyLinkage	GlobalValue.h	/^    AvailableExternallyLinkage, \/\/\/< Available for inspection, not emission.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
AvailableFeatures	MC/MCInstPrinter.h	/^  unsigned AvailableFeatures;$/;"	m	class:llvm::MCInstPrinter
AvailableFeatures	MC/MCTargetAsmParser.h	/^  unsigned AvailableFeatures;$/;"	m	class:llvm::MCTargetAsmParser
AvailableRegClasses	Target/TargetLowering.h	/^  std::vector<std::pair<EVT, const TargetRegisterClass*> > AvailableRegClasses;$/;"	m	class:llvm::TargetLowering
AvailableVal	Transforms/Utils/SSAUpdaterImpl.h	/^    ValT AvailableVal; \/\/ Value to use in this block.$/;"	m	class:llvm::SSAUpdaterImpl::BBInfo
AvailableVals	Transforms/Utils/SSAUpdaterImpl.h	/^  AvailableValsTy *AvailableVals;$/;"	m	class:llvm::SSAUpdaterImpl
AvailableValsTy	Transforms/Utils/SSAUpdaterImpl.h	/^  typedef DenseMap<BlkT*, ValT> AvailableValsTy;$/;"	t	class:llvm::SSAUpdaterImpl
B	Analysis/DependenceAnalysis.h	/^      const SCEV *B;$/;"	m	class:llvm::DependenceAnalysis::Constraint
B	Analysis/LoopDependenceAnalysis.h	/^    Value *B;$/;"	m	struct:llvm::LoopDependenceAnalysis::DependencePair
BA	CodeGen/MachineOperand.h	/^        const BlockAddress *BA;   \/\/ For MO_BlockAddress.$/;"	m	union:llvm::MachineOperand::__anon36::__anon38::__anon39
BA	CodeGen/SelectionDAGNodes.h	/^  const BlockAddress *BA;$/;"	m	class:llvm::BlockAddressSDNode
BACKEDGE	Analysis/PathNumbering.h	/^  enum EdgeType { NORMAL, BACKEDGE, SPLITEDGE,$/;"	e	enum:llvm::BallLarusEdge::EdgeType
BACKEDGE_PHONY	Analysis/PathNumbering.h	/^    BACKEDGE_PHONY, SPLITEDGE_PHONY, CALLEDGE_PHONY };$/;"	e	enum:llvm::BallLarusEdge::EdgeType
BAD_BINOP	Instructions.h	/^    BAD_BINOP$/;"	e	enum:llvm::AtomicRMWInst::BinOp
BAD_FCMP_PREDICATE	InstrTypes.h	/^    BAD_FCMP_PREDICATE = FCMP_TRUE + 1,$/;"	e	enum:llvm::CmpInst::Predicate
BAD_ICMP_PREDICATE	InstrTypes.h	/^    BAD_ICMP_PREDICATE = ICMP_SLE + 1$/;"	e	enum:llvm::CmpInst::Predicate
BB	Analysis/MemoryDependenceAnalysis.h	/^    BasicBlock *BB;$/;"	m	class:llvm::NonLocalDepEntry
BB	CodeGen/MachineBasicBlock.h	/^  const BasicBlock *BB;$/;"	m	class:llvm::MachineBasicBlock
BB	CodeGen/ScheduleDAGInstrs.h	/^    MachineBasicBlock *BB;$/;"	m	class:llvm::ScheduleDAGInstrs
BB	IRBuilder.h	/^  BasicBlock *BB;$/;"	m	class:llvm::IRBuilderBase
BB	Support/InstIterator.h	/^  _BB_i_t BB;       \/\/ BasicBlocksType::iterator$/;"	m	class:llvm::InstIterator
BB	Transforms/Utils/SSAUpdaterImpl.h	/^    BlkT *BB;          \/\/ Back-pointer to the corresponding block.$/;"	m	class:llvm::SSAUpdaterImpl::BBInfo
BBExecutable	Analysis/SparsePropagation.h	/^  SmallPtrSet<BasicBlock*, 16> BBExecutable;   \/\/ The bbs that are executable.$/;"	m	class:llvm::SparseSolver
BBInfo	Transforms/Utils/SSAUpdaterImpl.h	/^    BBInfo(BlkT *ThisBB, ValT V)$/;"	f	class:llvm::SSAUpdaterImpl::BBInfo
BBInfo	Transforms/Utils/SSAUpdaterImpl.h	/^  class BBInfo {$/;"	c	class:llvm::SSAUpdaterImpl
BBIty	Support/InstIterator.h	/^  typedef _BB_i_t BBIty;$/;"	t	class:llvm::InstIterator
BBMap	Analysis/LoopInfo.h	/^  DenseMap<BlockT *, LoopT *> BBMap;$/;"	m	class:llvm::LoopInfoBase
BBMap	Transforms/Utils/SSAUpdaterImpl.h	/^  BBMapTy BBMap;$/;"	m	class:llvm::SSAUpdaterImpl
BBMapTy	Transforms/Utils/SSAUpdaterImpl.h	/^  typedef DenseMap<BlkT*, BBInfo*> BBMapTy;$/;"	t	class:llvm::SSAUpdaterImpl
BBNodeMap	Analysis/RegionInfo.h	/^  mutable BBNodeMapT BBNodeMap;$/;"	m	class:llvm::Region
BBNodeMapT	Analysis/RegionInfo.h	/^  typedef std::map<BasicBlock*, RegionNode*> BBNodeMapT;$/;"	t	class:llvm::Region
BBSkipFirstBlockPair	Analysis/MemoryDependenceAnalysis.h	/^    typedef PointerIntPair<BasicBlock*, 1, bool> BBSkipFirstBlockPair;$/;"	t	class:llvm::MemoryDependenceAnalysis
BBTrace	Analysis/ProfileInfoLoader.h	/^  std::vector<unsigned>    BBTrace;$/;"	m	class:llvm::ProfileInfoLoader
BBTraceInfo	Analysis/ProfileDataTypes.h	/^  BBTraceInfo   = 6,   \/* Basic block trace information   *\/$/;"	e	enum:ProfilingType
BBWorkList	Analysis/SparsePropagation.h	/^  std::vector<BasicBlock*> BBWorkList;  \/\/ The BasicBlock work list$/;"	m	class:llvm::SparseSolver
BBs	Support/InstIterator.h	/^  _BB_t  *BBs;      \/\/ BasicBlocksType$/;"	m	class:llvm::InstIterator
BBtoBBMap	Analysis/RegionInfo.h	/^  typedef DenseMap<BasicBlock*,BasicBlock*> BBtoBBMap;$/;"	t	class:llvm::RegionInfo
BBtoRegion	Analysis/RegionInfo.h	/^  BBtoRegionMap BBtoRegion;$/;"	m	class:llvm::RegionInfo
BBtoRegionMap	Analysis/RegionInfo.h	/^  typedef DenseMap<BasicBlock*, Region*> BBtoRegionMap;$/;"	t	class:llvm::RegionInfo
BBty	Support/InstIterator.h	/^  typedef _BB_t   BBty;$/;"	t	class:llvm::InstIterator
BCvt	CodeGen/CallingConvLower.h	/^    BCvt,   \/\/ The value is bit-converted in the location.$/;"	e	enum:llvm::CCValAssign::LocInfo
BFI	Analysis/BlockFrequencyInfo.h	/^  BlockFrequencyImpl<BasicBlock, Function, BranchProbabilityInfo> *BFI;$/;"	m	class:llvm::BlockFrequencyInfo
BGP	ADT/Triple.h	/^    BGP,$/;"	e	enum:llvm::Triple::VendorType
BGQ	ADT/Triple.h	/^    BGQ,$/;"	e	enum:llvm::Triple::VendorType
BI	Support/InstIterator.h	/^  _BI_t   BI;       \/\/ BasicBlock::iterator$/;"	m	class:llvm::InstIterator
BINOP_ADD	Bitcode/LLVMBitCodes.h	/^    BINOP_ADD  =  0,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_AND	Bitcode/LLVMBitCodes.h	/^    BINOP_AND  = 10,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_ASHR	Bitcode/LLVMBitCodes.h	/^    BINOP_ASHR =  9,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_LSHR	Bitcode/LLVMBitCodes.h	/^    BINOP_LSHR =  8,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_MUL	Bitcode/LLVMBitCodes.h	/^    BINOP_MUL  =  2,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_OR	Bitcode/LLVMBitCodes.h	/^    BINOP_OR   = 11,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_SDIV	Bitcode/LLVMBitCodes.h	/^    BINOP_SDIV =  4,    \/\/ overloaded for FP$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_SHL	Bitcode/LLVMBitCodes.h	/^    BINOP_SHL  =  7,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_SREM	Bitcode/LLVMBitCodes.h	/^    BINOP_SREM =  6,    \/\/ overloaded for FP$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_SUB	Bitcode/LLVMBitCodes.h	/^    BINOP_SUB  =  1,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_UDIV	Bitcode/LLVMBitCodes.h	/^    BINOP_UDIV =  3,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_UREM	Bitcode/LLVMBitCodes.h	/^    BINOP_UREM =  5,$/;"	e	enum:llvm::bitc::BinaryOpcodes
BINOP_XOR	Bitcode/LLVMBitCodes.h	/^    BINOP_XOR  = 12$/;"	e	enum:llvm::bitc::BinaryOpcodes
BITCAST	CodeGen/ISDOpcodes.h	/^    BITCAST,$/;"	e	enum:llvm::ISD::NodeType
BITSTREAM_READER_H	Bitcode/BitstreamReader.h	16;"	d
BITSTREAM_WRITER_H	Bitcode/BitstreamWriter.h	16;"	d
BITS_PER_ELEMENT	ADT/SparseBitVector.h	/^    BITS_PER_ELEMENT = ElementSize$/;"	e	enum:llvm::SparseBitVectorElement::__anon9
BITWORDS_PER_ELEMENT	ADT/SparseBitVector.h	/^    BITWORDS_PER_ELEMENT = (ElementSize + BITWORD_SIZE - 1) \/ BITWORD_SIZE,$/;"	e	enum:llvm::SparseBitVectorElement::__anon9
BITWORD_SIZE	ADT/BitVector.h	/^  enum { BITWORD_SIZE = (unsigned)sizeof(BitWord) * CHAR_BIT };$/;"	e	enum:llvm::BitVector::__anon6
BITWORD_SIZE	ADT/SparseBitVector.h	/^    BITWORD_SIZE = SparseBitVectorElement<ElementSize>::BITWORD_SIZE$/;"	e	enum:llvm::SparseBitVector::__anon10
BITWORD_SIZE	ADT/SparseBitVector.h	/^    BITWORD_SIZE = sizeof(BitWord) * CHAR_BIT,$/;"	e	enum:llvm::SparseBitVectorElement::__anon9
BItor	Analysis/RegionIterator.h	/^  succ_iterator BItor;$/;"	m	class:llvm::RNSuccIterator
BIty	Support/InstIterator.h	/^  typedef _BI_t   BIty;$/;"	t	class:llvm::InstIterator
BLACK	Analysis/PathNumbering.h	/^  enum NodeColor { WHITE, GRAY, BLACK };$/;"	e	enum:llvm::BallLarusNode::NodeColor
BLACK	Support/raw_ostream.h	/^    BLACK=0,$/;"	e	enum:llvm::raw_ostream::Colors
BLBlockNodeMap	Analysis/PathNumbering.h	/^typedef std::map<BasicBlock*, BallLarusNode*> BLBlockNodeMap;$/;"	t	namespace:llvm
BLEdgeIterator	Analysis/PathNumbering.h	/^typedef std::vector<BallLarusEdge*>::iterator BLEdgeIterator;$/;"	t	namespace:llvm
BLEdgeVector	Analysis/PathNumbering.h	/^typedef std::vector<BallLarusEdge*> BLEdgeVector;$/;"	t	namespace:llvm
BLNodeIterator	Analysis/PathNumbering.h	/^typedef std::vector<BallLarusNode*>::iterator BLNodeIterator;$/;"	t	namespace:llvm
BLNodeStack	Analysis/PathNumbering.h	/^typedef std::stack<BallLarusNode*> BLNodeStack;$/;"	t	namespace:llvm
BLNodeVector	Analysis/PathNumbering.h	/^typedef std::vector<BallLarusNode*> BLNodeVector;$/;"	t	namespace:llvm
BLOCKINFO_BLOCK_ID	Bitcode/BitCodes.h	/^    BLOCKINFO_BLOCK_ID = 0,$/;"	e	enum:llvm::bitc::StandardBlockIDs
BLOCKINFO_CODE_BLOCKNAME	Bitcode/BitCodes.h	/^    BLOCKINFO_CODE_BLOCKNAME = 2,    \/\/ BLOCKNAME: [name]$/;"	e	enum:llvm::bitc::BlockInfoCodes
BLOCKINFO_CODE_SETBID	Bitcode/BitCodes.h	/^    BLOCKINFO_CODE_SETBID = 1,       \/\/ SETBID: [blockid#]$/;"	e	enum:llvm::bitc::BlockInfoCodes
BLOCKINFO_CODE_SETRECORDNAME	Bitcode/BitCodes.h	/^    BLOCKINFO_CODE_SETRECORDNAME = 3 \/\/ BLOCKINFO_CODE_SETRECORDNAME: [id, name]$/;"	e	enum:llvm::bitc::BlockInfoCodes
BLUE	Support/raw_ostream.h	/^    BLUE,$/;"	e	enum:llvm::raw_ostream::Colors
BOU_FALSE	Support/CommandLine.h	/^enum boolOrDefault { BOU_UNSET, BOU_TRUE, BOU_FALSE };$/;"	e	enum:llvm::cl::boolOrDefault
BOU_TRUE	Support/CommandLine.h	/^enum boolOrDefault { BOU_UNSET, BOU_TRUE, BOU_FALSE };$/;"	e	enum:llvm::cl::boolOrDefault
BOU_UNSET	Support/CommandLine.h	/^enum boolOrDefault { BOU_UNSET, BOU_TRUE, BOU_FALSE };$/;"	e	enum:llvm::cl::boolOrDefault
BPI	Analysis/BlockFrequencyImpl.h	/^  BlockProbInfoT *BPI;$/;"	m	class:llvm::BlockFrequencyImpl
BPI	CodeGen/FunctionLoweringInfo.h	/^  BranchProbabilityInfo *BPI;$/;"	m	class:llvm::FunctionLoweringInfo
BR	CodeGen/ISDOpcodes.h	/^    BR,$/;"	e	enum:llvm::ISD::NodeType
BRCOND	CodeGen/ISDOpcodes.h	/^    BRCOND,$/;"	e	enum:llvm::ISD::NodeType
BRIND	CodeGen/ISDOpcodes.h	/^    BRIND,$/;"	e	enum:llvm::ISD::NodeType
BR_CC	CodeGen/ISDOpcodes.h	/^    BR_CC,$/;"	e	enum:llvm::ISD::NodeType
BR_JT	CodeGen/ISDOpcodes.h	/^    BR_JT,$/;"	e	enum:llvm::ISD::NodeType
BSD4SymbolTableFlag	Bitcode/Archive.h	/^      BSD4SymbolTableFlag = 2,     \/\/\/< Member is a BSD4 symbol table$/;"	e	enum:llvm::ArchiveMember::Flags
BSS	MC/SectionKind.h	/^           BSS,$/;"	e	enum:llvm::SectionKind::Kind
BSSExtern	MC/SectionKind.h	/^               BSSExtern,$/;"	e	enum:llvm::SectionKind::Kind
BSSLocal	MC/SectionKind.h	/^               BSSLocal,$/;"	e	enum:llvm::SectionKind::Kind
BSSSection	MC/MCObjectFileInfo.h	/^  const MCSection *BSSSection;$/;"	m	class:llvm::MCObjectFileInfo
BSWAP	CodeGen/ISDOpcodes.h	/^    BSWAP, CTTZ, CTLZ, CTPOP,$/;"	e	enum:llvm::ISD::NodeType
BUILD_PAIR	CodeGen/ISDOpcodes.h	/^    BUILD_PAIR,$/;"	e	enum:llvm::ISD::NodeType
BUILD_VECTOR	CodeGen/ISDOpcodes.h	/^    BUILD_VECTOR,$/;"	e	enum:llvm::ISD::NodeType
BUILTIN_OP_END	CodeGen/ISDOpcodes.h	/^    BUILTIN_OP_END$/;"	e	enum:llvm::ISD::NodeType
BUNDLE	Target/TargetOpcodes.h	/^    BUNDLE = 14,$/;"	e	enum:llvm::TargetOpcode::__anon139
BackSlash	MC/MCParser/MCAsmLexer.h	/^    BackSlash, \/\/ '\\'$/;"	e	enum:llvm::AsmToken::TokenKind
BackedgeTakenCounts	Analysis/ScalarEvolution.h	/^    DenseMap<const Loop*, BackedgeTakenInfo> BackedgeTakenCounts;$/;"	m	class:llvm::ScalarEvolution
BackedgeTakenInfo	Analysis/ScalarEvolution.h	/^      BackedgeTakenInfo() : Max(0) {}$/;"	f	class:llvm::ScalarEvolution::BackedgeTakenInfo
BackedgeTakenInfo	Analysis/ScalarEvolution.h	/^    class BackedgeTakenInfo {$/;"	c	class:llvm::ScalarEvolution
Backend	MC/MCAssembler.h	/^  MCAsmBackend &Backend;$/;"	m	class:llvm::MCAssembler
BackpatchWord	Bitcode/BitstreamWriter.h	/^  void BackpatchWord(unsigned ByteNo, unsigned NewWord) {$/;"	f	class:llvm::BitstreamWriter
BallLarusDag	Analysis/PathNumbering.h	/^  BallLarusDag(Function &F)$/;"	f	class:llvm::BallLarusDag
BallLarusDag	Analysis/PathNumbering.h	/^class BallLarusDag {$/;"	c	namespace:llvm
BallLarusEdge	Analysis/PathNumbering.h	/^  BallLarusEdge(BallLarusNode* source, BallLarusNode* target,$/;"	f	class:llvm::BallLarusEdge
BallLarusEdge	Analysis/PathNumbering.h	/^class BallLarusEdge {$/;"	c	namespace:llvm
BallLarusNode	Analysis/PathNumbering.h	/^  BallLarusNode(BasicBlock* BB) :$/;"	f	class:llvm::BallLarusNode
BallLarusNode	Analysis/PathNumbering.h	/^class BallLarusNode {$/;"	c	namespace:llvm
Banner	Support/circular_raw_ostream.h	/^    const char *Banner;$/;"	m	class:llvm::circular_raw_ostream
Barrier	MC/MCInstrDesc.h	/^    Barrier,$/;"	e	enum:llvm::MCID::__anon69
Base	Support/CallSite.h	/^                       CallInst, InvokeInst, User::op_iterator> Base;$/;"	t	class:llvm::CallSite
Base	Support/CallSite.h	/^  typedef CallSiteBase<> Base;$/;"	t	class:llvm::ImmutableCallSite
Base	Support/RecyclingAllocator.h	/^  Recycler<T, Size, Align> Base;$/;"	m	class:llvm::RecyclingAllocator
Base	Support/YAMLParser.h	/^  BaseT *Base;$/;"	m	class:llvm::yaml::basic_collection_iterator
BaseGV	AddressingMode.h	/^  GlobalValue *BaseGV;$/;"	m	struct:llvm::AddrMode
BaseOfCode	Support/COFF.h	/^    uint32_t BaseOfCode; \/\/ RVA$/;"	m	struct:llvm::COFF::PEHeader
BaseOfData	Support/COFF.h	/^    uint32_t BaseOfData; \/\/ RVA$/;"	m	struct:llvm::COFF::PEHeader
BaseOffs	AddressingMode.h	/^  int64_t      BaseOffs;$/;"	m	struct:llvm::AddrMode
BaseReg	Transforms/Utils/AddrModeMatcher.h	/^  Value *BaseReg;$/;"	m	struct:llvm::ExtAddrMode
BaseRelocationType	Support/COFF.h	/^  enum BaseRelocationType {$/;"	g	namespace:llvm::COFF
BaseT	ADT/DenseMap.h	/^  typedef DenseMapBase<DenseMap, KeyT, ValueT, KeyInfoT> BaseT;$/;"	t	class:llvm::DenseMap
BaseT	ADT/DenseMap.h	/^  typedef DenseMapBase<SmallDenseMap, KeyT, ValueT, KeyInfoT> BaseT;$/;"	t	class:llvm::SmallDenseMap
BaseT	ADT/ValueMap.h	/^  typedef typename DenseMapT::const_iterator BaseT;$/;"	t	class:llvm::ValueMapConstIterator
BaseT	ADT/ValueMap.h	/^  typedef typename DenseMapT::iterator BaseT;$/;"	t	class:llvm::ValueMapIterator
BasicBlock	BasicBlock.h	/^class BasicBlock : public Value, \/\/ Basic blocks are data objects also$/;"	c	namespace:llvm
BasicBlock	CodeGen/ISDOpcodes.h	/^    BasicBlock, VALUETYPE, CONDCODE, Register, RegisterMask,$/;"	e	enum:llvm::ISD::NodeType
BasicBlockEdge	Analysis/Dominators.h	/^  BasicBlockEdge(const BasicBlock *Start_, const BasicBlock *End_) :$/;"	f	class:llvm::BasicBlockEdge
BasicBlockEdge	Analysis/Dominators.h	/^class BasicBlockEdge {$/;"	c	namespace:llvm
BasicBlockListType	Analysis/Trace.h	/^  typedef std::vector<BasicBlock *> BasicBlockListType;$/;"	t	class:llvm::Trace
BasicBlockListType	CodeGen/MachineFunction.h	/^  typedef ilist<MachineBasicBlock> BasicBlockListType;$/;"	t	class:llvm::MachineFunction
BasicBlockListType	Function.h	/^  typedef iplist<BasicBlock> BasicBlockListType;$/;"	t	class:llvm::Function
BasicBlockPass	Pass.h	/^  explicit BasicBlockPass(char &pid) : Pass(PT_BasicBlock, pid) {}$/;"	f	class:llvm::BasicBlockPass
BasicBlockPass	Pass.h	/^class BasicBlockPass : public Pass {$/;"	c	namespace:llvm
BasicBlockRecycler	CodeGen/MachineFunction.h	/^  Recycler<MachineBasicBlock> BasicBlockRecycler;$/;"	m	class:llvm::MachineFunction
BasicBlockSDNode	CodeGen/SelectionDAGNodes.h	/^  explicit BasicBlockSDNode(MachineBasicBlock *mbb)$/;"	f	class:llvm::BasicBlockSDNode
BasicBlockSDNode	CodeGen/SelectionDAGNodes.h	/^class BasicBlockSDNode : public SDNode {$/;"	c	namespace:llvm
BasicBlockVal	Value.h	/^    BasicBlockVal,            \/\/ This is an instance of BasicBlock$/;"	e	enum:llvm::Value::ValueTy
BasicBlocks	Analysis/Trace.h	/^  BasicBlockListType BasicBlocks;$/;"	m	class:llvm::Trace
BasicBlocks	CodeGen/MachineFunction.h	/^  BasicBlockListType BasicBlocks;$/;"	m	class:llvm::MachineFunction
BasicBlocks	Function.h	/^  BasicBlockListType  BasicBlocks;        \/\/\/< The basic blocks$/;"	m	class:llvm::Function
BeforeLegalize	Target/TargetLowering.h	/^    bool BeforeLegalize;$/;"	m	struct:llvm::TargetLowering::DAGCombinerInfo
BeforeLegalizeOps	Target/TargetLowering.h	/^    bool BeforeLegalizeOps;$/;"	m	struct:llvm::TargetLowering::DAGCombinerInfo
BeforeLegalizeTypes	CodeGen/SelectionDAG.h	/^  BeforeLegalizeTypes,$/;"	e	enum:llvm::CombineLevel
Begin	MC/MCAtom.h	/^  uint64_t Begin, End;$/;"	m	class:llvm::MCAtom
Begin	MC/MCDwarf.h	/^    MCSymbol *Begin;$/;"	m	struct:llvm::MCDwarfFrameInfo
Begin	MC/MCWin64EH.h	/^    MCSymbol *Begin;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
BeginGroup	MC/MCSchedule.h	/^  bool     BeginGroup;$/;"	m	struct:llvm::MCSchedClassDesc
BeginLabels	CodeGen/MachineModuleInfo.h	/^  SmallVector<MCSymbol*, 1> BeginLabels; \/\/ Labels prior to invoke.$/;"	m	struct:llvm::LandingPadInfo
BeginX	ADT/SmallVector.h	/^  void *BeginX, *EndX, *CapacityX;$/;"	m	class:llvm::SmallVectorBase
Behavior	Module.h	/^    ModFlagBehavior Behavior;$/;"	m	struct:llvm::Module::ModuleFlagEntry
BigEndian	Module.h	/^  enum Endianness  { AnyEndianness, LittleEndian, BigEndian };$/;"	e	enum:llvm::Module::Endianness
BinOp	Instructions.h	/^  enum BinOp {$/;"	g	class:llvm::AtomicRMWInst
BinOp2_match	Support/PatternMatch.h	/^  BinOp2_match(const LHS_t &LHS, const RHS_t &RHS) : L(LHS), R(RHS) {}$/;"	f	struct:llvm::PatternMatch::BinOp2_match
BinOp2_match	Support/PatternMatch.h	/^struct BinOp2_match {$/;"	s	namespace:llvm::PatternMatch
BinOpInit	TableGen/Record.h	/^  BinOpInit(BinaryOp opc, Init *lhs, Init *rhs, RecTy *Type) :$/;"	f	class:llvm::BinOpInit
BinOpInit	TableGen/Record.h	/^class BinOpInit : public OpInit {$/;"	c	namespace:llvm
Binary	MC/MCExpr.h	/^    Binary,    \/\/\/< Binary expressions.$/;"	e	enum:llvm::MCExpr::ExprKind
Binary	Object/Binary.h	/^class Binary {$/;"	c	namespace:llvm::object
BinaryOp	TableGen/Record.h	/^  enum BinaryOp { SHL, SRA, SRL, STRCONCAT, CONCAT, EQ };$/;"	g	class:llvm::BinOpInit
BinaryOp_match	Support/PatternMatch.h	/^  BinaryOp_match(const LHS_t &LHS, const RHS_t &RHS) : L(LHS), R(RHS) {}$/;"	f	struct:llvm::PatternMatch::BinaryOp_match
BinaryOp_match	Support/PatternMatch.h	/^struct BinaryOp_match {$/;"	s	namespace:llvm::PatternMatch
BinaryOpcodes	Bitcode/LLVMBitCodes.h	/^  enum BinaryOpcodes {$/;"	g	namespace:llvm::bitc
BinaryOperator	InstrTypes.h	/^class BinaryOperator : public Instruction {$/;"	c	namespace:llvm
BinaryOps	Instruction.h	/^  enum BinaryOps {$/;"	g	class:llvm::Instruction
BinarySDNode	CodeGen/SelectionDAGNodes.h	/^  BinarySDNode(unsigned Opc, DebugLoc dl, SDVTList VTs, SDValue X, SDValue Y)$/;"	f	class:llvm::BinarySDNode
BinarySDNode	CodeGen/SelectionDAGNodes.h	/^class BinarySDNode : public SDNode {$/;"	c	namespace:llvm
BindImmediateMask	Support/MachO.h	/^      BindImmediateMask                         = 0x0Fu, \/\/ BIND_IMMEDIATE_MASK$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeAddAddressULEB	Support/MachO.h	/^      BindOpcodeAddAddressULEB                  = 0x80u, \/\/ BIND_OPCODE_ADD_ADDR_ULEB$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeDoBind	Support/MachO.h	/^      BindOpcodeDoBind                          = 0x90u, \/\/ BIND_OPCODE_DO_BIND$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeDoBindAddAddressImmediateScaled	Support/MachO.h	/^      BindOpcodeDoBindAddAddressImmediateScaled = 0xB0u, \/\/ BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeDoBindAddAddressULEB	Support/MachO.h	/^      BindOpcodeDoBindAddAddressULEB            = 0xA0u, \/\/ BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeDoBindULEBTimesSkippingULEB	Support/MachO.h	/^      BindOpcodeDoBindULEBTimesSkippingULEB     = 0xC0u, \/\/ BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeDone	Support/MachO.h	/^      BindOpcodeDone                            = 0x00u, \/\/ BIND_OPCODE_DONE$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeMask	Support/MachO.h	/^      BindOpcodeMask                            = 0xF0u, \/\/ BIND_OPCODE_MASK$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeSetAppendSLEB	Support/MachO.h	/^      BindOpcodeSetAppendSLEB                   = 0x60u, \/\/ BIND_OPCODE_SET_ADDEND_SLEB$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeSetDylibOrdinalImmediate	Support/MachO.h	/^      BindOpcodeSetDylibOrdinalImmediate        = 0x10u, \/\/ BIND_OPCODE_SET_DYLIB_ORDINAL_IMM$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeSetDylibOrdinalULEB	Support/MachO.h	/^      BindOpcodeSetDylibOrdinalULEB             = 0x20u, \/\/ BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeSetDylibSpecialImmediate	Support/MachO.h	/^      BindOpcodeSetDylibSpecialImmediate        = 0x30u, \/\/ BIND_OPCODE_SET_DYLIB_SPECIAL_IMM$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeSetSegmentAndOffsetULEB	Support/MachO.h	/^      BindOpcodeSetSegmentAndOffsetULEB         = 0x70u, \/\/ BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeSetSymbolTrailingFlagsImmediate	Support/MachO.h	/^      BindOpcodeSetSymbolTrailingFlagsImmediate = 0x40u, \/\/ BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM$/;"	e	enum:llvm::MachO::__anon126
BindOpcodeSetTypeImmediate	Support/MachO.h	/^      BindOpcodeSetTypeImmediate                = 0x50u, \/\/ BIND_OPCODE_SET_TYPE_IMM$/;"	e	enum:llvm::MachO::__anon126
BindSpecialDylibFlatLookup	Support/MachO.h	/^      BindSpecialDylibFlatLookup      = -2u, \/\/ BIND_SPECIAL_DYLIB_FLAT_LOOKUP$/;"	e	enum:llvm::MachO::__anon126
BindSpecialDylibMainExecutable	Support/MachO.h	/^      BindSpecialDylibMainExecutable  = -1u, \/\/ BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE$/;"	e	enum:llvm::MachO::__anon126
BindSpecialDylibSelf	Support/MachO.h	/^      BindSpecialDylibSelf            =  0u, \/\/ BIND_SPECIAL_DYLIB_SELF$/;"	e	enum:llvm::MachO::__anon126
BindSymbolFlagsNonWeakDefinition	Support/MachO.h	/^      BindSymbolFlagsNonWeakDefinition  = 0x8u, \/\/ BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION$/;"	e	enum:llvm::MachO::__anon126
BindSymbolFlagsWeakImport	Support/MachO.h	/^      BindSymbolFlagsWeakImport         = 0x1u, \/\/ BIND_SYMBOL_FLAGS_WEAK_IMPORT$/;"	e	enum:llvm::MachO::__anon126
BindTypePointer	Support/MachO.h	/^      BindTypePointer           = 1u, \/\/ BIND_TYPE_POINTER$/;"	e	enum:llvm::MachO::__anon126
BindTypeTextAbsolute32	Support/MachO.h	/^      BindTypeTextAbsolute32    = 2u, \/\/ BIND_TYPE_TEXT_ABSOLUTE32$/;"	e	enum:llvm::MachO::__anon126
BindTypeTextPCRelative32	Support/MachO.h	/^      BindTypeTextPCRelative32  = 3u, \/\/ BIND_TYPE_TEXT_PCREL32$/;"	e	enum:llvm::MachO::__anon126
Bit	Support/CommandLine.h	/^  static unsigned Bit(const T &V) {$/;"	f	class:llvm::cl::bits_storage
Bit	TableGen/Record.h	/^  unsigned Bit;$/;"	m	class:llvm::VarBitInit
BitCastInst	Instructions.h	/^class BitCastInst : public CastInst {$/;"	c	namespace:llvm
BitCodeAbbrev	Bitcode/BitCodes.h	/^  BitCodeAbbrev() : RefCount(1) {}$/;"	f	class:llvm::BitCodeAbbrev
BitCodeAbbrev	Bitcode/BitCodes.h	/^class BitCodeAbbrev {$/;"	c	namespace:llvm
BitCodeAbbrevOp	Bitcode/BitCodes.h	/^  explicit BitCodeAbbrevOp(Encoding E, uint64_t Data = 0)$/;"	f	class:llvm::BitCodeAbbrevOp
BitCodeAbbrevOp	Bitcode/BitCodes.h	/^  explicit BitCodeAbbrevOp(uint64_t V) :  Val(V), IsLiteral(true) {}$/;"	f	class:llvm::BitCodeAbbrevOp
BitCodeAbbrevOp	Bitcode/BitCodes.h	/^class BitCodeAbbrevOp {$/;"	c	namespace:llvm
BitInit	TableGen/Record.h	/^  explicit BitInit(bool V) : Init(IK_BitInit), Value(V) {}$/;"	f	class:llvm::BitInit
BitInit	TableGen/Record.h	/^class BitInit : public Init {$/;"	c	namespace:llvm
BitNumber	ADT/SparseBitVector.h	/^    unsigned BitNumber;$/;"	m	class:llvm::SparseBitVector::SparseBitVectorIterator
BitPos	ADT/BitVector.h	/^    unsigned BitPos;$/;"	m	class:llvm::BitVector::reference
BitPos	ADT/SmallBitVector.h	/^    unsigned BitPos;$/;"	m	class:llvm::SmallBitVector::reference
BitRecTy	TableGen/Record.h	/^  BitRecTy() : RecTy(BitRecTyKind) {}$/;"	f	class:llvm::BitRecTy
BitRecTy	TableGen/Record.h	/^class BitRecTy : public RecTy {$/;"	c	namespace:llvm
BitRecTyKind	TableGen/Record.h	/^    BitRecTyKind,$/;"	e	enum:llvm::RecTy::RecTyKind
BitStream	Bitcode/BitstreamReader.h	/^  BitstreamReader *BitStream;$/;"	m	class:llvm::BitstreamCursor
BitVector	ADT/BitVector.h	/^  BitVector() : Size(0), Capacity(0) {$/;"	f	class:llvm::BitVector
BitVector	ADT/BitVector.h	/^  BitVector(BitVector &&RHS)$/;"	f	class:llvm::BitVector
BitVector	ADT/BitVector.h	/^  BitVector(const BitVector &RHS) : Size(RHS.size()) {$/;"	f	class:llvm::BitVector
BitVector	ADT/BitVector.h	/^  explicit BitVector(unsigned s, bool t = false) : Size(s) {$/;"	f	class:llvm::BitVector
BitVector	ADT/BitVector.h	/^class BitVector {$/;"	c	namespace:llvm
BitVector	ADT/SparseBitVector.h	/^    const SparseBitVector<ElementSize> *BitVector;$/;"	m	class:llvm::SparseBitVector::SparseBitVectorIterator
BitWidth	ADT/APInt.h	/^  unsigned BitWidth;      \/\/\/< The number of bits in this APInt.$/;"	m	class:llvm::APInt
BitWord	ADT/BitVector.h	/^  typedef unsigned long BitWord;$/;"	t	class:llvm::BitVector
BitWord	ADT/SparseBitVector.h	/^  typedef unsigned long BitWord;$/;"	t	struct:llvm::SparseBitVectorElement
Bitcast	MC/MCInstrDesc.h	/^    Bitcast,$/;"	e	enum:llvm::MCID::__anon69
BitcodeBytes	Bitcode/BitstreamReader.h	/^  OwningPtr<StreamableMemoryObject> BitcodeBytes;$/;"	m	class:llvm::BitstreamReader
BitcodeFlag	Bitcode/Archive.h	/^      BitcodeFlag = 8,             \/\/\/< Member is bitcode$/;"	e	enum:llvm::ArchiveMember::Flags
Bitcode_FileType	Support/PathV1.h	/^    Bitcode_FileType,                  \/\/\/< Bitcode file$/;"	e	enum:llvm::sys::LLVMFileType
Bitrig	ADT/Triple.h	/^    Bitrig,$/;"	e	enum:llvm::Triple::OSType
Bits	ADT/BitVector.h	/^  BitWord  *Bits;        \/\/ Actual bits.$/;"	m	class:llvm::BitVector
Bits	ADT/FoldingSet.h	/^  SmallVector<unsigned, 32> Bits;$/;"	m	class:llvm::FoldingSetNodeID
Bits	ADT/PackedVector.h	/^  BitVectorTy Bits;$/;"	m	class:llvm::PackedVector
Bits	ADT/SparseBitVector.h	/^    typename SparseBitVectorElement<ElementSize>::BitWord Bits;$/;"	m	class:llvm::SparseBitVector::SparseBitVectorIterator
Bits	ADT/SparseBitVector.h	/^  BitWord Bits[BITWORDS_PER_ELEMENT];$/;"	m	struct:llvm::SparseBitVectorElement
Bits	Attributes.h	/^  uint64_t Bits;$/;"	m	class:llvm::AttrBuilder
Bits	Support/CommandLine.h	/^  unsigned Bits;   \/\/ Where to store the bits...$/;"	m	class:llvm::cl::bits_storage
Bits	TableGen/Record.h	/^  std::vector<Init*> Bits;$/;"	m	class:llvm::BitsInit
BitsInCurWord	Bitcode/BitstreamReader.h	/^  unsigned BitsInCurWord;$/;"	m	class:llvm::BitstreamCursor
BitsInit	TableGen/Record.h	/^  BitsInit(ArrayRef<Init *> Range)$/;"	f	class:llvm::BitsInit
BitsInit	TableGen/Record.h	/^class BitsInit : public Init, public FoldingSetNode {$/;"	c	namespace:llvm
BitsRecTy	TableGen/Record.h	/^  explicit BitsRecTy(unsigned Sz) : RecTy(BitsRecTyKind), Size(Sz) {}$/;"	f	class:llvm::BitsRecTy
BitsRecTy	TableGen/Record.h	/^class BitsRecTy : public RecTy {$/;"	c	namespace:llvm
BitsRecTyKind	TableGen/Record.h	/^    BitsRecTyKind,$/;"	e	enum:llvm::RecTy::RecTyKind
BitsToDouble	Support/MathExtras.h	/^inline double BitsToDouble(uint64_t Bits) {$/;"	f	namespace:llvm
BitsToFloat	Support/MathExtras.h	/^inline float BitsToFloat(uint32_t Bits) {$/;"	f	namespace:llvm
BitstreamCursor	Bitcode/BitstreamReader.h	/^  BitstreamCursor() : BitStream(0), NextChar(0) {$/;"	f	class:llvm::BitstreamCursor
BitstreamCursor	Bitcode/BitstreamReader.h	/^  BitstreamCursor(const BitstreamCursor &RHS) : BitStream(0), NextChar(0) {$/;"	f	class:llvm::BitstreamCursor
BitstreamCursor	Bitcode/BitstreamReader.h	/^  explicit BitstreamCursor(BitstreamReader &R) : BitStream(&R) {$/;"	f	class:llvm::BitstreamCursor
BitstreamCursor	Bitcode/BitstreamReader.h	/^class BitstreamCursor {$/;"	c	namespace:llvm
BitstreamReader	Bitcode/BitstreamReader.h	/^  BitstreamReader() : IgnoreBlockInfoNames(true) {$/;"	f	class:llvm::BitstreamReader
BitstreamReader	Bitcode/BitstreamReader.h	/^  BitstreamReader(StreamableMemoryObject *bytes) {$/;"	f	class:llvm::BitstreamReader
BitstreamReader	Bitcode/BitstreamReader.h	/^  BitstreamReader(const unsigned char *Start, const unsigned char *End) {$/;"	f	class:llvm::BitstreamReader
BitstreamReader	Bitcode/BitstreamReader.h	/^class BitstreamReader {$/;"	c	namespace:llvm
BitstreamWriter	Bitcode/BitstreamWriter.h	/^  explicit BitstreamWriter(SmallVectorImpl<char> &O)$/;"	f	class:llvm::BitstreamWriter
BitstreamWriter	Bitcode/BitstreamWriter.h	/^class BitstreamWriter {$/;"	c	namespace:llvm
BlkNum	Transforms/Utils/SSAUpdaterImpl.h	/^    int BlkNum;        \/\/ Postorder number.$/;"	m	class:llvm::SSAUpdaterImpl::BBInfo
BlkT	Transforms/Utils/SSAUpdaterImpl.h	/^  typedef typename Traits::BlkT BlkT;$/;"	t	class:llvm::SSAUpdaterImpl
Blob	Bitcode/BitCodes.h	/^    Blob  = 5   \/\/ 32-bit aligned array of 8-bit characters.$/;"	e	enum:llvm::BitCodeAbbrevOp::Encoding
Block	Bitcode/BitstreamReader.h	/^    explicit Block(unsigned PCS) : PrevCodeSize(PCS) {}$/;"	f	struct:llvm::BitstreamCursor::Block
Block	Bitcode/BitstreamReader.h	/^  struct Block {$/;"	s	class:llvm::BitstreamCursor
Block	Bitcode/BitstreamWriter.h	/^    Block(unsigned PCS, unsigned SSW) : PrevCodeSize(PCS), StartSizeWord(SSW) {}$/;"	f	struct:llvm::BitstreamWriter::Block
Block	Bitcode/BitstreamWriter.h	/^  struct Block {$/;"	s	class:llvm::BitstreamWriter
Block	IRBuilder.h	/^    BasicBlock *Block;$/;"	m	class:llvm::IRBuilderBase::InsertPoint
BlockAddress	CodeGen/ISDOpcodes.h	/^    JumpTable, ConstantPool, ExternalSymbol, BlockAddress,$/;"	e	enum:llvm::ISD::NodeType
BlockAddress	Constants.h	/^class BlockAddress : public Constant {$/;"	c	namespace:llvm
BlockAddressSDNode	CodeGen/SelectionDAGNodes.h	/^  BlockAddressSDNode(unsigned NodeTy, EVT VT, const BlockAddress *ba,$/;"	f	class:llvm::BlockAddressSDNode
BlockAddressSDNode	CodeGen/SelectionDAGNodes.h	/^class BlockAddressSDNode : public SDNode {$/;"	c	namespace:llvm
BlockAddressVal	Value.h	/^    BlockAddressVal,          \/\/ This is an instance of BlockAddress$/;"	e	enum:llvm::Value::ValueTy
BlockCounts	Analysis/ProfileInfo.h	/^    typedef std::map<const BType*, double> BlockCounts;$/;"	t	class:llvm::ProfileInfoT
BlockCounts	Analysis/ProfileInfoLoader.h	/^  std::vector<unsigned>    BlockCounts;$/;"	m	class:llvm::ProfileInfoLoader
BlockDisposition	Analysis/ScalarEvolution.h	/^    enum BlockDisposition {$/;"	g	class:llvm::ScalarEvolution
BlockDispositions	Analysis/ScalarEvolution.h	/^             std::map<const BasicBlock *, BlockDisposition> > BlockDispositions;$/;"	m	class:llvm::ScalarEvolution
BlockFrequency	Support/BlockFrequency.h	/^  BlockFrequency(uint64_t Freq = 0) : Frequency(Freq) { }$/;"	f	class:llvm::BlockFrequency
BlockFrequency	Support/BlockFrequency.h	/^class BlockFrequency {$/;"	c	namespace:llvm
BlockFrequencyImpl	Analysis/BlockFrequencyImpl.h	/^  BlockFrequencyImpl() : EntryFreq(BlockFrequency::getEntryFrequency()) { }$/;"	f	class:llvm::BlockFrequencyImpl
BlockFrequencyImpl	Analysis/BlockFrequencyImpl.h	/^class BlockFrequencyImpl {$/;"	c	namespace:llvm
BlockFrequencyInfo	Analysis/BlockFrequencyInfo.h	/^class BlockFrequencyInfo : public FunctionPass {$/;"	c	namespace:llvm
BlockID	Bitcode/BitstreamReader.h	/^    unsigned BlockID;$/;"	m	struct:llvm::BitstreamReader::BlockInfo
BlockID	Bitcode/BitstreamWriter.h	/^    unsigned BlockID;$/;"	m	struct:llvm::BitstreamWriter::BlockInfo
BlockIDWidth	Bitcode/BitCodes.h	/^    BlockIDWidth = 8,  \/\/ We use VBR-8 for block IDs.$/;"	e	enum:llvm::bitc::StandardWidths
BlockIDs	Bitcode/LLVMBitCodes.h	/^  enum BlockIDs {$/;"	g	namespace:llvm::bitc
BlockInfo	Analysis/ProfileDataTypes.h	/^  BlockInfo     = 3,   \/* Block profiling information     *\/$/;"	e	enum:ProfilingType
BlockInfo	Bitcode/BitstreamReader.h	/^  struct BlockInfo {$/;"	s	class:llvm::BitstreamReader
BlockInfo	Bitcode/BitstreamWriter.h	/^  struct BlockInfo {$/;"	s	class:llvm::BitstreamWriter
BlockInfoCodes	Bitcode/BitCodes.h	/^  enum BlockInfoCodes {$/;"	g	namespace:llvm::bitc
BlockInfoCurBID	Bitcode/BitstreamWriter.h	/^  unsigned BlockInfoCurBID;$/;"	m	class:llvm::BitstreamWriter
BlockInfoRecords	Bitcode/BitstreamReader.h	/^  std::vector<BlockInfo> BlockInfoRecords;$/;"	m	class:llvm::BitstreamReader
BlockInfoRecords	Bitcode/BitstreamWriter.h	/^  std::vector<BlockInfo> BlockInfoRecords;$/;"	m	class:llvm::BitstreamWriter
BlockInformation	Analysis/ProfileInfo.h	/^    std::map<const FType*, BlockCounts> BlockInformation;$/;"	m	class:llvm::ProfileInfoT
BlockListTy	Transforms/Utils/SSAUpdaterImpl.h	/^  typedef SmallVectorImpl<BBInfo*> BlockListTy;$/;"	t	class:llvm::SSAUpdaterImpl
BlockScope	Bitcode/BitstreamReader.h	/^  SmallVector<Block, 8> BlockScope;$/;"	m	class:llvm::BitstreamCursor
BlockScope	Bitcode/BitstreamWriter.h	/^  std::vector<Block> BlockScope;$/;"	m	class:llvm::BitstreamWriter
BlockSizeWidth	Bitcode/BitCodes.h	/^    BlockSizeWidth = 32  \/\/ BlockSize up to 2^32 32-bit words = 16GB per block.$/;"	e	enum:llvm::bitc::StandardWidths
BlockToPredCountMap	Support/PredIteratorCache.h	/^    DenseMap<BasicBlock*, unsigned> BlockToPredCountMap;$/;"	m	class:llvm::PredIteratorCache
BlockToPredsMap	Support/PredIteratorCache.h	/^    DenseMap<BasicBlock*, BasicBlock**> BlockToPredsMap;$/;"	m	class:llvm::PredIteratorCache
BlockTraits	Analysis/LoopInfoImpl.h	/^  typedef GraphTraits<BlockT*> BlockTraits;$/;"	t	class:llvm::__anon30::PopulateLoopsDFS
Blocks	ADT/PostOrderIterator.h	/^  std::vector<NodeType*> Blocks;       \/\/ Block list in normal PO order$/;"	m	class:llvm::ReversePostOrderTraversal
Blocks	Analysis/LoopInfo.h	/^  std::vector<BlockT*> Blocks;$/;"	m	class:llvm::LoopBase
Blocks	CodeGen/EdgeBundles.h	/^  SmallVector<SmallVector<unsigned, 8>, 4> Blocks;$/;"	m	class:llvm::EdgeBundles
Blocks	Support/GCOV.h	/^  SmallVector<GCOVBlock *, 16> Blocks;$/;"	m	class:llvm::GCOVFunction
Blocks	Transforms/Utils/CodeExtractor.h	/^    SetVector<BasicBlock *> Blocks;$/;"	m	class:llvm::CodeExtractor
Bogus	ADT/APFloat.h	/^    static const fltSemantics Bogus;$/;"	m	class:llvm::APFloat
BooleanContent	Target/TargetLowering.h	/^  enum BooleanContent { \/\/ How the target represents true\/false values.$/;"	g	class:llvm::TargetLowering
BooleanContents	Target/TargetLowering.h	/^  BooleanContent BooleanContents;$/;"	m	class:llvm::TargetLowering
BooleanVectorContents	Target/TargetLowering.h	/^  BooleanContent BooleanVectorContents;$/;"	m	class:llvm::TargetLowering
BotPressure	CodeGen/MachineScheduler.h	/^  IntervalPressure BotPressure;$/;"	m	class:llvm::ScheduleDAGMI
BotRPTracker	CodeGen/MachineScheduler.h	/^  RegPressureTracker BotRPTracker;$/;"	m	class:llvm::ScheduleDAGMI
BotReadyCycle	CodeGen/ScheduleDAG.h	/^    unsigned BotReadyCycle; \/\/ Cycle relative to end when node is ready.$/;"	m	class:llvm::SUnit
BottomIdx	CodeGen/RegisterPressure.h	/^  SlotIndex BottomIdx;$/;"	m	struct:llvm::IntervalPressure
BottomPos	CodeGen/RegisterPressure.h	/^  MachineBasicBlock::const_iterator BottomPos;$/;"	m	struct:llvm::RegionPressure
BoundInfo	Analysis/DependenceAnalysis.h	/^    struct BoundInfo {$/;"	s	class:llvm::DependenceAnalysis
BracketExpressionsSupported	MC/MCParser/MCAsmParserExtension.h	/^  bool BracketExpressionsSupported;$/;"	m	class:llvm::MCAsmParserExtension
Branch	ADT/IntervalMap.h	/^    Branch;$/;"	t	class:llvm::IntervalMap
Branch	MC/MCInstrDesc.h	/^    Branch,$/;"	e	enum:llvm::MCID::__anon69
BranchInst	Instructions.h	/^class BranchInst : public TerminatorInst {$/;"	c	namespace:llvm
BranchNode	ADT/IntervalMap.h	/^class BranchNode : public NodeBase<NodeRef, KeyT, N> {$/;"	c	namespace:llvm::IntervalMapImpl
BranchProbability	Support/BranchProbability.h	/^  BranchProbability(uint32_t n, uint32_t d) : N(n), D(d) {$/;"	f	class:llvm::BranchProbability
BranchProbability	Support/BranchProbability.h	/^class BranchProbability {$/;"	c	namespace:llvm
BranchProbabilityInfo	Analysis/BranchProbabilityInfo.h	/^  BranchProbabilityInfo() : FunctionPass(ID) {$/;"	f	class:llvm::BranchProbabilityInfo
BranchProbabilityInfo	Analysis/BranchProbabilityInfo.h	/^class BranchProbabilityInfo : public FunctionPass {$/;"	c	namespace:llvm
BranchSize	ADT/IntervalMap.h	/^    BranchSize = AllocBytes \/$/;"	e	enum:llvm::IntervalMapImpl::NodeSizer::__anon21
BranchTargetMap	MC/MCModule.h	/^  DenseMap<uint64_t, MCAtom*> BranchTargetMap;$/;"	m	class:llvm::MCModule
Briggs	CodeGen/PBQP/Heuristics/Briggs.h	/^      Briggs(HeuristicSolverImpl<Briggs> &solver) :$/;"	f	class:PBQP::Heuristics::Briggs
Briggs	CodeGen/PBQP/Heuristics/Briggs.h	/^    class Briggs : public HeuristicBase<Briggs> {$/;"	c	namespace:PBQP::Heuristics
Bucket	ADT/DenseMap.h	/^  typedef std::pair<KeyT, ValueT> Bucket;$/;"	t	class:llvm::DenseMapIterator
Bucket	ADT/SmallPtrSet.h	/^  const void *const *Bucket;$/;"	m	class:llvm::SmallPtrSetIteratorImpl
BucketT	ADT/DenseMap.h	/^  typedef std::pair<KeyT, ValueT> BucketT;$/;"	t	class:llvm::DenseMapBase
BucketT	ADT/DenseMap.h	/^  typedef typename BaseT::BucketT BucketT;$/;"	t	class:llvm::DenseMap
BucketT	ADT/DenseMap.h	/^  typedef typename BaseT::BucketT BucketT;$/;"	t	class:llvm::SmallDenseMap
Buckets	ADT/DenseMap.h	/^    BucketT *Buckets;$/;"	m	struct:llvm::SmallDenseMap::LargeRep
Buckets	ADT/DenseMap.h	/^  BucketT *Buckets;$/;"	m	class:llvm::DenseMap
Buckets	ADT/FoldingSet.h	/^  void **Buckets;$/;"	m	class:llvm::FoldingSetImpl
Buffer	ExecutionEngine/ObjectBuffer.h	/^  OwningPtr<MemoryBuffer> Buffer;$/;"	m	class:llvm::ObjectBuffer
Buffer	ExecutionEngine/ObjectImage.h	/^  OwningPtr<ObjectBuffer> Buffer;$/;"	m	class:llvm::ObjectImage
Buffer	Object/MachOObject.h	/^  OwningPtr<MemoryBuffer> Buffer;$/;"	m	class:llvm::object::MachOObject
Buffer	Support/GCOV.h	/^  MemoryBuffer *Buffer;$/;"	m	class:llvm::GCOVBuffer
Buffer	Support/SourceMgr.h	/^    MemoryBuffer *Buffer;$/;"	m	struct:llvm::SourceMgr::SrcBuffer
BufferArray	Support/circular_raw_ostream.h	/^    char *BufferArray;$/;"	m	class:llvm::circular_raw_ostream
BufferBegin	CodeGen/MachineCodeEmitter.h	/^  uint8_t *BufferBegin, *BufferEnd;$/;"	m	class:llvm::MachineCodeEmitter
BufferEnd	CodeGen/MachineCodeEmitter.h	/^  uint8_t *BufferBegin, *BufferEnd;$/;"	m	class:llvm::MachineCodeEmitter
BufferEnd	Support/FileOutputBuffer.h	/^  uint8_t            *BufferEnd;$/;"	m	class:llvm::FileOutputBuffer
BufferEnd	Support/MemoryBuffer.h	/^  const char *BufferEnd;   \/\/ End of the buffer.$/;"	m	class:llvm::MemoryBuffer
BufferKind	Support/MemoryBuffer.h	/^  enum BufferKind {$/;"	g	class:llvm::MemoryBuffer
BufferKind	Support/raw_ostream.h	/^  enum BufferKind {$/;"	g	class:llvm::raw_ostream
BufferMode	Support/raw_ostream.h	/^  } BufferMode;$/;"	m	class:llvm::raw_ostream	typeref:enum:llvm::raw_ostream::BufferKind
BufferSize	Support/circular_raw_ostream.h	/^    size_t BufferSize;$/;"	m	class:llvm::circular_raw_ostream
BufferStart	Support/FileOutputBuffer.h	/^  uint8_t            *BufferStart;$/;"	m	class:llvm::FileOutputBuffer
BufferStart	Support/MemoryBuffer.h	/^  const char *BufferStart; \/\/ Start of the buffer.$/;"	m	class:llvm::MemoryBuffer
Buffers	Support/SourceMgr.h	/^  std::vector<SrcBuffer> Buffers;$/;"	m	class:llvm::SourceMgr
BuildBlockList	Transforms/Utils/SSAUpdaterImpl.h	/^  BBInfo *BuildBlockList(BlkT *BB, BlockListTy *BlockList) {$/;"	f	class:llvm::SSAUpdaterImpl
BuildMI	CodeGen/MachineInstrBuilder.h	/^inline MachineInstrBuilder BuildMI(MachineBasicBlock &BB,$/;"	f	namespace:llvm
BuildMI	CodeGen/MachineInstrBuilder.h	/^inline MachineInstrBuilder BuildMI(MachineBasicBlock *BB,$/;"	f	namespace:llvm
BuildMI	CodeGen/MachineInstrBuilder.h	/^inline MachineInstrBuilder BuildMI(MachineFunction &MF,$/;"	f	namespace:llvm
BuildVectorSDNode	CodeGen/SelectionDAGNodes.h	/^class BuildVectorSDNode : public SDNode {$/;"	c	namespace:llvm
Builder	Analysis/MemoryBuiltins.h	/^  BuilderTy Builder;$/;"	m	class:llvm::ObjectSizeOffsetEvaluator
Builder	Analysis/ScalarEvolutionExpander.h	/^    BuilderType Builder;$/;"	m	class:llvm::SCEVExpander
BuilderTy	Analysis/MemoryBuiltins.h	/^  typedef IRBuilder<true, TargetFolder> BuilderTy;$/;"	t	class:llvm::ObjectSizeOffsetEvaluator
BuilderType	Analysis/ScalarEvolutionExpander.h	/^    typedef IRBuilder<true, TargetFolder> BuilderType;$/;"	t	class:llvm::SCEVExpander
BuiltinOpcodes	CodeGen/SelectionDAGISel.h	/^  enum BuiltinOpcodes {$/;"	g	class:llvm::SelectionDAGISel
BumpPtrAllocator	Support/Allocator.h	/^class BumpPtrAllocator {$/;"	c	namespace:llvm
ByVal	Attributes.h	/^    ByVal           = 4,   \/\/\/< Pass structure by value$/;"	e	enum:llvm::Attributes::AttrVal
ByVal	Target/TargetCallingConv.h	/^    static const uint64_t ByVal          = 1ULL<<4;  \/\/\/< Struct passed by value$/;"	m	struct:llvm::ISD::ArgFlagsTy
ByValAlign	Target/TargetCallingConv.h	/^    static const uint64_t ByValAlign     = 0xFULL << 6; \/\/\/< Struct alignment$/;"	m	struct:llvm::ISD::ArgFlagsTy
ByValAlignOffs	Target/TargetCallingConv.h	/^    static const uint64_t ByValAlignOffs = 6;$/;"	m	struct:llvm::ISD::ArgFlagsTy
ByValArgFrameIndexMap	CodeGen/FunctionLoweringInfo.h	/^  DenseMap<const Argument*, int> ByValArgFrameIndexMap;$/;"	m	class:llvm::FunctionLoweringInfo
ByValOffs	Target/TargetCallingConv.h	/^    static const uint64_t ByValOffs      = 4;$/;"	m	struct:llvm::ISD::ArgFlagsTy
ByValSize	Target/TargetCallingConv.h	/^    static const uint64_t ByValSize      = 0xffffffffULL << 32; \/\/\/< Struct size$/;"	m	struct:llvm::ISD::ArgFlagsTy
ByValSizeOffs	Target/TargetCallingConv.h	/^    static const uint64_t ByValSizeOffs  = 32;$/;"	m	struct:llvm::ISD::ArgFlagsTy
BypassSlowDivWidths	Target/TargetLowering.h	/^  DenseMap <unsigned int, unsigned int> BypassSlowDivWidths;$/;"	m	class:llvm::TargetLowering
ByteAlignment	MC/MCAsmInfo.h	/^    enum LCOMMType { NoAlignment, ByteAlignment, Log2Alignment };$/;"	e	enum:llvm::LCOMM::LCOMMType
ByteSwap_16	Support/MathExtras.h	/^inline uint16_t ByteSwap_16(uint16_t Value) {$/;"	f	namespace:llvm
ByteSwap_32	Support/MathExtras.h	/^inline uint32_t ByteSwap_32(uint32_t Value) {$/;"	f	namespace:llvm
ByteSwap_64	Support/MathExtras.h	/^inline uint64_t ByteSwap_64(uint64_t Value) {$/;"	f	namespace:llvm
Bytes	Support/StreamableMemoryObject.h	/^  mutable std::vector<unsigned char> Bytes;$/;"	m	class:llvm::StreamingMemoryObject
BytesAllocated	Support/Allocator.h	/^  size_t BytesAllocated;$/;"	m	class:llvm::BumpPtrAllocator
BytesRead	Support/StreamableMemoryObject.h	/^  mutable size_t BytesRead;   \/\/ Bytes read from stream$/;"	m	class:llvm::StreamingMemoryObject
BytesSkipped	Support/StreamableMemoryObject.h	/^  size_t BytesSkipped;\/\/ Bytes skipped at start of stream (e.g. wrapper\/header)$/;"	m	class:llvm::StreamingMemoryObject
ByvalParmDbgBegin	CodeGen/SelectionDAG.h	/^  DbgIterator ByvalParmDbgBegin() { return ByvalParmDbgValues.begin(); }$/;"	f	class:llvm::SDDbgInfo
ByvalParmDbgBegin	CodeGen/SelectionDAG.h	/^  SDDbgInfo::DbgIterator ByvalParmDbgBegin() {$/;"	f	class:llvm::SelectionDAG
ByvalParmDbgEnd	CodeGen/SelectionDAG.h	/^  DbgIterator ByvalParmDbgEnd()   { return ByvalParmDbgValues.end(); }$/;"	f	class:llvm::SDDbgInfo
ByvalParmDbgEnd	CodeGen/SelectionDAG.h	/^  SDDbgInfo::DbgIterator ByvalParmDbgEnd()   {$/;"	f	class:llvm::SelectionDAG
ByvalParmDbgValues	CodeGen/SelectionDAG.h	/^  SmallVector<SDDbgValue*, 32> ByvalParmDbgValues;$/;"	m	class:llvm::SDDbgInfo
C	ADT/ImmutableMap.h	/^    Callback &C;$/;"	m	struct:llvm::ImmutableMap::CBWrapperRef
C	ADT/ImmutableMap.h	/^    Callback C;$/;"	m	struct:llvm::ImmutableMap::CBWrapper
C	Analysis/DependenceAnalysis.h	/^      const SCEV *C;$/;"	m	class:llvm::DependenceAnalysis::Constraint
C	CallingConv.h	/^    C = 0,$/;"	e	enum:llvm::CallingConv::ID
C	Support/PatternMatch.h	/^  Cond_t C;$/;"	m	struct:llvm::PatternMatch::SelectClass_match
CALLEDGE_PHONY	Analysis/PathNumbering.h	/^    BACKEDGE_PHONY, SPLITEDGE_PHONY, CALLEDGE_PHONY };$/;"	e	enum:llvm::BallLarusEdge::EdgeType
CALLSEQ_END	CodeGen/ISDOpcodes.h	/^    CALLSEQ_END,    \/\/ End of a call sequence$/;"	e	enum:llvm::ISD::NodeType
CALLSEQ_START	CodeGen/ISDOpcodes.h	/^    CALLSEQ_START,  \/\/ Beginning of a call sequence$/;"	e	enum:llvm::ISD::NodeType
CALLSITE_DELEGATE_GETTER	Support/CallSite.h	156;"	d
CALLSITE_DELEGATE_GETTER	Support/CallSite.h	242;"	d
CALLSITE_DELEGATE_SETTER	Support/CallSite.h	162;"	d
CALLSITE_DELEGATE_SETTER	Support/CallSite.h	243;"	d
CALL_ONCE_INITIALIZATION	PassSupport.h	133;"	d
CARRY_FALSE	CodeGen/ISDOpcodes.h	/^    CARRY_FALSE,$/;"	e	enum:llvm::ISD::NodeType
CAST	TableGen/Record.h	/^  enum UnaryOp { CAST, HEAD, TAIL, EMPTY };$/;"	e	enum:llvm::UnOpInit::UnaryOp
CAST_BITCAST	Bitcode/LLVMBitCodes.h	/^    CAST_BITCAST  = 11$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_FPEXT	Bitcode/LLVMBitCodes.h	/^    CAST_FPEXT    =  8,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_FPTOSI	Bitcode/LLVMBitCodes.h	/^    CAST_FPTOSI   =  4,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_FPTOUI	Bitcode/LLVMBitCodes.h	/^    CAST_FPTOUI   =  3,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_FPTRUNC	Bitcode/LLVMBitCodes.h	/^    CAST_FPTRUNC  =  7,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_INTTOPTR	Bitcode/LLVMBitCodes.h	/^    CAST_INTTOPTR = 10,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_PTRTOINT	Bitcode/LLVMBitCodes.h	/^    CAST_PTRTOINT =  9,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_SEXT	Bitcode/LLVMBitCodes.h	/^    CAST_SEXT     =  2,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_SITOFP	Bitcode/LLVMBitCodes.h	/^    CAST_SITOFP   =  6,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_TRUNC	Bitcode/LLVMBitCodes.h	/^    CAST_TRUNC    =  0,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_UITOFP	Bitcode/LLVMBitCodes.h	/^    CAST_UITOFP   =  5,$/;"	e	enum:llvm::bitc::CastOpcodes
CAST_ZEXT	Bitcode/LLVMBitCodes.h	/^    CAST_ZEXT     =  1,$/;"	e	enum:llvm::bitc::CastOpcodes
CBWrapper	ADT/ImmutableMap.h	/^  struct CBWrapper {$/;"	s	class:llvm::ImmutableMap
CBWrapperRef	ADT/ImmutableMap.h	/^    CBWrapperRef(Callback& c) : C(c) {}$/;"	f	struct:llvm::ImmutableMap::CBWrapperRef
CBWrapperRef	ADT/ImmutableMap.h	/^  struct CBWrapperRef {$/;"	s	class:llvm::ImmutableMap
CCAssignFn	CodeGen/CallingConvLower.h	/^typedef bool CCAssignFn(unsigned ValNo, MVT ValVT,$/;"	t	namespace:llvm
CCCustomFn	CodeGen/CallingConvLower.h	/^typedef bool CCCustomFn(unsigned &ValNo, MVT &ValVT,$/;"	t	namespace:llvm
CCState	CodeGen/CallingConvLower.h	/^class CCState {$/;"	c	namespace:llvm
CCValAssign	CodeGen/CallingConvLower.h	/^class CCValAssign {$/;"	c	namespace:llvm
CEIL_F32	CodeGen/RuntimeLibcalls.h	/^    CEIL_F32,$/;"	e	enum:llvm::RTLIB::Libcall
CEIL_F64	CodeGen/RuntimeLibcalls.h	/^    CEIL_F64,$/;"	e	enum:llvm::RTLIB::Libcall
CEIL_F80	CodeGen/RuntimeLibcalls.h	/^    CEIL_F80,$/;"	e	enum:llvm::RTLIB::Libcall
CEIL_PPCF128	CodeGen/RuntimeLibcalls.h	/^    CEIL_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
CFIMoveType	CodeGen/AsmPrinter.h	/^    enum CFIMoveType {$/;"	g	class:llvm::AsmPrinter
CFI_M_Debug	CodeGen/AsmPrinter.h	/^      CFI_M_Debug$/;"	e	enum:llvm::AsmPrinter::CFIMoveType
CFI_M_EH	CodeGen/AsmPrinter.h	/^      CFI_M_EH,$/;"	e	enum:llvm::AsmPrinter::CFIMoveType
CFI_M_None	CodeGen/AsmPrinter.h	/^      CFI_M_None,$/;"	e	enum:llvm::AsmPrinter::CFIMoveType
CFP	CodeGen/MachineOperand.h	/^    const ConstantFP *CFP;    \/\/ For MO_FPImmediate.$/;"	m	union:llvm::MachineOperand::__anon36
CG	Transforms/Utils/Cloning.h	/^  CallGraph *CG;$/;"	m	class:llvm::InlineFunctionInfo
CGFT_AssemblyFile	Target/TargetMachine.h	/^    CGFT_AssemblyFile,$/;"	e	enum:llvm::TargetMachine::CodeGenFileType
CGFT_Null	Target/TargetMachine.h	/^    CGFT_Null         \/\/ Do not emit any output.$/;"	e	enum:llvm::TargetMachine::CodeGenFileType
CGFT_ObjectFile	Target/TargetMachine.h	/^    CGFT_ObjectFile,$/;"	e	enum:llvm::TargetMachine::CodeGenFileType
CGNDeref	Analysis/CallGraph.h	/^  static CallGraphNode *CGNDeref(CGNPairTy P) {$/;"	f	struct:llvm::GraphTraits
CGNDerefFun	Analysis/CallGraph.h	/^  typedef std::pointer_to_unary_function<CGNPairTy, CallGraphNode*> CGNDerefFun;$/;"	t	struct:llvm::GraphTraits
CGNPairTy	Analysis/CallGraph.h	/^  typedef CallGraphNode::CallRecord CGNPairTy;$/;"	t	struct:llvm::GraphTraits
CGdereference	Analysis/CallGraph.h	/^  static CallGraphNode &CGdereference(PairTy P) {$/;"	f	struct:llvm::GraphTraits
CI	CodeGen/MachineOperand.h	/^    const ConstantInt *CI;    \/\/ For MO_CImmediate. Integers > 64bit.$/;"	m	union:llvm::MachineOperand::__anon36
CI	Transforms/Utils/BuildLibCalls.h	/^    CallInst *CI;$/;"	m	class:llvm::SimplifyFortifiedLibCalls
CIRCO	Support/GraphWriter.h	/^      CIRCO$/;"	e	enum:llvm::GraphProgram::Name
CMModel	ExecutionEngine/ExecutionEngine.h	/^  CodeModel::Model CMModel;$/;"	m	class:llvm::EngineBuilder
CMModel	MC/MCCodeGenInfo.h	/^    CodeModel::Model CMModel;$/;"	m	class:llvm::MCCodeGenInfo
CMModel	MC/MCObjectFileInfo.h	/^  CodeModel::Model CMModel;$/;"	m	class:llvm::MCObjectFileInfo
CNK	ADT/Triple.h	/^    CNK,         \/\/ BG\/P Compute-Node Kernel$/;"	e	enum:llvm::Triple::OSType
COFF	Support/COFF.h	/^namespace COFF {$/;"	n	namespace:llvm
COFFHeader	Support/COFF.h	/^    header COFFHeader;$/;"	m	struct:llvm::COFF::PEHeader
COFFObjectFile	Object/COFF.h	/^class COFFObjectFile : public ObjectFile {$/;"	c	namespace:llvm::object
COFFUniquingMap	MC/MCContext.h	/^    void *MachOUniquingMap, *ELFUniquingMap, *COFFUniquingMap;$/;"	m	class:llvm::MCContext
COFF_FileType	Support/PathV1.h	/^    COFF_FileType                      \/\/\/< COFF object file or lib$/;"	e	enum:llvm::sys::LLVMFileType
COMDATType	Support/COFF.h	/^  enum COMDATType {$/;"	g	namespace:llvm::COFF
COMMDirectiveAlignmentIsInBytes	MC/MCAsmInfo.h	/^    bool COMMDirectiveAlignmentIsInBytes;    \/\/ Defaults to true;$/;"	m	class:llvm::MCAsmInfo
CONCAT	TableGen/Record.h	/^  enum BinaryOp { SHL, SRA, SRL, STRCONCAT, CONCAT, EQ };$/;"	e	enum:llvm::BinOpInit::BinaryOp
CONCAT_VECTORS	CodeGen/ISDOpcodes.h	/^    CONCAT_VECTORS,$/;"	e	enum:llvm::ISD::NodeType
CONDCODE	CodeGen/ISDOpcodes.h	/^    BasicBlock, VALUETYPE, CONDCODE, Register, RegisterMask,$/;"	e	enum:llvm::ISD::NodeType
CONSTANTRANGESSET_H_	Support/IntegersSubset.h	19;"	d
CONSTANTS_BLOCK_ID	Bitcode/LLVMBitCodes.h	/^    CONSTANTS_BLOCK_ID,$/;"	e	enum:llvm::bitc::BlockIDs
CONVERT_RNDSAT	CodeGen/ISDOpcodes.h	/^    CONVERT_RNDSAT,$/;"	e	enum:llvm::ISD::NodeType
COPY	Target/TargetOpcodes.h	/^    COPY = 13,$/;"	e	enum:llvm::TargetOpcode::__anon139
COPYSIGN_F32	CodeGen/RuntimeLibcalls.h	/^    COPYSIGN_F32,$/;"	e	enum:llvm::RTLIB::Libcall
COPYSIGN_F64	CodeGen/RuntimeLibcalls.h	/^    COPYSIGN_F64,$/;"	e	enum:llvm::RTLIB::Libcall
COPYSIGN_F80	CodeGen/RuntimeLibcalls.h	/^    COPYSIGN_F80,$/;"	e	enum:llvm::RTLIB::Libcall
COPYSIGN_PPCF128	CodeGen/RuntimeLibcalls.h	/^    COPYSIGN_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
COPY_TO_REGCLASS	Target/TargetOpcodes.h	/^    COPY_TO_REGCLASS = 10,$/;"	e	enum:llvm::TargetOpcode::__anon139
COS_F32	CodeGen/RuntimeLibcalls.h	/^    COS_F32,$/;"	e	enum:llvm::RTLIB::Libcall
COS_F64	CodeGen/RuntimeLibcalls.h	/^    COS_F64,$/;"	e	enum:llvm::RTLIB::Libcall
COS_F80	CodeGen/RuntimeLibcalls.h	/^    COS_F80,$/;"	e	enum:llvm::RTLIB::Libcall
COS_PPCF128	CodeGen/RuntimeLibcalls.h	/^    COS_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
CPUArchABI64	Support/MachO.h	/^      CPUArchABI64 = 0x01000000,  \/\/ 64 bit ABI$/;"	e	enum:llvm::MachO::__anon127
CPUArchMask	Support/MachO.h	/^      CPUArchMask = 0xff000000,   \/\/ Mask for architecture bits$/;"	e	enum:llvm::MachO::__anon127
CPUSchedModel	MC/MCSubtargetInfo.h	/^  const MCSchedModel *CPUSchedModel;$/;"	m	class:llvm::MCSubtargetInfo
CPUSubType_ARM_ALL	Support/MachO.h	/^      CPUSubType_ARM_ALL     = 0,$/;"	e	enum:llvm::MachO::__anon127
CPUSubType_ARM_V4T	Support/MachO.h	/^      CPUSubType_ARM_V4T     = 5,$/;"	e	enum:llvm::MachO::__anon127
CPUSubType_ARM_V5	Support/MachO.h	/^      CPUSubType_ARM_V5      = 7,$/;"	e	enum:llvm::MachO::__anon127
CPUSubType_ARM_V6	Support/MachO.h	/^      CPUSubType_ARM_V6      = 6,$/;"	e	enum:llvm::MachO::__anon127
CPUSubType_ARM_V7	Support/MachO.h	/^      CPUSubType_ARM_V7      = 9,$/;"	e	enum:llvm::MachO::__anon127
CPUSubType_I386_ALL	Support/MachO.h	/^      CPUSubType_I386_ALL    = 3,$/;"	e	enum:llvm::MachO::__anon127
CPUSubType_POWERPC_ALL	Support/MachO.h	/^      CPUSubType_POWERPC_ALL = 0,$/;"	e	enum:llvm::MachO::__anon127
CPUSubType_SPARC_ALL	Support/MachO.h	/^      CPUSubType_SPARC_ALL   = 0$/;"	e	enum:llvm::MachO::__anon127
CPUSubType_X86_64_ALL	Support/MachO.h	/^      CPUSubType_X86_64_ALL  = 3,$/;"	e	enum:llvm::MachO::__anon127
CPUSubtype	MC/MCMachObjectWriter.h	/^  const uint32_t CPUSubtype;$/;"	m	class:llvm::MCMachObjectTargetWriter
CPUSubtype	Object/MachOFormat.h	/^    uint32_t CPUSubtype;$/;"	m	struct:llvm::object::macho::Header
CPUSubtypeARM	Object/MachOFormat.h	/^  enum CPUSubtypeARM {$/;"	g	namespace:llvm::object::mach
CPUSubtypeFlagsMask	Object/MachOFormat.h	/^  enum CPUSubtypeFlagsMask {$/;"	g	namespace:llvm::object::mach
CPUSubtypePowerPC	Object/MachOFormat.h	/^  enum CPUSubtypePowerPC {$/;"	g	namespace:llvm::object::mach
CPUSubtypeSPARC	Object/MachOFormat.h	/^  enum CPUSubtypeSPARC {$/;"	g	namespace:llvm::object::mach
CPUSubtypeX86	Object/MachOFormat.h	/^  enum CPUSubtypeX86 {$/;"	g	namespace:llvm::object::mach
CPUType	MC/MCMachObjectWriter.h	/^  const uint32_t CPUType;$/;"	m	class:llvm::MCMachObjectTargetWriter
CPUType	Object/MachOFormat.h	/^    uint32_t CPUType;$/;"	m	struct:llvm::object::macho::Header
CPUTypeARM	Support/MachO.h	/^      CPUTypeARM       = 12,$/;"	e	enum:llvm::MachO::__anon127
CPUTypeFlagsMask	Object/MachOFormat.h	/^  enum CPUTypeFlagsMask {$/;"	g	namespace:llvm::object::mach
CPUTypeI386	Support/MachO.h	/^      CPUTypeI386      = 7,$/;"	e	enum:llvm::MachO::__anon127
CPUTypeMachine	Object/MachOFormat.h	/^  enum CPUTypeMachine {$/;"	g	namespace:llvm::object::mach
CPUTypePowerPC	Support/MachO.h	/^      CPUTypePowerPC   = 18,$/;"	e	enum:llvm::MachO::__anon127
CPUTypePowerPC64	Support/MachO.h	/^      CPUTypePowerPC64 = CPUTypePowerPC | CPUArchABI64,$/;"	e	enum:llvm::MachO::__anon127
CPUTypeSPARC	Support/MachO.h	/^      CPUTypeSPARC     = 14,$/;"	e	enum:llvm::MachO::__anon127
CPUTypeX86_64	Support/MachO.h	/^      CPUTypeX86_64    = CPUTypeI386 | CPUArchABI64,$/;"	e	enum:llvm::MachO::__anon127
CRSBUILDER_H_	Support/IntegersSubsetMapping.h	21;"	d
CRSMap	Support/IntegersSubsetMapping.h	/^  typedef std::map<SuccessorClass*, RangesCollection > CRSMap;$/;"	t	class:llvm::IntegersSubsetMapping
CRSMapIt	Support/IntegersSubsetMapping.h	/^  typedef typename CRSMap::iterator CRSMapIt;$/;"	t	class:llvm::IntegersSubsetMapping
CS	Support/Solaris.h	20;"	d
CS	Target/TargetLowering.h	/^    ImmutableCallSite *CS;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
CSARM_ALL	Object/MachOFormat.h	/^    CSARM_ALL    = 0,$/;"	e	enum:llvm::object::mach::CPUSubtypeARM
CSARM_V4T	Object/MachOFormat.h	/^    CSARM_V4T    = 5,$/;"	e	enum:llvm::object::mach::CPUSubtypeARM
CSARM_V5TEJ	Object/MachOFormat.h	/^    CSARM_V5TEJ  = 7,$/;"	e	enum:llvm::object::mach::CPUSubtypeARM
CSARM_V6	Object/MachOFormat.h	/^    CSARM_V6     = 6,$/;"	e	enum:llvm::object::mach::CPUSubtypeARM
CSARM_V7	Object/MachOFormat.h	/^    CSARM_V7     = 9,$/;"	e	enum:llvm::object::mach::CPUSubtypeARM
CSARM_V7F	Object/MachOFormat.h	/^    CSARM_V7F    = 10,$/;"	e	enum:llvm::object::mach::CPUSubtypeARM
CSARM_V7K	Object/MachOFormat.h	/^    CSARM_V7K    = 12$/;"	e	enum:llvm::object::mach::CPUSubtypeARM
CSARM_V7S	Object/MachOFormat.h	/^    CSARM_V7S    = 11,$/;"	e	enum:llvm::object::mach::CPUSubtypeARM
CSARM_XSCALE	Object/MachOFormat.h	/^    CSARM_XSCALE = 8,$/;"	e	enum:llvm::object::mach::CPUSubtypeARM
CSEMap	CodeGen/SelectionDAG.h	/^  FoldingSet<SDNode> CSEMap;$/;"	m	class:llvm::SelectionDAG
CSFM_SubtypeLib64	Object/MachOFormat.h	/^    CSFM_SubtypeLib64 = 0x80000000$/;"	e	enum:llvm::object::mach::CPUSubtypeFlagsMask
CSFM_SubtypeMask	Object/MachOFormat.h	/^    CSFM_SubtypeMask =  0xFF000000,$/;"	e	enum:llvm::object::mach::CPUSubtypeFlagsMask
CSIValid	CodeGen/MachineFrameInfo.h	/^  bool CSIValid;$/;"	m	class:llvm::MachineFrameInfo
CSInfo	CodeGen/MachineFrameInfo.h	/^  std::vector<CalleeSavedInfo> CSInfo;$/;"	m	class:llvm::MachineFrameInfo
CSPPC_ALL	Object/MachOFormat.h	/^    CSPPC_ALL = 0$/;"	e	enum:llvm::object::mach::CPUSubtypePowerPC
CSRNum	CodeGen/RegisterClassInfo.h	/^  SmallVector<uint8_t, 4> CSRNum;$/;"	m	class:llvm::RegisterClassInfo
CSSPARC_ALL	Object/MachOFormat.h	/^    CSSPARC_ALL = 0$/;"	e	enum:llvm::object::mach::CPUSubtypeSPARC
CST_CODE_AGGREGATE	Bitcode/LLVMBitCodes.h	/^    CST_CODE_AGGREGATE     =  7,  \/\/ AGGREGATE:     [n x value number]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_BLOCKADDRESS	Bitcode/LLVMBitCodes.h	/^    CST_CODE_BLOCKADDRESS  = 21,  \/\/ CST_CODE_BLOCKADDRESS [fnty, fnval, bb#]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_BINOP	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_BINOP      = 10,  \/\/ CE_BINOP:      [opcode, opval, opval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_CAST	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_CAST       = 11,  \/\/ CE_CAST:       [opcode, opty, opval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_CMP	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_CMP        = 17,  \/\/ CE_CMP:        [opty, opval, opval, pred]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_EXTRACTELT	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_EXTRACTELT = 14,  \/\/ CE_EXTRACTELT: [opty, opval, opval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_GEP	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_GEP        = 12,  \/\/ CE_GEP:        [n x operands]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_INBOUNDS_GEP	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_INBOUNDS_GEP = 20,\/\/ INBOUNDS_GEP:  [n x operands]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_INSERTELT	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_INSERTELT  = 15,  \/\/ CE_INSERTELT:  [opval, opval, opval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_SELECT	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_SELECT     = 13,  \/\/ CE_SELECT:     [opval, opval, opval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_SHUFFLEVEC	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_SHUFFLEVEC = 16,  \/\/ CE_SHUFFLEVEC: [opval, opval, opval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CE_SHUFVEC_EX	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CE_SHUFVEC_EX = 19,  \/\/ SHUFVEC_EX:    [opty, opval, opval, opval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_CSTRING	Bitcode/LLVMBitCodes.h	/^    CST_CODE_CSTRING       =  9,  \/\/ CSTRING:       [values]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_DATA	Bitcode/LLVMBitCodes.h	/^    CST_CODE_DATA          = 22,  \/\/ DATA:          [n x elements]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_FLOAT	Bitcode/LLVMBitCodes.h	/^    CST_CODE_FLOAT         =  6,  \/\/ FLOAT:         [fpval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_INLINEASM	Bitcode/LLVMBitCodes.h	/^    CST_CODE_INLINEASM     = 23   \/\/ INLINEASM:     [sideeffect|alignstack|$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_INLINEASM_OLD	Bitcode/LLVMBitCodes.h	/^    CST_CODE_INLINEASM_OLD = 18,  \/\/ INLINEASM:     [sideeffect|alignstack,$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_INTEGER	Bitcode/LLVMBitCodes.h	/^    CST_CODE_INTEGER       =  4,  \/\/ INTEGER:       [intval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_NULL	Bitcode/LLVMBitCodes.h	/^    CST_CODE_NULL          =  2,  \/\/ NULL$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_SETTYPE	Bitcode/LLVMBitCodes.h	/^    CST_CODE_SETTYPE       =  1,  \/\/ SETTYPE:       [typeid]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_STRING	Bitcode/LLVMBitCodes.h	/^    CST_CODE_STRING        =  8,  \/\/ STRING:        [values]$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_UNDEF	Bitcode/LLVMBitCodes.h	/^    CST_CODE_UNDEF         =  3,  \/\/ UNDEF$/;"	e	enum:llvm::bitc::ConstantsCodes
CST_CODE_WIDE_INTEGER	Bitcode/LLVMBitCodes.h	/^    CST_CODE_WIDE_INTEGER  =  5,  \/\/ WIDE_INTEGER:  [n x intval]$/;"	e	enum:llvm::bitc::ConstantsCodes
CSX86_ALL	Object/MachOFormat.h	/^    CSX86_ALL = 3$/;"	e	enum:llvm::object::mach::CPUSubtypeX86
CStringKind	ADT/Twine.h	/^      CStringKind,$/;"	e	enum:llvm::Twine::NodeKind
CStringSection	MC/MCObjectFileInfo.h	/^  const MCSection *CStringSection;$/;"	m	class:llvm::MCObjectFileInfo
CTFM_ArchABI64	Object/MachOFormat.h	/^    CTFM_ArchABI64 = 0x01000000$/;"	e	enum:llvm::object::mach::CPUTypeFlagsMask
CTFM_ArchMask	Object/MachOFormat.h	/^    CTFM_ArchMask =  0xFF000000,$/;"	e	enum:llvm::object::mach::CPUTypeFlagsMask
CTLZ	CodeGen/ISDOpcodes.h	/^    BSWAP, CTTZ, CTLZ, CTPOP,$/;"	e	enum:llvm::ISD::NodeType
CTLZ_ZERO_UNDEF	CodeGen/ISDOpcodes.h	/^    CTTZ_ZERO_UNDEF, CTLZ_ZERO_UNDEF,$/;"	e	enum:llvm::ISD::NodeType
CTM_ARM	Object/MachOFormat.h	/^    CTM_ARM       = 12,$/;"	e	enum:llvm::object::mach::CPUTypeMachine
CTM_PowerPC	Object/MachOFormat.h	/^    CTM_PowerPC   = 18,$/;"	e	enum:llvm::object::mach::CPUTypeMachine
CTM_PowerPC64	Object/MachOFormat.h	/^    CTM_PowerPC64 = CTM_PowerPC | CTFM_ArchABI64$/;"	e	enum:llvm::object::mach::CPUTypeMachine
CTM_SPARC	Object/MachOFormat.h	/^    CTM_SPARC     = 14,$/;"	e	enum:llvm::object::mach::CPUTypeMachine
CTM_i386	Object/MachOFormat.h	/^    CTM_i386      = 7,$/;"	e	enum:llvm::object::mach::CPUTypeMachine
CTM_x86_64	Object/MachOFormat.h	/^    CTM_x86_64    = CTM_i386 | CTFM_ArchABI64,$/;"	e	enum:llvm::object::mach::CPUTypeMachine
CTPOP	CodeGen/ISDOpcodes.h	/^    BSWAP, CTTZ, CTLZ, CTPOP,$/;"	e	enum:llvm::ISD::NodeType
CTTZ	CodeGen/ISDOpcodes.h	/^    BSWAP, CTTZ, CTLZ, CTPOP,$/;"	e	enum:llvm::ISD::NodeType
CTTZ_ZERO_UNDEF	CodeGen/ISDOpcodes.h	/^    CTTZ_ZERO_UNDEF, CTLZ_ZERO_UNDEF,$/;"	e	enum:llvm::ISD::NodeType
CUs	DebugInfo.h	/^    SmallVector<MDNode *, 8> CUs;  \/\/ Compile Units$/;"	m	class:llvm::DebugInfoFinder
CVT_FF	CodeGen/ISDOpcodes.h	/^    CVT_FF,     \/\/\/ Float from Float$/;"	e	enum:llvm::ISD::CvtCode
CVT_FS	CodeGen/ISDOpcodes.h	/^    CVT_FS,     \/\/\/ Float from Signed$/;"	e	enum:llvm::ISD::CvtCode
CVT_FU	CodeGen/ISDOpcodes.h	/^    CVT_FU,     \/\/\/ Float from Unsigned$/;"	e	enum:llvm::ISD::CvtCode
CVT_INVALID	CodeGen/ISDOpcodes.h	/^    CVT_INVALID \/\/\/ Marker - Invalid opcode$/;"	e	enum:llvm::ISD::CvtCode
CVT_SF	CodeGen/ISDOpcodes.h	/^    CVT_SF,     \/\/\/ Signed from Float$/;"	e	enum:llvm::ISD::CvtCode
CVT_SS	CodeGen/ISDOpcodes.h	/^    CVT_SS,     \/\/\/ Signed from Signed$/;"	e	enum:llvm::ISD::CvtCode
CVT_SU	CodeGen/ISDOpcodes.h	/^    CVT_SU,     \/\/\/ Signed from Unsigned$/;"	e	enum:llvm::ISD::CvtCode
CVT_UF	CodeGen/ISDOpcodes.h	/^    CVT_UF,     \/\/\/ Unsigned from Float$/;"	e	enum:llvm::ISD::CvtCode
CVT_US	CodeGen/ISDOpcodes.h	/^    CVT_US,     \/\/\/ Unsigned from Signed$/;"	e	enum:llvm::ISD::CvtCode
CVT_UU	CodeGen/ISDOpcodes.h	/^    CVT_UU,     \/\/\/ Unsigned from Unsigned$/;"	e	enum:llvm::ISD::CvtCode
CW_Best	Target/TargetLowering.h	/^    CW_Best     = 3,      \/\/ Best weight.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CW_Better	Target/TargetLowering.h	/^    CW_Better   = 2,      \/\/ Better weight.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CW_Constant	Target/TargetLowering.h	/^    CW_Constant     = CW_Best,    \/\/ Constant operand.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CW_Default	Target/TargetLowering.h	/^    CW_Default      = CW_Okay     \/\/ Default or don't know type.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CW_Good	Target/TargetLowering.h	/^    CW_Good     = 1,      \/\/ Good weight.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CW_Invalid	Target/TargetLowering.h	/^    CW_Invalid  = -1,     \/\/ No match.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CW_Memory	Target/TargetLowering.h	/^    CW_Memory       = CW_Better,  \/\/ Memory operands.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CW_Okay	Target/TargetLowering.h	/^    CW_Okay     = 0,      \/\/ Acceptable.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CW_Register	Target/TargetLowering.h	/^    CW_Register     = CW_Good,    \/\/ Register operands.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CW_SpecificReg	Target/TargetLowering.h	/^    CW_SpecificReg  = CW_Okay,    \/\/ Specific register operands.$/;"	e	enum:llvm::TargetLowering::ConstraintWeight
CYAN	Support/raw_ostream.h	/^    CYAN,$/;"	e	enum:llvm::raw_ostream::Colors
C_Invalid	Support/COFF.h	/^    C_Invalid = 0,$/;"	e	enum:llvm::COFF::Characteristics
C_Memory	Target/TargetLowering.h	/^    C_Memory,              \/\/ Memory constraint.$/;"	e	enum:llvm::TargetLowering::ConstraintType
C_Other	Target/TargetLowering.h	/^    C_Other,               \/\/ Something else.$/;"	e	enum:llvm::TargetLowering::ConstraintType
C_Register	Target/TargetLowering.h	/^    C_Register,            \/\/ Constraint represents specific register(s).$/;"	e	enum:llvm::TargetLowering::ConstraintType
C_RegisterClass	Target/TargetLowering.h	/^    C_RegisterClass,       \/\/ Constraint represents any of register(s) in class.$/;"	e	enum:llvm::TargetLowering::ConstraintType
C_Unknown	Target/TargetLowering.h	/^    C_Unknown              \/\/ Unsupported constraint.$/;"	e	enum:llvm::TargetLowering::ConstraintType
Cache	ADT/ImmutableList.h	/^  CacheTy Cache;$/;"	m	class:llvm::ImmutableListFactory
Cache	ADT/ImmutableSet.h	/^  CacheTy Cache;$/;"	m	class:llvm::ImutAVLFactory
Cache	CodeGen/MachineLoopRanges.h	/^  CacheMap Cache;$/;"	m	class:llvm::MachineLoopRanges
CacheAlignedPointerTraits	ADT/IntervalMap.h	/^  struct CacheAlignedPointerTraits {$/;"	s	class:llvm::IntervalMapImpl::NodeRef
CacheLineBytes	ADT/IntervalMap.h	/^  CacheLineBytes = 1 << Log2CacheLine,$/;"	e	enum:llvm::IntervalMapImpl::__anon19
CacheMap	Analysis/MemoryBuiltins.h	/^  CacheMapTy CacheMap;$/;"	m	class:llvm::ObjectSizeOffsetEvaluator
CacheMap	CodeGen/MachineLoopRanges.h	/^  typedef DenseMap<const MachineLoop*, MachineLoopRange*> CacheMap;$/;"	t	class:llvm::MachineLoopRanges
CacheMapTy	Analysis/MemoryBuiltins.h	/^  typedef DenseMap<const Value*, WeakEvalType> CacheMapTy;$/;"	t	class:llvm::ObjectSizeOffsetEvaluator
CacheTy	ADT/ImmutableList.h	/^  typedef FoldingSet<ListTy>   CacheTy;$/;"	t	class:llvm::ImmutableListFactory
CacheTy	ADT/ImmutableSet.h	/^  typedef DenseMap<unsigned, TreeTy*> CacheTy;$/;"	t	class:llvm::ImutAVLFactory
CachedNonLocalPointerInfo	Analysis/MemoryDependenceAnalysis.h	/^                     NonLocalPointerInfo> CachedNonLocalPointerInfo;$/;"	t	class:llvm::MemoryDependenceAnalysis
CachedTable	CodeGen/DFAPacketizer.h	/^  DenseMap<UnsignPair, unsigned> CachedTable;$/;"	m	class:llvm::DFAPacketizer
Calculate	Analysis/DominatorInternals.h	/^void Calculate(DominatorTreeBase<typename GraphTraits<NodeT>::NodeType>& DT,$/;"	f	namespace:llvm
CalculateSpillWeights	CodeGen/CalcSpillWeights.h	/^    CalculateSpillWeights() : MachineFunctionPass(ID) {$/;"	f	class:llvm::CalculateSpillWeights
CalculateSpillWeights	CodeGen/CalcSpillWeights.h	/^  class CalculateSpillWeights : public MachineFunctionPass {$/;"	c	namespace:llvm
Call	CodeGen/CallingConvLower.h	/^typedef enum { Unknown, Prologue, Call } ParmContext;$/;"	e	enum:llvm::__anon47
Call	MC/MCInstrDesc.h	/^    Call,$/;"	e	enum:llvm::MCID::__anon69
CallConv	Target/TargetLowering.h	/^    CallingConv::ID CallConv;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
CallFrameDestroyOpcode	Target/TargetInstrInfo.h	/^  int CallFrameSetupOpcode, CallFrameDestroyOpcode;$/;"	m	class:llvm::TargetInstrInfo
CallFrameSetupOpcode	Target/TargetInstrInfo.h	/^  int CallFrameSetupOpcode, CallFrameDestroyOpcode;$/;"	m	class:llvm::TargetInstrInfo
CallGraph	Analysis/CallGraph.h	/^  CallGraph() {}$/;"	f	class:llvm::CallGraph
CallGraph	Analysis/CallGraph.h	/^class CallGraph {$/;"	c	namespace:llvm
CallGraphNode	Analysis/CallGraph.h	/^  inline CallGraphNode(Function *f) : F(f), NumReferences(0) {}$/;"	f	class:llvm::CallGraphNode
CallGraphNode	Analysis/CallGraph.h	/^class CallGraphNode {$/;"	c	namespace:llvm
CallGraphSCC	CallGraphSCCPass.h	/^  CallGraphSCC(void *context) : Context(context) {}$/;"	f	class:llvm::CallGraphSCC
CallGraphSCC	CallGraphSCCPass.h	/^class CallGraphSCC {$/;"	c	namespace:llvm
CallGraphSCCPass	CallGraphSCCPass.h	/^  explicit CallGraphSCCPass(char &pid) : Pass(PT_CallGraphSCC, pid) {}$/;"	f	class:llvm::CallGraphSCCPass
CallGraphSCCPass	CallGraphSCCPass.h	/^class CallGraphSCCPass : public Pass {$/;"	c	namespace:llvm
CallInst	Instructions.h	/^CallInst::CallInst(Value *Func, ArrayRef<Value *> Args,$/;"	f	class:llvm::CallInst
CallInst	Instructions.h	/^class CallInst : public Instruction {$/;"	c	namespace:llvm
CallLoweringInfo	Target/TargetLowering.h	/^    CallLoweringInfo(SDValue chain, Type *retTy, bool retSExt, bool retZExt,$/;"	f	struct:llvm::TargetLowering::CallLoweringInfo
CallLoweringInfo	Target/TargetLowering.h	/^    CallLoweringInfo(SDValue chain, Type *retTy,$/;"	f	struct:llvm::TargetLowering::CallLoweringInfo
CallLoweringInfo	Target/TargetLowering.h	/^  struct CallLoweringInfo {$/;"	s	class:llvm::TargetLowering
CallOperandVal	Target/TargetLowering.h	/^    Value *CallOperandVal;$/;"	m	struct:llvm::TargetLowering::AsmOperandInfo
CallOrPrologue	CodeGen/CallingConvLower.h	/^  ParmContext CallOrPrologue;$/;"	m	class:llvm::CCState
CallPenalty	Analysis/InlineCost.h	/^    const int CallPenalty = 25;$/;"	m	namespace:llvm::InlineConstants
CallRecord	Analysis/CallGraph.h	/^  typedef std::pair<WeakVH, CallGraphNode*> CallRecord;$/;"	t	class:llvm::CallGraphNode
CallSite	Support/CallSite.h	/^  CallSite() {}$/;"	f	class:llvm::CallSite
CallSite	Support/CallSite.h	/^  CallSite(Base B) : Base(B) {}$/;"	f	class:llvm::CallSite
CallSite	Support/CallSite.h	/^  CallSite(CallInst *CI) : Base(CI) {}$/;"	f	class:llvm::CallSite
CallSite	Support/CallSite.h	/^  CallSite(Instruction *II) : Base(II) {}$/;"	f	class:llvm::CallSite
CallSite	Support/CallSite.h	/^  CallSite(InvokeInst *II) : Base(II) {}$/;"	f	class:llvm::CallSite
CallSite	Support/CallSite.h	/^  CallSite(Value* V) : Base(V) {}$/;"	f	class:llvm::CallSite
CallSite	Support/CallSite.h	/^class CallSite : public CallSiteBase<Function, Value, User, Instruction,$/;"	c	namespace:llvm
CallSiteBase	Support/CallSite.h	/^  CallSiteBase() : I(0, false) {}$/;"	f	class:llvm::CallSiteBase
CallSiteBase	Support/CallSite.h	/^  CallSiteBase(CallTy *CI) : I(CI, true) { assert(CI); }$/;"	f	class:llvm::CallSiteBase
CallSiteBase	Support/CallSite.h	/^  CallSiteBase(InvokeTy *II) : I(II, false) { assert(II); }$/;"	f	class:llvm::CallSiteBase
CallSiteBase	Support/CallSite.h	/^  CallSiteBase(ValTy *II) { *this = get(II); }$/;"	f	class:llvm::CallSiteBase
CallSiteBase	Support/CallSite.h	/^class CallSiteBase {$/;"	c	namespace:llvm
CallSiteMap	CodeGen/MachineModuleInfo.h	/^  DenseMap<MCSymbol*, unsigned> CallSiteMap;$/;"	m	class:llvm::MachineModuleInfo
Callback	Support/ValueHandle.h	/^    Callback,$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
CallbackVH	Support/ValueHandle.h	/^  CallbackVH() : ValueHandleBase(Callback) {}$/;"	f	class:llvm::CallbackVH
CallbackVH	Support/ValueHandle.h	/^  CallbackVH(Value *P) : ValueHandleBase(Callback, P) {}$/;"	f	class:llvm::CallbackVH
CallbackVH	Support/ValueHandle.h	/^  CallbackVH(const CallbackVH &RHS)$/;"	f	class:llvm::CallbackVH
CallbackVH	Support/ValueHandle.h	/^class CallbackVH : public ValueHandleBase {$/;"	c	namespace:llvm
CalledByLegalizer	Target/TargetLowering.h	/^    bool CalledByLegalizer;$/;"	m	struct:llvm::TargetLowering::DAGCombinerInfo
CalledFunctions	Analysis/CallGraph.h	/^  std::vector<CallRecord> CalledFunctions;$/;"	m	class:llvm::CallGraphNode
CalledFunctionsVector	Analysis/CallGraph.h	/^  typedef std::vector<CallRecord> CalledFunctionsVector;$/;"	t	class:llvm::CallGraphNode
Callee	Target/TargetLowering.h	/^    SDValue Callee;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
CalleeSaved	CodeGen/RegisterClassInfo.h	/^  const uint16_t *CalleeSaved;$/;"	m	class:llvm::RegisterClassInfo
CalleeSavedInfo	CodeGen/MachineFrameInfo.h	/^  explicit CalleeSavedInfo(unsigned R, int FI = 0)$/;"	f	class:llvm::CalleeSavedInfo
CalleeSavedInfo	CodeGen/MachineFrameInfo.h	/^class CalleeSavedInfo {$/;"	c	namespace:llvm
CalleeSavedRegs	CodeGen/RegisterScavenging.h	/^  BitVector CalleeSavedRegs;$/;"	m	class:llvm::RegScavenger
CallingConv	CallingConv.h	/^namespace CallingConv {$/;"	n	namespace:llvm
CallingConv	CodeGen/CallingConvLower.h	/^  CallingConv::ID CallingConv;$/;"	m	class:llvm::CCState
CallsEHReturn	CodeGen/MachineModuleInfo.h	/^  bool CallsEHReturn;$/;"	m	class:llvm::MachineModuleInfo
CallsUnwindInit	CodeGen/MachineModuleInfo.h	/^  bool CallsUnwindInit;$/;"	m	class:llvm::MachineModuleInfo
CanHandleTerminators	CodeGen/ScheduleDAGInstrs.h	/^    bool CanHandleTerminators;$/;"	m	class:llvm::ScheduleDAGInstrs
CanLowerReturn	CodeGen/FunctionLoweringInfo.h	/^  bool CanLowerReturn;$/;"	m	class:llvm::FunctionLoweringInfo
CanLowerReturn	Target/TargetLowering.h	/^  virtual bool CanLowerReturn(CallingConv::ID \/*CallConv*\/,$/;"	f	class:llvm::TargetLowering
CanonicalMode	Analysis/ScalarEvolutionExpander.h	/^    bool CanonicalMode;$/;"	m	class:llvm::SCEVExpander
Canonicalize	ADT/ImmutableMap.h	/^    const bool Canonicalize;$/;"	m	class:llvm::ImmutableMap::Factory
Canonicalize	ADT/ImmutableSet.h	/^    const bool Canonicalize;$/;"	m	class:llvm::ImmutableSet::Factory
Capacity	ADT/BitVector.h	/^  unsigned Capacity;     \/\/ Size of allocated memory in BitWord.$/;"	m	class:llvm::BitVector
Capacity	ADT/IntervalMap.h	/^  enum { Capacity = N };$/;"	e	enum:llvm::IntervalMapImpl::NodeBase::__anon18
CapacityX	ADT/SmallVector.h	/^  void *BeginX, *EndX, *CapacityX;$/;"	m	class:llvm::SmallVectorBase
CaptureTracker	Analysis/CaptureTracking.h	/^  struct CaptureTracker {$/;"	s	namespace:llvm
Caret	MC/MCParser/MCAsmLexer.h	/^    Pipe, PipePipe, Caret,$/;"	e	enum:llvm::AsmToken::TokenKind
Case	ADT/StringSwitch.h	/^  StringSwitch& Case(const char (&S)[N], const T& Value) {$/;"	f	class:llvm::StringSwitch
Case	Support/IntegersSubsetMapping.h	/^  typedef std::pair<SuccessorClass*, IntegersSubsetTy> Case;$/;"	t	class:llvm::IntegersSubsetMapping
CaseIt	Instructions.h	/^    CaseIt(SwitchInst *SI, unsigned CaseNum) : ParentTy(SI, CaseNum) {}    $/;"	f	class:llvm::SwitchInst::CaseIt
CaseIt	Instructions.h	/^    CaseIt(SwitchInst *SI, unsigned CaseNum, SubsetsIt SubsetIt) :$/;"	f	class:llvm::SwitchInst::CaseIt
CaseIt	Instructions.h	/^    CaseIt(const ParentTy& Src) : ParentTy(Src) {}$/;"	f	class:llvm::SwitchInst::CaseIt
CaseIt	Instructions.h	/^  class CaseIt : public CaseIteratorT<SwitchInst, ConstantInt,$/;"	c	class:llvm::SwitchInst
CaseItemConstIt	Support/IntegersSubsetMapping.h	/^  typedef typename CaseItems::const_iterator CaseItemConstIt;$/;"	t	class:llvm::IntegersSubsetMapping
CaseItemIt	Support/IntegersSubsetMapping.h	/^  typedef typename CaseItems::iterator CaseItemIt;$/;"	t	class:llvm::IntegersSubsetMapping
CaseItems	Support/IntegersSubsetMapping.h	/^  typedef std::list<Cluster> CaseItems;$/;"	t	class:llvm::IntegersSubsetMapping
CaseIteratorT	Instructions.h	/^    CaseIteratorT(SwitchInstTy *SI, unsigned CaseNum) {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
CaseIteratorT	Instructions.h	/^    CaseIteratorT(SwitchInstTy *SI, unsigned SuccessorIndex,$/;"	f	class:llvm::SwitchInst::CaseIteratorT
CaseIteratorT	Instructions.h	/^  class CaseIteratorT {$/;"	c	class:llvm::SwitchInst
Cases	ADT/StringSwitch.h	/^  StringSwitch& Cases(const char (&S0)[N0], const char (&S1)[N1],$/;"	f	class:llvm::StringSwitch
Cases	Support/IntegersSubsetMapping.h	/^  typedef std::list<Case> Cases;$/;"	t	class:llvm::IntegersSubsetMapping
CasesIt	Support/IntegersSubsetMapping.h	/^  typedef typename Cases::iterator CasesIt;$/;"	t	class:llvm::IntegersSubsetMapping
CastClass_match	Support/PatternMatch.h	/^  CastClass_match(const Op_t &OpMatch) : Op(OpMatch) {}$/;"	f	struct:llvm::PatternMatch::CastClass_match
CastClass_match	Support/PatternMatch.h	/^struct CastClass_match {$/;"	s	namespace:llvm::PatternMatch
CastInst	InstrTypes.h	/^  CastInst(Type *Ty, unsigned iType, Value *S,$/;"	f	class:llvm::CastInst
CastInst	InstrTypes.h	/^class CastInst : public UnaryInstruction {$/;"	c	namespace:llvm
CastOpcodes	Bitcode/LLVMBitCodes.h	/^  enum CastOpcodes {$/;"	g	namespace:llvm::bitc
CastOps	Instruction.h	/^  enum CastOps {$/;"	g	class:llvm::Instruction
Catch	Instructions.h	/^  enum ClauseType { Catch, Filter };$/;"	e	enum:llvm::LandingPadInst::ClauseType
CatchInfoFound	CodeGen/FunctionLoweringInfo.h	/^  SmallPtrSet<const Instruction *, 8> CatchInfoFound;$/;"	m	class:llvm::FunctionLoweringInfo
CatchInfoLost	CodeGen/FunctionLoweringInfo.h	/^  SmallPtrSet<const Instruction *, 8> CatchInfoLost;$/;"	m	class:llvm::FunctionLoweringInfo
Chain	CodeGen/SelectionDAGNodes.h	/^  SDUse Chain;$/;"	m	class:llvm::EHLabelSDNode
Chain	Target/TargetLowering.h	/^    SDValue Chain;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
ChainedParent	MC/MCWin64EH.h	/^    MCWin64EHUnwindInfo *ChainedParent;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
ChainedPhis	Analysis/ScalarEvolutionExpander.h	/^    std::set<AssertingVH<PHINode> > ChainedPhis;$/;"	m	class:llvm::SCEVExpander
Char6	Bitcode/BitCodes.h	/^    Char6 = 4,  \/\/ A 6-bit fixed field which maps to [a-zA-Z0-9._].$/;"	e	enum:llvm::BitCodeAbbrevOp::Encoding
CharKind	ADT/Twine.h	/^      CharKind,$/;"	e	enum:llvm::Twine::NodeKind
Characteristics	MC/MCSectionCOFF.h	/^    unsigned Characteristics;$/;"	m	class:llvm::MCSectionCOFF
Characteristics	Object/COFF.h	/^  support::ulittle16_t Characteristics;$/;"	m	struct:llvm::object::coff_file_header
Characteristics	Object/COFF.h	/^  support::ulittle32_t Characteristics;$/;"	m	struct:llvm::object::coff_section
Characteristics	Support/COFF.h	/^    uint16_t Characteristics;$/;"	m	struct:llvm::COFF::header
Characteristics	Support/COFF.h	/^    uint32_t Characteristics;$/;"	m	struct:llvm::COFF::AuxiliaryWeakExternal
Characteristics	Support/COFF.h	/^    uint32_t Characteristics;$/;"	m	struct:llvm::COFF::section
Characteristics	Support/COFF.h	/^  enum Characteristics {$/;"	g	namespace:llvm::COFF
CheapAsAMove	MC/MCInstrDesc.h	/^    CheapAsAMove,$/;"	e	enum:llvm::MCID::__anon69
CheckComplexPattern	CodeGen/SelectionDAGISel.h	/^  virtual bool CheckComplexPattern(SDNode *Root, SDNode *Parent, SDValue N,$/;"	f	class:llvm::SelectionDAGISel
CheckDefs	CodeGen/MachineInstr.h	/^    CheckDefs,      \/\/ Check all operands for equality$/;"	e	enum:llvm::MachineInstr::MICheckType
CheckIfPHIMatches	Transforms/Utils/SSAUpdaterImpl.h	/^  bool CheckIfPHIMatches(PhiT *PHI) {$/;"	f	class:llvm::SSAUpdaterImpl
CheckInvariants	ExecutionEngine/JITMemoryManager.h	/^  virtual bool CheckInvariants(std::string &) {$/;"	f	class:llvm::JITMemoryManager
CheckKillDead	CodeGen/MachineInstr.h	/^    CheckKillDead,  \/\/ Check all operands including kill \/ dead markers$/;"	e	enum:llvm::MachineInstr::MICheckType
CheckLazyArguments	Function.h	/^  void CheckLazyArguments() const {$/;"	f	class:llvm::Function
CheckNodePredicate	CodeGen/SelectionDAGISel.h	/^  virtual bool CheckNodePredicate(SDNode *N, unsigned PredNo) const {$/;"	f	class:llvm::SelectionDAGISel
CheckPatternPredicate	CodeGen/SelectionDAGISel.h	/^  virtual bool CheckPatternPredicate(unsigned PredNo) const {$/;"	f	class:llvm::SelectionDAGISel
CheckSum	Object/COFF.h	/^  support::ulittle32_t CheckSum;$/;"	m	struct:llvm::object::coff_aux_section_definition
CheckSum	Support/COFF.h	/^    uint32_t CheckSum;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
CheckSum	Support/COFF.h	/^    uint32_t CheckSum;$/;"	m	struct:llvm::COFF::PEHeader
CheckValidity	Support/ValueHandle.h	/^  void CheckValidity() const {$/;"	f	class:llvm::TrackingVH
Checksum	Support/COFF.h	/^    uint16_t Checksum;$/;"	m	struct:llvm::COFF::DOSHeader
Child	ADT/Twine.h	/^    union Child$/;"	u	class:llvm::Twine
Child	Object/Archive.h	/^    Child(const Archive *p, StringRef d) : Parent(p), Data(d) {}$/;"	f	class:llvm::object::Archive::Child
Child	Object/Archive.h	/^  class Child {$/;"	c	class:llvm::object::Archive
ChildItTy	ADT/DepthFirstIterator.h	/^  typedef typename GT::ChildIteratorType ChildItTy;$/;"	t	class:llvm::df_iterator
ChildItTy	ADT/PostOrderIterator.h	/^  typedef typename GT::ChildIteratorType ChildItTy;$/;"	t	class:llvm::po_iterator
ChildItTy	ADT/SCCIterator.h	/^  typedef typename GT::ChildIteratorType ChildItTy;$/;"	t	class:llvm::scc_iterator
ChildIteratorType	ADT/GraphTraits.h	/^  typedef typename GraphTraits<T>::ChildIteratorType ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Analysis/CallGraph.h	/^  typedef NodeType::const_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Analysis/CallGraph.h	/^  typedef mapped_iterator<NodeType::iterator, CGNDerefFun> ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Analysis/Dominators.h	/^  typedef NodeType::iterator  ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Analysis/Interval.h	/^  typedef Interval::pred_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Analysis/Interval.h	/^  typedef Interval::succ_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Analysis/LoopInfo.h	/^  typedef LoopInfo::iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CodeGen/MachineBasicBlock.h	/^  typedef MachineBasicBlock::const_pred_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CodeGen/MachineBasicBlock.h	/^  typedef MachineBasicBlock::const_succ_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CodeGen/MachineBasicBlock.h	/^  typedef MachineBasicBlock::pred_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CodeGen/MachineBasicBlock.h	/^  typedef MachineBasicBlock::succ_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CodeGen/MachineDominators.h	/^  typedef NodeType::iterator  ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CodeGen/MachineLoopInfo.h	/^  typedef MachineLoopInfo::iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CodeGen/ScheduleDAG.h	/^    typedef SUnitIterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CodeGen/SelectionDAGNodes.h	/^  typedef SDNodeIterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Support/CFG.h	/^  typedef const_pred_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Support/CFG.h	/^  typedef pred_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Support/CFG.h	/^  typedef succ_const_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Support/CFG.h	/^  typedef succ_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Support/DataFlow.h	/^  typedef User::const_op_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Support/DataFlow.h	/^  typedef User::op_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Support/DataFlow.h	/^  typedef Value::const_use_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Support/DataFlow.h	/^  typedef Value::use_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	Type.h	/^  typedef Type::subtype_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
Children	Analysis/Dominators.h	/^  std::vector<DomTreeNodeBase<NodeT> *> Children;$/;"	m	class:llvm::DomTreeNodeBase
Children	CodeGen/LexicalScopes.h	/^  SmallVector<LexicalScope *, 4> Children;       \/\/ Scopes defined in scope.  $/;"	m	class:llvm::LexicalScope
Classes	MC/MCRegisterInfo.h	/^  const MCRegisterClass *Classes;             \/\/ Pointer to the regclass array$/;"	m	class:llvm::MCRegisterInfo
Classes	TableGen/Record.h	/^  std::map<std::string, Record*> Classes, Defs;$/;"	m	class:llvm::RecordKeeper
Classification	Analysis/DependenceAnalysis.h	/^      enum ClassificationKind { ZIV, SIV, RDIV, MIV, NonLinear } Classification;$/;"	m	struct:llvm::DependenceAnalysis::Subscript	typeref:enum:llvm::DependenceAnalysis::Subscript::ClassificationKind
ClassificationKind	Analysis/DependenceAnalysis.h	/^      enum ClassificationKind { ZIV, SIV, RDIV, MIV, NonLinear } Classification;$/;"	g	struct:llvm::DependenceAnalysis::Subscript
ClauseType	Instructions.h	/^  enum ClauseType { Catch, Filter };$/;"	g	class:llvm::LandingPadInst
CleanupInstaller	Support/ToolOutputFile.h	/^  class CleanupInstaller {$/;"	c	class:llvm::tool_output_file
ClearDwarfLocSeen	MC/MCContext.h	/^    void ClearDwarfLocSeen() { DwarfLocSeen = false; }$/;"	f	class:llvm::MCContext
ClearInsertionPoint	IRBuilder.h	/^  void ClearInsertionPoint() {$/;"	f	class:llvm::IRBuilderBase
Clobber	Analysis/MemoryDependenceAnalysis.h	/^      Clobber,$/;"	e	enum:llvm::MemDepResult::DepType
Clobbers	CodeGen/MachineInstrBundle.h	/^    bool Clobbers;$/;"	m	struct:llvm::MachineOperandIteratorBase::PhysRegInfo
ClonedCodeInfo	Transforms/Utils/Cloning.h	/^  ClonedCodeInfo() : ContainsCalls(false), ContainsDynamicAllocas(false) {}$/;"	f	struct:llvm::ClonedCodeInfo
ClonedCodeInfo	Transforms/Utils/Cloning.h	/^struct ClonedCodeInfo {$/;"	s	namespace:llvm
CloseAgentFunc	ExecutionEngine/OProfileWrapper.h	/^  op_close_agent_ptr_t            CloseAgentFunc;$/;"	m	class:llvm::OProfileWrapper
Cluster	Support/IntegersSubsetMapping.h	/^  typedef std::pair<RangeEx, SuccessorClass*> Cluster;$/;"	t	class:llvm::IntegersSubsetMapping
ClustersCmp	Support/IntegersSubsetMapping.h	/^  struct ClustersCmp {$/;"	s	class:llvm::IntegersSubsetMapping
CmpClass_match	Support/PatternMatch.h	/^  CmpClass_match(PredicateTy &Pred, const LHS_t &LHS, const RHS_t &RHS)$/;"	f	struct:llvm::PatternMatch::CmpClass_match
CmpClass_match	Support/PatternMatch.h	/^struct CmpClass_match {$/;"	s	namespace:llvm::PatternMatch
CmpInst	InstrTypes.h	/^class CmpInst : public Instruction {$/;"	c	namespace:llvm
CmpLibcallCCs	Target/TargetLowering.h	/^  ISD::CondCode CmpLibcallCCs[RTLIB::UNKNOWN_LIBCALL];$/;"	m	class:llvm::TargetLowering
Code	MC/MCAssembler.h	/^  SmallString<8> Code;$/;"	m	class:llvm::MCInstFragment
Code16Directive	MC/MCAsmInfo.h	/^    const char *Code16Directive;             \/\/ Defaults to ".code16"$/;"	m	class:llvm::MCAsmInfo
Code32Directive	MC/MCAsmInfo.h	/^    const char *Code32Directive;             \/\/ Defaults to ".code32"$/;"	m	class:llvm::MCAsmInfo
Code64Directive	MC/MCAsmInfo.h	/^    const char *Code64Directive;             \/\/ Defaults to ".code64"$/;"	m	class:llvm::MCAsmInfo
CodeExtractor	Transforms/Utils/CodeExtractor.h	/^  class CodeExtractor {$/;"	c	namespace:llvm
CodeGenFileType	Target/TargetMachine.h	/^  enum CodeGenFileType {$/;"	g	class:llvm::TargetMachine
CodeGenInfo	Target/TargetMachine.h	/^  const MCCodeGenInfo *CodeGenInfo;$/;"	m	class:llvm::TargetMachine
CodeGenOpt	Support/CodeGen.h	/^  namespace CodeGenOpt {$/;"	n	namespace:llvm
CodeLenWidth	Bitcode/BitCodes.h	/^    CodeLenWidth = 4,  \/\/ Codelen are VBR-4.$/;"	e	enum:llvm::bitc::StandardWidths
CodeMetrics	Analysis/CodeMetrics.h	/^    CodeMetrics() : exposesReturnsTwice(false), isRecursive(false),$/;"	f	struct:llvm::CodeMetrics
CodeMetrics	Analysis/CodeMetrics.h	/^  struct CodeMetrics {$/;"	s	namespace:llvm
CodeModel	Support/CodeGen.h	/^  namespace CodeModel {$/;"	n	namespace:llvm
Codes	InlineAsm.h	/^    ConstraintCodeVector Codes;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
Codes	InlineAsm.h	/^    ConstraintCodeVector Codes;$/;"	m	struct:llvm::InlineAsm::SubConstraintInfo
Coeff	Analysis/DependenceAnalysis.h	/^      const SCEV *Coeff;$/;"	m	struct:llvm::DependenceAnalysis::CoefficientInfo
CoefficientInfo	Analysis/DependenceAnalysis.h	/^    struct CoefficientInfo {$/;"	s	class:llvm::DependenceAnalysis
Cold	CallingConv.h	/^    Cold = 9,$/;"	e	enum:llvm::CallingConv::ID
ColdccPenalty	Analysis/InlineCost.h	/^    const int ColdccPenalty = 2000;$/;"	m	namespace:llvm::InlineConstants
CollectBlockInfoNames	Bitcode/BitstreamReader.h	/^  void CollectBlockInfoNames() { IgnoreBlockInfoNames = false; }$/;"	f	class:llvm::BitstreamReader
Colon	MC/MCParser/MCAsmLexer.h	/^    Colon,$/;"	e	enum:llvm::AsmToken::TokenKind
Colors	Support/raw_ostream.h	/^  enum Colors {$/;"	g	class:llvm::raw_ostream
Column	DebugInfo/DIContext.h	/^  uint32_t Column;$/;"	m	class:llvm::DILineInfo
Column	MC/MCDwarf.h	/^    unsigned Column;$/;"	m	class:llvm::MCDwarfLoc
ColumnNo	Support/SourceMgr.h	/^  int LineNo, ColumnNo;$/;"	m	class:llvm::SMDiagnostic
ColumnScanned	Support/FormattedStream.h	/^    unsigned ColumnScanned;$/;"	m	class:llvm::formatted_raw_ostream
CombineLevel	CodeGen/SelectionDAG.h	/^enum CombineLevel {$/;"	g	namespace:llvm
CombineTo	Target/TargetLowering.h	/^    bool CombineTo(SDValue O, SDValue N) {$/;"	f	struct:llvm::TargetLowering::TargetLoweringOpt
CommDirectiveSupportsAlignment	MC/MCObjectFileInfo.h	/^  bool CommDirectiveSupportsAlignment;$/;"	m	class:llvm::MCObjectFileInfo
Comma	MC/MCParser/MCAsmLexer.h	/^    Star, Dot, Comma, Dollar, Equal, EqualEqual,$/;"	e	enum:llvm::AsmToken::TokenKind
CommaSeparated	Support/CommandLine.h	/^  CommaSeparated     = 0x01,  \/\/ Should this cl::list split between commas?$/;"	e	enum:llvm::cl::MiscFlags
Command	Object/MachOObject.h	/^    macho::LoadCommand Command;$/;"	m	struct:llvm::object::MachOObject::LoadCommandInfo
CommandLines	Analysis/ProfileDataLoader.h	/^  SmallVector<std::string, 1> CommandLines;$/;"	m	class:llvm::ProfileDataLoader
CommandLines	Analysis/ProfileInfoLoader.h	/^  std::vector<std::string> CommandLines;$/;"	m	class:llvm::ProfileInfoLoader
CommentColumn	MC/MCAsmInfo.h	/^    unsigned CommentColumn;                  \/\/ Defaults to 40$/;"	m	class:llvm::MCAsmInfo
CommentFlag	CodeGen/MachineInstr.h	/^  enum CommentFlag {$/;"	g	class:llvm::MachineInstr
CommentStream	MC/MCDisassembler.h	/^  mutable raw_ostream *CommentStream;$/;"	m	class:llvm::MCDisassembler
CommentStream	MC/MCInstPrinter.h	/^  raw_ostream *CommentStream;$/;"	m	class:llvm::MCInstPrinter
CommentString	MC/MCAsmInfo.h	/^    const char *CommentString;               \/\/ Defaults to "#"$/;"	m	class:llvm::MCAsmInfo
Common	MC/SectionKind.h	/^           Common,$/;"	e	enum:llvm::SectionKind::Kind
CommonAlign	MC/MCAssembler.h	/^  unsigned CommonAlign;$/;"	m	class:llvm::MCSymbolData
CommonLevels	Analysis/DependenceAnalysis.h	/^    unsigned CommonLevels, SrcLevels, MaxLevels;$/;"	m	class:llvm::DependenceAnalysis
CommonLinkage	GlobalValue.h	/^    CommonLinkage       \/\/\/< Tentative definitions.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
CommonSize	MC/MCAssembler.h	/^  uint64_t CommonSize;$/;"	m	class:llvm::MCSymbolData
Commutable	MC/MCInstrDesc.h	/^    Commutable,$/;"	e	enum:llvm::MCID::__anon69
CompactUnwindEncoding	CodeGen/MachineModuleInfo.h	/^  uint32_t CompactUnwindEncoding;$/;"	m	class:llvm::MachineModuleInfo
CompactUnwindEncoding	MC/MCDwarf.h	/^    uint32_t CompactUnwindEncoding;$/;"	m	struct:llvm::MCDwarfFrameInfo
CompactUnwindSection	MC/MCObjectFileInfo.h	/^  const MCSection *CompactUnwindSection;$/;"	m	class:llvm::MCObjectFileInfo
Compare	MC/MCInstrDesc.h	/^    Compare,$/;"	e	enum:llvm::MCID::__anon69
CompareIgnoringAlignment	Instruction.h	/^    CompareIgnoringAlignment = 1<<0,$/;"	e	enum:llvm::Instruction::OperationEquivalenceFlags
CompareUsingScalarTypes	Instruction.h	/^    CompareUsingScalarTypes = 1<<1$/;"	e	enum:llvm::Instruction::OperationEquivalenceFlags
CompilingLazily	ExecutionEngine/ExecutionEngine.h	/^  bool CompilingLazily;$/;"	m	class:llvm::ExecutionEngine
ComplexAddrKind	DIBuilder.h	/^    enum ComplexAddrKind { OpPlus=1, OpDeref };$/;"	g	class:llvm::DIBuilder
Component	Support/PathV2.h	/^  StringRef Component; \/\/\/< The current component. Not necessarily in Path.$/;"	m	class:llvm::sys::path::const_iterator
Composite	Linker.h	/^    Module* Composite; \/\/\/< The composite module linked together$/;"	m	class:llvm::Linker
CompositeType	DerivedTypes.h	/^  explicit CompositeType(LLVMContext &C, TypeID tid) : Type(C, tid) { }$/;"	f	class:llvm::CompositeType
CompositeType	DerivedTypes.h	/^class CompositeType : public Type {$/;"	c	namespace:llvm
ComputeArgument	Analysis/SparsePropagation.h	/^  virtual LatticeVal ComputeArgument(Argument *I) {$/;"	f	class:llvm::AbstractLatticeFunction
ComputeConstant	Analysis/SparsePropagation.h	/^  virtual LatticeVal ComputeConstant(Constant *C) {$/;"	f	class:llvm::AbstractLatticeFunction
ComputeEditDistance	ADT/edit_distance.h	/^unsigned ComputeEditDistance(ArrayRef<T> FromArray, ArrayRef<T> ToArray,$/;"	f	namespace:llvm
ComputeHash	ADT/FoldingSet.h	/^DefaultContextualFoldingSetTrait<T, Ctx>::ComputeHash(T &X,$/;"	f	class:llvm::DefaultContextualFoldingSetTrait
ComputeHash	ADT/FoldingSet.h	/^DefaultFoldingSetTrait<T>::ComputeHash(T &X, FoldingSetNodeID &TempID) {$/;"	f	class:llvm::DefaultFoldingSetTrait
ComputeHash	Analysis/ScalarEvolution.h	/^    static unsigned ComputeHash(const SCEV &X, FoldingSetNodeID &TempID) {$/;"	f	struct:llvm::FoldingSetTrait
ComputeInstructionState	Analysis/SparsePropagation.h	/^  virtual LatticeVal ComputeInstructionState(Instruction &I, SparseSolver &SS) {$/;"	f	class:llvm::AbstractLatticeFunction
ComputeLinearIndex	CodeGen/Analysis.h	/^inline unsigned ComputeLinearIndex(Type *Ty,$/;"	f	namespace:llvm
ComputeNodeHash	ADT/FoldingSet.h	/^  virtual unsigned ComputeNodeHash(FoldingSetImpl::Node *N,$/;"	f	class:llvm::ContextualFoldingSet
ComputeNodeHash	ADT/FoldingSet.h	/^  virtual unsigned ComputeNodeHash(Node *N, FoldingSetNodeID &TempID) const {$/;"	f	class:llvm::FoldingSet
ConcreteOperator	Operator.h	/^class ConcreteOperator : public SuperClass {$/;"	c	namespace:llvm
Cond	Support/PatternMatch.h	/^  Cond_t Cond;$/;"	m	struct:llvm::PatternMatch::brc_match
CondCode	CodeGen/ISDOpcodes.h	/^  enum CondCode {$/;"	g	namespace:llvm::ISD
CondCodeActions	Target/TargetLowering.h	/^  uint64_t CondCodeActions[ISD::SETCC_INVALID][(MVT::LAST_VALUETYPE \/ 32) + 1];$/;"	m	class:llvm::TargetLowering
CondCodeNodes	CodeGen/SelectionDAG.h	/^  std::vector<CondCodeSDNode*> CondCodeNodes;$/;"	m	class:llvm::SelectionDAG
CondCodeSDNode	CodeGen/SelectionDAGNodes.h	/^  explicit CondCodeSDNode(ISD::CondCode Cond)$/;"	f	class:llvm::CondCodeSDNode
CondCodeSDNode	CodeGen/SelectionDAGNodes.h	/^class CondCodeSDNode : public SDNode {$/;"	c	namespace:llvm
CondMet	MC/MCParser/AsmCond.h	/^  bool CondMet;$/;"	m	class:llvm::AsmCond
Condition	CodeGen/SelectionDAGNodes.h	/^  ISD::CondCode Condition;$/;"	m	class:llvm::CondCodeSDNode
ConditionalAssemblyType	MC/MCParser/AsmCond.h	/^  enum ConditionalAssemblyType {$/;"	g	class:llvm::AsmCond
ConnectedVNInfoEqClasses	CodeGen/LiveInterval.h	/^    explicit ConnectedVNInfoEqClasses(LiveIntervals &lis) : LIS(lis) {}$/;"	f	class:llvm::ConnectedVNInfoEqClasses
ConnectedVNInfoEqClasses	CodeGen/LiveInterval.h	/^  class ConnectedVNInfoEqClasses {$/;"	c	namespace:llvm
Consistent	Analysis/DependenceAnalysis.h	/^    bool Consistent; \/\/ Init to true, then refine.$/;"	m	class:llvm::FullDependence
ConstCaseIt	Instructions.h	/^                        SubsetsConstIt, const BasicBlock> ConstCaseIt;$/;"	t	class:llvm::SwitchInst
ConstDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *ConstDataSection;$/;"	m	class:llvm::MCObjectFileInfo
ConstEdgeItr	CodeGen/PBQP/Graph.h	/^    typedef EdgeList::const_iterator ConstEdgeItr;$/;"	t	class:PBQP::Graph
ConstIterator	ADT/DenseMap.h	/^                           KeyInfoT, true> ConstIterator;$/;"	t	class:llvm::DenseMapIterator
ConstIterator	ADT/DenseSet.h	/^    ConstIterator(const typename MapTy::const_iterator &i) : I(i) {}$/;"	f	class:llvm::DenseSet::ConstIterator
ConstIterator	ADT/DenseSet.h	/^  class ConstIterator {$/;"	c	class:llvm::DenseSet
ConstMIBundleOperands	CodeGen/MachineInstrBundle.h	/^  ConstMIBundleOperands(const MachineInstr *MI)$/;"	f	class:llvm::ConstMIBundleOperands
ConstMIBundleOperands	CodeGen/MachineInstrBundle.h	/^class ConstMIBundleOperands : public MachineOperandIteratorBase {$/;"	c	namespace:llvm
ConstMIOperands	CodeGen/MachineInstrBundle.h	/^  ConstMIOperands(const MachineInstr *MI)$/;"	f	class:llvm::ConstMIOperands
ConstMIOperands	CodeGen/MachineInstrBundle.h	/^class ConstMIOperands : public MachineOperandIteratorBase {$/;"	c	namespace:llvm
ConstNodeItr	CodeGen/PBQP/Graph.h	/^    typedef NodeList::const_iterator ConstNodeItr;$/;"	t	class:PBQP::Graph
ConstTextCoalSection	MC/MCObjectFileInfo.h	/^  const MCSection *ConstTextCoalSection;$/;"	m	class:llvm::MCObjectFileInfo
ConstVal	CodeGen/MachineConstantPool.h	/^    const Constant *ConstVal;$/;"	m	union:llvm::MachineConstantPoolEntry::__anon44
ConstVal	CodeGen/SelectionDAGNodes.h	/^    const Constant *ConstVal;$/;"	m	union:llvm::ConstantPoolSDNode::__anon31
Constant	CodeGen/ISDOpcodes.h	/^    Constant, ConstantFP,$/;"	e	enum:llvm::ISD::NodeType
Constant	Constant.h	/^  Constant(Type *ty, ValueTy vty, Use *Ops, unsigned NumOps)$/;"	f	class:llvm::Constant
Constant	Constant.h	/^class Constant : public User {$/;"	c	namespace:llvm
Constant	MC/MCExpr.h	/^    Constant,  \/\/\/< Constant expressions.$/;"	e	enum:llvm::MCExpr::ExprKind
ConstantAggregateZero	Constants.h	/^  explicit ConstantAggregateZero(Type *ty)$/;"	f	class:llvm::ConstantAggregateZero
ConstantAggregateZero	Constants.h	/^class ConstantAggregateZero : public Constant {$/;"	c	namespace:llvm
ConstantAggregateZeroVal	Value.h	/^    ConstantAggregateZeroVal, \/\/ This is an instance of ConstantAggregateZero$/;"	e	enum:llvm::Value::ValueTy
ConstantArray	Constants.h	/^class ConstantArray : public Constant {$/;"	c	namespace:llvm
ConstantArrayVal	Value.h	/^    ConstantArrayVal,         \/\/ This is an instance of ConstantArray$/;"	e	enum:llvm::Value::ValueTy
ConstantDataArray	Constants.h	/^  explicit ConstantDataArray(Type *ty, const char *Data)$/;"	f	class:llvm::ConstantDataArray
ConstantDataArray	Constants.h	/^class ConstantDataArray : public ConstantDataSequential {$/;"	c	namespace:llvm
ConstantDataArrayVal	Value.h	/^    ConstantDataArrayVal,     \/\/ This is an instance of ConstantDataArray$/;"	e	enum:llvm::Value::ValueTy
ConstantDataSequential	Constants.h	/^  explicit ConstantDataSequential(Type *ty, ValueTy VT, const char *Data)$/;"	f	class:llvm::ConstantDataSequential
ConstantDataSequential	Constants.h	/^class ConstantDataSequential : public Constant {$/;"	c	namespace:llvm
ConstantDataVector	Constants.h	/^  explicit ConstantDataVector(Type *ty, const char *Data)$/;"	f	class:llvm::ConstantDataVector
ConstantDataVector	Constants.h	/^class ConstantDataVector : public ConstantDataSequential {$/;"	c	namespace:llvm
ConstantDataVectorVal	Value.h	/^    ConstantDataVectorVal,    \/\/ This is an instance of ConstantDataVector$/;"	e	enum:llvm::Value::ValueTy
ConstantEvolutionLoopExitValue	Analysis/ScalarEvolution.h	/^    DenseMap<PHINode*, Constant*> ConstantEvolutionLoopExitValue;$/;"	m	class:llvm::ScalarEvolution
ConstantExpr	Constants.h	/^  ConstantExpr(Type *ty, unsigned Opcode, Use *Ops, unsigned NumOps)$/;"	f	class:llvm::ConstantExpr
ConstantExpr	Constants.h	/^class ConstantExpr : public Constant {$/;"	c	namespace:llvm
ConstantExprVal	Value.h	/^    ConstantExprVal,          \/\/ This is an instance of ConstantExpr$/;"	e	enum:llvm::Value::ValueTy
ConstantFP	CodeGen/ISDOpcodes.h	/^    Constant, ConstantFP,$/;"	e	enum:llvm::ISD::NodeType
ConstantFP	Constants.h	/^class ConstantFP : public Constant {$/;"	c	namespace:llvm
ConstantFPSDNode	CodeGen/SelectionDAGNodes.h	/^  ConstantFPSDNode(bool isTarget, const ConstantFP *val, EVT VT)$/;"	f	class:llvm::ConstantFPSDNode
ConstantFPSDNode	CodeGen/SelectionDAGNodes.h	/^class ConstantFPSDNode : public SDNode {$/;"	c	namespace:llvm
ConstantFPVal	Value.h	/^    ConstantFPVal,            \/\/ This is an instance of ConstantFP$/;"	e	enum:llvm::Value::ValueTy
ConstantFirstVal	Value.h	/^    ConstantFirstVal = FunctionVal,$/;"	e	enum:llvm::Value::ValueTy
ConstantFolder	Support/ConstantFolder.h	/^  explicit ConstantFolder() {}$/;"	f	class:llvm::ConstantFolder
ConstantFolder	Support/ConstantFolder.h	/^class ConstantFolder {$/;"	c	namespace:llvm
ConstantInt	Constants.h	/^class ConstantInt : public Constant {$/;"	c	namespace:llvm
ConstantIntVal	Support/IntegersSubset.h	/^  ConstantInt *ConstantIntVal;$/;"	m	class:llvm::IntItem
ConstantIntVal	Value.h	/^    ConstantIntVal,           \/\/ This is an instance of ConstantInt$/;"	e	enum:llvm::Value::ValueTy
ConstantLastVal	Value.h	/^    ConstantLastVal  = ConstantPointerNullVal$/;"	e	enum:llvm::Value::ValueTy
ConstantPointerNull	Constants.h	/^  explicit ConstantPointerNull(PointerType *T)$/;"	f	class:llvm::ConstantPointerNull
ConstantPointerNull	Constants.h	/^class ConstantPointerNull : public Constant {$/;"	c	namespace:llvm
ConstantPointerNullVal	Value.h	/^    ConstantPointerNullVal,   \/\/ This is an instance of ConstantPointerNull$/;"	e	enum:llvm::Value::ValueTy
ConstantPool	CodeGen/ISDOpcodes.h	/^    JumpTable, ConstantPool, ExternalSymbol, BlockAddress,$/;"	e	enum:llvm::ISD::NodeType
ConstantPool	CodeGen/MachineFunction.h	/^  MachineConstantPool *ConstantPool;$/;"	m	class:llvm::MachineFunction
ConstantPoolSDNode	CodeGen/SelectionDAGNodes.h	/^  ConstantPoolSDNode(bool isTarget, MachineConstantPoolValue *v,$/;"	f	class:llvm::ConstantPoolSDNode
ConstantPoolSDNode	CodeGen/SelectionDAGNodes.h	/^  ConstantPoolSDNode(bool isTarget, const Constant *c, EVT VT, int o,$/;"	f	class:llvm::ConstantPoolSDNode
ConstantPoolSDNode	CodeGen/SelectionDAGNodes.h	/^class ConstantPoolSDNode : public SDNode {$/;"	c	namespace:llvm
ConstantRange	Support/ConstantRange.h	/^class ConstantRange {$/;"	c	namespace:llvm
ConstantSDNode	CodeGen/SelectionDAGNodes.h	/^  ConstantSDNode(bool isTarget, const ConstantInt *val, EVT VT)$/;"	f	class:llvm::ConstantSDNode
ConstantSDNode	CodeGen/SelectionDAGNodes.h	/^class ConstantSDNode : public SDNode {$/;"	c	namespace:llvm
ConstantStruct	Constants.h	/^class ConstantStruct : public Constant {$/;"	c	namespace:llvm
ConstantStructVal	Value.h	/^    ConstantStructVal,        \/\/ This is an instance of ConstantStruct$/;"	e	enum:llvm::Value::ValueTy
ConstantVal	CodeGen/MachineRelocation.h	/^  intptr_t ConstantVal;$/;"	m	class:llvm::MachineRelocation
ConstantVector	Constants.h	/^class ConstantVector : public Constant {$/;"	c	namespace:llvm
ConstantVectorVal	Value.h	/^    ConstantVectorVal,        \/\/ This is an instance of ConstantVector$/;"	e	enum:llvm::Value::ValueTy
Constants	CodeGen/MachineConstantPool.h	/^  std::vector<MachineConstantPoolEntry> Constants; \/\/\/< The pool of constants.$/;"	m	class:llvm::MachineConstantPool
ConstantsCodes	Bitcode/LLVMBitCodes.h	/^  enum ConstantsCodes {$/;"	g	namespace:llvm::bitc
Constraint	Analysis/DependenceAnalysis.h	/^    class Constraint {$/;"	c	class:llvm::DependenceAnalysis
Constraint	MC/MCParser/MCParsedAsmOperand.h	/^  std::string Constraint;$/;"	m	class:llvm::MCParsedAsmOperand
ConstraintCode	Target/TargetLowering.h	/^    std::string ConstraintCode;$/;"	m	struct:llvm::TargetLowering::AsmOperandInfo
ConstraintCodeVector	InlineAsm.h	/^  typedef std::vector<std::string> ConstraintCodeVector;$/;"	t	class:llvm::InlineAsm
ConstraintInfo	InlineAsm.h	/^  struct ConstraintInfo {$/;"	s	class:llvm::InlineAsm
ConstraintInfoVector	InlineAsm.h	/^  typedef std::vector<ConstraintInfo> ConstraintInfoVector;$/;"	t	class:llvm::InlineAsm
ConstraintKind	Analysis/DependenceAnalysis.h	/^      enum ConstraintKind { Empty, Point, Distance, Line, Any } Kind;$/;"	g	class:llvm::DependenceAnalysis::Constraint
ConstraintPrefix	InlineAsm.h	/^  enum ConstraintPrefix {$/;"	g	class:llvm::InlineAsm
ConstraintType	Target/TargetLowering.h	/^    TargetLowering::ConstraintType ConstraintType;$/;"	m	struct:llvm::TargetLowering::AsmOperandInfo
ConstraintType	Target/TargetLowering.h	/^  enum ConstraintType {$/;"	g	class:llvm::TargetLowering
ConstraintVT	Target/TargetLowering.h	/^    EVT ConstraintVT;$/;"	m	struct:llvm::TargetLowering::AsmOperandInfo
ConstraintWeight	Target/TargetLowering.h	/^  enum ConstraintWeight {$/;"	g	class:llvm::TargetLowering
Constraints	InlineAsm.h	/^  std::string AsmString, Constraints;$/;"	m	class:llvm::InlineAsm
Constraints	MC/MCInstrDesc.h	/^  uint32_t Constraints;$/;"	m	class:llvm::MCOperandInfo
ConsumeAfter	Support/CommandLine.h	/^  ConsumeAfter    = 0x04$/;"	e	enum:llvm::cl::NumOccurrencesFlag
ContainedType	DerivedTypes.h	/^  Type *ContainedType;               \/\/\/< Storage for the single contained type.$/;"	m	class:llvm::SequentialType
ContainedTys	Type.h	/^  Type * const *ContainedTys;$/;"	m	class:llvm::Type
ContainsCalls	Transforms/Utils/Cloning.h	/^  bool ContainsCalls;$/;"	m	struct:llvm::ClonedCodeInfo
ContainsDynamicAllocas	Transforms/Utils/Cloning.h	/^  bool ContainsDynamicAllocas;$/;"	m	struct:llvm::ClonedCodeInfo
Contents	ADT/InMemoryStruct.h	/^  value_type Contents;$/;"	m	class:llvm::InMemoryStruct
Contents	CodeGen/MachineOperand.h	/^  } Contents;$/;"	m	class:llvm::MachineOperand	typeref:union:llvm::MachineOperand::__anon36
Contents	CodeGen/ScheduleDAG.h	/^    } Contents;$/;"	m	class:llvm::SDep	typeref:union:llvm::SDep::__anon41
Contents	MC/MCAssembler.h	/^  SmallString<32> Contents;$/;"	m	class:llvm::MCDataFragment
Contents	MC/MCAssembler.h	/^  SmallString<8> Contents;$/;"	m	class:llvm::MCDwarfCallFrameFragment
Contents	MC/MCAssembler.h	/^  SmallString<8> Contents;$/;"	m	class:llvm::MCDwarfLineAddrFragment
Contents	MC/MCAssembler.h	/^  SmallString<8> Contents;$/;"	m	class:llvm::MCLEBFragment
Context	ADT/FoldingSet.h	/^  Ctx Context;$/;"	m	class:llvm::ContextualFoldingSet
Context	Analysis/MemoryBuiltins.h	/^  LLVMContext &Context;$/;"	m	class:llvm::ObjectSizeOffsetEvaluator
Context	Bitcode/Archive.h	/^    LLVMContext& Context;     \/\/\/< This holds global data.$/;"	m	class:llvm::Archive
Context	CallGraphSCCPass.h	/^  void *Context; \/\/ The CGPassManager object that is vending this.$/;"	m	class:llvm::CallGraphSCC
Context	CodeGen/CallingConvLower.h	/^  LLVMContext &Context;$/;"	m	class:llvm::CCState
Context	CodeGen/MachineModuleInfo.h	/^  MCContext Context;$/;"	m	class:llvm::MachineModuleInfo
Context	CodeGen/SelectionDAG.h	/^  LLVMContext *Context;$/;"	m	class:llvm::SelectionDAG
Context	IRBuilder.h	/^  LLVMContext &Context;$/;"	m	class:llvm::IRBuilderBase
Context	Linker.h	/^    LLVMContext& Context; \/\/\/< The context for global information$/;"	m	class:llvm::Linker
Context	MC/MCAssembler.h	/^  MCContext &Context;$/;"	m	class:llvm::MCAssembler
Context	MC/MCStreamer.h	/^    MCContext &Context;$/;"	m	class:llvm::MCStreamer
Context	MDBuilder.h	/^    LLVMContext &Context;$/;"	m	class:llvm::MDBuilder
Context	Module.h	/^  LLVMContext &Context;           \/\/\/< The LLVMContext from which types and$/;"	m	class:llvm::Module
Context	Target/Mangler.h	/^  MCContext &Context;$/;"	m	class:llvm::Mangler
Context	Type.h	/^  LLVMContext &Context;$/;"	m	class:llvm::Type
ContextualFoldingSet	ADT/FoldingSet.h	/^  explicit ContextualFoldingSet(Ctx Context, unsigned Log2InitSize = 6)$/;"	f	class:llvm::ContextualFoldingSet
ContextualFoldingSet	ADT/FoldingSet.h	/^class ContextualFoldingSet : public FoldingSetImpl {$/;"	c	namespace:llvm
ContextualFoldingSetTrait	ADT/FoldingSet.h	/^template<typename T, typename Ctx> struct ContextualFoldingSetTrait$/;"	s	namespace:llvm
ControlFlags	Linker.h	/^    enum ControlFlags {$/;"	g	class:llvm::Linker
ConvertibleTo3Addr	MC/MCInstrDesc.h	/^    ConvertibleTo3Addr,$/;"	e	enum:llvm::MCID::__anon69
CopyCost	MC/MCRegisterInfo.h	/^  const int8_t CopyCost;$/;"	m	class:llvm::MCRegisterClass
CopyDstRC	CodeGen/ScheduleDAG.h	/^    const TargetRegisterClass *CopyDstRC; \/\/ Is a special copy node if not null.$/;"	m	class:llvm::SUnit
CopyFromReg	CodeGen/ISDOpcodes.h	/^    CopyFromReg,$/;"	e	enum:llvm::ISD::NodeType
CopySrcRC	CodeGen/ScheduleDAG.h	/^    const TargetRegisterClass *CopySrcRC;$/;"	m	class:llvm::SUnit
CopyToReg	CodeGen/ISDOpcodes.h	/^    CopyToReg,$/;"	e	enum:llvm::ISD::NodeType
Cost	Analysis/InlineCost.h	/^    const int Cost;$/;"	m	class:llvm::InlineCost
CostPerUse	Target/TargetRegisterInfo.h	/^  unsigned CostPerUse;          \/\/ Extra cost of instructions using register.$/;"	m	struct:llvm::TargetRegisterInfoDesc
CouldNotCompute	Analysis/ScalarEvolution.h	/^    SCEVCouldNotCompute CouldNotCompute;$/;"	m	class:llvm::ScalarEvolution
CountLeadingOnes_32	Support/MathExtras.h	/^inline unsigned CountLeadingOnes_32(uint32_t Value) {$/;"	f	namespace:llvm
CountLeadingOnes_64	Support/MathExtras.h	/^inline unsigned CountLeadingOnes_64(uint64_t Value) {$/;"	f	namespace:llvm
CountLeadingZeros_32	Support/MathExtras.h	/^inline unsigned CountLeadingZeros_32(uint32_t Value) {$/;"	f	namespace:llvm
CountLeadingZeros_64	Support/MathExtras.h	/^inline unsigned CountLeadingZeros_64(uint64_t Value) {$/;"	f	namespace:llvm
CountPopulation_32	Support/MathExtras.h	/^inline unsigned CountPopulation_32(uint32_t Value) {$/;"	f	namespace:llvm
CountPopulation_64	Support/MathExtras.h	/^inline unsigned CountPopulation_64(uint64_t Value) {$/;"	f	namespace:llvm
CountTrailingOnes_32	Support/MathExtras.h	/^inline unsigned CountTrailingOnes_32(uint32_t Value) {$/;"	f	namespace:llvm
CountTrailingOnes_64	Support/MathExtras.h	/^inline unsigned CountTrailingOnes_64(uint64_t Value) {$/;"	f	namespace:llvm
CountTrailingZeros_32	Support/MathExtras.h	/^inline unsigned CountTrailingZeros_32(uint32_t Value) {$/;"	f	namespace:llvm
CountTrailingZeros_64	Support/MathExtras.h	/^inline unsigned CountTrailingZeros_64(uint64_t Value) {$/;"	f	namespace:llvm
Counter	CodeGen/AsmPrinter.h	/^    mutable unsigned Counter;$/;"	m	class:llvm::AsmPrinter
Counter	Support/GCOV.h	/^  uint64_t Counter;$/;"	m	class:llvm::GCOVBlock
CrashRecoveryContext	Support/CrashRecoveryContext.h	/^  CrashRecoveryContext() : Impl(0), head(0) {}$/;"	f	class:llvm::CrashRecoveryContext
CrashRecoveryContext	Support/CrashRecoveryContext.h	/^class CrashRecoveryContext {$/;"	c	namespace:llvm
CrashRecoveryContextCleanup	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup(CrashRecoveryContext *context)$/;"	f	class:llvm::CrashRecoveryContextCleanup
CrashRecoveryContextCleanup	Support/CrashRecoveryContext.h	/^class CrashRecoveryContextCleanup {$/;"	c	namespace:llvm
CrashRecoveryContextCleanupBase	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextCleanupBase(CrashRecoveryContext *context, T* resource)$/;"	f	class:llvm::CrashRecoveryContextCleanupBase
CrashRecoveryContextCleanupBase	Support/CrashRecoveryContext.h	/^class CrashRecoveryContextCleanupBase : public CrashRecoveryContextCleanup {$/;"	c	namespace:llvm
CrashRecoveryContextCleanupRegistrar	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextCleanupRegistrar(T *x)$/;"	f	class:llvm::CrashRecoveryContextCleanupRegistrar
CrashRecoveryContextCleanupRegistrar	Support/CrashRecoveryContext.h	/^class CrashRecoveryContextCleanupRegistrar {$/;"	c	namespace:llvm
CrashRecoveryContextDeleteCleanup	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextDeleteCleanup(CrashRecoveryContext *context, T *resource)$/;"	f	class:llvm::CrashRecoveryContextDeleteCleanup
CrashRecoveryContextDeleteCleanup	Support/CrashRecoveryContext.h	/^class CrashRecoveryContextDeleteCleanup : public$/;"	c	namespace:llvm
CrashRecoveryContextDestructorCleanup	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextDestructorCleanup(CrashRecoveryContext *context,$/;"	f	class:llvm::CrashRecoveryContextDestructorCleanup
CrashRecoveryContextDestructorCleanup	Support/CrashRecoveryContext.h	/^class CrashRecoveryContextDestructorCleanup : public$/;"	c	namespace:llvm
CrashRecoveryContextReleaseRefCleanup	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextReleaseRefCleanup(CrashRecoveryContext *context, $/;"	f	class:llvm::CrashRecoveryContextReleaseRefCleanup
CrashRecoveryContextReleaseRefCleanup	Support/CrashRecoveryContext.h	/^class CrashRecoveryContextReleaseRefCleanup : public$/;"	c	namespace:llvm
Create	ADT/ScopedHashTable.h	/^  static ScopedHashTableVal *Create(ScopedHashTableVal *nextInScope,$/;"	f	class:llvm::ScopedHashTableVal
Create	ADT/StringMap.h	/^  static StringMapEntry *Create(const char *KeyStart, const char *KeyEnd) {$/;"	f	class:llvm::StringMapEntry
Create	ADT/StringMap.h	/^  static StringMapEntry *Create(const char *KeyStart, const char *KeyEnd,$/;"	f	class:llvm::StringMapEntry
Create	BasicBlock.h	/^  static BasicBlock *Create(LLVMContext &Context, const Twine &Name = "",$/;"	f	class:llvm::BasicBlock
Create	Function.h	/^  static Function *Create(FunctionType *Ty, LinkageTypes Linkage,$/;"	f	class:llvm::Function
Create	Instructions.h	/^  static BranchInst *Create(BasicBlock *IfTrue, BasicBlock *IfFalse,$/;"	f	class:llvm::BranchInst
Create	Instructions.h	/^  static BranchInst *Create(BasicBlock *IfTrue, BasicBlock *InsertAtEnd) {$/;"	f	class:llvm::BranchInst
Create	Instructions.h	/^  static BranchInst *Create(BasicBlock *IfTrue, Instruction *InsertBefore = 0) {$/;"	f	class:llvm::BranchInst
Create	Instructions.h	/^  static CallInst *Create(Value *F, const Twine &NameStr = "",$/;"	f	class:llvm::CallInst
Create	Instructions.h	/^  static CallInst *Create(Value *F, const Twine &NameStr,$/;"	f	class:llvm::CallInst
Create	Instructions.h	/^  static CallInst *Create(Value *Func,$/;"	f	class:llvm::CallInst
Create	Instructions.h	/^  static ExtractElementInst *Create(Value *Vec, Value *Idx,$/;"	f	class:llvm::ExtractElementInst
Create	Instructions.h	/^  static ExtractValueInst *Create(Value *Agg,$/;"	f	class:llvm::ExtractValueInst
Create	Instructions.h	/^  static GetElementPtrInst *Create(Value *Ptr, ArrayRef<Value *> IdxList,$/;"	f	class:llvm::GetElementPtrInst
Create	Instructions.h	/^  static IndirectBrInst *Create(Value *Address, unsigned NumDests,$/;"	f	class:llvm::IndirectBrInst
Create	Instructions.h	/^  static InsertElementInst *Create(Value *Vec, Value *NewElt, Value *Idx,$/;"	f	class:llvm::InsertElementInst
Create	Instructions.h	/^  static InsertValueInst *Create(Value *Agg, Value *Val,$/;"	f	class:llvm::InsertValueInst
Create	Instructions.h	/^  static InvokeInst *Create(Value *Func,$/;"	f	class:llvm::InvokeInst
Create	Instructions.h	/^  static PHINode *Create(Type *Ty, unsigned NumReservedValues, $/;"	f	class:llvm::PHINode
Create	Instructions.h	/^  static PHINode *Create(Type *Ty, unsigned NumReservedValues,$/;"	f	class:llvm::PHINode
Create	Instructions.h	/^  static ResumeInst *Create(Value *Exn, BasicBlock *InsertAtEnd) {$/;"	f	class:llvm::ResumeInst
Create	Instructions.h	/^  static ResumeInst *Create(Value *Exn, Instruction *InsertBefore = 0) {$/;"	f	class:llvm::ResumeInst
Create	Instructions.h	/^  static ReturnInst* Create(LLVMContext &C, BasicBlock *InsertAtEnd) {$/;"	f	class:llvm::ReturnInst
Create	Instructions.h	/^  static ReturnInst* Create(LLVMContext &C, Value *retVal = 0,$/;"	f	class:llvm::ReturnInst
Create	Instructions.h	/^  static ReturnInst* Create(LLVMContext &C, Value *retVal,$/;"	f	class:llvm::ReturnInst
Create	Instructions.h	/^  static SelectInst *Create(Value *C, Value *S1, Value *S2,$/;"	f	class:llvm::SelectInst
Create	Instructions.h	/^  static SwitchInst *Create(Value *Value, BasicBlock *Default,$/;"	f	class:llvm::SwitchInst
Create	MC/MCExpr.h	/^  static const MCSymbolRefExpr *Create(const MCSymbol *Symbol, MCContext &Ctx) {$/;"	f	class:llvm::MCSymbolRefExpr
Create	MC/MCFixup.h	/^  static MCFixup Create(uint32_t Offset, const MCExpr *Value,$/;"	f	class:llvm::MCFixup
CreateAShr	IRBuilder.h	/^  Value *CreateAShr(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateAShr	IRBuilder.h	/^  Value *CreateAShr(Value *LHS, const APInt &RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateAShr	IRBuilder.h	/^  Value *CreateAShr(Value *LHS, uint64_t RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateAShr	Support/ConstantFolder.h	/^  Constant *CreateAShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateAShr	Support/NoFolder.h	/^  Instruction *CreateAShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateAShr	Support/TargetFolder.h	/^  Constant *CreateAShr(Constant *LHS, Constant *RHS, bool isExact = false)const{$/;"	f	class:llvm::TargetFolder
CreateAdd	IRBuilder.h	/^  Value *CreateAdd(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateAdd	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateAdd(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateAdd	Support/ConstantFolder.h	/^  Constant *CreateAdd(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateAdd	Support/NoFolder.h	/^  Instruction *CreateAdd(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateAdd	Support/TargetFolder.h	/^  Constant *CreateAdd(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::TargetFolder
CreateAggregateRet	IRBuilder.h	/^  ReturnInst *CreateAggregateRet(Value *const *retVals, unsigned N) {$/;"	f	class:llvm::IRBuilder
CreateAlignedLoad	IRBuilder.h	/^  LoadInst *CreateAlignedLoad(Value *Ptr, unsigned Align, bool isVolatile,$/;"	f	class:llvm::IRBuilder
CreateAlignedLoad	IRBuilder.h	/^  LoadInst *CreateAlignedLoad(Value *Ptr, unsigned Align, const char *Name) {$/;"	f	class:llvm::IRBuilder
CreateAlignedLoad	IRBuilder.h	/^  LoadInst *CreateAlignedLoad(Value *Ptr, unsigned Align,$/;"	f	class:llvm::IRBuilder
CreateAlignedStore	IRBuilder.h	/^  StoreInst *CreateAlignedStore(Value *Val, Value *Ptr, unsigned Align,$/;"	f	class:llvm::IRBuilder
CreateAlloca	IRBuilder.h	/^  AllocaInst *CreateAlloca(Type *Ty, Value *ArraySize = 0,$/;"	f	class:llvm::IRBuilder
CreateAnd	IRBuilder.h	/^  Value *CreateAnd(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateAnd	IRBuilder.h	/^  Value *CreateAnd(Value *LHS, const APInt &RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateAnd	IRBuilder.h	/^  Value *CreateAnd(Value *LHS, uint64_t RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateAnd	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateAnd(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateAnd	Support/ConstantFolder.h	/^  Constant *CreateAnd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateAnd	Support/NoFolder.h	/^  Instruction *CreateAnd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateAnd	Support/TargetFolder.h	/^  Constant *CreateAnd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateAtomicCmpXchg	IRBuilder.h	/^  AtomicCmpXchgInst *CreateAtomicCmpXchg(Value *Ptr, Value *Cmp, Value *New,$/;"	f	class:llvm::IRBuilder
CreateAtomicRMW	IRBuilder.h	/^  AtomicRMWInst *CreateAtomicRMW(AtomicRMWInst::BinOp Op, Value *Ptr, Value *Val,$/;"	f	class:llvm::IRBuilder
CreateBA	CodeGen/MachineOperand.h	/^  static MachineOperand CreateBA(const BlockAddress *BA, int64_t Offset,$/;"	f	class:llvm::MachineOperand
CreateBinOp	IRBuilder.h	/^  Value *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::IRBuilder
CreateBinOp	Support/ConstantFolder.h	/^  Constant *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::ConstantFolder
CreateBinOp	Support/NoFolder.h	/^  Instruction *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::NoFolder
CreateBinOp	Support/TargetFolder.h	/^  Constant *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::TargetFolder
CreateBitCast	IRBuilder.h	/^  Value *CreateBitCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateBitCast	Support/ConstantFolder.h	/^  Constant *CreateBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateBitCast	Support/NoFolder.h	/^  Instruction *CreateBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateBitCast	Support/TargetFolder.h	/^  Constant *CreateBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateBr	IRBuilder.h	/^  BranchInst *CreateBr(BasicBlock *Dest) {$/;"	f	class:llvm::IRBuilder
CreateCImm	CodeGen/MachineOperand.h	/^  static MachineOperand CreateCImm(const ConstantInt *CI) {$/;"	f	class:llvm::MachineOperand
CreateCPI	CodeGen/MachineOperand.h	/^  static MachineOperand CreateCPI(unsigned Idx, int Offset,$/;"	f	class:llvm::MachineOperand
CreateCall	IRBuilder.h	/^  CallInst *CreateCall(Value *Callee, ArrayRef<Value *> Args,$/;"	f	class:llvm::IRBuilder
CreateCall	IRBuilder.h	/^  CallInst *CreateCall(Value *Callee, Value *Arg, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateCall	IRBuilder.h	/^  CallInst *CreateCall(Value *Callee, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateCall2	IRBuilder.h	/^  CallInst *CreateCall2(Value *Callee, Value *Arg1, Value *Arg2,$/;"	f	class:llvm::IRBuilder
CreateCall3	IRBuilder.h	/^  CallInst *CreateCall3(Value *Callee, Value *Arg1, Value *Arg2, Value *Arg3,$/;"	f	class:llvm::IRBuilder
CreateCall4	IRBuilder.h	/^  CallInst *CreateCall4(Value *Callee, Value *Arg1, Value *Arg2, Value *Arg3,$/;"	f	class:llvm::IRBuilder
CreateCall5	IRBuilder.h	/^  CallInst *CreateCall5(Value *Callee, Value *Arg1, Value *Arg2, Value *Arg3,$/;"	f	class:llvm::IRBuilder
CreateCast	IRBuilder.h	/^  Value *CreateCast(Instruction::CastOps Op, Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateCast	Support/ConstantFolder.h	/^  Constant *CreateCast(Instruction::CastOps Op, Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateCast	Support/NoFolder.h	/^  Instruction *CreateCast(Instruction::CastOps Op, Constant *C,$/;"	f	class:llvm::NoFolder
CreateCast	Support/TargetFolder.h	/^  Constant *CreateCast(Instruction::CastOps Op, Constant *C,$/;"	f	class:llvm::TargetFolder
CreateCondBr	IRBuilder.h	/^  BranchInst *CreateCondBr(Value *Cond, BasicBlock *True, BasicBlock *False,$/;"	f	class:llvm::IRBuilder
CreateConstGEP1_32	IRBuilder.h	/^  Value *CreateConstGEP1_32(Value *Ptr, unsigned Idx0, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateConstGEP1_64	IRBuilder.h	/^  Value *CreateConstGEP1_64(Value *Ptr, uint64_t Idx0, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateConstGEP2_32	IRBuilder.h	/^  Value *CreateConstGEP2_32(Value *Ptr, unsigned Idx0, unsigned Idx1,$/;"	f	class:llvm::IRBuilder
CreateConstGEP2_64	IRBuilder.h	/^  Value *CreateConstGEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1,$/;"	f	class:llvm::IRBuilder
CreateConstInBoundsGEP1_32	IRBuilder.h	/^  Value *CreateConstInBoundsGEP1_32(Value *Ptr, unsigned Idx0,$/;"	f	class:llvm::IRBuilder
CreateConstInBoundsGEP1_64	IRBuilder.h	/^  Value *CreateConstInBoundsGEP1_64(Value *Ptr, uint64_t Idx0,$/;"	f	class:llvm::IRBuilder
CreateConstInBoundsGEP2_32	IRBuilder.h	/^  Value *CreateConstInBoundsGEP2_32(Value *Ptr, unsigned Idx0, unsigned Idx1,$/;"	f	class:llvm::IRBuilder
CreateConstInBoundsGEP2_64	IRBuilder.h	/^  Value *CreateConstInBoundsGEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1,$/;"	f	class:llvm::IRBuilder
CreateDiv	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateDiv(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateEQ	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateEQ(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateES	CodeGen/MachineOperand.h	/^  static MachineOperand CreateES(const char *SymName,$/;"	f	class:llvm::MachineOperand
CreateExact	InstrTypes.h	/^  static BinaryOperator *CreateExact(BinaryOps Opc, Value *V1, Value *V2,$/;"	f	class:llvm::BinaryOperator
CreateExactSDiv	IRBuilder.h	/^  Value *CreateExactSDiv(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateExactSDiv	Support/NoFolder.h	/^  Instruction *CreateExactSDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateExactUDiv	IRBuilder.h	/^  Value *CreateExactUDiv(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateExactUDiv	Support/NoFolder.h	/^  Instruction *CreateExactUDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateExpr	MC/MCInst.h	/^  static MCOperand CreateExpr(const MCExpr *Val) {$/;"	f	class:llvm::MCOperand
CreateExtractElement	IRBuilder.h	/^  Value *CreateExtractElement(Value *Vec, Value *Idx,$/;"	f	class:llvm::IRBuilder
CreateExtractElement	Support/ConstantFolder.h	/^  Constant *CreateExtractElement(Constant *Vec, Constant *Idx) const {$/;"	f	class:llvm::ConstantFolder
CreateExtractElement	Support/NoFolder.h	/^  Instruction *CreateExtractElement(Constant *Vec, Constant *Idx) const {$/;"	f	class:llvm::NoFolder
CreateExtractElement	Support/TargetFolder.h	/^  Constant *CreateExtractElement(Constant *Vec, Constant *Idx) const {$/;"	f	class:llvm::TargetFolder
CreateExtractValue	IRBuilder.h	/^  Value *CreateExtractValue(Value *Agg,$/;"	f	class:llvm::IRBuilder
CreateExtractValue	Support/ConstantFolder.h	/^  Constant *CreateExtractValue(Constant *Agg,$/;"	f	class:llvm::ConstantFolder
CreateExtractValue	Support/NoFolder.h	/^  Instruction *CreateExtractValue(Constant *Agg,$/;"	f	class:llvm::NoFolder
CreateExtractValue	Support/TargetFolder.h	/^  Constant *CreateExtractValue(Constant *Agg,$/;"	f	class:llvm::TargetFolder
CreateFAdd	IRBuilder.h	/^  Value *CreateFAdd(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFAdd	Support/ConstantFolder.h	/^  Constant *CreateFAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFAdd	Support/NoFolder.h	/^  Instruction *CreateFAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFAdd	Support/TargetFolder.h	/^  Constant *CreateFAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateFCmp	IRBuilder.h	/^  Value *CreateFCmp(CmpInst::Predicate P, Value *LHS, Value *RHS,$/;"	f	class:llvm::IRBuilder
CreateFCmp	Support/ConstantFolder.h	/^  Constant *CreateFCmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::ConstantFolder
CreateFCmp	Support/NoFolder.h	/^  Instruction *CreateFCmp(CmpInst::Predicate P,$/;"	f	class:llvm::NoFolder
CreateFCmp	Support/TargetFolder.h	/^  Constant *CreateFCmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::TargetFolder
CreateFCmpOEQ	IRBuilder.h	/^  Value *CreateFCmpOEQ(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpOGE	IRBuilder.h	/^  Value *CreateFCmpOGE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpOGT	IRBuilder.h	/^  Value *CreateFCmpOGT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpOLE	IRBuilder.h	/^  Value *CreateFCmpOLE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpOLT	IRBuilder.h	/^  Value *CreateFCmpOLT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpONE	IRBuilder.h	/^  Value *CreateFCmpONE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpORD	IRBuilder.h	/^  Value *CreateFCmpORD(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUEQ	IRBuilder.h	/^  Value *CreateFCmpUEQ(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUGE	IRBuilder.h	/^  Value *CreateFCmpUGE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUGT	IRBuilder.h	/^  Value *CreateFCmpUGT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpULE	IRBuilder.h	/^  Value *CreateFCmpULE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpULT	IRBuilder.h	/^  Value *CreateFCmpULT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUNE	IRBuilder.h	/^  Value *CreateFCmpUNE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFCmpUNO	IRBuilder.h	/^  Value *CreateFCmpUNO(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFDiv	IRBuilder.h	/^  Value *CreateFDiv(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFDiv	Support/ConstantFolder.h	/^  Constant *CreateFDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFDiv	Support/NoFolder.h	/^  Instruction *CreateFDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFDiv	Support/TargetFolder.h	/^  Constant *CreateFDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateFI	CodeGen/MachineOperand.h	/^  static MachineOperand CreateFI(int Idx) {$/;"	f	class:llvm::MachineOperand
CreateFMul	IRBuilder.h	/^  Value *CreateFMul(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFMul	Support/ConstantFolder.h	/^  Constant *CreateFMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFMul	Support/NoFolder.h	/^  Instruction *CreateFMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFMul	Support/TargetFolder.h	/^  Constant *CreateFMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateFNeg	IRBuilder.h	/^  Value *CreateFNeg(Value *V, const Twine &Name = "", MDNode *FPMathTag = 0) {$/;"	f	class:llvm::IRBuilder
CreateFNeg	Support/ConstantFolder.h	/^  Constant *CreateFNeg(Constant *C) const {$/;"	f	class:llvm::ConstantFolder
CreateFNeg	Support/NoFolder.h	/^  Instruction *CreateFNeg(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateFNeg	Support/TargetFolder.h	/^  Constant *CreateFNeg(Constant *C) const {$/;"	f	class:llvm::TargetFolder
CreateFPCast	IRBuilder.h	/^  Value *CreateFPCast(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFPCast	Support/ConstantFolder.h	/^  Constant *CreateFPCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateFPCast	Support/NoFolder.h	/^  Instruction *CreateFPCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateFPCast	Support/TargetFolder.h	/^  Constant *CreateFPCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateFPExt	IRBuilder.h	/^  Value *CreateFPExt(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateFPImm	CodeGen/MachineOperand.h	/^  static MachineOperand CreateFPImm(const ConstantFP *CFP) {$/;"	f	class:llvm::MachineOperand
CreateFPImm	MC/MCInst.h	/^  static MCOperand CreateFPImm(double Val) {$/;"	f	class:llvm::MCOperand
CreateFPToSI	IRBuilder.h	/^  Value *CreateFPToSI(Value *V, Type *DestTy, const Twine &Name = ""){$/;"	f	class:llvm::IRBuilder
CreateFPToUI	IRBuilder.h	/^  Value *CreateFPToUI(Value *V, Type *DestTy, const Twine &Name = ""){$/;"	f	class:llvm::IRBuilder
CreateFPTrunc	IRBuilder.h	/^  Value *CreateFPTrunc(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateFRem	IRBuilder.h	/^  Value *CreateFRem(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFRem	Support/ConstantFolder.h	/^  Constant *CreateFRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFRem	Support/NoFolder.h	/^  Instruction *CreateFRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFRem	Support/TargetFolder.h	/^  Constant *CreateFRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateFSub	IRBuilder.h	/^  Value *CreateFSub(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateFSub	Support/ConstantFolder.h	/^  Constant *CreateFSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFSub	Support/NoFolder.h	/^  Instruction *CreateFSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFSub	Support/TargetFolder.h	/^  Constant *CreateFSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateFence	IRBuilder.h	/^  FenceInst *CreateFence(AtomicOrdering Ordering,$/;"	f	class:llvm::IRBuilder
CreateGA	CodeGen/MachineOperand.h	/^  static MachineOperand CreateGA(const GlobalValue *GV, int64_t Offset,$/;"	f	class:llvm::MachineOperand
CreateGEP	IRBuilder.h	/^  Value *CreateGEP(Value *Ptr, ArrayRef<Value *> IdxList,$/;"	f	class:llvm::IRBuilder
CreateGEP	IRBuilder.h	/^  Value *CreateGEP(Value *Ptr, Value *Idx, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateGT	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateGT(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateGTE	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateGTE(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateGetElementPtr	Support/ConstantFolder.h	/^  Constant *CreateGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::ConstantFolder
CreateGetElementPtr	Support/ConstantFolder.h	/^  Constant *CreateGetElementPtr(Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateGetElementPtr	Support/NoFolder.h	/^  Constant *CreateGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::NoFolder
CreateGetElementPtr	Support/NoFolder.h	/^  Constant *CreateGetElementPtr(Constant *C,$/;"	f	class:llvm::NoFolder
CreateGetElementPtr	Support/NoFolder.h	/^  Instruction *CreateGetElementPtr(Constant *C,$/;"	f	class:llvm::NoFolder
CreateGetElementPtr	Support/TargetFolder.h	/^  Constant *CreateGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::TargetFolder
CreateGetElementPtr	Support/TargetFolder.h	/^  Constant *CreateGetElementPtr(Constant *C,$/;"	f	class:llvm::TargetFolder
CreateGlobalStringPtr	IRBuilder.h	/^  Value *CreateGlobalStringPtr(StringRef Str, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmp	IRBuilder.h	/^  Value *CreateICmp(CmpInst::Predicate P, Value *LHS, Value *RHS,$/;"	f	class:llvm::IRBuilder
CreateICmp	Support/ConstantFolder.h	/^  Constant *CreateICmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::ConstantFolder
CreateICmp	Support/NoFolder.h	/^  Instruction *CreateICmp(CmpInst::Predicate P,$/;"	f	class:llvm::NoFolder
CreateICmp	Support/TargetFolder.h	/^  Constant *CreateICmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::TargetFolder
CreateICmpEQ	IRBuilder.h	/^  Value *CreateICmpEQ(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpNE	IRBuilder.h	/^  Value *CreateICmpNE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpSGE	IRBuilder.h	/^  Value *CreateICmpSGE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpSGT	IRBuilder.h	/^  Value *CreateICmpSGT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpSLE	IRBuilder.h	/^  Value *CreateICmpSLE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpSLT	IRBuilder.h	/^  Value *CreateICmpSLT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpUGE	IRBuilder.h	/^  Value *CreateICmpUGE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpUGT	IRBuilder.h	/^  Value *CreateICmpUGT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpULE	IRBuilder.h	/^  Value *CreateICmpULE(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateICmpULT	IRBuilder.h	/^  Value *CreateICmpULT(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateImm	CodeGen/MachineOperand.h	/^  static MachineOperand CreateImm(int64_t Val) {$/;"	f	class:llvm::MachineOperand
CreateImm	MC/MCInst.h	/^  static MCOperand CreateImm(int64_t Val) {$/;"	f	class:llvm::MCOperand
CreateInBounds	Instructions.h	/^  static GetElementPtrInst *CreateInBounds(Value *Ptr,$/;"	f	class:llvm::GetElementPtrInst
CreateInBoundsGEP	IRBuilder.h	/^  Value *CreateInBoundsGEP(Value *Ptr, ArrayRef<Value *> IdxList,$/;"	f	class:llvm::IRBuilder
CreateInBoundsGEP	IRBuilder.h	/^  Value *CreateInBoundsGEP(Value *Ptr, Value *Idx, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateInBoundsGetElementPtr	Support/ConstantFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::ConstantFolder
CreateInBoundsGetElementPtr	Support/ConstantFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateInBoundsGetElementPtr	Support/NoFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::NoFolder
CreateInBoundsGetElementPtr	Support/NoFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C,$/;"	f	class:llvm::NoFolder
CreateInBoundsGetElementPtr	Support/NoFolder.h	/^  Instruction *CreateInBoundsGetElementPtr(Constant *C,$/;"	f	class:llvm::NoFolder
CreateInBoundsGetElementPtr	Support/TargetFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::TargetFolder
CreateInBoundsGetElementPtr	Support/TargetFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C,$/;"	f	class:llvm::TargetFolder
CreateIndirectBr	IRBuilder.h	/^  IndirectBrInst *CreateIndirectBr(Value *Addr, unsigned NumDests = 10) {$/;"	f	class:llvm::IRBuilder
CreateInsertElement	IRBuilder.h	/^  Value *CreateInsertElement(Value *Vec, Value *NewElt, Value *Idx,$/;"	f	class:llvm::IRBuilder
CreateInsertElement	Support/ConstantFolder.h	/^  Constant *CreateInsertElement(Constant *Vec, Constant *NewElt,$/;"	f	class:llvm::ConstantFolder
CreateInsertElement	Support/NoFolder.h	/^  Instruction *CreateInsertElement(Constant *Vec, Constant *NewElt,$/;"	f	class:llvm::NoFolder
CreateInsertElement	Support/TargetFolder.h	/^  Constant *CreateInsertElement(Constant *Vec, Constant *NewElt,$/;"	f	class:llvm::TargetFolder
CreateInsertNUWNSWBinOp	IRBuilder.h	/^  BinaryOperator *CreateInsertNUWNSWBinOp(BinaryOperator::BinaryOps Opc,$/;"	f	class:llvm::IRBuilder
CreateInsertValue	IRBuilder.h	/^  Value *CreateInsertValue(Value *Agg, Value *Val,$/;"	f	class:llvm::IRBuilder
CreateInsertValue	Support/ConstantFolder.h	/^  Constant *CreateInsertValue(Constant *Agg, Constant *Val,$/;"	f	class:llvm::ConstantFolder
CreateInsertValue	Support/NoFolder.h	/^  Instruction *CreateInsertValue(Constant *Agg, Constant *Val,$/;"	f	class:llvm::NoFolder
CreateInsertValue	Support/TargetFolder.h	/^  Constant *CreateInsertValue(Constant *Agg, Constant *Val,$/;"	f	class:llvm::TargetFolder
CreateInst	MC/MCInst.h	/^  static MCOperand CreateInst(const MCInst *Val) {$/;"	f	class:llvm::MCOperand
CreateIntCast	IRBuilder.h	/^  Value *CreateIntCast(Value *V, Type *DestTy, bool isSigned,$/;"	f	class:llvm::IRBuilder
CreateIntCast	Support/ConstantFolder.h	/^  Constant *CreateIntCast(Constant *C, Type *DestTy,$/;"	f	class:llvm::ConstantFolder
CreateIntCast	Support/NoFolder.h	/^  Instruction *CreateIntCast(Constant *C, Type *DestTy,$/;"	f	class:llvm::NoFolder
CreateIntCast	Support/TargetFolder.h	/^  Constant *CreateIntCast(Constant *C, Type *DestTy,$/;"	f	class:llvm::TargetFolder
CreateIntToPtr	IRBuilder.h	/^  Value *CreateIntToPtr(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateIntToPtr	Support/ConstantFolder.h	/^  Constant *CreateIntToPtr(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateIntToPtr	Support/NoFolder.h	/^  Instruction *CreateIntToPtr(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateIntToPtr	Support/TargetFolder.h	/^  Constant *CreateIntToPtr(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateInvoke	IRBuilder.h	/^  InvokeInst *CreateInvoke(Value *Callee, BasicBlock *NormalDest,$/;"	f	class:llvm::IRBuilder
CreateInvoke3	IRBuilder.h	/^  InvokeInst *CreateInvoke3(Value *Callee, BasicBlock *NormalDest,$/;"	f	class:llvm::IRBuilder
CreateIsNotNull	IRBuilder.h	/^  Value *CreateIsNotNull(Value *Arg, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateIsNull	IRBuilder.h	/^  Value *CreateIsNull(Value *Arg, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateJTI	CodeGen/MachineOperand.h	/^  static MachineOperand CreateJTI(unsigned Idx,$/;"	f	class:llvm::MachineOperand
CreateLAnd	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateLAnd(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateLNot	MC/MCExpr.h	/^  static const MCUnaryExpr *CreateLNot(const MCExpr *Expr, MCContext &Ctx) {$/;"	f	class:llvm::MCUnaryExpr
CreateLOr	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateLOr(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateLShr	IRBuilder.h	/^  Value *CreateLShr(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateLShr	IRBuilder.h	/^  Value *CreateLShr(Value *LHS, const APInt &RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateLShr	IRBuilder.h	/^  Value *CreateLShr(Value *LHS, uint64_t RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateLShr	Support/ConstantFolder.h	/^  Constant *CreateLShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateLShr	Support/NoFolder.h	/^  Instruction *CreateLShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateLShr	Support/TargetFolder.h	/^  Constant *CreateLShr(Constant *LHS, Constant *RHS, bool isExact = false)const{$/;"	f	class:llvm::TargetFolder
CreateLT	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateLT(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateLTE	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateLTE(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateLandingPad	IRBuilder.h	/^  LandingPadInst *CreateLandingPad(Type *Ty, Value *PersFn, unsigned NumClauses,$/;"	f	class:llvm::IRBuilder
CreateLazySentinel	ADT/ilist.h	/^  void CreateLazySentinel() const {$/;"	f	class:llvm::iplist
CreateLoad	IRBuilder.h	/^  LoadInst *CreateLoad(Value *Ptr, bool isVolatile, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateLoad	IRBuilder.h	/^  LoadInst *CreateLoad(Value *Ptr, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateLoad	IRBuilder.h	/^  LoadInst *CreateLoad(Value *Ptr, const char *Name) {$/;"	f	class:llvm::IRBuilder
CreateMBB	CodeGen/MachineOperand.h	/^  static MachineOperand CreateMBB(MachineBasicBlock *MBB,$/;"	f	class:llvm::MachineOperand
CreateMCSymbol	CodeGen/MachineOperand.h	/^  static MachineOperand CreateMCSymbol(MCSymbol *Sym) {$/;"	f	class:llvm::MachineOperand
CreateMemCpy	IRBuilder.h	/^  CallInst *CreateMemCpy(Value *Dst, Value *Src, uint64_t Size, unsigned Align,$/;"	f	class:llvm::IRBuilderBase
CreateMemMove	IRBuilder.h	/^  CallInst *CreateMemMove(Value *Dst, Value *Src, uint64_t Size, unsigned Align,$/;"	f	class:llvm::IRBuilderBase
CreateMemSet	IRBuilder.h	/^  CallInst *CreateMemSet(Value *Ptr, Value *Val, uint64_t Size, unsigned Align,$/;"	f	class:llvm::IRBuilderBase
CreateMetadata	CodeGen/MachineOperand.h	/^  static MachineOperand CreateMetadata(const MDNode *Meta) {$/;"	f	class:llvm::MachineOperand
CreateMinus	MC/MCExpr.h	/^  static const MCUnaryExpr *CreateMinus(const MCExpr *Expr, MCContext &Ctx) {$/;"	f	class:llvm::MCUnaryExpr
CreateMod	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateMod(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateMul	IRBuilder.h	/^  Value *CreateMul(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateMul	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateMul(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateMul	Support/ConstantFolder.h	/^  Constant *CreateMul(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateMul	Support/NoFolder.h	/^  Instruction *CreateMul(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateMul	Support/TargetFolder.h	/^  Constant *CreateMul(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::TargetFolder
CreateNE	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateNE(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateNSW	InstrTypes.h	/^  static BinaryOperator *CreateNSW(BinaryOps Opc, Value *V1, Value *V2,$/;"	f	class:llvm::BinaryOperator
CreateNSWAdd	IRBuilder.h	/^  Value *CreateNSWAdd(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNSWAdd	Support/NoFolder.h	/^  Instruction *CreateNSWAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNSWMul	IRBuilder.h	/^  Value *CreateNSWMul(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNSWMul	Support/NoFolder.h	/^  Instruction *CreateNSWMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNSWNeg	IRBuilder.h	/^  Value *CreateNSWNeg(Value *V, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNSWNeg	Support/NoFolder.h	/^  Instruction *CreateNSWNeg(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateNSWSub	IRBuilder.h	/^  Value *CreateNSWSub(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNSWSub	Support/NoFolder.h	/^  Instruction *CreateNSWSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNUW	InstrTypes.h	/^  static BinaryOperator *CreateNUW(BinaryOps Opc, Value *V1, Value *V2,$/;"	f	class:llvm::BinaryOperator
CreateNUWAdd	IRBuilder.h	/^  Value *CreateNUWAdd(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNUWAdd	Support/NoFolder.h	/^  Instruction *CreateNUWAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNUWMul	IRBuilder.h	/^  Value *CreateNUWMul(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNUWMul	Support/NoFolder.h	/^  Instruction *CreateNUWMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNUWNeg	IRBuilder.h	/^  Value *CreateNUWNeg(Value *V, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNUWNeg	Support/NoFolder.h	/^  Instruction *CreateNUWNeg(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateNUWSub	IRBuilder.h	/^  Value *CreateNUWSub(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNUWSub	Support/NoFolder.h	/^  Instruction *CreateNUWSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNeg	IRBuilder.h	/^  Value *CreateNeg(Value *V, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateNeg	Support/ConstantFolder.h	/^  Constant *CreateNeg(Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateNeg	Support/NoFolder.h	/^  Instruction *CreateNeg(Constant *C,$/;"	f	class:llvm::NoFolder
CreateNeg	Support/TargetFolder.h	/^  Constant *CreateNeg(Constant *C,$/;"	f	class:llvm::TargetFolder
CreateNot	IRBuilder.h	/^  Value *CreateNot(Value *V, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateNot	MC/MCExpr.h	/^  static const MCUnaryExpr *CreateNot(const MCExpr *Expr, MCContext &Ctx) {$/;"	f	class:llvm::MCUnaryExpr
CreateNot	Support/ConstantFolder.h	/^  Constant *CreateNot(Constant *C) const {$/;"	f	class:llvm::ConstantFolder
CreateNot	Support/NoFolder.h	/^  Instruction *CreateNot(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateNot	Support/TargetFolder.h	/^  Constant *CreateNot(Constant *C) const {$/;"	f	class:llvm::TargetFolder
CreateOr	IRBuilder.h	/^  Value *CreateOr(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateOr	IRBuilder.h	/^  Value *CreateOr(Value *LHS, const APInt &RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateOr	IRBuilder.h	/^  Value *CreateOr(Value *LHS, uint64_t RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateOr	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateOr(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateOr	Support/ConstantFolder.h	/^  Constant *CreateOr(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateOr	Support/NoFolder.h	/^  Instruction *CreateOr(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateOr	Support/TargetFolder.h	/^  Constant *CreateOr(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreatePHI	IRBuilder.h	/^  PHINode *CreatePHI(Type *Ty, unsigned NumReservedValues,$/;"	f	class:llvm::IRBuilder
CreatePlus	MC/MCExpr.h	/^  static const MCUnaryExpr *CreatePlus(const MCExpr *Expr, MCContext &Ctx) {$/;"	f	class:llvm::MCUnaryExpr
CreatePointerCast	IRBuilder.h	/^  Value *CreatePointerCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreatePointerCast	Support/ConstantFolder.h	/^  Constant *CreatePointerCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreatePointerCast	Support/NoFolder.h	/^  Instruction *CreatePointerCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreatePointerCast	Support/TargetFolder.h	/^  Constant *CreatePointerCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreatePtrDiff	IRBuilder.h	/^  Value *CreatePtrDiff(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreatePtrToInt	IRBuilder.h	/^  Value *CreatePtrToInt(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreatePtrToInt	Support/ConstantFolder.h	/^  Constant *CreatePtrToInt(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreatePtrToInt	Support/NoFolder.h	/^  Instruction *CreatePtrToInt(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreatePtrToInt	Support/TargetFolder.h	/^  Constant *CreatePtrToInt(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateReg	CodeGen/MachineOperand.h	/^  static MachineOperand CreateReg(unsigned Reg, bool isDef, bool isImp = false,$/;"	f	class:llvm::MachineOperand
CreateReg	MC/MCInst.h	/^  static MCOperand CreateReg(unsigned Reg) {$/;"	f	class:llvm::MCOperand
CreateRegMask	CodeGen/MachineOperand.h	/^  static MachineOperand CreateRegMask(const uint32_t *Mask) {$/;"	f	class:llvm::MachineOperand
CreateResume	IRBuilder.h	/^  ResumeInst *CreateResume(Value *Exn) {$/;"	f	class:llvm::IRBuilder
CreateRet	IRBuilder.h	/^  ReturnInst *CreateRet(Value *V) {$/;"	f	class:llvm::IRBuilder
CreateRetVoid	IRBuilder.h	/^  ReturnInst *CreateRetVoid() {$/;"	f	class:llvm::IRBuilder
CreateSDiv	IRBuilder.h	/^  Value *CreateSDiv(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateSDiv	Support/ConstantFolder.h	/^  Constant *CreateSDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateSDiv	Support/NoFolder.h	/^  Instruction *CreateSDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateSDiv	Support/TargetFolder.h	/^  Constant *CreateSDiv(Constant *LHS, Constant *RHS, bool isExact = false)const{$/;"	f	class:llvm::TargetFolder
CreateSExt	IRBuilder.h	/^  Value *CreateSExt(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateSExtOrBitCast	IRBuilder.h	/^  Value *CreateSExtOrBitCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateSExtOrBitCast	Support/ConstantFolder.h	/^  Constant *CreateSExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateSExtOrBitCast	Support/NoFolder.h	/^  Instruction *CreateSExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateSExtOrBitCast	Support/TargetFolder.h	/^  Constant *CreateSExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateSExtOrTrunc	IRBuilder.h	/^  Value *CreateSExtOrTrunc(Value *V, IntegerType *DestTy,$/;"	f	class:llvm::IRBuilder
CreateSIToFP	IRBuilder.h	/^  Value *CreateSIToFP(Value *V, Type *DestTy, const Twine &Name = ""){$/;"	f	class:llvm::IRBuilder
CreateSRem	IRBuilder.h	/^  Value *CreateSRem(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateSRem	Support/ConstantFolder.h	/^  Constant *CreateSRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateSRem	Support/NoFolder.h	/^  Instruction *CreateSRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateSRem	Support/TargetFolder.h	/^  Constant *CreateSRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateSelect	IRBuilder.h	/^  Value *CreateSelect(Value *C, Value *True, Value *False,$/;"	f	class:llvm::IRBuilder
CreateSelect	Support/ConstantFolder.h	/^  Constant *CreateSelect(Constant *C, Constant *True, Constant *False) const {$/;"	f	class:llvm::ConstantFolder
CreateSelect	Support/NoFolder.h	/^  Instruction *CreateSelect(Constant *C,$/;"	f	class:llvm::NoFolder
CreateSelect	Support/TargetFolder.h	/^  Constant *CreateSelect(Constant *C, Constant *True, Constant *False) const {$/;"	f	class:llvm::TargetFolder
CreateShl	IRBuilder.h	/^  Value *CreateShl(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateShl	IRBuilder.h	/^  Value *CreateShl(Value *LHS, const APInt &RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateShl	IRBuilder.h	/^  Value *CreateShl(Value *LHS, uint64_t RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateShl	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateShl(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateShl	Support/ConstantFolder.h	/^  Constant *CreateShl(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateShl	Support/NoFolder.h	/^  Instruction *CreateShl(Constant *LHS, Constant *RHS, bool HasNUW = false,$/;"	f	class:llvm::NoFolder
CreateShl	Support/TargetFolder.h	/^  Constant *CreateShl(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::TargetFolder
CreateShr	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateShr(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateShuffleVector	IRBuilder.h	/^  Value *CreateShuffleVector(Value *V1, Value *V2, Value *Mask,$/;"	f	class:llvm::IRBuilder
CreateShuffleVector	Support/ConstantFolder.h	/^  Constant *CreateShuffleVector(Constant *V1, Constant *V2,$/;"	f	class:llvm::ConstantFolder
CreateShuffleVector	Support/NoFolder.h	/^  Instruction *CreateShuffleVector(Constant *V1, Constant *V2,$/;"	f	class:llvm::NoFolder
CreateShuffleVector	Support/TargetFolder.h	/^  Constant *CreateShuffleVector(Constant *V1, Constant *V2,$/;"	f	class:llvm::TargetFolder
CreateSpillStackObject	CodeGen/MachineFrameInfo.h	/^  int CreateSpillStackObject(uint64_t Size, unsigned Alignment) {$/;"	f	class:llvm::MachineFrameInfo
CreateStackObject	CodeGen/MachineFrameInfo.h	/^  int CreateStackObject(uint64_t Size, unsigned Alignment, bool isSS,$/;"	f	class:llvm::MachineFrameInfo
CreateStore	IRBuilder.h	/^  StoreInst *CreateStore(Value *Val, Value *Ptr, bool isVolatile = false) {$/;"	f	class:llvm::IRBuilder
CreateStructGEP	IRBuilder.h	/^  Value *CreateStructGEP(Value *Ptr, unsigned Idx, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateSub	IRBuilder.h	/^  Value *CreateSub(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateSub	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateSub(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateSub	Support/ConstantFolder.h	/^  Constant *CreateSub(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateSub	Support/NoFolder.h	/^  Instruction *CreateSub(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateSub	Support/TargetFolder.h	/^  Constant *CreateSub(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::TargetFolder
CreateSwitch	IRBuilder.h	/^  SwitchInst *CreateSwitch(Value *V, BasicBlock *Dest, unsigned NumCases = 10,$/;"	f	class:llvm::IRBuilder
CreateTargetIndex	CodeGen/MachineOperand.h	/^  static MachineOperand CreateTargetIndex(unsigned Idx, int64_t Offset,$/;"	f	class:llvm::MachineOperand
CreateTargetScheduleState	Target/TargetInstrInfo.h	/^    CreateTargetScheduleState(const TargetMachine*, const ScheduleDAG*) const {$/;"	f	class:llvm::TargetInstrInfo
CreateTrunc	IRBuilder.h	/^  Value *CreateTrunc(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateTruncOrBitCast	IRBuilder.h	/^  Value *CreateTruncOrBitCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateTruncOrBitCast	Support/ConstantFolder.h	/^  Constant *CreateTruncOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateTruncOrBitCast	Support/NoFolder.h	/^  Instruction *CreateTruncOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateTruncOrBitCast	Support/TargetFolder.h	/^  Constant *CreateTruncOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateUDiv	IRBuilder.h	/^  Value *CreateUDiv(Value *LHS, Value *RHS, const Twine &Name = "",$/;"	f	class:llvm::IRBuilder
CreateUDiv	Support/ConstantFolder.h	/^  Constant *CreateUDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateUDiv	Support/NoFolder.h	/^  Instruction *CreateUDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateUDiv	Support/TargetFolder.h	/^  Constant *CreateUDiv(Constant *LHS, Constant *RHS, bool isExact = false)const{$/;"	f	class:llvm::TargetFolder
CreateUIToFP	IRBuilder.h	/^  Value *CreateUIToFP(Value *V, Type *DestTy, const Twine &Name = ""){$/;"	f	class:llvm::IRBuilder
CreateURem	IRBuilder.h	/^  Value *CreateURem(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateURem	Support/ConstantFolder.h	/^  Constant *CreateURem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateURem	Support/NoFolder.h	/^  Instruction *CreateURem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateURem	Support/TargetFolder.h	/^  Constant *CreateURem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateUnreachable	IRBuilder.h	/^  UnreachableInst *CreateUnreachable() {$/;"	f	class:llvm::IRBuilder
CreateVAArg	IRBuilder.h	/^  VAArgInst *CreateVAArg(Value *List, Type *Ty, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateVariableSizedObject	CodeGen/MachineFrameInfo.h	/^  int CreateVariableSizedObject(unsigned Alignment) {$/;"	f	class:llvm::MachineFrameInfo
CreateVerifierPass	DefaultPasses.h	/^  static Pass* (*CreateVerifierPass)(void);$/;"	m	class:llvm::StandardPass
CreateXor	IRBuilder.h	/^  Value *CreateXor(Value *LHS, Value *RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateXor	IRBuilder.h	/^  Value *CreateXor(Value *LHS, const APInt &RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateXor	IRBuilder.h	/^  Value *CreateXor(Value *LHS, uint64_t RHS, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateXor	MC/MCExpr.h	/^  static const MCBinaryExpr *CreateXor(const MCExpr *LHS, const MCExpr *RHS,$/;"	f	class:llvm::MCBinaryExpr
CreateXor	Support/ConstantFolder.h	/^  Constant *CreateXor(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateXor	Support/NoFolder.h	/^  Instruction *CreateXor(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateXor	Support/TargetFolder.h	/^  Constant *CreateXor(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateZExt	IRBuilder.h	/^  Value *CreateZExt(Value *V, Type *DestTy, const Twine &Name = "") {$/;"	f	class:llvm::IRBuilder
CreateZExtOrBitCast	IRBuilder.h	/^  Value *CreateZExtOrBitCast(Value *V, Type *DestTy,$/;"	f	class:llvm::IRBuilder
CreateZExtOrBitCast	Support/ConstantFolder.h	/^  Constant *CreateZExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateZExtOrBitCast	Support/NoFolder.h	/^  Instruction *CreateZExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateZExtOrBitCast	Support/TargetFolder.h	/^  Constant *CreateZExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateZExtOrTrunc	IRBuilder.h	/^  Value *CreateZExtOrTrunc(Value *V, IntegerType *DestTy,$/;"	f	class:llvm::IRBuilder
CriticalMax	CodeGen/RegisterPressure.h	/^  PressureElement CriticalMax;$/;"	m	struct:llvm::RegPressureDelta
CrossThread	Instructions.h	/^  CrossThread = 1$/;"	e	enum:llvm::SynchronizationScope
Cst	MC/MCValue.h	/^  int64_t Cst;$/;"	m	class:llvm::MCValue
Ctor	CodeGen/MachinePassRegistry.h	/^  MachinePassCtor Ctor;                 \/\/ Function pass creator.$/;"	m	class:llvm::MachinePassRegistryNode
Ctor	Support/Registry.h	/^    T *(*Ctor)();$/;"	m	class:llvm::SimpleRegistryEntry
CtorFn	Support/Registry.h	/^      static T *CtorFn() { return new V(); }$/;"	f	class:llvm::Registry::Add
Ctx	CodeGen/MachineFunction.h	/^  MCContext &Ctx;$/;"	m	class:llvm::MachineFunction
Ctx	MC/MCDisassembler.h	/^  MCContext *Ctx;$/;"	m	class:llvm::MCDisassembler
Ctx	MC/MCObjectFileInfo.h	/^  MCContext *Ctx;$/;"	m	class:llvm::MCObjectFileInfo
Ctx	Target/TargetLoweringObjectFile.h	/^  MCContext *Ctx;$/;"	m	class:llvm::TargetLoweringObjectFile
Cur	Support/Registry.h	/^      const node *Cur;$/;"	m	class:llvm::Registry::iterator
Cur	Support/circular_raw_ostream.h	/^    char *Cur;$/;"	m	class:llvm::circular_raw_ostream
CurAbbrevs	Bitcode/BitstreamReader.h	/^  std::vector<BitCodeAbbrev*> CurAbbrevs;$/;"	m	class:llvm::BitstreamCursor
CurAbbrevs	Bitcode/BitstreamWriter.h	/^  std::vector<BitCodeAbbrev*> CurAbbrevs;$/;"	m	class:llvm::BitstreamWriter
CurArray	ADT/SmallPtrSet.h	/^  const void **CurArray;$/;"	m	class:llvm::SmallPtrSetImpl
CurArraySize	ADT/SmallPtrSet.h	/^  unsigned CurArraySize;$/;"	m	class:llvm::SmallPtrSetImpl
CurBit	Bitcode/BitstreamWriter.h	/^  unsigned CurBit;$/;"	m	class:llvm::BitstreamWriter
CurBuf	MC/MCParser/AsmLexer.h	/^  const MemoryBuffer *CurBuf;$/;"	m	class:llvm::AsmLexer
CurBufferPtr	CodeGen/MachineCodeEmitter.h	/^  uint8_t *CurBufferPtr;$/;"	m	class:llvm::MachineCodeEmitter
CurCallSite	CodeGen/MachineModuleInfo.h	/^  unsigned CurCallSite;$/;"	m	class:llvm::MachineModuleInfo
CurCodeSize	Bitcode/BitstreamReader.h	/^  unsigned CurCodeSize;$/;"	m	class:llvm::BitstreamCursor
CurCodeSize	Bitcode/BitstreamWriter.h	/^  unsigned CurCodeSize;$/;"	m	class:llvm::BitstreamWriter
CurCycle	CodeGen/ScheduleDAG.h	/^    unsigned CurCycle;$/;"	m	class:llvm::SchedulingPriorityQueue
CurDAG	CodeGen/SelectionDAGISel.h	/^  SelectionDAG *CurDAG;$/;"	m	class:llvm::SelectionDAGISel
CurDbgLocation	IRBuilder.h	/^  DebugLoc CurDbgLocation;$/;"	m	class:llvm::IRBuilderBase
CurNode	Analysis/AliasSetTracker.h	/^    PointerRec *CurNode;$/;"	m	class:llvm::AliasSet::iterator
CurPtr	MC/MCParser/AsmLexer.h	/^  const char *CurPtr;$/;"	m	class:llvm::AsmLexer
CurPtr	Support/Allocator.h	/^  char *CurPtr;$/;"	m	class:llvm::BumpPtrAllocator
CurScope	ADT/ScopedHashTable.h	/^  ScopeTy *CurScope;$/;"	m	class:llvm::ScopedHashTable
CurSectionData	MC/MCObjectStreamer.h	/^  MCSectionData *CurSectionData;$/;"	m	class:llvm::MCObjectStreamer
CurSlab	Support/Allocator.h	/^  MemSlab *CurSlab;$/;"	m	class:llvm::BumpPtrAllocator
CurTok	MC/MCParser/MCAsmLexer.h	/^  AsmToken CurTok;$/;"	m	class:llvm::MCAsmLexer
CurTok	MC/MCTargetAsmLexer.h	/^  AsmToken CurTok;$/;"	m	class:llvm::MCTargetAsmLexer
CurTy	Support/GetElementPtrTypeIterator.h	/^    Type *CurTy;$/;"	m	class:llvm::generic_gep_type_iterator
CurValue	Bitcode/BitstreamWriter.h	/^  uint32_t CurValue;$/;"	m	class:llvm::BitstreamWriter
CurWord	Bitcode/BitstreamReader.h	/^  uint32_t CurWord;$/;"	m	class:llvm::BitstreamCursor
CurrElementIter	ADT/SparseBitVector.h	/^  ElementListIter CurrElementIter;$/;"	m	class:llvm::SparseBitVector
CurrPos	CodeGen/RegisterPressure.h	/^  MachineBasicBlock::const_iterator CurrPos;$/;"	m	class:llvm::RegPressureTracker
CurrSetPressure	CodeGen/RegisterPressure.h	/^  std::vector<unsigned> CurrSetPressure;$/;"	m	class:llvm::RegPressureTracker
Current	Object/ELF.h	/^    const char *Current;$/;"	m	class:llvm::object::ELFObjectFile::ELFRelocationIterator
Current	Object/ObjectFile.h	/^  content_type Current;$/;"	m	class:llvm::object::content_iterator
Current	Support/TargetRegistry.h	/^      const Target *Current;$/;"	m	class:llvm::TargetRegistry::iterator
CurrentBottom	CodeGen/MachineScheduler.h	/^  MachineBasicBlock::iterator CurrentBottom;$/;"	m	class:llvm::ScheduleDAGMI
CurrentDoc	Support/YAMLParser.h	/^  OwningPtr<Document> CurrentDoc;$/;"	m	class:llvm::yaml::Stream
CurrentDwarfLoc	MC/MCContext.h	/^    MCDwarfLoc CurrentDwarfLoc;$/;"	m	class:llvm::MCContext
CurrentEntry	Support/FileSystem.h	/^    directory_entry CurrentEntry;$/;"	m	struct:llvm::sys::fs::detail::DirIterState
CurrentEntry	Support/YAMLParser.h	/^  KeyValueNode *CurrentEntry;$/;"	m	class:llvm::yaml::MappingNode
CurrentEntry	Support/YAMLParser.h	/^  Node *CurrentEntry;$/;"	m	class:llvm::yaml::SequenceNode
CurrentFnLexicalScope	CodeGen/LexicalScopes.h	/^  LexicalScope *CurrentFnLexicalScope;$/;"	m	class:llvm::LexicalScopes
CurrentFnSym	CodeGen/AsmPrinter.h	/^    MCSymbol *CurrentFnSym;$/;"	m	class:llvm::AsmPrinter
CurrentFnSymForSize	CodeGen/AsmPrinter.h	/^    MCSymbol *CurrentFnSymForSize;$/;"	m	class:llvm::AsmPrinter
CurrentLSuccessor	Support/IntegersSubsetMapping.h	/^    SuccessorClass *CurrentLSuccessor;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
CurrentLoop	Analysis/LoopPass.h	/^  Loop *CurrentLoop;$/;"	m	class:llvm::LPPassManager
CurrentMax	CodeGen/RegisterPressure.h	/^  PressureElement CurrentMax;$/;"	m	struct:llvm::RegPressureDelta
CurrentPacketMIs	CodeGen/DFAPacketizer.h	/^  std::vector<MachineInstr*> CurrentPacketMIs;$/;"	m	class:llvm::VLIWPacketizerList
CurrentRSuccessor	Support/IntegersSubsetMapping.h	/^    SuccessorClass *CurrentRSuccessor;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
CurrentRegion	Analysis/RegionPass.h	/^  Region *CurrentRegion;$/;"	m	class:llvm::RGPassManager
CurrentSCC	ADT/SCCIterator.h	/^  SccTy CurrentSCC;$/;"	m	class:llvm::scc_iterator
CurrentState	CodeGen/DFAPacketizer.h	/^  int CurrentState;$/;"	m	class:llvm::DFAPacketizer
CurrentTop	CodeGen/MachineScheduler.h	/^  MachineBasicBlock::iterator CurrentTop;$/;"	m	class:llvm::ScheduleDAGMI
CurrentW64UnwindInfo	MC/MCStreamer.h	/^    MCWin64EHUnwindInfo *CurrentW64UnwindInfo;$/;"	m	class:llvm::MCStreamer
Cursor	Support/GCOV.h	/^  uint64_t Cursor;$/;"	m	class:llvm::GCOVBuffer
Custom	Target/TargetLowering.h	/^    Custom      \/\/ Use the LowerOperation hook to implement custom lowering.$/;"	e	enum:llvm::TargetLowering::LegalizeAction
CustomName	Target/TargetLibraryInfo.h	/^    CustomName = 1,$/;"	e	enum:llvm::TargetLibraryInfo::AvailabilityState
CustomNames	Target/TargetLibraryInfo.h	/^  llvm::DenseMap<unsigned, std::string> CustomNames;$/;"	m	class:llvm::TargetLibraryInfo
CustomReadBarriers	CodeGen/GCStrategy.h	/^    bool CustomReadBarriers;   \/\/\/< Default is to insert loads.$/;"	m	class:llvm::GCStrategy
CustomRoots	CodeGen/GCStrategy.h	/^    bool CustomRoots;          \/\/\/< Default is to pass through to backend.$/;"	m	class:llvm::GCStrategy
CustomSafePoints	CodeGen/GCStrategy.h	/^    bool CustomSafePoints;     \/\/\/< Default is to use NeededSafePoints$/;"	m	class:llvm::GCStrategy
CustomWriteBarriers	CodeGen/GCStrategy.h	/^    bool CustomWriteBarriers;  \/\/\/< Default is to insert stores.$/;"	m	class:llvm::GCStrategy
CvtCode	CodeGen/ISDOpcodes.h	/^  enum CvtCode {$/;"	g	namespace:llvm::ISD
CvtCode	CodeGen/SelectionDAGNodes.h	/^  ISD::CvtCode CvtCode;$/;"	m	class:llvm::CvtRndSatSDNode
CvtRndSatSDNode	CodeGen/SelectionDAGNodes.h	/^  explicit CvtRndSatSDNode(EVT VT, DebugLoc dl, const SDValue *Ops,$/;"	f	class:llvm::CvtRndSatSDNode
CvtRndSatSDNode	CodeGen/SelectionDAGNodes.h	/^class CvtRndSatSDNode : public SDNode {$/;"	c	namespace:llvm
CycleProb	Analysis/BlockFrequencyImpl.h	/^  DenseMap<BlockT *, uint32_t> CycleProb;$/;"	m	class:llvm::BlockFrequencyImpl
Cycles	CodeGen/ScheduleDAGILP.h	/^  unsigned Cycles;$/;"	m	struct:llvm::ILPValue
Cycles	MC/MCSchedule.h	/^  int Cycles;$/;"	m	struct:llvm::MCReadAdvanceEntry
Cycles	MC/MCSchedule.h	/^  int Cycles;$/;"	m	struct:llvm::MCWriteLatencyEntry
Cycles	MC/MCSchedule.h	/^  unsigned Cycles;$/;"	m	struct:llvm::MCWriteProcResEntry
Cycles_	MC/MCInstrItineraries.h	/^  unsigned Cycles_;  \/\/\/< Length of stage in machine cycles$/;"	m	struct:llvm::InstrStage
Cygwin	ADT/Triple.h	/^    Cygwin,$/;"	e	enum:llvm::Triple::OSType
D	Support/BranchProbability.h	/^  uint32_t D;$/;"	m	class:llvm::BranchProbability
DAG	CodeGen/ScoreboardHazardRecognizer.h	/^  const ScheduleDAG *DAG;$/;"	m	class:llvm::ScoreboardHazardRecognizer
DAG	CodeGen/SelectionDAG.h	/^    SelectionDAG &DAG;$/;"	m	struct:llvm::SelectionDAG::DAGUpdateListener
DAG	Target/TargetLowering.h	/^    SelectionDAG &DAG;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
DAG	Target/TargetLowering.h	/^    SelectionDAG &DAG;$/;"	m	struct:llvm::TargetLowering::DAGCombinerInfo
DAG	Target/TargetLowering.h	/^    SelectionDAG &DAG;$/;"	m	struct:llvm::TargetLowering::TargetLoweringOpt
DAGCombinerInfo	Target/TargetLowering.h	/^    DAGCombinerInfo(SelectionDAG &dag, bool bl, bool blo, bool cl, void *dc)$/;"	f	struct:llvm::TargetLowering::DAGCombinerInfo
DAGCombinerInfo	Target/TargetLowering.h	/^  struct DAGCombinerInfo {$/;"	s	class:llvm::TargetLowering
DAGDeltaAlgorithm	ADT/DAGDeltaAlgorithm.h	/^class DAGDeltaAlgorithm {$/;"	c	namespace:llvm
DAGSize	CodeGen/SelectionDAGISel.h	/^  unsigned DAGSize;$/;"	m	class:llvm::SelectionDAGISel
DAGUpdateListener	CodeGen/SelectionDAG.h	/^    explicit DAGUpdateListener(SelectionDAG &D)$/;"	f	struct:llvm::SelectionDAG::DAGUpdateListener
DAGUpdateListener	CodeGen/SelectionDAG.h	/^  struct DAGUpdateListener {$/;"	s	class:llvm::SelectionDAG
DBG_VALUE	Target/TargetOpcodes.h	/^    DBG_VALUE = 11,$/;"	e	enum:llvm::TargetOpcode::__anon139
DC	Target/TargetLowering.h	/^    void *DC;  \/\/ The DAG Combiner object.$/;"	m	struct:llvm::TargetLowering::DAGCombinerInfo
DD	CodeGen/AsmPrinter.h	/^    DwarfDebug *DD;$/;"	m	class:llvm::AsmPrinter
DE	CodeGen/AsmPrinter.h	/^    DwarfException *DE;$/;"	m	class:llvm::AsmPrinter
DEBUG	Support/Debug.h	97;"	d
DEBUGTRAP	CodeGen/ISDOpcodes.h	/^    DEBUGTRAP,$/;"	e	enum:llvm::ISD::NodeType
DEBUG_TYPE	Support/Debug.h	36;"	d
DEBUG_WITH_TYPE	Support/Debug.h	67;"	d
DEBUG_WITH_TYPE	Support/Debug.h	74;"	d
DECLARE_TRANSPARENT_OPERAND_ACCESSORS	OperandTraits.h	108;"	d
DEF	CodeGen/LiveInterval.h	/^        DEF   = 2,$/;"	e	enum:llvm::LiveInterval::InstrSlots::__anon40
DEFAULT_WEIGHT	Analysis/BranchProbabilityInfo.h	/^  static const uint32_t DEFAULT_WEIGHT = 16;$/;"	m	class:llvm::BranchProbabilityInfo
DEFAULT_WEIGHT	CodeGen/MachineBranchProbabilityInfo.h	/^  static const uint32_t DEFAULT_WEIGHT = 16;$/;"	m	class:llvm::MachineBranchProbabilityInfo
DEFINE_ABBREV	Bitcode/BitCodes.h	/^    DEFINE_ABBREV = 2,$/;"	e	enum:llvm::bitc::FixedAbbrevIDs
DEFINE_HELPERS	InstrTypes.h	251;"	d
DEFINE_HELPERS	InstrTypes.h	279;"	d
DEFINE_INTEGRAL_TYPEBUILDER	TypeBuilder.h	151;"	d
DEFINE_INTEGRAL_TYPEBUILDER	TypeBuilder.h	178;"	d
DEFINE_TRANSPARENT_OPERAND_ACCESSORS	OperandTraits.h	123;"	d
DEFINING_FILE_FOR	Support/IncludeFile.h	50;"	d
DELEGATE	Support/InstVisitor.h	278;"	d
DELEGATE	Support/InstVisitor.h	30;"	d
DELETED_NODE	CodeGen/ISDOpcodes.h	/^    DELETED_NODE,$/;"	e	enum:llvm::ISD::NodeType
DELETE_STREAM	Support/FormattedStream.h	/^    static const bool DELETE_STREAM = true;$/;"	m	class:llvm::formatted_raw_ostream
DF	Analysis/RegionInfo.h	/^  DominanceFrontier *DF;$/;"	m	class:llvm::RegionInfo
DFAPacketizer	CodeGen/DFAPacketizer.h	/^class DFAPacketizer {$/;"	c	namespace:llvm
DFAStateEntryTable	CodeGen/DFAPacketizer.h	/^  const unsigned *DFAStateEntryTable;$/;"	m	class:llvm::DFAPacketizer
DFAStateInputTable	CodeGen/DFAPacketizer.h	/^  const int (*DFAStateInputTable)[2];$/;"	m	class:llvm::DFAPacketizer
DFS	Analysis/LoopIterator.h	/^  LoopBlocksDFS &DFS;$/;"	m	class:llvm::LoopBlocksTraversal
DFSIn	CodeGen/LexicalScopes.h	/^  unsigned DFSIn, DFSOut;             \/\/ In & Out Depth use to determine$/;"	m	class:llvm::LexicalScope
DFSInfoValid	Analysis/Dominators.h	/^  bool DFSInfoValid;$/;"	m	class:llvm::DominatorTreeBase
DFSNum	Analysis/Dominators.h	/^    unsigned DFSNum;$/;"	m	struct:llvm::DominatorTreeBase::InfoRec
DFSNumIn	Analysis/Dominators.h	/^  int DFSNumIn, DFSNumOut;$/;"	m	class:llvm::DomTreeNodeBase
DFSNumOut	Analysis/Dominators.h	/^  int DFSNumIn, DFSNumOut;$/;"	m	class:llvm::DomTreeNodeBase
DFSOut	CodeGen/LexicalScopes.h	/^  unsigned DFSIn, DFSOut;             \/\/ In & Out Depth use to determine$/;"	m	class:llvm::LexicalScope
DFSPass	Analysis/DominatorInternals.h	/^unsigned DFSPass(DominatorTreeBase<typename GraphT::NodeType>& DT,$/;"	f	namespace:llvm
DFSStack	Analysis/LoopInfoImpl.h	/^  std::vector<std::pair<BlockT*, SuccIterTy> > DFSStack;$/;"	m	class:llvm::__anon30::PopulateLoopsDFS
DFSVisitChildren	ADT/SCCIterator.h	/^  void DFSVisitChildren() {$/;"	f	class:llvm::scc_iterator
DFSVisitOne	ADT/SCCIterator.h	/^  void DFSVisitOne(NodeType *N) {$/;"	f	class:llvm::scc_iterator
DF_1_CONFALT	Support/ELF.h	/^  DF_1_CONFALT    = 0x00002000, \/\/ Configuration alternative created.$/;"	e	enum:llvm::ELF::__anon112
DF_1_DIRECT	Support/ELF.h	/^  DF_1_DIRECT     = 0x00000100, \/\/ Direct binding enabled.$/;"	e	enum:llvm::ELF::__anon112
DF_1_DISPRELDNE	Support/ELF.h	/^  DF_1_DISPRELDNE = 0x00008000, \/\/ Disp reloc applied at build time.$/;"	e	enum:llvm::ELF::__anon112
DF_1_DISPRELPND	Support/ELF.h	/^  DF_1_DISPRELPND = 0x00010000  \/\/ Disp reloc applied at run-time.$/;"	e	enum:llvm::ELF::__anon112
DF_1_ENDFILTEE	Support/ELF.h	/^  DF_1_ENDFILTEE  = 0x00004000, \/\/ Filtee terminates filters search.$/;"	e	enum:llvm::ELF::__anon112
DF_1_GLOBAL	Support/ELF.h	/^  DF_1_GLOBAL     = 0x00000002, \/\/ Set RTLD_GLOBAL for this object.$/;"	e	enum:llvm::ELF::__anon112
DF_1_GROUP	Support/ELF.h	/^  DF_1_GROUP      = 0x00000004, \/\/ Set RTLD_GROUP for this object.$/;"	e	enum:llvm::ELF::__anon112
DF_1_INITFIRST	Support/ELF.h	/^  DF_1_INITFIRST  = 0x00000020, \/\/ Set RTLD_INITFIRST for this object.$/;"	e	enum:llvm::ELF::__anon112
DF_1_INTERPOSE	Support/ELF.h	/^  DF_1_INTERPOSE  = 0x00000400, \/\/ Object is used to interpose.$/;"	e	enum:llvm::ELF::__anon112
DF_1_LOADFLTR	Support/ELF.h	/^  DF_1_LOADFLTR   = 0x00000010, \/\/ Trigger filtee loading at runtime.$/;"	e	enum:llvm::ELF::__anon112
DF_1_NODEFLIB	Support/ELF.h	/^  DF_1_NODEFLIB   = 0x00000800, \/\/ Ignore default lib search path.$/;"	e	enum:llvm::ELF::__anon112
DF_1_NODELETE	Support/ELF.h	/^  DF_1_NODELETE   = 0x00000008, \/\/ Set RTLD_NODELETE for this object.$/;"	e	enum:llvm::ELF::__anon112
DF_1_NODUMP	Support/ELF.h	/^  DF_1_NODUMP     = 0x00001000, \/\/ Object can't be dldump'ed.$/;"	e	enum:llvm::ELF::__anon112
DF_1_NOOPEN	Support/ELF.h	/^  DF_1_NOOPEN     = 0x00000040, \/\/ Set RTLD_NOOPEN for this object.$/;"	e	enum:llvm::ELF::__anon112
DF_1_NOW	Support/ELF.h	/^  DF_1_NOW        = 0x00000001, \/\/ Set RTLD_NOW for this object.$/;"	e	enum:llvm::ELF::__anon112
DF_1_ORIGIN	Support/ELF.h	/^  DF_1_ORIGIN     = 0x00000080, \/\/ $ORIGIN must be handled.$/;"	e	enum:llvm::ELF::__anon112
DF_1_TRANS	Support/ELF.h	/^  DF_1_TRANS      = 0x00000200,$/;"	e	enum:llvm::ELF::__anon112
DF_BIND_NOW	Support/ELF.h	/^  DF_BIND_NOW   = 0x08, \/\/ Process all relocations on load.$/;"	e	enum:llvm::ELF::__anon111
DF_ORIGIN	Support/ELF.h	/^  DF_ORIGIN     = 0x01, \/\/ The object may reference $ORIGIN.$/;"	e	enum:llvm::ELF::__anon111
DF_STATIC_TLS	Support/ELF.h	/^  DF_STATIC_TLS = 0x10  \/\/ Reject attempts to load dynamically.$/;"	e	enum:llvm::ELF::__anon111
DF_SYMBOLIC	Support/ELF.h	/^  DF_SYMBOLIC   = 0x02, \/\/ Search the shared lib before searching the exe.$/;"	e	enum:llvm::ELF::__anon111
DF_TEXTREL	Support/ELF.h	/^  DF_TEXTREL    = 0x04, \/\/ Relocations may modify a non-writable segment.$/;"	e	enum:llvm::ELF::__anon111
DIArray	DebugInfo.h	/^    explicit DIArray(const MDNode *N = 0)$/;"	f	class:llvm::DIArray
DIArray	DebugInfo.h	/^  class DIArray : public DIDescriptor {$/;"	c	namespace:llvm
DIBasicType	DebugInfo.h	/^    explicit DIBasicType(const MDNode *N = 0) : DIType(N) {}$/;"	f	class:llvm::DIBasicType
DIBasicType	DebugInfo.h	/^  class DIBasicType : public DIType {$/;"	c	namespace:llvm
DIBuilder	DIBuilder.h	/^  class DIBuilder {$/;"	c	namespace:llvm
DICompileUnit	DebugInfo.h	/^    explicit DICompileUnit(const MDNode *N = 0) : DIScope(N) {}$/;"	f	class:llvm::DICompileUnit
DICompileUnit	DebugInfo.h	/^  class DICompileUnit : public DIScope {$/;"	c	namespace:llvm
DICompositeType	DebugInfo.h	/^    explicit DICompositeType(const MDNode *N = 0)$/;"	f	class:llvm::DICompositeType
DICompositeType	DebugInfo.h	/^  class DICompositeType : public DIDerivedType {$/;"	c	namespace:llvm
DIContext	DebugInfo/DIContext.h	/^class DIContext {$/;"	c	namespace:llvm
DIDerivedType	DebugInfo.h	/^    explicit DIDerivedType(const MDNode *N = 0)$/;"	f	class:llvm::DIDerivedType
DIDerivedType	DebugInfo.h	/^    explicit DIDerivedType(const MDNode *N, bool, bool)$/;"	f	class:llvm::DIDerivedType
DIDerivedType	DebugInfo.h	/^  class DIDerivedType : public DIType {$/;"	c	namespace:llvm
DIDescriptor	DebugInfo.h	/^    explicit DIDescriptor() : DbgNode(0) {}$/;"	f	class:llvm::DIDescriptor
DIDescriptor	DebugInfo.h	/^    explicit DIDescriptor(const MDNode *N) : DbgNode(N) {}$/;"	f	class:llvm::DIDescriptor
DIDescriptor	DebugInfo.h	/^  class DIDescriptor {$/;"	c	namespace:llvm
DIEnumerator	DebugInfo.h	/^    explicit DIEnumerator(const MDNode *N = 0) : DIDescriptor(N) {}$/;"	f	class:llvm::DIEnumerator
DIEnumerator	DebugInfo.h	/^  class DIEnumerator : public DIDescriptor {$/;"	c	namespace:llvm
DIFile	DebugInfo.h	/^    explicit DIFile(const MDNode *N = 0) : DIScope(N) {$/;"	f	class:llvm::DIFile
DIFile	DebugInfo.h	/^  class DIFile : public DIScope {$/;"	c	namespace:llvm
DIGlobalVariable	DebugInfo.h	/^    explicit DIGlobalVariable(const MDNode *N = 0) : DIDescriptor(N) {}$/;"	f	class:llvm::DIGlobalVariable
DIGlobalVariable	DebugInfo.h	/^  class DIGlobalVariable : public DIDescriptor {$/;"	c	namespace:llvm
DIInliningInfo	DebugInfo/DIContext.h	/^  DIInliningInfo() {}$/;"	f	class:llvm::DIInliningInfo
DIInliningInfo	DebugInfo/DIContext.h	/^class DIInliningInfo {$/;"	c	namespace:llvm
DILexicalBlock	DebugInfo.h	/^    explicit DILexicalBlock(const MDNode *N = 0) : DIScope(N) {}$/;"	f	class:llvm::DILexicalBlock
DILexicalBlock	DebugInfo.h	/^  class DILexicalBlock : public DIScope {$/;"	c	namespace:llvm
DILexicalBlockFile	DebugInfo.h	/^    explicit DILexicalBlockFile(const MDNode *N = 0) : DIScope(N) {}$/;"	f	class:llvm::DILexicalBlockFile
DILexicalBlockFile	DebugInfo.h	/^  class DILexicalBlockFile : public DIScope {$/;"	c	namespace:llvm
DILineInfo	DebugInfo/DIContext.h	/^  DILineInfo()$/;"	f	class:llvm::DILineInfo
DILineInfo	DebugInfo/DIContext.h	/^  DILineInfo(const SmallString<16> &fileName,$/;"	f	class:llvm::DILineInfo
DILineInfo	DebugInfo/DIContext.h	/^class DILineInfo {$/;"	c	namespace:llvm
DILineInfoSpecifier	DebugInfo/DIContext.h	/^  DILineInfoSpecifier(uint32_t flags = FileLineInfo) : Flags(flags) {}$/;"	f	class:llvm::DILineInfoSpecifier
DILineInfoSpecifier	DebugInfo/DIContext.h	/^class DILineInfoSpecifier {$/;"	c	namespace:llvm
DILocation	DebugInfo.h	/^    explicit DILocation(const MDNode *N) : DIDescriptor(N) { }$/;"	f	class:llvm::DILocation
DILocation	DebugInfo.h	/^  class DILocation : public DIDescriptor {$/;"	c	namespace:llvm
DINameSpace	DebugInfo.h	/^    explicit DINameSpace(const MDNode *N = 0) : DIScope(N) {}$/;"	f	class:llvm::DINameSpace
DINameSpace	DebugInfo.h	/^  class DINameSpace : public DIScope { $/;"	c	namespace:llvm
DIObjCProperty	DebugInfo.h	/^    explicit DIObjCProperty(const MDNode *N) : DIDescriptor(N) { }$/;"	f	class:llvm::DIObjCProperty
DIObjCProperty	DebugInfo.h	/^  class DIObjCProperty : public DIDescriptor {$/;"	c	namespace:llvm
DIScope	DebugInfo.h	/^    explicit DIScope(const MDNode *N = 0) : DIDescriptor (N) {}$/;"	f	class:llvm::DIScope
DIScope	DebugInfo.h	/^  class DIScope : public DIDescriptor {$/;"	c	namespace:llvm
DISubprogram	DebugInfo.h	/^    explicit DISubprogram(const MDNode *N = 0) : DIScope(N) {}$/;"	f	class:llvm::DISubprogram
DISubprogram	DebugInfo.h	/^  class DISubprogram : public DIScope {$/;"	c	namespace:llvm
DISubrange	DebugInfo.h	/^    explicit DISubrange(const MDNode *N = 0) : DIDescriptor(N) {}$/;"	f	class:llvm::DISubrange
DISubrange	DebugInfo.h	/^  class DISubrange : public DIDescriptor {$/;"	c	namespace:llvm
DITemplateTypeParameter	DebugInfo.h	/^    explicit DITemplateTypeParameter(const MDNode *N = 0) : DIDescriptor(N) {}$/;"	f	class:llvm::DITemplateTypeParameter
DITemplateTypeParameter	DebugInfo.h	/^  class DITemplateTypeParameter : public DIDescriptor {$/;"	c	namespace:llvm
DITemplateValueParameter	DebugInfo.h	/^    explicit DITemplateValueParameter(const MDNode *N = 0) : DIDescriptor(N) {}$/;"	f	class:llvm::DITemplateValueParameter
DITemplateValueParameter	DebugInfo.h	/^  class DITemplateValueParameter : public DIDescriptor {$/;"	c	namespace:llvm
DIType	DebugInfo.h	/^    DIType(const MDNode *N, bool, bool) : DIScope(N) {}$/;"	f	class:llvm::DIType
DIType	DebugInfo.h	/^    explicit DIType() {}$/;"	f	class:llvm::DIType
DIType	DebugInfo.h	/^  class DIType : public DIScope {$/;"	c	namespace:llvm
DIV_F32	CodeGen/RuntimeLibcalls.h	/^    DIV_F32,$/;"	e	enum:llvm::RTLIB::Libcall
DIV_F64	CodeGen/RuntimeLibcalls.h	/^    DIV_F64,$/;"	e	enum:llvm::RTLIB::Libcall
DIV_F80	CodeGen/RuntimeLibcalls.h	/^    DIV_F80,$/;"	e	enum:llvm::RTLIB::Libcall
DIV_PPCF128	CodeGen/RuntimeLibcalls.h	/^    DIV_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
DIVariable	DebugInfo.h	/^    explicit DIVariable(const MDNode *N = 0)$/;"	f	class:llvm::DIVariable
DIVariable	DebugInfo.h	/^  class DIVariable : public DIDescriptor {$/;"	c	namespace:llvm
DK_Error	Support/SourceMgr.h	/^    DK_Error,$/;"	e	enum:llvm::SourceMgr::DiagKind
DK_Note	Support/SourceMgr.h	/^    DK_Note$/;"	e	enum:llvm::SourceMgr::DiagKind
DK_Warning	Support/SourceMgr.h	/^    DK_Warning,$/;"	e	enum:llvm::SourceMgr::DiagKind
DL	CodeGen/FastISel.h	/^    DebugLoc DL;$/;"	m	struct:llvm::FastISel::SavePoint
DL	CodeGen/FastISel.h	/^  DebugLoc DL;$/;"	m	class:llvm::FastISel
DL	Target/TargetLowering.h	/^    DebugLoc DL;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
DLLCharacteristics	Support/COFF.h	/^    uint16_t DLLCharacteristics;$/;"	m	struct:llvm::COFF::PEHeader
DLLCharacteristics	Support/COFF.h	/^  enum DLLCharacteristics {$/;"	g	namespace:llvm::COFF
DLLExportLinkage	GlobalValue.h	/^    DLLExportLinkage,   \/\/\/< Function to be accessible from DLL.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
DLLImportLinkage	GlobalValue.h	/^    DLLImportLinkage,   \/\/\/< Function to be imported from DLL$/;"	e	enum:llvm::GlobalValue::LinkageTypes
DOSHeader	Support/COFF.h	/^  struct DOSHeader {$/;"	s	namespace:llvm::COFF
DOT	Support/GraphWriter.h	/^      DOT,$/;"	e	enum:llvm::GraphProgram::Name
DOT	Support/GraphWriter.h	/^namespace DOT {  \/\/ Private functions...$/;"	n	namespace:llvm
DOTGraphTraits	Analysis/CFGPrinter.h	/^  DOTGraphTraits (bool isSimple=false) : DefaultDOTGraphTraits(isSimple) {}$/;"	f	struct:llvm::DOTGraphTraits
DOTGraphTraits	Analysis/CFGPrinter.h	/^struct DOTGraphTraits<const Function*> : public DefaultDOTGraphTraits {$/;"	s	namespace:llvm
DOTGraphTraits	Support/DOTGraphTraits.h	/^  DOTGraphTraits (bool simple=false) : DefaultDOTGraphTraits (simple) {}$/;"	f	struct:llvm::DOTGraphTraits
DOTGraphTraits	Support/DOTGraphTraits.h	/^struct DOTGraphTraits : public DefaultDOTGraphTraits {$/;"	s	namespace:llvm
DOTGraphTraitsPrinter	Analysis/DOTGraphTraitsPass.h	/^  DOTGraphTraitsPrinter(std::string GraphName, char &ID)$/;"	f	struct:llvm::DOTGraphTraitsPrinter
DOTGraphTraitsPrinter	Analysis/DOTGraphTraitsPass.h	/^struct DOTGraphTraitsPrinter : public FunctionPass {$/;"	s	namespace:llvm
DOTGraphTraitsViewer	Analysis/DOTGraphTraitsPass.h	/^  DOTGraphTraitsViewer(std::string GraphName, char &ID) : FunctionPass(ID) {$/;"	f	struct:llvm::DOTGraphTraitsViewer
DOTGraphTraitsViewer	Analysis/DOTGraphTraitsPass.h	/^struct DOTGraphTraitsViewer : public FunctionPass {$/;"	s	namespace:llvm
DOTTraits	Support/GraphWriter.h	/^  typedef DOTGraphTraits<GraphType>           DOTTraits;$/;"	t	class:llvm::GraphWriter
DS	Support/Solaris.h	21;"	d
DT	Analysis/Dominators.h	/^  DominatorTreeBase<BasicBlock>* DT;$/;"	m	class:llvm::DominatorTree
DT	Analysis/IVUsers.h	/^  DominatorTree *DT;$/;"	m	class:llvm::IVUsers
DT	Analysis/MemoryDependenceAnalysis.h	/^    DominatorTree *DT;$/;"	m	class:llvm::MemoryDependenceAnalysis
DT	Analysis/PostDominators.h	/^  DominatorTreeBase<BasicBlock>* DT;$/;"	m	struct:llvm::PostDominatorTree
DT	Analysis/RegionInfo.h	/^  DominatorTree *DT;$/;"	m	class:llvm::Region
DT	Analysis/RegionInfo.h	/^  DominatorTree *DT;$/;"	m	class:llvm::RegionInfo
DT	Analysis/ScalarEvolution.h	/^    DominatorTree *DT;$/;"	m	class:llvm::ScalarEvolution
DT	CodeGen/MachineDominators.h	/^  DominatorTreeBase<MachineBasicBlock>* DT;$/;"	m	class:llvm::MachineDominatorTree
DT	CodeGen/MachinePostDominators.h	/^  DominatorTreeBase<MachineBasicBlock> *DT;$/;"	m	struct:llvm::MachinePostDominatorTree
DT	Transforms/Utils/CodeExtractor.h	/^    DominatorTree *const DT;$/;"	m	class:llvm::CodeExtractor
DT_BIND_NOW	Support/ELF.h	/^  DT_BIND_NOW     = 24,       \/\/ Process all relocations before execution.$/;"	e	enum:llvm::ELF::__anon110
DT_DEBUG	Support/ELF.h	/^  DT_DEBUG        = 21,       \/\/ Reserved for debugger.$/;"	e	enum:llvm::ELF::__anon110
DT_ENCODING	Support/ELF.h	/^  DT_ENCODING     = 32,       \/\/ Values from here to DT_LOOS follow the rules$/;"	e	enum:llvm::ELF::__anon110
DT_FINI	Support/ELF.h	/^  DT_FINI         = 13,       \/\/ Address of termination function.$/;"	e	enum:llvm::ELF::__anon110
DT_FINI_ARRAY	Support/ELF.h	/^  DT_FINI_ARRAY   = 26,       \/\/ Pointer to array of termination functions.$/;"	e	enum:llvm::ELF::__anon110
DT_FINI_ARRAYSZ	Support/ELF.h	/^  DT_FINI_ARRAYSZ = 28,       \/\/ Size of DT_FINI_ARRAY.$/;"	e	enum:llvm::ELF::__anon110
DT_FLAGS	Support/ELF.h	/^  DT_FLAGS        = 30,       \/\/ Flags.$/;"	e	enum:llvm::ELF::__anon110
DT_FLAGS_1	Support/ELF.h	/^  DT_FLAGS_1      = 0X6FFFFFFB, \/\/ Flags_1.$/;"	e	enum:llvm::ELF::__anon110
DT_HASH	Support/ELF.h	/^  DT_HASH         = 4,        \/\/ Address of symbolic hash table.$/;"	e	enum:llvm::ELF::__anon110
DT_HIOS	Support/ELF.h	/^  DT_HIOS         = 0x6FFFFFFF, \/\/ End of environment specific tags.$/;"	e	enum:llvm::ELF::__anon110
DT_HIPROC	Support/ELF.h	/^  DT_HIPROC       = 0x7FFFFFFF, \/\/ End of processor specific tags.$/;"	e	enum:llvm::ELF::__anon110
DT_INIT	Support/ELF.h	/^  DT_INIT         = 12,       \/\/ Address of initialization function.$/;"	e	enum:llvm::ELF::__anon110
DT_INIT_ARRAY	Support/ELF.h	/^  DT_INIT_ARRAY   = 25,       \/\/ Pointer to array of initialization functions.$/;"	e	enum:llvm::ELF::__anon110
DT_INIT_ARRAYSZ	Support/ELF.h	/^  DT_INIT_ARRAYSZ = 27,       \/\/ Size of DT_INIT_ARRAY.$/;"	e	enum:llvm::ELF::__anon110
DT_JMPREL	Support/ELF.h	/^  DT_JMPREL       = 23,       \/\/ Address of relocations associated with PLT.$/;"	e	enum:llvm::ELF::__anon110
DT_LOOS	Support/ELF.h	/^  DT_LOOS         = 0x60000000, \/\/ Start of environment specific tags.$/;"	e	enum:llvm::ELF::__anon110
DT_LOPROC	Support/ELF.h	/^  DT_LOPROC       = 0x70000000, \/\/ Start of processor specific tags.$/;"	e	enum:llvm::ELF::__anon110
DT_NEEDED	Support/ELF.h	/^  DT_NEEDED       = 1,        \/\/ String table offset of needed library.$/;"	e	enum:llvm::ELF::__anon110
DT_NULL	Support/ELF.h	/^  DT_NULL         = 0,        \/\/ Marks end of dynamic array.$/;"	e	enum:llvm::ELF::__anon110
DT_PLTGOT	Support/ELF.h	/^  DT_PLTGOT       = 3,        \/\/ Address associated with linkage table.$/;"	e	enum:llvm::ELF::__anon110
DT_PLTREL	Support/ELF.h	/^  DT_PLTREL       = 20,       \/\/ Type of relocation entry used for linking.$/;"	e	enum:llvm::ELF::__anon110
DT_PLTRELSZ	Support/ELF.h	/^  DT_PLTRELSZ     = 2,        \/\/ Size of relocation entries in PLT.$/;"	e	enum:llvm::ELF::__anon110
DT_PREINIT_ARRAY	Support/ELF.h	/^  DT_PREINIT_ARRAY = 32,      \/\/ Pointer to array of preinit functions.$/;"	e	enum:llvm::ELF::__anon110
DT_PREINIT_ARRAYSZ	Support/ELF.h	/^  DT_PREINIT_ARRAYSZ = 33,    \/\/ Size of the DT_PREINIT_ARRAY array.$/;"	e	enum:llvm::ELF::__anon110
DT_REL	Support/ELF.h	/^  DT_REL          = 17,       \/\/ Address of relocation table (Rel entries).$/;"	e	enum:llvm::ELF::__anon110
DT_RELA	Support/ELF.h	/^  DT_RELA         = 7,        \/\/ Address of relocation table (Rela entries).$/;"	e	enum:llvm::ELF::__anon110
DT_RELACOUNT	Support/ELF.h	/^  DT_RELACOUNT    = 0x6FFFFFF9, \/\/ ELF32_Rela count.$/;"	e	enum:llvm::ELF::__anon110
DT_RELAENT	Support/ELF.h	/^  DT_RELAENT      = 9,        \/\/ Size of a Rela relocation entry.$/;"	e	enum:llvm::ELF::__anon110
DT_RELASZ	Support/ELF.h	/^  DT_RELASZ       = 8,        \/\/ Size of Rela relocation table.$/;"	e	enum:llvm::ELF::__anon110
DT_RELCOUNT	Support/ELF.h	/^  DT_RELCOUNT     = 0x6FFFFFFA, \/\/ ELF32_Rel count.$/;"	e	enum:llvm::ELF::__anon110
DT_RELENT	Support/ELF.h	/^  DT_RELENT       = 19,       \/\/ Size of a Rel relocation entry.$/;"	e	enum:llvm::ELF::__anon110
DT_RELSZ	Support/ELF.h	/^  DT_RELSZ        = 18,       \/\/ Size of Rel relocation table.$/;"	e	enum:llvm::ELF::__anon110
DT_RPATH	Support/ELF.h	/^  DT_RPATH        = 15,       \/\/ String table offset of library search path.$/;"	e	enum:llvm::ELF::__anon110
DT_RUNPATH	Support/ELF.h	/^  DT_RUNPATH      = 29,       \/\/ String table offset of lib search path.$/;"	e	enum:llvm::ELF::__anon110
DT_SONAME	Support/ELF.h	/^  DT_SONAME       = 14,       \/\/ String table offset of a shared objects name.$/;"	e	enum:llvm::ELF::__anon110
DT_STRSZ	Support/ELF.h	/^  DT_STRSZ        = 10,       \/\/ Total size of the string table.$/;"	e	enum:llvm::ELF::__anon110
DT_STRTAB	Support/ELF.h	/^  DT_STRTAB       = 5,        \/\/ Address of dynamic string table.$/;"	e	enum:llvm::ELF::__anon110
DT_SYMBOLIC	Support/ELF.h	/^  DT_SYMBOLIC     = 16,       \/\/ Changes symbol resolution algorithm.$/;"	e	enum:llvm::ELF::__anon110
DT_SYMENT	Support/ELF.h	/^  DT_SYMENT       = 11,       \/\/ Size of a symbol table entry.$/;"	e	enum:llvm::ELF::__anon110
DT_SYMTAB	Support/ELF.h	/^  DT_SYMTAB       = 6,        \/\/ Address of dynamic symbol table.$/;"	e	enum:llvm::ELF::__anon110
DT_TEXTREL	Support/ELF.h	/^  DT_TEXTREL      = 22,       \/\/ Relocations exist for non-writable segments.$/;"	e	enum:llvm::ELF::__anon110
DT_VERDEF	Support/ELF.h	/^  DT_VERDEF       = 0X6FFFFFFC, \/\/ The address of the version definition table.$/;"	e	enum:llvm::ELF::__anon110
DT_VERDEFNUM	Support/ELF.h	/^  DT_VERDEFNUM    = 0X6FFFFFFD, \/\/ The number of entries in DT_VERDEF.$/;"	e	enum:llvm::ELF::__anon110
DT_VERNEED	Support/ELF.h	/^  DT_VERNEED      = 0X6FFFFFFE, \/\/ The address of the version Dependency table.$/;"	e	enum:llvm::ELF::__anon110
DT_VERNEEDNUM	Support/ELF.h	/^  DT_VERNEEDNUM   = 0X6FFFFFFF  \/\/ The number of entries in DT_VERNEED.$/;"	e	enum:llvm::ELF::__anon110
DTraits	Support/GraphWriter.h	/^  DOTTraits DTraits;$/;"	m	class:llvm::GraphWriter
DV	Analysis/DependenceAnalysis.h	/^    DVEntry *DV;$/;"	m	class:llvm::FullDependence
DVEntry	Analysis/DependenceAnalysis.h	/^      DVEntry() : Direction(ALL), Scalar(true), PeelFirst(false),$/;"	f	struct:llvm::Dependence::DVEntry
DVEntry	Analysis/DependenceAnalysis.h	/^    struct DVEntry {$/;"	s	class:llvm::Dependence
DWARF2_FLAG_BASIC_BLOCK	MC/MCDwarf.h	94;"	d
DWARF2_FLAG_EPILOGUE_BEGIN	MC/MCDwarf.h	96;"	d
DWARF2_FLAG_IS_STMT	MC/MCDwarf.h	93;"	d
DWARF2_FLAG_PROLOGUE_END	MC/MCDwarf.h	95;"	d
DWARF2_LINE_DEFAULT_IS_STMT	MC/MCDwarf.h	91;"	d
DWARF_VERSION	Support/Dwarf.h	/^  DWARF_VERSION = 2,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ACCESS_private	Support/Dwarf.h	/^  DW_ACCESS_private = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ACCESS_protected	Support/Dwarf.h	/^  DW_ACCESS_protected = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ACCESS_public	Support/Dwarf.h	/^  DW_ACCESS_public = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_assign	Support/Dwarf.h	/^  DW_APPLE_PROPERTY_assign = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_copy	Support/Dwarf.h	/^  DW_APPLE_PROPERTY_copy = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_nonatomic	Support/Dwarf.h	/^  DW_APPLE_PROPERTY_nonatomic = 0x20$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_readonly	Support/Dwarf.h	/^  DW_APPLE_PROPERTY_readonly = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_readwrite	Support/Dwarf.h	/^  DW_APPLE_PROPERTY_readwrite = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_retain	Support/Dwarf.h	/^  DW_APPLE_PROPERTY_retain = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_UTF	Support/Dwarf.h	/^  DW_ATE_UTF = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_address	Support/Dwarf.h	/^  DW_ATE_address = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_boolean	Support/Dwarf.h	/^  DW_ATE_boolean = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_complex_float	Support/Dwarf.h	/^  DW_ATE_complex_float = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_decimal_float	Support/Dwarf.h	/^  DW_ATE_decimal_float = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_edited	Support/Dwarf.h	/^  DW_ATE_edited = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_float	Support/Dwarf.h	/^  DW_ATE_float = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_hi_user	Support/Dwarf.h	/^  DW_ATE_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_imaginary_float	Support/Dwarf.h	/^  DW_ATE_imaginary_float = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_lo_user	Support/Dwarf.h	/^  DW_ATE_lo_user = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_numeric_string	Support/Dwarf.h	/^  DW_ATE_numeric_string = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_packed_decimal	Support/Dwarf.h	/^  DW_ATE_packed_decimal = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_signed	Support/Dwarf.h	/^  DW_ATE_signed = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_signed_char	Support/Dwarf.h	/^  DW_ATE_signed_char = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_signed_fixed	Support/Dwarf.h	/^  DW_ATE_signed_fixed = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_unsigned	Support/Dwarf.h	/^  DW_ATE_unsigned = 0x07,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_unsigned_char	Support/Dwarf.h	/^  DW_ATE_unsigned_char = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_unsigned_fixed	Support/Dwarf.h	/^  DW_ATE_unsigned_fixed = 0x0e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_block	Support/Dwarf.h	/^  DW_AT_APPLE_block = 0x3fe4,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_flags	Support/Dwarf.h	/^  DW_AT_APPLE_flags = 0x3fe2,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_isa	Support/Dwarf.h	/^  DW_AT_APPLE_isa = 0x3fe3,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_major_runtime_vers	Support/Dwarf.h	/^  DW_AT_APPLE_major_runtime_vers = 0x3fe5,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_objc_complete_type	Support/Dwarf.h	/^  DW_AT_APPLE_objc_complete_type = 0x3fec,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_omit_frame_ptr	Support/Dwarf.h	/^  DW_AT_APPLE_omit_frame_ptr = 0x3fe7,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_optimized	Support/Dwarf.h	/^  DW_AT_APPLE_optimized = 0x3fe1,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property	Support/Dwarf.h	/^  DW_AT_APPLE_property = 0x3fed,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property_attribute	Support/Dwarf.h	/^  DW_AT_APPLE_property_attribute = 0x3feb,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property_getter	Support/Dwarf.h	/^  DW_AT_APPLE_property_getter = 0x3fe9,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property_name	Support/Dwarf.h	/^  DW_AT_APPLE_property_name = 0x3fe8,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property_setter	Support/Dwarf.h	/^  DW_AT_APPLE_property_setter = 0x3fea,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_runtime_class	Support/Dwarf.h	/^  DW_AT_APPLE_runtime_class = 0x3fe6,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_GNU_template_name	Support/Dwarf.h	/^  DW_AT_GNU_template_name = 0x2110,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_GNU_vector	Support/Dwarf.h	/^  DW_AT_GNU_vector = 0x2107,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_abstract_name	Support/Dwarf.h	/^  DW_AT_MIPS_abstract_name = 0x2009,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_allocatable_dopetype	Support/Dwarf.h	/^  DW_AT_MIPS_allocatable_dopetype = 0x200f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_assumed_shape_dopetype	Support/Dwarf.h	/^  DW_AT_MIPS_assumed_shape_dopetype = 0x2010,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_assumed_size	Support/Dwarf.h	/^  DW_AT_MIPS_assumed_size = 0x2011,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_clone_origin	Support/Dwarf.h	/^  DW_AT_MIPS_clone_origin = 0x200a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_epilog_begin	Support/Dwarf.h	/^  DW_AT_MIPS_epilog_begin = 0x2004,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_has_inlines	Support/Dwarf.h	/^  DW_AT_MIPS_has_inlines = 0x200b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_linkage_name	Support/Dwarf.h	/^  DW_AT_MIPS_linkage_name = 0x2007,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_loop_begin	Support/Dwarf.h	/^  DW_AT_MIPS_loop_begin = 0x2002,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_loop_unroll_factor	Support/Dwarf.h	/^  DW_AT_MIPS_loop_unroll_factor = 0x2005,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_ptr_dopetype	Support/Dwarf.h	/^  DW_AT_MIPS_ptr_dopetype = 0x200e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_software_pipeline_depth	Support/Dwarf.h	/^  DW_AT_MIPS_software_pipeline_depth = 0x2006,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_stride	Support/Dwarf.h	/^  DW_AT_MIPS_stride = 0x2008,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_stride_byte	Support/Dwarf.h	/^  DW_AT_MIPS_stride_byte = 0x200c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_stride_elem	Support/Dwarf.h	/^  DW_AT_MIPS_stride_elem = 0x200d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_tail_loop_begin	Support/Dwarf.h	/^  DW_AT_MIPS_tail_loop_begin = 0x2003,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_abstract_origin	Support/Dwarf.h	/^  DW_AT_abstract_origin = 0x31,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_accessibility	Support/Dwarf.h	/^  DW_AT_accessibility = 0x32,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_address_class	Support/Dwarf.h	/^  DW_AT_address_class = 0x33,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_allocated	Support/Dwarf.h	/^  DW_AT_allocated = 0x4e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_artificial	Support/Dwarf.h	/^  DW_AT_artificial = 0x34,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_associated	Support/Dwarf.h	/^  DW_AT_associated = 0x4f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_base_types	Support/Dwarf.h	/^  DW_AT_base_types = 0x35,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_binary_scale	Support/Dwarf.h	/^  DW_AT_binary_scale = 0x5b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_bit_offset	Support/Dwarf.h	/^  DW_AT_bit_offset = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_bit_size	Support/Dwarf.h	/^  DW_AT_bit_size = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_bit_stride	Support/Dwarf.h	/^  DW_AT_bit_stride = 0x2e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_body_begin	Support/Dwarf.h	/^  DW_AT_body_begin = 0x2105,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_body_end	Support/Dwarf.h	/^  DW_AT_body_end = 0x2106,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_byte_size	Support/Dwarf.h	/^  DW_AT_byte_size = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_byte_stride	Support/Dwarf.h	/^  DW_AT_byte_stride = 0x51,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_call_column	Support/Dwarf.h	/^  DW_AT_call_column = 0x57,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_call_file	Support/Dwarf.h	/^  DW_AT_call_file = 0x58,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_call_line	Support/Dwarf.h	/^  DW_AT_call_line = 0x59,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_calling_convention	Support/Dwarf.h	/^  DW_AT_calling_convention = 0x36,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_common_reference	Support/Dwarf.h	/^  DW_AT_common_reference = 0x1a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_comp_dir	Support/Dwarf.h	/^  DW_AT_comp_dir = 0x1b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_const_expr	Support/Dwarf.h	/^  DW_AT_const_expr = 0x6c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_const_value	Support/Dwarf.h	/^  DW_AT_const_value = 0x1c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_containing_type	Support/Dwarf.h	/^  DW_AT_containing_type = 0x1d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_count	Support/Dwarf.h	/^  DW_AT_count = 0x37,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_data_bit_offset	Support/Dwarf.h	/^  DW_AT_data_bit_offset = 0x6b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_data_location	Support/Dwarf.h	/^  DW_AT_data_location = 0x50,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_data_member_location	Support/Dwarf.h	/^  DW_AT_data_member_location = 0x38,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decimal_scale	Support/Dwarf.h	/^  DW_AT_decimal_scale = 0x5c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decimal_sign	Support/Dwarf.h	/^  DW_AT_decimal_sign = 0x5e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decl_column	Support/Dwarf.h	/^  DW_AT_decl_column = 0x39,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decl_file	Support/Dwarf.h	/^  DW_AT_decl_file = 0x3a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decl_line	Support/Dwarf.h	/^  DW_AT_decl_line = 0x3b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_declaration	Support/Dwarf.h	/^  DW_AT_declaration = 0x3c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_default_value	Support/Dwarf.h	/^  DW_AT_default_value = 0x1e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_description	Support/Dwarf.h	/^  DW_AT_description = 0x5a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_digit_count	Support/Dwarf.h	/^  DW_AT_digit_count = 0x5f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_discr	Support/Dwarf.h	/^  DW_AT_discr = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_discr_list	Support/Dwarf.h	/^  DW_AT_discr_list = 0x3d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_discr_value	Support/Dwarf.h	/^  DW_AT_discr_value = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_elemental	Support/Dwarf.h	/^  DW_AT_elemental = 0x66,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_encoding	Support/Dwarf.h	/^  DW_AT_encoding = 0x3e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_endianity	Support/Dwarf.h	/^  DW_AT_endianity = 0x65,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_entry_pc	Support/Dwarf.h	/^  DW_AT_entry_pc = 0x52,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_enum_class	Support/Dwarf.h	/^  DW_AT_enum_class = 0x6d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_explicit	Support/Dwarf.h	/^  DW_AT_explicit = 0x63,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_extension	Support/Dwarf.h	/^  DW_AT_extension = 0x54,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_external	Support/Dwarf.h	/^  DW_AT_external = 0x3f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_frame_base	Support/Dwarf.h	/^  DW_AT_frame_base = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_friend	Support/Dwarf.h	/^  DW_AT_friend = 0x41,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_hi_user	Support/Dwarf.h	/^  DW_AT_hi_user = 0x3fff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_high_pc	Support/Dwarf.h	/^  DW_AT_high_pc = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_identifier_case	Support/Dwarf.h	/^  DW_AT_identifier_case = 0x42,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_import	Support/Dwarf.h	/^  DW_AT_import = 0x18,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_inline	Support/Dwarf.h	/^  DW_AT_inline = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_is_optional	Support/Dwarf.h	/^  DW_AT_is_optional = 0x21,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_language	Support/Dwarf.h	/^  DW_AT_language = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_linkage_name	Support/Dwarf.h	/^  DW_AT_linkage_name = 0x6e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_lo_user	Support/Dwarf.h	/^  DW_AT_lo_user = 0x2000,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_location	Support/Dwarf.h	/^  DW_AT_location = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_low_pc	Support/Dwarf.h	/^  DW_AT_low_pc = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_lower_bound	Support/Dwarf.h	/^  DW_AT_lower_bound = 0x22,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_mac_info	Support/Dwarf.h	/^  DW_AT_mac_info = 0x2103,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_macro_info	Support/Dwarf.h	/^  DW_AT_macro_info = 0x43,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_main_subprogram	Support/Dwarf.h	/^  DW_AT_main_subprogram = 0x6a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_mutable	Support/Dwarf.h	/^  DW_AT_mutable = 0x61,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_name	Support/Dwarf.h	/^  DW_AT_name = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_namelist_item	Support/Dwarf.h	/^  DW_AT_namelist_item = 0x44,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_object_pointer	Support/Dwarf.h	/^  DW_AT_object_pointer = 0x64,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_ordering	Support/Dwarf.h	/^  DW_AT_ordering = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_picture_string	Support/Dwarf.h	/^  DW_AT_picture_string = 0x60,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_priority	Support/Dwarf.h	/^  DW_AT_priority = 0x45,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_producer	Support/Dwarf.h	/^  DW_AT_producer = 0x25,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_prototyped	Support/Dwarf.h	/^  DW_AT_prototyped = 0x27,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_pure	Support/Dwarf.h	/^  DW_AT_pure = 0x67,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_ranges	Support/Dwarf.h	/^  DW_AT_ranges = 0x55,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_recursive	Support/Dwarf.h	/^  DW_AT_recursive = 0x68,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_return_addr	Support/Dwarf.h	/^  DW_AT_return_addr = 0x2a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_segment	Support/Dwarf.h	/^  DW_AT_segment = 0x46,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_sf_names	Support/Dwarf.h	/^  DW_AT_sf_names = 0x2101,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_sibling	Support/Dwarf.h	/^  DW_AT_sibling = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_signature	Support/Dwarf.h	/^  DW_AT_signature = 0x69,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_small	Support/Dwarf.h	/^  DW_AT_small = 0x5d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_specification	Support/Dwarf.h	/^  DW_AT_specification = 0x47,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_src_coords	Support/Dwarf.h	/^  DW_AT_src_coords = 0x2104,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_src_info	Support/Dwarf.h	/^  DW_AT_src_info = 0x2102,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_start_scope	Support/Dwarf.h	/^  DW_AT_start_scope = 0x2c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_static_link	Support/Dwarf.h	/^  DW_AT_static_link = 0x48,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_stmt_list	Support/Dwarf.h	/^  DW_AT_stmt_list = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_string_length	Support/Dwarf.h	/^  DW_AT_string_length = 0x19,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_threads_scaled	Support/Dwarf.h	/^  DW_AT_threads_scaled = 0x62,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_trampoline	Support/Dwarf.h	/^  DW_AT_trampoline = 0x56,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_type	Support/Dwarf.h	/^  DW_AT_type = 0x49,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_upper_bound	Support/Dwarf.h	/^  DW_AT_upper_bound = 0x2f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_use_UTF8	Support/Dwarf.h	/^  DW_AT_use_UTF8 = 0x53,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_use_location	Support/Dwarf.h	/^  DW_AT_use_location = 0x4a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_variable_parameter	Support/Dwarf.h	/^  DW_AT_variable_parameter = 0x4b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_virtuality	Support/Dwarf.h	/^  DW_AT_virtuality = 0x4c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_visibility	Support/Dwarf.h	/^  DW_AT_visibility = 0x17,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_vtable_elem_location	Support/Dwarf.h	/^  DW_AT_vtable_elem_location = 0x4d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_hi_user	Support/Dwarf.h	/^  DW_CC_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_lo_user	Support/Dwarf.h	/^  DW_CC_lo_user = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_nocall	Support/Dwarf.h	/^  DW_CC_nocall = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_normal	Support/Dwarf.h	/^  DW_CC_normal = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_program	Support/Dwarf.h	/^  DW_CC_program = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_GNU_args_size	Support/Dwarf.h	/^  DW_CFA_GNU_args_size = 0x2e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_GNU_window_save	Support/Dwarf.h	/^  DW_CFA_GNU_window_save = 0x2d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_MIPS_advance_loc8	Support/Dwarf.h	/^  DW_CFA_MIPS_advance_loc8 = 0x1d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_advance_loc	Support/Dwarf.h	/^  DW_CFA_advance_loc = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_advance_loc1	Support/Dwarf.h	/^  DW_CFA_advance_loc1 = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_advance_loc2	Support/Dwarf.h	/^  DW_CFA_advance_loc2 = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_advance_loc4	Support/Dwarf.h	/^  DW_CFA_advance_loc4 = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa	Support/Dwarf.h	/^  DW_CFA_def_cfa = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_expression	Support/Dwarf.h	/^  DW_CFA_def_cfa_expression = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_offset	Support/Dwarf.h	/^  DW_CFA_def_cfa_offset = 0x0e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_offset_sf	Support/Dwarf.h	/^  DW_CFA_def_cfa_offset_sf = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_register	Support/Dwarf.h	/^  DW_CFA_def_cfa_register = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_sf	Support/Dwarf.h	/^  DW_CFA_def_cfa_sf = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_expression	Support/Dwarf.h	/^  DW_CFA_expression = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_extended	Support/Dwarf.h	/^  DW_CFA_extended = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_hi_user	Support/Dwarf.h	/^  DW_CFA_hi_user = 0x3f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_lo_user	Support/Dwarf.h	/^  DW_CFA_lo_user = 0x1c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_nop	Support/Dwarf.h	/^  DW_CFA_nop = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_offset	Support/Dwarf.h	/^  DW_CFA_offset = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_offset_extended	Support/Dwarf.h	/^  DW_CFA_offset_extended = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_offset_extended_sf	Support/Dwarf.h	/^  DW_CFA_offset_extended_sf = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_register	Support/Dwarf.h	/^  DW_CFA_register = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_remember_state	Support/Dwarf.h	/^  DW_CFA_remember_state = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_restore	Support/Dwarf.h	/^  DW_CFA_restore = 0xc0,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_restore_extended	Support/Dwarf.h	/^  DW_CFA_restore_extended = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_restore_state	Support/Dwarf.h	/^  DW_CFA_restore_state = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_same_value	Support/Dwarf.h	/^  DW_CFA_same_value = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_set_loc	Support/Dwarf.h	/^  DW_CFA_set_loc = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_undefined	Support/Dwarf.h	/^  DW_CFA_undefined = 0x07,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_val_expression	Support/Dwarf.h	/^  DW_CFA_val_expression = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_val_offset	Support/Dwarf.h	/^  DW_CFA_val_offset = 0x14,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_val_offset_sf	Support/Dwarf.h	/^  DW_CFA_val_offset_sf = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CHILDREN_no	Support/Dwarf.h	/^  DW_CHILDREN_no = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CHILDREN_yes	Support/Dwarf.h	/^  DW_CHILDREN_yes = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CIE_ID	Support/Dwarf.h	/^  DW_CIE_ID       = 0xffffffff          \/\/ Common frame information mark.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_CIE_VERSION	Support/Dwarf.h	/^  DW_CIE_VERSION = 1,                   \/\/ Common frame information version.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_DSC_label	Support/Dwarf.h	/^  DW_DSC_label = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DSC_range	Support/Dwarf.h	/^  DW_DSC_range = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_leading_overpunch	Support/Dwarf.h	/^  DW_DS_leading_overpunch = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_leading_separate	Support/Dwarf.h	/^  DW_DS_leading_separate = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_trailing_overpunch	Support/Dwarf.h	/^  DW_DS_trailing_overpunch = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_trailing_separate	Support/Dwarf.h	/^  DW_DS_trailing_separate = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_unsigned	Support/Dwarf.h	/^  DW_DS_unsigned = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_absptr	Support/Dwarf.h	/^  DW_EH_PE_absptr = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_aligned	Support/Dwarf.h	/^  DW_EH_PE_aligned = 0x50,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_datarel	Support/Dwarf.h	/^  DW_EH_PE_datarel = 0x30,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_funcrel	Support/Dwarf.h	/^  DW_EH_PE_funcrel = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_indirect	Support/Dwarf.h	/^  DW_EH_PE_indirect = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_omit	Support/Dwarf.h	/^  DW_EH_PE_omit = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_pcrel	Support/Dwarf.h	/^  DW_EH_PE_pcrel = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_sdata2	Support/Dwarf.h	/^  DW_EH_PE_sdata2 = 0x0A,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_sdata4	Support/Dwarf.h	/^  DW_EH_PE_sdata4 = 0x0B,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_sdata8	Support/Dwarf.h	/^  DW_EH_PE_sdata8 = 0x0C,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_signed	Support/Dwarf.h	/^  DW_EH_PE_signed = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_sleb128	Support/Dwarf.h	/^  DW_EH_PE_sleb128 = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_textrel	Support/Dwarf.h	/^  DW_EH_PE_textrel = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_udata2	Support/Dwarf.h	/^  DW_EH_PE_udata2 = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_udata4	Support/Dwarf.h	/^  DW_EH_PE_udata4 = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_udata8	Support/Dwarf.h	/^  DW_EH_PE_udata8 = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_uleb128	Support/Dwarf.h	/^  DW_EH_PE_uleb128 = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_big	Support/Dwarf.h	/^  DW_END_big = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_default	Support/Dwarf.h	/^  DW_END_default = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_hi_user	Support/Dwarf.h	/^  DW_END_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_little	Support/Dwarf.h	/^  DW_END_little = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_lo_user	Support/Dwarf.h	/^  DW_END_lo_user = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_addr	Support/Dwarf.h	/^  DW_FORM_addr = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_block	Support/Dwarf.h	/^  DW_FORM_block = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_block1	Support/Dwarf.h	/^  DW_FORM_block1 = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_block2	Support/Dwarf.h	/^  DW_FORM_block2 = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_block4	Support/Dwarf.h	/^  DW_FORM_block4 = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_data1	Support/Dwarf.h	/^  DW_FORM_data1 = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_data2	Support/Dwarf.h	/^  DW_FORM_data2 = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_data4	Support/Dwarf.h	/^  DW_FORM_data4 = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_data8	Support/Dwarf.h	/^  DW_FORM_data8 = 0x07,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_exprloc	Support/Dwarf.h	/^  DW_FORM_exprloc = 0x18,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_flag	Support/Dwarf.h	/^  DW_FORM_flag = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_flag_present	Support/Dwarf.h	/^  DW_FORM_flag_present = 0x19,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_indirect	Support/Dwarf.h	/^  DW_FORM_indirect = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref1	Support/Dwarf.h	/^  DW_FORM_ref1 = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref2	Support/Dwarf.h	/^  DW_FORM_ref2 = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref4	Support/Dwarf.h	/^  DW_FORM_ref4 = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref8	Support/Dwarf.h	/^  DW_FORM_ref8 = 0x14,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref_addr	Support/Dwarf.h	/^  DW_FORM_ref_addr = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref_sig8	Support/Dwarf.h	/^  DW_FORM_ref_sig8 = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref_udata	Support/Dwarf.h	/^  DW_FORM_ref_udata = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_sdata	Support/Dwarf.h	/^  DW_FORM_sdata = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_sec_offset	Support/Dwarf.h	/^  DW_FORM_sec_offset = 0x17,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_string	Support/Dwarf.h	/^  DW_FORM_string = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_strp	Support/Dwarf.h	/^  DW_FORM_strp = 0x0e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_udata	Support/Dwarf.h	/^  DW_FORM_udata = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ID_case_insensitive	Support/Dwarf.h	/^  DW_ID_case_insensitive = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ID_case_sensitive	Support/Dwarf.h	/^  DW_ID_case_sensitive = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ID_down_case	Support/Dwarf.h	/^  DW_ID_down_case = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ID_up_case	Support/Dwarf.h	/^  DW_ID_up_case = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_INL_declared_inlined	Support/Dwarf.h	/^  DW_INL_declared_inlined = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_INL_declared_not_inlined	Support/Dwarf.h	/^  DW_INL_declared_not_inlined = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_INL_inlined	Support/Dwarf.h	/^  DW_INL_inlined = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_INL_not_inlined	Support/Dwarf.h	/^  DW_INL_not_inlined = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Ada83	Support/Dwarf.h	/^  DW_LANG_Ada83 = 0x0003,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Ada95	Support/Dwarf.h	/^  DW_LANG_Ada95 = 0x000d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_C	Support/Dwarf.h	/^  DW_LANG_C = 0x0002,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_C89	Support/Dwarf.h	/^  DW_LANG_C89 = 0x0001,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_C99	Support/Dwarf.h	/^  DW_LANG_C99 = 0x000c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_C_plus_plus	Support/Dwarf.h	/^  DW_LANG_C_plus_plus = 0x0004,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Cobol74	Support/Dwarf.h	/^  DW_LANG_Cobol74 = 0x0005,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Cobol85	Support/Dwarf.h	/^  DW_LANG_Cobol85 = 0x0006,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_D	Support/Dwarf.h	/^  DW_LANG_D = 0x0013,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Fortran77	Support/Dwarf.h	/^  DW_LANG_Fortran77 = 0x0007,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Fortran90	Support/Dwarf.h	/^  DW_LANG_Fortran90 = 0x0008,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Fortran95	Support/Dwarf.h	/^  DW_LANG_Fortran95 = 0x000e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Java	Support/Dwarf.h	/^  DW_LANG_Java = 0x000b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Mips_Assembler	Support/Dwarf.h	/^  DW_LANG_Mips_Assembler = 0x8001,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Modula2	Support/Dwarf.h	/^  DW_LANG_Modula2 = 0x000a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_ObjC	Support/Dwarf.h	/^  DW_LANG_ObjC = 0x0010,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_ObjC_plus_plus	Support/Dwarf.h	/^  DW_LANG_ObjC_plus_plus = 0x0011,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_PLI	Support/Dwarf.h	/^  DW_LANG_PLI = 0x000f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Pascal83	Support/Dwarf.h	/^  DW_LANG_Pascal83 = 0x0009,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Python	Support/Dwarf.h	/^  DW_LANG_Python = 0x0014,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_UPC	Support/Dwarf.h	/^  DW_LANG_UPC = 0x0012,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_hi_user	Support/Dwarf.h	/^  DW_LANG_hi_user = 0xffff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_lo_user	Support/Dwarf.h	/^  DW_LANG_lo_user = 0x8000,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_define_file	Support/Dwarf.h	/^  DW_LNE_define_file = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_end_sequence	Support/Dwarf.h	/^  DW_LNE_end_sequence = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_hi_user	Support/Dwarf.h	/^  DW_LNE_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_lo_user	Support/Dwarf.h	/^  DW_LNE_lo_user = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_set_address	Support/Dwarf.h	/^  DW_LNE_set_address = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_set_discriminator	Support/Dwarf.h	/^  DW_LNE_set_discriminator = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_advance_line	Support/Dwarf.h	/^  DW_LNS_advance_line = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_advance_pc	Support/Dwarf.h	/^  DW_LNS_advance_pc = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_const_add_pc	Support/Dwarf.h	/^  DW_LNS_const_add_pc = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_copy	Support/Dwarf.h	/^  DW_LNS_copy = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_extended_op	Support/Dwarf.h	/^  DW_LNS_extended_op = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_fixed_advance_pc	Support/Dwarf.h	/^  DW_LNS_fixed_advance_pc = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_negate_stmt	Support/Dwarf.h	/^  DW_LNS_negate_stmt = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_basic_block	Support/Dwarf.h	/^  DW_LNS_set_basic_block = 0x07,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_column	Support/Dwarf.h	/^  DW_LNS_set_column = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_epilogue_begin	Support/Dwarf.h	/^  DW_LNS_set_epilogue_begin = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_file	Support/Dwarf.h	/^  DW_LNS_set_file = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_isa	Support/Dwarf.h	/^  DW_LNS_set_isa = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_prologue_end	Support/Dwarf.h	/^  DW_LNS_set_prologue_end = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_define	Support/Dwarf.h	/^  DW_MACINFO_define = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_end_file	Support/Dwarf.h	/^  DW_MACINFO_end_file = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_start_file	Support/Dwarf.h	/^  DW_MACINFO_start_file = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_undef	Support/Dwarf.h	/^  DW_MACINFO_undef = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_vendor_ext	Support/Dwarf.h	/^  DW_MACINFO_vendor_ext = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_abs	Support/Dwarf.h	/^  DW_OP_abs = 0x19,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_addr	Support/Dwarf.h	/^  DW_OP_addr = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_and	Support/Dwarf.h	/^  DW_OP_and = 0x1a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_bit_piece	Support/Dwarf.h	/^  DW_OP_bit_piece = 0x9d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_bra	Support/Dwarf.h	/^  DW_OP_bra = 0x28,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg0	Support/Dwarf.h	/^  DW_OP_breg0 = 0x70,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg1	Support/Dwarf.h	/^  DW_OP_breg1 = 0x71,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg10	Support/Dwarf.h	/^  DW_OP_breg10 = 0x7a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg11	Support/Dwarf.h	/^  DW_OP_breg11 = 0x7b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg12	Support/Dwarf.h	/^  DW_OP_breg12 = 0x7c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg13	Support/Dwarf.h	/^  DW_OP_breg13 = 0x7d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg14	Support/Dwarf.h	/^  DW_OP_breg14 = 0x7e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg15	Support/Dwarf.h	/^  DW_OP_breg15 = 0x7f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg16	Support/Dwarf.h	/^  DW_OP_breg16 = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg17	Support/Dwarf.h	/^  DW_OP_breg17 = 0x81,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg18	Support/Dwarf.h	/^  DW_OP_breg18 = 0x82,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg19	Support/Dwarf.h	/^  DW_OP_breg19 = 0x83,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg2	Support/Dwarf.h	/^  DW_OP_breg2 = 0x72,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg20	Support/Dwarf.h	/^  DW_OP_breg20 = 0x84,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg21	Support/Dwarf.h	/^  DW_OP_breg21 = 0x85,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg22	Support/Dwarf.h	/^  DW_OP_breg22 = 0x86,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg23	Support/Dwarf.h	/^  DW_OP_breg23 = 0x87,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg24	Support/Dwarf.h	/^  DW_OP_breg24 = 0x88,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg25	Support/Dwarf.h	/^  DW_OP_breg25 = 0x89,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg26	Support/Dwarf.h	/^  DW_OP_breg26 = 0x8a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg27	Support/Dwarf.h	/^  DW_OP_breg27 = 0x8b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg28	Support/Dwarf.h	/^  DW_OP_breg28 = 0x8c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg29	Support/Dwarf.h	/^  DW_OP_breg29 = 0x8d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg3	Support/Dwarf.h	/^  DW_OP_breg3 = 0x73,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg30	Support/Dwarf.h	/^  DW_OP_breg30 = 0x8e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg31	Support/Dwarf.h	/^  DW_OP_breg31 = 0x8f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg4	Support/Dwarf.h	/^  DW_OP_breg4 = 0x74,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg5	Support/Dwarf.h	/^  DW_OP_breg5 = 0x75,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg6	Support/Dwarf.h	/^  DW_OP_breg6 = 0x76,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg7	Support/Dwarf.h	/^  DW_OP_breg7 = 0x77,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg8	Support/Dwarf.h	/^  DW_OP_breg8 = 0x78,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg9	Support/Dwarf.h	/^  DW_OP_breg9 = 0x79,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_bregx	Support/Dwarf.h	/^  DW_OP_bregx = 0x92,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_call2	Support/Dwarf.h	/^  DW_OP_call2 = 0x98,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_call4	Support/Dwarf.h	/^  DW_OP_call4 = 0x99,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_call_frame_cfa	Support/Dwarf.h	/^  DW_OP_call_frame_cfa = 0x9c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_call_ref	Support/Dwarf.h	/^  DW_OP_call_ref = 0x9a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const1s	Support/Dwarf.h	/^  DW_OP_const1s = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const1u	Support/Dwarf.h	/^  DW_OP_const1u = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const2s	Support/Dwarf.h	/^  DW_OP_const2s = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const2u	Support/Dwarf.h	/^  DW_OP_const2u = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const4s	Support/Dwarf.h	/^  DW_OP_const4s = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const4u	Support/Dwarf.h	/^  DW_OP_const4u = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const8s	Support/Dwarf.h	/^  DW_OP_const8s = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const8u	Support/Dwarf.h	/^  DW_OP_const8u = 0x0e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_consts	Support/Dwarf.h	/^  DW_OP_consts = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_constu	Support/Dwarf.h	/^  DW_OP_constu = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_deref	Support/Dwarf.h	/^  DW_OP_deref = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_deref_size	Support/Dwarf.h	/^  DW_OP_deref_size = 0x94,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_div	Support/Dwarf.h	/^  DW_OP_div = 0x1b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_drop	Support/Dwarf.h	/^  DW_OP_drop = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_dup	Support/Dwarf.h	/^  DW_OP_dup = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_eq	Support/Dwarf.h	/^  DW_OP_eq = 0x29,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_fbreg	Support/Dwarf.h	/^  DW_OP_fbreg = 0x91,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_form_tls_address	Support/Dwarf.h	/^  DW_OP_form_tls_address = 0x9b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_ge	Support/Dwarf.h	/^  DW_OP_ge = 0x2a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_gt	Support/Dwarf.h	/^  DW_OP_gt = 0x2b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_hi_user	Support/Dwarf.h	/^  DW_OP_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_implicit_value	Support/Dwarf.h	/^  DW_OP_implicit_value = 0x9e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_le	Support/Dwarf.h	/^  DW_OP_le = 0x2c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit0	Support/Dwarf.h	/^  DW_OP_lit0 = 0x30,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit1	Support/Dwarf.h	/^  DW_OP_lit1 = 0x31,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit10	Support/Dwarf.h	/^  DW_OP_lit10 = 0x3a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit11	Support/Dwarf.h	/^  DW_OP_lit11 = 0x3b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit12	Support/Dwarf.h	/^  DW_OP_lit12 = 0x3c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit13	Support/Dwarf.h	/^  DW_OP_lit13 = 0x3d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit14	Support/Dwarf.h	/^  DW_OP_lit14 = 0x3e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit15	Support/Dwarf.h	/^  DW_OP_lit15 = 0x3f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit16	Support/Dwarf.h	/^  DW_OP_lit16 = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit17	Support/Dwarf.h	/^  DW_OP_lit17 = 0x41,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit18	Support/Dwarf.h	/^  DW_OP_lit18 = 0x42,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit19	Support/Dwarf.h	/^  DW_OP_lit19 = 0x43,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit2	Support/Dwarf.h	/^  DW_OP_lit2 = 0x32,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit20	Support/Dwarf.h	/^  DW_OP_lit20 = 0x44,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit21	Support/Dwarf.h	/^  DW_OP_lit21 = 0x45,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit22	Support/Dwarf.h	/^  DW_OP_lit22 = 0x46,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit23	Support/Dwarf.h	/^  DW_OP_lit23 = 0x47,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit24	Support/Dwarf.h	/^  DW_OP_lit24 = 0x48,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit25	Support/Dwarf.h	/^  DW_OP_lit25 = 0x49,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit26	Support/Dwarf.h	/^  DW_OP_lit26 = 0x4a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit27	Support/Dwarf.h	/^  DW_OP_lit27 = 0x4b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit28	Support/Dwarf.h	/^  DW_OP_lit28 = 0x4c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit29	Support/Dwarf.h	/^  DW_OP_lit29 = 0x4d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit3	Support/Dwarf.h	/^  DW_OP_lit3 = 0x33,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit30	Support/Dwarf.h	/^  DW_OP_lit30 = 0x4e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit31	Support/Dwarf.h	/^  DW_OP_lit31 = 0x4f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit4	Support/Dwarf.h	/^  DW_OP_lit4 = 0x34,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit5	Support/Dwarf.h	/^  DW_OP_lit5 = 0x35,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit6	Support/Dwarf.h	/^  DW_OP_lit6 = 0x36,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit7	Support/Dwarf.h	/^  DW_OP_lit7 = 0x37,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit8	Support/Dwarf.h	/^  DW_OP_lit8 = 0x38,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit9	Support/Dwarf.h	/^  DW_OP_lit9 = 0x39,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lo_user	Support/Dwarf.h	/^  DW_OP_lo_user = 0xe0,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lt	Support/Dwarf.h	/^  DW_OP_lt = 0x2d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_minus	Support/Dwarf.h	/^  DW_OP_minus = 0x1c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_mod	Support/Dwarf.h	/^  DW_OP_mod = 0x1d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_mul	Support/Dwarf.h	/^  DW_OP_mul = 0x1e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_ne	Support/Dwarf.h	/^  DW_OP_ne = 0x2e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_neg	Support/Dwarf.h	/^  DW_OP_neg = 0x1f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_nop	Support/Dwarf.h	/^  DW_OP_nop = 0x96,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_not	Support/Dwarf.h	/^  DW_OP_not = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_or	Support/Dwarf.h	/^  DW_OP_or = 0x21,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_over	Support/Dwarf.h	/^  DW_OP_over = 0x14,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_pick	Support/Dwarf.h	/^  DW_OP_pick = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_piece	Support/Dwarf.h	/^  DW_OP_piece = 0x93,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_plus	Support/Dwarf.h	/^  DW_OP_plus = 0x22,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_plus_uconst	Support/Dwarf.h	/^  DW_OP_plus_uconst = 0x23,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_push_object_address	Support/Dwarf.h	/^  DW_OP_push_object_address = 0x97,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg0	Support/Dwarf.h	/^  DW_OP_reg0 = 0x50,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg1	Support/Dwarf.h	/^  DW_OP_reg1 = 0x51,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg10	Support/Dwarf.h	/^  DW_OP_reg10 = 0x5a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg11	Support/Dwarf.h	/^  DW_OP_reg11 = 0x5b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg12	Support/Dwarf.h	/^  DW_OP_reg12 = 0x5c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg13	Support/Dwarf.h	/^  DW_OP_reg13 = 0x5d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg14	Support/Dwarf.h	/^  DW_OP_reg14 = 0x5e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg15	Support/Dwarf.h	/^  DW_OP_reg15 = 0x5f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg16	Support/Dwarf.h	/^  DW_OP_reg16 = 0x60,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg17	Support/Dwarf.h	/^  DW_OP_reg17 = 0x61,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg18	Support/Dwarf.h	/^  DW_OP_reg18 = 0x62,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg19	Support/Dwarf.h	/^  DW_OP_reg19 = 0x63,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg2	Support/Dwarf.h	/^  DW_OP_reg2 = 0x52,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg20	Support/Dwarf.h	/^  DW_OP_reg20 = 0x64,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg21	Support/Dwarf.h	/^  DW_OP_reg21 = 0x65,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg22	Support/Dwarf.h	/^  DW_OP_reg22 = 0x66,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg23	Support/Dwarf.h	/^  DW_OP_reg23 = 0x67,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg24	Support/Dwarf.h	/^  DW_OP_reg24 = 0x68,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg25	Support/Dwarf.h	/^  DW_OP_reg25 = 0x69,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg26	Support/Dwarf.h	/^  DW_OP_reg26 = 0x6a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg27	Support/Dwarf.h	/^  DW_OP_reg27 = 0x6b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg28	Support/Dwarf.h	/^  DW_OP_reg28 = 0x6c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg29	Support/Dwarf.h	/^  DW_OP_reg29 = 0x6d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg3	Support/Dwarf.h	/^  DW_OP_reg3 = 0x53,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg30	Support/Dwarf.h	/^  DW_OP_reg30 = 0x6e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg31	Support/Dwarf.h	/^  DW_OP_reg31 = 0x6f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg4	Support/Dwarf.h	/^  DW_OP_reg4 = 0x54,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg5	Support/Dwarf.h	/^  DW_OP_reg5 = 0x55,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg6	Support/Dwarf.h	/^  DW_OP_reg6 = 0x56,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg7	Support/Dwarf.h	/^  DW_OP_reg7 = 0x57,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg8	Support/Dwarf.h	/^  DW_OP_reg8 = 0x58,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg9	Support/Dwarf.h	/^  DW_OP_reg9 = 0x59,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_regx	Support/Dwarf.h	/^  DW_OP_regx = 0x90,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_rot	Support/Dwarf.h	/^  DW_OP_rot = 0x17,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_shl	Support/Dwarf.h	/^  DW_OP_shl = 0x24,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_shr	Support/Dwarf.h	/^  DW_OP_shr = 0x25,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_shra	Support/Dwarf.h	/^  DW_OP_shra = 0x26,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_skip	Support/Dwarf.h	/^  DW_OP_skip = 0x2f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_stack_value	Support/Dwarf.h	/^  DW_OP_stack_value = 0x9f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_swap	Support/Dwarf.h	/^  DW_OP_swap = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_xderef	Support/Dwarf.h	/^  DW_OP_xderef = 0x18,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_xderef_size	Support/Dwarf.h	/^  DW_OP_xderef_size = 0x95,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_xor	Support/Dwarf.h	/^  DW_OP_xor = 0x27,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ORD_col_major	Support/Dwarf.h	/^  DW_ORD_col_major = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ORD_row_major	Support/Dwarf.h	/^  DW_ORD_row_major = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_APPLE_property	Support/Dwarf.h	/^  DW_TAG_APPLE_property = 0x4200,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_GNU_formal_parameter_pack	Support/Dwarf.h	/^  DW_TAG_GNU_formal_parameter_pack = 0x4108,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_GNU_template_parameter_pack	Support/Dwarf.h	/^  DW_TAG_GNU_template_parameter_pack = 0x4107,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_GNU_template_template_param	Support/Dwarf.h	/^  DW_TAG_GNU_template_template_param = 0x4106,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_MIPS_loop	Support/Dwarf.h	/^  DW_TAG_MIPS_loop = 0x4081,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_access_declaration	Support/Dwarf.h	/^  DW_TAG_access_declaration = 0x23,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_arg_variable	Support/Dwarf.h	/^  DW_TAG_arg_variable = 0x101,          \/\/ Tag for argument variables.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_array_type	Support/Dwarf.h	/^  DW_TAG_array_type = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_auto_variable	Support/Dwarf.h	/^  DW_TAG_auto_variable = 0x100,         \/\/ Tag for local (auto) variables.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_base_type	Support/Dwarf.h	/^  DW_TAG_base_type = 0x24,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_catch_block	Support/Dwarf.h	/^  DW_TAG_catch_block = 0x25,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_class_template	Support/Dwarf.h	/^  DW_TAG_class_template = 0x4103,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_class_type	Support/Dwarf.h	/^  DW_TAG_class_type = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_common_block	Support/Dwarf.h	/^  DW_TAG_common_block = 0x1a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_common_inclusion	Support/Dwarf.h	/^  DW_TAG_common_inclusion = 0x1b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_compile_unit	Support/Dwarf.h	/^  DW_TAG_compile_unit = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_condition	Support/Dwarf.h	/^  DW_TAG_condition = 0x3f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_const_type	Support/Dwarf.h	/^  DW_TAG_const_type = 0x26,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_constant	Support/Dwarf.h	/^  DW_TAG_constant = 0x27,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_dwarf_procedure	Support/Dwarf.h	/^  DW_TAG_dwarf_procedure = 0x36,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_entry_point	Support/Dwarf.h	/^  DW_TAG_entry_point = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_enumeration_type	Support/Dwarf.h	/^  DW_TAG_enumeration_type = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_enumerator	Support/Dwarf.h	/^  DW_TAG_enumerator = 0x28,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_file_type	Support/Dwarf.h	/^  DW_TAG_file_type = 0x29,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_formal_parameter	Support/Dwarf.h	/^  DW_TAG_formal_parameter = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_format_label	Support/Dwarf.h	/^  DW_TAG_format_label = 0x4101,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_friend	Support/Dwarf.h	/^  DW_TAG_friend = 0x2a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_function_template	Support/Dwarf.h	/^  DW_TAG_function_template = 0x4102,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_hi_user	Support/Dwarf.h	/^  DW_TAG_hi_user = 0xffff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_imported_declaration	Support/Dwarf.h	/^  DW_TAG_imported_declaration = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_imported_module	Support/Dwarf.h	/^  DW_TAG_imported_module = 0x3a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_imported_unit	Support/Dwarf.h	/^  DW_TAG_imported_unit = 0x3d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_inheritance	Support/Dwarf.h	/^  DW_TAG_inheritance = 0x1c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_inlined_subroutine	Support/Dwarf.h	/^  DW_TAG_inlined_subroutine = 0x1d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_interface_type	Support/Dwarf.h	/^  DW_TAG_interface_type = 0x38,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_invalid	Support/Dwarf.h	/^  DW_TAG_invalid = ~0U,                 \/\/ Tag for invalid results.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_label	Support/Dwarf.h	/^  DW_TAG_label = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_lexical_block	Support/Dwarf.h	/^  DW_TAG_lexical_block = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_lo_user	Support/Dwarf.h	/^  DW_TAG_lo_user = 0x4080,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_member	Support/Dwarf.h	/^  DW_TAG_member = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_module	Support/Dwarf.h	/^  DW_TAG_module = 0x1e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_namelist	Support/Dwarf.h	/^  DW_TAG_namelist = 0x2b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_namelist_item	Support/Dwarf.h	/^  DW_TAG_namelist_item = 0x2c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_namespace	Support/Dwarf.h	/^  DW_TAG_namespace = 0x39,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_packed_type	Support/Dwarf.h	/^  DW_TAG_packed_type = 0x2d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_partial_unit	Support/Dwarf.h	/^  DW_TAG_partial_unit = 0x3c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_pointer_type	Support/Dwarf.h	/^  DW_TAG_pointer_type = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_ptr_to_member_type	Support/Dwarf.h	/^  DW_TAG_ptr_to_member_type = 0x1f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_reference_type	Support/Dwarf.h	/^  DW_TAG_reference_type = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_restrict_type	Support/Dwarf.h	/^  DW_TAG_restrict_type = 0x37,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_return_variable	Support/Dwarf.h	/^  DW_TAG_return_variable = 0x102,       \/\/ Tag for return variables.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_rvalue_reference_type	Support/Dwarf.h	/^  DW_TAG_rvalue_reference_type = 0x42,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_set_type	Support/Dwarf.h	/^  DW_TAG_set_type = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_shared_type	Support/Dwarf.h	/^  DW_TAG_shared_type = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_string_type	Support/Dwarf.h	/^  DW_TAG_string_type = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_structure_type	Support/Dwarf.h	/^  DW_TAG_structure_type = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_subprogram	Support/Dwarf.h	/^  DW_TAG_subprogram = 0x2e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_subrange_type	Support/Dwarf.h	/^  DW_TAG_subrange_type = 0x21,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_subroutine_type	Support/Dwarf.h	/^  DW_TAG_subroutine_type = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_template_alias	Support/Dwarf.h	/^  DW_TAG_template_alias = 0x43,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_template_type_parameter	Support/Dwarf.h	/^  DW_TAG_template_type_parameter = 0x2f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_template_value_parameter	Support/Dwarf.h	/^  DW_TAG_template_value_parameter = 0x30,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_thrown_type	Support/Dwarf.h	/^  DW_TAG_thrown_type = 0x31,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_try_block	Support/Dwarf.h	/^  DW_TAG_try_block = 0x32,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_type_unit	Support/Dwarf.h	/^  DW_TAG_type_unit = 0x41,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_typedef	Support/Dwarf.h	/^  DW_TAG_typedef = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_union_type	Support/Dwarf.h	/^  DW_TAG_union_type = 0x17,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_unspecified_parameters	Support/Dwarf.h	/^  DW_TAG_unspecified_parameters = 0x18,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_unspecified_type	Support/Dwarf.h	/^  DW_TAG_unspecified_type = 0x3b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_user_base	Support/Dwarf.h	/^  DW_TAG_user_base = 0x1000,            \/\/ Recommended base for user tags.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_variable	Support/Dwarf.h	/^  DW_TAG_variable = 0x34,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_variant	Support/Dwarf.h	/^  DW_TAG_variant = 0x19,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_variant_part	Support/Dwarf.h	/^  DW_TAG_variant_part = 0x33,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_vector_type	Support/Dwarf.h	/^  DW_TAG_vector_type = 0x103,           \/\/ Tag for vector types.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_volatile_type	Support/Dwarf.h	/^  DW_TAG_volatile_type = 0x35,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_with_stmt	Support/Dwarf.h	/^  DW_TAG_with_stmt = 0x22,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIRTUALITY_none	Support/Dwarf.h	/^  DW_VIRTUALITY_none = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIRTUALITY_pure_virtual	Support/Dwarf.h	/^  DW_VIRTUALITY_pure_virtual = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIRTUALITY_virtual	Support/Dwarf.h	/^  DW_VIRTUALITY_virtual = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIS_exported	Support/Dwarf.h	/^  DW_VIS_exported = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIS_local	Support/Dwarf.h	/^  DW_VIS_local = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIS_qualified	Support/Dwarf.h	/^  DW_VIS_qualified = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DYNAMIC_STACKALLOC	CodeGen/ISDOpcodes.h	/^    DYNAMIC_STACKALLOC,$/;"	e	enum:llvm::ISD::NodeType
DagInit	TableGen/Record.h	/^  DagInit(Init *V, const std::string &VN,$/;"	f	class:llvm::DagInit
DagInit	TableGen/Record.h	/^class DagInit : public TypedInit, public FoldingSetNode {$/;"	c	namespace:llvm
DagRecTy	TableGen/Record.h	/^  DagRecTy() : RecTy(DagRecTyKind) {}$/;"	f	class:llvm::DagRecTy
DagRecTy	TableGen/Record.h	/^class DagRecTy : public RecTy {$/;"	c	namespace:llvm
DagRecTyKind	TableGen/Record.h	/^    DagRecTyKind,$/;"	e	enum:llvm::RecTy::RecTyKind
Darwin	ADT/Triple.h	/^    Darwin,$/;"	e	enum:llvm::Triple::OSType
Data	ADT/ArrayRef.h	/^    const T *Data;$/;"	m	class:llvm::ArrayRef
Data	ADT/EquivalenceClasses.h	/^    ElemTy Data;$/;"	m	class:llvm::EquivalenceClasses::ECValue
Data	ADT/FoldingSet.h	/^  const unsigned *Data;$/;"	m	class:llvm::FoldingSetNodeIDRef
Data	ADT/StringRef.h	/^    const char *Data;$/;"	m	class:llvm::StringRef
Data	ADT/Triple.h	/^  std::string Data;$/;"	m	class:llvm::Triple
Data	ADT/ValueMap.h	/^  ExtraData Data;$/;"	m	class:llvm::ValueMap
Data	CodeGen/ScheduleDAG.h	/^      Data,        \/\/\/< Regular data dependence (aka true-dependence).$/;"	e	enum:llvm::SDep::Kind
Data	CodeGen/ScoreboardHazardRecognizer.h	/^    unsigned *Data;$/;"	m	class:llvm::ScoreboardHazardRecognizer::Scoreboard
Data	MC/MCAssembler.h	/^  enum KindTy { Data = 1, JumpTable8, JumpTable16, JumpTable32 } Kind;$/;"	e	enum:llvm::DataRegionData::KindTy
Data	MC/MCAtom.h	/^  std::vector<MCData> Data;$/;"	m	class:llvm::MCAtom
Data	Object/Archive.h	/^    StringRef Data;$/;"	m	class:llvm::object::Archive::Child
Data	Object/Binary.h	/^  MemoryBuffer *Data;$/;"	m	class:llvm::object::Binary
Data	Object/MachOFormat.h	/^  enum DataRegionType { Data = 1, JumpTable8, JumpTable16, JumpTable32 };$/;"	e	enum:llvm::object::macho::DataRegionType
Data	Support/DataExtractor.h	/^  StringRef Data;$/;"	m	class:llvm::DataExtractor
Data	Support/DynamicLibrary.h	/^    void *Data;$/;"	m	class:llvm::sys::DynamicLibrary
Data16bitsDirective	MC/MCAsmInfo.h	/^    const char *Data16bitsDirective;         \/\/ Defaults to "\\t.short\\t"$/;"	m	class:llvm::MCAsmInfo
Data32bitsDirective	MC/MCAsmInfo.h	/^    const char *Data32bitsDirective;         \/\/ Defaults to "\\t.long\\t"$/;"	m	class:llvm::MCAsmInfo
Data64bitsDirective	MC/MCAsmInfo.h	/^    const char *Data64bitsDirective;         \/\/ Defaults to "\\t.quad\\t"$/;"	m	class:llvm::MCAsmInfo
Data8bitsDirective	MC/MCAsmInfo.h	/^    const char *Data8bitsDirective;          \/\/ Defaults to "\\t.byte\\t"$/;"	m	class:llvm::MCAsmInfo
DataAtom	MC/MCAtom.h	/^  typedef enum { TextAtom, DataAtom } AtomType;$/;"	e	enum:llvm::MCAtom::__anon64
DataBSSSection	MC/MCObjectFileInfo.h	/^  const MCSection *DataBSSSection;$/;"	m	class:llvm::MCObjectFileInfo
DataCoalSection	MC/MCObjectFileInfo.h	/^  const MCSection *DataCoalSection;$/;"	m	class:llvm::MCObjectFileInfo
DataCommonSection	MC/MCObjectFileInfo.h	/^  const MCSection *DataCommonSection;$/;"	m	class:llvm::MCObjectFileInfo
DataDirectory	Support/COFF.h	/^  struct DataDirectory {$/;"	s	namespace:llvm::COFF
DataElements	Constants.h	/^  const char *DataElements;$/;"	m	class:llvm::ConstantDataSequential
DataExtractor	Support/DataExtractor.h	/^  DataExtractor(StringRef Data, bool IsLittleEndian, uint8_t PointerSize)$/;"	f	class:llvm::DataExtractor
DataExtractor	Support/DataExtractor.h	/^class DataExtractor {$/;"	c	namespace:llvm
DataInCodeTableEntry	Object/MachOFormat.h	/^  struct DataInCodeTableEntry {$/;"	s	namespace:llvm::object::macho
DataLayout	DataLayout.h	/^  DataLayout(const DataLayout &TD) :$/;"	f	class:llvm::DataLayout
DataLayout	DataLayout.h	/^  explicit DataLayout(StringRef LayoutDescription)$/;"	f	class:llvm::DataLayout
DataLayout	DataLayout.h	/^class DataLayout : public ImmutablePass {$/;"	c	namespace:llvm
DataLayout	Module.h	/^  std::string DataLayout;         \/\/\/< Target data description$/;"	m	class:llvm::Module
DataNoRel	MC/SectionKind.h	/^                   DataNoRel,$/;"	e	enum:llvm::SectionKind::Kind
DataOfValue	ADT/ImmutableIntervalMap.h	/^  static data_type_ref DataOfValue(value_type_ref V) {$/;"	f	struct:llvm::ImutIntervalInfo
DataOfValue	ADT/ImmutableMap.h	/^  static inline data_type_ref DataOfValue(value_type_ref V) {$/;"	f	struct:llvm::ImutKeyValueInfo
DataOfValue	ADT/ImmutableSet.h	/^  static inline data_type_ref DataOfValue(value_type_ref) { return true; }$/;"	f	struct:llvm::ImutContainerInfo
DataOffset	Object/MachOFormat.h	/^    uint32_t DataOffset;$/;"	m	struct:llvm::object::macho::LinkeditDataLoadCommand
DataRefImpl	Object/ObjectFile.h	/^  DataRefImpl() {$/;"	f	union:llvm::object::DataRefImpl
DataRefImpl	Object/ObjectFile.h	/^union DataRefImpl {$/;"	u	namespace:llvm::object
DataRegionData	MC/MCAssembler.h	/^struct DataRegionData {$/;"	s	namespace:llvm
DataRegionType	Object/MachOFormat.h	/^  enum DataRegionType { Data = 1, JumpTable8, JumpTable16, JumpTable32 };$/;"	g	namespace:llvm::object::macho
DataRegions	MC/MCAssembler.h	/^  std::vector<DataRegionData> DataRegions;$/;"	m	class:llvm::MCAssembler
DataRel	MC/SectionKind.h	/^           DataRel,$/;"	e	enum:llvm::SectionKind::Kind
DataRelLocal	MC/SectionKind.h	/^               DataRelLocal,$/;"	e	enum:llvm::SectionKind::Kind
DataRelLocalSection	MC/MCObjectFileInfo.h	/^  const MCSection *DataRelLocalSection;$/;"	m	class:llvm::MCObjectFileInfo
DataRelROLocalSection	MC/MCObjectFileInfo.h	/^  const MCSection *DataRelROLocalSection;$/;"	m	class:llvm::MCObjectFileInfo
DataRelROSection	MC/MCObjectFileInfo.h	/^  const MCSection *DataRelROSection;$/;"	m	class:llvm::MCObjectFileInfo
DataRelSection	MC/MCObjectFileInfo.h	/^  const MCSection *DataRelSection;$/;"	m	class:llvm::MCObjectFileInfo
DataSection	MC/MCObjectFileInfo.h	/^  const MCSection *DataSection;$/;"	m	class:llvm::MCObjectFileInfo
DataSize	Object/MachOFormat.h	/^    uint32_t DataSize;$/;"	m	struct:llvm::object::macho::LinkeditDataLoadCommand
DataStreamer	Support/DataStream.h	/^class DataStreamer {$/;"	c	namespace:llvm
Data_	Support/Program.h	/^    void *Data_;$/;"	m	class:llvm::sys::Program
DbgBegin	CodeGen/SelectionDAG.h	/^  DbgIterator DbgBegin() { return DbgValues.begin(); }$/;"	f	class:llvm::SDDbgInfo
DbgBegin	CodeGen/SelectionDAG.h	/^  SDDbgInfo::DbgIterator DbgBegin() { return DbgInfo->DbgBegin(); }$/;"	f	class:llvm::SelectionDAG
DbgDeclareInst	IntrinsicInst.h	/^  class DbgDeclareInst : public DbgInfoIntrinsic {$/;"	c	namespace:llvm
DbgEnd	CodeGen/SelectionDAG.h	/^  DbgIterator DbgEnd()   { return DbgValues.end(); }$/;"	f	class:llvm::SDDbgInfo
DbgEnd	CodeGen/SelectionDAG.h	/^  SDDbgInfo::DbgIterator DbgEnd()   { return DbgInfo->DbgEnd(); }$/;"	f	class:llvm::SelectionDAG
DbgInfo	CodeGen/SelectionDAG.h	/^  SDDbgInfo *DbgInfo;$/;"	m	class:llvm::SelectionDAG
DbgInfoAvailable	CodeGen/MachineModuleInfo.h	/^  bool DbgInfoAvailable;$/;"	m	class:llvm::MachineModuleInfo
DbgInfoIntrinsic	IntrinsicInst.h	/^  class DbgInfoIntrinsic : public IntrinsicInst {$/;"	c	namespace:llvm
DbgIterator	CodeGen/SelectionDAG.h	/^  typedef SmallVector<SDDbgValue*,32>::iterator DbgIterator;$/;"	t	class:llvm::SDDbgInfo
DbgLoc	Instruction.h	/^  DebugLoc DbgLoc;                         \/\/ 'dbg' Metadata cache.$/;"	m	class:llvm::Instruction
DbgNode	DebugInfo.h	/^    const MDNode *DbgNode;$/;"	m	class:llvm::DIDescriptor
DbgValMap	CodeGen/SelectionDAG.h	/^  DenseMap<const SDNode*, SmallVector<SDDbgValue*, 2> > DbgValMap;$/;"	m	class:llvm::SDDbgInfo
DbgValueInst	IntrinsicInst.h	/^  class DbgValueInst : public DbgInfoIntrinsic {$/;"	c	namespace:llvm
DbgValueVector	CodeGen/ScheduleDAGInstrs.h	/^      DbgValueVector;$/;"	t	class:llvm::ScheduleDAGInstrs
DbgValues	CodeGen/ScheduleDAGInstrs.h	/^    DbgValueVector DbgValues;$/;"	m	class:llvm::ScheduleDAGInstrs
DbgValues	CodeGen/SelectionDAG.h	/^  SmallVector<SDDbgValue*, 32> DbgValues;$/;"	m	class:llvm::SDDbgInfo
Dead	CodeGen/MachineInstrBuilder.h	/^    Dead           = 0x10,$/;"	e	enum:llvm::RegState::__anon32
Deallocate	MC/MCContext.h	/^    void Deallocate(void *Ptr) {$/;"	f	class:llvm::MCContext
Deallocate	Support/Allocator.h	/^  void Deallocate(const void * \/*Ptr*\/) {}$/;"	f	class:llvm::BumpPtrAllocator
Deallocate	Support/Allocator.h	/^  void Deallocate(const void *Ptr) { free(const_cast<void*>(Ptr)); }$/;"	f	class:llvm::MallocAllocator
Deallocate	Support/Recycler.h	/^  void Deallocate(AllocatorType & \/*Allocator*\/, SubClass* Element) {$/;"	f	class:llvm::Recycler
Deallocate	Support/RecyclingAllocator.h	/^  void Deallocate(SubClass* E) { return Base.Deallocate(Allocator, E); }$/;"	f	class:llvm::RecyclingAllocator
Debug	CodeGen/MachineInstrBuilder.h	/^    Debug          = 0x80,$/;"	e	enum:llvm::RegState::__anon32
DebugInfoFinder	DebugInfo.h	/^  class DebugInfoFinder {$/;"	c	namespace:llvm
DebugLoc	Support/DebugLoc.h	/^    DebugLoc() : LineCol(0), ScopeIdx(0) {}  \/\/ Defaults to unknown.$/;"	f	class:llvm::DebugLoc
DebugLoc	Support/DebugLoc.h	/^  class DebugLoc {$/;"	c	namespace:llvm
DebugType	Analysis/ScalarEvolutionExpander.h	/^    const char *DebugType;$/;"	m	class:llvm::SCEVExpander
DebugType	CodeGen/ScoreboardHazardRecognizer.h	/^  static const char *DebugType;$/;"	m	class:llvm::ScoreboardHazardRecognizer
DebugType	Support/COFF.h	/^  enum DebugType {$/;"	g	namespace:llvm::COFF
DecIKind	ADT/Twine.h	/^      DecIKind,$/;"	e	enum:llvm::Twine::NodeKind
DecLKind	ADT/Twine.h	/^      DecLKind,$/;"	e	enum:llvm::Twine::NodeKind
DecLLKind	ADT/Twine.h	/^      DecLLKind,$/;"	e	enum:llvm::Twine::NodeKind
DecUIKind	ADT/Twine.h	/^      DecUIKind,$/;"	e	enum:llvm::Twine::NodeKind
DecULKind	ADT/Twine.h	/^      DecULKind,$/;"	e	enum:llvm::Twine::NodeKind
DecULLKind	ADT/Twine.h	/^      DecULLKind,$/;"	e	enum:llvm::Twine::NodeKind
DeclareFn	DIBuilder.h	/^    Function *DeclareFn;     \/\/ llvm.dbg.declare$/;"	m	class:llvm::DIBuilder
DecodeChar6	Bitcode/BitCodes.h	/^  static char DecodeChar6(unsigned V) {$/;"	f	class:llvm::BitCodeAbbrevOp
DecodeStatus	MC/MCDisassembler.h	/^  enum DecodeStatus {$/;"	g	class:llvm::MCDisassembler
DecoderOps	MC/MCFixedLenDisassembler.h	/^enum DecoderOps {$/;"	g	namespace:llvm::MCD
Def	Analysis/MemoryDependenceAnalysis.h	/^      Def,$/;"	e	enum:llvm::MemDepResult::DepType
Def	TableGen/Record.h	/^  Record *Def;$/;"	m	class:llvm::DefInit
DefBB	Transforms/Utils/SSAUpdaterImpl.h	/^    BBInfo *DefBB;     \/\/ Block that defines the available value.$/;"	m	class:llvm::SSAUpdaterImpl::BBInfo
DefInit	TableGen/Record.h	/^  DefInit(Record *D, RecordRecTy *T) : TypedInit(IK_DefInit, T), Def(D) {}$/;"	f	class:llvm::DefInit
DefInit	TableGen/Record.h	/^class DefInit : public TypedInit {$/;"	c	namespace:llvm
DefPrototypes	TableGen/Record.h	/^  RecordVector DefPrototypes;$/;"	m	struct:llvm::MultiClass
DefRegs	CodeGen/RegisterScavenging.h	/^  BitVector KillRegs, DefRegs;$/;"	m	class:llvm::RegScavenger
Default	ADT/StringSwitch.h	/^  R Default(const T& Value) const {$/;"	f	class:llvm::StringSwitch
Default	CodeGen/MachinePassRegistry.h	/^  MachinePassCtor Default;              \/\/ Default function pass creator.$/;"	m	class:llvm::MachinePassRegistry
Default	Support/CodeGen.h	/^      Default,     \/\/ -O2, -Os$/;"	e	enum:llvm::CodeGenOpt::Level
Default	Support/CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
Default	Support/CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	e	enum:llvm::Reloc::Model
Default	Support/CommandLine.h	/^  OptionValue<DataType> Default;$/;"	m	class:llvm::cl::opt_storage
Default	Target/Mangler.h	/^    Default,               \/\/\/< Emit default string before each symbol.$/;"	e	enum:llvm::Mangler::ManglerPrefixTy
Default	Target/TargetOptions.h	/^      Default, \/\/ Target-specific (either soft or hard depending on triple, etc).$/;"	e	enum:llvm::FloatABI::ABIType
DefaultContextualFoldingSetTrait	ADT/FoldingSet.h	/^struct DefaultContextualFoldingSetTrait {$/;"	s	namespace:llvm
DefaultDOTGraphTraits	Support/DOTGraphTraits.h	/^  explicit DefaultDOTGraphTraits(bool simple=false) : IsSimple (simple) {}$/;"	f	struct:llvm::DefaultDOTGraphTraits
DefaultDOTGraphTraits	Support/DOTGraphTraits.h	/^struct DefaultDOTGraphTraits {$/;"	s	namespace:llvm
DefaultFPMathTag	IRBuilder.h	/^  MDNode *DefaultFPMathTag;$/;"	m	class:llvm::IRBuilder
DefaultFoldingSetTrait	ADT/FoldingSet.h	/^template<typename T> struct DefaultFoldingSetTrait {$/;"	s	namespace:llvm
DefaultHighLatency	MC/MCSchedule.h	/^  static const unsigned DefaultHighLatency = 10;$/;"	m	class:llvm::MCSchedModel
DefaultIssueWidth	MC/MCSchedule.h	/^  static const unsigned DefaultIssueWidth = 1;$/;"	m	class:llvm::MCSchedModel
DefaultLoadLatency	MC/MCSchedule.h	/^  static const unsigned DefaultLoadLatency = 4;$/;"	m	class:llvm::MCSchedModel
DefaultMinLatency	MC/MCSchedule.h	/^  static const unsigned DefaultMinLatency = -1;$/;"	m	class:llvm::MCSchedModel
DefaultMispredictPenalty	MC/MCSchedule.h	/^  static const unsigned DefaultMispredictPenalty = 10;$/;"	m	class:llvm::MCSchedModel
DefaultPseudoIndex	Instructions.h	/^  static const unsigned DefaultPseudoIndex = static_cast<unsigned>(~0L-1);$/;"	m	class:llvm::SwitchInst
DefaultSchedModel	MC/MCSchedule.h	/^  static MCSchedModel DefaultSchedModel; \/\/ For unknown processors.$/;"	m	class:llvm::MCSchedModel
DefaultSlabAllocator	Support/Allocator.h	/^  static MallocSlabAllocator DefaultSlabAllocator;$/;"	m	class:llvm::BumpPtrAllocator
DefaultStandardPasses	DefaultPasses.h	/^namespace DefaultStandardPasses {$/;"	n	namespace:llvm
DefaultVisibility	GlobalValue.h	/^    DefaultVisibility = 0,  \/\/\/< The GV is visible$/;"	e	enum:llvm::GlobalValue::VisibilityTypes
Define	CodeGen/MachineInstrBuilder.h	/^    Define         = 0x2,$/;"	e	enum:llvm::RegState::__anon32
DefineNoRead	CodeGen/MachineInstrBuilder.h	/^    DefineNoRead   = Define | Undef,$/;"	e	enum:llvm::RegState::__anon32
Defines	CodeGen/MachineInstrBundle.h	/^    bool Defines;$/;"	m	struct:llvm::MachineOperandIteratorBase::PhysRegInfo
DefinesDead	CodeGen/MachineInstrBundle.h	/^    bool DefinesDead;$/;"	m	struct:llvm::MachineOperandIteratorBase::PhysRegInfo
DefinesOverlap	CodeGen/MachineInstrBundle.h	/^    bool DefinesOverlap;$/;"	m	struct:llvm::MachineOperandIteratorBase::PhysRegInfo
DefinesPredicate	Target/TargetInstrInfo.h	/^  virtual bool DefinesPredicate(MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
Defs	CodeGen/ScheduleDAGInstrs.h	/^    Reg2SUnitsMap Defs;$/;"	m	class:llvm::ScheduleDAGInstrs
Defs	TableGen/Record.h	/^  std::map<std::string, Record*> Classes, Defs;$/;"	m	class:llvm::RecordKeeper
DelaySlot	MC/MCInstrDesc.h	/^    DelaySlot,$/;"	e	enum:llvm::MCID::__anon69
Delegate	CodeGen/LiveRangeEdit.h	/^  class Delegate {$/;"	c	class:llvm::LiveRangeEdit
DeleteContainerPointers	ADT/STLExtras.h	/^void DeleteContainerPointers(Container &C) {$/;"	f	namespace:llvm
DeleteContainerSeconds	ADT/STLExtras.h	/^void DeleteContainerSeconds(Container &C) {$/;"	f	namespace:llvm
DeleteIt	Support/FileUtilities.h	/^    bool DeleteIt;$/;"	m	class:llvm::FileRemover
DeleteStream	Support/FormattedStream.h	/^    bool DeleteStream;$/;"	m	class:llvm::formatted_raw_ostream
DeleterFn	Support/ManagedStatic.h	/^  mutable void (*DeleterFn)(void*);$/;"	m	class:llvm::ManagedStaticBase
DeltaAlgorithm	ADT/DeltaAlgorithm.h	/^class DeltaAlgorithm {$/;"	c	namespace:llvm
Dematerialize	GVMaterializer.h	/^  virtual void Dematerialize(GlobalValue *) {}$/;"	f	class:llvm::GVMaterializer
DemoteRegister	CodeGen/FunctionLoweringInfo.h	/^  unsigned DemoteRegister;$/;"	m	class:llvm::FunctionLoweringInfo
Denormalize	Analysis/ScalarEvolutionNormalization.h	/^  Denormalize$/;"	e	enum:llvm::TransformKind
Dense	ADT/SparseSet.h	/^  DenseT Dense;$/;"	m	class:llvm::SparseSet
DenseMap	ADT/DenseMap.h	/^  DenseMap(DenseMap &&other) {$/;"	f	class:llvm::DenseMap
DenseMap	ADT/DenseMap.h	/^  DenseMap(const DenseMap &other) {$/;"	f	class:llvm::DenseMap
DenseMap	ADT/DenseMap.h	/^  DenseMap(const InputIt &I, const InputIt &E) {$/;"	f	class:llvm::DenseMap
DenseMap	ADT/DenseMap.h	/^  explicit DenseMap(unsigned NumInitBuckets = 0) {$/;"	f	class:llvm::DenseMap
DenseMap	ADT/DenseMap.h	/^class DenseMap$/;"	c	namespace:llvm
DenseMapBase	ADT/DenseMap.h	/^  DenseMapBase() {}$/;"	f	class:llvm::DenseMapBase
DenseMapBase	ADT/DenseMap.h	/^class DenseMapBase {$/;"	c	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^struct DenseMapInfo {$/;"	s	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^struct DenseMapInfo<T*> {$/;"	s	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^struct DenseMapInfo<std::pair<T, U> > {$/;"	s	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^template<> struct DenseMapInfo<char> {$/;"	s	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^template<> struct DenseMapInfo<int> {$/;"	s	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^template<> struct DenseMapInfo<long long> {$/;"	s	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^template<> struct DenseMapInfo<long> {$/;"	s	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^template<> struct DenseMapInfo<unsigned long long> {$/;"	s	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^template<> struct DenseMapInfo<unsigned long> {$/;"	s	namespace:llvm
DenseMapInfo	ADT/DenseMapInfo.h	/^template<> struct DenseMapInfo<unsigned> {$/;"	s	namespace:llvm
DenseMapInfo	ADT/ImmutableList.h	/^template<typename T> struct DenseMapInfo<ImmutableList<T> > {$/;"	s	namespace:llvm
DenseMapInfo	ADT/PointerIntPair.h	/^struct DenseMapInfo<PointerIntPair<PointerTy, IntBits, IntType> > {$/;"	s	namespace:llvm
DenseMapInfo	ADT/ValueMap.h	/^struct DenseMapInfo<ValueMapCallbackVH<KeyT, ValueT, Config> > {$/;"	s	namespace:llvm
DenseMapInfo	Analysis/AliasAnalysis.h	/^struct DenseMapInfo<AliasAnalysis::Location> {$/;"	s	namespace:llvm
DenseMapInfo	CodeGen/SelectionDAGNodes.h	/^template<> struct DenseMapInfo<SDValue> {$/;"	s	namespace:llvm
DenseMapInfo	Support/DebugLoc.h	/^  struct DenseMapInfo<DebugLoc> {$/;"	s	namespace:llvm
DenseMapInfo	Support/ValueHandle.h	/^struct DenseMapInfo<AssertingVH<T> > {$/;"	s	namespace:llvm
DenseMapIterator	ADT/DenseMap.h	/^  DenseMapIterator() : Ptr(0), End(0) {}$/;"	f	class:llvm::DenseMapIterator
DenseMapIterator	ADT/DenseMap.h	/^  DenseMapIterator(const DenseMapIterator<KeyT, ValueT,$/;"	f	class:llvm::DenseMapIterator
DenseMapIterator	ADT/DenseMap.h	/^  DenseMapIterator(pointer Pos, pointer E, bool NoAdvance = false)$/;"	f	class:llvm::DenseMapIterator
DenseMapIterator	ADT/DenseMap.h	/^class DenseMapIterator {$/;"	c	namespace:llvm
DenseSet	ADT/DenseSet.h	/^  DenseSet(const DenseSet &Other) : TheMap(Other.TheMap) {}$/;"	f	class:llvm::DenseSet
DenseSet	ADT/DenseSet.h	/^  explicit DenseSet(unsigned NumInitBuckets = 0) : TheMap(NumInitBuckets) {}$/;"	f	class:llvm::DenseSet
DenseSet	ADT/DenseSet.h	/^class DenseSet {$/;"	c	namespace:llvm
DenseT	ADT/SparseSet.h	/^  typedef SmallVector<ValueT, 8> DenseT;$/;"	t	class:llvm::SparseSet
Dep	CodeGen/ScheduleDAG.h	/^    PointerIntPair<SUnit *, 2, Kind> Dep;$/;"	m	class:llvm::SDep
DepType	Analysis/MemoryDependenceAnalysis.h	/^    enum DepType {$/;"	g	class:llvm::MemDepResult
Dependence	Analysis/DependenceAnalysis.h	/^    Dependence(const Instruction *Source,$/;"	f	class:llvm::Dependence
Dependence	Analysis/DependenceAnalysis.h	/^  class Dependence {$/;"	c	namespace:llvm
DependenceAnalysis	Analysis/DependenceAnalysis.h	/^    DependenceAnalysis() : FunctionPass(ID) {$/;"	f	class:llvm::DependenceAnalysis
DependenceAnalysis	Analysis/DependenceAnalysis.h	/^  class DependenceAnalysis : public FunctionPass {$/;"	c	namespace:llvm
DependencePair	Analysis/LoopDependenceAnalysis.h	/^    DependencePair(const FoldingSetNodeID &ID, Value *a, Value *b) :$/;"	f	struct:llvm::LoopDependenceAnalysis::DependencePair
DependencePair	Analysis/LoopDependenceAnalysis.h	/^  struct DependencePair : public FastFoldingSetNode {$/;"	s	class:llvm::LoopDependenceAnalysis
DependenceResult	Analysis/LoopDependenceAnalysis.h	/^  enum DependenceResult { Independent = 0, Dependent = 1, Unknown = 2 };$/;"	g	class:llvm::LoopDependenceAnalysis
Dependent	Analysis/LoopDependenceAnalysis.h	/^  enum DependenceResult { Independent = 0, Dependent = 1, Unknown = 2 };$/;"	e	enum:llvm::LoopDependenceAnalysis::DependenceResult
Depth	CodeGen/ScheduleDAG.h	/^    unsigned Depth;                     \/\/ Node depth.$/;"	m	class:llvm::SUnit
Depth	CodeGen/ScoreboardHazardRecognizer.h	/^    size_t Depth;$/;"	m	class:llvm::ScoreboardHazardRecognizer::Scoreboard
Depth	PassManagers.h	/^  unsigned Depth;$/;"	m	class:llvm::PMDataManager
DerefFun	Analysis/CallGraph.h	/^  typedef std::pointer_to_unary_function<PairTy, CallGraphNode&> DerefFun;$/;"	t	struct:llvm::GraphTraits
DeregisterTable	ExecutionEngine/ExecutionEngine.h	/^  void DeregisterTable(const Function *Fn) {$/;"	f	class:llvm::ExecutionEngine
Desc	ADT/Statistic.h	/^  const char *Desc;$/;"	m	class:llvm::Statistic
Desc	CodeGen/LexicalScopes.h	/^  AssertingVH<const MDNode> Desc;                \/\/ Debug info descriptor.$/;"	m	class:llvm::LexicalScope
Desc	MC/MCInstrInfo.h	/^  const MCInstrDesc *Desc;          \/\/ Raw array to allow static init'n$/;"	m	class:llvm::MCInstrInfo
Desc	MC/MCRegisterInfo.h	/^  const MCRegisterDesc *Desc;                 \/\/ Pointer to the descriptor array$/;"	m	class:llvm::MCRegisterInfo
Desc	MC/SubtargetFeature.h	/^  const char *Desc;                     \/\/ Help descriptor$/;"	m	struct:llvm::SubtargetFeatureKV
Desc	Support/CommandLine.h	/^  const char *Desc;$/;"	m	struct:llvm::cl::desc
Desc	Support/CommandLine.h	/^  const char *Desc;$/;"	m	struct:llvm::cl::value_desc
Desc	Support/Registry.h	/^    const char *Name, *Desc;$/;"	m	class:llvm::SimpleRegistryEntry
Description	CodeGen/MachinePassRegistry.h	/^  const char *Description;              \/\/ Description string.$/;"	m	class:llvm::MachinePassRegistryNode
DesiredLeafSize	ADT/IntervalMap.h	/^    DesiredLeafSize = DesiredNodeBytes \/$/;"	e	enum:llvm::IntervalMapImpl::NodeSizer::__anon20
DesiredNodeBytes	ADT/IntervalMap.h	/^  DesiredNodeBytes = 3 * CacheLineBytes$/;"	e	enum:llvm::IntervalMapImpl::__anon19
DesiredRootBranchCap	ADT/IntervalMap.h	/^    DesiredRootBranchCap = (sizeof(RootLeaf) - sizeof(KeyT)) \/$/;"	e	enum:llvm::IntervalMap::__anon23
Destination	MC/MCDwarf.h	/^    MachineLocation Destination;$/;"	m	class:llvm::MCCFIInstruction
Destination	MC/MachineLocation.h	/^  MachineLocation Destination, Source;$/;"	m	class:llvm::MachineMove
Destroy	ADT/ScopedHashTable.h	/^  void Destroy(AllocatorTy &Allocator) {$/;"	f	class:llvm::ScopedHashTableVal
Destroy	ADT/StringMap.h	/^  void Destroy() {$/;"	f	class:llvm::StringMapEntry
Destroy	ADT/StringMap.h	/^  void Destroy(AllocatorTy &Allocator) {$/;"	f	class:llvm::StringMapEntry
DestroyAll	Support/Allocator.h	/^  void DestroyAll() {$/;"	f	class:llvm::SpecificBumpPtrAllocator
DestroyFlag	Metadata.h	/^    DestroyFlag      = 1 << 2$/;"	e	enum:llvm::MDNode::__anon70
DestroySource	Linker.h	/^      DestroySource = 0, \/\/ Allow source module to be destroyed.$/;"	e	enum:llvm::Linker::LinkerMode
DetailsType	Analysis/LibCallSemantics.h	/^    } DetailsType;$/;"	m	struct:llvm::LibCallFunctionInfo	typeref:enum:llvm::LibCallFunctionInfo::__anon28
DiagContext	Support/SourceMgr.h	/^  void *DiagContext;$/;"	m	class:llvm::SourceMgr
DiagHandler	Support/SourceMgr.h	/^  DiagHandlerTy DiagHandler;$/;"	m	class:llvm::SourceMgr
DiagHandlerTy	Support/SourceMgr.h	/^  typedef void (*DiagHandlerTy)(const SMDiagnostic &, void *Context);$/;"	t	class:llvm::SourceMgr
DiagKind	Support/SourceMgr.h	/^  enum DiagKind {$/;"	g	class:llvm::SourceMgr
Dialect	InlineAsm.h	/^  AsmDialect Dialect;$/;"	m	class:llvm::InlineAsm
DiffListIterator	MC/MCRegisterInfo.h	/^    DiffListIterator() : Val(0), List(0) {}$/;"	f	class:llvm::MCRegisterInfo::DiffListIterator
DiffListIterator	MC/MCRegisterInfo.h	/^  class DiffListIterator {$/;"	c	class:llvm::MCRegisterInfo
DiffLists	MC/MCRegisterInfo.h	/^  const uint16_t *DiffLists;                  \/\/ Pointer to the difflists array$/;"	m	class:llvm::MCRegisterInfo
DiffProcessState	Support/IntegersSubsetMapping.h	/^  enum DiffProcessState {$/;"	g	class:llvm::IntegersSubsetMapping
DiffStateMachine	Support/IntegersSubsetMapping.h	/^    DiffStateMachine(MappingTy *L,$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
DiffStateMachine	Support/IntegersSubsetMapping.h	/^  class DiffStateMachine {$/;"	c	class:llvm::IntegersSubsetMapping
DirIndex	MC/MCDwarf.h	/^    unsigned DirIndex;$/;"	m	class:llvm::MCDwarfFile
DirIterState	Support/FileSystem.h	/^    DirIterState()$/;"	f	struct:llvm::sys::fs::detail::DirIterState
DirIterState	Support/FileSystem.h	/^  struct DirIterState : public RefCountedBase<DirIterState> {$/;"	s	namespace:llvm::sys::fs::detail
DirSet	Analysis/DependenceAnalysis.h	/^      unsigned char DirSet;$/;"	m	struct:llvm::DependenceAnalysis::BoundInfo
Direction	Analysis/DependenceAnalysis.h	/^      unsigned char Direction : 3; \/\/ Init to ALL, then refine.$/;"	m	struct:llvm::Dependence::DVEntry
Direction	Analysis/DependenceAnalysis.h	/^      unsigned char Direction;$/;"	m	struct:llvm::DependenceAnalysis::BoundInfo
DirectiveHandler	MC/MCParser/MCAsmParser.h	/^  typedef bool (*DirectiveHandler)(MCAsmParserExtension*, StringRef, SMLoc);$/;"	t	class:llvm::MCAsmParser
DisInfo	MC/MCDisassembler.h	/^  void *DisInfo;$/;"	m	class:llvm::MCDisassembler
DisableGVCompilation	ExecutionEngine/ExecutionEngine.h	/^  void DisableGVCompilation(bool Disabled = true) {$/;"	f	class:llvm::ExecutionEngine
DisableLazyCompilation	ExecutionEngine/ExecutionEngine.h	/^  void DisableLazyCompilation(bool Disabled = true) {$/;"	f	class:llvm::ExecutionEngine
DisableSimplifyLibCalls	Transforms/IPO/PassManagerBuilder.h	/^  bool DisableSimplifyLibCalls;$/;"	m	class:llvm::PassManagerBuilder
DisableSymbolSearching	ExecutionEngine/ExecutionEngine.h	/^  void DisableSymbolSearching(bool Disabled = true) {$/;"	f	class:llvm::ExecutionEngine
DisableUnitAtATime	Transforms/IPO/PassManagerBuilder.h	/^  bool DisableUnitAtATime;$/;"	m	class:llvm::PassManagerBuilder
DisableUnrollLoops	Transforms/IPO/PassManagerBuilder.h	/^  bool DisableUnrollLoops;$/;"	m	class:llvm::PassManagerBuilder
DisableVerify	CodeGen/Passes.h	/^  bool DisableVerify;$/;"	m	class:llvm::TargetPassConfig
DisallowedFlagMask	DefaultPasses.h	/^    DisallowedFlagMask=0xff0000,$/;"	e	enum:llvm::StandardPass::OptimizationFlagComponents
DisallowedFlagShift	DefaultPasses.h	/^    DisallowedFlagShift=16$/;"	e	enum:llvm::StandardPass::OptimizationFlagComponents
DisallowedFlags	DefaultPasses.h	/^  static unsigned DisallowedFlags(unsigned flags) {$/;"	f	class:llvm::StandardPass
Discriminator	MC/MCDwarf.h	/^    unsigned Discriminator;$/;"	m	class:llvm::MCDwarfLoc
Distance	Analysis/DependenceAnalysis.h	/^      const SCEV *Distance; \/\/ NULL implies no distance available.$/;"	m	struct:llvm::Dependence::DVEntry
Distance	Analysis/DependenceAnalysis.h	/^      enum ConstraintKind { Empty, Point, Distance, Line, Any } Kind;$/;"	e	enum:llvm::DependenceAnalysis::Constraint::ConstraintKind
DistanceMap	CodeGen/LiveVariables.h	/^  DenseMap<MachineInstr*, unsigned> DistanceMap;$/;"	m	class:llvm::LiveVariables
Div	MC/MCExpr.h	/^    Div,  \/\/\/< Signed division.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
DoPHITranslation	Value.h	/^  const Value *DoPHITranslation(const BasicBlock *CurBB,$/;"	f	class:llvm::Value
Doc	Support/YAMLParser.h	/^  OwningPtr<Document> &Doc;$/;"	m	class:llvm::yaml::Node
Doc	Support/YAMLParser.h	/^  OwningPtr<Document> *Doc;$/;"	m	class:llvm::yaml::document_iterator
Document	Support/YAMLParser.h	/^class Document {$/;"	c	namespace:llvm::yaml
DoesNot	Analysis/LibCallSemantics.h	/^      DoesNot$/;"	e	enum:llvm::LibCallFunctionInfo::__anon28
DoesNotAccessMemory	Analysis/AliasAnalysis.h	/^    DoesNotAccessMemory = Nowhere | NoModRef,$/;"	e	enum:llvm::AliasAnalysis::ModRefBehavior
DoesNotDominateBlock	Analysis/ScalarEvolution.h	/^      DoesNotDominateBlock,  \/\/\/< The SCEV does not dominate the block.$/;"	e	enum:llvm::ScalarEvolution::BlockDisposition
DoesNotReturn	Target/TargetLowering.h	/^    bool DoesNotReturn     : 1;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
DoesOnly	Analysis/LibCallSemantics.h	/^      DoesOnly,$/;"	e	enum:llvm::LibCallFunctionInfo::__anon28
Dollar	MC/MCParser/MCAsmLexer.h	/^    Star, Dot, Comma, Dollar, Equal, EqualEqual,$/;"	e	enum:llvm::AsmToken::TokenKind
DomSetMapType	Analysis/DominanceFrontier.h	/^  typedef std::map<BasicBlock*, DomSetType> DomSetMapType; \/\/ Dom set map$/;"	t	class:llvm::DominanceFrontierBase
DomSetType	Analysis/DominanceFrontier.h	/^  typedef std::set<BasicBlock*>             DomSetType;    \/\/ Dom set for a bb$/;"	t	class:llvm::DominanceFrontierBase
DomTree	CodeGen/LiveIntervalAnalysis.h	/^    MachineDominatorTree *DomTree;$/;"	m	class:llvm::LiveIntervals
DomTreeNode	Analysis/Dominators.h	/^typedef DomTreeNodeBase<BasicBlock> DomTreeNode;$/;"	t	namespace:llvm
DomTreeNodeBase	Analysis/Dominators.h	/^  DomTreeNodeBase(NodeT *BB, DomTreeNodeBase<NodeT> *iDom)$/;"	f	class:llvm::DomTreeNodeBase
DomTreeNodeBase	Analysis/Dominators.h	/^class DomTreeNodeBase {$/;"	c	namespace:llvm
DomTreeNodeMapType	Analysis/Dominators.h	/^  typedef DenseMap<NodeT*, DomTreeNodeBase<NodeT>*> DomTreeNodeMapType;$/;"	t	class:llvm::DominatorTreeBase
DomTreeNodes	Analysis/Dominators.h	/^  DomTreeNodeMapType DomTreeNodes;$/;"	m	class:llvm::DominatorTreeBase
DominanceFrontier	Analysis/DominanceFrontier.h	/^  DominanceFrontier() :$/;"	f	class:llvm::DominanceFrontier
DominanceFrontier	Analysis/DominanceFrontier.h	/^class DominanceFrontier : public DominanceFrontierBase {$/;"	c	namespace:llvm
DominanceFrontierBase	Analysis/DominanceFrontier.h	/^  DominanceFrontierBase(char &ID, bool isPostDom)$/;"	f	class:llvm::DominanceFrontierBase
DominanceFrontierBase	Analysis/DominanceFrontier.h	/^class DominanceFrontierBase : public FunctionPass {$/;"	c	namespace:llvm
DominatedBy	Analysis/Dominators.h	/^  bool DominatedBy(const DomTreeNodeBase<NodeT> *other) const {$/;"	f	class:llvm::DomTreeNodeBase
DominatesBlock	Analysis/ScalarEvolution.h	/^      DominatesBlock,        \/\/\/< The SCEV dominates the block.$/;"	e	enum:llvm::ScalarEvolution::BlockDisposition
DominatorBase	Analysis/Dominators.h	/^  inline explicit DominatorBase(bool isPostDom) :$/;"	f	class:llvm::DominatorBase
DominatorBase	Analysis/Dominators.h	/^class DominatorBase {$/;"	c	namespace:llvm
DominatorTree	Analysis/Dominators.h	/^  DominatorTree() : FunctionPass(ID) {$/;"	f	class:llvm::DominatorTree
DominatorTree	Analysis/Dominators.h	/^class DominatorTree : public FunctionPass {$/;"	c	namespace:llvm
DominatorTreeBase	Analysis/Dominators.h	/^  explicit DominatorTreeBase(bool isPostDom)$/;"	f	class:llvm::DominatorTreeBase
DominatorTreeBase	Analysis/Dominators.h	/^class DominatorTreeBase : public DominatorBase<NodeT> {$/;"	c	namespace:llvm
Dot	MC/MCParser/MCAsmLexer.h	/^    Star, Dot, Comma, Dollar, Equal, EqualEqual,$/;"	e	enum:llvm::AsmToken::TokenKind
Double	Intrinsics.h	/^      Void, MMX, Metadata, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
DoubleToBits	Support/MathExtras.h	/^inline uint64_t DoubleToBits(double Double) {$/;"	f	namespace:llvm
DoubleTyID	Type.h	/^    DoubleTyID,      \/\/\/<  3: 64-bit floating point type$/;"	e	enum:llvm::Type::TypeID
DoubleVal	ExecutionEngine/GenericValue.h	/^    double          DoubleVal;$/;"	m	union:llvm::GenericValue::__anon52
DragonFly	ADT/Triple.h	/^    DragonFly,$/;"	e	enum:llvm::Triple::OSType
DrectveSection	MC/MCObjectFileInfo.h	/^  const MCSection *DrectveSection;$/;"	m	class:llvm::MCObjectFileInfo
DropRef	Analysis/CallGraph.h	/^  void DropRef() { --NumReferences; }$/;"	f	class:llvm::CallGraphNode
Dst	Analysis/DependenceAnalysis.h	/^      const SCEV *Dst;$/;"	m	struct:llvm::DependenceAnalysis::Subscript
Dst	Analysis/DependenceAnalysis.h	/^    const Instruction *Src, *Dst;$/;"	m	class:llvm::Dependence
Dwarf2LRegs	MC/MCRegisterInfo.h	/^  const DwarfLLVMRegPair *Dwarf2LRegs;        \/\/ Dwarf to LLVM regs mapping$/;"	m	class:llvm::MCRegisterInfo
Dwarf2LRegsSize	MC/MCRegisterInfo.h	/^  unsigned Dwarf2LRegsSize;$/;"	m	class:llvm::MCRegisterInfo
DwarfARangesSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfARangesSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfAbbrevSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfAbbrevSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfAccelNamesSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfAccelNamesSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfAccelNamespaceSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfAccelNamespaceSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfAccelObjCSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfAccelObjCSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfAccelTypesSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfAccelTypesSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfCFI	MC/MCAsmInfo.h	/^    enum ExceptionsType { None, DwarfCFI, SjLj, ARM, Win64 };$/;"	e	enum:llvm::ExceptionHandling::ExceptionsType
DwarfDebugFlags	MC/MCContext.h	/^    StringRef DwarfDebugFlags;$/;"	m	class:llvm::MCContext
DwarfDebugInlineSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfDebugInlineSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfFrameSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfFrameSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfInfoSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfInfoSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfLLVMRegPair	MC/MCRegisterInfo.h	/^  struct DwarfLLVMRegPair {$/;"	s	class:llvm::MCRegisterInfo
DwarfLineSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfLineSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfLocSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfLocSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfLocSeen	MC/MCContext.h	/^    bool DwarfLocSeen;$/;"	m	class:llvm::MCContext
DwarfMacroInfoSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfMacroInfoSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfPubTypesSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfPubTypesSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfRangesSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfRangesSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfRegNumForCFI	MC/MCAsmInfo.h	/^    bool DwarfRegNumForCFI;  \/\/ Defaults to false;$/;"	m	class:llvm::MCAsmInfo
DwarfSectionOffsetDirective	MC/MCAsmInfo.h	/^    const char* DwarfSectionOffsetDirective; \/\/ Defaults to NULL$/;"	m	class:llvm::MCAsmInfo
DwarfStrSection	MC/MCObjectFileInfo.h	/^  const MCSection *DwarfStrSection;$/;"	m	class:llvm::MCObjectFileInfo
DwarfUsesInlineInfoSection	MC/MCAsmInfo.h	/^    bool DwarfUsesInlineInfoSection;         \/\/ Defaults to false.$/;"	m	class:llvm::MCAsmInfo
DwarfUsesRelocationsAcrossSections	MC/MCAsmInfo.h	/^    bool DwarfUsesRelocationsAcrossSections;$/;"	m	class:llvm::MCAsmInfo
Dyld	ExecutionEngine/RuntimeDyld.h	/^  RuntimeDyldImpl *Dyld;$/;"	m	class:llvm::RuntimeDyld
DynPimpl	Object/ELF.h	/^  DataRefImpl DynPimpl;$/;"	m	class:llvm::object::DynRefImpl
DynRef	Object/ELF.h	/^  typedef DynRefImpl<target_endianness, is64Bits> DynRef;$/;"	t	class:llvm::object::ELFObjectFile
DynRefImpl	Object/ELF.h	/^                 ::DynRefImpl(DataRefImpl DynP, const OwningType *Owner)$/;"	f	class:llvm::object::DynRefImpl
DynRefImpl	Object/ELF.h	/^  DynRefImpl() : OwningObject(NULL) { }$/;"	f	class:llvm::object::DynRefImpl
DynRefImpl	Object/ELF.h	/^class DynRefImpl {$/;"	c	namespace:llvm::object
DynamicLibrary	Support/DynamicLibrary.h	/^    explicit DynamicLibrary(void *data = &Invalid) : Data(data) {}$/;"	f	class:llvm::sys::DynamicLibrary
DynamicLibrary	Support/DynamicLibrary.h	/^  class DynamicLibrary {$/;"	c	namespace:llvm::sys
DynamicNoPIC	Support/CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	e	enum:llvm::Reloc::Model
DysymtabLoadCommand	Object/MachOFormat.h	/^  struct DysymtabLoadCommand {$/;"	s	namespace:llvm::object::macho
DysymtabLoadCommandSize	Object/MachOFormat.h	/^    DysymtabLoadCommandSize = 80,$/;"	e	enum:llvm::object::macho::StructureSizes
E2BIG	Support/system_error.h	250;"	d
EABI	ADT/Triple.h	/^    EABI,$/;"	e	enum:llvm::Triple::EnvironmentType
EACCES	Support/system_error.h	421;"	d
EADDRINUSE	Support/system_error.h	241;"	d
EADDRNOTAVAIL	Support/system_error.h	244;"	d
EAFNOSUPPORT	Support/system_error.h	238;"	d
EAGAIN	Support/system_error.h	436;"	d
EALREADY	Support/system_error.h	271;"	d
EARLY_CLOBBER	MC/MCInstrDesc.h	/^    EARLY_CLOBBER   \/\/ Operand is an early clobber register operand$/;"	e	enum:llvm::MCOI::OperandConstraint
EAX	Support/Solaris.h	26;"	d
EBADF	Support/system_error.h	259;"	d
EBADMSG	Support/system_error.h	262;"	d
EBP	Support/Solaris.h	31;"	d
EBUSY	Support/system_error.h	286;"	d
EBX	Support/Solaris.h	29;"	d
EC	ADT/IntEqClasses.h	/^  SmallVector<unsigned, 8> EC;$/;"	m	class:llvm::IntEqClasses
EC	CodeGen/EdgeBundles.h	/^  IntEqClasses EC;$/;"	m	class:llvm::EdgeBundles
ECANCELED	Support/system_error.h	403;"	d
ECHILD	Support/system_error.h	349;"	d
ECONNABORTED	Support/system_error.h	268;"	d
ECONNREFUSED	Support/system_error.h	274;"	d
ECONNRESET	Support/system_error.h	277;"	d
ECValue	ADT/EquivalenceClasses.h	/^    ECValue(const ECValue &RHS) : Leader(this), Next((ECValue*)(intptr_t)1),$/;"	f	class:llvm::EquivalenceClasses::ECValue
ECValue	ADT/EquivalenceClasses.h	/^    ECValue(const ElemTy &Elt)$/;"	f	class:llvm::EquivalenceClasses::ECValue
ECValue	ADT/EquivalenceClasses.h	/^  class ECValue {$/;"	c	class:llvm::EquivalenceClasses
ECX	Support/Solaris.h	27;"	d
EDEADLK	Support/system_error.h	433;"	d
EDESTADDRREQ	Support/system_error.h	283;"	d
EDI	Support/Solaris.h	33;"	d
EDINSTINFO_H	MC/EDInstInfo.h	10;"	d
EDIS_MAX_OPERANDS	MC/EDInstInfo.h	16;"	d
EDIS_MAX_SYNTAXES	MC/EDInstInfo.h	17;"	d
EDInstInfo	MC/EDInstInfo.h	/^struct EDInstInfo {$/;"	s	namespace:llvm
EDOM	Support/system_error.h	253;"	d
EDX	Support/Solaris.h	28;"	d
EE	ExecutionEngine/ExecutionEngine.h	/^  ExecutionEngine &EE;$/;"	m	class:llvm::ExecutionEngineState
EERegisterFn	ExecutionEngine/ExecutionEngine.h	/^  typedef void (*EERegisterFn)(void*);$/;"	t	class:llvm::ExecutionEngine
EEState	ExecutionEngine/ExecutionEngine.h	/^  ExecutionEngineState EEState;$/;"	m	class:llvm::ExecutionEngine
EEXIST	Support/system_error.h	295;"	d
EE_MACHINE_CODE_INFO_H	CodeGen/MachineCodeInfo.h	18;"	d
EFAULT	Support/system_error.h	256;"	d
EFBIG	Support/system_error.h	298;"	d
EFL	Support/Solaris.h	36;"	d
EF_ARM_EABIMASK	Support/ELF.h	/^enum { EF_ARM_EABIMASK = 0xFF000000U };$/;"	e	enum:llvm::ELF::__anon93
EF_MIPS_ARCH	Support/ELF.h	/^  EF_MIPS_ARCH      = 0xf0000000  \/\/ Mask for applying EF_MIPS_ARCH_ variant$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_ARCH_1	Support/ELF.h	/^  EF_MIPS_ARCH_1    = 0x00000000, \/\/ MIPS1 instruction set$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_ARCH_2	Support/ELF.h	/^  EF_MIPS_ARCH_2    = 0x10000000, \/\/ MIPS2 instruction set$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_ARCH_3	Support/ELF.h	/^  EF_MIPS_ARCH_3    = 0x20000000, \/\/ MIPS3 instruction set$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_ARCH_32	Support/ELF.h	/^  EF_MIPS_ARCH_32   = 0x50000000, \/\/ MIPS32 instruction set per linux not elf.h$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_ARCH_32R2	Support/ELF.h	/^  EF_MIPS_ARCH_32R2 = 0x70000000, \/\/ mips32r2$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_ARCH_4	Support/ELF.h	/^  EF_MIPS_ARCH_4    = 0x30000000, \/\/ MIPS4 instruction set$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_ARCH_5	Support/ELF.h	/^  EF_MIPS_ARCH_5    = 0x40000000, \/\/ MIPS5 instruction set$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_ARCH_64	Support/ELF.h	/^  EF_MIPS_ARCH_64   = 0x60000000, \/\/ MIPS64 instruction set per linux not elf.h$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_ARCH_64R2	Support/ELF.h	/^  EF_MIPS_ARCH_64R2 = 0x80000000, \/\/ mips64r2$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_CPIC	Support/ELF.h	/^  EF_MIPS_CPIC      = 0x00000004, \/\/ Call object with Position independent code$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_NOREORDER	Support/ELF.h	/^  EF_MIPS_NOREORDER = 0x00000001, \/\/ Don't reorder instructions$/;"	e	enum:llvm::ELF::__anon95
EF_MIPS_PIC	Support/ELF.h	/^  EF_MIPS_PIC       = 0x00000002, \/\/ Position independent code$/;"	e	enum:llvm::ELF::__anon95
EHDwarf2LRegs	MC/MCRegisterInfo.h	/^  const DwarfLLVMRegPair *EHDwarf2LRegs;      \/\/ Dwarf to LLVM regs mapping EH$/;"	m	class:llvm::MCRegisterInfo
EHDwarf2LRegsSize	MC/MCRegisterInfo.h	/^  unsigned EHDwarf2LRegsSize;$/;"	m	class:llvm::MCRegisterInfo
EHFrameSection	MC/MCObjectFileInfo.h	/^  const MCSection *EHFrameSection;$/;"	m	class:llvm::MCObjectFileInfo
EHL2DwarfRegs	MC/MCRegisterInfo.h	/^  const DwarfLLVMRegPair *EHL2DwarfRegs;      \/\/ LLVM to Dwarf regs mapping EH$/;"	m	class:llvm::MCRegisterInfo
EHL2DwarfRegsSize	MC/MCRegisterInfo.h	/^  unsigned EHL2DwarfRegsSize;$/;"	m	class:llvm::MCRegisterInfo
EHLabelSDNode	CodeGen/SelectionDAGNodes.h	/^  EHLabelSDNode(DebugLoc dl, SDValue ch, MCSymbol *L)$/;"	f	class:llvm::EHLabelSDNode
EHLabelSDNode	CodeGen/SelectionDAGNodes.h	/^class EHLabelSDNode : public SDNode {$/;"	c	namespace:llvm
EHOSTUNREACH	Support/system_error.h	307;"	d
EHSELECTION	CodeGen/ISDOpcodes.h	/^    EHSELECTION,$/;"	e	enum:llvm::ISD::NodeType
EHSectionFlags	MC/MCObjectFileInfo.h	/^  unsigned EHSectionFlags;$/;"	m	class:llvm::MCObjectFileInfo
EHSectionType	MC/MCObjectFileInfo.h	/^  unsigned EHSectionType;$/;"	m	class:llvm::MCObjectFileInfo
EH_LABEL	CodeGen/ISDOpcodes.h	/^    EH_LABEL,$/;"	e	enum:llvm::ISD::NodeType
EH_LABEL	Target/TargetOpcodes.h	/^    EH_LABEL = 3,$/;"	e	enum:llvm::TargetOpcode::__anon139
EH_RETURN	CodeGen/ISDOpcodes.h	/^    EH_RETURN,$/;"	e	enum:llvm::ISD::NodeType
EH_SJLJ_LONGJMP	CodeGen/ISDOpcodes.h	/^    EH_SJLJ_LONGJMP,$/;"	e	enum:llvm::ISD::NodeType
EH_SJLJ_SETJMP	CodeGen/ISDOpcodes.h	/^    EH_SJLJ_SETJMP,$/;"	e	enum:llvm::ISD::NodeType
EIDRM	Support/system_error.h	310;"	d
EILSEQ	Support/system_error.h	313;"	d
EINPROGRESS	Support/system_error.h	406;"	d
EINTR	Support/system_error.h	319;"	d
EINVAL	Support/system_error.h	322;"	d
EIO	Support/system_error.h	328;"	d
EIP	Support/Solaris.h	34;"	d
EISCONN	Support/system_error.h	247;"	d
EISDIR	Support/system_error.h	331;"	d
EI_ABIVERSION	Support/ELF.h	/^  EI_ABIVERSION = 8,          \/\/ ABI version.$/;"	e	enum:llvm::ELF::__anon81
EI_CLASS	Support/ELF.h	/^  EI_CLASS      = 4,          \/\/ File class.$/;"	e	enum:llvm::ELF::__anon81
EI_DATA	Support/ELF.h	/^  EI_DATA       = 5,          \/\/ Data encoding.$/;"	e	enum:llvm::ELF::__anon81
EI_MAG0	Support/ELF.h	/^  EI_MAG0       = 0,          \/\/ File identification index.$/;"	e	enum:llvm::ELF::__anon81
EI_MAG1	Support/ELF.h	/^  EI_MAG1       = 1,          \/\/ File identification index.$/;"	e	enum:llvm::ELF::__anon81
EI_MAG2	Support/ELF.h	/^  EI_MAG2       = 2,          \/\/ File identification index.$/;"	e	enum:llvm::ELF::__anon81
EI_MAG3	Support/ELF.h	/^  EI_MAG3       = 3,          \/\/ File identification index.$/;"	e	enum:llvm::ELF::__anon81
EI_NIDENT	Support/ELF.h	/^  EI_NIDENT     = 16          \/\/ Number of bytes in e_ident.$/;"	e	enum:llvm::ELF::__anon81
EI_OSABI	Support/ELF.h	/^  EI_OSABI      = 7,          \/\/ OS\/ABI identification.$/;"	e	enum:llvm::ELF::__anon81
EI_PAD	Support/ELF.h	/^  EI_PAD        = 9,          \/\/ Start of padding bytes.$/;"	e	enum:llvm::ELF::__anon81
EI_VERSION	Support/ELF.h	/^  EI_VERSION    = 6,          \/\/ File version.$/;"	e	enum:llvm::ELF::__anon81
EK_BlockAddress	CodeGen/MachineJumpTableInfo.h	/^    EK_BlockAddress,$/;"	e	enum:llvm::MachineJumpTableInfo::JTEntryKind
EK_Custom32	CodeGen/MachineJumpTableInfo.h	/^    EK_Custom32$/;"	e	enum:llvm::MachineJumpTableInfo::JTEntryKind
EK_GPRel32BlockAddress	CodeGen/MachineJumpTableInfo.h	/^    EK_GPRel32BlockAddress,$/;"	e	enum:llvm::MachineJumpTableInfo::JTEntryKind
EK_GPRel64BlockAddress	CodeGen/MachineJumpTableInfo.h	/^    EK_GPRel64BlockAddress,$/;"	e	enum:llvm::MachineJumpTableInfo::JTEntryKind
EK_Inline	CodeGen/MachineJumpTableInfo.h	/^    EK_Inline,$/;"	e	enum:llvm::MachineJumpTableInfo::JTEntryKind
EK_LabelDifference32	CodeGen/MachineJumpTableInfo.h	/^    EK_LabelDifference32,$/;"	e	enum:llvm::MachineJumpTableInfo::JTEntryKind
ELF	ADT/Triple.h	/^    ELF$/;"	e	enum:llvm::Triple::EnvironmentType
ELF	Support/ELF.h	/^namespace ELF {$/;"	n	namespace:llvm
ELFCLASS32	Support/ELF.h	/^  ELFCLASS32 = 1, \/\/ 32-bit object file$/;"	e	enum:llvm::ELF::__anon85
ELFCLASS32	Target/TargetELFWriterInfo.h	/^      ELFCLASS32 = 1, \/\/ 32-bit object file$/;"	e	enum:llvm::TargetELFWriterInfo::__anon141
ELFCLASS64	Support/ELF.h	/^  ELFCLASS64 = 2  \/\/ 64-bit object file$/;"	e	enum:llvm::ELF::__anon85
ELFCLASS64	Target/TargetELFWriterInfo.h	/^      ELFCLASS64 = 2  \/\/ 64-bit object file$/;"	e	enum:llvm::TargetELFWriterInfo::__anon141
ELFCLASSNONE	Support/ELF.h	/^  ELFCLASSNONE = 0,$/;"	e	enum:llvm::ELF::__anon85
ELFDATA2LSB	Support/ELF.h	/^  ELFDATA2LSB = 1, \/\/ Little-endian object file$/;"	e	enum:llvm::ELF::__anon86
ELFDATA2LSB	Target/TargetELFWriterInfo.h	/^      ELFDATA2LSB = 1, \/\/ Little-endian object file$/;"	e	enum:llvm::TargetELFWriterInfo::__anon142
ELFDATA2MSB	Support/ELF.h	/^  ELFDATA2MSB = 2  \/\/ Big-endian object file$/;"	e	enum:llvm::ELF::__anon86
ELFDATA2MSB	Target/TargetELFWriterInfo.h	/^      ELFDATA2MSB = 2  \/\/ Big-endian object file$/;"	e	enum:llvm::TargetELFWriterInfo::__anon142
ELFDATANONE	Support/ELF.h	/^  ELFDATANONE = 0, \/\/ Invalid data encoding.$/;"	e	enum:llvm::ELF::__anon86
ELFDataTypeTypedefHelper	Object/ELF.h	/^struct ELFDataTypeTypedefHelper<target_endianness, false>$/;"	s	namespace:llvm::object
ELFDataTypeTypedefHelper	Object/ELF.h	/^struct ELFDataTypeTypedefHelper<target_endianness, true>$/;"	s	namespace:llvm::object
ELFDataTypeTypedefHelperCommon	Object/ELF.h	/^struct ELFDataTypeTypedefHelperCommon {$/;"	s	namespace:llvm::object
ELFOSABI_AIX	Support/ELF.h	/^  ELFOSABI_AIX = 7,           \/\/ AIX$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_ARM	Support/ELF.h	/^  ELFOSABI_ARM = 97,          \/\/ ARM$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_AROS	Support/ELF.h	/^  ELFOSABI_AROS = 15,         \/\/ AROS$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_C6000_ELFABI	Support/ELF.h	/^  ELFOSABI_C6000_ELFABI = 64, \/\/ Bare-metal TMS320C6000$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_C6000_LINUX	Support/ELF.h	/^  ELFOSABI_C6000_LINUX = 65,  \/\/ Linux TMS320C6000$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_FENIXOS	Support/ELF.h	/^  ELFOSABI_FENIXOS = 16,      \/\/ FenixOS$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_FREEBSD	Support/ELF.h	/^  ELFOSABI_FREEBSD = 9,       \/\/ FreeBSD$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_HPUX	Support/ELF.h	/^  ELFOSABI_HPUX = 1,          \/\/ HP-UX operating system$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_HURD	Support/ELF.h	/^  ELFOSABI_HURD = 4,          \/\/ GNU\/Hurd$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_IRIX	Support/ELF.h	/^  ELFOSABI_IRIX = 8,          \/\/ IRIX$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_LINUX	Support/ELF.h	/^  ELFOSABI_LINUX = 3,         \/\/ GNU\/Linux$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_MODESTO	Support/ELF.h	/^  ELFOSABI_MODESTO = 11,      \/\/ Novell Modesto$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_NETBSD	Support/ELF.h	/^  ELFOSABI_NETBSD = 2,        \/\/ NetBSD$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_NONE	Support/ELF.h	/^  ELFOSABI_NONE = 0,          \/\/ UNIX System V ABI$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_NSK	Support/ELF.h	/^  ELFOSABI_NSK = 14,          \/\/ Hewlett-Packard Non-Stop Kernel$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_OPENBSD	Support/ELF.h	/^  ELFOSABI_OPENBSD = 12,      \/\/ OpenBSD$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_OPENVMS	Support/ELF.h	/^  ELFOSABI_OPENVMS = 13,      \/\/ OpenVMS$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_SOLARIS	Support/ELF.h	/^  ELFOSABI_SOLARIS = 6,       \/\/ Solaris$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_STANDALONE	Support/ELF.h	/^  ELFOSABI_STANDALONE = 255   \/\/ Standalone (embedded) application$/;"	e	enum:llvm::ELF::__anon87
ELFOSABI_TRU64	Support/ELF.h	/^  ELFOSABI_TRU64 = 10,        \/\/ TRU64 UNIX$/;"	e	enum:llvm::ELF::__anon87
ELFObjectFile	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::ELFObjectFile(MemoryBuffer *Object$/;"	f	class:llvm::object::ELFObjectFile
ELFObjectFile	Object/ELF.h	/^class ELFObjectFile : public ObjectFile {$/;"	c	namespace:llvm::object
ELFRelocationEntry	MC/MCELFObjectWriter.h	/^  ELFRelocationEntry()$/;"	f	struct:llvm::ELFRelocationEntry
ELFRelocationEntry	MC/MCELFObjectWriter.h	/^  ELFRelocationEntry(uint64_t RelocOffset, int Idx, unsigned RelType,$/;"	f	struct:llvm::ELFRelocationEntry
ELFRelocationEntry	MC/MCELFObjectWriter.h	/^struct ELFRelocationEntry {$/;"	s	namespace:llvm
ELFRelocationIterator	Object/ELF.h	/^    ELFRelocationIterator() : Section(0), Current(0) {}$/;"	f	class:llvm::object::ELFObjectFile::ELFRelocationIterator
ELFRelocationIterator	Object/ELF.h	/^    ELFRelocationIterator(const Elf_Shdr *Sec, const char *Start)$/;"	f	class:llvm::object::ELFObjectFile::ELFRelocationIterator
ELFRelocationIterator	Object/ELF.h	/^  class ELFRelocationIterator {$/;"	c	class:llvm::object::ELFObjectFile
ELFUniquingMap	MC/MCContext.h	/^    void *MachOUniquingMap, *ELFUniquingMap, *COFFUniquingMap;$/;"	m	class:llvm::MCContext
ELF_Core_FileType	Support/PathV1.h	/^    ELF_Core_FileType,                 \/\/\/< ELF core image$/;"	e	enum:llvm::sys::LLVMFileType
ELF_Executable_FileType	Support/PathV1.h	/^    ELF_Executable_FileType,           \/\/\/< ELF Executable image$/;"	e	enum:llvm::sys::LLVMFileType
ELF_Other_Shift	MC/MCELFSymbolFlags.h	/^    ELF_Other_Shift = 10 \/\/ Shift value for other flags.$/;"	e	enum:llvm::__anon65
ELF_Other_ThumbFunc	MC/MCELFSymbolFlags.h	/^      ELF_Other_ThumbFunc = (2                << ELF_Other_Shift)$/;"	e	enum:llvm::SymbolFlags
ELF_Other_Weakref	MC/MCELFSymbolFlags.h	/^      ELF_Other_Weakref = (1                  << ELF_Other_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_Relocatable_FileType	Support/PathV1.h	/^    ELF_Relocatable_FileType,          \/\/\/< ELF Relocatable object file$/;"	e	enum:llvm::sys::LLVMFileType
ELF_STB_Global	MC/MCELFSymbolFlags.h	/^      ELF_STB_Global    = (ELF::STB_GLOBAL    << ELF_STB_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STB_Hiproc	MC/MCELFSymbolFlags.h	/^      ELF_STB_Hiproc    = (ELF::STB_HIPROC    << ELF_STB_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STB_Local	MC/MCELFSymbolFlags.h	/^    ELF_STB_Local     = (ELF::STB_LOCAL     << ELF_STB_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STB_Loproc	MC/MCELFSymbolFlags.h	/^      ELF_STB_Loproc    = (ELF::STB_LOPROC    << ELF_STB_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STB_Shift	MC/MCELFSymbolFlags.h	/^    ELF_STB_Shift   = 4, \/\/ Shift value for STB_* flags.$/;"	e	enum:llvm::__anon65
ELF_STB_Weak	MC/MCELFSymbolFlags.h	/^      ELF_STB_Weak      = (ELF::STB_WEAK      << ELF_STB_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STT_Common	MC/MCELFSymbolFlags.h	/^      ELF_STT_Common    = (ELF::STT_COMMON    << ELF_STT_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STT_File	MC/MCELFSymbolFlags.h	/^      ELF_STT_File      = (ELF::STT_FILE      << ELF_STT_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STT_Func	MC/MCELFSymbolFlags.h	/^      ELF_STT_Func      = (ELF::STT_FUNC      << ELF_STT_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STT_Hiproc	MC/MCELFSymbolFlags.h	/^      ELF_STT_Hiproc    = (ELF::STT_HIPROC    << ELF_STT_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STT_Loproc	MC/MCELFSymbolFlags.h	/^      ELF_STT_Loproc    = (ELF::STT_LOPROC    << ELF_STT_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STT_Notype	MC/MCELFSymbolFlags.h	/^      ELF_STT_Notype    = (ELF::STT_NOTYPE    << ELF_STT_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STT_Object	MC/MCELFSymbolFlags.h	/^      ELF_STT_Object    = (ELF::STT_OBJECT    << ELF_STT_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STT_Section	MC/MCELFSymbolFlags.h	/^      ELF_STT_Section   = (ELF::STT_SECTION   << ELF_STT_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STT_Shift	MC/MCELFSymbolFlags.h	/^    ELF_STT_Shift   = 0, \/\/ Shift value for STT_* flags.$/;"	e	enum:llvm::__anon65
ELF_STT_Tls	MC/MCELFSymbolFlags.h	/^      ELF_STT_Tls       = (ELF::STT_TLS       << ELF_STT_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STV_Default	MC/MCELFSymbolFlags.h	/^      ELF_STV_Default   = (ELF::STV_DEFAULT   << ELF_STV_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STV_Hidden	MC/MCELFSymbolFlags.h	/^      ELF_STV_Hidden    = (ELF::STV_HIDDEN    << ELF_STV_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STV_Internal	MC/MCELFSymbolFlags.h	/^      ELF_STV_Internal  = (ELF::STV_INTERNAL  << ELF_STV_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STV_Protected	MC/MCELFSymbolFlags.h	/^      ELF_STV_Protected = (ELF::STV_PROTECTED << ELF_STV_Shift),$/;"	e	enum:llvm::SymbolFlags
ELF_STV_Shift	MC/MCELFSymbolFlags.h	/^    ELF_STV_Shift   = 8, \/\/ Shift value for STV_* flags.$/;"	e	enum:llvm::__anon65
ELF_SharedObject_FileType	Support/PathV1.h	/^    ELF_SharedObject_FileType,         \/\/\/< ELF dynamically linked shared lib$/;"	e	enum:llvm::sys::LLVMFileType
ELOOP	Support/system_error.h	463;"	d
EMFILE	Support/system_error.h	457;"	d
EMLINK	Support/system_error.h	460;"	d
EMPTY	TableGen/Record.h	/^  enum UnaryOp { CAST, HEAD, TAIL, EMPTY };$/;"	e	enum:llvm::UnOpInit::UnaryOp
EMSGSIZE	Support/system_error.h	334;"	d
EM_386	Support/ELF.h	/^  EM_386           = 3, \/\/ Intel 386$/;"	e	enum:llvm::ELF::__anon84
EM_386	Target/TargetELFWriterInfo.h	/^      EM_386 = 3,      \/\/ Intel 386$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_486	Support/ELF.h	/^  EM_486           = 6, \/\/ Intel 486 (deprecated)$/;"	e	enum:llvm::ELF::__anon84
EM_486	Target/TargetELFWriterInfo.h	/^      EM_486 = 6,      \/\/ Intel 486 (deprecated)$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_56800EX	Support/ELF.h	/^  EM_56800EX       = 200, \/\/ Freescale 56800EX Digital Signal Controller (DSC)$/;"	e	enum:llvm::ELF::__anon84
EM_68HC05	Support/ELF.h	/^  EM_68HC05        = 72, \/\/ Motorola MC68HC05 Microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_68HC08	Support/ELF.h	/^  EM_68HC08        = 71, \/\/ Motorola MC68HC08 Microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_68HC11	Support/ELF.h	/^  EM_68HC11        = 70, \/\/ Motorola MC68HC11 Microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_68HC12	Support/ELF.h	/^  EM_68HC12        = 53, \/\/ Motorola M68HC12$/;"	e	enum:llvm::ELF::__anon84
EM_68HC16	Support/ELF.h	/^  EM_68HC16        = 69, \/\/ Motorola MC68HC16 Microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_68K	Support/ELF.h	/^  EM_68K           = 4, \/\/ Motorola 68000$/;"	e	enum:llvm::ELF::__anon84
EM_68K	Target/TargetELFWriterInfo.h	/^      EM_68K = 4,      \/\/ Motorola 68000$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_78KOR	Support/ELF.h	/^  EM_78KOR         = 199, \/\/ Renesas 78KOR family$/;"	e	enum:llvm::ELF::__anon84
EM_8051	Support/ELF.h	/^  EM_8051          = 165, \/\/ Intel 8051 and variants$/;"	e	enum:llvm::ELF::__anon84
EM_860	Support/ELF.h	/^  EM_860           = 7, \/\/ Intel 80860$/;"	e	enum:llvm::ELF::__anon84
EM_860	Target/TargetELFWriterInfo.h	/^      EM_860 = 7,      \/\/ Intel 80860$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_88K	Support/ELF.h	/^  EM_88K           = 5, \/\/ Motorola 88000$/;"	e	enum:llvm::ELF::__anon84
EM_88K	Target/TargetELFWriterInfo.h	/^      EM_88K = 5,      \/\/ Motorola 88000$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_960	Support/ELF.h	/^  EM_960           = 19, \/\/ Intel 80960$/;"	e	enum:llvm::ELF::__anon84
EM_ALPHA	Support/ELF.h	/^  EM_ALPHA         = 41, \/\/ DEC Alpha$/;"	e	enum:llvm::ELF::__anon84
EM_ALPHA	Target/TargetELFWriterInfo.h	/^      EM_ALPHA = 41,   \/\/ DEC Alpha$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_ALTERA_NIOS2	Support/ELF.h	/^  EM_ALTERA_NIOS2  = 113, \/\/ Altera Nios II soft-core processor$/;"	e	enum:llvm::ELF::__anon84
EM_ARC	Support/ELF.h	/^  EM_ARC           = 45, \/\/ Argonaut RISC Core$/;"	e	enum:llvm::ELF::__anon84
EM_ARCA	Support/ELF.h	/^  EM_ARCA          = 109, \/\/ Arca RISC Microprocessor$/;"	e	enum:llvm::ELF::__anon84
EM_ARC_COMPACT	Support/ELF.h	/^  EM_ARC_COMPACT   = 93, \/\/ ARC International ARCompact processor (old$/;"	e	enum:llvm::ELF::__anon84
EM_ARC_COMPACT2	Support/ELF.h	/^  EM_ARC_COMPACT2  = 195, \/\/ Synopsys ARCompact V2$/;"	e	enum:llvm::ELF::__anon84
EM_ARM	Support/ELF.h	/^  EM_ARM           = 40, \/\/ ARM$/;"	e	enum:llvm::ELF::__anon84
EM_ARM	Target/TargetELFWriterInfo.h	/^      EM_ARM = 40,     \/\/ ARM$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_AVR	Support/ELF.h	/^  EM_AVR           = 83, \/\/ Atmel AVR 8-bit microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_AVR32	Support/ELF.h	/^  EM_AVR32         = 185, \/\/ Atmel Corporation 32-bit microprocessor family$/;"	e	enum:llvm::ELF::__anon84
EM_BLACKFIN	Support/ELF.h	/^  EM_BLACKFIN      = 106, \/\/ Analog Devices Blackfin (DSP) processor$/;"	e	enum:llvm::ELF::__anon84
EM_C166	Support/ELF.h	/^  EM_C166          = 116, \/\/ Infineon C16x\/XC16x processor$/;"	e	enum:llvm::ELF::__anon84
EM_CE	Support/ELF.h	/^  EM_CE            = 119, \/\/ Freescale Communication Engine RISC core$/;"	e	enum:llvm::ELF::__anon84
EM_CLOUDSHIELD	Support/ELF.h	/^  EM_CLOUDSHIELD   = 192, \/\/ CloudShield architecture family$/;"	e	enum:llvm::ELF::__anon84
EM_COLDFIRE	Support/ELF.h	/^  EM_COLDFIRE      = 52, \/\/ Motorola ColdFire$/;"	e	enum:llvm::ELF::__anon84
EM_COREA_1ST	Support/ELF.h	/^  EM_COREA_1ST     = 193, \/\/ KIPO-KAIST Core-A 1st generation processor family$/;"	e	enum:llvm::ELF::__anon84
EM_COREA_2ND	Support/ELF.h	/^  EM_COREA_2ND     = 194, \/\/ KIPO-KAIST Core-A 2nd generation processor family$/;"	e	enum:llvm::ELF::__anon84
EM_CR	Support/ELF.h	/^  EM_CR            = 103, \/\/ National Semiconductor CompactRISC microprocessor$/;"	e	enum:llvm::ELF::__anon84
EM_CR16	Support/ELF.h	/^  EM_CR16          = 177, \/\/ National Semiconductor CompactRISC CR16 16-bit$/;"	e	enum:llvm::ELF::__anon84
EM_CRAYNV2	Support/ELF.h	/^  EM_CRAYNV2       = 172, \/\/ Cray Inc. NV2 vector architecture$/;"	e	enum:llvm::ELF::__anon84
EM_CRIS	Support/ELF.h	/^  EM_CRIS          = 76, \/\/ Axis Communications 32-bit embedded processor$/;"	e	enum:llvm::ELF::__anon84
EM_CRX	Support/ELF.h	/^  EM_CRX           = 114, \/\/ National Semiconductor CompactRISC CRX$/;"	e	enum:llvm::ELF::__anon84
EM_CUDA	Support/ELF.h	/^  EM_CUDA          = 190, \/\/ NVIDIA CUDA architecture$/;"	e	enum:llvm::ELF::__anon84
EM_CYPRESS_M8C	Support/ELF.h	/^  EM_CYPRESS_M8C   = 161, \/\/ Cypress M8C microprocessor$/;"	e	enum:llvm::ELF::__anon84
EM_D10V	Support/ELF.h	/^  EM_D10V          = 85, \/\/ Mitsubishi D10V$/;"	e	enum:llvm::ELF::__anon84
EM_D30V	Support/ELF.h	/^  EM_D30V          = 86, \/\/ Mitsubishi D30V$/;"	e	enum:llvm::ELF::__anon84
EM_DSP24	Support/ELF.h	/^  EM_DSP24         = 136, \/\/ New Japan Radio (NJR) 24-bit DSP Processor$/;"	e	enum:llvm::ELF::__anon84
EM_DSPIC30F	Support/ELF.h	/^  EM_DSPIC30F      = 118, \/\/ Microchip Technology dsPIC30F Digital Signal$/;"	e	enum:llvm::ELF::__anon84
EM_DXP	Support/ELF.h	/^  EM_DXP           = 112, \/\/ Icera Semiconductor Inc. Deep Execution Processor$/;"	e	enum:llvm::ELF::__anon84
EM_ECOG1	Support/ELF.h	/^  EM_ECOG1         = 168, \/\/ Cyan Technology eCOG1X family$/;"	e	enum:llvm::ELF::__anon84
EM_ECOG16	Support/ELF.h	/^  EM_ECOG16        = 176, \/\/ Cyan Technology eCOG16 family$/;"	e	enum:llvm::ELF::__anon84
EM_ECOG1X	Support/ELF.h	/^  EM_ECOG1X        = 168, \/\/ Cyan Technology eCOG1X family$/;"	e	enum:llvm::ELF::__anon84
EM_ECOG2	Support/ELF.h	/^  EM_ECOG2         = 134, \/\/ Cyan Technology eCOG2 microprocessor$/;"	e	enum:llvm::ELF::__anon84
EM_ETPU	Support/ELF.h	/^  EM_ETPU          = 178, \/\/ Freescale Extended Time Processing Unit$/;"	e	enum:llvm::ELF::__anon84
EM_EXCESS	Support/ELF.h	/^  EM_EXCESS        = 111, \/\/ eXcess: 16\/32\/64-bit configurable embedded CPU$/;"	e	enum:llvm::ELF::__anon84
EM_F2MC16	Support/ELF.h	/^  EM_F2MC16        = 104, \/\/ Fujitsu F2MC16$/;"	e	enum:llvm::ELF::__anon84
EM_FIREPATH	Support/ELF.h	/^  EM_FIREPATH      = 78, \/\/ Element 14 64-bit DSP Processor$/;"	e	enum:llvm::ELF::__anon84
EM_FR20	Support/ELF.h	/^  EM_FR20          = 37, \/\/ Fujitsu FR20$/;"	e	enum:llvm::ELF::__anon84
EM_FR30	Support/ELF.h	/^  EM_FR30          = 84, \/\/ Fujitsu FR30$/;"	e	enum:llvm::ELF::__anon84
EM_FX66	Support/ELF.h	/^  EM_FX66          = 66, \/\/ Siemens FX66 microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_H8S	Support/ELF.h	/^  EM_H8S           = 48, \/\/ Hitachi H8S$/;"	e	enum:llvm::ELF::__anon84
EM_H8_300	Support/ELF.h	/^  EM_H8_300        = 46, \/\/ Hitachi H8\/300$/;"	e	enum:llvm::ELF::__anon84
EM_H8_300H	Support/ELF.h	/^  EM_H8_300H       = 47, \/\/ Hitachi H8\/300H$/;"	e	enum:llvm::ELF::__anon84
EM_H8_500	Support/ELF.h	/^  EM_H8_500        = 49, \/\/ Hitachi H8\/500$/;"	e	enum:llvm::ELF::__anon84
EM_HEXAGON	Support/ELF.h	/^  EM_HEXAGON       = 164, \/\/ Qualcomm Hexagon processor$/;"	e	enum:llvm::ELF::__anon84
EM_HEXAGON	Target/TargetELFWriterInfo.h	/^      EM_HEXAGON = 164 \/\/ Qualcomm Hexagon$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_HUANY	Support/ELF.h	/^  EM_HUANY         = 81, \/\/ Harvard University machine-independent object files$/;"	e	enum:llvm::ELF::__anon84
EM_IA_64	Support/ELF.h	/^  EM_IA_64         = 50, \/\/ Intel IA-64 processor architecture$/;"	e	enum:llvm::ELF::__anon84
EM_IP2K	Support/ELF.h	/^  EM_IP2K          = 101, \/\/ Ubicom IP2xxx microcontroller family$/;"	e	enum:llvm::ELF::__anon84
EM_JAVELIN	Support/ELF.h	/^  EM_JAVELIN       = 77, \/\/ Infineon Technologies 32-bit embedded processor$/;"	e	enum:llvm::ELF::__anon84
EM_K10M	Support/ELF.h	/^  EM_K10M          = 181, \/\/ Intel K10M$/;"	e	enum:llvm::ELF::__anon84
EM_L10M	Support/ELF.h	/^  EM_L10M          = 180, \/\/ Intel L10M$/;"	e	enum:llvm::ELF::__anon84
EM_LATTICEMICO32	Support/ELF.h	/^  EM_LATTICEMICO32 = 138, \/\/ RISC processor for Lattice FPGA architecture$/;"	e	enum:llvm::ELF::__anon84
EM_M16C	Support/ELF.h	/^  EM_M16C          = 117, \/\/ Renesas M16C series microprocessors$/;"	e	enum:llvm::ELF::__anon84
EM_M32	Support/ELF.h	/^  EM_M32           = 1, \/\/ AT&T WE 32100$/;"	e	enum:llvm::ELF::__anon84
EM_M32	Target/TargetELFWriterInfo.h	/^      EM_M32 = 1,      \/\/ AT&T WE 32100$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_M32C	Support/ELF.h	/^  EM_M32C          = 120, \/\/ Renesas M32C series microprocessors$/;"	e	enum:llvm::ELF::__anon84
EM_M32R	Support/ELF.h	/^  EM_M32R          = 88, \/\/ Mitsubishi M32R$/;"	e	enum:llvm::ELF::__anon84
EM_MANIK	Support/ELF.h	/^  EM_MANIK         = 171, \/\/ M2000 Reconfigurable RISC Microprocessor$/;"	e	enum:llvm::ELF::__anon84
EM_MAX	Support/ELF.h	/^  EM_MAX           = 102, \/\/ MAX Processor$/;"	e	enum:llvm::ELF::__anon84
EM_MAXQ30	Support/ELF.h	/^  EM_MAXQ30        = 169, \/\/ Dallas Semiconductor MAXQ30 Core Micro-controllers$/;"	e	enum:llvm::ELF::__anon84
EM_MBLAZE	Support/ELF.h	/^  EM_MBLAZE        = 47787 \/\/ Xilinx MicroBlaze$/;"	e	enum:llvm::ELF::__anon84
EM_MCST_ELBRUS	Support/ELF.h	/^  EM_MCST_ELBRUS   = 175, \/\/ MCST Elbrus general purpose hardware architecture$/;"	e	enum:llvm::ELF::__anon84
EM_ME16	Support/ELF.h	/^  EM_ME16          = 59, \/\/ Toyota ME16 processor$/;"	e	enum:llvm::ELF::__anon84
EM_METAG	Support/ELF.h	/^  EM_METAG         = 174, \/\/ Imagination Technologies META processor$/;"	e	enum:llvm::ELF::__anon84
EM_MICROBLAZE	Support/ELF.h	/^  EM_MICROBLAZE    = 189, \/\/ Xilinx MicroBlaze 32-bit RISC soft processor core$/;"	e	enum:llvm::ELF::__anon84
EM_MIPS	Support/ELF.h	/^  EM_MIPS          = 8, \/\/ MIPS R3000$/;"	e	enum:llvm::ELF::__anon84
EM_MIPS	Target/TargetELFWriterInfo.h	/^      EM_MIPS = 8,     \/\/ MIPS R3000$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_MIPS_RS3_LE	Support/ELF.h	/^  EM_MIPS_RS3_LE   = 10, \/\/ MIPS RS3000 Little-endian$/;"	e	enum:llvm::ELF::__anon84
EM_MIPS_X	Support/ELF.h	/^  EM_MIPS_X        = 51, \/\/ Stanford MIPS-X$/;"	e	enum:llvm::ELF::__anon84
EM_MMA	Support/ELF.h	/^  EM_MMA           = 54, \/\/ Fujitsu MMA Multimedia Accelerator$/;"	e	enum:llvm::ELF::__anon84
EM_MMDSP_PLUS	Support/ELF.h	/^  EM_MMDSP_PLUS    = 160, \/\/ STMicroelectronics 64bit VLIW Data Signal Processor$/;"	e	enum:llvm::ELF::__anon84
EM_MMIX	Support/ELF.h	/^  EM_MMIX          = 80, \/\/ Donald Knuth's educational 64-bit processor$/;"	e	enum:llvm::ELF::__anon84
EM_MN10200	Support/ELF.h	/^  EM_MN10200       = 90, \/\/ Matsushita MN10200$/;"	e	enum:llvm::ELF::__anon84
EM_MN10300	Support/ELF.h	/^  EM_MN10300       = 89, \/\/ Matsushita MN10300$/;"	e	enum:llvm::ELF::__anon84
EM_MSP430	Support/ELF.h	/^  EM_MSP430        = 105, \/\/ Texas Instruments embedded microcontroller msp430$/;"	e	enum:llvm::ELF::__anon84
EM_NCPU	Support/ELF.h	/^  EM_NCPU          = 56, \/\/ Sony nCPU embedded RISC processor$/;"	e	enum:llvm::ELF::__anon84
EM_NDR1	Support/ELF.h	/^  EM_NDR1          = 57, \/\/ Denso NDR1 microprocessor$/;"	e	enum:llvm::ELF::__anon84
EM_NDS32	Support/ELF.h	/^  EM_NDS32         = 167, \/\/ Andes Technology compact code size embedded RISC$/;"	e	enum:llvm::ELF::__anon84
EM_NONE	Support/ELF.h	/^  EM_NONE          = 0, \/\/ No machine$/;"	e	enum:llvm::ELF::__anon84
EM_NONE	Target/TargetELFWriterInfo.h	/^      EM_NONE = 0,     \/\/ No machine$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_NS32K	Support/ELF.h	/^  EM_NS32K         = 97, \/\/ National Semiconductor 32000 series$/;"	e	enum:llvm::ELF::__anon84
EM_OPEN8	Support/ELF.h	/^  EM_OPEN8         = 196, \/\/ Open8 8-bit RISC soft processor core$/;"	e	enum:llvm::ELF::__anon84
EM_OPENRISC	Support/ELF.h	/^  EM_OPENRISC      = 92, \/\/ OpenRISC 32-bit embedded processor$/;"	e	enum:llvm::ELF::__anon84
EM_PARISC	Support/ELF.h	/^  EM_PARISC        = 15, \/\/ Hewlett-Packard PA-RISC$/;"	e	enum:llvm::ELF::__anon84
EM_PCP	Support/ELF.h	/^  EM_PCP           = 55, \/\/ Siemens PCP$/;"	e	enum:llvm::ELF::__anon84
EM_PDP10	Support/ELF.h	/^  EM_PDP10         = 64, \/\/ Digital Equipment Corp. PDP-10$/;"	e	enum:llvm::ELF::__anon84
EM_PDP11	Support/ELF.h	/^  EM_PDP11         = 65, \/\/ Digital Equipment Corp. PDP-11$/;"	e	enum:llvm::ELF::__anon84
EM_PDSP	Support/ELF.h	/^  EM_PDSP          = 63, \/\/ Sony DSP Processor$/;"	e	enum:llvm::ELF::__anon84
EM_PJ	Support/ELF.h	/^  EM_PJ            = 91, \/\/ picoJava$/;"	e	enum:llvm::ELF::__anon84
EM_PPC	Support/ELF.h	/^  EM_PPC           = 20, \/\/ PowerPC$/;"	e	enum:llvm::ELF::__anon84
EM_PPC	Target/TargetELFWriterInfo.h	/^      EM_PPC = 20,     \/\/ PowerPC$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_PPC64	Support/ELF.h	/^  EM_PPC64         = 21, \/\/ PowerPC64$/;"	e	enum:llvm::ELF::__anon84
EM_PRISM	Support/ELF.h	/^  EM_PRISM         = 82, \/\/ SiTera Prism$/;"	e	enum:llvm::ELF::__anon84
EM_R32C	Support/ELF.h	/^  EM_R32C          = 162, \/\/ Renesas R32C series microprocessors$/;"	e	enum:llvm::ELF::__anon84
EM_RCE	Support/ELF.h	/^  EM_RCE           = 39, \/\/ Motorola RCE$/;"	e	enum:llvm::ELF::__anon84
EM_RH32	Support/ELF.h	/^  EM_RH32          = 38, \/\/ TRW RH-32$/;"	e	enum:llvm::ELF::__anon84
EM_RL78	Support/ELF.h	/^  EM_RL78          = 197, \/\/ Renesas RL78 family$/;"	e	enum:llvm::ELF::__anon84
EM_RS08	Support/ELF.h	/^  EM_RS08          = 132, \/\/ Freescale RS08 embedded processor$/;"	e	enum:llvm::ELF::__anon84
EM_RX	Support/ELF.h	/^  EM_RX            = 173, \/\/ Renesas RX family$/;"	e	enum:llvm::ELF::__anon84
EM_S370	Support/ELF.h	/^  EM_S370          = 9, \/\/ IBM System\/370$/;"	e	enum:llvm::ELF::__anon84
EM_S390	Support/ELF.h	/^  EM_S390          = 22, \/\/ IBM System\/390$/;"	e	enum:llvm::ELF::__anon84
EM_SCORE7	Support/ELF.h	/^  EM_SCORE7        = 135, \/\/ Sunplus S+core7 RISC processor$/;"	e	enum:llvm::ELF::__anon84
EM_SEP	Support/ELF.h	/^  EM_SEP           = 108, \/\/ Sharp embedded microprocessor$/;"	e	enum:llvm::ELF::__anon84
EM_SE_C17	Support/ELF.h	/^  EM_SE_C17        = 139, \/\/ Seiko Epson C17 family$/;"	e	enum:llvm::ELF::__anon84
EM_SE_C33	Support/ELF.h	/^  EM_SE_C33        = 107, \/\/ S1C33 Family of Seiko Epson processors$/;"	e	enum:llvm::ELF::__anon84
EM_SH	Support/ELF.h	/^  EM_SH            = 42, \/\/ Hitachi SH$/;"	e	enum:llvm::ELF::__anon84
EM_SHARC	Support/ELF.h	/^  EM_SHARC         = 133, \/\/ Analog Devices SHARC family of 32-bit DSP$/;"	e	enum:llvm::ELF::__anon84
EM_SLE9X	Support/ELF.h	/^  EM_SLE9X         = 179, \/\/ Infineon Technologies SLE9X core$/;"	e	enum:llvm::ELF::__anon84
EM_SNP1K	Support/ELF.h	/^  EM_SNP1K         = 99, \/\/ Trebia SNP 1000 processor$/;"	e	enum:llvm::ELF::__anon84
EM_SPARC	Support/ELF.h	/^  EM_SPARC         = 2, \/\/ SPARC$/;"	e	enum:llvm::ELF::__anon84
EM_SPARC	Target/TargetELFWriterInfo.h	/^      EM_SPARC = 2,    \/\/ SPARC$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_SPARC32PLUS	Support/ELF.h	/^  EM_SPARC32PLUS   = 18, \/\/ Enhanced instruction set SPARC$/;"	e	enum:llvm::ELF::__anon84
EM_SPARCV9	Support/ELF.h	/^  EM_SPARCV9       = 43, \/\/ SPARC V9$/;"	e	enum:llvm::ELF::__anon84
EM_SPARCV9	Target/TargetELFWriterInfo.h	/^      EM_SPARCV9 = 43, \/\/ SPARC V9$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_SPU	Support/ELF.h	/^  EM_SPU           = 23, \/\/ IBM SPU\/SPC$/;"	e	enum:llvm::ELF::__anon84
EM_ST100	Support/ELF.h	/^  EM_ST100         = 60, \/\/ STMicroelectronics ST100 processor$/;"	e	enum:llvm::ELF::__anon84
EM_ST19	Support/ELF.h	/^  EM_ST19          = 74, \/\/ STMicroelectronics ST19 8-bit microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_ST200	Support/ELF.h	/^  EM_ST200         = 100, \/\/ STMicroelectronics (www.st.com) ST200$/;"	e	enum:llvm::ELF::__anon84
EM_ST7	Support/ELF.h	/^  EM_ST7           = 68, \/\/ STMicroelectronics ST7 8-bit microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_ST9PLUS	Support/ELF.h	/^  EM_ST9PLUS       = 67, \/\/ STMicroelectronics ST9+ 8\/16 bit microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_STARCORE	Support/ELF.h	/^  EM_STARCORE      = 58, \/\/ Motorola Star*Core processor$/;"	e	enum:llvm::ELF::__anon84
EM_STM8	Support/ELF.h	/^  EM_STM8          = 186, \/\/ STMicroeletronics STM8 8-bit microcontroller$/;"	e	enum:llvm::ELF::__anon84
EM_STXP7X	Support/ELF.h	/^  EM_STXP7X        = 166, \/\/ STMicroelectronics STxP7x family of configurable$/;"	e	enum:llvm::ELF::__anon84
EM_SVX	Support/ELF.h	/^  EM_SVX           = 73, \/\/ Silicon Graphics SVx$/;"	e	enum:llvm::ELF::__anon84
EM_TILE64	Support/ELF.h	/^  EM_TILE64        = 187, \/\/ Tilera TILE64 multicore architecture family$/;"	e	enum:llvm::ELF::__anon84
EM_TILEGX	Support/ELF.h	/^  EM_TILEGX        = 191, \/\/ Tilera TILE-Gx multicore architecture family$/;"	e	enum:llvm::ELF::__anon84
EM_TILEPRO	Support/ELF.h	/^  EM_TILEPRO       = 188, \/\/ Tilera TILEPro multicore architecture family$/;"	e	enum:llvm::ELF::__anon84
EM_TINYJ	Support/ELF.h	/^  EM_TINYJ         = 61, \/\/ Advanced Logic Corp. TinyJ embedded processor family$/;"	e	enum:llvm::ELF::__anon84
EM_TI_C2000	Support/ELF.h	/^  EM_TI_C2000      = 141, \/\/ The Texas Instruments TMS320C2000 DSP family$/;"	e	enum:llvm::ELF::__anon84
EM_TI_C5500	Support/ELF.h	/^  EM_TI_C5500      = 142, \/\/ The Texas Instruments TMS320C55x DSP family$/;"	e	enum:llvm::ELF::__anon84
EM_TI_C6000	Support/ELF.h	/^  EM_TI_C6000      = 140, \/\/ The Texas Instruments TMS320C6000 DSP family$/;"	e	enum:llvm::ELF::__anon84
EM_TMM_GPP	Support/ELF.h	/^  EM_TMM_GPP       = 96, \/\/ Thompson Multimedia General Purpose Processor$/;"	e	enum:llvm::ELF::__anon84
EM_TPC	Support/ELF.h	/^  EM_TPC           = 98, \/\/ Tenor Network TPC processor$/;"	e	enum:llvm::ELF::__anon84
EM_TRICORE	Support/ELF.h	/^  EM_TRICORE       = 44, \/\/ Siemens TriCore$/;"	e	enum:llvm::ELF::__anon84
EM_TRIMEDIA	Support/ELF.h	/^  EM_TRIMEDIA      = 163, \/\/ NXP Semiconductors TriMedia architecture family$/;"	e	enum:llvm::ELF::__anon84
EM_TSK3000	Support/ELF.h	/^  EM_TSK3000       = 131, \/\/ Altium TSK3000 core$/;"	e	enum:llvm::ELF::__anon84
EM_UNICORE	Support/ELF.h	/^  EM_UNICORE       = 110, \/\/ Microprocessor series from PKU-Unity Ltd. and MPRC$/;"	e	enum:llvm::ELF::__anon84
EM_V800	Support/ELF.h	/^  EM_V800          = 36, \/\/ NEC V800$/;"	e	enum:llvm::ELF::__anon84
EM_V850	Support/ELF.h	/^  EM_V850          = 87, \/\/ NEC v850$/;"	e	enum:llvm::ELF::__anon84
EM_VAX	Support/ELF.h	/^  EM_VAX           = 75, \/\/ Digital VAX$/;"	e	enum:llvm::ELF::__anon84
EM_VIDEOCORE	Support/ELF.h	/^  EM_VIDEOCORE     = 95, \/\/ Alphamosaic VideoCore processor$/;"	e	enum:llvm::ELF::__anon84
EM_VIDEOCORE3	Support/ELF.h	/^  EM_VIDEOCORE3    = 137, \/\/ Broadcom VideoCore III processor$/;"	e	enum:llvm::ELF::__anon84
EM_VIDEOCORE5	Support/ELF.h	/^  EM_VIDEOCORE5    = 198, \/\/ Broadcom VideoCore V processor$/;"	e	enum:llvm::ELF::__anon84
EM_VPP500	Support/ELF.h	/^  EM_VPP500        = 17, \/\/ Fujitsu VPP500$/;"	e	enum:llvm::ELF::__anon84
EM_X86_64	Support/ELF.h	/^  EM_X86_64        = 62, \/\/ AMD x86-64 architecture$/;"	e	enum:llvm::ELF::__anon84
EM_X86_64	Target/TargetELFWriterInfo.h	/^      EM_X86_64 = 62,  \/\/ AMD64$/;"	e	enum:llvm::TargetELFWriterInfo::MachineType
EM_XGATE	Support/ELF.h	/^  EM_XGATE         = 115, \/\/ Motorola XGATE embedded processor$/;"	e	enum:llvm::ELF::__anon84
EM_XIMO16	Support/ELF.h	/^  EM_XIMO16        = 170, \/\/ New Japan Radio (NJR) 16-bit DSP Processor$/;"	e	enum:llvm::ELF::__anon84
EM_XTENSA	Support/ELF.h	/^  EM_XTENSA        = 94, \/\/ Tensilica Xtensa Architecture$/;"	e	enum:llvm::ELF::__anon84
EM_ZSP	Support/ELF.h	/^  EM_ZSP           = 79, \/\/ LSI Logic 16-bit DSP Processor$/;"	e	enum:llvm::ELF::__anon84
EMachine	MC/MCELFObjectWriter.h	/^  const uint16_t EMachine;$/;"	m	class:llvm::MCELFObjectTargetWriter
EMachine	Target/TargetELFWriterInfo.h	/^    unsigned short EMachine;$/;"	m	class:llvm::TargetELFWriterInfo
ENAMETOOLONG	Support/system_error.h	301;"	d
END_BLOCK	Bitcode/BitCodes.h	/^    END_BLOCK = 0,  \/\/ Must be zero to guarantee termination for broken bitcode.$/;"	e	enum:llvm::bitc::FixedAbbrevIDs
END_WITH_NULL	Constants.h	/^  static Constant *get(StructType *T, ...) END_WITH_NULL;$/;"	m	class:llvm::ConstantStruct
END_WITH_NULL	DerivedTypes.h	/^  static StructType *create(StringRef Name, Type *elt1, ...) END_WITH_NULL;$/;"	m	class:llvm::StructType
END_WITH_NULL	DerivedTypes.h	/^  static StructType *get(Type *elt1, ...) END_WITH_NULL;$/;"	m	class:llvm::StructType
END_WITH_NULL	DerivedTypes.h	/^  void setBody(Type *elt1, ...) END_WITH_NULL;$/;"	m	class:llvm::StructType
END_WITH_NULL	Module.h	/^                                Type *RetTy, ...)  END_WITH_NULL;$/;"	m	class:llvm::Module
END_WITH_NULL	Module.h	/^    END_WITH_NULL;$/;"	m	class:llvm::Module
ENETDOWN	Support/system_error.h	337;"	d
ENETRESET	Support/system_error.h	340;"	d
ENETUNREACH	Support/system_error.h	343;"	d
ENFILE	Support/system_error.h	454;"	d
ENOBUFS	Support/system_error.h	346;"	d
ENODATA	Support/system_error.h	358;"	d
ENODEV	Support/system_error.h	376;"	d
ENOENT	Support/system_error.h	379;"	d
ENOEXEC	Support/system_error.h	292;"	d
ENOLCK	Support/system_error.h	355;"	d
ENOLINK	Support/system_error.h	352;"	d
ENOMEM	Support/system_error.h	397;"	d
ENOMSG	Support/system_error.h	361;"	d
ENOPROTOOPT	Support/system_error.h	364;"	d
ENOSPC	Support/system_error.h	367;"	d
ENOSR	Support/system_error.h	370;"	d
ENOSTR	Support/system_error.h	391;"	d
ENOSYS	Support/system_error.h	304;"	d
ENOTCONN	Support/system_error.h	394;"	d
ENOTDIR	Support/system_error.h	385;"	d
ENOTEMPTY	Support/system_error.h	289;"	d
ENOTRECOVERABLE	Support/system_error.h	442;"	d
ENOTSOCK	Support/system_error.h	388;"	d
ENOTSUP	Support/system_error.h	400;"	d
ENOTTY	Support/system_error.h	316;"	d
ENTER_SUBBLOCK	Bitcode/BitCodes.h	/^    ENTER_SUBBLOCK = 1,$/;"	e	enum:llvm::bitc::FixedAbbrevIDs
ENTRY_FREQ	Support/BlockFrequency.h	/^  static const int64_t ENTRY_FREQ = 1024;$/;"	m	class:llvm::BlockFrequency
ENXIO	Support/system_error.h	373;"	d
EOFReached	Support/StreamableMemoryObject.h	/^  mutable bool EOFReached;$/;"	m	class:llvm::StreamingMemoryObject
EOPNOTSUPP	Support/system_error.h	412;"	d
EOVERFLOW	Support/system_error.h	466;"	d
EOWNERDEAD	Support/system_error.h	418;"	d
EPERM	Support/system_error.h	409;"	d
EPIPE	Support/system_error.h	265;"	d
EPROTO	Support/system_error.h	424;"	d
EPROTONOSUPPORT	Support/system_error.h	427;"	d
EPROTOTYPE	Support/system_error.h	469;"	d
EP_EarlyAsPossible	Transforms/IPO/PassManagerBuilder.h	/^    EP_EarlyAsPossible,$/;"	e	enum:llvm::PassManagerBuilder::ExtensionPointTy
EP_EnabledOnOptLevel0	Transforms/IPO/PassManagerBuilder.h	/^    EP_EnabledOnOptLevel0$/;"	e	enum:llvm::PassManagerBuilder::ExtensionPointTy
EP_LoopOptimizerEnd	Transforms/IPO/PassManagerBuilder.h	/^    EP_LoopOptimizerEnd,$/;"	e	enum:llvm::PassManagerBuilder::ExtensionPointTy
EP_ModuleOptimizerEarly	Transforms/IPO/PassManagerBuilder.h	/^    EP_ModuleOptimizerEarly,$/;"	e	enum:llvm::PassManagerBuilder::ExtensionPointTy
EP_OptimizerLast	Transforms/IPO/PassManagerBuilder.h	/^    EP_OptimizerLast,$/;"	e	enum:llvm::PassManagerBuilder::ExtensionPointTy
EP_ScalarOptimizerLate	Transforms/IPO/PassManagerBuilder.h	/^    EP_ScalarOptimizerLate,$/;"	e	enum:llvm::PassManagerBuilder::ExtensionPointTy
EQ	Analysis/DependenceAnalysis.h	/^             EQ = 2,$/;"	e	enum:llvm::Dependence::DVEntry::__anon25
EQ	MC/MCExpr.h	/^    EQ,   \/\/\/< Equality comparison.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
EQ	TableGen/Record.h	/^  enum BinaryOp { SHL, SRA, SRL, STRCONCAT, CONCAT, EQ };$/;"	e	enum:llvm::BinOpInit::BinaryOp
ERANGE	Support/system_error.h	439;"	d
EROFS	Support/system_error.h	430;"	d
ERR	Support/Solaris.h	37;"	d
ES	Support/Solaris.h	22;"	d
ESI	Support/Solaris.h	32;"	d
ESP	Support/Solaris.h	30;"	d
ESPIPE	Support/system_error.h	325;"	d
ESRCH	Support/system_error.h	382;"	d
ETIME	Support/system_error.h	445;"	d
ETIMEDOUT	Support/system_error.h	451;"	d
ETXTBSY	Support/system_error.h	448;"	d
ET_CORE	Support/ELF.h	/^  ET_CORE   = 4,      \/\/ Core file$/;"	e	enum:llvm::ELF::__anon82
ET_DYN	Support/ELF.h	/^  ET_DYN    = 3,      \/\/ Shared object file$/;"	e	enum:llvm::ELF::__anon82
ET_EXEC	Support/ELF.h	/^  ET_EXEC   = 2,      \/\/ Executable file$/;"	e	enum:llvm::ELF::__anon82
ET_HIPROC	Support/ELF.h	/^  ET_HIPROC = 0xffff  \/\/ Processor-specific$/;"	e	enum:llvm::ELF::__anon82
ET_LOPROC	Support/ELF.h	/^  ET_LOPROC = 0xff00, \/\/ Beginning of processor-specific codes$/;"	e	enum:llvm::ELF::__anon82
ET_NONE	Support/ELF.h	/^  ET_NONE   = 0,      \/\/ No file type$/;"	e	enum:llvm::ELF::__anon82
ET_REL	Support/ELF.h	/^  ET_REL    = 1,      \/\/ Relocatable file$/;"	e	enum:llvm::ELF::__anon82
EVT	CodeGen/ValueTypes.h	/^    EVT() : V((MVT::SimpleValueType)(MVT::INVALID_SIMPLE_VALUE_TYPE)),$/;"	f	struct:llvm::EVT
EVT	CodeGen/ValueTypes.h	/^    EVT(MVT S) : V(S), LLVMTy(0) {}$/;"	f	struct:llvm::EVT
EVT	CodeGen/ValueTypes.h	/^    EVT(MVT::SimpleValueType SVT) : V(SVT), LLVMTy(0) { }$/;"	f	struct:llvm::EVT
EVT	CodeGen/ValueTypes.h	/^  struct EVT {$/;"	s	namespace:llvm
EV_CURRENT	Support/ELF.h	/^  EV_CURRENT = 1$/;"	e	enum:llvm::ELF::__anon83
EV_NONE	Support/ELF.h	/^  EV_NONE = 0,$/;"	e	enum:llvm::ELF::__anon83
EWOULDBLOCK	Support/system_error.h	415;"	d
EXCEPTIONADDR	CodeGen/ISDOpcodes.h	/^    EXCEPTIONADDR,$/;"	e	enum:llvm::ISD::NodeType
EXDEV	Support/system_error.h	280;"	d
EXECUTION_ENGINE_INTERPRETER_H	ExecutionEngine/Interpreter.h	16;"	d
EXECUTION_MSG	PassManagers.h	/^  EXECUTION_MSG, \/\/ "Executing Pass '"$/;"	e	enum:llvm::PassDebuggingString
EXP2_F32	CodeGen/RuntimeLibcalls.h	/^    EXP2_F32,$/;"	e	enum:llvm::RTLIB::Libcall
EXP2_F64	CodeGen/RuntimeLibcalls.h	/^    EXP2_F64,$/;"	e	enum:llvm::RTLIB::Libcall
EXP2_F80	CodeGen/RuntimeLibcalls.h	/^    EXP2_F80,$/;"	e	enum:llvm::RTLIB::Libcall
EXP2_PPCF128	CodeGen/RuntimeLibcalls.h	/^    EXP2_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
EXP_F32	CodeGen/RuntimeLibcalls.h	/^    EXP_F32,$/;"	e	enum:llvm::RTLIB::Libcall
EXP_F64	CodeGen/RuntimeLibcalls.h	/^    EXP_F64,$/;"	e	enum:llvm::RTLIB::Libcall
EXP_F80	CodeGen/RuntimeLibcalls.h	/^    EXP_F80,$/;"	e	enum:llvm::RTLIB::Libcall
EXP_PPCF128	CodeGen/RuntimeLibcalls.h	/^    EXP_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
EXTERN_TEMPLATE_INSTANTIATION	Support/Compiler.h	139;"	d
EXTERN_TEMPLATE_INSTANTIATION	Support/Compiler.h	142;"	d
EXTLOAD	CodeGen/ISDOpcodes.h	/^    EXTLOAD,$/;"	e	enum:llvm::ISD::LoadExtType
EXTRACT_ELEMENT	CodeGen/ISDOpcodes.h	/^    EXTRACT_ELEMENT,$/;"	e	enum:llvm::ISD::NodeType
EXTRACT_SUBREG	Target/TargetOpcodes.h	/^    EXTRACT_SUBREG = 6,$/;"	e	enum:llvm::TargetOpcode::__anon139
EXTRACT_SUBVECTOR	CodeGen/ISDOpcodes.h	/^    EXTRACT_SUBVECTOR,$/;"	e	enum:llvm::ISD::NodeType
EXTRACT_VECTOR_ELT	CodeGen/ISDOpcodes.h	/^    EXTRACT_VECTOR_ELT,$/;"	e	enum:llvm::ISD::NodeType
EarlyClobber	CodeGen/MachineInstrBuilder.h	/^    EarlyClobber   = 0x40,$/;"	e	enum:llvm::RegState::__anon32
EarlyTailDuplicateID	CodeGen/Passes.h	/^  static char EarlyTailDuplicateID;$/;"	m	class:llvm::TargetPassConfig
EarlyVal	CodeGen/LiveInterval.h	/^    VNInfo *EarlyVal;$/;"	m	class:llvm::LiveRangeQuery
Edge	Analysis/BranchProbabilityInfo.h	/^  typedef std::pair<const BasicBlock *, unsigned> Edge;$/;"	t	class:llvm::BranchProbabilityInfo
Edge	Analysis/LoopInfo.h	/^  typedef std::pair<const BlockT*, const BlockT*> Edge;$/;"	t	class:llvm::LoopBase
Edge	Analysis/ProfileDataLoader.h	/^  typedef std::pair<const BType*, const BType*> Edge;$/;"	t	class:llvm::ProfileDataT
Edge	Analysis/ProfileInfo.h	/^    typedef std::pair<const BType*, const BType*> Edge;$/;"	t	class:llvm::ProfileInfoT
Edge	Analysis/SparsePropagation.h	/^  typedef std::pair<BasicBlock*,BasicBlock*> Edge;$/;"	t	class:llvm::SparseSolver
EdgeBundles	CodeGen/EdgeBundles.h	/^  EdgeBundles() : MachineFunctionPass(ID) {}$/;"	f	class:llvm::EdgeBundles
EdgeBundles	CodeGen/EdgeBundles.h	/^class EdgeBundles : public MachineFunctionPass {$/;"	c	namespace:llvm
EdgeCounts	Analysis/ProfileDataLoader.h	/^  SmallVector<unsigned, 32> EdgeCounts;$/;"	m	class:llvm::ProfileDataLoader
EdgeCounts	Analysis/ProfileInfoLoader.h	/^  std::vector<unsigned>    EdgeCounts;$/;"	m	class:llvm::ProfileInfoLoader
EdgeData	CodeGen/PBQP/HeuristicSolver.h	/^    class EdgeData {$/;"	c	class:PBQP::HeuristicSolverImpl
EdgeData	CodeGen/PBQP/Heuristics/Briggs.h	/^        EdgeData() : worst(0), reverseWorst(0), isUpToDate(false) {}$/;"	f	struct:PBQP::Heuristics::Briggs::EdgeData
EdgeData	CodeGen/PBQP/Heuristics/Briggs.h	/^      struct EdgeData {$/;"	s	class:PBQP::Heuristics::Briggs
EdgeDataList	CodeGen/PBQP/HeuristicSolver.h	/^    typedef std::list<EdgeData> EdgeDataList;$/;"	t	class:PBQP::HeuristicSolverImpl
EdgeEntry	CodeGen/PBQP/Graph.h	/^      EdgeEntry(NodeItr node1, NodeItr node2, const Matrix &costs)$/;"	f	class:PBQP::Graph::EdgeEntry
EdgeEntry	CodeGen/PBQP/Graph.h	/^    class EdgeEntry {$/;"	c	class:PBQP::Graph
EdgeInfo	Analysis/ProfileDataTypes.h	/^  EdgeInfo      = 4,   \/* Edge profiling information      *\/$/;"	e	enum:ProfilingType
EdgeInformation	Analysis/ProfileDataLoader.h	/^  DenseMap<const FType*, EdgeWeights> EdgeInformation;$/;"	m	class:llvm::ProfileDataT
EdgeInformation	Analysis/ProfileInfo.h	/^    std::map<const FType*, EdgeWeights> EdgeInformation;$/;"	m	class:llvm::ProfileInfoT
EdgeItr	CodeGen/PBQP/Graph.h	/^    typedef EdgeList::iterator EdgeItr;$/;"	t	class:PBQP::Graph
EdgeItrCompartor	CodeGen/PBQP/Graph.h	/^  class EdgeItrCompartor {$/;"	c	namespace:PBQP
EdgeList	CodeGen/PBQP/Graph.h	/^    typedef std::list<EdgeEntry> EdgeList;$/;"	t	class:PBQP::Graph
EdgeType	Analysis/PathNumbering.h	/^  enum EdgeType { NORMAL, BACKEDGE, SPLITEDGE,$/;"	g	class:llvm::BallLarusEdge
EdgeWeight	Analysis/ProfileInfo.h	/^    typedef std::pair<Edge, double> EdgeWeight;$/;"	t	class:llvm::ProfileInfoT
EdgeWeights	Analysis/ProfileDataLoader.h	/^  typedef DenseMap<Edge, unsigned> EdgeWeights;$/;"	t	class:llvm::ProfileDataT
EdgeWeights	Analysis/ProfileInfo.h	/^    typedef std::map<Edge, double> EdgeWeights;$/;"	t	class:llvm::ProfileInfoT
Edges	Support/GCOV.h	/^  SmallVector<uint32_t, 16> Edges;$/;"	m	class:llvm::GCOVBlock
EightByteConstantSection	MC/MCObjectFileInfo.h	/^  const MCSection *EightByteConstantSection;$/;"	m	class:llvm::MCObjectFileInfo
Either	ExecutionEngine/ExecutionEngine.h	/^  const static Kind Either = (Kind)(JIT | Interpreter);$/;"	m	namespace:llvm::EngineKind
Element	ADT/SparseBitVector.h	/^  typedef SparseBitVectorElement<ElementSize> Element;$/;"	t	struct:llvm::ilist_traits
Element	TableGen/Record.h	/^  unsigned Element;$/;"	m	class:llvm::VarListElementInit
ElementIndex	ADT/SparseBitVector.h	/^  unsigned ElementIndex;$/;"	m	struct:llvm::SparseBitVectorElement
ElementList	ADT/SparseBitVector.h	/^  typedef ilist<SparseBitVectorElement<ElementSize> > ElementList;$/;"	t	class:llvm::SparseBitVector
ElementListConstIter	ADT/SparseBitVector.h	/^  typedef typename ElementList::const_iterator ElementListConstIter;$/;"	t	class:llvm::SparseBitVector
ElementListIter	ADT/SparseBitVector.h	/^  typedef typename ElementList::iterator ElementListIter;$/;"	t	class:llvm::SparseBitVector
Elements	ADT/SparseBitVector.h	/^  ElementList Elements;$/;"	m	class:llvm::SparseBitVector
Elf32_Addr	Support/ELF.h	/^typedef uint32_t Elf32_Addr; \/\/ Program address$/;"	t	namespace:llvm::ELF
Elf32_Dyn	Support/ELF.h	/^struct Elf32_Dyn$/;"	s	namespace:llvm::ELF
Elf32_Ehdr	Support/ELF.h	/^struct Elf32_Ehdr {$/;"	s	namespace:llvm::ELF
Elf32_Half	Support/ELF.h	/^typedef uint16_t Elf32_Half;$/;"	t	namespace:llvm::ELF
Elf32_Off	Support/ELF.h	/^typedef uint32_t Elf32_Off;  \/\/ File offset$/;"	t	namespace:llvm::ELF
Elf32_Phdr	Support/ELF.h	/^struct Elf32_Phdr {$/;"	s	namespace:llvm::ELF
Elf32_Rel	Support/ELF.h	/^struct Elf32_Rel {$/;"	s	namespace:llvm::ELF
Elf32_Rela	Support/ELF.h	/^struct Elf32_Rela {$/;"	s	namespace:llvm::ELF
Elf32_Shdr	Support/ELF.h	/^struct Elf32_Shdr {$/;"	s	namespace:llvm::ELF
Elf32_Sword	Support/ELF.h	/^typedef int32_t  Elf32_Sword;$/;"	t	namespace:llvm::ELF
Elf32_Sym	Support/ELF.h	/^struct Elf32_Sym {$/;"	s	namespace:llvm::ELF
Elf32_Word	Support/ELF.h	/^typedef uint32_t Elf32_Word;$/;"	t	namespace:llvm::ELF
Elf64_Addr	Support/ELF.h	/^typedef uint64_t Elf64_Addr;$/;"	t	namespace:llvm::ELF
Elf64_Dyn	Support/ELF.h	/^struct Elf64_Dyn$/;"	s	namespace:llvm::ELF
Elf64_Ehdr	Support/ELF.h	/^struct Elf64_Ehdr {$/;"	s	namespace:llvm::ELF
Elf64_Half	Support/ELF.h	/^typedef uint16_t Elf64_Half;$/;"	t	namespace:llvm::ELF
Elf64_Off	Support/ELF.h	/^typedef uint64_t Elf64_Off;$/;"	t	namespace:llvm::ELF
Elf64_Phdr	Support/ELF.h	/^struct Elf64_Phdr {$/;"	s	namespace:llvm::ELF
Elf64_Rel	Support/ELF.h	/^struct Elf64_Rel {$/;"	s	namespace:llvm::ELF
Elf64_Rela	Support/ELF.h	/^struct Elf64_Rela {$/;"	s	namespace:llvm::ELF
Elf64_Shdr	Support/ELF.h	/^struct Elf64_Shdr {$/;"	s	namespace:llvm::ELF
Elf64_Sword	Support/ELF.h	/^typedef int32_t  Elf64_Sword;$/;"	t	namespace:llvm::ELF
Elf64_Sxword	Support/ELF.h	/^typedef int64_t  Elf64_Sxword;$/;"	t	namespace:llvm::ELF
Elf64_Sym	Support/ELF.h	/^struct Elf64_Sym {$/;"	s	namespace:llvm::ELF
Elf64_Word	Support/ELF.h	/^typedef uint32_t Elf64_Word;$/;"	t	namespace:llvm::ELF
Elf64_Xword	Support/ELF.h	/^typedef uint64_t Elf64_Xword;$/;"	t	namespace:llvm::ELF
ElfMagic	Support/ELF.h	/^static const char ElfMagic[] = { 0x7f, 'E', 'L', 'F', '\\0' };$/;"	m	namespace:llvm::ELF
Elf_Addr	Object/ELF.h	/^    <value_type, target_endianness, support::aligned> Elf_Addr;$/;"	t	struct:llvm::object::ELFDataTypeTypedefHelper
Elf_Dyn	Object/ELF.h	/^  typedef Elf_Dyn_Impl<target_endianness, is64Bits> Elf_Dyn;$/;"	t	class:llvm::object::DynRefImpl
Elf_Dyn	Object/ELF.h	/^  typedef Elf_Dyn_Impl<target_endianness, is64Bits> Elf_Dyn;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Dyn_Base	Object/ELF.h	/^struct Elf_Dyn_Base<target_endianness, false> {$/;"	s	namespace:llvm::object
Elf_Dyn_Base	Object/ELF.h	/^struct Elf_Dyn_Base<target_endianness, true> {$/;"	s	namespace:llvm::object
Elf_Dyn_Impl	Object/ELF.h	/^struct Elf_Dyn_Impl : Elf_Dyn_Base<target_endianness, is64Bits> {$/;"	s	namespace:llvm::object
Elf_Ehdr	Object/ELF.h	/^  typedef Elf_Ehdr_Impl<target_endianness, is64Bits> Elf_Ehdr;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Ehdr_Impl	Object/ELF.h	/^struct Elf_Ehdr_Impl {$/;"	s	namespace:llvm::object
Elf_Half	Object/ELF.h	/^    <uint16_t, target_endianness, support::aligned> Elf_Half;$/;"	t	struct:llvm::object::ELFDataTypeTypedefHelperCommon
Elf_Off	Object/ELF.h	/^    <value_type, target_endianness, support::aligned> Elf_Off;$/;"	t	struct:llvm::object::ELFDataTypeTypedefHelper
Elf_Phdr	Object/ELF.h	/^struct Elf_Phdr<target_endianness, false> {$/;"	s	namespace:llvm::object
Elf_Phdr	Object/ELF.h	/^struct Elf_Phdr<target_endianness, true> {$/;"	s	namespace:llvm::object
Elf_Rel	Object/ELF.h	/^  typedef Elf_Rel_Impl<target_endianness, is64Bits, false> Elf_Rel;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Rel_Base	Object/ELF.h	/^struct Elf_Rel_Base<target_endianness, false, false> {$/;"	s	namespace:llvm::object
Elf_Rel_Base	Object/ELF.h	/^struct Elf_Rel_Base<target_endianness, false, true> {$/;"	s	namespace:llvm::object
Elf_Rel_Base	Object/ELF.h	/^struct Elf_Rel_Base<target_endianness, true, false> {$/;"	s	namespace:llvm::object
Elf_Rel_Base	Object/ELF.h	/^struct Elf_Rel_Base<target_endianness, true, true> {$/;"	s	namespace:llvm::object
Elf_Rel_Impl	Object/ELF.h	/^struct Elf_Rel_Impl<target_endianness, false, isRela>$/;"	s	namespace:llvm::object
Elf_Rel_Impl	Object/ELF.h	/^struct Elf_Rel_Impl<target_endianness, true, isRela>$/;"	s	namespace:llvm::object
Elf_Rel_Iter	Object/ELF.h	/^  typedef ELFRelocationIterator<Elf_Rel> Elf_Rel_Iter;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Rela	Object/ELF.h	/^  typedef Elf_Rel_Impl<target_endianness, is64Bits, true> Elf_Rela;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Rela_Iter	Object/ELF.h	/^  typedef ELFRelocationIterator<Elf_Rela> Elf_Rela_Iter;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Shdr	Object/ELF.h	/^  typedef Elf_Shdr_Impl<target_endianness, is64Bits> Elf_Shdr;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Shdr_Base	Object/ELF.h	/^struct Elf_Shdr_Base<target_endianness, false> {$/;"	s	namespace:llvm::object
Elf_Shdr_Base	Object/ELF.h	/^struct Elf_Shdr_Base<target_endianness, true> {$/;"	s	namespace:llvm::object
Elf_Shdr_Impl	Object/ELF.h	/^struct Elf_Shdr_Impl : Elf_Shdr_Base<target_endianness, is64Bits> {$/;"	s	namespace:llvm::object
Elf_Sword	Object/ELF.h	/^    <int32_t, target_endianness, support::aligned> Elf_Sword;$/;"	t	struct:llvm::object::ELFDataTypeTypedefHelperCommon
Elf_Sxword	Object/ELF.h	/^    <int64_t, target_endianness, support::aligned> Elf_Sxword;$/;"	t	struct:llvm::object::ELFDataTypeTypedefHelperCommon
Elf_Sym	Object/ELF.h	/^  typedef Elf_Sym_Impl<target_endianness, is64Bits> Elf_Sym;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Sym_Base	Object/ELF.h	/^struct Elf_Sym_Base<target_endianness, false> {$/;"	s	namespace:llvm::object
Elf_Sym_Base	Object/ELF.h	/^struct Elf_Sym_Base<target_endianness, true> {$/;"	s	namespace:llvm::object
Elf_Sym_Impl	Object/ELF.h	/^struct Elf_Sym_Impl : Elf_Sym_Base<target_endianness, is64Bits> {$/;"	s	namespace:llvm::object
Elf_Verdaux	Object/ELF.h	/^  typedef Elf_Verdaux_Impl<target_endianness, is64Bits> Elf_Verdaux;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Verdaux	Object/ELF.h	/^  typedef Elf_Verdaux_Impl<target_endianness, is64Bits> Elf_Verdaux;$/;"	t	struct:llvm::object::Elf_Verdef_Impl
Elf_Verdaux_Impl	Object/ELF.h	/^struct Elf_Verdaux_Impl {$/;"	s	namespace:llvm::object
Elf_Verdef	Object/ELF.h	/^  typedef Elf_Verdef_Impl<target_endianness, is64Bits> Elf_Verdef;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Verdef_Impl	Object/ELF.h	/^struct Elf_Verdef_Impl {$/;"	s	namespace:llvm::object
Elf_Vernaux	Object/ELF.h	/^  typedef Elf_Vernaux_Impl<target_endianness, is64Bits> Elf_Vernaux;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Vernaux_Impl	Object/ELF.h	/^struct Elf_Vernaux_Impl {$/;"	s	namespace:llvm::object
Elf_Verneed	Object/ELF.h	/^  typedef Elf_Verneed_Impl<target_endianness, is64Bits> Elf_Verneed;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Verneed_Impl	Object/ELF.h	/^struct Elf_Verneed_Impl {$/;"	s	namespace:llvm::object
Elf_Versym	Object/ELF.h	/^  typedef Elf_Versym_Impl<target_endianness, is64Bits> Elf_Versym;$/;"	t	class:llvm::object::ELFObjectFile
Elf_Versym_Impl	Object/ELF.h	/^struct Elf_Versym_Impl {$/;"	s	namespace:llvm::object
Elf_Word	Object/ELF.h	/^    <uint32_t, target_endianness, support::aligned> Elf_Word;$/;"	t	struct:llvm::object::ELFDataTypeTypedefHelperCommon
Elf_Xword	Object/ELF.h	/^    <uint64_t, target_endianness, support::aligned> Elf_Xword;$/;"	t	struct:llvm::object::ELFDataTypeTypedefHelperCommon
ElseCond	MC/MCParser/AsmCond.h	/^    ElseCond    \/\/ inside else conditional$/;"	e	enum:llvm::AsmCond::ConditionalAssemblyType
ElseIfCond	MC/MCParser/AsmCond.h	/^    ElseIfCond, \/\/ inside elseif conditional$/;"	e	enum:llvm::AsmCond::ConditionalAssemblyType
Emit	Bitcode/BitstreamWriter.h	/^  void Emit(uint32_t Val, unsigned NumBits) {$/;"	f	class:llvm::BitstreamWriter
Emit64	Bitcode/BitstreamWriter.h	/^  void Emit64(uint64_t Val, unsigned NumBits) {$/;"	f	class:llvm::BitstreamWriter
EmitAbbrev	Bitcode/BitstreamWriter.h	/^  unsigned EmitAbbrev(BitCodeAbbrev *Abbv) {$/;"	f	class:llvm::BitstreamWriter
EmitAbbreviatedField	Bitcode/BitstreamWriter.h	/^  void EmitAbbreviatedField(const BitCodeAbbrevOp &Op, uintty V) {$/;"	f	class:llvm::BitstreamWriter
EmitAbbreviatedLiteral	Bitcode/BitstreamWriter.h	/^  void EmitAbbreviatedLiteral(const BitCodeAbbrevOp &Op, uintty V) {$/;"	f	class:llvm::BitstreamWriter
EmitBlockInfoAbbrev	Bitcode/BitstreamWriter.h	/^  unsigned EmitBlockInfoAbbrev(unsigned BlockID, BitCodeAbbrev *Abbv) {$/;"	f	class:llvm::BitstreamWriter
EmitCode	Bitcode/BitstreamWriter.h	/^  void EmitCode(unsigned Val) {$/;"	f	class:llvm::BitstreamWriter
EmitDataRegion	MC/MCStreamer.h	/^    virtual void EmitDataRegion(MCDataRegionType Kind) {}$/;"	f	class:llvm::MCStreamer
EmitDebugFrame	MC/MCStreamer.h	/^    bool EmitDebugFrame;$/;"	m	class:llvm::MCStreamer
EmitDwarfAdvanceFrameAddr	MC/MCStreamer.h	/^    virtual void EmitDwarfAdvanceFrameAddr(const MCSymbol *LastLabel,$/;"	f	class:llvm::MCStreamer
EmitEHFrame	MC/MCStreamer.h	/^    bool EmitEHFrame;$/;"	m	class:llvm::MCStreamer
EmitEndOfAsmFile	CodeGen/AsmPrinter.h	/^    virtual void EmitEndOfAsmFile(Module &) {}$/;"	f	class:llvm::AsmPrinter
EmitFunctionBodyEnd	CodeGen/AsmPrinter.h	/^    virtual void EmitFunctionBodyEnd() {}$/;"	f	class:llvm::AsmPrinter
EmitFunctionBodyStart	CodeGen/AsmPrinter.h	/^    virtual void EmitFunctionBodyStart() {}$/;"	f	class:llvm::AsmPrinter
EmitFunctionEntryCode	CodeGen/SelectionDAGISel.h	/^  virtual void EmitFunctionEntryCode() {}$/;"	f	class:llvm::SelectionDAGISel
EmitGEPOffset	Transforms/Utils/Local.h	/^Value *EmitGEPOffset(IRBuilderTy *Builder, const DataLayout &TD, User *GEP,$/;"	f	namespace:llvm
EmitInstruction	CodeGen/AsmPrinter.h	/^    virtual void EmitInstruction(const MachineInstr *) {$/;"	f	class:llvm::AsmPrinter
EmitInstruction	CodeGen/ScheduleHazardRecognizer.h	/^  virtual void EmitInstruction(SUnit *) {}$/;"	f	class:llvm::ScheduleHazardRecognizer
EmitLabelReference	CodeGen/AsmPrinter.h	/^    void EmitLabelReference(const MCSymbol *Label, unsigned Size) const {$/;"	f	class:llvm::AsmPrinter
EmitNoop	CodeGen/ScheduleHazardRecognizer.h	/^  virtual void EmitNoop() {$/;"	f	class:llvm::ScheduleHazardRecognizer
EmitRecord	Bitcode/BitstreamWriter.h	/^  void EmitRecord(unsigned Code, SmallVectorImpl<uintty> &Vals,$/;"	f	class:llvm::BitstreamWriter
EmitRecordWithAbbrev	Bitcode/BitstreamWriter.h	/^  void EmitRecordWithAbbrev(unsigned Abbrev, SmallVectorImpl<uintty> &Vals) {$/;"	f	class:llvm::BitstreamWriter
EmitRecordWithAbbrevImpl	Bitcode/BitstreamWriter.h	/^  void EmitRecordWithAbbrevImpl(unsigned Abbrev, SmallVectorImpl<uintty> &Vals,$/;"	f	class:llvm::BitstreamWriter
EmitRecordWithArray	Bitcode/BitstreamWriter.h	/^  void EmitRecordWithArray(unsigned Abbrev, SmallVectorImpl<uintty> &Vals,$/;"	f	class:llvm::BitstreamWriter
EmitRecordWithBlob	Bitcode/BitstreamWriter.h	/^  void EmitRecordWithBlob(unsigned Abbrev, SmallVectorImpl<uintty> &Vals,$/;"	f	class:llvm::BitstreamWriter
EmitStartOfAsmFile	CodeGen/AsmPrinter.h	/^    virtual void EmitStartOfAsmFile(Module &) {}$/;"	f	class:llvm::AsmPrinter
EmitStartPt	CodeGen/FastISel.h	/^  MachineInstr *EmitStartPt;$/;"	m	class:llvm::FastISel
EmitTargetCodeForMemcpy	Target/TargetSelectionDAGInfo.h	/^  EmitTargetCodeForMemcpy(SelectionDAG &DAG, DebugLoc dl,$/;"	f	class:llvm::TargetSelectionDAGInfo
EmitTargetCodeForMemmove	Target/TargetSelectionDAGInfo.h	/^  EmitTargetCodeForMemmove(SelectionDAG &DAG, DebugLoc dl,$/;"	f	class:llvm::TargetSelectionDAGInfo
EmitTargetCodeForMemset	Target/TargetSelectionDAGInfo.h	/^  EmitTargetCodeForMemset(SelectionDAG &DAG, DebugLoc dl,$/;"	f	class:llvm::TargetSelectionDAGInfo
EmitVBR	Bitcode/BitstreamWriter.h	/^  void EmitVBR(uint32_t Val, unsigned NumBits) {$/;"	f	class:llvm::BitstreamWriter
EmitVBR64	Bitcode/BitstreamWriter.h	/^  void EmitVBR64(uint64_t Val, unsigned NumBits) {$/;"	f	class:llvm::BitstreamWriter
EmitXXStructor	CodeGen/AsmPrinter.h	/^    virtual void EmitXXStructor(const Constant *CV) {$/;"	f	class:llvm::AsmPrinter
EmitZeros	MC/MCStreamer.h	/^    void EmitZeros(uint64_t NumBytes, unsigned AddrSpace) {$/;"	f	class:llvm::MCStreamer
EmittedFunctionDetails	ExecutionEngine/JITEventListener.h	/^  typedef JITEvent_EmittedFunctionDetails EmittedFunctionDetails;$/;"	t	class:llvm::JITEventListener
Emitter	MC/MCAssembler.h	/^  MCCodeEmitter &Emitter;$/;"	m	class:llvm::MCAssembler
Empty	Analysis/DependenceAnalysis.h	/^      enum ConstraintKind { Empty, Point, Distance, Line, Any } Kind;$/;"	e	enum:llvm::DependenceAnalysis::Constraint::ConstraintKind
EmptyKind	ADT/Twine.h	/^      EmptyKind,$/;"	e	enum:llvm::Twine::NodeKind
EnableTailMerge	CodeGen/Passes.h	/^  bool EnableTailMerge;$/;"	m	class:llvm::TargetPassConfig
EncodeAbbrev	Bitcode/BitstreamWriter.h	/^  void EncodeAbbrev(BitCodeAbbrev *Abbv) {$/;"	f	class:llvm::BitstreamWriter
EncodeChar6	Bitcode/BitCodes.h	/^  static unsigned EncodeChar6(char C) {$/;"	f	class:llvm::BitCodeAbbrevOp
Encoding	Bitcode/BitCodes.h	/^  enum Encoding {$/;"	g	class:llvm::BitCodeAbbrevOp
End	ADT/DenseMap.h	/^  pointer Ptr, End;$/;"	m	class:llvm::DenseMapIterator
End	ADT/ImmutableIntervalMap.h	/^  int64_t End;$/;"	m	class:llvm::Interval
End	Analysis/Dominators.h	/^  const BasicBlock *End;$/;"	m	class:llvm::BasicBlockEdge
End	MC/MCAssembler.h	/^  MCSymbol *End;$/;"	m	struct:llvm::DataRegionData
End	MC/MCAtom.h	/^  uint64_t Begin, End;$/;"	m	class:llvm::MCAtom
End	MC/MCDwarf.h	/^    MCSymbol *End;$/;"	m	struct:llvm::MCDwarfFrameInfo
End	MC/MCWin64EH.h	/^    MCSymbol *End;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
End	Support/Allocator.h	/^  char *End;$/;"	m	class:llvm::BumpPtrAllocator
End	Support/SMLoc.h	/^  SMLoc Start, End;$/;"	m	class:llvm::SMRange
EndGroup	MC/MCSchedule.h	/^  bool     EndGroup;$/;"	m	struct:llvm::MCSchedClassDesc
EndIndex	CodeGen/ScheduleDAGInstrs.h	/^    unsigned EndIndex;$/;"	m	class:llvm::ScheduleDAGInstrs
EndLabels	CodeGen/MachineModuleInfo.h	/^  SmallVector<MCSymbol*, 1> EndLabels;   \/\/ Labels after invoke.$/;"	m	struct:llvm::LandingPadInfo
EndOfStatement	MC/MCParser/MCAsmLexer.h	/^    EndOfStatement,$/;"	e	enum:llvm::AsmToken::TokenKind
EndPoint	CodeGen/LiveInterval.h	/^    SlotIndex EndPoint;$/;"	m	class:llvm::LiveRangeQuery
EndX	ADT/SmallVector.h	/^  void *BeginX, *EndX, *CapacityX;$/;"	m	class:llvm::SmallVectorBase
Endianness	Module.h	/^  enum Endianness  { AnyEndianness, LittleEndian, BigEndian };$/;"	g	class:llvm::Module
EndsWith	ADT/StringSwitch.h	/^  StringSwitch& EndsWith(const char (&S)[N], const T &Value) {$/;"	f	class:llvm::StringSwitch
EngineBuilder	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder(Module *m) : M(m) {$/;"	f	class:llvm::EngineBuilder
EngineBuilder	ExecutionEngine/ExecutionEngine.h	/^class EngineBuilder {$/;"	c	namespace:llvm
EngineKind	ExecutionEngine/ExecutionEngine.h	/^namespace EngineKind {$/;"	n	namespace:llvm
EnterBlockInfoBlock	Bitcode/BitstreamWriter.h	/^  void EnterBlockInfoBlock(unsigned CodeWidth) {$/;"	f	class:llvm::BitstreamWriter
EnterSubBlock	Bitcode/BitstreamReader.h	/^  bool EnterSubBlock(unsigned BlockID, unsigned *NumWordsP = 0) {$/;"	f	class:llvm::BitstreamCursor
EnterSubblock	Bitcode/BitstreamWriter.h	/^  void EnterSubblock(unsigned BlockID, unsigned CodeLen) {$/;"	f	class:llvm::BitstreamWriter
Entry	ADT/IntervalMap.h	/^    Entry(NodeRef Node, unsigned Offset)$/;"	f	struct:llvm::IntervalMapImpl::Path::Entry
Entry	ADT/IntervalMap.h	/^    Entry(void *Node, unsigned Size, unsigned Offset)$/;"	f	struct:llvm::IntervalMapImpl::Path::Entry
Entry	ADT/IntervalMap.h	/^  struct Entry {$/;"	s	class:llvm::IntervalMapImpl::Path
Entry	Analysis/MemoryDependenceAnalysis.h	/^    NonLocalDepEntry Entry;$/;"	m	class:llvm::NonLocalDepResult
Entry	Support/Registry.h	/^      entry Entry;$/;"	m	class:llvm::Registry::Add
EntryFreq	Analysis/BlockFrequencyImpl.h	/^  const uint32_t EntryFreq;$/;"	m	class:llvm::BlockFrequencyImpl
EntryKind	CodeGen/MachineJumpTableInfo.h	/^  JTEntryKind EntryKind;$/;"	m	class:llvm::MachineJumpTableInfo
EntryNode	CodeGen/SelectionDAG.h	/^  SDNode EntryNode;$/;"	m	class:llvm::SelectionDAG
EntrySU	CodeGen/ScheduleDAG.h	/^    SUnit EntrySU;                        \/\/ Special node for the region entry.$/;"	m	class:llvm::ScheduleDAG
EntrySize	MC/MCSectionELF.h	/^  unsigned EntrySize;$/;"	m	class:llvm::MCSectionELF
EntryToken	CodeGen/ISDOpcodes.h	/^    EntryToken,$/;"	e	enum:llvm::ISD::NodeType
Env	MC/MCObjectFileInfo.h	/^  Environment Env;$/;"	m	class:llvm::MCObjectFileInfo
Environment	ADT/Triple.h	/^  EnvironmentType Environment;$/;"	m	class:llvm::Triple
Environment	MC/MCObjectFileInfo.h	/^  enum Environment { IsMachO, IsELF, IsCOFF };$/;"	g	class:llvm::MCObjectFileInfo
EnvironmentType	ADT/Triple.h	/^  enum EnvironmentType {$/;"	g	class:llvm::Triple
Eof	MC/MCParser/MCAsmLexer.h	/^    Eof, Error,$/;"	e	enum:llvm::AsmToken::TokenKind
EqClass	CodeGen/LiveInterval.h	/^    IntEqClasses EqClass;$/;"	m	class:llvm::ConnectedVNInfoEqClasses
Equal	MC/MCParser/MCAsmLexer.h	/^    Star, Dot, Comma, Dollar, Equal, EqualEqual,$/;"	e	enum:llvm::AsmToken::TokenKind
EqualEqual	MC/MCParser/MCAsmLexer.h	/^    Star, Dot, Comma, Dollar, Equal, EqualEqual,$/;"	e	enum:llvm::AsmToken::TokenKind
Equals	ADT/FoldingSet.h	/^DefaultContextualFoldingSetTrait<T, Ctx>::Equals(T &X,$/;"	f	class:llvm::DefaultContextualFoldingSetTrait
Equals	ADT/FoldingSet.h	/^DefaultFoldingSetTrait<T>::Equals(T &X, const FoldingSetNodeID &ID,$/;"	f	class:llvm::DefaultFoldingSetTrait
Equals	Analysis/ScalarEvolution.h	/^    static bool Equals(const SCEV &X, const FoldingSetNodeID &ID,$/;"	f	struct:llvm::FoldingSetTrait
EquivalenceClasses	ADT/EquivalenceClasses.h	/^  EquivalenceClasses() {}$/;"	f	class:llvm::EquivalenceClasses
EquivalenceClasses	ADT/EquivalenceClasses.h	/^  EquivalenceClasses(const EquivalenceClasses &RHS) {$/;"	f	class:llvm::EquivalenceClasses
EquivalenceClasses	ADT/EquivalenceClasses.h	/^class EquivalenceClasses {$/;"	c	namespace:llvm
Err	MC/MCParser/MCAsmLexer.h	/^  std::string Err;$/;"	m	class:llvm::MCAsmLexer
Err	MC/MCTargetAsmLexer.h	/^  std::string Err;$/;"	m	class:llvm::MCTargetAsmLexer
ErrLoc	MC/MCParser/MCAsmLexer.h	/^  SMLoc ErrLoc;$/;"	m	class:llvm::MCAsmLexer
ErrLoc	MC/MCTargetAsmLexer.h	/^  SMLoc ErrLoc;$/;"	m	class:llvm::MCTargetAsmLexer
Error	Linker.h	/^    std::string Error; \/\/\/< Text of error that occurred.$/;"	m	class:llvm::Linker
Error	MC/MCParser/MCAsmLexer.h	/^    Eof, Error,$/;"	e	enum:llvm::AsmToken::TokenKind
Error	MC/MCParser/MCAsmParserExtension.h	/^  bool Error(SMLoc L, const Twine &Msg) {$/;"	f	class:llvm::MCAsmParserExtension
Error	Module.h	/^  enum ModFlagBehavior { Error = 1, Warning  = 2, Require = 3, Override = 4 };$/;"	e	enum:llvm::Module::ModFlagBehavior
Error	Support/LockFileManager.h	/^  Optional<error_code> Error;$/;"	m	class:llvm::LockFileManager
Error	Support/raw_ostream.h	/^  bool Error;$/;"	m	class:llvm::raw_fd_ostream
ErrorStr	ExecutionEngine/ExecutionEngine.h	/^  std::string *ErrorStr;$/;"	m	class:llvm::EngineBuilder
Escape	MC/MCDwarf.h	/^    enum OpType { SameValue, RememberState, RestoreState, Move, RelMove, Escape,$/;"	e	enum:llvm::MCCFIInstruction::OpType
Eval	Analysis/DominatorInternals.h	/^Eval(DominatorTreeBase<typename GraphT::NodeType>& DT,$/;"	f	namespace:llvm
Exact	Analysis/ScalarEvolution.h	/^      const SCEV *Exact;$/;"	m	struct:llvm::ScalarEvolution::ExitLimit
ExactNotTaken	Analysis/ScalarEvolution.h	/^      const SCEV *ExactNotTaken;$/;"	m	struct:llvm::ScalarEvolution::ExitNotTakenInfo
Exact_match	Support/PatternMatch.h	/^  Exact_match(const SubPattern_t &SP) : SubPattern(SP) {}$/;"	f	struct:llvm::PatternMatch::Exact_match
Exact_match	Support/PatternMatch.h	/^struct Exact_match {$/;"	s	namespace:llvm::PatternMatch
ExceptionHandler	MC/MCWin64EH.h	/^    const MCSymbol *ExceptionHandler;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
ExceptionHandling	MC/MCAsmInfo.h	/^  namespace ExceptionHandling {$/;"	n	namespace:llvm
ExceptionPointerRegister	Target/TargetLowering.h	/^  unsigned ExceptionPointerRegister;$/;"	m	class:llvm::TargetLowering
ExceptionSelectorRegister	Target/TargetLowering.h	/^  unsigned ExceptionSelectorRegister;$/;"	m	class:llvm::TargetLowering
ExceptionTableDeregister	ExecutionEngine/ExecutionEngine.h	/^  EERegisterFn ExceptionTableDeregister;$/;"	m	class:llvm::ExecutionEngine
ExceptionTableRegister	ExecutionEngine/ExecutionEngine.h	/^  EERegisterFn ExceptionTableRegister;$/;"	m	class:llvm::ExecutionEngine
ExceptionsType	MC/MCAsmInfo.h	/^    ExceptionHandling::ExceptionsType ExceptionsType; \/\/ Defaults to None$/;"	m	class:llvm::MCAsmInfo
ExceptionsType	MC/MCAsmInfo.h	/^    enum ExceptionsType { None, DwarfCFI, SjLj, ARM, Win64 };$/;"	g	namespace:llvm::ExceptionHandling
Excess	CodeGen/RegisterPressure.h	/^  PressureElement Excess;$/;"	m	struct:llvm::RegPressureDelta
Exclaim	MC/MCParser/MCAsmLexer.h	/^    Amp, AmpAmp, Exclaim, ExclaimEqual, Percent, Hash,$/;"	e	enum:llvm::AsmToken::TokenKind
ExclaimEqual	MC/MCParser/MCAsmLexer.h	/^    Amp, AmpAmp, Exclaim, ExclaimEqual, Percent, Hash,$/;"	e	enum:llvm::AsmToken::TokenKind
ExecutionEngine	ExecutionEngine/ExecutionEngine.h	/^class ExecutionEngine {$/;"	c	namespace:llvm
ExecutionEngineState	ExecutionEngine/ExecutionEngine.h	/^class ExecutionEngineState {$/;"	c	namespace:llvm
ExitBlock	Bitcode/BitstreamWriter.h	/^  void ExitBlock() {$/;"	f	class:llvm::BitstreamWriter
ExitLimit	Analysis/ScalarEvolution.h	/^      ExitLimit(const SCEV *E, const SCEV *M) : Exact(E), Max(M) {}$/;"	f	struct:llvm::ScalarEvolution::ExitLimit
ExitLimit	Analysis/ScalarEvolution.h	/^      \/*implicit*\/ ExitLimit(const SCEV *E) : Exact(E), Max(E) {}$/;"	f	struct:llvm::ScalarEvolution::ExitLimit
ExitLimit	Analysis/ScalarEvolution.h	/^    struct ExitLimit {$/;"	s	class:llvm::ScalarEvolution
ExitNotTaken	Analysis/ScalarEvolution.h	/^      ExitNotTakenInfo ExitNotTaken;$/;"	m	class:llvm::ScalarEvolution::BackedgeTakenInfo
ExitNotTakenInfo	Analysis/ScalarEvolution.h	/^      ExitNotTakenInfo() : ExitingBlock(0), ExactNotTaken(0) {}$/;"	f	struct:llvm::ScalarEvolution::ExitNotTakenInfo
ExitNotTakenInfo	Analysis/ScalarEvolution.h	/^    struct ExitNotTakenInfo {$/;"	s	class:llvm::ScalarEvolution
ExitSU	CodeGen/ScheduleDAG.h	/^    SUnit ExitSU;                         \/\/ Special node for the region exit.$/;"	m	class:llvm::ScheduleDAG
ExitingBlock	Analysis/ScalarEvolution.h	/^      AssertingVH<BasicBlock> ExitingBlock;$/;"	m	struct:llvm::ScalarEvolution::ExitNotTakenInfo
Expand	Target/TargetLowering.h	/^    Expand,     \/\/ Try to expand this to other ops, otherwise use a libcall.$/;"	e	enum:llvm::TargetLowering::LegalizeAction
ExpandInlineAsm	Target/TargetLowering.h	/^  virtual bool ExpandInlineAsm(CallInst *) const {$/;"	f	class:llvm::TargetLowering
ExportSymbolFlagsHasSpecializations	Support/MachO.h	/^      ExportSymbolFlagsHasSpecializations = 0x10u, \/\/ EXPORT_SYMBOL_FLAGS_HAS_SPECIALIZATIONS$/;"	e	enum:llvm::MachO::__anon126
ExportSymbolFlagsIndirectDefinition	Support/MachO.h	/^      ExportSymbolFlagsIndirectDefinition = 0x08u, \/\/ EXPORT_SYMBOL_FLAGS_INDIRECT_DEFINITION$/;"	e	enum:llvm::MachO::__anon126
ExportSymbolFlagsKindMask	Support/MachO.h	/^      ExportSymbolFlagsKindMask           = 0x03u, \/\/ EXPORT_SYMBOL_FLAGS_KIND_MASK$/;"	e	enum:llvm::MachO::__anon126
ExportSymbolFlagsKindRegular	Support/MachO.h	/^      ExportSymbolFlagsKindRegular        = 0x00u, \/\/ EXPORT_SYMBOL_FLAGS_KIND_REGULAR$/;"	e	enum:llvm::MachO::__anon126
ExportSymbolFlagsKindThreadLocal	Support/MachO.h	/^      ExportSymbolFlagsKindThreadLocal    = 0x01u, \/\/ EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL$/;"	e	enum:llvm::MachO::__anon126
ExportSymbolFlagsWeakDefinition	Support/MachO.h	/^      ExportSymbolFlagsWeakDefinition     = 0x04u, \/\/ EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION$/;"	e	enum:llvm::MachO::__anon126
ExposesReturnsTwice	CodeGen/MachineFunction.h	/^  bool ExposesReturnsTwice;$/;"	m	class:llvm::MachineFunction
Expr	MC/MCExpr.h	/^  const MCExpr *Expr;$/;"	m	class:llvm::MCUnaryExpr
ExprKind	MC/MCExpr.h	/^  enum ExprKind {$/;"	g	class:llvm::MCExpr
ExprVal	MC/MCInst.h	/^    const MCExpr *ExprVal;$/;"	m	union:llvm::MCOperand::__anon67
ExtAddrMode	Transforms/Utils/AddrModeMatcher.h	/^  ExtAddrMode() : BaseReg(0), ScaledReg(0) {}$/;"	f	struct:llvm::ExtAddrMode
ExtAddrMode	Transforms/Utils/AddrModeMatcher.h	/^struct ExtAddrMode : public AddrMode {$/;"	s	namespace:llvm
ExtSym	CodeGen/MachineRelocation.h	/^    const char *ExtSym;     \/\/ If this is a pointer to a named symbol$/;"	m	union:llvm::MachineRelocation::__anon48
ExtendVecArgument	Intrinsics.h	/^      Argument, ExtendVecArgument, TruncVecArgument$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
ExtendedSymbolTable	Object/ELF.h	/^  DenseMap<const Elf_Sym*, ELF::Elf64_Word> ExtendedSymbolTable;$/;"	m	class:llvm::object::ELFObjectFile
ExtendedValueTypeNodes	CodeGen/SelectionDAG.h	/^  std::map<EVT, SDNode*, EVT::compareRawBits> ExtendedValueTypeNodes;$/;"	m	class:llvm::SelectionDAG
ExtensionFn	Transforms/IPO/PassManagerBuilder.h	/^  typedef void (*ExtensionFn)(const PassManagerBuilder &Builder,$/;"	t	class:llvm::PassManagerBuilder
ExtensionPointTy	Transforms/IPO/PassManagerBuilder.h	/^  enum ExtensionPointTy {$/;"	g	class:llvm::PassManagerBuilder
Extensions	Transforms/IPO/PassManagerBuilder.h	/^  std::vector<std::pair<ExtensionPointTy, ExtensionFn> > Extensions;$/;"	m	class:llvm::PassManagerBuilder
ExternDirective	MC/MCAsmInfo.h	/^    const char *ExternDirective;             \/\/ Defaults to NULL.$/;"	m	class:llvm::MCAsmInfo
ExternalBuffer	Support/raw_ostream.h	/^    ExternalBuffer$/;"	e	enum:llvm::raw_ostream::BufferKind
ExternalLinkage	GlobalValue.h	/^    ExternalLinkage = 0,\/\/\/< Externally visible function$/;"	e	enum:llvm::GlobalValue::LinkageTypes
ExternalRelocationTableOffset	Object/MachOFormat.h	/^    uint32_t ExternalRelocationTableOffset;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
ExternalSymbol	CodeGen/ISDOpcodes.h	/^    JumpTable, ConstantPool, ExternalSymbol, BlockAddress,$/;"	e	enum:llvm::ISD::NodeType
ExternalSymbolData	MC/MCMachObjectWriter.h	/^  std::vector<MachSymbolData> ExternalSymbolData;$/;"	m	class:llvm::MachObjectWriter
ExternalSymbolSDNode	CodeGen/SelectionDAGNodes.h	/^  ExternalSymbolSDNode(bool isTarget, const char *Sym, unsigned char TF, EVT VT)$/;"	f	class:llvm::ExternalSymbolSDNode
ExternalSymbolSDNode	CodeGen/SelectionDAGNodes.h	/^class ExternalSymbolSDNode : public SDNode {$/;"	c	namespace:llvm
ExternalSymbols	CodeGen/SelectionDAG.h	/^  StringMap<SDNode*> ExternalSymbols;$/;"	m	class:llvm::SelectionDAG
ExternalSymbolsIndex	Object/MachOFormat.h	/^    uint32_t ExternalSymbolsIndex;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
ExternalWeakLinkage	GlobalValue.h	/^    ExternalWeakLinkage,\/\/\/< ExternalWeak linkage description.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
ExtraData	ADT/ValueMap.h	/^  struct ExtraData {};$/;"	s	struct:llvm::ValueMapConfig
ExtraData	ADT/ValueMap.h	/^  typedef typename Config::ExtraData ExtraData;$/;"	t	class:llvm::ValueMap
ExtraData	ExecutionEngine/ExecutionEngine.h	/^    typedef ExecutionEngineState *ExtraData;$/;"	t	struct:llvm::ExecutionEngineState::AddressMapConfig
ExtraDefRegAllocReq	MC/MCInstrDesc.h	/^    ExtraDefRegAllocReq$/;"	e	enum:llvm::MCID::__anon69
ExtraSrcRegAllocReq	MC/MCInstrDesc.h	/^    ExtraSrcRegAllocReq,$/;"	e	enum:llvm::MCID::__anon69
Extra_AsmDialect	InlineAsm.h	/^    Extra_AsmDialect = 4,$/;"	e	enum:llvm::InlineAsm::__anon57
Extra_HasSideEffects	InlineAsm.h	/^    Extra_HasSideEffects = 1,$/;"	e	enum:llvm::InlineAsm::__anon57
Extra_IsAlignStack	InlineAsm.h	/^    Extra_IsAlignStack = 2,$/;"	e	enum:llvm::InlineAsm::__anon57
ExtractElementInst	Instructions.h	/^class ExtractElementInst : public Instruction {$/;"	c	namespace:llvm
ExtractValueInst	Instructions.h	/^ExtractValueInst::ExtractValueInst(Value *Agg,$/;"	f	class:llvm::ExtractValueInst
ExtractValueInst	Instructions.h	/^class ExtractValueInst : public UnaryInstruction {$/;"	c	namespace:llvm
F	ADT/ImmutableIntervalMap.h	/^    ImutIntervalAVLFactory<ImutIntervalInfo<ValT> > F;$/;"	m	class:llvm::ImmutableIntervalMap::Factory
F	ADT/ImmutableMap.h	/^    typename TreeTy::Factory F;$/;"	m	class:llvm::ImmutableMap::Factory
F	ADT/ImmutableSet.h	/^    typename TreeTy::Factory F;$/;"	m	class:llvm::ImmutableSet::Factory
F	Analysis/CallGraph.h	/^  AssertingVH<Function> F;$/;"	m	class:llvm::CallGraphNode
F	Analysis/DependenceAnalysis.h	/^    Function *F;$/;"	m	class:llvm::DependenceAnalysis
F	Analysis/ScalarEvolution.h	/^    Function *F;$/;"	m	class:llvm::ScalarEvolution
F	CodeGen/GCMetadata.h	/^    const Function &F;$/;"	m	class:llvm::GCFunctionInfo
F	Support/PatternMatch.h	/^  BasicBlock *&T, *&F;$/;"	m	struct:llvm::PatternMatch::brc_match
FABS	CodeGen/ISDOpcodes.h	/^    FNEG, FABS, FSQRT, FSIN, FCOS, FPOWI, FPOW,$/;"	e	enum:llvm::ISD::NodeType
FADD	CodeGen/ISDOpcodes.h	/^    FADD, FSUB, FMUL, FMA, FDIV, FREM,$/;"	e	enum:llvm::ISD::NodeType
FCEIL	CodeGen/ISDOpcodes.h	/^    FCEIL, FTRUNC, FRINT, FNEARBYINT, FFLOOR,$/;"	e	enum:llvm::ISD::NodeType
FCMP_FALSE	InstrTypes.h	/^    FCMP_FALSE =  0,  \/\/\/< 0 0 0 0    Always false (always folded)$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OEQ	InstrTypes.h	/^    FCMP_OEQ   =  1,  \/\/\/< 0 0 0 1    True if ordered and equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OGE	InstrTypes.h	/^    FCMP_OGE   =  3,  \/\/\/< 0 0 1 1    True if ordered and greater than or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OGT	InstrTypes.h	/^    FCMP_OGT   =  2,  \/\/\/< 0 0 1 0    True if ordered and greater than$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OLE	InstrTypes.h	/^    FCMP_OLE   =  5,  \/\/\/< 0 1 0 1    True if ordered and less than or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_OLT	InstrTypes.h	/^    FCMP_OLT   =  4,  \/\/\/< 0 1 0 0    True if ordered and less than$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_ONE	InstrTypes.h	/^    FCMP_ONE   =  6,  \/\/\/< 0 1 1 0    True if ordered and operands are unequal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_ORD	InstrTypes.h	/^    FCMP_ORD   =  7,  \/\/\/< 0 1 1 1    True if ordered (no nans)$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_TRUE	InstrTypes.h	/^    FCMP_TRUE  = 15,  \/\/\/< 1 1 1 1    Always true (always folded)$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UEQ	InstrTypes.h	/^    FCMP_UEQ   =  9,  \/\/\/< 1 0 0 1    True if unordered or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UGE	InstrTypes.h	/^    FCMP_UGE   = 11,  \/\/\/< 1 0 1 1    True if unordered, greater than, or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UGT	InstrTypes.h	/^    FCMP_UGT   = 10,  \/\/\/< 1 0 1 0    True if unordered or greater than$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_ULE	InstrTypes.h	/^    FCMP_ULE   = 13,  \/\/\/< 1 1 0 1    True if unordered, less than, or equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_ULT	InstrTypes.h	/^    FCMP_ULT   = 12,  \/\/\/< 1 1 0 0    True if unordered or less than$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UNE	InstrTypes.h	/^    FCMP_UNE   = 14,  \/\/\/< 1 1 1 0    True if unordered or not equal$/;"	e	enum:llvm::CmpInst::Predicate
FCMP_UNO	InstrTypes.h	/^    FCMP_UNO   =  8,  \/\/\/< 1 0 0 0    True if unordered: isnan(X) | isnan(Y)$/;"	e	enum:llvm::CmpInst::Predicate
FCOPYSIGN	CodeGen/ISDOpcodes.h	/^    FCOPYSIGN,$/;"	e	enum:llvm::ISD::NodeType
FCOS	CodeGen/ISDOpcodes.h	/^    FNEG, FABS, FSQRT, FSIN, FCOS, FPOWI, FPOW,$/;"	e	enum:llvm::ISD::NodeType
FCmpInst	Instructions.h	/^  FCmpInst($/;"	f	class:llvm::FCmpInst
FCmpInst	Instructions.h	/^class FCmpInst: public CmpInst {$/;"	c	namespace:llvm
FD	Support/raw_ostream.h	/^  int FD;$/;"	m	class:llvm::raw_fd_ostream
FDECFIEncoding	MC/MCObjectFileInfo.h	/^  unsigned FDECFIEncoding;$/;"	m	class:llvm::MCObjectFileInfo
FDEEncoding	MC/MCObjectFileInfo.h	/^  unsigned FDEEncoding;$/;"	m	class:llvm::MCObjectFileInfo
FDIV	CodeGen/ISDOpcodes.h	/^    FADD, FSUB, FMUL, FMA, FDIV, FREM,$/;"	e	enum:llvm::ISD::NodeType
FDP	Support/GraphWriter.h	/^      FDP,$/;"	e	enum:llvm::GraphProgram::Name
FEXP	CodeGen/ISDOpcodes.h	/^    FLOG, FLOG2, FLOG10, FEXP, FEXP2,$/;"	e	enum:llvm::ISD::NodeType
FEXP2	CodeGen/ISDOpcodes.h	/^    FLOG, FLOG2, FLOG10, FEXP, FEXP2,$/;"	e	enum:llvm::ISD::NodeType
FFLOOR	CodeGen/ISDOpcodes.h	/^    FCEIL, FTRUNC, FRINT, FNEARBYINT, FFLOOR,$/;"	e	enum:llvm::ISD::NodeType
FGETSIGN	CodeGen/ISDOpcodes.h	/^    FGETSIGN,$/;"	e	enum:llvm::ISD::NodeType
FI	CodeGen/PseudoSourceValue.h	/^    const int FI;$/;"	m	class:llvm::FixedStackPseudoSourceValue
FI	CodeGen/SelectionDAGNodes.h	/^  int FI;$/;"	m	class:llvm::FrameIndexSDNode
FIRST_APPLICATION_ABBREV	Bitcode/BitCodes.h	/^    FIRST_APPLICATION_ABBREV = 4$/;"	e	enum:llvm::bitc::FixedAbbrevIDs
FIRST_APPLICATION_BLOCKID	Bitcode/BitCodes.h	/^    FIRST_APPLICATION_BLOCKID = 8$/;"	e	enum:llvm::bitc::StandardBlockIDs
FIRST_BINARY_INST	Instruction.h	328;"	d
FIRST_BINOP	Instructions.h	/^    FIRST_BINOP = Xchg,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
FIRST_CAST_INST	Instruction.h	342;"	d
FIRST_FCMP_PREDICATE	InstrTypes.h	/^    FIRST_FCMP_PREDICATE = FCMP_FALSE,$/;"	e	enum:llvm::CmpInst::Predicate
FIRST_FP_VALUETYPE	CodeGen/ValueTypes.h	/^      FIRST_FP_VALUETYPE = f16,$/;"	e	enum:llvm::MVT::SimpleValueType
FIRST_FP_VECTOR_VALUETYPE	CodeGen/ValueTypes.h	/^      FIRST_FP_VECTOR_VALUETYPE = v2f16,$/;"	e	enum:llvm::MVT::SimpleValueType
FIRST_ICMP_PREDICATE	InstrTypes.h	/^    FIRST_ICMP_PREDICATE = ICMP_EQ,$/;"	e	enum:llvm::CmpInst::Predicate
FIRST_INTEGER_VALUETYPE	CodeGen/ValueTypes.h	/^      FIRST_INTEGER_VALUETYPE = i1,$/;"	e	enum:llvm::MVT::SimpleValueType
FIRST_INTEGER_VECTOR_VALUETYPE	CodeGen/ValueTypes.h	/^      FIRST_INTEGER_VECTOR_VALUETYPE = v2i1,$/;"	e	enum:llvm::MVT::SimpleValueType
FIRST_MEMORY_INST	Instruction.h	335;"	d
FIRST_OTHER_INST	Instruction.h	349;"	d
FIRST_TARGET_MATCH_RESULT_TY	MC/MCTargetAsmParser.h	/^    FIRST_TARGET_MATCH_RESULT_TY$/;"	e	enum:llvm::MCTargetAsmParser::MatchResultTy
FIRST_TARGET_MEMORY_OPCODE	CodeGen/ISDOpcodes.h	/^  static const int FIRST_TARGET_MEMORY_OPCODE = BUILTIN_OP_END+150;$/;"	m	namespace:llvm::ISD
FIRST_TERM_INST	Instruction.h	321;"	d
FIRST_VECTOR_VALUETYPE	CodeGen/ValueTypes.h	/^      FIRST_VECTOR_VALUETYPE = v2i1,$/;"	e	enum:llvm::MVT::SimpleValueType
FInfoMap	CodeGen/GCMetadata.h	/^    finfo_map_type FInfoMap;$/;"	m	class:llvm::GCModuleInfo
FKF_IsAlignedDownTo32Bits	MC/MCFixupKindInfo.h	/^    FKF_IsAlignedDownTo32Bits = (1 << 1)$/;"	e	enum:llvm::MCFixupKindInfo::FixupKindFlags
FKF_IsPCRel	MC/MCFixupKindInfo.h	/^    FKF_IsPCRel = (1 << 0),$/;"	e	enum:llvm::MCFixupKindInfo::FixupKindFlags
FK_Data_1	MC/MCFixup.h	/^  FK_Data_1 = 0, \/\/\/< A one-byte fixup.$/;"	e	enum:llvm::MCFixupKind
FK_Data_2	MC/MCFixup.h	/^  FK_Data_2,     \/\/\/< A two-byte fixup.$/;"	e	enum:llvm::MCFixupKind
FK_Data_4	MC/MCFixup.h	/^  FK_Data_4,     \/\/\/< A four-byte fixup.$/;"	e	enum:llvm::MCFixupKind
FK_Data_8	MC/MCFixup.h	/^  FK_Data_8,     \/\/\/< A eight-byte fixup.$/;"	e	enum:llvm::MCFixupKind
FK_GPRel_1	MC/MCFixup.h	/^  FK_GPRel_1,    \/\/\/< A one-byte gp relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_GPRel_2	MC/MCFixup.h	/^  FK_GPRel_2,    \/\/\/< A two-byte gp relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_GPRel_4	MC/MCFixup.h	/^  FK_GPRel_4,    \/\/\/< A four-byte gp relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_GPRel_8	MC/MCFixup.h	/^  FK_GPRel_8,    \/\/\/< A eight-byte gp relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_PCRel_1	MC/MCFixup.h	/^  FK_PCRel_1,    \/\/\/< A one-byte pc relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_PCRel_2	MC/MCFixup.h	/^  FK_PCRel_2,    \/\/\/< A two-byte pc relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_PCRel_4	MC/MCFixup.h	/^  FK_PCRel_4,    \/\/\/< A four-byte pc relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_PCRel_8	MC/MCFixup.h	/^  FK_PCRel_8,    \/\/\/< A eight-byte pc relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_SecRel_1	MC/MCFixup.h	/^  FK_SecRel_1,   \/\/\/< A one-byte section relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_SecRel_2	MC/MCFixup.h	/^  FK_SecRel_2,   \/\/\/< A two-byte section relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_SecRel_4	MC/MCFixup.h	/^  FK_SecRel_4,   \/\/\/< A four-byte section relative fixup.$/;"	e	enum:llvm::MCFixupKind
FK_SecRel_8	MC/MCFixup.h	/^  FK_SecRel_8,   \/\/\/< A eight-byte section relative fixup.$/;"	e	enum:llvm::MCFixupKind
FLOAT_ALIGN	DataLayout.h	/^  FLOAT_ALIGN = 'f',                 \/\/\/< Floating point type alignment$/;"	e	enum:llvm::AlignTypeEnum
FLOG	CodeGen/ISDOpcodes.h	/^    FLOG, FLOG2, FLOG10, FEXP, FEXP2,$/;"	e	enum:llvm::ISD::NodeType
FLOG10	CodeGen/ISDOpcodes.h	/^    FLOG, FLOG2, FLOG10, FEXP, FEXP2,$/;"	e	enum:llvm::ISD::NodeType
FLOG2	CodeGen/ISDOpcodes.h	/^    FLOG, FLOG2, FLOG10, FEXP, FEXP2,$/;"	e	enum:llvm::ISD::NodeType
FLOOR_F32	CodeGen/RuntimeLibcalls.h	/^    FLOOR_F32,$/;"	e	enum:llvm::RTLIB::Libcall
FLOOR_F64	CodeGen/RuntimeLibcalls.h	/^    FLOOR_F64,$/;"	e	enum:llvm::RTLIB::Libcall
FLOOR_F80	CodeGen/RuntimeLibcalls.h	/^    FLOOR_F80,$/;"	e	enum:llvm::RTLIB::Libcall
FLOOR_PPCF128	CodeGen/RuntimeLibcalls.h	/^    FLOOR_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
FLT_ROUNDS_	CodeGen/ISDOpcodes.h	/^    FLT_ROUNDS_,$/;"	e	enum:llvm::ISD::NodeType
FL_No	Metadata.h	/^    FL_No = 0,$/;"	e	enum:llvm::MDNode::FunctionLocalness
FL_Unknown	Metadata.h	/^    FL_Unknown = -1,$/;"	e	enum:llvm::MDNode::FunctionLocalness
FL_Yes	Metadata.h	/^    FL_Yes = 1$/;"	e	enum:llvm::MDNode::FunctionLocalness
FMA	CodeGen/ISDOpcodes.h	/^    FADD, FSUB, FMUL, FMA, FDIV, FREM,$/;"	e	enum:llvm::ISD::NodeType
FMA_F32	CodeGen/RuntimeLibcalls.h	/^    FMA_F32,$/;"	e	enum:llvm::RTLIB::Libcall
FMA_F64	CodeGen/RuntimeLibcalls.h	/^    FMA_F64,$/;"	e	enum:llvm::RTLIB::Libcall
FMA_F80	CodeGen/RuntimeLibcalls.h	/^    FMA_F80,$/;"	e	enum:llvm::RTLIB::Libcall
FMA_PPCF128	CodeGen/RuntimeLibcalls.h	/^    FMA_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
FMUL	CodeGen/ISDOpcodes.h	/^    FADD, FSUB, FMUL, FMA, FDIV, FREM,$/;"	e	enum:llvm::ISD::NodeType
FNEARBYINT	CodeGen/ISDOpcodes.h	/^    FCEIL, FTRUNC, FRINT, FNEARBYINT, FFLOOR,$/;"	e	enum:llvm::ISD::NodeType
FNEG	CodeGen/ISDOpcodes.h	/^    FNEG, FABS, FSQRT, FSIN, FCOS, FPOWI, FPOW,$/;"	e	enum:llvm::ISD::NodeType
FORCE_DEFINING_FILE_TO_BE_LINKED	Support/IncludeFile.h	32;"	d
FORCE_DEFINING_FILE_TO_BE_LINKED	Support/IncludeFile.h	40;"	d
FOREACH	TableGen/Record.h	/^  enum TernaryOp { SUBST, FOREACH, IF };$/;"	e	enum:llvm::TernOpInit::TernaryOp
FP128TyID	Type.h	/^    FP128TyID,       \/\/\/<  5: 128-bit floating point type (112-bit mantissa)$/;"	e	enum:llvm::Type::TypeID
FP16_TO_FP32	CodeGen/ISDOpcodes.h	/^    FP16_TO_FP32, FP32_TO_FP16,$/;"	e	enum:llvm::ISD::NodeType
FP32_TO_FP16	CodeGen/ISDOpcodes.h	/^    FP16_TO_FP32, FP32_TO_FP16,$/;"	e	enum:llvm::ISD::NodeType
FPEXT_F16_F32	CodeGen/RuntimeLibcalls.h	/^    FPEXT_F16_F32,$/;"	e	enum:llvm::RTLIB::Libcall
FPEXT_F32_F64	CodeGen/RuntimeLibcalls.h	/^    FPEXT_F32_F64,$/;"	e	enum:llvm::RTLIB::Libcall
FPExtInst	Instructions.h	/^class FPExtInst : public CastInst {$/;"	c	namespace:llvm
FPImmVal	MC/MCInst.h	/^    double FPImmVal;$/;"	m	union:llvm::MCOperand::__anon67
FPM	PassManager.h	/^  FunctionPassManagerImpl *FPM;$/;"	m	class:llvm::FunctionPassManager
FPMathOperator	Operator.h	/^class FPMathOperator : public Operator {$/;"	c	namespace:llvm
FPOW	CodeGen/ISDOpcodes.h	/^    FNEG, FABS, FSQRT, FSIN, FCOS, FPOWI, FPOW,$/;"	e	enum:llvm::ISD::NodeType
FPOWI	CodeGen/ISDOpcodes.h	/^    FNEG, FABS, FSQRT, FSIN, FCOS, FPOWI, FPOW,$/;"	e	enum:llvm::ISD::NodeType
FPOpFusion	Target/TargetOptions.h	/^  namespace FPOpFusion {$/;"	n	namespace:llvm
FPOpFusionMode	Target/TargetOptions.h	/^    enum FPOpFusionMode {$/;"	g	namespace:llvm::FPOpFusion
FPPassManager	PassManagers.h	/^  explicit FPPassManager()$/;"	f	class:llvm::FPPassManager
FPPassManager	PassManagers.h	/^class FPPassManager : public ModulePass, public PMDataManager {$/;"	c	namespace:llvm
FPROUND_F32_F16	CodeGen/RuntimeLibcalls.h	/^    FPROUND_F32_F16,$/;"	e	enum:llvm::RTLIB::Libcall
FPROUND_F64_F32	CodeGen/RuntimeLibcalls.h	/^    FPROUND_F64_F32,$/;"	e	enum:llvm::RTLIB::Libcall
FPROUND_F80_F32	CodeGen/RuntimeLibcalls.h	/^    FPROUND_F80_F32,$/;"	e	enum:llvm::RTLIB::Libcall
FPROUND_F80_F64	CodeGen/RuntimeLibcalls.h	/^    FPROUND_F80_F64,$/;"	e	enum:llvm::RTLIB::Libcall
FPROUND_PPCF128_F32	CodeGen/RuntimeLibcalls.h	/^    FPROUND_PPCF128_F32,$/;"	e	enum:llvm::RTLIB::Libcall
FPROUND_PPCF128_F64	CodeGen/RuntimeLibcalls.h	/^    FPROUND_PPCF128_F64,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F32_I128	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F32_I128,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F32_I16	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F32_I16,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F32_I32	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F32_I32,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F32_I64	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F32_I64,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F32_I8	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F32_I8,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F64_I128	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F64_I128,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F64_I16	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F64_I16,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F64_I32	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F64_I32,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F64_I64	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F64_I64,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F64_I8	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F64_I8,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F80_I128	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F80_I128,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F80_I32	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F80_I32,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_F80_I64	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_F80_I64,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_PPCF128_I128	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_PPCF128_I128,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_PPCF128_I32	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_PPCF128_I32,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOSINT_PPCF128_I64	CodeGen/RuntimeLibcalls.h	/^    FPTOSINT_PPCF128_I64,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F32_I128	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F32_I128,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F32_I16	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F32_I16,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F32_I32	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F32_I32,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F32_I64	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F32_I64,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F32_I8	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F32_I8,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F64_I128	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F64_I128,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F64_I16	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F64_I16,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F64_I32	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F64_I32,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F64_I64	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F64_I64,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F64_I8	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F64_I8,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F80_I128	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F80_I128,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F80_I32	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F80_I32,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_F80_I64	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_F80_I64,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_PPCF128_I128	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_PPCF128_I128,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_PPCF128_I32	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_PPCF128_I32,$/;"	e	enum:llvm::RTLIB::Libcall
FPTOUINT_PPCF128_I64	CodeGen/RuntimeLibcalls.h	/^    FPTOUINT_PPCF128_I64,$/;"	e	enum:llvm::RTLIB::Libcall
FPToSIInst	Instructions.h	/^class FPToSIInst  : public CastInst {$/;"	c	namespace:llvm
FPToUIInst	Instructions.h	/^class FPToUIInst  : public CastInst {$/;"	c	namespace:llvm
FPTruncInst	Instructions.h	/^class FPTruncInst : public CastInst {$/;"	c	namespace:llvm
FP_EXTEND	CodeGen/ISDOpcodes.h	/^    FP_EXTEND,$/;"	e	enum:llvm::ISD::NodeType
FP_ROUND	CodeGen/ISDOpcodes.h	/^    FP_ROUND,$/;"	e	enum:llvm::ISD::NodeType
FP_ROUND_INREG	CodeGen/ISDOpcodes.h	/^    FP_ROUND_INREG,$/;"	e	enum:llvm::ISD::NodeType
FP_TO_SINT	CodeGen/ISDOpcodes.h	/^    FP_TO_SINT,$/;"	e	enum:llvm::ISD::NodeType
FP_TO_UINT	CodeGen/ISDOpcodes.h	/^    FP_TO_UINT,$/;"	e	enum:llvm::ISD::NodeType
FRAMEADDR	CodeGen/ISDOpcodes.h	/^    FRAMEADDR, RETURNADDR,$/;"	e	enum:llvm::ISD::NodeType
FRAME_TO_ARGS_OFFSET	CodeGen/ISDOpcodes.h	/^    FRAME_TO_ARGS_OFFSET,$/;"	e	enum:llvm::ISD::NodeType
FREEING_MSG	PassManagers.h	/^  FREEING_MSG, \/\/ " Freeing Pass '"$/;"	e	enum:llvm::PassDebuggingString
FREM	CodeGen/ISDOpcodes.h	/^    FADD, FSUB, FMUL, FMA, FDIV, FREM,$/;"	e	enum:llvm::ISD::NodeType
FRINT	CodeGen/ISDOpcodes.h	/^    FCEIL, FTRUNC, FRINT, FNEARBYINT, FFLOOR,$/;"	e	enum:llvm::ISD::NodeType
FS	Support/Solaris.h	23;"	d
FSIN	CodeGen/ISDOpcodes.h	/^    FNEG, FABS, FSQRT, FSIN, FCOS, FPOWI, FPOW,$/;"	e	enum:llvm::ISD::NodeType
FSQRT	CodeGen/ISDOpcodes.h	/^    FNEG, FABS, FSQRT, FSIN, FCOS, FPOWI, FPOW,$/;"	e	enum:llvm::ISD::NodeType
FSUB	CodeGen/ISDOpcodes.h	/^    FADD, FSUB, FMUL, FMA, FDIV, FREM,$/;"	e	enum:llvm::ISD::NodeType
FTRUNC	CodeGen/ISDOpcodes.h	/^    FCEIL, FTRUNC, FRINT, FNEARBYINT, FFLOOR,$/;"	e	enum:llvm::ISD::NodeType
FT_Align	MC/MCAssembler.h	/^    FT_Align,$/;"	e	enum:llvm::MCFragment::FragmentType
FT_Data	MC/MCAssembler.h	/^    FT_Data,$/;"	e	enum:llvm::MCFragment::FragmentType
FT_Dwarf	MC/MCAssembler.h	/^    FT_Dwarf,$/;"	e	enum:llvm::MCFragment::FragmentType
FT_DwarfFrame	MC/MCAssembler.h	/^    FT_DwarfFrame,$/;"	e	enum:llvm::MCFragment::FragmentType
FT_Fill	MC/MCAssembler.h	/^    FT_Fill,$/;"	e	enum:llvm::MCFragment::FragmentType
FT_Inst	MC/MCAssembler.h	/^    FT_Inst,$/;"	e	enum:llvm::MCFragment::FragmentType
FT_LEB	MC/MCAssembler.h	/^    FT_LEB$/;"	e	enum:llvm::MCFragment::FragmentType
FT_Org	MC/MCAssembler.h	/^    FT_Org,$/;"	e	enum:llvm::MCFragment::FragmentType
FUNCTION_BLOCK_ID	Bitcode/LLVMBitCodes.h	/^    FUNCTION_BLOCK_ID,$/;"	e	enum:llvm::bitc::BlockIDs
FUNC_CODE_DEBUG_LOC	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_DEBUG_LOC        = 35, \/\/ DEBUG_LOC:  [Line,Col,ScopeVal, IAVal]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_DEBUG_LOC_AGAIN	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_DEBUG_LOC_AGAIN  = 33, \/\/ DEBUG_LOC_AGAIN$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_DECLAREBLOCKS	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_DECLAREBLOCKS    =  1, \/\/ DECLAREBLOCKS: [n]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_ALLOCA	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_ALLOCA      = 19, \/\/ ALLOCA:     [instty, op, align]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_ATOMICRMW	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_ATOMICRMW   = 38, \/\/ ATOMICRMW: [ptrty,ptr,val, operation,$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_BINOP	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_BINOP       =  2, \/\/ BINOP:      [opcode, ty, opval, opval]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_BR	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_BR          = 11, \/\/ BR:         [bb#, bb#, cond] or [bb#]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_CALL	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_CALL        = 34, \/\/ CALL:       [attr, fnty, fnid, args...]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_CAST	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_CAST        =  3, \/\/ CAST:       [opcode, ty, opty, opval]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_CMP	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_CMP         =  9, \/\/ CMP:        [opty, opval, opval, pred]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_CMP2	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_CMP2        = 28, \/\/ CMP2:       [opty, opval, opval, pred]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_CMPXCHG	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_CMPXCHG     = 37, \/\/ CMPXCHG: [ptrty,ptr,cmp,new, align, vol,$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_EXTRACTELT	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_EXTRACTELT  =  6, \/\/ EXTRACTELT: [opty, opval, opval]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_EXTRACTVAL	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_EXTRACTVAL  = 26, \/\/ EXTRACTVAL: [n x operands]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_FENCE	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_FENCE       = 36, \/\/ FENCE: [ordering, synchscope]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_GEP	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_GEP         =  4, \/\/ GEP:        [n x operands]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_INBOUNDS_GEP	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_INBOUNDS_GEP= 30, \/\/ INBOUNDS_GEP: [n x operands]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_INDIRECTBR	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_INDIRECTBR  = 31, \/\/ INDIRECTBR: [opty, op0, op1, ...]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_INSERTELT	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_INSERTELT   =  7, \/\/ INSERTELT:  [ty, opval, opval, opval]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_INSERTVAL	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_INSERTVAL   = 27, \/\/ INSERTVAL:  [n x operands]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_INVOKE	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_INVOKE      = 13, \/\/ INVOKE:     [attr, fnty, op0,op1, ...]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_LANDINGPAD	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_LANDINGPAD  = 40, \/\/ LANDINGPAD: [ty,val,val,num,id0,val0...]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_LOAD	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_LOAD        = 20, \/\/ LOAD:       [opty, op, align, vol]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_LOADATOMIC	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_LOADATOMIC  = 41, \/\/ LOAD: [opty, op, align, vol,$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_PHI	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_PHI         = 16, \/\/ PHI:        [ty, val0,bb0, ...]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_RESUME	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_RESUME      = 39, \/\/ RESUME:     [opval]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_RET	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_RET         = 10, \/\/ RET:        [opty,opval<both optional>]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_SELECT	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_SELECT      =  5, \/\/ SELECT:     [ty, opval, opval, opval]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_SHUFFLEVEC	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_SHUFFLEVEC  =  8, \/\/ SHUFFLEVEC: [ty, opval, opval, opval]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_STORE	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_STORE       = 24, \/\/ STORE:      [ptrty,ptr,val, align, vol]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_STOREATOMIC	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_STOREATOMIC = 42  \/\/ STORE: [ptrty,ptr,val, align, vol$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_SWITCH	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_SWITCH      = 12, \/\/ SWITCH:     [opty, op0, op1, ...]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_UNREACHABLE	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_UNREACHABLE = 15, \/\/ UNREACHABLE$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_VAARG	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_VAARG       = 23, \/\/ VAARG:      [valistty, valist, instty]$/;"	e	enum:llvm::bitc::FunctionCodes
FUNC_CODE_INST_VSELECT	Bitcode/LLVMBitCodes.h	/^    FUNC_CODE_INST_VSELECT     = 29, \/\/ VSELECT:    [ty,opval,opval,predty,pred]$/;"	e	enum:llvm::bitc::FunctionCodes
F_Append	Support/raw_ostream.h	/^    F_Append = 2,$/;"	e	enum:llvm::raw_fd_ostream::__anon136
F_Binary	Support/raw_ostream.h	/^    F_Binary = 4$/;"	e	enum:llvm::raw_fd_ostream::__anon136
F_Excl	Support/raw_ostream.h	/^    F_Excl  = 1,$/;"	e	enum:llvm::raw_fd_ostream::__anon136
F_executable	Support/FileOutputBuffer.h	/^    F_executable = 1  \/\/\/ set the 'x' bit on the resulting file$/;"	e	enum:llvm::FileOutputBuffer::__anon133
Factory	ADT/ImmutableIntervalMap.h	/^    Factory(BumpPtrAllocator& Alloc) : F(Alloc) {}$/;"	f	class:llvm::ImmutableIntervalMap::Factory
Factory	ADT/ImmutableIntervalMap.h	/^  class Factory {$/;"	c	class:llvm::ImmutableIntervalMap
Factory	ADT/ImmutableList.h	/^  typedef ImmutableListFactory<T> Factory;$/;"	t	class:llvm::ImmutableList
Factory	ADT/ImmutableMap.h	/^    Factory(BumpPtrAllocator& Alloc, bool canonicalize = true)$/;"	f	class:llvm::ImmutableMap::Factory
Factory	ADT/ImmutableMap.h	/^    Factory(bool canonicalize = true)$/;"	f	class:llvm::ImmutableMap::Factory
Factory	ADT/ImmutableMap.h	/^  FactoryTy *Factory;$/;"	m	class:llvm::ImmutableMapRef
Factory	ADT/ImmutableMap.h	/^  class Factory {$/;"	c	class:llvm::ImmutableMap
Factory	ADT/ImmutableSet.h	/^    Factory(BumpPtrAllocator& Alloc, bool canonicalize = true)$/;"	f	class:llvm::ImmutableSet::Factory
Factory	ADT/ImmutableSet.h	/^    Factory(bool canonicalize = true)$/;"	f	class:llvm::ImmutableSet::Factory
Factory	ADT/ImmutableSet.h	/^  FactoryTy *Factory;$/;"	m	class:llvm::ImmutableSetRef
Factory	ADT/ImmutableSet.h	/^  class Factory {$/;"	c	class:llvm::ImmutableSet
Factory	ADT/ImmutableSet.h	/^  typedef ImutAVLFactory<ImutInfo>          Factory;$/;"	t	class:llvm::ImutAVLTree
FactoryTy	ADT/ImmutableMap.h	/^  typedef typename TreeTy::Factory          FactoryTy;$/;"	t	class:llvm::ImmutableMapRef
FactoryTy	ADT/ImmutableSet.h	/^  typedef typename TreeTy::Factory          FactoryTy;$/;"	t	class:llvm::ImmutableSetRef
Fail	MC/MCDisassembler.h	/^    Fail = 0,$/;"	e	enum:llvm::MCDisassembler::DecodeStatus
FailedTestsCache	ADT/DeltaAlgorithm.h	/^  std::set<changeset_ty> FailedTestsCache;$/;"	m	class:llvm::DeltaAlgorithm
False	Analysis/LazyValueInfo.h	/^    Unknown = -1, False = 0, True = 1$/;"	e	enum:llvm::LazyValueInfo::Tristate
Fast	CallingConv.h	/^    Fast = 8,$/;"	e	enum:llvm::CallingConv::ID
Fast	Target/TargetOptions.h	/^      Fast,     \/\/ Enable fusion of FP ops wherever it's profitable.$/;"	e	enum:llvm::FPOpFusion::FPOpFusionMode
FastDep	Transforms/Vectorize.h	/^  bool FastDep;$/;"	m	struct:llvm::VectorizeConfig
FastFoldingSetNode	ADT/FoldingSet.h	/^  explicit FastFoldingSetNode(const FoldingSetNodeID &ID) : FastID(ID) {}$/;"	f	class:llvm::FastFoldingSetNode
FastFoldingSetNode	ADT/FoldingSet.h	/^class FastFoldingSetNode : public FoldingSetNode {$/;"	c	namespace:llvm
FastID	ADT/FoldingSet.h	/^  FoldingSetNodeID FastID;$/;"	m	class:llvm::FastFoldingSetNode
FastID	Analysis/ScalarEvolution.h	/^    FoldingSetNodeIDRef FastID;$/;"	m	class:llvm::SCEV
FastISel	CodeGen/FastISel.h	/^class FastISel {$/;"	c	namespace:llvm
FeatureBits	MC/MCSubtargetInfo.h	/^  uint64_t FeatureBits;                \/\/ Feature bits for current CPU + FS$/;"	m	class:llvm::MCSubtargetInfo
Features	MC/SubtargetFeature.h	/^  std::vector<std::string> Features;    \/\/ Subtarget features as a vector$/;"	m	class:llvm::SubtargetFeatures
FenceInst	Instructions.h	/^class FenceInst : public Instruction {$/;"	c	namespace:llvm
FieldInit	TableGen/Record.h	/^  FieldInit(Init *R, const std::string &FN)$/;"	f	class:llvm::FieldInit
FieldInit	TableGen/Record.h	/^class FieldInit : public TypedInit {$/;"	c	namespace:llvm
FieldName	TableGen/Record.h	/^  std::string FieldName;    \/\/ Field we are accessing$/;"	m	class:llvm::FieldInit
File	Support/COFF.h	/^    AuxiliaryFile               File;$/;"	m	union:llvm::COFF::Auxiliary
FileAlignment	Support/COFF.h	/^    uint32_t FileAlignment;$/;"	m	struct:llvm::COFF::PEHeader
FileDescriptor	Support/FileSystem.h	/^  int FileDescriptor;$/;"	m	class:llvm::sys::fs::mapped_file_region
FileHandle	Support/FileSystem.h	/^  void *FileHandle;$/;"	m	class:llvm::sys::fs::mapped_file_region
FileInfo	Support/GCOV.h	/^class FileInfo {$/;"	c	namespace:llvm
FileLineInfo	DebugInfo/DIContext.h	/^    FileLineInfo = 1 << 0,$/;"	e	enum:llvm::DILineInfoSpecifier::Specification
FileMappingHandle	Support/FileSystem.h	/^  void *FileMappingHandle;$/;"	m	class:llvm::sys::fs::mapped_file_region
FileName	DebugInfo/DIContext.h	/^  SmallString<16> FileName;$/;"	m	class:llvm::DILineInfo
FileName	Support/COFF.h	/^    uint8_t FileName[18];$/;"	m	struct:llvm::COFF::AuxiliaryFile
FileNum	MC/MCDwarf.h	/^    unsigned FileNum;$/;"	m	class:llvm::MCDwarfLoc
FileNumber	MC/MCDwarf.h	/^    unsigned FileNumber;$/;"	m	class:llvm::MCGenDwarfLabelEntry
FileOffset	Object/MachOFormat.h	/^    uint32_t FileOffset;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
FileOffset	Object/MachOFormat.h	/^    uint64_t FileOffset;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
FileOutputBuffer	Support/FileOutputBuffer.h	/^class FileOutputBuffer {$/;"	c	namespace:llvm
FileRemover	Support/FileUtilities.h	/^    FileRemover() : DeleteIt(false) {}$/;"	f	class:llvm::FileRemover
FileRemover	Support/FileUtilities.h	/^    explicit FileRemover(const Twine& filename, bool deleteIt = true)$/;"	f	class:llvm::FileRemover
FileRemover	Support/FileUtilities.h	/^  class FileRemover {$/;"	c	namespace:llvm
FileSize	Object/MachOFormat.h	/^    uint32_t FileSize;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
FileSize	Object/MachOFormat.h	/^    uint64_t FileSize;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
FileSizeInPages	Support/COFF.h	/^    uint16_t FileSizeInPages;$/;"	m	struct:llvm::COFF::DOSHeader
FileStatus	Support/PathV1.h	/^    FileStatus() : fileSize(0), modTime(0,0), mode(0777), user(999),$/;"	f	class:llvm::sys::FileStatus
FileStatus	Support/PathV1.h	/^  class FileStatus {$/;"	c	namespace:llvm::sys
FileType	Object/MachOFormat.h	/^    uint32_t FileType;$/;"	m	struct:llvm::object::macho::Header
Filename	Analysis/ProfileDataLoader.h	/^  const std::string &Filename;$/;"	m	class:llvm::ProfileDataLoader
Filename	Analysis/ProfileInfoLoader.h	/^  const std::string &Filename;$/;"	m	class:llvm::ProfileInfoLoader
Filename	Support/FileUtilities.h	/^    SmallString<128> Filename;$/;"	m	class:llvm::FileRemover
Filename	Support/GCOV.h	/^  StringRef Filename;$/;"	m	class:llvm::GCOVFunction
Filename	Support/SourceMgr.h	/^  std::string Filename;$/;"	m	class:llvm::SMDiagnostic
Filename	Support/ToolOutputFile.h	/^    std::string Filename;$/;"	m	class:llvm::tool_output_file::CleanupInstaller
Filled	Support/circular_raw_ostream.h	/^    bool Filled;$/;"	m	class:llvm::circular_raw_ostream
Filter	Instructions.h	/^  enum ClauseType { Catch, Filter };$/;"	e	enum:llvm::LandingPadInst::ClauseType
FilterEnds	CodeGen/MachineModuleInfo.h	/^  std::vector<unsigned> FilterEnds;$/;"	m	class:llvm::MachineModuleInfo
FilterIds	CodeGen/MachineModuleInfo.h	/^  std::vector<unsigned> FilterIds;$/;"	m	class:llvm::MachineModuleInfo
FilteredPassNameParser	Support/PassNameParser.h	/^class FilteredPassNameParser : public PassNameParser {$/;"	c	namespace:llvm
FinalPath	Support/FileOutputBuffer.h	/^  SmallString<128>    FinalPath;$/;"	m	class:llvm::FileOutputBuffer
Find	ADT/ImmutableIntervalMap.h	/^  TreeTy *Find(TreeTy *T, key_type_ref K) {$/;"	f	class:llvm::ImutIntervalAVLFactory
FindAndConstruct	ADT/DenseMap.h	/^  value_type& FindAndConstruct(KeyT &&Key) {$/;"	f	class:llvm::DenseMapBase
FindAndConstruct	ADT/DenseMap.h	/^  value_type& FindAndConstruct(const KeyT &Key) {$/;"	f	class:llvm::DenseMapBase
FindAndConstruct	ADT/ValueMap.h	/^  value_type& FindAndConstruct(const KeyT &Key) {$/;"	f	class:llvm::ValueMap
FindAvailableVals	Transforms/Utils/SSAUpdaterImpl.h	/^  void FindAvailableVals(BlockListTy *BlockList) {$/;"	f	class:llvm::SSAUpdaterImpl
FindDominators	Transforms/Utils/SSAUpdaterImpl.h	/^  void FindDominators(BlockListTy *BlockList, BBInfo *PseudoEntry) {$/;"	f	class:llvm::SSAUpdaterImpl
FindExistingPHI	Transforms/Utils/SSAUpdaterImpl.h	/^  void FindExistingPHI(BlkT *BB, BlockListTy *BlockList) {$/;"	f	class:llvm::SSAUpdaterImpl
FindLineNumber	Support/SourceMgr.h	/^  unsigned FindLineNumber(SMLoc Loc, int BufferID = -1) const {$/;"	f	class:llvm::SourceMgr
FindLiveRangeContaining	CodeGen/LiveInterval.h	/^    const_iterator FindLiveRangeContaining(SlotIndex Idx) const {$/;"	f	class:llvm::LiveInterval
FindLiveRangeContaining	CodeGen/LiveInterval.h	/^    iterator FindLiveRangeContaining(SlotIndex Idx) {$/;"	f	class:llvm::LiveInterval
FindLowerBound	ADT/SparseBitVector.h	/^  ElementListIter FindLowerBound(unsigned ElementIndex) {$/;"	f	class:llvm::SparseBitVector
FindNodeOrInsertPos	ADT/FoldingSet.h	/^  T *FindNodeOrInsertPos(const FoldingSetNodeID &ID, void *&InsertPos) {$/;"	f	class:llvm::ContextualFoldingSet
FindNodeOrInsertPos	ADT/FoldingSet.h	/^  T *FindNodeOrInsertPos(const FoldingSetNodeID &ID, void *&InsertPos) {$/;"	f	class:llvm::FoldingSet
FindNodeOrInsertPos	ADT/FoldingSet.h	/^  T *FindNodeOrInsertPos(const FoldingSetNodeID &ID, void *&InsertPos) {$/;"	f	class:llvm::FoldingSetVector
FindPHIPlacement	Transforms/Utils/SSAUpdaterImpl.h	/^  void FindPHIPlacement(BlockListTy *BlockList) {$/;"	f	class:llvm::SSAUpdaterImpl
FindUsedTypes	Analysis/FindUsedTypes.h	/^  FindUsedTypes() : ModulePass(ID) {$/;"	f	class:llvm::FindUsedTypes
FindUsedTypes	Analysis/FindUsedTypes.h	/^class FindUsedTypes : public ModulePass {$/;"	c	namespace:llvm
FirstByValReg	CodeGen/CallingConvLower.h	/^  unsigned FirstByValReg;$/;"	m	class:llvm::CCState
FirstByValRegValid	CodeGen/CallingConvLower.h	/^  bool FirstByValRegValid;$/;"	m	class:llvm::CCState
FirstDbgValue	CodeGen/ScheduleDAGInstrs.h	/^    MachineInstr *FirstDbgValue;$/;"	m	class:llvm::ScheduleDAGInstrs
FirstDerivedTyID	Type.h	/^    FirstDerivedTyID = IntegerTyID$/;"	e	enum:llvm::Type::TypeID
FirstEl	ADT/SmallVector.h	/^  U FirstEl;$/;"	m	class:llvm::SmallVectorTemplateCommon
FirstInfo	ADT/DenseMapInfo.h	/^  typedef DenseMapInfo<T> FirstInfo;$/;"	t	struct:llvm::DenseMapInfo
FirstInsn	CodeGen/LexicalScopes.h	/^  const MachineInstr *FirstInsn;      \/\/ First instruction of this scope.$/;"	m	class:llvm::LexicalScope
FirstNew	CodeGen/LiveRangeEdit.h	/^  const unsigned FirstNew;$/;"	m	class:llvm::LiveRangeEdit
FirstOperandCycle	MC/MCInstrItineraries.h	/^  unsigned FirstOperandCycle;  \/\/\/< Index of first operand rd\/wr$/;"	m	struct:llvm::InstrItinerary
FirstStage	MC/MCInstrItineraries.h	/^  unsigned FirstStage;         \/\/\/< Index of first stage in itinerary$/;"	m	struct:llvm::InstrItinerary
FirstTargetCC	CallingConv.h	/^    FirstTargetCC = 64,$/;"	e	enum:llvm::CallingConv::ID
FirstTargetFixupKind	MC/MCFixup.h	/^  FirstTargetFixupKind = 128,$/;"	e	enum:llvm::MCFixupKind
FirstTimer	Support/Timer.h	/^  Timer *FirstTimer;   \/\/ First timer in the group.$/;"	m	class:llvm::TimerGroup
FirstUnknown	Analysis/ScalarEvolution.h	/^    SCEVUnknown *FirstUnknown;$/;"	m	class:llvm::ScalarEvolution
Fixed	Bitcode/BitCodes.h	/^    Fixed = 1,  \/\/ A fixed width field, Val specifies number of bits.$/;"	e	enum:llvm::BitCodeAbbrevOp::Encoding
FixedAbbrevIDs	Bitcode/BitCodes.h	/^  enum FixedAbbrevIDs {$/;"	g	namespace:llvm::bitc
FixedNumOperandTraits	OperandTraits.h	/^struct FixedNumOperandTraits {$/;"	s	namespace:llvm
FixedStackPseudoSourceValue	CodeGen/PseudoSourceValue.h	/^    explicit FixedStackPseudoSourceValue(int fi) :$/;"	f	class:llvm::FixedStackPseudoSourceValue
FixedStackPseudoSourceValue	CodeGen/PseudoSourceValue.h	/^  class FixedStackPseudoSourceValue : public PseudoSourceValue {$/;"	c	namespace:llvm
FixedStackPseudoSourceValueVal	Value.h	/^    FixedStackPseudoSourceValueVal, \/\/ This is an instance of $/;"	e	enum:llvm::Value::ValueTy
Fixup	MC/MCELFObjectWriter.h	/^  const MCFixup *Fixup;$/;"	m	struct:llvm::ELFRelocationEntry
FixupKindFlags	MC/MCFixupKindInfo.h	/^  enum FixupKindFlags {$/;"	g	struct:llvm::MCFixupKindInfo
Fixups	MC/MCAssembler.h	/^  SmallVector<MCFixup, 1> Fixups;$/;"	m	class:llvm::MCInstFragment
Fixups	MC/MCAssembler.h	/^  std::vector<MCFixup> Fixups;$/;"	m	class:llvm::MCDataFragment
FlagAnyWrap	Analysis/ScalarEvolution.h	/^    enum NoWrapFlags { FlagAnyWrap = 0,          \/\/ No guarantee.$/;"	e	enum:llvm::SCEV::NoWrapFlags
FlagAppleBlock	DebugInfo.h	/^      FlagAppleBlock         = 1 << 3,$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagArtificial	DebugInfo.h	/^      FlagArtificial         = 1 << 6,$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagBlockByrefStruct	DebugInfo.h	/^      FlagBlockByrefStruct   = 1 << 4,$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagExplicit	DebugInfo.h	/^      FlagExplicit           = 1 << 7,$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagFwdDecl	DebugInfo.h	/^      FlagFwdDecl            = 1 << 2,$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagNSW	Analysis/ScalarEvolution.h	/^                       FlagNSW     = (1 << 2),   \/\/ No signed wrap.$/;"	e	enum:llvm::SCEV::NoWrapFlags
FlagNUW	Analysis/ScalarEvolution.h	/^                       FlagNUW     = (1 << 1),   \/\/ No unsigned wrap.$/;"	e	enum:llvm::SCEV::NoWrapFlags
FlagNW	Analysis/ScalarEvolution.h	/^                       FlagNW      = (1 << 0),   \/\/ No self-wrap.$/;"	e	enum:llvm::SCEV::NoWrapFlags
FlagObjcClassComplete	DebugInfo.h	/^      FlagObjcClassComplete  = 1 << 9,$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagObjectPointer	DebugInfo.h	/^      FlagObjectPointer      = 1 << 10$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagPrivate	DebugInfo.h	/^      FlagPrivate            = 1 << 0,$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagProtected	DebugInfo.h	/^      FlagProtected          = 1 << 1,$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagPrototyped	DebugInfo.h	/^      FlagPrototyped         = 1 << 8,$/;"	e	enum:llvm::DIDescriptor::__anon49
FlagVirtual	DebugInfo.h	/^      FlagVirtual            = 1 << 5,$/;"	e	enum:llvm::DIDescriptor::__anon49
Flag_MatchingOperand	InlineAsm.h	/^    Flag_MatchingOperand = 0x80000000$/;"	e	enum:llvm::InlineAsm::__anon57
Flags	ADT/ImmutableSet.h	/^                   Flags=0x3 };$/;"	e	enum:llvm::ImutAVLTreeGenericIterator::VisitFlag
Flags	Bitcode/Archive.h	/^    enum Flags {$/;"	g	class:llvm::ArchiveMember
Flags	CodeGen/MachineInstr.h	/^  uint8_t Flags;                        \/\/ Various bits of additional$/;"	m	class:llvm::MachineInstr
Flags	CodeGen/MachineMemOperand.h	/^  unsigned Flags;$/;"	m	class:llvm::MachineMemOperand
Flags	DebugInfo/DIContext.h	/^  const uint32_t Flags;  \/\/ Or'ed flags that set the info we want to fetch.$/;"	m	class:llvm::DILineInfoSpecifier
Flags	Linker.h	/^    unsigned Flags;    \/\/\/< Flags to control optional behavior.$/;"	m	class:llvm::Linker
Flags	MC/MCAssembler.h	/^  uint32_t Flags;$/;"	m	class:llvm::MCSymbolData
Flags	MC/MCDwarf.h	/^    unsigned Flags;$/;"	m	class:llvm::MCDwarfLoc
Flags	MC/MCFixupKindInfo.h	/^  unsigned Flags;$/;"	m	struct:llvm::MCFixupKindInfo
Flags	MC/MCInstrDesc.h	/^  uint8_t Flags;$/;"	m	class:llvm::MCOperandInfo
Flags	MC/MCInstrDesc.h	/^  unsigned        Flags;         \/\/ Flags identifying machine instr class$/;"	m	class:llvm::MCInstrDesc
Flags	MC/MCSectionELF.h	/^  unsigned Flags;$/;"	m	class:llvm::MCSectionELF
Flags	Object/MachOFormat.h	/^    uint16_t Flags;$/;"	m	struct:llvm::object::macho::Symbol64TableEntry
Flags	Object/MachOFormat.h	/^    uint16_t Flags;$/;"	m	struct:llvm::object::macho::SymbolTableEntry
Flags	Object/MachOFormat.h	/^    uint32_t Flags;$/;"	m	struct:llvm::object::macho::Header
Flags	Object/MachOFormat.h	/^    uint32_t Flags;$/;"	m	struct:llvm::object::macho::Section
Flags	Object/MachOFormat.h	/^    uint32_t Flags;$/;"	m	struct:llvm::object::macho::Section64
Flags	Object/MachOFormat.h	/^    uint32_t Flags;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
Flags	Object/MachOFormat.h	/^    uint32_t Flags;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
Flags	Object/ObjectFile.h	/^  enum Flags {$/;"	g	class:llvm::object::SymbolRef
Flags	Target/TargetCallingConv.h	/^    ArgFlagsTy Flags;$/;"	m	struct:llvm::ISD::InputArg
Flags	Target/TargetCallingConv.h	/^    ArgFlagsTy Flags;$/;"	m	struct:llvm::ISD::OutputArg
Flags	Target/TargetCallingConv.h	/^    uint64_t Flags;$/;"	m	struct:llvm::ISD::ArgFlagsTy
FlatCollection	Support/IntegersSubset.h	/^  FlatCollectionTy FlatCollection;$/;"	m	class:llvm::IntegersSubsetGeneric
FlatCollectionTy	Support/IntegersSubset.h	/^  typedef std::vector<IntTy> FlatCollectionTy;$/;"	t	class:llvm::IntegersSubsetGeneric
FlatIt	Analysis/RegionInfo.h	/^class FlatIt {};$/;"	c	namespace:llvm
Float	Intrinsics.h	/^      Void, MMX, Metadata, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
FloatABI	Target/TargetOptions.h	/^  namespace FloatABI {$/;"	n	namespace:llvm
FloatABIType	Target/TargetOptions.h	/^    FloatABI::ABIType FloatABIType;$/;"	m	class:llvm::TargetOptions
FloatToBits	Support/MathExtras.h	/^inline uint32_t FloatToBits(float Float) {$/;"	f	namespace:llvm
FloatTyID	Type.h	/^    FloatTyID,       \/\/\/<  2: 32-bit floating point type$/;"	e	enum:llvm::Type::TypeID
FloatVal	ExecutionEngine/GenericValue.h	/^    float           FloatVal;$/;"	m	union:llvm::GenericValue::__anon52
Float_Width	Intrinsics.h	/^      unsigned Float_Width;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon60
FlushToWord	Bitcode/BitstreamWriter.h	/^  void FlushToWord() {$/;"	f	class:llvm::BitstreamWriter
Fmt	Support/Format.h	/^  const char *Fmt;$/;"	m	class:llvm::format_object_base
Fn	ADT/STLExtras.h	/^  UnaryFunc Fn;$/;"	m	class:llvm::mapped_iterator
Fn	Analysis/BlockFrequencyImpl.h	/^  FunctionT *Fn;$/;"	m	class:llvm::BlockFrequencyImpl
Fn	CodeGen/FunctionLoweringInfo.h	/^  const Function *Fn;$/;"	m	class:llvm::FunctionLoweringInfo
Fn	CodeGen/MachineFunction.h	/^  const Function *Fn;$/;"	m	class:llvm::MachineFunction
FnStubs	CodeGen/MachineModuleInfoImpls.h	/^    DenseMap<MCSymbol*, StubValueTy> FnStubs;$/;"	m	class:llvm::MachineModuleInfoMachO
Fold	Support/TargetFolder.h	/^  Constant *Fold(Constant *C) const {$/;"	f	class:llvm::TargetFolder
FoldImmediate	Target/TargetInstrInfo.h	/^  virtual bool FoldImmediate(MachineInstr *UseMI, MachineInstr *DefMI,$/;"	f	class:llvm::TargetInstrInfo
FoldableAsLoad	MC/MCInstrDesc.h	/^    FoldableAsLoad,$/;"	e	enum:llvm::MCID::__anon69
Folder	IRBuilder.h	/^  T Folder;$/;"	m	class:llvm::IRBuilder
FoldingSet	ADT/FoldingSet.h	/^  explicit FoldingSet(unsigned Log2InitSize = 6)$/;"	f	class:llvm::FoldingSet
FoldingSet	ADT/FoldingSet.h	/^template<class T> class FoldingSet : public FoldingSetImpl {$/;"	c	namespace:llvm
FoldingSetBucketIterator	ADT/FoldingSet.h	/^  FoldingSetBucketIterator(void **Bucket, bool) :$/;"	f	class:llvm::FoldingSetBucketIterator
FoldingSetBucketIterator	ADT/FoldingSet.h	/^  explicit FoldingSetBucketIterator(void **Bucket) :$/;"	f	class:llvm::FoldingSetBucketIterator
FoldingSetBucketIterator	ADT/FoldingSet.h	/^class FoldingSetBucketIterator : public FoldingSetBucketIteratorImpl {$/;"	c	namespace:llvm
FoldingSetBucketIteratorImpl	ADT/FoldingSet.h	/^  FoldingSetBucketIteratorImpl(void **Bucket, bool)$/;"	f	class:llvm::FoldingSetBucketIteratorImpl
FoldingSetBucketIteratorImpl	ADT/FoldingSet.h	/^class FoldingSetBucketIteratorImpl {$/;"	c	namespace:llvm
FoldingSetImpl	ADT/FoldingSet.h	/^class FoldingSetImpl {$/;"	c	namespace:llvm
FoldingSetIterator	ADT/FoldingSet.h	/^  explicit FoldingSetIterator(void **Bucket) : FoldingSetIteratorImpl(Bucket) {}$/;"	f	class:llvm::FoldingSetIterator
FoldingSetIterator	ADT/FoldingSet.h	/^class FoldingSetIterator : public FoldingSetIteratorImpl {$/;"	c	namespace:llvm
FoldingSetIteratorImpl	ADT/FoldingSet.h	/^class FoldingSetIteratorImpl {$/;"	c	namespace:llvm
FoldingSetNode	ADT/FoldingSet.h	/^typedef FoldingSetImpl::Node FoldingSetNode;$/;"	t	namespace:llvm
FoldingSetNodeID	ADT/FoldingSet.h	/^  FoldingSetNodeID() {}$/;"	f	class:llvm::FoldingSetNodeID
FoldingSetNodeID	ADT/FoldingSet.h	/^  FoldingSetNodeID(FoldingSetNodeIDRef Ref)$/;"	f	class:llvm::FoldingSetNodeID
FoldingSetNodeID	ADT/FoldingSet.h	/^class FoldingSetNodeID {$/;"	c	namespace:llvm
FoldingSetNodeIDRef	ADT/FoldingSet.h	/^  FoldingSetNodeIDRef() : Data(0), Size(0) {}$/;"	f	class:llvm::FoldingSetNodeIDRef
FoldingSetNodeIDRef	ADT/FoldingSet.h	/^  FoldingSetNodeIDRef(const unsigned *D, size_t S) : Data(D), Size(S) {}$/;"	f	class:llvm::FoldingSetNodeIDRef
FoldingSetNodeIDRef	ADT/FoldingSet.h	/^class FoldingSetNodeIDRef {$/;"	c	namespace:llvm
FoldingSetNodeWrapper	ADT/FoldingSet.h	/^  explicit FoldingSetNodeWrapper(const A1 &a1)$/;"	f	class:llvm::FoldingSetNodeWrapper
FoldingSetNodeWrapper	ADT/FoldingSet.h	/^  explicit FoldingSetNodeWrapper(const A1 &a1, const A2 &a2)$/;"	f	class:llvm::FoldingSetNodeWrapper
FoldingSetNodeWrapper	ADT/FoldingSet.h	/^  explicit FoldingSetNodeWrapper(const A1 &a1, const A2 &a2, const A3 &a3)$/;"	f	class:llvm::FoldingSetNodeWrapper
FoldingSetNodeWrapper	ADT/FoldingSet.h	/^  explicit FoldingSetNodeWrapper(const A1 &a1, const A2 &a2, const A3 &a3,$/;"	f	class:llvm::FoldingSetNodeWrapper
FoldingSetNodeWrapper	ADT/FoldingSet.h	/^  explicit FoldingSetNodeWrapper(const T &x) : data(x) {}$/;"	f	class:llvm::FoldingSetNodeWrapper
FoldingSetNodeWrapper	ADT/FoldingSet.h	/^class FoldingSetNodeWrapper : public FoldingSetNode {$/;"	c	namespace:llvm
FoldingSetTrait	ADT/FoldingSet.h	/^template<typename T> struct FoldingSetTrait$/;"	s	namespace:llvm
FoldingSetTrait	ADT/FoldingSet.h	/^template<typename T> struct FoldingSetTrait<T*> {$/;"	s	namespace:llvm
FoldingSetTrait	Analysis/ScalarEvolution.h	/^  template<> struct FoldingSetTrait<SCEV> : DefaultFoldingSetTrait<SCEV> {$/;"	s	namespace:llvm
FoldingSetVector	ADT/FoldingSet.h	/^  explicit FoldingSetVector(unsigned Log2InitSize = 6)$/;"	f	class:llvm::FoldingSetVector
FoldingSetVector	ADT/FoldingSet.h	/^class FoldingSetVector {$/;"	c	namespace:llvm
FoldingSetVectorIterator	ADT/FoldingSet.h	/^  FoldingSetVectorIterator(VectorIteratorT I) : Iterator(I) {}$/;"	f	class:llvm::FoldingSetVectorIterator
FoldingSetVectorIterator	ADT/FoldingSet.h	/^class FoldingSetVectorIterator {$/;"	c	namespace:llvm
FollowRAUW	ADT/ValueMap.h	/^  enum { FollowRAUW = true };$/;"	e	enum:llvm::ValueMapConfig::__anon17
ForceAsmWriterLinking	CodeGen/LinkAllAsmWriterComponents.h	/^    ForceAsmWriterLinking() {$/;"	f	struct:__anon46::ForceAsmWriterLinking
ForceAsmWriterLinking	CodeGen/LinkAllAsmWriterComponents.h	/^  struct ForceAsmWriterLinking {$/;"	s	namespace:__anon46
ForceAsmWriterLinking	CodeGen/LinkAllAsmWriterComponents.h	/^  } ForceAsmWriterLinking; \/\/ Force link by creating a global definition.$/;"	m	namespace:__anon46	typeref:struct:__anon46::ForceAsmWriterLinking
ForceCodegenLinking	CodeGen/LinkAllCodegenComponents.h	/^    ForceCodegenLinking() {$/;"	f	struct:__anon45::ForceCodegenLinking
ForceCodegenLinking	CodeGen/LinkAllCodegenComponents.h	/^  struct ForceCodegenLinking {$/;"	s	namespace:__anon45
ForceCodegenLinking	CodeGen/LinkAllCodegenComponents.h	/^  } ForceCodegenLinking; \/\/ Force link by creating a global definition.$/;"	m	namespace:__anon45	typeref:struct:__anon45::ForceCodegenLinking
ForceInterpreterLinking	ExecutionEngine/Interpreter.h	/^    ForceInterpreterLinking() {$/;"	f	struct:__anon54::ForceInterpreterLinking
ForceInterpreterLinking	ExecutionEngine/Interpreter.h	/^  struct ForceInterpreterLinking {$/;"	s	namespace:__anon54
ForceInterpreterLinking	ExecutionEngine/Interpreter.h	/^  } ForceInterpreterLinking;$/;"	m	namespace:__anon54	typeref:struct:__anon54::ForceInterpreterLinking
ForceJITLinking	ExecutionEngine/JIT.h	/^    ForceJITLinking() {$/;"	f	struct:__anon55::ForceJITLinking
ForceJITLinking	ExecutionEngine/JIT.h	/^  struct ForceJITLinking {$/;"	s	namespace:__anon55
ForceJITLinking	ExecutionEngine/JIT.h	/^  } ForceJITLinking;$/;"	m	namespace:__anon55	typeref:struct:__anon55::ForceJITLinking
ForceMCJITLinking	ExecutionEngine/MCJIT.h	/^    ForceMCJITLinking() {$/;"	f	struct:__anon56::ForceMCJITLinking
ForceMCJITLinking	ExecutionEngine/MCJIT.h	/^  struct ForceMCJITLinking {$/;"	s	namespace:__anon56
ForceMCJITLinking	ExecutionEngine/MCJIT.h	/^  } ForceMCJITLinking;$/;"	m	namespace:__anon56	typeref:struct:__anon56::ForceMCJITLinking
ForcePassLinking	LinkAllPasses.h	/^    ForcePassLinking() {$/;"	f	struct:__anon61::ForcePassLinking
ForcePassLinking	LinkAllPasses.h	/^  struct ForcePassLinking {$/;"	s	namespace:__anon61
ForcePassLinking	LinkAllPasses.h	/^  } ForcePassLinking; \/\/ Force link by creating a global definition.$/;"	m	namespace:__anon61	typeref:struct:__anon61::ForcePassLinking
ForceVMCoreLinking	LinkAllVMCore.h	/^    ForceVMCoreLinking() {$/;"	f	struct:__anon62::ForceVMCoreLinking
ForceVMCoreLinking	LinkAllVMCore.h	/^  struct ForceVMCoreLinking {$/;"	s	namespace:__anon62
ForceVMCoreLinking	LinkAllVMCore.h	/^  } ForceVMCoreLinking;$/;"	m	namespace:__anon62	typeref:struct:__anon62::ForceVMCoreLinking
FormattingFlags	Support/CommandLine.h	/^enum FormattingFlags {$/;"	g	namespace:llvm::cl
Forward	Analysis/AliasSetTracker.h	/^  AliasSet *Forward;             \/\/ Forwarding pointer.$/;"	m	class:llvm::AliasSet
ForwarderChain	Support/COFF.h	/^    uint32_t ForwarderChain;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
ForwardingPaths	MC/MCSubtargetInfo.h	/^  const unsigned *ForwardingPaths;     \/\/ Forwarding paths$/;"	m	class:llvm::MCSubtargetInfo
Forwardings	MC/MCInstrItineraries.h	/^  const unsigned       *Forwardings;    \/\/\/< Array of pipeline forwarding pathes$/;"	m	class:llvm::InstrItineraryData
FourByteConstantSection	MC/MCObjectFileInfo.h	/^  const MCSection *FourByteConstantSection;$/;"	m	class:llvm::MCObjectFileInfo
Fragment	MC/MCAssembler.h	/^  MCFragment *Fragment;$/;"	m	class:llvm::MCSymbolData
FragmentListType	MC/MCAssembler.h	/^  typedef iplist<MCFragment> FragmentListType;$/;"	t	class:llvm::MCSectionData
FragmentType	MC/MCAssembler.h	/^  enum FragmentType {$/;"	g	class:llvm::MCFragment
Fragments	MC/MCAssembler.h	/^  FragmentListType Fragments;$/;"	m	class:llvm::MCSectionData
FrameAddressTaken	CodeGen/MachineFrameInfo.h	/^  bool FrameAddressTaken;$/;"	m	class:llvm::MachineFrameInfo
FrameIdx	CodeGen/MachineFrameInfo.h	/^  int FrameIdx;$/;"	m	class:llvm::CalleeSavedInfo
FrameIndex	CodeGen/ISDOpcodes.h	/^    GlobalAddress, GlobalTLSAddress, FrameIndex,$/;"	e	enum:llvm::ISD::NodeType
FrameIndexSDNode	CodeGen/SelectionDAGNodes.h	/^  FrameIndexSDNode(int fi, EVT VT, bool isTarg)$/;"	f	class:llvm::FrameIndexSDNode
FrameIndexSDNode	CodeGen/SelectionDAGNodes.h	/^class FrameIndexSDNode : public SDNode {$/;"	c	namespace:llvm
FrameInfo	CodeGen/MachineFunction.h	/^  MachineFrameInfo *FrameInfo;$/;"	m	class:llvm::MachineFunction
FrameInfos	MC/MCStreamer.h	/^    std::vector<MCDwarfFrameInfo> FrameInfos;$/;"	m	class:llvm::MCStreamer
FrameMoves	CodeGen/MachineModuleInfo.h	/^  std::vector<MachineMove> FrameMoves;$/;"	m	class:llvm::MachineModuleInfo
FrameSetup	CodeGen/MachineInstr.h	/^    FrameSetup   = 1 << 0,              \/\/ Instruction is used as a part of$/;"	e	enum:llvm::MachineInstr::MIFlag
FrameSize	CodeGen/GCMetadata.h	/^    uint64_t FrameSize;$/;"	m	class:llvm::GCFunctionInfo
Frames	DebugInfo/DIContext.h	/^  SmallVector<DILineInfo, 4> Frames;$/;"	m	class:llvm::DIInliningInfo
FreeBSD	ADT/Triple.h	/^    FreeBSD,$/;"	e	enum:llvm::Triple::OSType
FreeList	Support/Recycler.h	/^  iplist<RecyclerStruct> FreeList;$/;"	m	class:llvm::Recycler
Freescale	ADT/Triple.h	/^    Freescale,$/;"	e	enum:llvm::Triple::VendorType
Freqs	Analysis/BlockFrequencyImpl.h	/^  DenseMap<const BlockT *, BlockFrequency> Freqs;$/;"	m	class:llvm::BlockFrequencyImpl
Frequency	Support/BlockFrequency.h	/^  uint64_t Frequency;$/;"	m	class:llvm::BlockFrequency
FromReg	MC/MCRegisterInfo.h	/^    unsigned FromReg;$/;"	m	struct:llvm::MCRegisterInfo::DwarfLLVMRegPair
Frontiers	Analysis/DominanceFrontier.h	/^  DomSetMapType Frontiers;$/;"	m	class:llvm::DominanceFrontierBase
Full	CodeGen/CallingConvLower.h	/^    Full,   \/\/ The value fills the full location.$/;"	e	enum:llvm::CCValAssign::LocInfo
FullDependence	Analysis/DependenceAnalysis.h	/^  class FullDependence : public Dependence {$/;"	c	namespace:llvm
Func	Target/TargetLibraryInfo.h	/^    enum Func {$/;"	g	namespace:llvm::LibFunc
FuncInfo	CodeGen/FastISel.h	/^  FunctionLoweringInfo &FuncInfo;$/;"	m	class:llvm::FastISel
FuncInfo	CodeGen/SelectionDAGISel.h	/^  FunctionLoweringInfo *FuncInfo;$/;"	m	class:llvm::SelectionDAGISel
Function	DefaultPasses.h	/^    Function,$/;"	e	enum:llvm::StandardPass::StandardSet
Function	Function.h	/^class Function : public GlobalValue,$/;"	c	namespace:llvm
Function	MC/MCDwarf.h	/^    const MCSymbol *Function;$/;"	m	struct:llvm::MCDwarfFrameInfo
Function	MC/MCWin64EH.h	/^    const MCSymbol *Function;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
FunctionCodes	Bitcode/LLVMBitCodes.h	/^  enum FunctionCodes {$/;"	g	namespace:llvm::bitc
FunctionContextIdx	CodeGen/MachineFrameInfo.h	/^  int FunctionContextIdx;$/;"	m	class:llvm::MachineFrameInfo
FunctionCounts	Analysis/ProfileInfoLoader.h	/^  std::vector<unsigned>    FunctionCounts;$/;"	m	class:llvm::ProfileInfoLoader
FunctionDefinition	Support/COFF.h	/^    AuxiliaryFunctionDefinition FunctionDefinition;$/;"	m	union:llvm::COFF::Auxiliary
FunctionIndex	Attributes.h	/^    FunctionIndex = ~0U$/;"	e	enum:llvm::AttrListPtr::AttrIndex
FunctionInfo	Analysis/ProfileDataTypes.h	/^  FunctionInfo  = 2,   \/* Function profiling information  *\/$/;"	e	enum:ProfilingType
FunctionInformation	Analysis/ProfileInfo.h	/^    std::map<const FType*, double> FunctionInformation;$/;"	m	class:llvm::ProfileInfoT
FunctionList	Module.h	/^  FunctionListType FunctionList;  \/\/\/< The Functions in the module$/;"	m	class:llvm::Module
FunctionListType	Module.h	/^  typedef iplist<Function> FunctionListType;$/;"	t	class:llvm::Module
FunctionLocalBit	Metadata.h	/^    FunctionLocalBit = 1 << 0,$/;"	e	enum:llvm::MDNode::__anon70
FunctionLocalness	Metadata.h	/^  enum FunctionLocalness {$/;"	g	class:llvm::MDNode
FunctionLoweringInfo	CodeGen/FunctionLoweringInfo.h	/^class FunctionLoweringInfo {$/;"	c	namespace:llvm
FunctionMap	Analysis/CallGraph.h	/^  FunctionMapTy FunctionMap;    \/\/ Map from a function to its node$/;"	m	class:llvm::CallGraph
FunctionMapTy	Analysis/CallGraph.h	/^  typedef std::map<const Function *, CallGraphNode *> FunctionMapTy;$/;"	t	class:llvm::CallGraph
FunctionName	DebugInfo/DIContext.h	/^    FunctionName = 1 << 2$/;"	e	enum:llvm::DILineInfoSpecifier::Specification
FunctionName	DebugInfo/DIContext.h	/^  SmallString<16> FunctionName;$/;"	m	class:llvm::DILineInfo
FunctionNumber	CodeGen/MachineFunction.h	/^  unsigned FunctionNumber;$/;"	m	class:llvm::MachineFunction
FunctionPass	Pass.h	/^  explicit FunctionPass(char &pid) : Pass(PT_Function, pid) {}$/;"	f	class:llvm::FunctionPass
FunctionPass	Pass.h	/^class FunctionPass : public Pass {$/;"	c	namespace:llvm
FunctionPassCtor	CodeGen/MachineScheduler.h	/^  typedef ScheduleDAGCtor FunctionPassCtor;$/;"	t	class:llvm::MachineSchedRegistry
FunctionPassCtor	CodeGen/RegAllocRegistry.h	/^  typedef FunctionPass *(*FunctionPassCtor)();$/;"	t	class:llvm::RegisterRegAlloc
FunctionPassCtor	CodeGen/SchedulerRegistry.h	/^  typedef ScheduleDAGSDNodes *(*FunctionPassCtor)(SelectionDAGISel*,$/;"	t	class:llvm::RegisterScheduler
FunctionPassManager	PassManager.h	/^class FunctionPassManager : public PassManagerBase {$/;"	c	namespace:llvm
FunctionPathCountMap	Analysis/PathProfileInfo.h	/^typedef std::map<Function*,unsigned int> FunctionPathCountMap;$/;"	t	namespace:llvm
FunctionPathIterator	Analysis/PathProfileInfo.h	/^typedef std::map<Function*,ProfilePathMap>::iterator FunctionPathIterator;$/;"	t	namespace:llvm
FunctionPathMap	Analysis/PathProfileInfo.h	/^typedef std::map<Function*,ProfilePathMap> FunctionPathMap;$/;"	t	namespace:llvm
FunctionTyID	Type.h	/^    FunctionTyID,    \/\/\/< 11: Functions$/;"	e	enum:llvm::Type::TypeID
FunctionType	DerivedTypes.h	/^class FunctionType : public Type {$/;"	c	namespace:llvm
FunctionVal	Value.h	/^    FunctionVal,              \/\/ This is an instance of Function$/;"	e	enum:llvm::Value::ValueTy
Functions	CodeGen/GCStrategy.h	/^    list_type Functions;$/;"	m	class:llvm::GCStrategy
Functions	Support/GCOV.h	/^  SmallVector<GCOVFunction *, 16> Functions;$/;"	m	class:llvm::GCOVFile
G	Support/GraphWriter.h	/^  const GraphType &G;$/;"	m	class:llvm::GraphWriter
GC	CodeGen/GCMetadata.h	/^  namespace GC {$/;"	n	namespace:llvm
GCDA_402	Support/GCOV.h	/^    GCDA_402,$/;"	e	enum:llvm::GCOV::GCOVFormat
GCDA_404	Support/GCOV.h	/^    GCDA_404$/;"	e	enum:llvm::GCOV::GCOVFormat
GCFunctionInfo	CodeGen/GCMetadata.h	/^  class GCFunctionInfo {$/;"	c	namespace:llvm
GCMetadataPrinter	CodeGen/GCMetadataPrinter.h	/^  class GCMetadataPrinter {$/;"	c	namespace:llvm
GCMetadataPrinterRegistry	CodeGen/GCMetadataPrinter.h	/^  typedef Registry<GCMetadataPrinter> GCMetadataPrinterRegistry;$/;"	t	namespace:llvm
GCMetadataPrinters	CodeGen/AsmPrinter.h	/^    void *GCMetadataPrinters;  \/\/ Really a DenseMap.$/;"	m	class:llvm::AsmPrinter
GCModuleInfo	CodeGen/GCMetadata.h	/^  class GCModuleInfo : public ImmutablePass {$/;"	c	namespace:llvm
GCNO_402	Support/GCOV.h	/^    GCNO_402,$/;"	e	enum:llvm::GCOV::GCOVFormat
GCNO_404	Support/GCOV.h	/^    GCNO_404,$/;"	e	enum:llvm::GCOV::GCOVFormat
GCOV	Support/GCOV.h	/^namespace GCOV {$/;"	n	namespace:llvm
GCOVBlock	Support/GCOV.h	/^  GCOVBlock(uint32_t N) : Number(N), Counter(0) {}$/;"	f	class:llvm::GCOVBlock
GCOVBlock	Support/GCOV.h	/^class GCOVBlock {$/;"	c	namespace:llvm
GCOVBuffer	Support/GCOV.h	/^  GCOVBuffer(MemoryBuffer *B) : Buffer(B), Cursor(0) {}$/;"	f	class:llvm::GCOVBuffer
GCOVBuffer	Support/GCOV.h	/^class GCOVBuffer {$/;"	c	namespace:llvm
GCOVFile	Support/GCOV.h	/^  GCOVFile() {}$/;"	f	class:llvm::GCOVFile
GCOVFile	Support/GCOV.h	/^class GCOVFile {$/;"	c	namespace:llvm
GCOVFormat	Support/GCOV.h	/^  enum GCOVFormat {$/;"	g	namespace:llvm::GCOV
GCOVFunction	Support/GCOV.h	/^  GCOVFunction() : Ident(0), LineNumber(0) {}$/;"	f	class:llvm::GCOVFunction
GCOVFunction	Support/GCOV.h	/^class GCOVFunction {$/;"	c	namespace:llvm
GCOVLines	Support/GCOV.h	/^class GCOVLines {$/;"	c	namespace:llvm
GCPoint	CodeGen/GCMetadata.h	/^    GCPoint(GC::PointKind K, MCSymbol *L, DebugLoc DL)$/;"	f	struct:llvm::GCPoint
GCPoint	CodeGen/GCMetadata.h	/^  struct GCPoint {$/;"	s	namespace:llvm
GCRegistry	CodeGen/GCStrategy.h	/^  typedef Registry<GCStrategy> GCRegistry;$/;"	t	namespace:llvm
GCRoot	CodeGen/GCMetadata.h	/^    GCRoot(int N, const Constant *MD) : Num(N), StackOffset(-1), Metadata(MD) {}$/;"	f	struct:llvm::GCRoot
GCRoot	CodeGen/GCMetadata.h	/^  struct GCRoot {$/;"	s	namespace:llvm
GCStrategy	CodeGen/GCStrategy.h	/^  class GCStrategy {$/;"	c	namespace:llvm
GC_LABEL	Target/TargetOpcodes.h	/^    GC_LABEL = 4,$/;"	e	enum:llvm::TargetOpcode::__anon139
GE	Analysis/DependenceAnalysis.h	/^             GE = 6,$/;"	e	enum:llvm::Dependence::DVEntry::__anon25
GENERIC_VALUE_H	ExecutionEngine/GenericValue.h	16;"	d
GEPOperator	Operator.h	/^class GEPOperator$/;"	c	namespace:llvm
GET_COMM_ALIGN	Support/MachO.h	/^    static inline uint8_t GET_COMM_ALIGN (uint16_t n_desc)$/;"	f	namespace:llvm::MachO
GET_INTRINSIC_ENUM_VALUES	Intrinsics.h	40;"	d
GET_INTRINSIC_ENUM_VALUES	Intrinsics.h	42;"	d
GET_LIBRARY_ORDINAL	Support/MachO.h	/^    static inline uint16_t GET_LIBRARY_ORDINAL(uint16_t n_desc)$/;"	f	namespace:llvm::MachO
GFI	CodeGen/SelectionDAGISel.h	/^  GCFunctionInfo *GFI;$/;"	m	class:llvm::SelectionDAGISel
GHC	CallingConv.h	/^    GHC = 10,$/;"	e	enum:llvm::CallingConv::ID
GLOBAL_OFFSET_TABLE	CodeGen/ISDOpcodes.h	/^    GLOBAL_OFFSET_TABLE,$/;"	e	enum:llvm::ISD::NodeType
GMI	CodeGen/MachineFunction.h	/^  GCModuleInfo *GMI;$/;"	m	class:llvm::MachineFunction
GNU	ADT/Triple.h	/^    GNU,$/;"	e	enum:llvm::Triple::EnvironmentType
GNUEABI	ADT/Triple.h	/^    GNUEABI,$/;"	e	enum:llvm::Triple::EnvironmentType
GNUEABIHF	ADT/Triple.h	/^    GNUEABIHF,$/;"	e	enum:llvm::Triple::EnvironmentType
GOTIndex	CodeGen/MachineRelocation.h	/^    unsigned GOTIndex;      \/\/ Index in the GOT of this symbol\/global$/;"	m	union:llvm::MachineRelocation::__anon48
GPRel32Directive	MC/MCAsmInfo.h	/^    const char *GPRel32Directive;            \/\/ Defaults to NULL.$/;"	m	class:llvm::MCAsmInfo
GPRel64Directive	MC/MCAsmInfo.h	/^    const char *GPRel64Directive;            \/\/ Defaults to NULL.$/;"	m	class:llvm::MCAsmInfo
GRAY	Analysis/PathNumbering.h	/^  enum NodeColor { WHITE, GRAY, BLACK };$/;"	e	enum:llvm::BallLarusNode::NodeColor
GREEN	Support/raw_ostream.h	/^    GREEN,$/;"	e	enum:llvm::raw_ostream::Colors
GRP_COMDAT	Support/ELF.h	/^  GRP_COMDAT = 0x1,$/;"	e	enum:llvm::ELF::__anon101
GRP_MASKOS	Support/ELF.h	/^  GRP_MASKOS = 0x0ff00000,$/;"	e	enum:llvm::ELF::__anon101
GRP_MASKPROC	Support/ELF.h	/^  GRP_MASKPROC = 0xf0000000$/;"	e	enum:llvm::ELF::__anon101
GS	Support/Solaris.h	24;"	d
GT	Analysis/BlockFrequencyImpl.h	/^  typedef GraphTraits< Inverse<BlockT *> > GT;$/;"	t	class:llvm::BlockFrequencyImpl
GT	Analysis/DependenceAnalysis.h	/^             GT = 4,$/;"	e	enum:llvm::Dependence::DVEntry::__anon25
GT	MC/MCExpr.h	/^    GT,   \/\/\/< Signed greater than comparison (result is either 0 or some$/;"	e	enum:llvm::MCBinaryExpr::Opcode
GTE	MC/MCExpr.h	/^    GTE,  \/\/\/< Signed greater than or equal comparison (result is either 0 or$/;"	e	enum:llvm::MCBinaryExpr::Opcode
GTraits	Support/GraphWriter.h	/^  typedef GraphTraits<GraphType>              GTraits;$/;"	t	class:llvm::GraphWriter
GV	CodeGen/MachineOperand.h	/^        const GlobalValue *GV;    \/\/ For MO_GlobalAddress.$/;"	m	union:llvm::MachineOperand::__anon36::__anon38::__anon39
GV	CodeGen/MachineRelocation.h	/^    GlobalValue *GV;        \/\/ If this is a pointer to a GV or an indirect ref.$/;"	m	union:llvm::MachineRelocation::__anon48
GVCompilationDisabled	ExecutionEngine/ExecutionEngine.h	/^  bool GVCompilationDisabled;$/;"	m	class:llvm::ExecutionEngine
GVMATERIALIZER_H	GVMaterializer.h	19;"	d
GVMaterializer	GVMaterializer.h	/^  GVMaterializer() {}$/;"	f	class:llvm::GVMaterializer
GVMaterializer	GVMaterializer.h	/^class GVMaterializer {$/;"	c	namespace:llvm
GVStubs	CodeGen/MachineModuleInfoImpls.h	/^    DenseMap<MCSymbol*, StubValueTy> GVStubs;$/;"	m	class:llvm::MachineModuleInfoELF
GVStubs	CodeGen/MachineModuleInfoImpls.h	/^    DenseMap<MCSymbol*, StubValueTy> GVStubs;$/;"	m	class:llvm::MachineModuleInfoMachO
GVTOP	ExecutionEngine/GenericValue.h	/^inline void* GVTOP(const GenericValue &GV) { return GV.PointerVal; }$/;"	f	namespace:llvm
GVs	DebugInfo.h	/^    SmallVector<MDNode *, 8> GVs;  \/\/ Global Variables;$/;"	m	class:llvm::DebugInfoFinder
GenDwarfFileNumber	MC/MCContext.h	/^    unsigned GenDwarfFileNumber;$/;"	m	class:llvm::MCContext
GenDwarfForAssembly	MC/MCContext.h	/^    bool GenDwarfForAssembly;$/;"	m	class:llvm::MCContext
GenDwarfSection	MC/MCContext.h	/^    const MCSection *GenDwarfSection;$/;"	m	class:llvm::MCContext
GenDwarfSectionEndSym	MC/MCContext.h	/^    MCSymbol *GenDwarfSectionStartSym, *GenDwarfSectionEndSym;$/;"	m	class:llvm::MCContext
GenDwarfSectionStartSym	MC/MCContext.h	/^    MCSymbol *GenDwarfSectionStartSym, *GenDwarfSectionEndSym;$/;"	m	class:llvm::MCContext
GeneralDynamic	Support/CodeGen.h	/^      GeneralDynamic,$/;"	e	enum:llvm::TLSModel::Model
GeneralDynamicTLSModel	GlobalVariable.h	/^    GeneralDynamicTLSModel,$/;"	e	enum:llvm::GlobalVariable::ThreadLocalMode
GenericOptionInfo	Support/CommandLine.h	/^    GenericOptionInfo(const char *name, const char *helpStr) :$/;"	f	class:llvm::cl::generic_parser_base::GenericOptionInfo
GenericOptionInfo	Support/CommandLine.h	/^  class GenericOptionInfo {$/;"	c	class:llvm::cl::generic_parser_base
GenericOptionValue	Support/CommandLine.h	/^struct GenericOptionValue {$/;"	s	namespace:llvm::cl
GenericValue	ExecutionEngine/GenericValue.h	/^  GenericValue() : DoubleVal(0.0), IntVal(1,0) {}$/;"	f	struct:llvm::GenericValue
GenericValue	ExecutionEngine/GenericValue.h	/^  explicit GenericValue(void *V) : PointerVal(V), IntVal(1,0) { }$/;"	f	struct:llvm::GenericValue
GenericValue	ExecutionEngine/GenericValue.h	/^struct GenericValue {$/;"	s	namespace:llvm
GetAbbrevIDWidth	Bitcode/BitstreamReader.h	/^  unsigned GetAbbrevIDWidth() const { return CurCodeSize; }$/;"	f	class:llvm::BitstreamCursor
GetAddrModeArguments	Target/TargetLowering.h	/^  virtual bool GetAddrModeArguments(IntrinsicInst *I,$/;"	f	class:llvm::TargetLowering
GetAsValue	Support/ValueHandle.h	/^  static Value *GetAsValue(Value *V) { return V; }$/;"	f	class:llvm::AssertingVH
GetAsValue	Support/ValueHandle.h	/^  static Value *GetAsValue(Value *V) { return V; }$/;"	f	class:llvm::TrackingVH
GetAsValue	Support/ValueHandle.h	/^  static Value *GetAsValue(const Value *V) { return const_cast<Value*>(V); }$/;"	f	class:llvm::AssertingVH
GetAsValue	Support/ValueHandle.h	/^  static Value *GetAsValue(const Value *V) { return const_cast<Value*>(V); }$/;"	f	class:llvm::TrackingVH
GetBufferOffset	Bitcode/BitstreamWriter.h	/^  unsigned GetBufferOffset() const {$/;"	f	class:llvm::BitstreamWriter
GetBufferSize	Support/raw_ostream.h	/^  size_t GetBufferSize() const {$/;"	f	class:llvm::raw_ostream
GetConstant	Analysis/SparsePropagation.h	/^  virtual Constant *GetConstant(LatticeVal LV, Value *Val, SparseSolver &SS) {$/;"	f	class:llvm::AbstractLatticeFunction
GetCurrentBitNo	Bitcode/BitstreamReader.h	/^  uint64_t GetCurrentBitNo() const {$/;"	f	class:llvm::BitstreamCursor
GetCurrentBitNo	Bitcode/BitstreamWriter.h	/^  uint64_t GetCurrentBitNo() const { return GetBufferOffset() * 8 + CurBit; }$/;"	f	class:llvm::BitstreamWriter
GetDbgValues	CodeGen/SelectionDAG.h	/^  ArrayRef<SDDbgValue*> GetDbgValues(const SDNode* SD) {$/;"	f	class:llvm::SelectionDAG
GetDefaultCodeSlabSize	ExecutionEngine/JITMemoryManager.h	/^  virtual size_t GetDefaultCodeSlabSize() {$/;"	f	class:llvm::JITMemoryManager
GetDefaultDataSlabSize	ExecutionEngine/JITMemoryManager.h	/^  virtual size_t GetDefaultDataSlabSize() {$/;"	f	class:llvm::JITMemoryManager
GetDefaultStubSlabSize	ExecutionEngine/JITMemoryManager.h	/^  virtual size_t GetDefaultStubSlabSize() {$/;"	f	class:llvm::JITMemoryManager
GetELFSymbolVersion	Object/ELF.h	/^static inline error_code GetELFSymbolVersion(const ObjectFile *Obj,$/;"	f	namespace:llvm::object
GetElementPtrInst	Instructions.h	/^GetElementPtrInst::GetElementPtrInst(Value *Ptr,$/;"	f	class:llvm::GetElementPtrInst
GetElementPtrInst	Instructions.h	/^class GetElementPtrInst : public Instruction {$/;"	c	namespace:llvm
GetFnStubList	CodeGen/MachineModuleInfoImpls.h	/^    SymbolListTy GetFnStubList() const {$/;"	f	class:llvm::MachineModuleInfoMachO
GetGVStubList	CodeGen/MachineModuleInfoImpls.h	/^    SymbolListTy GetGVStubList() const {$/;"	f	class:llvm::MachineModuleInfoELF
GetGVStubList	CodeGen/MachineModuleInfoImpls.h	/^    SymbolListTy GetGVStubList() const {$/;"	f	class:llvm::MachineModuleInfoMachO
GetHiddenGVStubList	CodeGen/MachineModuleInfoImpls.h	/^    SymbolListTy GetHiddenGVStubList() const {$/;"	f	class:llvm::MachineModuleInfoMachO
GetInsertBlock	IRBuilder.h	/^  BasicBlock *GetInsertBlock() const { return BB; }$/;"	f	class:llvm::IRBuilderBase
GetInsertPoint	IRBuilder.h	/^  BasicBlock::iterator GetInsertPoint() const { return InsertPt; }$/;"	f	class:llvm::IRBuilderBase
GetLiveOutRegInfo	CodeGen/FunctionLoweringInfo.h	/^  const LiveOutInfo *GetLiveOutRegInfo(unsigned Reg) {$/;"	f	class:llvm::FunctionLoweringInfo
GetNextSCC	ADT/SCCIterator.h	/^  void GetNextSCC() {$/;"	f	class:llvm::scc_iterator
GetNodeProfile	ADT/FoldingSet.h	/^  virtual void GetNodeProfile(FoldingSetImpl::Node *N,$/;"	f	class:llvm::ContextualFoldingSet
GetNodeProfile	ADT/FoldingSet.h	/^  virtual void GetNodeProfile(Node *N, FoldingSetNodeID &ID) const {$/;"	f	class:llvm::FoldingSet
GetNumBytesInBuffer	Support/raw_ostream.h	/^  size_t GetNumBytesInBuffer() const {$/;"	f	class:llvm::raw_ostream
GetNumCodeSlabs	ExecutionEngine/JITMemoryManager.h	/^  virtual unsigned GetNumCodeSlabs() {$/;"	f	class:llvm::JITMemoryManager
GetNumDataSlabs	ExecutionEngine/JITMemoryManager.h	/^  virtual unsigned GetNumDataSlabs() {$/;"	f	class:llvm::JITMemoryManager
GetNumPreds	Support/PredIteratorCache.h	/^    unsigned GetNumPreds(BasicBlock *BB) {$/;"	f	class:llvm::PredIteratorCache
GetNumStubSlabs	ExecutionEngine/JITMemoryManager.h	/^  virtual unsigned GetNumStubSlabs() {$/;"	f	class:llvm::JITMemoryManager
GetOpInfo	MC/MCDisassembler.h	/^  LLVMOpInfoCallback GetOpInfo;$/;"	m	class:llvm::MCDisassembler
GetOrCreateValue	ADT/StringMap.h	/^  MapEntryTy &GetOrCreateValue(StringRef Key) {$/;"	f	class:llvm::StringMap
GetOrCreateValue	ADT/StringMap.h	/^  MapEntryTy &GetOrCreateValue(StringRef Key, InitTy Val) {$/;"	f	class:llvm::StringMap
GetOrInsertNode	ADT/FoldingSet.h	/^  T *GetOrInsertNode(Node *N) {$/;"	f	class:llvm::ContextualFoldingSet
GetOrInsertNode	ADT/FoldingSet.h	/^  T *GetOrInsertNode(Node *N) {$/;"	f	class:llvm::FoldingSet
GetOrInsertNode	ADT/FoldingSet.h	/^  T *GetOrInsertNode(T *N) {$/;"	f	class:llvm::FoldingSetVector
GetPathMode	Analysis/ProfileInfo.h	/^    enum GetPathMode {$/;"	g	class:llvm::ProfileInfoT
GetPathToDest	Analysis/ProfileInfo.h	/^      GetPathToDest = 4,$/;"	e	enum:llvm::ProfileInfoT::GetPathMode
GetPathToExit	Analysis/ProfileInfo.h	/^      GetPathToExit = 1,$/;"	e	enum:llvm::ProfileInfoT::GetPathMode
GetPathToValue	Analysis/ProfileInfo.h	/^      GetPathToValue = 2,$/;"	e	enum:llvm::ProfileInfoT::GetPathMode
GetPathWithNewEdges	Analysis/ProfileInfo.h	/^      GetPathWithNewEdges = 8$/;"	e	enum:llvm::ProfileInfoT::GetPathMode
GetPointerBaseWithConstantOffset	Analysis/ValueTracking.h	/^  GetPointerBaseWithConstantOffset(const Value *Ptr, int64_t &Offset,$/;"	f	namespace:llvm
GetPreds	Support/PredIteratorCache.h	/^    BasicBlock **GetPreds(BasicBlock *BB) {$/;"	f	class:llvm::PredIteratorCache
GetStringMapEntryFromKeyData	ADT/StringMap.h	/^  static StringMapEntry &GetStringMapEntryFromKeyData(const char *KeyData) {$/;"	f	class:llvm::StringMapEntry
GetStringMapEntryFromValue	ADT/StringMap.h	/^  static StringMapEntry &GetStringMapEntryFromValue(ValueTy &V) {$/;"	f	class:llvm::StringMapEntry
GetStringMapEntryFromValue	ADT/StringMap.h	/^  static const StringMapEntry &GetStringMapEntryFromValue(const ValueTy &V) {$/;"	f	class:llvm::StringMapEntry
GetUnderlyingObject	Analysis/ValueTracking.h	/^  GetUnderlyingObject(const Value *V, const DataLayout *TD = 0,$/;"	f	namespace:llvm
GetValue	Transforms/Utils/SSAUpdaterImpl.h	/^  ValT GetValue(BlkT *BB) {$/;"	f	class:llvm::SSAUpdaterImpl
GetWordIndex	Bitcode/BitstreamWriter.h	/^  unsigned GetWordIndex() const {$/;"	f	class:llvm::BitstreamWriter
GlobalAddress	CodeGen/ISDOpcodes.h	/^    GlobalAddress, GlobalTLSAddress, FrameIndex,$/;"	e	enum:llvm::ISD::NodeType
GlobalAddressMap	ExecutionEngine/ExecutionEngine.h	/^  GlobalAddressMapTy GlobalAddressMap;$/;"	m	class:llvm::ExecutionEngineState
GlobalAddressMapTy	ExecutionEngine/ExecutionEngine.h	/^      GlobalAddressMapTy;$/;"	t	class:llvm::ExecutionEngineState
GlobalAddressReverseMap	ExecutionEngine/ExecutionEngine.h	/^  std::map<void *, AssertingVH<const GlobalValue> > GlobalAddressReverseMap;$/;"	m	class:llvm::ExecutionEngineState
GlobalAddressSDNode	CodeGen/SelectionDAGNodes.h	/^class GlobalAddressSDNode : public SDNode {$/;"	c	namespace:llvm
GlobalAlias	GlobalAlias.h	/^class GlobalAlias : public GlobalValue, public ilist_node<GlobalAlias> {$/;"	c	namespace:llvm
GlobalAliasVal	Value.h	/^    GlobalAliasVal,           \/\/ This is an instance of GlobalAlias$/;"	e	enum:llvm::Value::ValueTy
GlobalDirective	MC/MCAsmInfo.h	/^    const char *GlobalDirective;             \/\/ Defaults to NULL.$/;"	m	class:llvm::MCAsmInfo
GlobalList	Module.h	/^  GlobalListType GlobalList;      \/\/\/< The Global Variables in the module$/;"	m	class:llvm::Module
GlobalListType	Module.h	/^  typedef iplist<GlobalVariable> GlobalListType;$/;"	t	class:llvm::Module
GlobalPrefix	MC/MCAsmInfo.h	/^    const char *GlobalPrefix;                \/\/ Defaults to ""$/;"	m	class:llvm::MCAsmInfo
GlobalRelocations	Constant.h	/^    GlobalRelocations = 2$/;"	e	enum:llvm::Constant::PossibleRelocationsTy
GlobalScopeAsm	Module.h	/^  std::string GlobalScopeAsm;     \/\/\/< Inline Asm at global scope.$/;"	m	class:llvm::Module
GlobalTLSAddress	CodeGen/ISDOpcodes.h	/^    GlobalAddress, GlobalTLSAddress, FrameIndex,$/;"	e	enum:llvm::ISD::NodeType
GlobalValue	GlobalValue.h	/^  GlobalValue(Type *ty, ValueTy vty, Use *Ops, unsigned NumOps,$/;"	f	class:llvm::GlobalValue
GlobalValue	GlobalValue.h	/^class GlobalValue : public Constant {$/;"	c	namespace:llvm
GlobalVariable	GlobalVariable.h	/^class GlobalVariable : public GlobalValue, public ilist_node<GlobalVariable> {$/;"	c	namespace:llvm
GlobalVariableVal	Value.h	/^    GlobalVariableVal,        \/\/ This is an instance of GlobalVariable$/;"	e	enum:llvm::Value::ValueTy
Glue	CodeGen/ValueTypes.h	/^      Glue           =  44,   \/\/ This glues nodes together during pre-RA sched$/;"	e	enum:llvm::MVT::SimpleValueType
Graph	ADT/GraphTraits.h	/^  const GraphType &Graph;$/;"	m	struct:llvm::Inverse
Graph	CodeGen/PBQP/Graph.h	/^    Graph() : numNodes(0), numEdges(0) {}$/;"	f	class:PBQP::Graph
Graph	CodeGen/PBQP/Graph.h	/^    Graph(const Graph &other) : numNodes(0), numEdges(0) {$/;"	f	class:PBQP::Graph
Graph	CodeGen/PBQP/Graph.h	/^  class Graph {$/;"	c	namespace:PBQP
GraphProgram	Support/GraphWriter.h	/^namespace GraphProgram {$/;"	n	namespace:llvm
GraphTraits	ADT/GraphTraits.h	/^struct GraphTraits {$/;"	s	namespace:llvm
GraphTraits	ADT/GraphTraits.h	/^struct GraphTraits<Inverse<Inverse<T> > > {$/;"	s	namespace:llvm
GraphTraits	Analysis/CallGraph.h	/^template <> struct GraphTraits<CallGraphNode*> {$/;"	s	namespace:llvm
GraphTraits	Analysis/CallGraph.h	/^template <> struct GraphTraits<const CallGraphNode*> {$/;"	s	namespace:llvm
GraphTraits	Analysis/CallGraph.h	/^template<> struct GraphTraits<CallGraph*> : public GraphTraits<CallGraphNode*> {$/;"	s	namespace:llvm
GraphTraits	Analysis/CallGraph.h	/^template<> struct GraphTraits<const CallGraph*> :$/;"	s	namespace:llvm
GraphTraits	Analysis/Dominators.h	/^template <> struct GraphTraits<DomTreeNode*> {$/;"	s	namespace:llvm
GraphTraits	Analysis/Dominators.h	/^template <> struct GraphTraits<DominatorTree*>$/;"	s	namespace:llvm
GraphTraits	Analysis/Interval.h	/^template <> struct GraphTraits<Interval*> {$/;"	s	namespace:llvm
GraphTraits	Analysis/Interval.h	/^template <> struct GraphTraits<Inverse<Interval*> > {$/;"	s	namespace:llvm
GraphTraits	Analysis/LoopInfo.h	/^template <> struct GraphTraits<Loop*> {$/;"	s	namespace:llvm
GraphTraits	Analysis/LoopInfo.h	/^template <> struct GraphTraits<const Loop*> {$/;"	s	namespace:llvm
GraphTraits	Analysis/PostDominators.h	/^template <> struct GraphTraits<PostDominatorTree*>$/;"	s	namespace:llvm
GraphTraits	Analysis/RegionIterator.h	/^template <> struct GraphTraits<RegionInfo*>$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineBasicBlock.h	/^template <> struct GraphTraits<Inverse<MachineBasicBlock*> > {$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineBasicBlock.h	/^template <> struct GraphTraits<Inverse<const MachineBasicBlock*> > {$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineBasicBlock.h	/^template <> struct GraphTraits<MachineBasicBlock *> {$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineBasicBlock.h	/^template <> struct GraphTraits<const MachineBasicBlock *> {$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineDominators.h	/^template <> struct GraphTraits<MachineDomTreeNode *> {$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineDominators.h	/^template <> struct GraphTraits<MachineDominatorTree*>$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineFunction.h	/^template <> struct GraphTraits<Inverse<MachineFunction*> > :$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineFunction.h	/^template <> struct GraphTraits<Inverse<const MachineFunction*> > :$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineFunction.h	/^template <> struct GraphTraits<MachineFunction*> :$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineFunction.h	/^template <> struct GraphTraits<const MachineFunction*> :$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineLoopInfo.h	/^template <> struct GraphTraits<MachineLoop*> {$/;"	s	namespace:llvm
GraphTraits	CodeGen/MachineLoopInfo.h	/^template <> struct GraphTraits<const MachineLoop*> {$/;"	s	namespace:llvm
GraphTraits	CodeGen/ScheduleDAG.h	/^  template <> struct GraphTraits<SUnit*> {$/;"	s	namespace:llvm
GraphTraits	CodeGen/ScheduleDAG.h	/^  template <> struct GraphTraits<ScheduleDAG*> : public GraphTraits<SUnit*> {$/;"	s	namespace:llvm
GraphTraits	CodeGen/SelectionDAG.h	/^template <> struct GraphTraits<SelectionDAG*> : public GraphTraits<SDNode*> {$/;"	s	namespace:llvm
GraphTraits	CodeGen/SelectionDAGNodes.h	/^template <> struct GraphTraits<SDNode*> {$/;"	s	namespace:llvm
GraphTraits	Support/CFG.h	/^template <> struct GraphTraits<BasicBlock*> {$/;"	s	namespace:llvm
GraphTraits	Support/CFG.h	/^template <> struct GraphTraits<Function*> : public GraphTraits<BasicBlock*> {$/;"	s	namespace:llvm
GraphTraits	Support/CFG.h	/^template <> struct GraphTraits<Inverse<BasicBlock*> > {$/;"	s	namespace:llvm
GraphTraits	Support/CFG.h	/^template <> struct GraphTraits<Inverse<Function*> > :$/;"	s	namespace:llvm
GraphTraits	Support/CFG.h	/^template <> struct GraphTraits<Inverse<const BasicBlock*> > {$/;"	s	namespace:llvm
GraphTraits	Support/CFG.h	/^template <> struct GraphTraits<Inverse<const Function*> > :$/;"	s	namespace:llvm
GraphTraits	Support/CFG.h	/^template <> struct GraphTraits<const BasicBlock*> {$/;"	s	namespace:llvm
GraphTraits	Support/CFG.h	/^template <> struct GraphTraits<const Function*> :$/;"	s	namespace:llvm
GraphTraits	Support/DataFlow.h	/^template <> struct GraphTraits<Inverse<User*> > {$/;"	s	namespace:llvm
GraphTraits	Support/DataFlow.h	/^template <> struct GraphTraits<Inverse<const User*> > {$/;"	s	namespace:llvm
GraphTraits	Support/DataFlow.h	/^template <> struct GraphTraits<Value*> {$/;"	s	namespace:llvm
GraphTraits	Support/DataFlow.h	/^template <> struct GraphTraits<const Value*> {$/;"	s	namespace:llvm
GraphTraits	Type.h	/^template <> struct GraphTraits<Type*> {$/;"	s	namespace:llvm
GraphTraits	Type.h	/^template <> struct GraphTraits<const Type*> {$/;"	s	namespace:llvm
GraphWriter	Support/GraphWriter.h	/^  GraphWriter(raw_ostream &o, const GraphType &g, bool SN) : O(o), G(g) {$/;"	f	class:llvm::GraphWriter
GraphWriter	Support/GraphWriter.h	/^class GraphWriter {$/;"	c	namespace:llvm
Greater	MC/MCParser/MCAsmLexer.h	/^    Greater, GreaterEqual, GreaterGreater, At$/;"	e	enum:llvm::AsmToken::TokenKind
GreaterEqual	MC/MCParser/MCAsmLexer.h	/^    Greater, GreaterEqual, GreaterGreater, At$/;"	e	enum:llvm::AsmToken::TokenKind
GreaterGreater	MC/MCParser/MCAsmLexer.h	/^    Greater, GreaterEqual, GreaterGreater, At$/;"	e	enum:llvm::AsmToken::TokenKind
GreatestCommonDivisor64	Support/MathExtras.h	/^inline uint64_t GreatestCommonDivisor64(uint64_t A, uint64_t B) {$/;"	f	namespace:llvm
Group	Analysis/DependenceAnalysis.h	/^      SmallBitVector Group;$/;"	m	struct:llvm::DependenceAnalysis::Subscript
Group	MC/MCSectionELF.h	/^  const MCSymbol *Group;$/;"	m	class:llvm::MCSectionELF
GroupLoops	Analysis/DependenceAnalysis.h	/^      SmallBitVector GroupLoops;$/;"	m	struct:llvm::DependenceAnalysis::Subscript
Grouping	Support/CommandLine.h	/^  Grouping         = 0x03      \/\/ Can this option group with other options?$/;"	e	enum:llvm::cl::FormattingFlags
HANDLENODE	CodeGen/ISDOpcodes.h	/^    HANDLENODE,$/;"	e	enum:llvm::ISD::NodeType
HANDLE_BINARY_INST	InstrTypes.h	175;"	d
HANDLE_BINARY_INST	InstrTypes.h	181;"	d
HANDLE_BINARY_INST	InstrTypes.h	187;"	d
HANDLE_BINARY_INST	Instruction.h	329;"	d
HANDLE_CAST_INST	Instruction.h	343;"	d
HANDLE_INST	Support/InstVisitor.h	122;"	d
HANDLE_INST	Support/InstVisitor.h	154;"	d
HANDLE_INST	Support/InstVisitor.h	27;"	d
HANDLE_MEMORY_INST	Instruction.h	336;"	d
HANDLE_OTHER_INST	Instruction.h	350;"	d
HANDLE_TERM_INST	Instruction.h	322;"	d
HAVE_FENV_H	Support/FEnv.h	27;"	d
HEAD	TableGen/Record.h	/^  enum UnaryOp { CAST, HEAD, TAIL, EMPTY };$/;"	e	enum:llvm::UnOpInit::UnaryOp
HFT_Object	Object/MachOFormat.h	/^    HFT_Object = 0x1$/;"	e	enum:llvm::object::macho::HeaderFileType
HF_SubsectionsViaSymbols	Object/MachOFormat.h	/^    HF_SubsectionsViaSymbols = 0x2000$/;"	e	enum:llvm::object::macho::HeaderFlags
HM_Object32	Object/MachOFormat.h	/^    HM_Object32 = 0xFEEDFACE,  \/\/\/< 32-bit mach object file$/;"	e	enum:llvm::object::macho::HeaderMagic
HM_Object64	Object/MachOFormat.h	/^    HM_Object64 = 0xFEEDFACF,  \/\/\/< 64-bit mach object file$/;"	e	enum:llvm::object::macho::HeaderMagic
HM_Universal	Object/MachOFormat.h	/^    HM_Universal = 0xCAFEBABE  \/\/\/< Universal object file$/;"	e	enum:llvm::object::macho::HeaderMagic
HT	ADT/ScopedHashTable.h	/^  ScopedHashTable<K, V, KInfo, AllocatorTy> &HT;$/;"	m	class:llvm::ScopedHashTableScope
Haiku	ADT/Triple.h	/^    Haiku,$/;"	e	enum:llvm::Triple::OSType
HalfTyID	Type.h	/^    HalfTyID,        \/\/\/<  1: 16-bit floating point type$/;"	e	enum:llvm::Type::TypeID
HandleBaseKind	Support/ValueHandle.h	/^  enum HandleBaseKind {$/;"	g	class:llvm::ValueHandleBase
HandleByVal	Target/TargetLowering.h	/^  virtual void HandleByVal(CCState *, unsigned &, unsigned) const {}$/;"	f	class:llvm::TargetLowering
HandleDirective	MC/MCParser/MCAsmParserExtension.h	/^  static bool HandleDirective(MCAsmParserExtension *Target,$/;"	f	class:llvm::MCAsmParserExtension
HandleSDNode	CodeGen/SelectionDAGNodes.h	/^  explicit __attribute__((__noinline__)) HandleSDNode(SDValue X)$/;"	f	class:llvm::HandleSDNode
HandleSDNode	CodeGen/SelectionDAGNodes.h	/^class HandleSDNode : public SDNode {$/;"	c	namespace:llvm
HandlesExceptions	MC/MCWin64EH.h	/^    bool HandlesExceptions;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
HandlesUnwind	MC/MCWin64EH.h	/^    bool HandlesUnwind;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
Hard	Target/TargetOptions.h	/^      Hard  \/\/ Hard float.$/;"	e	enum:llvm::FloatABI::ABIType
HasAggressiveSymbolFolding	MC/MCAsmInfo.h	/^    bool HasAggressiveSymbolFolding;           \/\/ Defaults to true.$/;"	m	class:llvm::MCAsmInfo
HasBaseReg	AddressingMode.h	/^  bool         HasBaseReg;$/;"	m	struct:llvm::AddrMode
HasBracketExpressions	MC/MCParser/MCAsmParserExtension.h	/^  bool HasBracketExpressions() const { return BracketExpressionsSupported; }$/;"	f	class:llvm::MCAsmParserExtension
HasCalls	CodeGen/MachineFrameInfo.h	/^  bool HasCalls;$/;"	m	class:llvm::MachineFrameInfo
HasDotTypeDotSizeDirective	MC/MCAsmInfo.h	/^    bool HasDotTypeDotSizeDirective;         \/\/ Defaults to true.$/;"	m	class:llvm::MCAsmInfo
HasGOT	ExecutionEngine/JITMemoryManager.h	/^  bool HasGOT;$/;"	m	class:llvm::JITMemoryManager
HasJIT	Support/TargetRegistry.h	/^    bool HasJIT;$/;"	m	class:llvm::Target
HasLEB128	MC/MCAsmInfo.h	/^    bool HasLEB128;                          \/\/ Defaults to false.$/;"	m	class:llvm::MCAsmInfo
HasLongFilenameFlag	Bitcode/Archive.h	/^      HasLongFilenameFlag = 32,    \/\/\/< Member uses the long filename syntax$/;"	e	enum:llvm::ArchiveMember::Flags
HasMachoTBSSDirective	MC/MCAsmInfo.h	/^    bool HasMachoTBSSDirective;                 \/\/ Default is false.$/;"	m	class:llvm::MCAsmInfo
HasMachoZeroFillDirective	MC/MCAsmInfo.h	/^    bool HasMachoZeroFillDirective;               \/\/ Default is false.$/;"	m	class:llvm::MCAsmInfo
HasMetadataBit	Instruction.h	/^    HasMetadataBit = 1 << 15$/;"	e	enum:llvm::Instruction::__anon58
HasMicrosoftFastStdCallMangling	MC/MCAsmInfo.h	/^    bool HasMicrosoftFastStdCallMangling;    \/\/ Defaults to false.$/;"	m	class:llvm::MCAsmInfo
HasNoDeadStrip	MC/MCAsmInfo.h	/^    bool HasNoDeadStrip;                     \/\/ Defaults to false.$/;"	m	class:llvm::MCAsmInfo
HasNoPushRequest	Support/FileSystem.h	/^    bool HasNoPushRequest;$/;"	m	struct:llvm::sys::fs::detail::RecDirIterState
HasOptionalDef	MC/MCInstrDesc.h	/^    HasOptionalDef,$/;"	e	enum:llvm::MCID::__anon69
HasPathFlag	Bitcode/Archive.h	/^      HasPathFlag = 16,            \/\/\/< Member has a full or partial path$/;"	e	enum:llvm::ArchiveMember::Flags
HasPostISelHook	MC/MCInstrDesc.h	/^    HasPostISelHook,$/;"	e	enum:llvm::MCID::__anon69
HasReadyFilter	CodeGen/ScheduleDAG.h	/^    bool HasReadyFilter;$/;"	m	class:llvm::SchedulingPriorityQueue
HasSetDirective	MC/MCAsmInfo.h	/^    bool HasSetDirective;                    \/\/ Defaults to true.$/;"	m	class:llvm::MCAsmInfo
HasSideEffects	InlineAsm.h	/^  bool HasSideEffects;$/;"	m	class:llvm::InlineAsm
HasSingleParameterDotFile	MC/MCAsmInfo.h	/^    bool HasSingleParameterDotFile;          \/\/ Defaults to true.$/;"	m	class:llvm::MCAsmInfo
HasStaticCtorDtorReferenceInStaticMode	MC/MCAsmInfo.h	/^    bool HasStaticCtorDtorReferenceInStaticMode;  \/\/ Default is false.$/;"	m	class:llvm::MCAsmInfo
HasStringTable	Object/MachOObject.h	/^  bool HasStringTable;$/;"	m	class:llvm::object::MachOObject
HasSubsectionsViaSymbols	MC/MCAsmInfo.h	/^    bool HasSubsectionsViaSymbols;           \/\/ Default is false.$/;"	m	class:llvm::MCAsmInfo
HasSymbolResolver	MC/MCAsmInfo.h	/^    bool HasSymbolResolver;                     \/\/ Defaults to false.$/;"	m	class:llvm::MCAsmInfo
HasVarSizedObjects	CodeGen/MachineFrameInfo.h	/^  bool HasVarSizedObjects;$/;"	m	class:llvm::MachineFrameInfo
Hash	MC/MCParser/MCAsmLexer.h	/^    Amp, AmpAmp, Exclaim, ExclaimEqual, Percent, Hash,$/;"	e	enum:llvm::AsmToken::TokenKind
Hash	Metadata.h	/^  unsigned Hash;$/;"	m	class:llvm::MDNode
HashString	ADT/StringExtras.h	/^static inline unsigned HashString(StringRef Str, unsigned Result = 0) {$/;"	f	namespace:llvm
HaveExceptions	DefaultPasses.h	/^    HaveExceptions = 1<<4,$/;"	e	enum:llvm::StandardPass::OptimizationFlags
Hazard	CodeGen/ScheduleHazardRecognizer.h	/^    Hazard,        \/\/ This instruction can't be emitted at this cycle.$/;"	e	enum:llvm::ScheduleHazardRecognizer::HazardType
HazardType	CodeGen/ScheduleHazardRecognizer.h	/^  enum HazardType {$/;"	g	class:llvm::ScheduleHazardRecognizer
Head	ADT/ImmutableList.h	/^  T Head;$/;"	m	class:llvm::ImmutableListImpl
Head	ADT/ilist.h	/^  mutable NodeTy *Head;$/;"	m	class:llvm::iplist
Head	CodeGen/ScoreboardHazardRecognizer.h	/^    size_t Head;$/;"	m	class:llvm::ScoreboardHazardRecognizer::Scoreboard
Head	Support/Registry.h	/^    static node *Head, *Tail;$/;"	m	class:llvm::Registry
Head	Support/Registry.h	/^  typename Registry<T,U>::node *Registry<T,U>::Head;$/;"	m	class:llvm::Registry
Header	Object/COFF.h	/^  const coff_file_header *Header;$/;"	m	class:llvm::object::COFFObjectFile
Header	Object/ELF.h	/^  const Elf_Ehdr *Header;$/;"	m	class:llvm::object::ELFObjectFile
Header	Object/MachOFormat.h	/^  struct Header {$/;"	s	namespace:llvm::object::macho
Header	Object/MachOObject.h	/^  macho::Header Header;$/;"	m	class:llvm::object::MachOObject
Header32Size	Object/MachOFormat.h	/^    Header32Size = 28,$/;"	e	enum:llvm::object::macho::StructureSizes
Header64Ext	Object/MachOFormat.h	/^  struct Header64Ext {$/;"	s	namespace:llvm::object::macho
Header64Ext	Object/MachOObject.h	/^  macho::Header64Ext Header64Ext;$/;"	m	class:llvm::object::MachOObject
Header64Size	Object/MachOFormat.h	/^    Header64Size = 32,$/;"	e	enum:llvm::object::macho::StructureSizes
HeaderFileType	Object/MachOFormat.h	/^  enum HeaderFileType {$/;"	g	namespace:llvm::object::macho
HeaderFileTypeBundle	Support/MachO.h	/^      HeaderFileTypeBundle              = 0x8u, \/\/ MH_BUNDLE$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypeCore	Support/MachO.h	/^      HeaderFileTypeCore                = 0x4u, \/\/ MH_CORE$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypeDSYM	Support/MachO.h	/^      HeaderFileTypeDSYM                = 0xAu, \/\/ MH_DSYM$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypeDynamicLinkEditor	Support/MachO.h	/^      HeaderFileTypeDynamicLinkEditor   = 0x7u, \/\/ MH_DYLINKER$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypeDynamicShlib	Support/MachO.h	/^      HeaderFileTypeDynamicShlib        = 0x6u, \/\/ MH_DYLIB$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypeDynamicShlibStub	Support/MachO.h	/^      HeaderFileTypeDynamicShlibStub    = 0x9u, \/\/ MH_DYLIB_STUB$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypeExecutable	Support/MachO.h	/^      HeaderFileTypeExecutable          = 0x2u, \/\/ MH_EXECUTE$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypeFixedVMShlib	Support/MachO.h	/^      HeaderFileTypeFixedVMShlib        = 0x3u, \/\/ MH_FVMLIB$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypeKextBundle	Support/MachO.h	/^      HeaderFileTypeKextBundle          = 0xBu, \/\/ MH_KEXT_BUNDLE$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypeObject	Support/MachO.h	/^      HeaderFileTypeObject              = 0x1u, \/\/ MH_OBJECT$/;"	e	enum:llvm::MachO::__anon126
HeaderFileTypePreloadedExecutable	Support/MachO.h	/^      HeaderFileTypePreloadedExecutable = 0x5u, \/\/ MH_PRELOAD$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitAllModulesBound	Support/MachO.h	/^      HeaderFlagBitAllModulesBound        = 0x00001000u, \/\/ MH_ALLMODSBOUND$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitAllowStackExecution	Support/MachO.h	/^      HeaderFlagBitAllowStackExecution    = 0x00020000u, \/\/ MH_ALLOW_STACK_EXECUTION$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitBindAtLoad	Support/MachO.h	/^      HeaderFlagBitBindAtLoad             = 0x00000008u, \/\/ MH_BINDATLOAD$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitBindsToWeak	Support/MachO.h	/^      HeaderFlagBitBindsToWeak            = 0x00010000u, \/\/ MH_BINDS_TO_WEAK$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitCanonical	Support/MachO.h	/^      HeaderFlagBitCanonical              = 0x00004000u, \/\/ MH_CANONICAL$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitDeadStrippableDylib	Support/MachO.h	/^      HeaderFlagBitDeadStrippableDylib    = 0x00400000u, \/\/ MH_DEAD_STRIPPABLE_DYLIB$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitForceFlatNamespace	Support/MachO.h	/^      HeaderFlagBitForceFlatNamespace     = 0x00000100u, \/\/ MH_FORCE_FLAT$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitIsDynamicLinkObject	Support/MachO.h	/^      HeaderFlagBitIsDynamicLinkObject    = 0x00000004u, \/\/ MH_DYLDLINK$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitIsIncrementalLinkObject	Support/MachO.h	/^      HeaderFlagBitIsIncrementalLinkObject= 0x00000002u, \/\/ MH_INCRLINK$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitLazyInit	Support/MachO.h	/^      HeaderFlagBitLazyInit               = 0x00000040u, \/\/ MH_LAZY_INIT$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitNoFixPrebinding	Support/MachO.h	/^      HeaderFlagBitNoFixPrebinding        = 0x00000400u, \/\/ MH_NOFIXPREBINDING$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitNoMultipleDefintions	Support/MachO.h	/^      HeaderFlagBitNoMultipleDefintions   = 0x00000200u, \/\/ MH_NOMULTIDEFS$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitNoReexportedDylibs	Support/MachO.h	/^      HeaderFlagBitNoReexportedDylibs     = 0x00100000u, \/\/ MH_NO_REEXPORTED_DYLIBS$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitNoUndefinedSymbols	Support/MachO.h	/^      HeaderFlagBitNoUndefinedSymbols     = 0x00000001u, \/\/ MH_NOUNDEFS$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitPIE	Support/MachO.h	/^      HeaderFlagBitPIE                    = 0x00200000u, \/\/ MH_PIE$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitPrebindable	Support/MachO.h	/^      HeaderFlagBitPrebindable            = 0x00000800u, \/\/ MH_PREBINDABLE$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitPrebound	Support/MachO.h	/^      HeaderFlagBitPrebound               = 0x00000010u, \/\/ MH_PREBOUND$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitRootSafe	Support/MachO.h	/^      HeaderFlagBitRootSafe               = 0x00040000u, \/\/ MH_ROOT_SAFE$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitSetUIDSafe	Support/MachO.h	/^      HeaderFlagBitSetUIDSafe             = 0x00080000u, \/\/ MH_SETUID_SAFE$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitSplitSegments	Support/MachO.h	/^      HeaderFlagBitSplitSegments          = 0x00000020u, \/\/ MH_SPLIT_SEGS$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitSubsectionsViaSymbols	Support/MachO.h	/^      HeaderFlagBitSubsectionsViaSymbols  = 0x00002000u, \/\/ MH_SUBSECTIONS_VIA_SYMBOLS$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitTwoLevelNamespace	Support/MachO.h	/^      HeaderFlagBitTwoLevelNamespace      = 0x00000080u, \/\/ MH_TWOLEVEL$/;"	e	enum:llvm::MachO::__anon126
HeaderFlagBitWeakDefines	Support/MachO.h	/^      HeaderFlagBitWeakDefines            = 0x00008000u, \/\/ MH_WEAK_DEFINES$/;"	e	enum:llvm::MachO::__anon126
HeaderFlags	Object/MachOFormat.h	/^  enum HeaderFlags {$/;"	g	namespace:llvm::object::macho
HeaderMagic	Object/MachOFormat.h	/^  enum HeaderMagic {$/;"	g	namespace:llvm::object::macho
HeaderMagic32	Support/MachO.h	/^      HeaderMagic32         = 0xFEEDFACEu, \/\/ MH_MAGIC$/;"	e	enum:llvm::MachO::__anon126
HeaderMagic32Swapped	Support/MachO.h	/^      HeaderMagic32Swapped  = 0xCEFAEDFEu, \/\/ MH_CIGAM$/;"	e	enum:llvm::MachO::__anon126
HeaderMagic64	Support/MachO.h	/^      HeaderMagic64         = 0xFEEDFACFu, \/\/ MH_MAGIC_64$/;"	e	enum:llvm::MachO::__anon126
HeaderMagic64Swapped	Support/MachO.h	/^      HeaderMagic64Swapped  = 0xCFFAEDFEu, \/\/ MH_CIGAM_64$/;"	e	enum:llvm::MachO::__anon126
HeaderNode	Analysis/Interval.h	/^  BasicBlock *HeaderNode;$/;"	m	class:llvm::Interval
HeaderSize	Support/COFF.h	/^    HeaderSize     = 20,$/;"	e	enum:llvm::COFF::__anon80
HeaderSizeInParagraphs	Support/COFF.h	/^    uint16_t HeaderSizeInParagraphs;$/;"	m	struct:llvm::COFF::DOSHeader
Height	CodeGen/ScheduleDAG.h	/^    unsigned Height;                    \/\/ Node height.$/;"	m	class:llvm::SUnit
HelpStr	Support/CommandLine.h	/^    const char *HelpStr;$/;"	m	class:llvm::cl::generic_parser_base::GenericOptionInfo
HelpStr	Support/CommandLine.h	/^  const char *HelpStr;    \/\/ The descriptive text message for -help$/;"	m	class:llvm::cl::Option
HeuristicBase	CodeGen/PBQP/HeuristicBase.h	/^    HeuristicBase(HeuristicSolverImpl<HImpl> &solver)$/;"	f	class:PBQP::HeuristicBase
HeuristicBase	CodeGen/PBQP/HeuristicBase.h	/^  class HeuristicBase {$/;"	c	namespace:PBQP
HeuristicEdgeData	CodeGen/PBQP/HeuristicSolver.h	/^    typedef typename HImpl::EdgeData HeuristicEdgeData;$/;"	t	class:PBQP::HeuristicSolverImpl
HeuristicNodeData	CodeGen/PBQP/HeuristicSolver.h	/^    typedef typename HImpl::NodeData HeuristicNodeData;$/;"	t	class:PBQP::HeuristicSolverImpl
HeuristicSolver	CodeGen/PBQP/HeuristicSolver.h	/^  class HeuristicSolver {$/;"	c	namespace:PBQP
HeuristicSolverImpl	CodeGen/PBQP/HeuristicSolver.h	/^    HeuristicSolverImpl(Graph &g) : g(g), h(*this) {}  $/;"	f	class:PBQP::HeuristicSolverImpl
HeuristicSolverImpl	CodeGen/PBQP/HeuristicSolver.h	/^  class HeuristicSolverImpl {$/;"	c	namespace:PBQP
Heuristics	CodeGen/PBQP/Heuristics/Briggs.h	/^  namespace Heuristics {$/;"	n	namespace:PBQP
Hi_32	Support/MathExtras.h	/^inline uint32_t Hi_32(uint64_t Value) {$/;"	f	namespace:llvm
Hidden	Support/CommandLine.h	/^  Hidden          = 0x01,      \/\/ -help doesn't, but -help-hidden does$/;"	e	enum:llvm::cl::OptionHidden
HiddenDeclarationVisibilityAttr	MC/MCAsmInfo.h	/^    MCSymbolAttr HiddenDeclarationVisibilityAttr;   \/\/ Defaults to MCSA_Hidden.$/;"	m	class:llvm::MCAsmInfo
HiddenGVStubs	CodeGen/MachineModuleInfoImpls.h	/^    DenseMap<MCSymbol*, StubValueTy> HiddenGVStubs;$/;"	m	class:llvm::MachineModuleInfoMachO
HiddenVisibility	GlobalValue.h	/^    HiddenVisibility,       \/\/\/< The GV is hidden$/;"	e	enum:llvm::GlobalValue::VisibilityTypes
HiddenVisibilityAttr	MC/MCAsmInfo.h	/^    MCSymbolAttr HiddenVisibilityAttr;       \/\/ Defaults to MCSA_Hidden.$/;"	m	class:llvm::MCAsmInfo
High	Support/IntegersSubset.h	/^    IntType High;$/;"	m	class:llvm::IntRange
HighLatency	MC/MCSchedule.h	/^  unsigned HighLatency;$/;"	m	class:llvm::MCSchedModel
HigherLevelAnalysis	PassManagers.h	/^  SmallVector<Pass *, 8> HigherLevelAnalysis;$/;"	m	class:llvm::PMDataManager
Hint	CodeGen/CalcSpillWeights.h	/^    DenseMap<unsigned, float> Hint;$/;"	m	class:llvm::VirtRegAuxInfo
Holder	Support/IntegersSubset.h	/^  Constant *Holder;$/;"	m	class:llvm::IntegersSubset
HorizontalVerticalBalance	CodeGen/ResourcePriorityQueue.h	/^    signed HorizontalVerticalBalance;$/;"	m	class:llvm::ResourcePriorityQueue
HungoffOperandTraits	OperandTraits.h	/^struct HungoffOperandTraits {$/;"	s	namespace:llvm
Hybrid	Target/TargetLowering.h	/^      Hybrid,           \/\/ Scheduling for both latency and register pressure.$/;"	e	enum:llvm::Sched::Preference
I	ADT/DenseSet.h	/^    typename MapTy::const_iterator I;$/;"	m	class:llvm::DenseSet::ConstIterator
I	ADT/DenseSet.h	/^    typename MapTy::iterator I;$/;"	m	class:llvm::DenseSet::Iterator
I	ADT/ValueMap.h	/^  BaseT I;$/;"	m	class:llvm::ValueMapConstIterator
I	ADT/ValueMap.h	/^  BaseT I;$/;"	m	class:llvm::ValueMapIterator
I	Support/CallSite.h	/^  PointerIntPair<InstrTy*, 1, bool> I;$/;"	m	class:llvm::CallSiteBase
IBM	ADT/Triple.h	/^    IBM$/;"	e	enum:llvm::Triple::VendorType
ICMP_EQ	InstrTypes.h	/^    ICMP_EQ    = 32,  \/\/\/< equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_NE	InstrTypes.h	/^    ICMP_NE    = 33,  \/\/\/< not equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_SGE	InstrTypes.h	/^    ICMP_SGE   = 39,  \/\/\/< signed greater or equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_SGT	InstrTypes.h	/^    ICMP_SGT   = 38,  \/\/\/< signed greater than$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_SLE	InstrTypes.h	/^    ICMP_SLE   = 41,  \/\/\/< signed less or equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_SLT	InstrTypes.h	/^    ICMP_SLT   = 40,  \/\/\/< signed less than$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_UGE	InstrTypes.h	/^    ICMP_UGE   = 35,  \/\/\/< unsigned greater or equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_UGT	InstrTypes.h	/^    ICMP_UGT   = 34,  \/\/\/< unsigned greater than$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_ULE	InstrTypes.h	/^    ICMP_ULE   = 37,  \/\/\/< unsigned less or equal$/;"	e	enum:llvm::CmpInst::Predicate
ICMP_ULT	InstrTypes.h	/^    ICMP_ULT   = 36,  \/\/\/< unsigned less than$/;"	e	enum:llvm::CmpInst::Predicate
ICmpInst	Instructions.h	/^  ICmpInst($/;"	f	class:llvm::ICmpInst
ICmpInst	Instructions.h	/^class ICmpInst: public CmpInst {$/;"	c	namespace:llvm
ID	Analysis/AliasAnalysis.h	/^  static char ID; \/\/ Class identification, replacement for typeinfo$/;"	m	class:llvm::AliasAnalysis
ID	Analysis/BlockFrequencyInfo.h	/^  static char ID;$/;"	m	class:llvm::BlockFrequencyInfo
ID	Analysis/BranchProbabilityInfo.h	/^  static char ID;$/;"	m	class:llvm::BranchProbabilityInfo
ID	Analysis/CallGraph.h	/^  static char ID; \/\/ Class identification, replacement for typeinfo$/;"	m	class:llvm::CallGraph
ID	Analysis/DependenceAnalysis.h	/^    static char ID; \/\/ Class identification, replacement for typeinfo$/;"	m	class:llvm::DependenceAnalysis
ID	Analysis/DominanceFrontier.h	/^  static char ID; \/\/ Pass ID, replacement for typeid$/;"	m	class:llvm::DominanceFrontier
ID	Analysis/Dominators.h	/^  static char ID; \/\/ Pass ID, replacement for typeid$/;"	m	class:llvm::DominatorTree
ID	Analysis/FindUsedTypes.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::FindUsedTypes
ID	Analysis/IVUsers.h	/^  static char ID; \/\/ Pass ID, replacement for typeid$/;"	m	class:llvm::IVUsers
ID	Analysis/IntervalPartition.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::IntervalPartition
ID	Analysis/LazyValueInfo.h	/^  static char ID;$/;"	m	class:llvm::LazyValueInfo
ID	Analysis/LibCallAliasAnalysis.h	/^    static char ID; \/\/ Class identification$/;"	m	struct:llvm::LibCallAliasAnalysis
ID	Analysis/LoopDependenceAnalysis.h	/^  static char ID; \/\/ Class identification, replacement for typeinfo$/;"	m	class:llvm::LoopDependenceAnalysis
ID	Analysis/LoopInfo.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::LoopInfo
ID	Analysis/LoopPass.h	/^  static char ID;$/;"	m	class:llvm::LPPassManager
ID	Analysis/MemoryDependenceAnalysis.h	/^    static char ID;$/;"	m	class:llvm::MemoryDependenceAnalysis
ID	Analysis/PathProfileInfo.h	/^  static char ID; \/\/ Pass identification$/;"	m	class:llvm::PathProfileInfo
ID	Analysis/PostDominators.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	struct:llvm::PostDominatorTree
ID	Analysis/ProfileInfo.h	/^    static char ID; \/\/ Class identification, replacement for typeinfo$/;"	m	class:llvm::ProfileInfoT
ID	Analysis/RegionInfo.h	/^  static char ID;$/;"	m	class:llvm::RegionInfo
ID	Analysis/RegionPass.h	/^  static char ID;$/;"	m	class:llvm::RGPassManager
ID	Analysis/ScalarEvolution.h	/^    static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::ScalarEvolution
ID	CallingConv.h	/^  enum ID {$/;"	g	namespace:llvm::CallingConv
ID	CodeGen/AsmPrinter.h	/^    static char ID;$/;"	m	class:llvm::AsmPrinter
ID	CodeGen/CalcSpillWeights.h	/^    static char ID;$/;"	m	class:llvm::CalculateSpillWeights
ID	CodeGen/EdgeBundles.h	/^  static char ID;$/;"	m	class:llvm::EdgeBundles
ID	CodeGen/GCMetadata.h	/^    static char ID;$/;"	m	class:llvm::GCModuleInfo
ID	CodeGen/LiveIntervalAnalysis.h	/^    static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::LiveIntervals
ID	CodeGen/LiveStackAnalysis.h	/^    static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::LiveStacks
ID	CodeGen/LiveVariables.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::LiveVariables
ID	CodeGen/MachineBlockFrequencyInfo.h	/^  static char ID;$/;"	m	class:llvm::MachineBlockFrequencyInfo
ID	CodeGen/MachineBranchProbabilityInfo.h	/^  static char ID;$/;"	m	class:llvm::MachineBranchProbabilityInfo
ID	CodeGen/MachineDominators.h	/^  static char ID; \/\/ Pass ID, replacement for typeid$/;"	m	class:llvm::MachineDominatorTree
ID	CodeGen/MachineFunctionAnalysis.h	/^  static char ID;$/;"	m	struct:llvm::MachineFunctionAnalysis
ID	CodeGen/MachineLoopInfo.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::MachineLoopInfo
ID	CodeGen/MachineLoopRanges.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::MachineLoopRanges
ID	CodeGen/MachineModuleInfo.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::MachineModuleInfo
ID	CodeGen/MachinePostDominators.h	/^  static char ID;$/;"	m	struct:llvm::MachinePostDominatorTree
ID	CodeGen/MachineScheduler.h	/^  unsigned ID;$/;"	m	class:llvm::ReadyQueue
ID	CodeGen/Passes.h	/^  static char ID;$/;"	m	class:llvm::TargetPassConfig
ID	CodeGen/SelectionDAGISel.h	/^  static char ID;$/;"	m	class:llvm::SelectionDAGISel
ID	CodeGen/SlotIndexes.h	/^    static char ID;$/;"	m	class:llvm::SlotIndexes
ID	DataLayout.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	class:llvm::DataLayout
ID	Intrinsics.h	/^  enum ID {$/;"	g	namespace:llvm::Intrinsic
ID	MC/MCRegisterInfo.h	/^  const uint16_t ID;$/;"	m	class:llvm::MCRegisterClass
ID	PassManagers.h	/^  static char ID;$/;"	m	class:llvm::FPPassManager
ID	TableGen/Record.h	/^  unsigned ID;$/;"	m	class:llvm::Record
ID	Target/TargetLibraryInfo.h	/^  static char ID;$/;"	m	class:llvm::TargetLibraryInfo
ID	TargetTransformInfo.h	/^  static char ID;$/;"	m	class:llvm::TargetTransformInfo
ID	Transforms/Utils/UnifyFunctionExitNodes.h	/^  static char ID; \/\/ Pass identification, replacement for typeid$/;"	m	struct:llvm::UnifyFunctionExitNodes
IDAndSubclassData	Type.h	/^  uint32_t IDAndSubclassData;$/;"	m	class:llvm::Type
ID_Archive	Object/Binary.h	/^    ID_Archive,$/;"	e	enum:llvm::object::Binary::__anon72
ID_COFF	Object/Binary.h	/^    ID_COFF,$/;"	e	enum:llvm::object::Binary::__anon72
ID_ELF32B	Object/Binary.h	/^    ID_ELF32B, \/\/ ELF 32-bit, big endian$/;"	e	enum:llvm::object::Binary::__anon72
ID_ELF32L	Object/Binary.h	/^    ID_ELF32L, \/\/ ELF 32-bit, little endian$/;"	e	enum:llvm::object::Binary::__anon72
ID_ELF64B	Object/Binary.h	/^    ID_ELF64B, \/\/ ELF 64-bit, big endian$/;"	e	enum:llvm::object::Binary::__anon72
ID_ELF64L	Object/Binary.h	/^    ID_ELF64L, \/\/ ELF 64-bit, little endian$/;"	e	enum:llvm::object::Binary::__anon72
ID_EndObjects	Object/Binary.h	/^    ID_EndObjects$/;"	e	enum:llvm::object::Binary::__anon72
ID_MachO	Object/Binary.h	/^    ID_MachO,$/;"	e	enum:llvm::object::Binary::__anon72
ID_StartObjects	Object/Binary.h	/^    ID_StartObjects,$/;"	e	enum:llvm::object::Binary::__anon72
IDom	Analysis/Dominators.h	/^  DomTreeNodeBase<NodeT> *IDom;$/;"	m	class:llvm::DomTreeNodeBase
IDom	Transforms/Utils/SSAUpdaterImpl.h	/^    BBInfo *IDom;      \/\/ Immediate dominator.$/;"	m	class:llvm::SSAUpdaterImpl::BBInfo
IDoms	Analysis/Dominators.h	/^  DenseMap<NodeT*, NodeT*> IDoms;$/;"	m	class:llvm::DominatorTreeBase
IEEEdouble	ADT/APFloat.h	/^    static const fltSemantics IEEEdouble;$/;"	m	class:llvm::APFloat
IEEEhalf	ADT/APFloat.h	/^    static const fltSemantics IEEEhalf;$/;"	m	class:llvm::APFloat
IEEEquad	ADT/APFloat.h	/^    static const fltSemantics IEEEquad;$/;"	m	class:llvm::APFloat
IEEEsingle	ADT/APFloat.h	/^    static const fltSemantics IEEEsingle;$/;"	m	class:llvm::APFloat
IF	TableGen/Record.h	/^  enum TernaryOp { SUBST, FOREACH, IF };$/;"	e	enum:llvm::TernOpInit::TernaryOp
IITDescriptor	Intrinsics.h	/^  struct IITDescriptor {$/;"	s	namespace:llvm::Intrinsic
IITDescriptorKind	Intrinsics.h	/^    enum IITDescriptorKind {$/;"	g	struct:llvm::Intrinsic::IITDescriptor
IIty	Support/InstIterator.h	/^  typedef _II_t   IIty;$/;"	t	class:llvm::InstIterator
IK_BinOpInit	TableGen/Record.h	/^    IK_BinOpInit,$/;"	e	enum:llvm::Init::InitKind
IK_BitInit	TableGen/Record.h	/^    IK_BitInit,$/;"	e	enum:llvm::Init::InitKind
IK_BitsInit	TableGen/Record.h	/^    IK_BitsInit,$/;"	e	enum:llvm::Init::InitKind
IK_DagInit	TableGen/Record.h	/^    IK_DagInit,$/;"	e	enum:llvm::Init::InitKind
IK_DefInit	TableGen/Record.h	/^    IK_DefInit,$/;"	e	enum:llvm::Init::InitKind
IK_FieldInit	TableGen/Record.h	/^    IK_FieldInit,$/;"	e	enum:llvm::Init::InitKind
IK_FirstOpInit	TableGen/Record.h	/^    IK_FirstOpInit,$/;"	e	enum:llvm::Init::InitKind
IK_FirstTypedInit	TableGen/Record.h	/^    IK_FirstTypedInit,$/;"	e	enum:llvm::Init::InitKind
IK_IntInit	TableGen/Record.h	/^    IK_IntInit,$/;"	e	enum:llvm::Init::InitKind
IK_LastOpInit	TableGen/Record.h	/^    IK_LastOpInit,$/;"	e	enum:llvm::Init::InitKind
IK_LastTypedInit	TableGen/Record.h	/^    IK_LastTypedInit,$/;"	e	enum:llvm::Init::InitKind
IK_ListInit	TableGen/Record.h	/^    IK_ListInit,$/;"	e	enum:llvm::Init::InitKind
IK_StringInit	TableGen/Record.h	/^    IK_StringInit,$/;"	e	enum:llvm::Init::InitKind
IK_TernOpInit	TableGen/Record.h	/^    IK_TernOpInit,$/;"	e	enum:llvm::Init::InitKind
IK_UnOpInit	TableGen/Record.h	/^    IK_UnOpInit,$/;"	e	enum:llvm::Init::InitKind
IK_UnsetInit	TableGen/Record.h	/^    IK_UnsetInit,$/;"	e	enum:llvm::Init::InitKind
IK_VarBitInit	TableGen/Record.h	/^    IK_VarBitInit$/;"	e	enum:llvm::Init::InitKind
IK_VarInit	TableGen/Record.h	/^    IK_VarInit,$/;"	e	enum:llvm::Init::InitKind
IK_VarListElementInit	TableGen/Record.h	/^    IK_VarListElementInit,$/;"	e	enum:llvm::Init::InitKind
ILP	Target/TargetLowering.h	/^      ILP,              \/\/ Scheduling for ILP in low register pressure mode.$/;"	e	enum:llvm::Sched::Preference
ILPValue	CodeGen/ScheduleDAGILP.h	/^  ILPValue(): InstrCount(0), Cycles(0) {}$/;"	f	struct:llvm::ILPValue
ILPValue	CodeGen/ScheduleDAGILP.h	/^  ILPValue(unsigned count, unsigned cycles):$/;"	f	struct:llvm::ILPValue
ILPValue	CodeGen/ScheduleDAGILP.h	/^struct ILPValue {$/;"	s	namespace:llvm
ILPValues	CodeGen/ScheduleDAGILP.h	/^  std::vector<ILPValue> ILPValues;$/;"	m	class:llvm::ScheduleDAGILP
IMAGE_COMDAT_SELECT_ANY	Support/COFF.h	/^    IMAGE_COMDAT_SELECT_ANY,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_ASSOCIATIVE	Support/COFF.h	/^    IMAGE_COMDAT_SELECT_ASSOCIATIVE,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_EXACT_MATCH	Support/COFF.h	/^    IMAGE_COMDAT_SELECT_EXACT_MATCH,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_LARGEST	Support/COFF.h	/^    IMAGE_COMDAT_SELECT_LARGEST$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_NODUPLICATES	Support/COFF.h	/^    IMAGE_COMDAT_SELECT_NODUPLICATES = 1,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_SAME_SIZE	Support/COFF.h	/^    IMAGE_COMDAT_SELECT_SAME_SIZE,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_DEBUG_TYPE_BORLAND	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_BORLAND       = 9,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_CLSID	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_CLSID         = 11$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_CODEVIEW	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_CODEVIEW      = 2,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_COFF	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_COFF          = 1,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_EXCEPTION	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_EXCEPTION     = 5,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_FIXUP	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_FIXUP         = 6,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_FPO	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_FPO           = 3,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_MISC	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_MISC          = 4,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_OMAP_FROM_SRC	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_OMAP_TO_SRC	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_OMAP_TO_SRC   = 7,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_UNKNOWN	Support/COFF.h	/^    IMAGE_DEBUG_TYPE_UNKNOWN       = 0,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE	Support/COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE = 0x0040,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY	Support/COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY = 0x0080,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_NO_BIND	Support/COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_NO_BIND = 0x0800,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_NO_ISOLATION	Support/COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_NO_ISOLATION = 0x0200,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_NO_SEH	Support/COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_NO_SEH = 0x0400,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_NX_COMPAT	Support/COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_NX_COMPAT = 0x0100, \/\/\/< Image is NX compatible.$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_TERMINAL_SERVER_AWARE	Support/COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_TERMINAL_SERVER_AWARE = 0x8000$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_WDM_DRIVER	Support/COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_WDM_DRIVER = 0x2000, \/\/\/< A WDM driver.$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_FILE_32BIT_MACHINE	Support/COFF.h	/^    IMAGE_FILE_32BIT_MACHINE           = 0x0100,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_AGGRESSIVE_WS_TRIM	Support/COFF.h	/^    IMAGE_FILE_AGGRESSIVE_WS_TRIM      = 0x0010,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_BYTES_REVERSED_HI	Support/COFF.h	/^    IMAGE_FILE_BYTES_REVERSED_HI       = 0x8000$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_BYTES_REVERSED_LO	Support/COFF.h	/^    IMAGE_FILE_BYTES_REVERSED_LO       = 0x0080,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_DEBUG_STRIPPED	Support/COFF.h	/^    IMAGE_FILE_DEBUG_STRIPPED          = 0x0200,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_DLL	Support/COFF.h	/^    IMAGE_FILE_DLL                     = 0x2000,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_EXECUTABLE_IMAGE	Support/COFF.h	/^    IMAGE_FILE_EXECUTABLE_IMAGE        = 0x0002,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_LARGE_ADDRESS_AWARE	Support/COFF.h	/^    IMAGE_FILE_LARGE_ADDRESS_AWARE     = 0x0020,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_LINE_NUMS_STRIPPED	Support/COFF.h	/^    IMAGE_FILE_LINE_NUMS_STRIPPED      = 0x0004,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_LOCAL_SYMS_STRIPPED	Support/COFF.h	/^    IMAGE_FILE_LOCAL_SYMS_STRIPPED     = 0x0008,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_MACHINE_AM33	Support/COFF.h	/^    IMAGE_FILE_MACHINE_AM33      = 0x13,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_AMD64	Support/COFF.h	/^    IMAGE_FILE_MACHINE_AMD64     = 0x8664,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_ARM	Support/COFF.h	/^    IMAGE_FILE_MACHINE_ARM       = 0x1C0,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_ARMV7	Support/COFF.h	/^    IMAGE_FILE_MACHINE_ARMV7     = 0x1C4,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_EBC	Support/COFF.h	/^    IMAGE_FILE_MACHINE_EBC       = 0xEBC,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_I386	Support/COFF.h	/^    IMAGE_FILE_MACHINE_I386      = 0x14C,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_IA64	Support/COFF.h	/^    IMAGE_FILE_MACHINE_IA64      = 0x200,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_M32R	Support/COFF.h	/^    IMAGE_FILE_MACHINE_M32R      = 0x9041,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_MIPS16	Support/COFF.h	/^    IMAGE_FILE_MACHINE_MIPS16    = 0x266,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_MIPSFPU	Support/COFF.h	/^    IMAGE_FILE_MACHINE_MIPSFPU   = 0x366,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_MIPSFPU16	Support/COFF.h	/^    IMAGE_FILE_MACHINE_MIPSFPU16 = 0x466,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_POWERPC	Support/COFF.h	/^    IMAGE_FILE_MACHINE_POWERPC   = 0x1F0,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_POWERPCFP	Support/COFF.h	/^    IMAGE_FILE_MACHINE_POWERPCFP = 0x1F1,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_R4000	Support/COFF.h	/^    IMAGE_FILE_MACHINE_R4000     = 0x166,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_SH3	Support/COFF.h	/^    IMAGE_FILE_MACHINE_SH3       = 0x1A2,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_SH3DSP	Support/COFF.h	/^    IMAGE_FILE_MACHINE_SH3DSP    = 0x1A3,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_SH4	Support/COFF.h	/^    IMAGE_FILE_MACHINE_SH4       = 0x1A6,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_SH5	Support/COFF.h	/^    IMAGE_FILE_MACHINE_SH5       = 0x1A8,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_THUMB	Support/COFF.h	/^    IMAGE_FILE_MACHINE_THUMB     = 0x1C2,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_UNKNOWN	Support/COFF.h	/^    IMAGE_FILE_MACHINE_UNKNOWN   = 0x0,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_WCEMIPSV2	Support/COFF.h	/^    IMAGE_FILE_MACHINE_WCEMIPSV2 = 0x169$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_NET_RUN_FROM_SWAP	Support/COFF.h	/^    IMAGE_FILE_NET_RUN_FROM_SWAP       = 0x0800,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_RELOCS_STRIPPED	Support/COFF.h	/^    IMAGE_FILE_RELOCS_STRIPPED         = 0x0001,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP	Support/COFF.h	/^    IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x0400,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_SYSTEM	Support/COFF.h	/^    IMAGE_FILE_SYSTEM                  = 0x1000,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_UP_SYSTEM_ONLY	Support/COFF.h	/^    IMAGE_FILE_UP_SYSTEM_ONLY          = 0x4000,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_REL_AMD64_ABSOLUTE	Support/COFF.h	/^    IMAGE_REL_AMD64_ABSOLUTE  = 0x0000,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_ADDR32	Support/COFF.h	/^    IMAGE_REL_AMD64_ADDR32    = 0x0002,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_ADDR32NB	Support/COFF.h	/^    IMAGE_REL_AMD64_ADDR32NB  = 0x0003,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_ADDR64	Support/COFF.h	/^    IMAGE_REL_AMD64_ADDR64    = 0x0001,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_PAIR	Support/COFF.h	/^    IMAGE_REL_AMD64_PAIR      = 0x000F,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32	Support/COFF.h	/^    IMAGE_REL_AMD64_REL32     = 0x0004,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_1	Support/COFF.h	/^    IMAGE_REL_AMD64_REL32_1   = 0x0005,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_2	Support/COFF.h	/^    IMAGE_REL_AMD64_REL32_2   = 0x0006,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_3	Support/COFF.h	/^    IMAGE_REL_AMD64_REL32_3   = 0x0007,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_4	Support/COFF.h	/^    IMAGE_REL_AMD64_REL32_4   = 0x0008,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_5	Support/COFF.h	/^    IMAGE_REL_AMD64_REL32_5   = 0x0009,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SECREL	Support/COFF.h	/^    IMAGE_REL_AMD64_SECREL    = 0x000B,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SECREL7	Support/COFF.h	/^    IMAGE_REL_AMD64_SECREL7   = 0x000C,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SECTION	Support/COFF.h	/^    IMAGE_REL_AMD64_SECTION   = 0x000A,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SREL32	Support/COFF.h	/^    IMAGE_REL_AMD64_SREL32    = 0x000E,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SSPAN32	Support/COFF.h	/^    IMAGE_REL_AMD64_SSPAN32   = 0x0010$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_TOKEN	Support/COFF.h	/^    IMAGE_REL_AMD64_TOKEN     = 0x000D,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_ARM_ABSOLUTE	Support/COFF.h	/^    IMAGE_REL_ARM_ABSOLUTE  = 0x0000,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_ADDR32	Support/COFF.h	/^    IMAGE_REL_ARM_ADDR32    = 0x0001,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_ADDR32NB	Support/COFF.h	/^    IMAGE_REL_ARM_ADDR32NB  = 0x0002,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BLX11	Support/COFF.h	/^    IMAGE_REL_ARM_BLX11     = 0x0009,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BLX23T	Support/COFF.h	/^    IMAGE_REL_ARM_BLX23T    = 0x0015$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BLX24	Support/COFF.h	/^    IMAGE_REL_ARM_BLX24     = 0x0008,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BRANCH11	Support/COFF.h	/^    IMAGE_REL_ARM_BRANCH11  = 0x0004,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BRANCH20T	Support/COFF.h	/^    IMAGE_REL_ARM_BRANCH20T = 0x0012,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BRANCH24	Support/COFF.h	/^    IMAGE_REL_ARM_BRANCH24  = 0x0003,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BRANCH24T	Support/COFF.h	/^    IMAGE_REL_ARM_BRANCH24T = 0x0014,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_MOV32A	Support/COFF.h	/^    IMAGE_REL_ARM_MOV32A    = 0x0010,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_MOV32T	Support/COFF.h	/^    IMAGE_REL_ARM_MOV32T    = 0x0011,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_SECREL	Support/COFF.h	/^    IMAGE_REL_ARM_SECREL    = 0x000F,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_SECTION	Support/COFF.h	/^    IMAGE_REL_ARM_SECTION   = 0x000E,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_TOKEN	Support/COFF.h	/^    IMAGE_REL_ARM_TOKEN     = 0x0005,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_BASED_ABSOLUTE	Support/COFF.h	/^    IMAGE_REL_BASED_ABSOLUTE       = 0,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_ARM_MOV32A	Support/COFF.h	/^    IMAGE_REL_BASED_ARM_MOV32A     = 5,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_ARM_MOV32T	Support/COFF.h	/^    IMAGE_REL_BASED_ARM_MOV32T     = 7,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_DIR64	Support/COFF.h	/^    IMAGE_REL_BASED_DIR64          = 10$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_HIGH	Support/COFF.h	/^    IMAGE_REL_BASED_HIGH           = 1,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_HIGHADJ	Support/COFF.h	/^    IMAGE_REL_BASED_HIGHADJ        = 4,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_HIGHLOW	Support/COFF.h	/^    IMAGE_REL_BASED_HIGHLOW        = 3,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_LOW	Support/COFF.h	/^    IMAGE_REL_BASED_LOW            = 2,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_MIPS_JMPADDR	Support/COFF.h	/^    IMAGE_REL_BASED_MIPS_JMPADDR   = 5,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_MIPS_JMPADDR16	Support/COFF.h	/^    IMAGE_REL_BASED_MIPS_JMPADDR16 = 9,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_I386_ABSOLUTE	Support/COFF.h	/^    IMAGE_REL_I386_ABSOLUTE = 0x0000,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_DIR16	Support/COFF.h	/^    IMAGE_REL_I386_DIR16    = 0x0001,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_DIR32	Support/COFF.h	/^    IMAGE_REL_I386_DIR32    = 0x0006,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_DIR32NB	Support/COFF.h	/^    IMAGE_REL_I386_DIR32NB  = 0x0007,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_REL16	Support/COFF.h	/^    IMAGE_REL_I386_REL16    = 0x0002,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_REL32	Support/COFF.h	/^    IMAGE_REL_I386_REL32    = 0x0014,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_SECREL	Support/COFF.h	/^    IMAGE_REL_I386_SECREL   = 0x000B,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_SECREL7	Support/COFF.h	/^    IMAGE_REL_I386_SECREL7  = 0x000D,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_SECTION	Support/COFF.h	/^    IMAGE_REL_I386_SECTION  = 0x000A,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_SEG12	Support/COFF.h	/^    IMAGE_REL_I386_SEG12    = 0x0009,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_TOKEN	Support/COFF.h	/^    IMAGE_REL_I386_TOKEN    = 0x000C,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_SCN_ALIGN_1024BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_1024BYTES        = 0x00B00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_128BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_128BYTES         = 0x00800000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_16BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_16BYTES          = 0x00500000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_1BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_1BYTES           = 0x00100000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_2048BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_2048BYTES        = 0x00C00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_256BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_256BYTES         = 0x00900000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_2BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_2BYTES           = 0x00200000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_32BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_32BYTES          = 0x00600000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_4096BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_4096BYTES        = 0x00D00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_4BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_4BYTES           = 0x00300000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_512BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_512BYTES         = 0x00A00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_64BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_64BYTES          = 0x00700000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_8192BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_8192BYTES        = 0x00E00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_8BYTES	Support/COFF.h	/^    IMAGE_SCN_ALIGN_8BYTES           = 0x00400000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_CNT_CODE	Support/COFF.h	/^    IMAGE_SCN_CNT_CODE               = 0x00000020,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_CNT_INITIALIZED_DATA	Support/COFF.h	/^    IMAGE_SCN_CNT_INITIALIZED_DATA   = 0x00000040,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_CNT_UNINITIALIZED_DATA	Support/COFF.h	/^    IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x00000080,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_GPREL	Support/COFF.h	/^    IMAGE_SCN_GPREL                  = 0x00008000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_COMDAT	Support/COFF.h	/^    IMAGE_SCN_LNK_COMDAT             = 0x00001000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_INFO	Support/COFF.h	/^    IMAGE_SCN_LNK_INFO               = 0x00000200,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_NRELOC_OVFL	Support/COFF.h	/^    IMAGE_SCN_LNK_NRELOC_OVFL        = 0x01000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_OTHER	Support/COFF.h	/^    IMAGE_SCN_LNK_OTHER              = 0x00000100,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_REMOVE	Support/COFF.h	/^    IMAGE_SCN_LNK_REMOVE             = 0x00000800,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_16BIT	Support/COFF.h	/^    IMAGE_SCN_MEM_16BIT              = 0x00020000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_DISCARDABLE	Support/COFF.h	/^    IMAGE_SCN_MEM_DISCARDABLE        = 0x02000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_EXECUTE	Support/COFF.h	/^    IMAGE_SCN_MEM_EXECUTE            = 0x20000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_LOCKED	Support/COFF.h	/^    IMAGE_SCN_MEM_LOCKED             = 0x00040000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_NOT_CACHED	Support/COFF.h	/^    IMAGE_SCN_MEM_NOT_CACHED         = 0x04000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_NOT_PAGED	Support/COFF.h	/^    IMAGE_SCN_MEM_NOT_PAGED          = 0x08000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_PRELOAD	Support/COFF.h	/^    IMAGE_SCN_MEM_PRELOAD            = 0x00080000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_PURGEABLE	Support/COFF.h	/^    IMAGE_SCN_MEM_PURGEABLE          = 0x00020000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_READ	Support/COFF.h	/^    IMAGE_SCN_MEM_READ               = 0x40000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_SHARED	Support/COFF.h	/^    IMAGE_SCN_MEM_SHARED             = 0x10000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_WRITE	Support/COFF.h	/^    IMAGE_SCN_MEM_WRITE              = 0x80000000$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_TYPE_NO_PAD	Support/COFF.h	/^    IMAGE_SCN_TYPE_NO_PAD            = 0x00000008,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SUBSYSTEM_EFI_APPLICATION	Support/COFF.h	/^    IMAGE_SUBSYSTEM_EFI_APPLICATION = 10, \/\/\/< An EFI application.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER	Support/COFF.h	/^    IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11, \/\/\/< An EFI driver with boot$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_EFI_ROM	Support/COFF.h	/^    IMAGE_SUBSYSTEM_EFI_ROM = 13, \/\/\/< An EFI ROM image.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER	Support/COFF.h	/^    IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12, \/\/\/< An EFI driver with run-time$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_NATIVE	Support/COFF.h	/^    IMAGE_SUBSYSTEM_NATIVE = 1, \/\/\/< Device drivers and native Windows processes$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_POSIX_CUI	Support/COFF.h	/^    IMAGE_SUBSYSTEM_POSIX_CUI = 7, \/\/\/< The POSIX character subsystem.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_UNKNOWN	Support/COFF.h	/^    IMAGE_SUBSYSTEM_UNKNOWN = 0, \/\/\/< An unknown subsystem.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_WINDOWS_CE_GUI	Support/COFF.h	/^    IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9, \/\/\/< Windows CE.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_WINDOWS_CUI	Support/COFF.h	/^    IMAGE_SUBSYSTEM_WINDOWS_CUI = 3, \/\/\/< The Windows character subsystem.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_WINDOWS_GUI	Support/COFF.h	/^    IMAGE_SUBSYSTEM_WINDOWS_GUI = 2, \/\/\/< The Windows GUI subsystem.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_XBOX	Support/COFF.h	/^    IMAGE_SUBSYSTEM_XBOX = 14 \/\/\/< XBOX.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SYM_ABSOLUTE	Support/COFF.h	/^    IMAGE_SYM_ABSOLUTE  = -1,$/;"	e	enum:llvm::COFF::SymbolSectionNumber
IMAGE_SYM_CLASS_ARGUMENT	Support/COFF.h	/^    IMAGE_SYM_CLASS_ARGUMENT         = 9,   \/\/\/< Function argument$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_AUTOMATIC	Support/COFF.h	/^    IMAGE_SYM_CLASS_AUTOMATIC        = 1,   \/\/\/< Stack variable$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_BIT_FIELD	Support/COFF.h	/^    IMAGE_SYM_CLASS_BIT_FIELD        = 18,  \/\/\/< Bit field$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_BLOCK	Support/COFF.h	/^    IMAGE_SYM_CLASS_BLOCK            = 100,$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_CLR_TOKEN	Support/COFF.h	/^    IMAGE_SYM_CLASS_CLR_TOKEN        = 107$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_END_OF_FUNCTION	Support/COFF.h	/^    IMAGE_SYM_CLASS_END_OF_FUNCTION  = -1,  \/\/\/< Physical end of function$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_END_OF_STRUCT	Support/COFF.h	/^    IMAGE_SYM_CLASS_END_OF_STRUCT    = 102, \/\/\/< End of structure$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_ENUM_TAG	Support/COFF.h	/^    IMAGE_SYM_CLASS_ENUM_TAG         = 15,  \/\/\/< Enumeration tag$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_EXTERNAL	Support/COFF.h	/^    IMAGE_SYM_CLASS_EXTERNAL         = 2,   \/\/\/< External symbol$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_EXTERNAL_DEF	Support/COFF.h	/^    IMAGE_SYM_CLASS_EXTERNAL_DEF     = 5,   \/\/\/< External definition$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_FILE	Support/COFF.h	/^    IMAGE_SYM_CLASS_FILE             = 103, \/\/\/< File name$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_FUNCTION	Support/COFF.h	/^    IMAGE_SYM_CLASS_FUNCTION         = 101,$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_LABEL	Support/COFF.h	/^    IMAGE_SYM_CLASS_LABEL            = 6,   \/\/\/< Label$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_MEMBER_OF_ENUM	Support/COFF.h	/^    IMAGE_SYM_CLASS_MEMBER_OF_ENUM   = 16,  \/\/\/< Member of enumeration$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_MEMBER_OF_STRUCT	Support/COFF.h	/^    IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8,   \/\/\/< Member of structure$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_MEMBER_OF_UNION	Support/COFF.h	/^    IMAGE_SYM_CLASS_MEMBER_OF_UNION  = 11,  \/\/\/< Member of union$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_NULL	Support/COFF.h	/^    IMAGE_SYM_CLASS_NULL             = 0,   \/\/\/< No symbol$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_REGISTER	Support/COFF.h	/^    IMAGE_SYM_CLASS_REGISTER         = 4,   \/\/\/< Register variable$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_REGISTER_PARAM	Support/COFF.h	/^    IMAGE_SYM_CLASS_REGISTER_PARAM   = 17,  \/\/\/< Register parameter$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_SECTION	Support/COFF.h	/^    IMAGE_SYM_CLASS_SECTION          = 104,$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_STATIC	Support/COFF.h	/^    IMAGE_SYM_CLASS_STATIC           = 3,   \/\/\/< Static$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_STRUCT_TAG	Support/COFF.h	/^    IMAGE_SYM_CLASS_STRUCT_TAG       = 10,  \/\/\/< Structure tag$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_TYPE_DEFINITION	Support/COFF.h	/^    IMAGE_SYM_CLASS_TYPE_DEFINITION  = 13,  \/\/\/< Type definition$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_UNDEFINED_LABEL	Support/COFF.h	/^    IMAGE_SYM_CLASS_UNDEFINED_LABEL  = 7,   \/\/\/< Undefined label$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_UNDEFINED_STATIC	Support/COFF.h	/^    IMAGE_SYM_CLASS_UNDEFINED_STATIC = 14,  \/\/\/< Undefined static$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_UNION_TAG	Support/COFF.h	/^    IMAGE_SYM_CLASS_UNION_TAG        = 12,  \/\/\/< Union tag$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_WEAK_EXTERNAL	Support/COFF.h	/^    IMAGE_SYM_CLASS_WEAK_EXTERNAL    = 105, \/\/\/< Duplicate tag$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_DEBUG	Support/COFF.h	/^    IMAGE_SYM_DEBUG     = -2,$/;"	e	enum:llvm::COFF::SymbolSectionNumber
IMAGE_SYM_DTYPE_ARRAY	Support/COFF.h	/^    IMAGE_SYM_DTYPE_ARRAY    = 3, \/\/\/< An array of base type.$/;"	e	enum:llvm::COFF::SymbolComplexType
IMAGE_SYM_DTYPE_FUNCTION	Support/COFF.h	/^    IMAGE_SYM_DTYPE_FUNCTION = 2, \/\/\/< A function that returns a base type.$/;"	e	enum:llvm::COFF::SymbolComplexType
IMAGE_SYM_DTYPE_NULL	Support/COFF.h	/^    IMAGE_SYM_DTYPE_NULL     = 0, \/\/\/< No complex type; simple scalar variable.$/;"	e	enum:llvm::COFF::SymbolComplexType
IMAGE_SYM_DTYPE_POINTER	Support/COFF.h	/^    IMAGE_SYM_DTYPE_POINTER  = 1, \/\/\/< A pointer to base type.$/;"	e	enum:llvm::COFF::SymbolComplexType
IMAGE_SYM_TYPE_BYTE	Support/COFF.h	/^    IMAGE_SYM_TYPE_BYTE   = 12, \/\/\/< A byte; unsigned 1-byte integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_CHAR	Support/COFF.h	/^    IMAGE_SYM_TYPE_CHAR   = 2,  \/\/\/< A character (signed byte).$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_DOUBLE	Support/COFF.h	/^    IMAGE_SYM_TYPE_DOUBLE = 7,  \/\/\/< An 8-byte floating-point number.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_DWORD	Support/COFF.h	/^    IMAGE_SYM_TYPE_DWORD  = 15  \/\/\/< An unsigned 4-byte integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_ENUM	Support/COFF.h	/^    IMAGE_SYM_TYPE_ENUM   = 10, \/\/\/< An enumerated type.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_FLOAT	Support/COFF.h	/^    IMAGE_SYM_TYPE_FLOAT  = 6,  \/\/\/< A 4-byte floating-point number.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_INT	Support/COFF.h	/^    IMAGE_SYM_TYPE_INT    = 4,  \/\/\/< A natural integer type on the target.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_LONG	Support/COFF.h	/^    IMAGE_SYM_TYPE_LONG   = 5,  \/\/\/< A 4-byte signed integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_MOE	Support/COFF.h	/^    IMAGE_SYM_TYPE_MOE    = 11, \/\/\/< A member of enumeration (a specific value).$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_NULL	Support/COFF.h	/^    IMAGE_SYM_TYPE_NULL   = 0,  \/\/\/< No type information or unknown base type.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_SHORT	Support/COFF.h	/^    IMAGE_SYM_TYPE_SHORT  = 3,  \/\/\/< A 2-byte signed integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_STRUCT	Support/COFF.h	/^    IMAGE_SYM_TYPE_STRUCT = 8,  \/\/\/< A structure.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_UINT	Support/COFF.h	/^    IMAGE_SYM_TYPE_UINT   = 14, \/\/\/< An unsigned integer of natural size.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_UNION	Support/COFF.h	/^    IMAGE_SYM_TYPE_UNION  = 9,  \/\/\/< An union.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_VOID	Support/COFF.h	/^    IMAGE_SYM_TYPE_VOID   = 1,  \/\/\/< Used with void pointers and functions.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_WORD	Support/COFF.h	/^    IMAGE_SYM_TYPE_WORD   = 13, \/\/\/< A word; unsigned 2-byte integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_UNDEFINED	Support/COFF.h	/^    IMAGE_SYM_UNDEFINED = 0$/;"	e	enum:llvm::COFF::SymbolSectionNumber
IMAGE_WEAK_EXTERN_SEARCH_ALIAS	Support/COFF.h	/^    IMAGE_WEAK_EXTERN_SEARCH_ALIAS     = 3$/;"	e	enum:llvm::COFF::WeakExternalCharacteristics
IMAGE_WEAK_EXTERN_SEARCH_LIBRARY	Support/COFF.h	/^    IMAGE_WEAK_EXTERN_SEARCH_LIBRARY   = 2,$/;"	e	enum:llvm::COFF::WeakExternalCharacteristics
IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY	Support/COFF.h	/^    IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1,$/;"	e	enum:llvm::COFF::WeakExternalCharacteristics
IMPLICIT_DEF	Target/TargetOpcodes.h	/^    IMPLICIT_DEF = 8,$/;"	e	enum:llvm::TargetOpcode::__anon139
IMPORT_CODE	Support/COFF.h	/^    IMPORT_CODE  = 0,$/;"	e	enum:llvm::COFF::ImportType
IMPORT_CONST	Support/COFF.h	/^    IMPORT_CONST = 2$/;"	e	enum:llvm::COFF::ImportType
IMPORT_DATA	Support/COFF.h	/^    IMPORT_DATA  = 1,$/;"	e	enum:llvm::COFF::ImportType
IMPORT_NAME	Support/COFF.h	/^    IMPORT_NAME            = 1,$/;"	e	enum:llvm::COFF::ImportNameType
IMPORT_NAME_NOPREFIX	Support/COFF.h	/^    IMPORT_NAME_NOPREFIX   = 2,$/;"	e	enum:llvm::COFF::ImportNameType
IMPORT_NAME_UNDECORATE	Support/COFF.h	/^    IMPORT_NAME_UNDECORATE = 3$/;"	e	enum:llvm::COFF::ImportNameType
IMPORT_ORDINAL	Support/COFF.h	/^    IMPORT_ORDINAL         = 0,$/;"	e	enum:llvm::COFF::ImportNameType
INITIALIZE_AG_DEPENDENCY	PassSupport.h	169;"	d
INITIALIZE_AG_PASS	PassSupport.h	268;"	d
INITIALIZE_AG_PASS_BEGIN	PassSupport.h	285;"	d
INITIALIZE_AG_PASS_END	PassSupport.h	289;"	d
INITIALIZE_ANALYSIS_GROUP	PassSupport.h	256;"	d
INITIALIZE_PASS	PassSupport.h	153;"	d
INITIALIZE_PASS_BEGIN	PassSupport.h	164;"	d
INITIALIZE_PASS_DEPENDENCY	PassSupport.h	167;"	d
INITIALIZE_PASS_END	PassSupport.h	172;"	d
INIT_TRAMPOLINE	CodeGen/ISDOpcodes.h	/^    INIT_TRAMPOLINE,$/;"	e	enum:llvm::ISD::NodeType
INLINEASM	CodeGen/ISDOpcodes.h	/^    INLINEASM,$/;"	e	enum:llvm::ISD::NodeType
INLINEASM	Target/TargetOpcodes.h	/^    INLINEASM = 1,$/;"	e	enum:llvm::TargetOpcode::__anon139
INSERT_SUBREG	Target/TargetOpcodes.h	/^    INSERT_SUBREG = 7,$/;"	e	enum:llvm::TargetOpcode::__anon139
INSERT_SUBVECTOR	CodeGen/ISDOpcodes.h	/^    INSERT_SUBVECTOR,$/;"	e	enum:llvm::ISD::NodeType
INSERT_VECTOR_ELT	CodeGen/ISDOpcodes.h	/^    INSERT_VECTOR_ELT,$/;"	e	enum:llvm::ISD::NodeType
INT64_MAX	Support/AIXDataTypesFix.h	24;"	d
INT64_MIN	Support/AIXDataTypesFix.h	25;"	d
INTEGER_ALIGN	DataLayout.h	/^  INTEGER_ALIGN = 'i',               \/\/\/< Integer type alignment$/;"	e	enum:llvm::AlignTypeEnum
INTERSECT_OPENED	Support/IntegersSubsetMapping.h	/^    INTERSECT_OPENED,$/;"	e	enum:llvm::IntegersSubsetMapping::DiffProcessState
INTRINSIC_VOID	CodeGen/ISDOpcodes.h	/^    INTRINSIC_VOID,$/;"	e	enum:llvm::ISD::NodeType
INTRINSIC_WO_CHAIN	CodeGen/ISDOpcodes.h	/^    INTRINSIC_WO_CHAIN,$/;"	e	enum:llvm::ISD::NodeType
INTRINSIC_W_CHAIN	CodeGen/ISDOpcodes.h	/^    INTRINSIC_W_CHAIN,$/;"	e	enum:llvm::ISD::NodeType
INT_ITEM_DEFINE_ASSIGNMENT_BY_OP	Support/IntegersSubset.h	60;"	d
INT_ITEM_DEFINE_BINARY_OP	Support/IntegersSubset.h	53;"	d
INT_ITEM_DEFINE_COMPARISON	Support/IntegersSubset.h	41;"	d
INT_ITEM_DEFINE_OP_STANDARD_INT	Support/IntegersSubset.h	88;"	d
INT_ITEM_DEFINE_POSTINCDEC	Support/IntegersSubset.h	78;"	d
INT_ITEM_DEFINE_PREINCDEC	Support/IntegersSubset.h	69;"	d
INT_ITEM_DEFINE_UNARY_OP	Support/IntegersSubset.h	46;"	d
INVALID_SIMPLE_VALUE_TYPE	CodeGen/ValueTypes.h	/^      INVALID_SIMPLE_VALUE_TYPE = LastSimpleValueType + 1$/;"	e	enum:llvm::MVT::SimpleValueType
IOS	ADT/Triple.h	/^    IOS,$/;"	e	enum:llvm::Triple::OSType
IOwnMem	Analysis/IntervalIterator.h	/^  bool IOwnMem;     \/\/ If True, delete intervals when done with them$/;"	m	class:llvm::IntervalIterator
IRBuilder	IRBuilder.h	/^  IRBuilder(BasicBlock *TheBB, BasicBlock::iterator IP, MDNode *FPMathTag = 0)$/;"	f	class:llvm::IRBuilder
IRBuilder	IRBuilder.h	/^  IRBuilder(BasicBlock *TheBB, BasicBlock::iterator IP, const T& F,$/;"	f	class:llvm::IRBuilder
IRBuilder	IRBuilder.h	/^  IRBuilder(LLVMContext &C, const T &F, const Inserter &I = Inserter(),$/;"	f	class:llvm::IRBuilder
IRBuilder	IRBuilder.h	/^  explicit IRBuilder(BasicBlock *TheBB, MDNode *FPMathTag = 0)$/;"	f	class:llvm::IRBuilder
IRBuilder	IRBuilder.h	/^  explicit IRBuilder(BasicBlock *TheBB, const T &F, MDNode *FPMathTag = 0)$/;"	f	class:llvm::IRBuilder
IRBuilder	IRBuilder.h	/^  explicit IRBuilder(Instruction *IP, MDNode *FPMathTag = 0)$/;"	f	class:llvm::IRBuilder
IRBuilder	IRBuilder.h	/^  explicit IRBuilder(LLVMContext &C, MDNode *FPMathTag = 0) : IRBuilderBase(C),$/;"	f	class:llvm::IRBuilder
IRBuilder	IRBuilder.h	/^  explicit IRBuilder(Use &U, MDNode *FPMathTag = 0)$/;"	f	class:llvm::IRBuilder
IRBuilder	IRBuilder.h	/^class IRBuilder : public IRBuilderBase, public Inserter {$/;"	c	namespace:llvm
IRBuilderBase	IRBuilder.h	/^  IRBuilderBase(LLVMContext &context)$/;"	f	class:llvm::IRBuilderBase
IRBuilderBase	IRBuilder.h	/^class IRBuilderBase {$/;"	c	namespace:llvm
IRBuilderDefaultInserter	IRBuilder.h	/^class IRBuilderDefaultInserter {$/;"	c	namespace:llvm
ISD	CodeGen/ISDOpcodes.h	/^namespace ISD {$/;"	n	namespace:llvm
ISD	CodeGen/SelectionDAGNodes.h	/^namespace ISD {$/;"	n	namespace:llvm
ISD	Target/TargetCallingConv.h	/^namespace ISD {$/;"	n	namespace:llvm
ISF_Absolute	Object/MachOFormat.h	/^    ISF_Absolute = 0x40000000$/;"	e	enum:llvm::object::macho::IndirectSymbolFlags
ISF_Local	Object/MachOFormat.h	/^    ISF_Local    = 0x80000000,$/;"	e	enum:llvm::object::macho::IndirectSymbolFlags
IVIncInsertLoop	Analysis/ScalarEvolutionExpander.h	/^    const Loop *IVIncInsertLoop;$/;"	m	class:llvm::SCEVExpander
IVIncInsertPos	Analysis/ScalarEvolutionExpander.h	/^    Instruction *IVIncInsertPos;$/;"	m	class:llvm::SCEVExpander
IVName	Analysis/ScalarEvolutionExpander.h	/^    const char* IVName;$/;"	m	class:llvm::SCEVExpander
IVStrideUse	Analysis/IVUsers.h	/^  IVStrideUse(IVUsers *P, Instruction* U, Value *O)$/;"	f	class:llvm::IVStrideUse
IVStrideUse	Analysis/IVUsers.h	/^class IVStrideUse : public CallbackVH, public ilist_node<IVStrideUse> {$/;"	c	namespace:llvm
IVUsers	Analysis/IVUsers.h	/^class IVUsers : public LoopPass {$/;"	c	namespace:llvm
IVUses	Analysis/IVUsers.h	/^  ilist<IVStrideUse> IVUses;$/;"	m	class:llvm::IVUsers
IVVisitor	Transforms/Utils/SimplifyIndVar.h	/^class IVVisitor {$/;"	c	namespace:llvm
Ident	Support/GCOV.h	/^  uint32_t Ident;$/;"	m	class:llvm::GCOVFunction
Identifier	MC/MCParser/MCAsmLexer.h	/^    Identifier,$/;"	e	enum:llvm::AsmToken::TokenKind
Idx	ADT/PackedVector.h	/^    const unsigned Idx;$/;"	m	class:llvm::PackedVector::reference
Idx	Target/TargetRegisterInfo.h	/^  const uint16_t *Idx;$/;"	m	class:llvm::SuperRegClassIterator
Idx2MBBCompare	CodeGen/SlotIndexes.h	/^  struct Idx2MBBCompare {$/;"	s	namespace:llvm
IdxMBBPair	CodeGen/SlotIndexes.h	/^  typedef std::pair<SlotIndex, MachineBasicBlock*> IdxMBBPair;$/;"	t	namespace:llvm
IdxPair	ADT/IntervalMap.h	/^  typedef IntervalMapImpl::IdxPair IdxPair;$/;"	t	class:llvm::IntervalMap
IdxPair	ADT/IntervalMap.h	/^  typedef IntervalMapImpl::IdxPair IdxPair;$/;"	t	class:llvm::IntervalMap::iterator
IdxPair	ADT/IntervalMap.h	/^typedef std::pair<unsigned,unsigned> IdxPair;$/;"	t	namespace:llvm::IntervalMapImpl
IfCond	MC/MCParser/AsmCond.h	/^    IfCond,     \/\/ inside if conditional$/;"	e	enum:llvm::AsmCond::ConditionalAssemblyType
Ignore	MC/MCParser/AsmCond.h	/^  bool Ignore;$/;"	m	class:llvm::AsmCond
IgnoreBlockInfoNames	Bitcode/BitstreamReader.h	/^  bool IgnoreBlockInfoNames;$/;"	m	class:llvm::BitstreamReader
IgnoreBundle	CodeGen/MachineInstr.h	/^    IgnoreBundle,    \/\/ Ignore bundles$/;"	e	enum:llvm::MachineInstr::QueryType
IgnoreCase	Support/Regex.h	/^      IgnoreCase=1,$/;"	e	enum:llvm::Regex::__anon128
IgnoreDefs	CodeGen/MachineInstr.h	/^    IgnoreDefs,     \/\/ Ignore all definitions$/;"	e	enum:llvm::MachineInstr::MICheckType
IgnoreProfitability	Transforms/Utils/AddrModeMatcher.h	/^  bool IgnoreProfitability;$/;"	m	class:llvm::AddressingModeMatcher
IgnoreVRegDefs	CodeGen/MachineInstr.h	/^    IgnoreVRegDefs  \/\/ Ignore virtual register definitions$/;"	e	enum:llvm::MachineInstr::MICheckType
ImageBase	Support/COFF.h	/^    uint64_t ImageBase;$/;"	m	struct:llvm::COFF::PEHeader
ImmVal	CodeGen/MachineOperand.h	/^    int64_t ImmVal;           \/\/ For MO_Immediate.$/;"	m	union:llvm::MachineOperand::__anon36
ImmVal	MC/MCInst.h	/^    int64_t ImmVal;$/;"	m	union:llvm::MCOperand::__anon67
ImmutableCallSite	Support/CallSite.h	/^  ImmutableCallSite(CallSite CS) : Base(CS.getInstruction()) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	Support/CallSite.h	/^  ImmutableCallSite(const CallInst *CI) : Base(CI) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	Support/CallSite.h	/^  ImmutableCallSite(const Instruction *II) : Base(II) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	Support/CallSite.h	/^  ImmutableCallSite(const InvokeInst *II) : Base(II) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	Support/CallSite.h	/^  ImmutableCallSite(const Value* V) : Base(V) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	Support/CallSite.h	/^class ImmutableCallSite : public CallSiteBase<> {$/;"	c	namespace:llvm
ImmutableIntervalMap	ADT/ImmutableIntervalMap.h	/^  explicit ImmutableIntervalMap(TreeTy *R) $/;"	f	class:llvm::ImmutableIntervalMap
ImmutableIntervalMap	ADT/ImmutableIntervalMap.h	/^class ImmutableIntervalMap $/;"	c	namespace:llvm
ImmutableList	ADT/ImmutableList.h	/^  ImmutableList(const ImmutableListImpl<T>* x = 0) : X(x) {}$/;"	f	class:llvm::ImmutableList
ImmutableList	ADT/ImmutableList.h	/^class ImmutableList {$/;"	c	namespace:llvm
ImmutableListFactory	ADT/ImmutableList.h	/^  ImmutableListFactory()$/;"	f	class:llvm::ImmutableListFactory
ImmutableListFactory	ADT/ImmutableList.h	/^  ImmutableListFactory(BumpPtrAllocator& Alloc)$/;"	f	class:llvm::ImmutableListFactory
ImmutableListFactory	ADT/ImmutableList.h	/^class ImmutableListFactory {$/;"	c	namespace:llvm
ImmutableListImpl	ADT/ImmutableList.h	/^  ImmutableListImpl(const T& head, const ImmutableListImpl* tail = 0)$/;"	f	class:llvm::ImmutableListImpl
ImmutableListImpl	ADT/ImmutableList.h	/^class ImmutableListImpl : public FoldingSetNode {$/;"	c	namespace:llvm
ImmutableMap	ADT/ImmutableMap.h	/^  ImmutableMap(const ImmutableMap &X) : Root(X.Root) {$/;"	f	class:llvm::ImmutableMap
ImmutableMap	ADT/ImmutableMap.h	/^  explicit ImmutableMap(const TreeTy* R) : Root(const_cast<TreeTy*>(R)) {$/;"	f	class:llvm::ImmutableMap
ImmutableMap	ADT/ImmutableMap.h	/^class ImmutableMap {$/;"	c	namespace:llvm
ImmutableMapRef	ADT/ImmutableMap.h	/^  ImmutableMapRef(const ImmutableMapRef &X)$/;"	f	class:llvm::ImmutableMapRef
ImmutableMapRef	ADT/ImmutableMap.h	/^  explicit ImmutableMapRef(const TreeTy* R, FactoryTy *F) $/;"	f	class:llvm::ImmutableMapRef
ImmutableMapRef	ADT/ImmutableMap.h	/^class ImmutableMapRef {$/;"	c	namespace:llvm
ImmutablePass	Pass.h	/^  explicit ImmutablePass(char &pid)$/;"	f	class:llvm::ImmutablePass
ImmutablePass	Pass.h	/^class ImmutablePass : public ModulePass {$/;"	c	namespace:llvm
ImmutablePasses	PassManagers.h	/^  SmallVector<ImmutablePass *, 8> ImmutablePasses;$/;"	m	class:llvm::PMTopLevelManager
ImmutableSet	ADT/ImmutableSet.h	/^  ImmutableSet(const ImmutableSet &X) : Root(X.Root) {$/;"	f	class:llvm::ImmutableSet
ImmutableSet	ADT/ImmutableSet.h	/^  explicit ImmutableSet(TreeTy* R) : Root(R) {$/;"	f	class:llvm::ImmutableSet
ImmutableSet	ADT/ImmutableSet.h	/^class ImmutableSet {$/;"	c	namespace:llvm
ImmutableSetRef	ADT/ImmutableSet.h	/^  ImmutableSetRef(const ImmutableSetRef &X)$/;"	f	class:llvm::ImmutableSetRef
ImmutableSetRef	ADT/ImmutableSet.h	/^  explicit ImmutableSetRef(TreeTy* R, FactoryTy *F)$/;"	f	class:llvm::ImmutableSetRef
ImmutableSetRef	ADT/ImmutableSet.h	/^class ImmutableSetRef {$/;"	c	namespace:llvm
Impl	Analysis/LibCallSemantics.h	/^    mutable void *Impl;$/;"	m	class:llvm::LibCallInfo
Impl	CodeGen/Passes.h	/^  PassConfigImpl *Impl; \/\/ Internal data structures$/;"	m	class:llvm::TargetPassConfig
Impl	Support/CrashRecoveryContext.h	/^  void *Impl;$/;"	m	class:llvm::CrashRecoveryContext
Impl	Transforms/Utils/SimplifyLibCalls.h	/^    LibCallSimplifierImpl *Impl;$/;"	m	class:llvm::LibCallSimplifier
Implicit	CodeGen/MachineInstrBuilder.h	/^    Implicit       = 0x4,$/;"	e	enum:llvm::RegState::__anon32
ImplicitDefine	CodeGen/MachineInstrBuilder.h	/^    ImplicitDefine = Implicit | Define,$/;"	e	enum:llvm::RegState::__anon32
ImplicitDefs	MC/MCInstrDesc.h	/^  const uint16_t *ImplicitDefs;  \/\/ Registers implicitly defined by this instr$/;"	m	class:llvm::MCInstrDesc
ImplicitKill	CodeGen/MachineInstrBuilder.h	/^    ImplicitKill   = Implicit | Kill$/;"	e	enum:llvm::RegState::__anon32
ImplicitUses	MC/MCInstrDesc.h	/^  const uint16_t *ImplicitUses;  \/\/ Registers implicitly read by this instr$/;"	m	class:llvm::MCInstrDesc
Implies	MC/SubtargetFeature.h	/^  uint64_t Implies;                     \/\/ K-V bit mask$/;"	m	struct:llvm::SubtargetFeatureKV
ImportAddressTableRVA	Support/COFF.h	/^    uint32_t ImportAddressTableRVA;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
ImportDirectoryTableEntry	Support/COFF.h	/^  struct ImportDirectoryTableEntry {$/;"	s	namespace:llvm::COFF
ImportHeader	Support/COFF.h	/^  struct ImportHeader {$/;"	s	namespace:llvm::COFF
ImportLookupTableEntry32	Support/COFF.h	/^  struct ImportLookupTableEntry32 {$/;"	s	namespace:llvm::COFF
ImportLookupTableRVA	Support/COFF.h	/^    uint32_t ImportLookupTableRVA;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
ImportNameType	Support/COFF.h	/^  enum ImportNameType {$/;"	g	namespace:llvm::COFF
ImportType	Support/COFF.h	/^  enum ImportType {$/;"	g	namespace:llvm::COFF
ImutAVLFactory	ADT/ImmutableSet.h	/^  ImutAVLFactory()$/;"	f	class:llvm::ImutAVLFactory
ImutAVLFactory	ADT/ImmutableSet.h	/^  ImutAVLFactory(BumpPtrAllocator& Alloc)$/;"	f	class:llvm::ImutAVLFactory
ImutAVLFactory	ADT/ImmutableSet.h	/^class ImutAVLFactory {$/;"	c	namespace:llvm
ImutAVLTree	ADT/ImmutableSet.h	/^  ImutAVLTree(Factory *f, ImutAVLTree* l, ImutAVLTree* r, value_type_ref v,$/;"	f	class:llvm::ImutAVLTree
ImutAVLTree	ADT/ImmutableSet.h	/^class ImutAVLTree {$/;"	c	namespace:llvm
ImutAVLTreeGenericIterator	ADT/ImmutableSet.h	/^  inline ImutAVLTreeGenericIterator() {}$/;"	f	class:llvm::ImutAVLTreeGenericIterator
ImutAVLTreeGenericIterator	ADT/ImmutableSet.h	/^  inline ImutAVLTreeGenericIterator(const TreeTy* Root) {$/;"	f	class:llvm::ImutAVLTreeGenericIterator
ImutAVLTreeGenericIterator	ADT/ImmutableSet.h	/^class ImutAVLTreeGenericIterator {$/;"	c	namespace:llvm
ImutAVLTreeInOrderIterator	ADT/ImmutableSet.h	/^  ImutAVLTreeInOrderIterator() : InternalItr() {}$/;"	f	class:llvm::ImutAVLTreeInOrderIterator
ImutAVLTreeInOrderIterator	ADT/ImmutableSet.h	/^  ImutAVLTreeInOrderIterator(const TreeTy* Root) : InternalItr(Root) {$/;"	f	class:llvm::ImutAVLTreeInOrderIterator
ImutAVLTreeInOrderIterator	ADT/ImmutableSet.h	/^class ImutAVLTreeInOrderIterator {$/;"	c	namespace:llvm
ImutContainerInfo	ADT/ImmutableSet.h	/^struct ImutContainerInfo : public ImutProfileInfo<T> {$/;"	s	namespace:llvm
ImutContainerInfo	ADT/ImmutableSet.h	/^struct ImutContainerInfo<T*> : public ImutProfileInfo<T*> {$/;"	s	namespace:llvm
ImutIntervalAVLFactory	ADT/ImmutableIntervalMap.h	/^  ImutIntervalAVLFactory(BumpPtrAllocator &Alloc) $/;"	f	class:llvm::ImutIntervalAVLFactory
ImutIntervalAVLFactory	ADT/ImmutableIntervalMap.h	/^class ImutIntervalAVLFactory : public ImutAVLFactory<ImutInfo> {$/;"	c	namespace:llvm
ImutIntervalInfo	ADT/ImmutableIntervalMap.h	/^struct ImutIntervalInfo {$/;"	s	namespace:llvm
ImutKeyValueInfo	ADT/ImmutableMap.h	/^struct ImutKeyValueInfo {$/;"	s	namespace:llvm
ImutProfileInfo	ADT/ImmutableSet.h	/^struct ImutProfileInfo {$/;"	s	namespace:llvm
ImutProfileInfo	ADT/ImmutableSet.h	/^struct ImutProfileInfo<T*> {$/;"	s	namespace:llvm
ImutProfileInteger	ADT/ImmutableSet.h	/^struct ImutProfileInteger {$/;"	s	namespace:llvm
InMemoryStruct	ADT/InMemoryStruct.h	/^  InMemoryStruct() : Target(0) {}$/;"	f	class:llvm::InMemoryStruct
InMemoryStruct	ADT/InMemoryStruct.h	/^  InMemoryStruct(const InMemoryStruct<T> &Value) { *this = Value; }$/;"	f	class:llvm::InMemoryStruct
InMemoryStruct	ADT/InMemoryStruct.h	/^  InMemoryStruct(pointer Value) : Target(Value) {}$/;"	f	class:llvm::InMemoryStruct
InMemoryStruct	ADT/InMemoryStruct.h	/^  InMemoryStruct(reference Value) : Target(&Contents), Contents(Value) {}$/;"	f	class:llvm::InMemoryStruct
InMemoryStruct	ADT/InMemoryStruct.h	/^class InMemoryStruct {$/;"	c	namespace:llvm
InReg	Attributes.h	/^    InReg           = 6,   \/\/\/< Force argument to be passed in register$/;"	e	enum:llvm::Attributes::AttrVal
InReg	Target/TargetCallingConv.h	/^    static const uint64_t InReg          = 1ULL<<2;  \/\/\/< Passed in register$/;"	m	struct:llvm::ISD::ArgFlagsTy
InRegOffs	Target/TargetCallingConv.h	/^    static const uint64_t InRegOffs      = 2;$/;"	m	struct:llvm::ISD::ArgFlagsTy
IncludeDirectories	Support/SourceMgr.h	/^  std::vector<std::string> IncludeDirectories;$/;"	m	class:llvm::SourceMgr
IncludeFile	Support/IncludeFile.h	/^struct IncludeFile {$/;"	s	namespace:llvm
IncludeLoc	Support/SourceMgr.h	/^    SMLoc IncludeLoc;$/;"	m	struct:llvm::SourceMgr::SrcBuffer
IndentLevel	CodeGen/LexicalScopes.h	/^  mutable unsigned IndentLevel;       \/\/ Private state for dump()$/;"	m	class:llvm::LexicalScope
Independent	Analysis/LoopDependenceAnalysis.h	/^  enum DependenceResult { Independent = 0, Dependent = 1, Unknown = 2 };$/;"	e	enum:llvm::LoopDependenceAnalysis::DependenceResult
Index	Attributes.h	/^  unsigned Index;    \/\/\/< Index of the parameter for which the attributes apply.$/;"	m	struct:llvm::AttributeWithIndex
Index	CodeGen/MachineOperand.h	/^        int Index;                \/\/ For MO_*Index - The index itself.$/;"	m	union:llvm::MachineOperand::__anon36::__anon38::__anon39
Index	CodeGen/MachineRelocation.h	/^    unsigned Index;         \/\/ Constant pool \/ jump table index$/;"	m	union:llvm::MachineRelocation::__anon48
Index	CodeGen/SelectionDAGNodes.h	/^  int Index;$/;"	m	class:llvm::TargetIndexSDNode
Index	Instructions.h	/^    unsigned long Index;$/;"	m	class:llvm::SwitchInst::CaseIteratorT
Index	MC/MCAssembler.h	/^  uint64_t Index;$/;"	m	class:llvm::MCSymbolData
Index	MC/MCELFObjectWriter.h	/^  int Index;$/;"	m	struct:llvm::ELFRelocationEntry
Index	Object/MachOFormat.h	/^    uint32_t Index;$/;"	m	struct:llvm::object::macho::IndirectSymbolTableEntry
Index2Node	CodeGen/ScheduleDAG.h	/^    std::vector<int> Index2Node;$/;"	m	class:llvm::ScheduleDAGTopologicalSort
IndexList	CodeGen/SlotIndexes.h	/^    typedef ilist<IndexListEntry> IndexList;$/;"	t	class:llvm::SlotIndexes
IndexListEntry	CodeGen/SlotIndexes.h	/^    IndexListEntry(MachineInstr *mi, unsigned index) : mi(mi), index(index) {}$/;"	f	class:llvm::IndexListEntry
IndexListEntry	CodeGen/SlotIndexes.h	/^  class IndexListEntry : public ilist_node<IndexListEntry> {$/;"	c	namespace:llvm
IndexMap_t	Object/ELF.h	/^  typedef DenseMap<unsigned, unsigned> IndexMap_t;$/;"	t	class:llvm::object::ELFObjectFile
IndexT	ADT/IndexedMap.h	/^    typedef typename ToIndexT::argument_type IndexT;$/;"	t	class:llvm::IndexedMap
IndexedMap	ADT/IndexedMap.h	/^    IndexedMap() : nullVal_(T()) { }$/;"	f	class:llvm::IndexedMap
IndexedMap	ADT/IndexedMap.h	/^    explicit IndexedMap(const T& val) : nullVal_(val) { }$/;"	f	class:llvm::IndexedMap
IndexedMap	ADT/IndexedMap.h	/^  class IndexedMap {$/;"	c	namespace:llvm
IndexedModeActions	Target/TargetLowering.h	/^  uint8_t IndexedModeActions[MVT::LAST_VALUETYPE][ISD::LAST_INDEXED_MODE];$/;"	m	class:llvm::TargetLowering
Indexes	CodeGen/LiveIntervalAnalysis.h	/^    SlotIndexes* Indexes;$/;"	m	class:llvm::LiveIntervals
Indexes	CodeGen/MachineLoopRanges.h	/^  SlotIndexes *Indexes;$/;"	m	class:llvm::MachineLoopRanges
Indices	Instructions.h	/^  SmallVector<unsigned, 4> Indices;$/;"	m	class:llvm::ExtractValueInst
Indices	Instructions.h	/^  SmallVector<unsigned, 4> Indices;$/;"	m	class:llvm::InsertValueInst
Indirect	CodeGen/CallingConvLower.h	/^    Indirect \/\/ The location contains pointer to the value.$/;"	e	enum:llvm::CCValAssign::LocInfo
IndirectBrInst	Instructions.h	/^class IndirectBrInst : public TerminatorInst {$/;"	c	namespace:llvm
IndirectBranch	MC/MCInstrDesc.h	/^    IndirectBranch,$/;"	e	enum:llvm::MCID::__anon69
IndirectCallThreshold	Analysis/InlineCost.h	/^    const int IndirectCallThreshold = 100;$/;"	m	namespace:llvm::InlineConstants
IndirectPassManagers	PassManagers.h	/^  SmallVector<PMDataManager *, 8> IndirectPassManagers;$/;"	m	class:llvm::PMTopLevelManager
IndirectSymBase	MC/MCMachObjectWriter.h	/^  llvm::DenseMap<const MCSectionData*, unsigned> IndirectSymBase;$/;"	m	class:llvm::MachObjectWriter
IndirectSymbolAbsolute	Support/MachO.h	/^      IndirectSymbolAbsolute                = 0x40000000u, \/\/ INDIRECT_SYMBOL_ABS$/;"	e	enum:llvm::MachO::__anon126
IndirectSymbolData	MC/MCAssembler.h	/^struct IndirectSymbolData {$/;"	s	namespace:llvm
IndirectSymbolFlags	Object/MachOFormat.h	/^  enum IndirectSymbolFlags {$/;"	g	namespace:llvm::object::macho
IndirectSymbolLocal	Support/MachO.h	/^      IndirectSymbolLocal                   = 0x80000000u, \/\/ INDIRECT_SYMBOL_LOCAL$/;"	e	enum:llvm::MachO::__anon126
IndirectSymbolTableEntry	Object/MachOFormat.h	/^  struct IndirectSymbolTableEntry {$/;"	s	namespace:llvm::object::macho
IndirectSymbolTableOffset	Object/MachOFormat.h	/^    uint32_t IndirectSymbolTableOffset;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
IndirectSymbols	MC/MCAssembler.h	/^  std::vector<IndirectSymbolData> IndirectSymbols;$/;"	m	class:llvm::MCAssembler
Info	Analysis/Dominators.h	/^  DenseMap<NodeT*, InfoRec> Info;$/;"	m	class:llvm::DominatorTreeBase
Info	MC/MCInstrAnalysis.h	/^  const MCInstrInfo *Info;$/;"	m	class:llvm::MCInstrAnalysis
InfoDesc	Target/TargetRegisterInfo.h	/^  const TargetRegisterInfoDesc *InfoDesc;     \/\/ Extra desc array for codegen$/;"	m	class:llvm::TargetRegisterInfo
InfoRec	Analysis/Dominators.h	/^    InfoRec() : DFSNum(0), Parent(0), Semi(0), Label(0) {}$/;"	f	struct:llvm::DominatorTreeBase::InfoRec
InfoRec	Analysis/Dominators.h	/^  struct InfoRec {$/;"	s	class:llvm::DominatorTreeBase
InheritedAnalysis	PassManagers.h	/^  std::map<AnalysisID, Pass *> *InheritedAnalysis[PMT_Last];$/;"	m	class:llvm::PMDataManager
Init	Support/CommandLine.h	/^  const Ty &Init;$/;"	m	struct:llvm::cl::initializer
Init	TableGen/Record.h	/^  explicit Init(InitKind K) : Kind(K) {}$/;"	f	class:llvm::Init
Init	TableGen/Record.h	/^class Init {$/;"	c	namespace:llvm
InitAtomic	CodeGen/SelectionDAGNodes.h	/^  void InitAtomic(AtomicOrdering Ordering, SynchronizationScope SynchScope) {$/;"	f	class:llvm::AtomicSDNode
InitEngine	ExecutionEngine/ExecutionEngine.h	/^  void InitEngine() {$/;"	f	class:llvm::EngineBuilder
InitKind	TableGen/Record.h	/^  enum InitKind {$/;"	g	class:llvm::Init
InitMCInstrInfo	MC/MCInstrInfo.h	/^  void InitMCInstrInfo(const MCInstrDesc *D, const unsigned *NI, const char *ND,$/;"	f	class:llvm::MCInstrInfo
InitMCRegisterInfo	MC/MCRegisterInfo.h	/^  void InitMCRegisterInfo(const MCRegisterDesc *D, unsigned NR, unsigned RA,$/;"	f	class:llvm::MCRegisterInfo
InitOperands	CodeGen/SelectionDAGNodes.h	/^  void InitOperands(SDUse *Ops, const SDValue &Op0) {$/;"	f	class:llvm::SDNode
InitOperands	CodeGen/SelectionDAGNodes.h	/^  void InitOperands(SDUse *Ops, const SDValue &Op0, const SDValue &Op1) {$/;"	f	class:llvm::SDNode
InitOperands	CodeGen/SelectionDAGNodes.h	/^  void InitOperands(SDUse *Ops, const SDValue &Op0, const SDValue &Op1,$/;"	f	class:llvm::SDNode
InitOperands	CodeGen/SelectionDAGNodes.h	/^  void InitOperands(SDUse *Ops, const SDValue *Vals, unsigned N) {$/;"	f	class:llvm::SDNode
InitRoots	CodeGen/GCStrategy.h	/^    bool InitRoots;            \/\/\/< If set, roots are nulled during lowering.$/;"	m	class:llvm::GCStrategy
InitialExec	Support/CodeGen.h	/^      InitialExec,$/;"	e	enum:llvm::TLSModel::Model
InitialExecTLSModel	GlobalVariable.h	/^    InitialExecTLSModel,$/;"	e	enum:llvm::GlobalVariable::ThreadLocalMode
InitialFrameState	MC/MCAsmInfo.h	/^    std::vector<MachineMove> InitialFrameState;$/;"	m	class:llvm::MCAsmInfo
InitialIP	Support/COFF.h	/^    uint16_t InitialIP;$/;"	m	struct:llvm::COFF::DOSHeader
InitialRelativeCS	Support/COFF.h	/^    uint16_t InitialRelativeCS;$/;"	m	struct:llvm::COFF::DOSHeader
InitialRelativeSS	Support/COFF.h	/^    uint16_t InitialRelativeSS;$/;"	m	struct:llvm::COFF::DOSHeader
InitialSP	Support/COFF.h	/^    uint16_t InitialSP;$/;"	m	struct:llvm::COFF::DOSHeader
InitialVMProtection	Object/MachOFormat.h	/^    uint32_t InitialVMProtection;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
InitialVMProtection	Object/MachOFormat.h	/^    uint32_t InitialVMProtection;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
Initialize	ADT/PostOrderIterator.h	/^  inline void Initialize(NodeType *BB) {$/;"	f	class:llvm::ReversePostOrderTraversal
Initialize	ADT/StringMap.h	/^  static void Initialize(StringMapEntry<ValueTy> &T, InitTy InitVal) {$/;"	f	class:llvm::StringMapEntryInitializer
InitializeAllAsmParsers	Support/TargetSelect.h	/^  inline void InitializeAllAsmParsers() {$/;"	f	namespace:llvm
InitializeAllAsmPrinters	Support/TargetSelect.h	/^  inline void InitializeAllAsmPrinters() {$/;"	f	namespace:llvm
InitializeAllDisassemblers	Support/TargetSelect.h	/^  inline void InitializeAllDisassemblers() {$/;"	f	namespace:llvm
InitializeAllTargetInfos	Support/TargetSelect.h	/^  inline void InitializeAllTargetInfos() {$/;"	f	namespace:llvm
InitializeAllTargetMCs	Support/TargetSelect.h	/^  inline void InitializeAllTargetMCs() {$/;"	f	namespace:llvm
InitializeAllTargets	Support/TargetSelect.h	/^  inline void InitializeAllTargets() {$/;"	f	namespace:llvm
InitializeNativeTarget	Support/TargetSelect.h	/^  inline bool InitializeNativeTarget() {$/;"	f	namespace:llvm
InitializeNativeTargetAsmParser	Support/TargetSelect.h	/^  inline bool InitializeNativeTargetAsmParser() {$/;"	f	namespace:llvm
InitializeNativeTargetAsmPrinter	Support/TargetSelect.h	/^  inline bool InitializeNativeTargetAsmPrinter() {$/;"	f	namespace:llvm
InitializeNativeTargetDisassembler	Support/TargetSelect.h	/^  inline bool InitializeNativeTargetDisassembler() {$/;"	f	namespace:llvm
InitializeRegForValue	CodeGen/FunctionLoweringInfo.h	/^  unsigned InitializeRegForValue(const Value *V) {$/;"	f	class:llvm::FunctionLoweringInfo
Initialized	ADT/Statistic.h	/^  bool Initialized;$/;"	m	class:llvm::Statistic
Initialized	CodeGen/Passes.h	/^  bool Initialized;     \/\/ Flagged after all passes are configured.$/;"	m	class:llvm::TargetPassConfig
Initialized	ExecutionEngine/OProfileWrapper.h	/^  bool Initialized;$/;"	m	class:llvm::OProfileWrapper
InlineAsm	InlineAsm.h	/^class InlineAsm : public Value {$/;"	c	namespace:llvm
InlineAsmDiagHandlerTy	LLVMContext.h	/^  typedef void (*InlineAsmDiagHandlerTy)(const SMDiagnostic&, void *Context,$/;"	t	class:llvm::LLVMContext
InlineAsmEnd	MC/MCAsmInfo.h	/^    const char *InlineAsmEnd;                \/\/ Defaults to "#NO_APP\\n"$/;"	m	class:llvm::MCAsmInfo
InlineAsmStart	MC/MCAsmInfo.h	/^    const char *InlineAsmStart;              \/\/ Defaults to "#APP\\n"$/;"	m	class:llvm::MCAsmInfo
InlineAsmVal	Value.h	/^    InlineAsmVal,             \/\/ This is an instance of InlineAsm$/;"	e	enum:llvm::Value::ValueTy
InlineConstants	Analysis/InlineCost.h	/^  namespace InlineConstants {$/;"	n	namespace:llvm
InlineCost	Analysis/InlineCost.h	/^    InlineCost(int Cost, int Threshold)$/;"	f	class:llvm::InlineCost
InlineCost	Analysis/InlineCost.h	/^  class InlineCost {$/;"	c	namespace:llvm
InlineCostAnalyzer	Analysis/InlineCost.h	/^    InlineCostAnalyzer(): TD(0) {}$/;"	f	class:llvm::InlineCostAnalyzer
InlineCostAnalyzer	Analysis/InlineCost.h	/^  class InlineCostAnalyzer {$/;"	c	namespace:llvm
InlineElts	ADT/SmallVector.h	/^  typename SmallVectorTemplateCommon<T>::U InlineElts[N - 1];$/;"	m	struct:llvm::SmallVectorStorage
InlineFunctionInfo	Transforms/Utils/Cloning.h	/^  explicit InlineFunctionInfo(CallGraph *cg = 0, const DataLayout *td = 0)$/;"	f	class:llvm::InlineFunctionInfo
InlineFunctionInfo	Transforms/Utils/Cloning.h	/^class InlineFunctionInfo {$/;"	c	namespace:llvm
InlineHint	Attributes.h	/^    InlineHint      = 5,   \/\/\/< Source said inlining was desirable$/;"	e	enum:llvm::Attributes::AttrVal
InlineThreshold	Transforms/IPO/InlinerPass.h	/^  unsigned InlineThreshold;$/;"	m	struct:llvm::Inliner
InlinedAtLocation	CodeGen/LexicalScopes.h	/^  AssertingVH<const MDNode> InlinedAtLocation;   \/\/ Location at which this $/;"	m	class:llvm::LexicalScope
InlinedCalls	Transforms/Utils/Cloning.h	/^  SmallVector<WeakVH, 8> InlinedCalls;$/;"	m	class:llvm::InlineFunctionInfo
InlinedLexicalScopeMap	CodeGen/LexicalScopes.h	/^  DenseMap<DebugLoc, LexicalScope *> InlinedLexicalScopeMap;$/;"	m	class:llvm::LexicalScopes
Inliner	Transforms/IPO/InlinerPass.h	/^struct Inliner : public CallGraphSCCPass {$/;"	s	namespace:llvm
Inliner	Transforms/IPO/PassManagerBuilder.h	/^  Pass *Inliner;$/;"	m	class:llvm::PassManagerBuilder
InnerUnion	ADT/PointerUnion.h	/^    typedef PointerUnion<PT1, PT2> InnerUnion;$/;"	t	class:llvm::PointerUnion3
InnerUnion1	ADT/PointerUnion.h	/^    typedef PointerUnion<PT1, PT2> InnerUnion1;$/;"	t	class:llvm::PointerUnion4
InnerUnion2	ADT/PointerUnion.h	/^    typedef PointerUnion<PT3, PT4> InnerUnion2;$/;"	t	class:llvm::PointerUnion4
InputArg	Target/TargetCallingConv.h	/^    InputArg() : VT(MVT::Other), Used(false) {}$/;"	f	struct:llvm::ISD::InputArg
InputArg	Target/TargetCallingConv.h	/^    InputArg(ArgFlagsTy flags, EVT vt, bool used,$/;"	f	struct:llvm::ISD::InputArg
InputArg	Target/TargetCallingConv.h	/^  struct InputArg {$/;"	s	namespace:llvm::ISD
Ins	Target/TargetLowering.h	/^    SmallVector<ISD::InputArg, 32> Ins;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
Insert	IRBuilder.h	/^  Constant *Insert(Constant *C, const Twine& = "") const {$/;"	f	class:llvm::IRBuilder
Insert	IRBuilder.h	/^  InstTy *Insert(InstTy *I, const Twine &Name = "") const {$/;"	f	class:llvm::IRBuilder
InsertBranch	Target/TargetInstrInfo.h	/^  virtual unsigned InsertBranch(MachineBasicBlock &MBB, MachineBasicBlock *TBB,$/;"	f	class:llvm::TargetInstrInfo
InsertElementInst	Instructions.h	/^class InsertElementInst : public Instruction {$/;"	c	namespace:llvm
InsertFencesForAtomic	Target/TargetLowering.h	/^  bool InsertFencesForAtomic;$/;"	m	class:llvm::TargetLowering
InsertHelper	IRBuilder.h	/^  void InsertHelper(Instruction *I, const Twine &Name,$/;"	f	class:llvm::IRBuilderDefaultInserter
InsertIntoBucket	ADT/DenseMap.h	/^  BucketT *InsertIntoBucket(KeyT &&Key, ValueT &&Value, BucketT *TheBucket) {$/;"	f	class:llvm::DenseMapBase
InsertIntoBucket	ADT/DenseMap.h	/^  BucketT *InsertIntoBucket(const KeyT &Key, ValueT &&Value,$/;"	f	class:llvm::DenseMapBase
InsertIntoBucket	ADT/DenseMap.h	/^  BucketT *InsertIntoBucket(const KeyT &Key, const ValueT &Value,$/;"	f	class:llvm::DenseMapBase
InsertIntoBucketImpl	ADT/DenseMap.h	/^  BucketT *InsertIntoBucketImpl(const KeyT &Key, BucketT *TheBucket) {$/;"	f	class:llvm::DenseMapBase
InsertLifetime	Transforms/IPO/InlinerPass.h	/^  bool InsertLifetime;$/;"	m	struct:llvm::Inliner
InsertMachineInstrInMaps	CodeGen/LiveIntervalAnalysis.h	/^    SlotIndex InsertMachineInstrInMaps(MachineInstr *MI) {$/;"	f	class:llvm::LiveIntervals
InsertNode	ADT/FoldingSet.h	/^  void InsertNode(Node *N) {$/;"	f	class:llvm::FoldingSetImpl
InsertNode	ADT/FoldingSet.h	/^  void InsertNode(T *N) {$/;"	f	class:llvm::FoldingSetVector
InsertNode	ADT/FoldingSet.h	/^  void InsertNode(T *N, void *InsertPos) {$/;"	f	class:llvm::FoldingSetVector
InsertPoint	IRBuilder.h	/^    InsertPoint() : Block(0) {}$/;"	f	class:llvm::IRBuilderBase::InsertPoint
InsertPoint	IRBuilder.h	/^    InsertPoint(BasicBlock *InsertBlock, BasicBlock::iterator InsertPoint)$/;"	f	class:llvm::IRBuilderBase::InsertPoint
InsertPoint	IRBuilder.h	/^  class InsertPoint {$/;"	c	class:llvm::IRBuilderBase
InsertPt	CodeGen/FastISel.h	/^    MachineBasicBlock::iterator InsertPt;$/;"	m	struct:llvm::FastISel::SavePoint
InsertPt	CodeGen/FunctionLoweringInfo.h	/^  MachineBasicBlock::iterator InsertPt;$/;"	m	class:llvm::FunctionLoweringInfo
InsertPt	IRBuilder.h	/^  BasicBlock::iterator InsertPt;$/;"	m	class:llvm::IRBuilderBase
InsertValueInst	Instructions.h	/^InsertValueInst::InsertValueInst(Value *Agg,$/;"	f	class:llvm::InsertValueInst
InsertValueInst	Instructions.h	/^class InsertValueInst : public Instruction {$/;"	c	namespace:llvm
InsertedExpressions	Analysis/ScalarEvolutionExpander.h	/^      InsertedExpressions;$/;"	m	class:llvm::SCEVExpander
InsertedPHIs	CodeGen/MachineSSAUpdater.h	/^  SmallVectorImpl<MachineInstr*> *InsertedPHIs;$/;"	m	class:llvm::MachineSSAUpdater
InsertedPHIs	Transforms/Utils/SSAUpdater.h	/^  SmallVectorImpl<PHINode*> *InsertedPHIs;$/;"	m	class:llvm::SSAUpdater
InsertedPHIs	Transforms/Utils/SSAUpdaterImpl.h	/^  SmallVectorImpl<PhiT*> *InsertedPHIs;$/;"	m	class:llvm::SSAUpdaterImpl
InsertedPostIncValues	Analysis/ScalarEvolutionExpander.h	/^    std::set<AssertingVH<Value> > InsertedPostIncValues;$/;"	m	class:llvm::SCEVExpander
InsertedValues	Analysis/ScalarEvolutionExpander.h	/^    std::set<AssertingVH<Value> > InsertedValues;$/;"	m	class:llvm::SCEVExpander
InsideBundle	CodeGen/MachineInstr.h	/^    InsideBundle = 1 << 1               \/\/ Instruction is inside a bundle (not$/;"	e	enum:llvm::MachineInstr::MIFlag
InsnRange	CodeGen/LexicalScopes.h	/^typedef std::pair<const MachineInstr *, const MachineInstr *> InsnRange;$/;"	t	namespace:llvm
Inst	MC/MCAssembler.h	/^  MCInst Inst;$/;"	m	class:llvm::MCInstFragment
InstI	Analysis/ConstantsScanner.h	/^  const_inst_iterator InstI;                \/\/ Method instruction iterator$/;"	m	class:llvm::constant_iterator
InstInputs	Analysis/PHITransAddr.h	/^  SmallVector<Instruction*, 4> InstInputs;$/;"	m	class:llvm::PHITransAddr
InstIterator	Support/InstIterator.h	/^  InstIterator() {}$/;"	f	class:llvm::InstIterator
InstIterator	Support/InstIterator.h	/^  InstIterator(InstIterator<A,B,C,D> &II)$/;"	f	class:llvm::InstIterator
InstIterator	Support/InstIterator.h	/^  InstIterator(const InstIterator<A,B,C,D> &II)$/;"	f	class:llvm::InstIterator
InstIterator	Support/InstIterator.h	/^  template<class M> InstIterator(M &m)$/;"	f	class:llvm::InstIterator
InstIterator	Support/InstIterator.h	/^  template<class M> InstIterator(M &m, bool)$/;"	f	class:llvm::InstIterator
InstIterator	Support/InstIterator.h	/^class InstIterator {$/;"	c	namespace:llvm
InstList	BasicBlock.h	/^  InstListType InstList;$/;"	m	class:llvm::BasicBlock
InstListType	BasicBlock.h	/^  typedef iplist<Instruction> InstListType;$/;"	t	class:llvm::BasicBlock
InstVal	MC/MCInst.h	/^    const MCInst *InstVal;$/;"	m	union:llvm::MCOperand::__anon67
InstVisitor	Support/InstVisitor.h	/^class InstVisitor {$/;"	c	namespace:llvm
InstWorkList	Analysis/SparsePropagation.h	/^  std::vector<Instruction*> InstWorkList;   \/\/ Worklist of insts to process.$/;"	m	class:llvm::SparseSolver
InstallExceptionTableDeregister	ExecutionEngine/ExecutionEngine.h	/^  void InstallExceptionTableDeregister(EERegisterFn F) {$/;"	f	class:llvm::ExecutionEngine
InstallExceptionTableRegister	ExecutionEngine/ExecutionEngine.h	/^  void InstallExceptionTableRegister(EERegisterFn F) {$/;"	f	class:llvm::ExecutionEngine
InstallLazyFunctionCreator	ExecutionEngine/ExecutionEngine.h	/^  void InstallLazyFunctionCreator(void* (*P)(const std::string &)) {$/;"	f	class:llvm::ExecutionEngine
InstallLexer	MC/MCTargetAsmLexer.h	/^  void InstallLexer(MCAsmLexer &L) {$/;"	f	class:llvm::MCTargetAsmLexer
Installer	Support/ToolOutputFile.h	/^  } Installer;$/;"	m	class:llvm::tool_output_file	typeref:class:llvm::tool_output_file::CleanupInstaller
Instance	MC/MCLabel.h	/^    unsigned Instance;$/;"	m	class:llvm::MCLabel
Instances	MC/MCContext.h	/^    DenseMap<unsigned, MCLabel *> Instances;$/;"	m	class:llvm::MCContext
Instr	CodeGen/ScheduleDAG.h	/^    MachineInstr *Instr;                \/\/ Alternatively, a MachineInstr.$/;"	m	class:llvm::SUnit
InstrCost	Analysis/InlineCost.h	/^    const int InstrCost = 5;$/;"	m	namespace:llvm::InlineConstants
InstrCount	CodeGen/ScheduleDAGILP.h	/^  unsigned InstrCount;$/;"	m	struct:llvm::ILPValue
InstrDist	CodeGen/SlotIndexes.h	/^      InstrDist = 4 * Slot_Count$/;"	e	enum:llvm::SlotIndex::__anon33
InstrE	CodeGen/MachineInstrBundle.h	/^  MachineBasicBlock::instr_iterator InstrI, InstrE;$/;"	m	class:llvm::MachineOperandIteratorBase
InstrI	CodeGen/MachineInstrBundle.h	/^  MachineBasicBlock::instr_iterator InstrI, InstrE;$/;"	m	class:llvm::MachineOperandIteratorBase
InstrItineraries	MC/MCSchedule.h	/^  const InstrItinerary *InstrItineraries;$/;"	m	class:llvm::MCSchedModel
InstrItinerary	MC/MCInstrItineraries.h	/^struct InstrItinerary {$/;"	s	namespace:llvm
InstrItineraryData	MC/MCInstrItineraries.h	/^  InstrItineraryData() : SchedModel(&MCSchedModel::DefaultSchedModel),$/;"	f	class:llvm::InstrItineraryData
InstrItineraryData	MC/MCInstrItineraries.h	/^  InstrItineraryData(const MCSchedModel *SM, const InstrStage *S,$/;"	f	class:llvm::InstrItineraryData
InstrItineraryData	MC/MCInstrItineraries.h	/^class InstrItineraryData {$/;"	c	namespace:llvm
InstrItins	CodeGen/DFAPacketizer.h	/^  const InstrItineraryData *InstrItins;$/;"	m	class:llvm::DFAPacketizer
InstrItins	CodeGen/ResourcePriorityQueue.h	/^    const InstrItineraryData* InstrItins;$/;"	m	class:llvm::ResourcePriorityQueue
InstrItins	CodeGen/TargetSchedule.h	/^  InstrItineraryData InstrItins;$/;"	m	class:llvm::TargetSchedModel
InstrNameData	MC/MCInstrInfo.h	/^  const char *InstrNameData;        \/\/ Instruction name string pool$/;"	m	class:llvm::MCInstrInfo
InstrNameIndices	MC/MCInstrInfo.h	/^  const unsigned *InstrNameIndices; \/\/ Array for name indices in InstrNameData$/;"	m	class:llvm::MCInstrInfo
InstrSlots	CodeGen/LiveInterval.h	/^    struct InstrSlots {$/;"	s	class:llvm::LiveInterval
InstrStage	MC/MCInstrItineraries.h	/^struct InstrStage {$/;"	s	namespace:llvm
Instruction	Instruction.h	/^class Instruction : public User, public ilist_node<Instruction> {$/;"	c	namespace:llvm
InstructionRecycler	CodeGen/MachineFunction.h	/^  Recycler<MachineInstr> InstructionRecycler;$/;"	m	class:llvm::MachineFunction
InstructionVal	Value.h	/^    InstructionVal,           \/\/ This is an instance of Instruction$/;"	e	enum:llvm::Value::ValueTy
Instructions	CodeGen/MachineBasicBlock.h	/^  typedef ilist<MachineInstr> Instructions;$/;"	t	class:llvm::MachineBasicBlock
Instructions	MC/MCDwarf.h	/^    std::vector<MCCFIInstruction> Instructions;$/;"	m	struct:llvm::MCDwarfFrameInfo
Instructions	MC/MCWin64EH.h	/^    std::vector<MCWin64EHInstruction> Instructions;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
Insts	CodeGen/MachineBasicBlock.h	/^  Instructions Insts;$/;"	m	class:llvm::MachineBasicBlock
IntDivIsCheap	Target/TargetLowering.h	/^  bool IntDivIsCheap;$/;"	m	class:llvm::TargetLowering
IntEqClasses	ADT/IntEqClasses.h	/^  IntEqClasses(unsigned N = 0) : NumClasses(0) { grow(N); }$/;"	f	class:llvm::IntEqClasses
IntEqClasses	ADT/IntEqClasses.h	/^class IntEqClasses {$/;"	c	namespace:llvm
IntInit	TableGen/Record.h	/^  explicit IntInit(int64_t V)$/;"	f	class:llvm::IntInit
IntInit	TableGen/Record.h	/^class IntInit : public TypedInit {$/;"	c	namespace:llvm
IntItem	Support/IntegersSubset.h	/^  IntItem() {}$/;"	f	class:llvm::IntItem
IntItem	Support/IntegersSubset.h	/^  IntItem(const ConstantInt *V) :$/;"	f	class:llvm::IntItem
IntItem	Support/IntegersSubset.h	/^class IntItem {$/;"	c	namespace:llvm
IntMask	ADT/PointerIntPair.h	/^    IntMask = (uintptr_t)(((intptr_t)1 << IntBits)-1),$/;"	e	enum:llvm::PointerIntPair::__anon11
IntRange	Support/IntegersSubset.h	/^    IntRange() : IsEmpty(true) {}$/;"	f	class:llvm::IntRange
IntRange	Support/IntegersSubset.h	/^    IntRange(const IntType &C) :$/;"	f	class:llvm::IntRange
IntRange	Support/IntegersSubset.h	/^    IntRange(const IntType &L, const IntType &H) : Low(L), High(H),$/;"	f	class:llvm::IntRange
IntRange	Support/IntegersSubset.h	/^    IntRange(const self &RHS) :$/;"	f	class:llvm::IntRange
IntRange	Support/IntegersSubset.h	/^class IntRange {$/;"	c	namespace:llvm
IntRecTy	TableGen/Record.h	/^  IntRecTy() : RecTy(IntRecTyKind) {}$/;"	f	class:llvm::IntRecTy
IntRecTy	TableGen/Record.h	/^class IntRecTy : public RecTy {$/;"	c	namespace:llvm
IntRecTyKind	TableGen/Record.h	/^    IntRecTyKind,$/;"	e	enum:llvm::RecTy::RecTyKind
IntShift	ADT/PointerIntPair.h	/^    IntShift = (uintptr_t)PtrTraits::NumLowBitsAvailable-IntBits,$/;"	e	enum:llvm::PointerIntPair::__anon11
IntStack	Analysis/IntervalIterator.h	/^  std::vector<std::pair<Interval*, typename Interval::succ_iterator> > IntStack;$/;"	m	class:llvm::IntervalIterator
IntToPtrInst	Instructions.h	/^class IntToPtrInst : public CastInst {$/;"	c	namespace:llvm
IntTy	Analysis/MemoryBuiltins.h	/^  IntegerType *IntTy;$/;"	m	class:llvm::ObjectSizeOffsetEvaluator
IntTyBits	Analysis/MemoryBuiltins.h	/^  unsigned IntTyBits;$/;"	m	class:llvm::ObjectSizeOffsetVisitor
IntVal	ExecutionEngine/GenericValue.h	/^  APInt IntVal;   \/\/ also used for long doubles$/;"	m	struct:llvm::GenericValue
IntVal	MC/MCParser/MCAsmLexer.h	/^  int64_t IntVal;$/;"	m	class:llvm::AsmToken
Integer	Intrinsics.h	/^      Integer, Vector, Pointer, Struct,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
Integer	MC/MCParser/MCAsmLexer.h	/^    Integer,$/;"	e	enum:llvm::AsmToken::TokenKind
IntegerTyID	Type.h	/^    IntegerTyID,     \/\/\/< 10: Arbitrary bit width integers$/;"	e	enum:llvm::Type::TypeID
IntegerType	DerivedTypes.h	/^  explicit IntegerType(LLVMContext &C, unsigned NumBits) : Type(C, IntegerTyID){$/;"	f	class:llvm::IntegerType
IntegerType	DerivedTypes.h	/^class IntegerType : public Type {$/;"	c	namespace:llvm
Integer_Width	Intrinsics.h	/^      unsigned Integer_Width;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon60
IntegersSubset	Support/IntegersSubset.h	/^  IntegersSubset(const IntegersSubset& RHS) :$/;"	f	class:llvm::IntegersSubset
IntegersSubset	Support/IntegersSubset.h	/^  explicit IntegersSubset(Constant *C) : ParentTy(rangesFromConstant(C)),$/;"	f	class:llvm::IntegersSubset
IntegersSubset	Support/IntegersSubset.h	/^  explicit IntegersSubset(const RangesCollectionTy& Src) : ParentTy(Src) {$/;"	f	class:llvm::IntegersSubset
IntegersSubset	Support/IntegersSubset.h	/^class IntegersSubset : public IntegersSubsetGeneric<IntItem> {$/;"	c	namespace:llvm
IntegersSubsetGeneric	Support/IntegersSubset.h	/^  IntegersSubsetGeneric(const self& RHS) {$/;"	f	class:llvm::IntegersSubsetGeneric
IntegersSubsetGeneric	Support/IntegersSubset.h	/^  explicit IntegersSubsetGeneric(const RangesCollectionTy& Links) {$/;"	f	class:llvm::IntegersSubsetGeneric
IntegersSubsetGeneric	Support/IntegersSubset.h	/^class IntegersSubsetGeneric {$/;"	c	namespace:llvm
IntegersSubsetMapping	Support/IntegersSubsetMapping.h	/^  IntegersSubsetMapping() {$/;"	f	class:llvm::IntegersSubsetMapping
IntegersSubsetMapping	Support/IntegersSubsetMapping.h	/^class IntegersSubsetMapping {$/;"	c	namespace:llvm
IntegersSubsetRef	Instructions.h	/^    typedef typename SubsetsItTy::reference IntegersSubsetRef;$/;"	t	class:llvm::SwitchInst::CaseIteratorT
IntegersSubsetToBB	Support/IntegersSubsetMapping.h	/^typedef IntegersSubsetMapping<BasicBlock> IntegersSubsetToBB;$/;"	t	namespace:llvm
InternTable	Support/StringPool.h	/^    table_t InternTable;$/;"	m	class:llvm::StringPool
InternalBuffer	Support/raw_ostream.h	/^    InternalBuffer,$/;"	e	enum:llvm::raw_ostream::BufferKind
InternalIteratorTy	ADT/ImmutableSet.h	/^  typedef ImutAVLTreeGenericIterator<ImutInfo> InternalIteratorTy;$/;"	t	class:llvm::ImutAVLTreeInOrderIterator
InternalItr	ADT/ImmutableSet.h	/^  InternalIteratorTy InternalItr;$/;"	m	class:llvm::ImutAVLTreeInOrderIterator
InternalLinkage	GlobalValue.h	/^    InternalLinkage,    \/\/\/< Rename collisions when linking (static functions).$/;"	e	enum:llvm::GlobalValue::LinkageTypes
InternalRead	CodeGen/MachineInstrBuilder.h	/^    InternalRead   = 0x100,$/;"	e	enum:llvm::RegState::__anon32
InterpCtor	ExecutionEngine/ExecutionEngine.h	/^  static ExecutionEngine *(*InterpCtor)(Module *M, std::string *ErrorStr);$/;"	m	class:llvm::ExecutionEngine
Interpreter	ExecutionEngine/ExecutionEngine.h	/^    Interpreter = 0x2$/;"	e	enum:llvm::EngineKind::Kind
IntersectDominators	Transforms/Utils/SSAUpdaterImpl.h	/^  BBInfo *IntersectDominators(BBInfo *Blk1, BBInfo *Blk2) {$/;"	f	class:llvm::SSAUpdaterImpl
IntersectionMapping	Support/IntegersSubsetMapping.h	/^    self *IntersectionMapping;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Interval	ADT/ImmutableIntervalMap.h	/^  Interval(int64_t S, int64_t E) : Start(S), End(E) {}$/;"	f	class:llvm::Interval
Interval	ADT/ImmutableIntervalMap.h	/^class Interval {$/;"	c	namespace:llvm
Interval	Analysis/Interval.h	/^  inline Interval(BasicBlock *Header) : HeaderNode(Header) {$/;"	f	class:llvm::Interval
Interval	Analysis/Interval.h	/^  inline Interval(const Interval &I) \/\/ copy ctor$/;"	f	class:llvm::Interval
Interval	Analysis/Interval.h	/^class Interval {$/;"	c	namespace:llvm
IntervalIterator	Analysis/IntervalIterator.h	/^  IntervalIterator() {} \/\/ End iterator, empty stack$/;"	f	class:llvm::IntervalIterator
IntervalIterator	Analysis/IntervalIterator.h	/^  IntervalIterator(Function *M, bool OwnMemory) : IOwnMem(OwnMemory) {$/;"	f	class:llvm::IntervalIterator
IntervalIterator	Analysis/IntervalIterator.h	/^  IntervalIterator(IntervalPartition &IP, bool OwnMemory) : IOwnMem(OwnMemory) {$/;"	f	class:llvm::IntervalIterator
IntervalIterator	Analysis/IntervalIterator.h	/^class IntervalIterator {$/;"	c	namespace:llvm
IntervalListTy	Analysis/IntervalPartition.h	/^  typedef std::vector<Interval*> IntervalListTy;$/;"	t	class:llvm::IntervalPartition
IntervalMap	ADT/IntervalMap.h	/^  explicit IntervalMap(Allocator &a) : height(0), rootSize(0), allocator(a) {$/;"	f	class:llvm::IntervalMap
IntervalMap	ADT/IntervalMap.h	/^class IntervalMap {$/;"	c	namespace:llvm
IntervalMap	Analysis/IntervalPartition.h	/^  IntervalMapTy IntervalMap;$/;"	m	class:llvm::IntervalPartition
IntervalMapImpl	ADT/IntervalMap.h	/^namespace IntervalMapImpl {$/;"	n	namespace:llvm
IntervalMapInfo	ADT/IntervalMap.h	/^struct IntervalMapInfo {$/;"	s	namespace:llvm
IntervalMapInfo	CodeGen/SlotIndexes.h	/^  template <> struct IntervalMapInfo<SlotIndex> {$/;"	s	namespace:llvm
IntervalMapOverlaps	ADT/IntervalMap.h	/^  IntervalMapOverlaps(const MapA &a, const MapB &b)$/;"	f	class:llvm::IntervalMapOverlaps
IntervalMapOverlaps	ADT/IntervalMap.h	/^class IntervalMapOverlaps {$/;"	c	namespace:llvm
IntervalMapTy	Analysis/IntervalPartition.h	/^  typedef std::map<BasicBlock*, Interval*> IntervalMapTy;$/;"	t	class:llvm::IntervalPartition
IntervalPartition	Analysis/IntervalPartition.h	/^  IntervalPartition() : FunctionPass(ID), RootInterval(0) {$/;"	f	class:llvm::IntervalPartition
IntervalPartition	Analysis/IntervalPartition.h	/^class IntervalPartition : public FunctionPass {$/;"	c	namespace:llvm
IntervalPressure	CodeGen/RegisterPressure.h	/^struct IntervalPressure : RegisterPressure {$/;"	s	namespace:llvm
Intervals	Analysis/IntervalPartition.h	/^  std::vector<Interval*> Intervals;$/;"	m	class:llvm::IntervalPartition
Intervals	CodeGen/MachineLoopRanges.h	/^  Map Intervals;$/;"	m	class:llvm::MachineLoopRange
Intrinsic	Intrinsics.h	/^namespace Intrinsic {$/;"	n	namespace:llvm
IntrinsicInfo	Target/TargetLowering.h	/^  struct IntrinsicInfo {$/;"	s	class:llvm::TargetLowering
IntrinsicInst	IntrinsicInst.h	/^  class IntrinsicInst : public CallInst {$/;"	c	namespace:llvm
IntrinsicLowering	CodeGen/IntrinsicLowering.h	/^    explicit IntrinsicLowering(const DataLayout &td) :$/;"	f	class:llvm::IntrinsicLowering
IntrinsicLowering	CodeGen/IntrinsicLowering.h	/^  class IntrinsicLowering {$/;"	c	namespace:llvm
IntrusiveRefCntPtr	ADT/IntrusiveRefCntPtr.h	/^    IntrusiveRefCntPtr(IntrusiveRefCntPtr&& S) : Obj(S.Obj) {$/;"	f	class:llvm::IntrusiveRefCntPtr
IntrusiveRefCntPtr	ADT/IntrusiveRefCntPtr.h	/^    IntrusiveRefCntPtr(IntrusiveRefCntPtr<X>&& S) : Obj(S.getPtr()) {$/;"	f	class:llvm::IntrusiveRefCntPtr
IntrusiveRefCntPtr	ADT/IntrusiveRefCntPtr.h	/^    IntrusiveRefCntPtr(T* obj) : Obj(obj) {$/;"	f	class:llvm::IntrusiveRefCntPtr
IntrusiveRefCntPtr	ADT/IntrusiveRefCntPtr.h	/^    IntrusiveRefCntPtr(const IntrusiveRefCntPtr& S) : Obj(S.Obj) {$/;"	f	class:llvm::IntrusiveRefCntPtr
IntrusiveRefCntPtr	ADT/IntrusiveRefCntPtr.h	/^    IntrusiveRefCntPtr(const IntrusiveRefCntPtr<X>& S)$/;"	f	class:llvm::IntrusiveRefCntPtr
IntrusiveRefCntPtr	ADT/IntrusiveRefCntPtr.h	/^    explicit IntrusiveRefCntPtr() : Obj(0) {}$/;"	f	class:llvm::IntrusiveRefCntPtr
IntrusiveRefCntPtr	ADT/IntrusiveRefCntPtr.h	/^  class IntrusiveRefCntPtr {$/;"	c	namespace:llvm
IntrusiveRefCntPtrInfo	ADT/IntrusiveRefCntPtr.h	/^  template <typename T> struct IntrusiveRefCntPtrInfo {$/;"	s	namespace:llvm
Invalid	Analysis/MemoryDependenceAnalysis.h	/^      Invalid = 0,$/;"	e	enum:llvm::MemDepResult::DepType
Invalid	Support/DynamicLibrary.h	/^    static char Invalid;$/;"	m	class:llvm::sys::DynamicLibrary
InvalidAlignmentElem	DataLayout.h	/^  static const LayoutAlignElem InvalidAlignmentElem;$/;"	m	class:llvm::DataLayout
InvalidGCOV	Support/GCOV.h	/^    InvalidGCOV,$/;"	e	enum:llvm::GCOV::GCOVFormat
InvalidNumMicroOps	MC/MCSchedule.h	/^  static const unsigned short InvalidNumMicroOps = UINT16_MAX;$/;"	m	struct:llvm::MCSchedClassDesc
InvalidPointerElem	DataLayout.h	/^  static const PointerAlignElem InvalidPointerElem;$/;"	m	class:llvm::DataLayout
InvalidatePHILiveOutRegInfo	CodeGen/FunctionLoweringInfo.h	/^  void InvalidatePHILiveOutRegInfo(const PHINode *PN) {$/;"	f	class:llvm::FunctionLoweringInfo
Inverse	ADT/GraphTraits.h	/^  inline Inverse(const GraphType &G) : Graph(G) {}$/;"	f	struct:llvm::Inverse
Inverse	ADT/GraphTraits.h	/^struct Inverse {$/;"	s	namespace:llvm
InversedLastUser	PassManagers.h	/^  DenseMap<Pass *, SmallPtrSet<Pass *, 8> > InversedLastUser;$/;"	m	class:llvm::PMTopLevelManager
InvokeInst	Instructions.h	/^InvokeInst::InvokeInst(Value *Func,$/;"	f	class:llvm::InvokeInst
InvokeInst	Instructions.h	/^class InvokeInst : public TerminatorInst {$/;"	c	namespace:llvm
Is64Bit	Object/MachOObject.h	/^  bool Is64Bit;$/;"	m	class:llvm::object::MachOObject
IsAlignStack	InlineAsm.h	/^  bool IsAlignStack;$/;"	m	class:llvm::InlineAsm
IsAnalysis	PassSupport.h	/^  const bool IsAnalysis;               \/\/ True if an analysis pass.$/;"	m	class:llvm::PassInfo
IsAnalysisGroup	PassSupport.h	/^  const bool IsAnalysisGroup;          \/\/ True if an analysis group.$/;"	m	class:llvm::PassInfo
IsAtBeginning	Support/YAMLParser.h	/^  bool IsAtBeginning;$/;"	m	class:llvm::yaml::MappingNode
IsAtBeginning	Support/YAMLParser.h	/^  bool IsAtBeginning;$/;"	m	class:llvm::yaml::SequenceNode
IsAtEnd	Support/YAMLParser.h	/^  bool IsAtEnd;$/;"	m	class:llvm::yaml::MappingNode
IsAtEnd	Support/YAMLParser.h	/^  bool IsAtEnd;$/;"	m	class:llvm::yaml::SequenceNode
IsBottomUp	CodeGen/ScheduleDAGILP.h	/^  bool IsBottomUp;$/;"	m	class:llvm::ScheduleDAGILP
IsBuffered	MC/MCSchedule.h	/^  bool IsBuffered;$/;"	m	struct:llvm::MCProcResourceDesc
IsCFGOnlyPass	PassSupport.h	/^  const bool IsCFGOnlyPass;            \/\/ Pass only looks at the CFG.$/;"	m	class:llvm::PassInfo
IsCOFF	MC/MCObjectFileInfo.h	/^  enum Environment { IsMachO, IsELF, IsCOFF };$/;"	e	enum:llvm::MCObjectFileInfo::Environment
IsDefInDomFrontier	Transforms/Utils/SSAUpdaterImpl.h	/^  bool IsDefInDomFrontier(const BBInfo *Pred, const BBInfo *IDom) {$/;"	f	class:llvm::SSAUpdaterImpl
IsDesirableToPromoteOp	Target/TargetLowering.h	/^  virtual bool IsDesirableToPromoteOp(SDValue \/*Op*\/, EVT &\/*PVT*\/) const {$/;"	f	class:llvm::TargetLowering
IsELF	MC/MCObjectFileInfo.h	/^  enum Environment { IsMachO, IsELF, IsCOFF };$/;"	e	enum:llvm::MCObjectFileInfo::Environment
IsExact	Operator.h	/^    IsExact = (1 << 0)$/;"	e	enum:llvm::PossiblyExactOperator::__anon78
IsFixed	Target/TargetCallingConv.h	/^    bool IsFixed;$/;"	m	struct:llvm::ISD::OutputArg
IsFunctionEHFrameSymbolPrivate	MC/MCObjectFileInfo.h	/^  bool IsFunctionEHFrameSymbolPrivate;$/;"	m	class:llvm::MCObjectFileInfo
IsInBounds	Operator.h	/^    IsInBounds = (1 << 0)$/;"	e	enum:llvm::GEPOperator::__anon79
IsInReg	Target/TargetLowering.h	/^    bool IsInReg           : 1;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
IsInnerUnion	ADT/PointerUnion.h	/^      IsInnerUnion(ValTy val) : Val(val) { }$/;"	f	struct:llvm::PointerUnion3::IsInnerUnion
IsInnerUnion	ADT/PointerUnion.h	/^    struct IsInnerUnion {$/;"	s	class:llvm::PointerUnion3
IsLandingPad	CodeGen/MachineBasicBlock.h	/^  bool IsLandingPad;$/;"	m	class:llvm::MachineBasicBlock
IsLittleEndian	MC/MCAsmInfo.h	/^    bool IsLittleEndian;$/;"	m	class:llvm::MCAsmInfo
IsLittleEndian	Object/MachOObject.h	/^  bool IsLittleEndian;$/;"	m	class:llvm::object::MachOObject
IsLittleEndian	Support/DataExtractor.h	/^  uint8_t IsLittleEndian;$/;"	m	class:llvm::DataExtractor
IsLittleEndian	Target/TargetLowering.h	/^  bool IsLittleEndian;$/;"	m	class:llvm::TargetLowering
IsMachO	MC/MCObjectFileInfo.h	/^  enum Environment { IsMachO, IsELF, IsCOFF };$/;"	e	enum:llvm::MCObjectFileInfo::Environment
IsOProfileRunningFunc	ExecutionEngine/OProfileWrapper.h	/^  IsOProfileRunningPtrT           IsOProfileRunningFunc;$/;"	m	class:llvm::OProfileWrapper
IsOProfileRunningPtrT	ExecutionEngine/OProfileWrapper.h	/^  typedef  bool          (*IsOProfileRunningPtrT)(void);$/;"	t	class:llvm::OProfileWrapper
IsPT3	ADT/PointerUnion.h	/^      IsPT3(ValTy val) : Val(val) { }$/;"	f	struct:llvm::PointerUnion3::IsPT3
IsPT3	ADT/PointerUnion.h	/^    struct IsPT3 {$/;"	s	class:llvm::PointerUnion3
IsPostDominators	Analysis/DominanceFrontier.h	/^  const bool IsPostDominators;$/;"	m	class:llvm::DominanceFrontierBase
IsPostDominators	Analysis/Dominators.h	/^  const bool IsPostDominators;$/;"	m	class:llvm::DominatorBase
IsPostRA	CodeGen/ScheduleDAGInstrs.h	/^    bool IsPostRA;$/;"	m	class:llvm::ScheduleDAGInstrs
IsRegister	MC/MachineLocation.h	/^  bool IsRegister;                      \/\/ True if location is a register.$/;"	m	class:llvm::MachineLocation
IsReturnValueUsed	Target/TargetLowering.h	/^    bool IsReturnValueUsed : 1;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
IsSSA	CodeGen/MachineRegisterInfo.h	/^  bool IsSSA;$/;"	m	class:llvm::MachineRegisterInfo
IsSignalFrame	MC/MCDwarf.h	/^    bool IsSignalFrame;$/;"	m	struct:llvm::MCDwarfFrameInfo
IsSigned	MC/MCAssembler.h	/^  bool IsSigned;$/;"	m	class:llvm::MCLEBFragment
IsSimple	Support/DOTGraphTraits.h	/^  bool IsSimple;$/;"	m	struct:llvm::DefaultDOTGraphTraits
IsSingleNumber	Support/IntegersSubset.h	/^  bool IsSingleNumber;$/;"	m	class:llvm::IntegersSubsetGeneric
IsSingleNumbersOnly	Support/IntegersSubset.h	/^  bool IsSingleNumbersOnly;$/;"	m	class:llvm::IntegersSubsetGeneric
IsSpecialCasedPHI	Analysis/SparsePropagation.h	/^  virtual bool IsSpecialCasedPHI(PHINode *PN) {$/;"	f	class:llvm::AbstractLatticeFunction
IsSwappedEndian	Object/MachOObject.h	/^  bool IsSwappedEndian;$/;"	m	class:llvm::object::MachOObject
IsTailCall	Target/TargetLowering.h	/^    bool IsTailCall;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
IsUnsigned	ADT/APSInt.h	/^  bool IsUnsigned;$/;"	m	class:llvm::APSInt
IsUntrackedValue	Analysis/SparsePropagation.h	/^  virtual bool IsUntrackedValue(Value *V) {$/;"	f	class:llvm::AbstractLatticeFunction
IsValid	CodeGen/FunctionLoweringInfo.h	/^    bool IsValid : 1;$/;"	m	struct:llvm::FunctionLoweringInfo::LiveOutInfo
IsVarArg	CodeGen/CallingConvLower.h	/^  bool IsVarArg;$/;"	m	class:llvm::CCState
IsVarArg	Target/TargetLowering.h	/^    bool IsVarArg          : 1;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
Isa	MC/MCDwarf.h	/^    unsigned Isa;$/;"	m	class:llvm::MCDwarfLoc
IssueCount	CodeGen/ScoreboardHazardRecognizer.h	/^  unsigned IssueCount;$/;"	m	class:llvm::ScoreboardHazardRecognizer
IssueWidth	CodeGen/ScoreboardHazardRecognizer.h	/^  unsigned IssueWidth;$/;"	m	class:llvm::ScoreboardHazardRecognizer
IssueWidth	MC/MCSchedule.h	/^  unsigned IssueWidth;$/;"	m	class:llvm::MCSchedModel
It	Support/CFG.h	/^  USE_iterator It;$/;"	m	class:llvm::PredIterator
ItBB	Analysis/RegionIterator.h	/^    ItBB,$/;"	e	enum:llvm::RNSuccIterator::ItMode
ItMode	Analysis/RegionIterator.h	/^  enum ItMode{$/;"	g	class:llvm::RNSuccIterator
ItRgBegin	Analysis/RegionIterator.h	/^    ItRgBegin, \/\/ At the beginning of the regionnode successor.$/;"	e	enum:llvm::RNSuccIterator::ItMode
ItRgEnd	Analysis/RegionIterator.h	/^    ItRgEnd    \/\/ At the end of the regionnode successor.$/;"	e	enum:llvm::RNSuccIterator::ItMode
ItemList	Linker.h	/^    typedef std::vector<std::pair<std::string,bool> > ItemList;$/;"	t	class:llvm::Linker
ItemSize	ADT/StringMap.h	/^  unsigned ItemSize;$/;"	m	class:llvm::StringMapImpl
Items	Support/IntegersSubsetMapping.h	/^  CaseItems Items;$/;"	m	class:llvm::IntegersSubsetMapping
Iter	ADT/SparseBitVector.h	/^    ElementListConstIter Iter;$/;"	m	class:llvm::SparseBitVector::SparseBitVectorIterator
IterationHandle	Support/FileSystem.h	/^    intptr_t IterationHandle;$/;"	m	struct:llvm::sys::fs::detail::DirIterState
Iterations	Analysis/DependenceAnalysis.h	/^      const SCEV *Iterations;$/;"	m	struct:llvm::DependenceAnalysis::BoundInfo
Iterations	Analysis/DependenceAnalysis.h	/^      const SCEV *Iterations;$/;"	m	struct:llvm::DependenceAnalysis::CoefficientInfo
Iterator	ADT/DenseSet.h	/^    Iterator(const typename MapTy::iterator &i) : I(i) {}$/;"	f	class:llvm::DenseSet::Iterator
Iterator	ADT/DenseSet.h	/^  class Iterator {$/;"	c	class:llvm::DenseSet
Iterator	ADT/FoldingSet.h	/^  VectorIteratorT Iterator;$/;"	m	class:llvm::FoldingSetVectorIterator
ItfImpl	PassSupport.h	/^  std::vector<const PassInfo*> ItfImpl;\/\/ Interfaces implemented by this pass$/;"	m	class:llvm::PassInfo
ItinData	CodeGen/ScoreboardHazardRecognizer.h	/^  const InstrItineraryData *ItinData;$/;"	m	class:llvm::ScoreboardHazardRecognizer
Itineraries	MC/MCInstrItineraries.h	/^  const InstrItinerary *Itineraries;    \/\/\/< Array of itineraries selected$/;"	m	class:llvm::InstrItineraryData
Itor	Analysis/RegionIterator.h	/^  succ_iterator Itor;$/;"	m	class:llvm::RNSuccIterator
JIT	ExecutionEngine/ExecutionEngine.h	/^    JIT         = 0x1,$/;"	e	enum:llvm::EngineKind::Kind
JITCodeEmitter	CodeGen/JITCodeEmitter.h	/^class JITCodeEmitter : public MachineCodeEmitter {$/;"	c	namespace:llvm
JITCompilerFn	Target/TargetJITInfo.h	/^    typedef void* (*JITCompilerFn)(void *);$/;"	t	class:llvm::TargetJITInfo
JITCtor	ExecutionEngine/ExecutionEngine.h	/^  static ExecutionEngine *(*JITCtor)($/;"	m	class:llvm::ExecutionEngine
JITDefault	Support/CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
JITEventListener	ExecutionEngine/JITEventListener.h	/^  JITEventListener() {}$/;"	f	class:llvm::JITEventListener
JITEventListener	ExecutionEngine/JITEventListener.h	/^class JITEventListener {$/;"	c	namespace:llvm
JITEvent_EmittedFunctionDetails	ExecutionEngine/JITEventListener.h	/^struct JITEvent_EmittedFunctionDetails {$/;"	s	namespace:llvm
JITMemoryManager	ExecutionEngine/JITMemoryManager.h	/^  JITMemoryManager() : HasGOT(false) {}$/;"	f	class:llvm::JITMemoryManager
JITMemoryManager	ExecutionEngine/JITMemoryManager.h	/^class JITMemoryManager {$/;"	c	namespace:llvm
JMM	ExecutionEngine/ExecutionEngine.h	/^  JITMemoryManager *JMM;$/;"	m	class:llvm::EngineBuilder
JTEntryKind	CodeGen/MachineJumpTableInfo.h	/^  enum JTEntryKind {$/;"	g	class:llvm::MachineJumpTableInfo
JTI	CodeGen/SelectionDAGNodes.h	/^  int JTI;$/;"	m	class:llvm::JumpTableSDNode
JumpBufAlignment	Target/TargetLowering.h	/^  unsigned JumpBufAlignment;$/;"	m	class:llvm::TargetLowering
JumpBufSize	Target/TargetLowering.h	/^  unsigned JumpBufSize;$/;"	m	class:llvm::TargetLowering
JumpIsExpensive	Target/TargetLowering.h	/^  bool JumpIsExpensive;$/;"	m	class:llvm::TargetLowering
JumpTable	CodeGen/ISDOpcodes.h	/^    JumpTable, ConstantPool, ExternalSymbol, BlockAddress,$/;"	e	enum:llvm::ISD::NodeType
JumpTable16	MC/MCAssembler.h	/^  enum KindTy { Data = 1, JumpTable8, JumpTable16, JumpTable32 } Kind;$/;"	e	enum:llvm::DataRegionData::KindTy
JumpTable16	Object/MachOFormat.h	/^  enum DataRegionType { Data = 1, JumpTable8, JumpTable16, JumpTable32 };$/;"	e	enum:llvm::object::macho::DataRegionType
JumpTable32	MC/MCAssembler.h	/^  enum KindTy { Data = 1, JumpTable8, JumpTable16, JumpTable32 } Kind;$/;"	e	enum:llvm::DataRegionData::KindTy
JumpTable32	Object/MachOFormat.h	/^  enum DataRegionType { Data = 1, JumpTable8, JumpTable16, JumpTable32 };$/;"	e	enum:llvm::object::macho::DataRegionType
JumpTable8	MC/MCAssembler.h	/^  enum KindTy { Data = 1, JumpTable8, JumpTable16, JumpTable32 } Kind;$/;"	e	enum:llvm::DataRegionData::KindTy
JumpTable8	Object/MachOFormat.h	/^  enum DataRegionType { Data = 1, JumpTable8, JumpTable16, JumpTable32 };$/;"	e	enum:llvm::object::macho::DataRegionType
JumpTableInfo	CodeGen/MachineFunction.h	/^  MachineJumpTableInfo *JumpTableInfo;$/;"	m	class:llvm::MachineFunction
JumpTableSDNode	CodeGen/SelectionDAGNodes.h	/^  JumpTableSDNode(int jti, EVT VT, bool isTarg, unsigned char TF)$/;"	f	class:llvm::JumpTableSDNode
JumpTableSDNode	CodeGen/SelectionDAGNodes.h	/^class JumpTableSDNode : public SDNode {$/;"	c	namespace:llvm
JumpTables	CodeGen/MachineJumpTableInfo.h	/^  std::vector<MachineJumpTableEntry> JumpTables;$/;"	m	class:llvm::MachineJumpTableInfo
JumpToBit	Bitcode/BitstreamReader.h	/^  void JumpToBit(uint64_t BitNo) {$/;"	f	class:llvm::BitstreamCursor
KFreeBSD	ADT/Triple.h	/^    KFreeBSD,$/;"	e	enum:llvm::Triple::OSType
KILL	Target/TargetOpcodes.h	/^    KILL = 5,$/;"	e	enum:llvm::TargetOpcode::__anon139
Keep	Support/ToolOutputFile.h	/^    bool Keep;$/;"	m	class:llvm::tool_output_file::CleanupInstaller
Kernel	Support/CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
Key	ADT/ScopedHashTable.h	/^  K Key;$/;"	m	class:llvm::ScopedHashTableVal
Key	MC/SubtargetFeature.h	/^  const char *Key;                      \/\/ K-V key string$/;"	m	struct:llvm::SubtargetFeatureKV
Key	MC/SubtargetFeature.h	/^  const char *Key;                      \/\/ K-V key string$/;"	m	struct:llvm::SubtargetInfoKV
Key	Module.h	/^    MDString *Key;$/;"	m	struct:llvm::Module::ModuleFlagEntry
Key	Support/YAMLParser.h	/^  Node *Key;$/;"	m	class:llvm::yaml::KeyValueNode
KeyIndexOf	ADT/SparseSet.h	/^  KeyFunctorT KeyIndexOf;$/;"	m	class:llvm::SparseSet
KeyOfValue	ADT/ImmutableIntervalMap.h	/^  static key_type_ref KeyOfValue(value_type_ref V) {$/;"	f	struct:llvm::ImutIntervalInfo
KeyOfValue	ADT/ImmutableMap.h	/^  static inline key_type_ref KeyOfValue(value_type_ref V) {$/;"	f	struct:llvm::ImutKeyValueInfo
KeyOfValue	ADT/ImmutableSet.h	/^  static inline key_type_ref KeyOfValue(value_type_ref D) { return D; }$/;"	f	struct:llvm::ImutContainerInfo
KeySansPointerT	ADT/ValueMap.h	/^  typedef typename llvm::remove_pointer<KeyT>::type KeySansPointerT;$/;"	t	class:llvm::ValueMapCallbackVH
KeyT	ADT/SparseSet.h	/^  typedef typename KeyFunctorT::argument_type KeyT;$/;"	t	class:llvm::SparseSet
KeyTraits	ADT/IntervalMap.h	/^  typedef Traits KeyTraits;$/;"	t	class:llvm::IntervalMap
KeyType	ADT/IntervalMap.h	/^  typedef KeyT KeyType;$/;"	t	class:llvm::IntervalMap
KeyType	ADT/IntervalMap.h	/^  typedef typename MapA::KeyType KeyType;$/;"	t	class:llvm::IntervalMapOverlaps
KeyValueNode	Support/YAMLParser.h	/^  KeyValueNode(OwningPtr<Document> &D)$/;"	f	class:llvm::yaml::KeyValueNode
KeyValueNode	Support/YAMLParser.h	/^class KeyValueNode : public Node {$/;"	c	namespace:llvm::yaml
Kill	CodeGen/LiveInterval.h	/^    bool Kill;$/;"	m	class:llvm::LiveRangeQuery
Kill	CodeGen/MachineInstrBuilder.h	/^    Kill           = 0x8,$/;"	e	enum:llvm::RegState::__anon32
KillRegs	CodeGen/RegisterScavenging.h	/^  BitVector KillRegs, DefRegs;$/;"	m	class:llvm::RegScavenger
Kills	CodeGen/LiveVariables.h	/^    std::vector<MachineInstr*> Kills;$/;"	m	struct:llvm::LiveVariables::VarInfo
Kills	CodeGen/MachineInstrBundle.h	/^    bool Kills;$/;"	m	struct:llvm::MachineOperandIteratorBase::PhysRegInfo
Kind	Analysis/DependenceAnalysis.h	/^      enum ConstraintKind { Empty, Point, Distance, Line, Any } Kind;$/;"	m	class:llvm::DependenceAnalysis::Constraint	typeref:enum:llvm::DependenceAnalysis::Constraint::ConstraintKind
Kind	CodeGen/GCMetadata.h	/^    GC::PointKind Kind; \/\/\/< The kind of the safe point.$/;"	m	struct:llvm::GCPoint
Kind	CodeGen/ScheduleDAG.h	/^    enum Kind {$/;"	g	class:llvm::SDep
Kind	ExecutionEngine/ExecutionEngine.h	/^  enum Kind {$/;"	g	namespace:llvm::EngineKind
Kind	Intrinsics.h	/^    } Kind;$/;"	m	struct:llvm::Intrinsic::IITDescriptor	typeref:enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
Kind	MC/MCAssembler.h	/^  FragmentType Kind;$/;"	m	class:llvm::MCFragment
Kind	MC/MCAssembler.h	/^  enum KindTy { Data = 1, JumpTable8, JumpTable16, JumpTable32 } Kind;$/;"	m	struct:llvm::DataRegionData	typeref:enum:llvm::DataRegionData::KindTy
Kind	MC/MCExpr.h	/^  ExprKind Kind;$/;"	m	class:llvm::MCExpr
Kind	MC/MCExpr.h	/^  const VariantKind Kind;$/;"	m	class:llvm::MCSymbolRefExpr
Kind	MC/MCFixup.h	/^  unsigned Kind;$/;"	m	class:llvm::MCFixup
Kind	MC/MCInst.h	/^  unsigned char Kind;$/;"	m	class:llvm::MCOperand
Kind	MC/MCParser/MCAsmLexer.h	/^  TokenKind Kind;$/;"	m	class:llvm::AsmToken
Kind	MC/MCSection.h	/^    SectionKind Kind;$/;"	m	class:llvm::MCSection
Kind	MC/SectionKind.h	/^  enum Kind {$/;"	g	class:llvm::SectionKind
Kind	Object/MachOFormat.h	/^    uint16_t Kind;    \/* a DataRegionType value  *\/$/;"	m	struct:llvm::object::macho::DataInCodeTableEntry
Kind	Pass.h	/^  PassKind Kind;$/;"	m	class:llvm::Pass
Kind	Support/SourceMgr.h	/^  SourceMgr::DiagKind Kind;$/;"	m	class:llvm::SMDiagnostic
Kind	TableGen/Record.h	/^  RecTyKind Kind;$/;"	m	class:llvm::RecTy
Kind	TableGen/Record.h	/^  const InitKind Kind;$/;"	m	class:llvm::Init
KindTy	MC/MCAssembler.h	/^  enum KindTy { Data = 1, JumpTable8, JumpTable16, JumpTable32 } Kind;$/;"	g	struct:llvm::DataRegionData
Kind_	MC/MCInstrItineraries.h	/^  ReservationKinds Kind_; \/\/\/< Kind of the FU reservation$/;"	m	struct:llvm::InstrStage
Kind_Clobber	InlineAsm.h	/^    Kind_Clobber = 4,            \/\/ Clobbered register, "~r".$/;"	e	enum:llvm::InlineAsm::__anon57
Kind_Imm	InlineAsm.h	/^    Kind_Imm = 5,                \/\/ Immediate.$/;"	e	enum:llvm::InlineAsm::__anon57
Kind_Mem	InlineAsm.h	/^    Kind_Mem = 6,                \/\/ Memory operand, "m".$/;"	e	enum:llvm::InlineAsm::__anon57
Kind_RegDef	InlineAsm.h	/^    Kind_RegDef = 2,             \/\/ Output register, "=r".$/;"	e	enum:llvm::InlineAsm::__anon57
Kind_RegDefEarlyClobber	InlineAsm.h	/^    Kind_RegDefEarlyClobber = 3, \/\/ Early-clobber output register, "=&r".$/;"	e	enum:llvm::InlineAsm::__anon57
Kind_RegUse	InlineAsm.h	/^    Kind_RegUse = 1,             \/\/ Input register, "r".$/;"	e	enum:llvm::InlineAsm::__anon57
KnownFeasibleEdges	Analysis/SparsePropagation.h	/^  std::set<Edge> KnownFeasibleEdges;$/;"	m	class:llvm::SparseSolver
KnownOne	CodeGen/FunctionLoweringInfo.h	/^    APInt KnownOne, KnownZero;$/;"	m	struct:llvm::FunctionLoweringInfo::LiveOutInfo
KnownZero	CodeGen/FunctionLoweringInfo.h	/^    APInt KnownOne, KnownZero;$/;"	m	struct:llvm::FunctionLoweringInfo::LiveOutInfo
L	ADT/ImmutableList.h	/^    const ImmutableListImpl<T>* L;$/;"	m	class:llvm::ImmutableList::iterator
L	Analysis/IVUsers.h	/^  Loop *L;$/;"	m	class:llvm::IVUsers
L	Analysis/LoopDependenceAnalysis.h	/^  Loop *L;$/;"	m	class:llvm::LoopDependenceAnalysis
L	Analysis/LoopIterator.h	/^  Loop *L;$/;"	m	class:llvm::LoopBlocksDFS
L	Analysis/ScalarEvolutionExpressions.h	/^    const Loop *L;$/;"	m	class:llvm::SCEVAddRecExpr
L	Support/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::BinOp2_match
L	Support/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::BinaryOp_match
L	Support/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::CmpClass_match
L	Support/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::MaxMin_match
L	Support/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::SelectClass_match
L	Support/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::fneg_match
L	Support/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::neg_match
L	Support/PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::not_match
L2DwarfRegs	MC/MCRegisterInfo.h	/^  const DwarfLLVMRegPair *L2DwarfRegs;        \/\/ LLVM to Dwarf regs mapping$/;"	m	class:llvm::MCRegisterInfo
L2DwarfRegsSize	MC/MCRegisterInfo.h	/^  unsigned L2DwarfRegsSize;$/;"	m	class:llvm::MCRegisterInfo
L2SEHRegs	MC/MCRegisterInfo.h	/^  DenseMap<unsigned, int> L2SEHRegs;          \/\/ LLVM to SEH regs mapping$/;"	m	class:llvm::MCRegisterInfo
LAST_BINARY_INST	Instruction.h	330;"	d
LAST_BINOP	Instructions.h	/^    LAST_BINOP = UMin,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
LAST_CAST_INST	Instruction.h	344;"	d
LAST_FCMP_PREDICATE	InstrTypes.h	/^    LAST_FCMP_PREDICATE = FCMP_TRUE,$/;"	e	enum:llvm::CmpInst::Predicate
LAST_FP_VALUETYPE	CodeGen/ValueTypes.h	/^      LAST_FP_VALUETYPE  = ppcf128,$/;"	e	enum:llvm::MVT::SimpleValueType
LAST_FP_VECTOR_VALUETYPE	CodeGen/ValueTypes.h	/^      LAST_FP_VECTOR_VALUETYPE = v4f64,$/;"	e	enum:llvm::MVT::SimpleValueType
LAST_ICMP_PREDICATE	InstrTypes.h	/^    LAST_ICMP_PREDICATE = ICMP_SLE,$/;"	e	enum:llvm::CmpInst::Predicate
LAST_INDEXED_MODE	CodeGen/ISDOpcodes.h	/^    LAST_INDEXED_MODE$/;"	e	enum:llvm::ISD::MemIndexedMode
LAST_INTEGER_VALUETYPE	CodeGen/ValueTypes.h	/^      LAST_INTEGER_VALUETYPE  = i128,$/;"	e	enum:llvm::MVT::SimpleValueType
LAST_INTEGER_VECTOR_VALUETYPE	CodeGen/ValueTypes.h	/^      LAST_INTEGER_VECTOR_VALUETYPE = v16i64,$/;"	e	enum:llvm::MVT::SimpleValueType
LAST_KNOWN_SECTION_TYPE	MC/MCSectionMachO.h	/^    LAST_KNOWN_SECTION_TYPE = S_THREAD_LOCAL_INIT_FUNCTION_POINTERS,$/;"	e	enum:llvm::MCSectionMachO::__anon66
LAST_LOADEXT_TYPE	CodeGen/ISDOpcodes.h	/^    LAST_LOADEXT_TYPE$/;"	e	enum:llvm::ISD::LoadExtType
LAST_MEMORY_INST	Instruction.h	337;"	d
LAST_OTHER_INST	Instruction.h	351;"	d
LAST_TERM_INST	Instruction.h	323;"	d
LAST_VALUETYPE	CodeGen/ValueTypes.h	/^      LAST_VALUETYPE =  47,   \/\/ This always remains at the end of the list.$/;"	e	enum:llvm::MVT::SimpleValueType
LAST_VECTOR_VALUETYPE	CodeGen/ValueTypes.h	/^      LAST_VECTOR_VALUETYPE  = v4f64,$/;"	e	enum:llvm::MVT::SimpleValueType
LATENCY_PRIORITY_QUEUE_H	CodeGen/LatencyPriorityQueue.h	17;"	d
LAnd	MC/MCExpr.h	/^    LAnd, \/\/\/< Logical and.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
LBT	Analysis/LoopIterator.h	/^  LoopBlocksTraversal &LBT;$/;"	m	class:llvm::po_iterator_storage
LBrac	MC/MCParser/MCAsmLexer.h	/^    LParen, RParen, LBrac, RBrac, LCurly, RCurly,$/;"	e	enum:llvm::AsmToken::TokenKind
LCI	Analysis/LibCallAliasAnalysis.h	/^    LibCallInfo *LCI;$/;"	m	struct:llvm::LibCallAliasAnalysis
LCOMM	MC/MCAsmInfo.h	/^  namespace LCOMM {$/;"	n	namespace:llvm
LCOMMDirectiveAlignmentType	MC/MCAsmInfo.h	/^    LCOMM::LCOMMType LCOMMDirectiveAlignmentType; \/\/ Defaults to NoAlignment.$/;"	m	class:llvm::MCAsmInfo
LCOMMType	MC/MCAsmInfo.h	/^    enum LCOMMType { NoAlignment, ByteAlignment, Log2Alignment };$/;"	g	namespace:llvm::LCOMM
LCT_CodeSignature	Object/MachOFormat.h	/^    LCT_CodeSignature = 0x1d,$/;"	e	enum:llvm::object::macho::LoadCommandType
LCT_DataInCode	Object/MachOFormat.h	/^    LCT_DataInCode = 0x29$/;"	e	enum:llvm::object::macho::LoadCommandType
LCT_Dysymtab	Object/MachOFormat.h	/^    LCT_Dysymtab = 0xb,$/;"	e	enum:llvm::object::macho::LoadCommandType
LCT_FunctionStarts	Object/MachOFormat.h	/^    LCT_FunctionStarts = 0x26,$/;"	e	enum:llvm::object::macho::LoadCommandType
LCT_Segment	Object/MachOFormat.h	/^    LCT_Segment = 0x1,$/;"	e	enum:llvm::object::macho::LoadCommandType
LCT_Segment64	Object/MachOFormat.h	/^    LCT_Segment64 = 0x19,$/;"	e	enum:llvm::object::macho::LoadCommandType
LCT_SegmentSplitInfo	Object/MachOFormat.h	/^    LCT_SegmentSplitInfo = 0x1e,$/;"	e	enum:llvm::object::macho::LoadCommandType
LCT_Symtab	Object/MachOFormat.h	/^    LCT_Symtab = 0x2,$/;"	e	enum:llvm::object::macho::LoadCommandType
LCT_UUID	Object/MachOFormat.h	/^    LCT_UUID = 0x1b,$/;"	e	enum:llvm::object::macho::LoadCommandType
LCurly	MC/MCParser/MCAsmLexer.h	/^    LParen, RParen, LBrac, RBrac, LCurly, RCurly,$/;"	e	enum:llvm::AsmToken::TokenKind
LE	Analysis/DependenceAnalysis.h	/^             LE = 3,$/;"	e	enum:llvm::Dependence::DVEntry::__anon25
LFS_Error	Support/LockFileManager.h	/^    LFS_Error$/;"	e	enum:llvm::LockFileManager::LockFileState
LFS_Owned	Support/LockFileManager.h	/^    LFS_Owned,$/;"	e	enum:llvm::LockFileManager::LockFileState
LFS_Shared	Support/LockFileManager.h	/^    LFS_Shared,$/;"	e	enum:llvm::LockFileManager::LockFileState
LHS	ADT/Twine.h	/^    Child LHS;$/;"	m	class:llvm::Twine
LHS	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *LHS;$/;"	m	class:llvm::SCEVUDivExpr
LHS	MC/MCExpr.h	/^  const MCExpr *LHS, *RHS;$/;"	m	class:llvm::MCBinaryExpr
LHS	TableGen/Record.h	/^  Init *LHS, *MHS, *RHS;$/;"	m	class:llvm::TernOpInit
LHS	TableGen/Record.h	/^  Init *LHS, *RHS;$/;"	m	class:llvm::BinOpInit
LHS	TableGen/Record.h	/^  Init *LHS;$/;"	m	class:llvm::UnOpInit
LHSKind	ADT/Twine.h	/^    unsigned char LHSKind;$/;"	m	class:llvm::Twine
LI	Analysis/BranchProbabilityInfo.h	/^  LoopInfo *LI;$/;"	m	class:llvm::BranchProbabilityInfo
LI	Analysis/DependenceAnalysis.h	/^    LoopInfo *LI;$/;"	m	class:llvm::DependenceAnalysis
LI	Analysis/IVUsers.h	/^  LoopInfo *LI;$/;"	m	class:llvm::IVUsers
LI	Analysis/LoopInfo.h	/^  LoopInfoBase<BasicBlock, Loop> LI;$/;"	m	class:llvm::LoopInfo
LI	Analysis/LoopInfoImpl.h	/^  LoopInfoBase<BlockT, LoopT> *LI;$/;"	m	class:llvm::__anon30::PopulateLoopsDFS
LI	Analysis/LoopIterator.h	/^  LoopInfo *LI;$/;"	m	class:llvm::LoopBlocksTraversal
LI	Analysis/LoopPass.h	/^  LoopInfo *LI;$/;"	m	class:llvm::LPPassManager
LI	Analysis/ScalarEvolution.h	/^    LoopInfo *LI;$/;"	m	class:llvm::ScalarEvolution
LI	CodeGen/AsmPrinter.h	/^    MachineLoopInfo *LI;$/;"	m	class:llvm::AsmPrinter
LI	CodeGen/MachineLoopInfo.h	/^  LoopInfoBase<MachineBasicBlock, MachineLoop> LI;$/;"	m	class:llvm::MachineLoopInfo
LIFETIME_END	CodeGen/ISDOpcodes.h	/^    LIFETIME_START, LIFETIME_END,$/;"	e	enum:llvm::ISD::NodeType
LIFETIME_END	Target/TargetOpcodes.h	/^    LIFETIME_END = 16$/;"	e	enum:llvm::TargetOpcode::__anon139
LIFETIME_START	CodeGen/ISDOpcodes.h	/^    LIFETIME_START, LIFETIME_END,$/;"	e	enum:llvm::ISD::NodeType
LIFETIME_START	Target/TargetOpcodes.h	/^    LIFETIME_START = 15,$/;"	e	enum:llvm::TargetOpcode::__anon139
LIS	CodeGen/CalcSpillWeights.h	/^    LiveIntervals &LIS;$/;"	m	class:llvm::VirtRegAuxInfo
LIS	CodeGen/LiveInterval.h	/^    LiveIntervals &LIS;$/;"	m	class:llvm::ConnectedVNInfoEqClasses
LIS	CodeGen/LiveRangeEdit.h	/^  LiveIntervals &LIS;$/;"	m	class:llvm::LiveRangeEdit
LIS	CodeGen/MachineScheduler.h	/^  LiveIntervals *LIS;$/;"	m	struct:llvm::MachineSchedContext
LIS	CodeGen/RegisterPressure.h	/^  const LiveIntervals       *LIS;$/;"	m	class:llvm::RegPressureTracker
LIS	CodeGen/ScheduleDAGInstrs.h	/^    LiveIntervals *LIS;$/;"	m	class:llvm::ScheduleDAGInstrs
LLVMContext	LLVMContext.h	/^class LLVMContext {$/;"	c	namespace:llvm
LLVMDebugVersion	Support/Dwarf.h	/^  LLVMDebugVersion = (12 << 16),        \/\/ Current version of debug information.$/;"	e	enum:llvm::__anon134
LLVMDebugVersion10	Support/Dwarf.h	/^  LLVMDebugVersion10 = (10 << 16),      \/\/ Constant for version 10.$/;"	e	enum:llvm::__anon134
LLVMDebugVersion11	Support/Dwarf.h	/^  LLVMDebugVersion11 = (11 << 16),      \/\/ Constant for version 11.$/;"	e	enum:llvm::__anon134
LLVMDebugVersion4	Support/Dwarf.h	/^  LLVMDebugVersion4 = (4 << 16),        \/\/ Constant for version 4.$/;"	e	enum:llvm::__anon134
LLVMDebugVersion5	Support/Dwarf.h	/^  LLVMDebugVersion5 = (5 << 16),        \/\/ Constant for version 5.$/;"	e	enum:llvm::__anon134
LLVMDebugVersion6	Support/Dwarf.h	/^  LLVMDebugVersion6 = (6 << 16),        \/\/ Constant for version 6.$/;"	e	enum:llvm::__anon134
LLVMDebugVersion7	Support/Dwarf.h	/^  LLVMDebugVersion7 = (7 << 16),        \/\/ Constant for version 7.$/;"	e	enum:llvm::__anon134
LLVMDebugVersion8	Support/Dwarf.h	/^  LLVMDebugVersion8 = (8 << 16),        \/\/ Constant for version 8.$/;"	e	enum:llvm::__anon134
LLVMDebugVersion9	Support/Dwarf.h	/^  LLVMDebugVersion9 = (9 << 16),        \/\/ Constant for version 9.$/;"	e	enum:llvm::__anon134
LLVMDebugVersionMask	Support/Dwarf.h	/^  LLVMDebugVersionMask = 0xffff0000     \/\/ Mask for version number.$/;"	e	enum:llvm::__anon134
LLVMFileType	Support/PathV1.h	/^  enum LLVMFileType {$/;"	g	namespace:llvm::sys
LLVMSymbolTableFlag	Bitcode/Archive.h	/^      LLVMSymbolTableFlag = 4,     \/\/\/< Member is an LLVM symbol table$/;"	e	enum:llvm::ArchiveMember::Flags
LLVMTargetMachine	Target/TargetMachine.h	/^class LLVMTargetMachine : public TargetMachine {$/;"	c	namespace:llvm
LLVMTy	CodeGen/ValueTypes.h	/^    Type *LLVMTy;$/;"	m	struct:llvm::EVT
LLVM_ADDRESSING_MODE_H	AddressingMode.h	15;"	d
LLVM_ADT_ARRAYREF_H	ADT/ArrayRef.h	11;"	d
LLVM_ADT_BITVECTOR_H	ADT/BitVector.h	15;"	d
LLVM_ADT_DAGDELTAALGORITHM_H	ADT/DAGDeltaAlgorithm.h	10;"	d
LLVM_ADT_DELTAALGORITHM_H	ADT/DeltaAlgorithm.h	10;"	d
LLVM_ADT_DENSEMAPINFO_H	ADT/DenseMapInfo.h	15;"	d
LLVM_ADT_DENSEMAP_H	ADT/DenseMap.h	15;"	d
LLVM_ADT_DENSESET_H	ADT/DenseSet.h	15;"	d
LLVM_ADT_DEPTHFIRSTITERATOR_H	ADT/DepthFirstIterator.h	34;"	d
LLVM_ADT_EDIT_DISTANCE_H	ADT/edit_distance.h	17;"	d
LLVM_ADT_EQUIVALENCECLASSES_H	ADT/EquivalenceClasses.h	16;"	d
LLVM_ADT_FOLDINGSET_H	ADT/FoldingSet.h	17;"	d
LLVM_ADT_GRAPHTRAITS_H	ADT/GraphTraits.h	19;"	d
LLVM_ADT_HASHING_H	ADT/Hashing.h	46;"	d
LLVM_ADT_ILIST_H	ADT/ilist.h	39;"	d
LLVM_ADT_ILIST_NODE_H	ADT/ilist_node.h	16;"	d
LLVM_ADT_IMLIST_H	ADT/ImmutableList.h	15;"	d
LLVM_ADT_IMMAP_H	ADT/ImmutableMap.h	15;"	d
LLVM_ADT_IMMUTABLE_INTERVAL_MAP_H	ADT/ImmutableIntervalMap.h	15;"	d
LLVM_ADT_IMSET_H	ADT/ImmutableSet.h	15;"	d
LLVM_ADT_INDEXEDMAP_H	ADT/IndexedMap.h	21;"	d
LLVM_ADT_INMEMORYSTRUCT_H	ADT/InMemoryStruct.h	11;"	d
LLVM_ADT_INTEQCLASSES_H	ADT/IntEqClasses.h	22;"	d
LLVM_ADT_INTERVALMAP_H	ADT/IntervalMap.h	100;"	d
LLVM_ADT_INTRUSIVE_REF_CNT_PTR	ADT/IntrusiveRefCntPtr.h	22;"	d
LLVM_ADT_MAPVECTOR_H	ADT/MapVector.h	18;"	d
LLVM_ADT_NULLABLE_PTR_H	ADT/NullablePtr.h	15;"	d
LLVM_ADT_OPTIONAL	ADT/Optional.h	17;"	d
LLVM_ADT_OWNING_PTR_H	ADT/OwningPtr.h	15;"	d
LLVM_ADT_PACKEDVECTOR_H	ADT/PackedVector.h	15;"	d
LLVM_ADT_POINTERINTPAIR_H	ADT/PointerIntPair.h	15;"	d
LLVM_ADT_POINTERUNION_H	ADT/PointerUnion.h	16;"	d
LLVM_ADT_POSTORDERITERATOR_H	ADT/PostOrderIterator.h	17;"	d
LLVM_ADT_PRIORITY_QUEUE_H	ADT/PriorityQueue.h	15;"	d
LLVM_ADT_SAVERESTORE	Support/SaveAndRestore.h	16;"	d
LLVM_ADT_SCCITERATOR_H	ADT/SCCIterator.h	22;"	d
LLVM_ADT_SCOPEDHASHTABLE_H	ADT/ScopedHashTable.h	32;"	d
LLVM_ADT_SETOPERATIONS_H	ADT/SetOperations.h	16;"	d
LLVM_ADT_SETVECTOR_H	ADT/SetVector.h	21;"	d
LLVM_ADT_SMALLBITVECTOR_H	ADT/SmallBitVector.h	15;"	d
LLVM_ADT_SMALLPTRSET_H	ADT/SmallPtrSet.h	16;"	d
LLVM_ADT_SMALLSET_H	ADT/SmallSet.h	15;"	d
LLVM_ADT_SMALLSTRING_H	ADT/SmallString.h	15;"	d
LLVM_ADT_SMALLVECTOR_H	ADT/SmallVector.h	15;"	d
LLVM_ADT_SPARSEBITVECTOR_H	ADT/SparseBitVector.h	16;"	d
LLVM_ADT_SPARSESET_H	ADT/SparseSet.h	21;"	d
LLVM_ADT_STATISTIC_H	ADT/Statistic.h	27;"	d
LLVM_ADT_STLEXTRAS_H	ADT/STLExtras.h	18;"	d
LLVM_ADT_STRINGEXTRAS_H	ADT/StringExtras.h	15;"	d
LLVM_ADT_STRINGMAP_H	ADT/StringMap.h	15;"	d
LLVM_ADT_STRINGREF_H	ADT/StringRef.h	11;"	d
LLVM_ADT_STRINGSET_H	ADT/StringSet.h	15;"	d
LLVM_ADT_STRINGSWITCH_H	ADT/StringSwitch.h	14;"	d
LLVM_ADT_TINYPTRVECTOR_H	ADT/TinyPtrVector.h	11;"	d
LLVM_ADT_TRIPLE_H	ADT/Triple.h	11;"	d
LLVM_ADT_TWINE_H	ADT/Twine.h	11;"	d
LLVM_ADT_UNIQUEVECTOR_H	ADT/UniqueVector.h	11;"	d
LLVM_ADT_VALUEMAP_H	ADT/ValueMap.h	27;"	d
LLVM_ADT_VARIADIC_FUNCTION_H	ADT/VariadicFunction.h	15;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	Support/AlignOf.h	104;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	Support/AlignOf.h	117;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	Support/AlignOf.h	131;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	Support/AlignOf.h	77;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	Support/AlignOf.h	82;"	d
LLVM_ANALYSIS_ALIASSETTRACKER_H	Analysis/AliasSetTracker.h	18;"	d
LLVM_ANALYSIS_ALIAS_ANALYSIS_H	Analysis/AliasAnalysis.h	38;"	d
LLVM_ANALYSIS_BLOCKFREQUENCYIMPL_H	Analysis/BlockFrequencyImpl.h	15;"	d
LLVM_ANALYSIS_BLOCKFREQUENCYINFO_H	Analysis/BlockFrequencyInfo.h	15;"	d
LLVM_ANALYSIS_BRANCHPROBABILITYINFO_H	Analysis/BranchProbabilityInfo.h	15;"	d
LLVM_ANALYSIS_CALLGRAPH_H	Analysis/CallGraph.h	52;"	d
LLVM_ANALYSIS_CAPTURETRACKING_H	Analysis/CaptureTracking.h	15;"	d
LLVM_ANALYSIS_CFGPRINTER_H	Analysis/CFGPrinter.h	16;"	d
LLVM_ANALYSIS_CODEMETRICS_H	Analysis/CodeMetrics.h	16;"	d
LLVM_ANALYSIS_CONSTANTFOLDING_H	Analysis/ConstantFolding.h	21;"	d
LLVM_ANALYSIS_CONSTANTSSCANNER_H	Analysis/ConstantsScanner.h	17;"	d
LLVM_ANALYSIS_DEBUGINFO_H	DebugInfo.h	18;"	d
LLVM_ANALYSIS_DEPENDENCEANALYSIS_H	Analysis/DependenceAnalysis.h	31;"	d
LLVM_ANALYSIS_DIBUILDER_H	DIBuilder.h	16;"	d
LLVM_ANALYSIS_DOMINANCEFRONTIER_H	Analysis/DominanceFrontier.h	19;"	d
LLVM_ANALYSIS_DOMINATORS_H	Analysis/Dominators.h	16;"	d
LLVM_ANALYSIS_DOMINATOR_INTERNALS_H	Analysis/DominatorInternals.h	11;"	d
LLVM_ANALYSIS_DOMPRINTER_H	Analysis/DomPrinter.h	16;"	d
LLVM_ANALYSIS_DOT_GRAPHTRAITS_PASS_H	Analysis/DOTGraphTraitsPass.h	15;"	d
LLVM_ANALYSIS_FINDUSEDTYPES_H	Analysis/FindUsedTypes.h	15;"	d
LLVM_ANALYSIS_INLINECOST_H	Analysis/InlineCost.h	15;"	d
LLVM_ANALYSIS_INSTRUCTIONSIMPLIFY_H	Analysis/InstructionSimplify.h	20;"	d
LLVM_ANALYSIS_IVUSERS_H	Analysis/IVUsers.h	16;"	d
LLVM_ANALYSIS_LAZYVALUEINFO_H	Analysis/LazyValueInfo.h	16;"	d
LLVM_ANALYSIS_LIBCALLSEMANTICS_H	Analysis/LibCallSemantics.h	16;"	d
LLVM_ANALYSIS_LIBCALL_AA_H	Analysis/LibCallAliasAnalysis.h	15;"	d
LLVM_ANALYSIS_LINT_H	Analysis/Lint.h	21;"	d
LLVM_ANALYSIS_LOADS_H	Analysis/Loads.h	15;"	d
LLVM_ANALYSIS_LOOP_DEPENDENCE_ANALYSIS_H	Analysis/LoopDependenceAnalysis.h	21;"	d
LLVM_ANALYSIS_LOOP_INFO_H	Analysis/LoopInfo.h	31;"	d
LLVM_ANALYSIS_LOOP_INFO_IMPL_H	Analysis/LoopInfoImpl.h	16;"	d
LLVM_ANALYSIS_LOOP_ITERATOR_H	Analysis/LoopIterator.h	25;"	d
LLVM_ANALYSIS_MEMORYBUILTINS_H	Analysis/MemoryBuiltins.h	16;"	d
LLVM_ANALYSIS_MEMORY_DEPENDENCE_H	Analysis/MemoryDependenceAnalysis.h	15;"	d
LLVM_ANALYSIS_PASSES_H	Analysis/Passes.h	16;"	d
LLVM_ANALYSIS_PHITRANSADDR_H	Analysis/PHITransAddr.h	15;"	d
LLVM_ANALYSIS_POST_DOMINATORS_H	Analysis/PostDominators.h	15;"	d
LLVM_ANALYSIS_PROFILEDATALOADER_H	Analysis/ProfileDataLoader.h	17;"	d
LLVM_ANALYSIS_PROFILEDATATYPES_H	Analysis/ProfileDataTypes.h	17;"	d
LLVM_ANALYSIS_PROFILEINFOLOADER_H	Analysis/ProfileInfoLoader.h	17;"	d
LLVM_ANALYSIS_PROFILEINFOTYPES_H	Analysis/ProfileInfoTypes.h	17;"	d
LLVM_ANALYSIS_PROFILEINFO_H	Analysis/ProfileInfo.h	22;"	d
LLVM_ANALYSIS_REGIONPRINTER_H	Analysis/RegionPrinter.h	16;"	d
LLVM_ANALYSIS_REGION_INFO_H	Analysis/RegionInfo.h	28;"	d
LLVM_ANALYSIS_REGION_ITERATOR_H	Analysis/RegionIterator.h	12;"	d
LLVM_ANALYSIS_SCALAREVOLUTION_EXPANDER_H	Analysis/ScalarEvolutionExpander.h	15;"	d
LLVM_ANALYSIS_SCALAREVOLUTION_EXPRESSIONS_H	Analysis/ScalarEvolutionExpressions.h	15;"	d
LLVM_ANALYSIS_SCALAREVOLUTION_H	Analysis/ScalarEvolution.h	22;"	d
LLVM_ANALYSIS_SCALAREVOLUTION_NORMALIZATION_H	Analysis/ScalarEvolutionNormalization.h	37;"	d
LLVM_ANALYSIS_SPARSE_PROPAGATION_H	Analysis/SparsePropagation.h	16;"	d
LLVM_ANALYSIS_TRACE_H	Analysis/Trace.h	19;"	d
LLVM_ANALYSIS_VALUETRACKING_H	Analysis/ValueTracking.h	16;"	d
LLVM_ANALYSIS_VERIFIER_H	Analysis/Verifier.h	22;"	d
LLVM_APINT_H	ADT/APInt.h	16;"	d
LLVM_APSINT_H	ADT/APSInt.h	16;"	d
LLVM_ARGUMENT_H	Argument.h	15;"	d
LLVM_ASM_PARSER	Support/TargetSelect.h	38;"	d
LLVM_ASM_PARSER	Support/TargetSelect.h	97;"	d
LLVM_ASM_PRINTER	Support/TargetSelect.h	34;"	d
LLVM_ASM_PRINTER	Support/TargetSelect.h	87;"	d
LLVM_ASSEMBLY_ASMANNOTATIONWRITER_H	Assembly/AssemblyAnnotationWriter.h	18;"	d
LLVM_ASSEMBLY_PARSER_H	Assembly/Parser.h	15;"	d
LLVM_ASSEMBLY_PRINTMODULEPASS_H	Assembly/PrintModulePass.h	19;"	d
LLVM_ASSEMBLY_WRITER_H	Assembly/Writer.h	18;"	d
LLVM_ATTRIBUTES_H	Attributes.h	16;"	d
LLVM_ATTRIBUTE_ALWAYS_INLINE	Support/Compiler.h	161;"	d
LLVM_ATTRIBUTE_ALWAYS_INLINE	Support/Compiler.h	163;"	d
LLVM_ATTRIBUTE_ALWAYS_INLINE	Support/Compiler.h	165;"	d
LLVM_ATTRIBUTE_DEPRECATED	Support/Compiler.h	187;"	d
LLVM_ATTRIBUTE_DEPRECATED	Support/Compiler.h	190;"	d
LLVM_ATTRIBUTE_DEPRECATED	Support/Compiler.h	193;"	d
LLVM_ATTRIBUTE_DEPRECATED	Support/Compiler.h	196;"	d
LLVM_ATTRIBUTE_NOINLINE	Support/Compiler.h	149;"	d
LLVM_ATTRIBUTE_NOINLINE	Support/Compiler.h	151;"	d
LLVM_ATTRIBUTE_NOINLINE	Support/Compiler.h	153;"	d
LLVM_ATTRIBUTE_NORETURN	Support/Compiler.h	170;"	d
LLVM_ATTRIBUTE_NORETURN	Support/Compiler.h	172;"	d
LLVM_ATTRIBUTE_NORETURN	Support/Compiler.h	174;"	d
LLVM_ATTRIBUTE_UNUSED	Support/Compiler.h	101;"	d
LLVM_ATTRIBUTE_UNUSED	Support/Compiler.h	103;"	d
LLVM_ATTRIBUTE_USED	Support/Compiler.h	87;"	d
LLVM_ATTRIBUTE_USED	Support/Compiler.h	89;"	d
LLVM_ATTRIBUTE_WEAK	Support/Compiler.h	107;"	d
LLVM_ATTRIBUTE_WEAK	Support/Compiler.h	109;"	d
LLVM_AUTOUPGRADE_H	AutoUpgrade.h	15;"	d
LLVM_BASICBLOCK_H	BasicBlock.h	15;"	d
LLVM_BITCODE_ARCHIVE_H	Bitcode/Archive.h	18;"	d
LLVM_BITCODE_BITCODES_H	Bitcode/BitCodes.h	19;"	d
LLVM_BITCODE_H	Bitcode/ReaderWriter.h	15;"	d
LLVM_BITCODE_LLVMBITCODES_H	Bitcode/LLVMBitCodes.h	19;"	d
LLVM_BUILTIN_TRAP	Support/Compiler.h	212;"	d
LLVM_BUILTIN_TRAP	Support/Compiler.h	214;"	d
LLVM_BUILTIN_UNREACHABLE	Support/Compiler.h	205;"	d
LLVM_CALLINGCONV_H	CallingConv.h	15;"	d
LLVM_CALL_GRAPH_SCC_PASS_H	CallGraphSCCPass.h	22;"	d
LLVM_CODEGENREGALLOCREGISTRY_H	CodeGen/RegAllocRegistry.h	16;"	d
LLVM_CODEGENSCHEDULERREGISTRY_H	CodeGen/SchedulerRegistry.h	16;"	d
LLVM_CODEGEN_ANALYSIS_H	CodeGen/Analysis.h	15;"	d
LLVM_CODEGEN_ASMPRINTER_H	CodeGen/AsmPrinter.h	17;"	d
LLVM_CODEGEN_CALCSPILLWEIGHTS_H	CodeGen/CalcSpillWeights.h	12;"	d
LLVM_CODEGEN_CALLINGCONVLOWER_H	CodeGen/CallingConvLower.h	16;"	d
LLVM_CODEGEN_COMMAND_LINE_FLAGS_H	CodeGen/CommandFlags.h	17;"	d
LLVM_CODEGEN_DFAPACKETIZER_H	CodeGen/DFAPacketizer.h	27;"	d
LLVM_CODEGEN_EDGEBUNDLES_H	CodeGen/EdgeBundles.h	17;"	d
LLVM_CODEGEN_FASTISEL_H	CodeGen/FastISel.h	15;"	d
LLVM_CODEGEN_FUNCTIONLOWERINGINFO_H	CodeGen/FunctionLoweringInfo.h	16;"	d
LLVM_CODEGEN_GCMETADATAPRINTER_H	CodeGen/GCMetadataPrinter.h	21;"	d
LLVM_CODEGEN_GCMETADATA_H	CodeGen/GCMetadata.h	34;"	d
LLVM_CODEGEN_GCSTRATEGY_H	CodeGen/GCStrategy.h	37;"	d
LLVM_CODEGEN_GCS_H	CodeGen/GCs.h	15;"	d
LLVM_CODEGEN_INTRINSICLOWERING_H	CodeGen/IntrinsicLowering.h	17;"	d
LLVM_CODEGEN_ISDOPCODES_H	CodeGen/ISDOpcodes.h	15;"	d
LLVM_CODEGEN_JITCODEEMITTER_H	CodeGen/JITCodeEmitter.h	18;"	d
LLVM_CODEGEN_LEXICALSCOPES_H	CodeGen/LexicalScopes.h	18;"	d
LLVM_CODEGEN_LINKALLASMWRITERCOMPONENTS_H	CodeGen/LinkAllAsmWriterComponents.h	16;"	d
LLVM_CODEGEN_LINKALLCODEGENCOMPONENTS_H	CodeGen/LinkAllCodegenComponents.h	16;"	d
LLVM_CODEGEN_LIVEINTERVAL_ANALYSIS_H	CodeGen/LiveIntervalAnalysis.h	21;"	d
LLVM_CODEGEN_LIVEINTERVAL_H	CodeGen/LiveInterval.h	22;"	d
LLVM_CODEGEN_LIVERANGEEDIT_H	CodeGen/LiveRangeEdit.h	19;"	d
LLVM_CODEGEN_LIVESTACK_ANALYSIS_H	CodeGen/LiveStackAnalysis.h	17;"	d
LLVM_CODEGEN_LIVEVARIABLES_H	CodeGen/LiveVariables.h	30;"	d
LLVM_CODEGEN_MACHINEBASICBLOCK_H	CodeGen/MachineBasicBlock.h	15;"	d
LLVM_CODEGEN_MACHINEBLOCKFREQUENCYINFO_H	CodeGen/MachineBlockFrequencyInfo.h	15;"	d
LLVM_CODEGEN_MACHINEBRANCHPROBABILITYINFO_H	CodeGen/MachineBranchProbabilityInfo.h	16;"	d
LLVM_CODEGEN_MACHINECODEEMITTER_H	CodeGen/MachineCodeEmitter.h	18;"	d
LLVM_CODEGEN_MACHINECONSTANTPOOL_H	CodeGen/MachineConstantPool.h	17;"	d
LLVM_CODEGEN_MACHINEDOMINATORS_H	CodeGen/MachineDominators.h	16;"	d
LLVM_CODEGEN_MACHINEFRAMEINFO_H	CodeGen/MachineFrameInfo.h	15;"	d
LLVM_CODEGEN_MACHINEFUNCTION_H	CodeGen/MachineFunction.h	19;"	d
LLVM_CODEGEN_MACHINEINSTRBUILDER_H	CodeGen/MachineInstrBuilder.h	18;"	d
LLVM_CODEGEN_MACHINEINSTRBUNDLE_H	CodeGen/MachineInstrBundle.h	16;"	d
LLVM_CODEGEN_MACHINEINSTR_H	CodeGen/MachineInstr.h	17;"	d
LLVM_CODEGEN_MACHINEJUMPTABLEINFO_H	CodeGen/MachineJumpTableInfo.h	21;"	d
LLVM_CODEGEN_MACHINELOOPRANGES_H	CodeGen/MachineLoopRanges.h	18;"	d
LLVM_CODEGEN_MACHINEMEMOPERAND_H	CodeGen/MachineMemOperand.h	17;"	d
LLVM_CODEGEN_MACHINEMODULEINFOIMPLS_H	CodeGen/MachineModuleInfoImpls.h	16;"	d
LLVM_CODEGEN_MACHINEMODULEINFO_H	CodeGen/MachineModuleInfo.h	32;"	d
LLVM_CODEGEN_MACHINEOPERAND_H	CodeGen/MachineOperand.h	15;"	d
LLVM_CODEGEN_MACHINEPASSREGISTRY_H	CodeGen/MachinePassRegistry.h	19;"	d
LLVM_CODEGEN_MACHINEPOSTDOMINATORS_H	CodeGen/MachinePostDominators.h	16;"	d
LLVM_CODEGEN_MACHINEREGISTERINFO_H	CodeGen/MachineRegisterInfo.h	15;"	d
LLVM_CODEGEN_MACHINERELOCATION_H	CodeGen/MachineRelocation.h	15;"	d
LLVM_CODEGEN_MACHINESSAUPDATER_H	CodeGen/MachineSSAUpdater.h	15;"	d
LLVM_CODEGEN_MACHINE_FUNCTION_ANALYSIS_H	CodeGen/MachineFunctionAnalysis.h	15;"	d
LLVM_CODEGEN_MACHINE_FUNCTION_PASS_H	CodeGen/MachineFunctionPass.h	20;"	d
LLVM_CODEGEN_MACHINE_LOOP_INFO_H	CodeGen/MachineLoopInfo.h	31;"	d
LLVM_CODEGEN_MACHO_RELOCATION_H	CodeGen/MachORelocation.h	16;"	d
LLVM_CODEGEN_PASSES_H	CodeGen/Passes.h	16;"	d
LLVM_CODEGEN_PBQP_GRAPH_H	CodeGen/PBQP/Graph.h	16;"	d
LLVM_CODEGEN_PBQP_HEURISTICBASE_H	CodeGen/PBQP/HeuristicBase.h	11;"	d
LLVM_CODEGEN_PBQP_HEURISTICSOLVER_H	CodeGen/PBQP/HeuristicSolver.h	17;"	d
LLVM_CODEGEN_PBQP_HEURISTICS_BRIGGS_H	CodeGen/PBQP/Heuristics/Briggs.h	19;"	d
LLVM_CODEGEN_PBQP_MATH_H	CodeGen/PBQP/Math.h	11;"	d
LLVM_CODEGEN_PBQP_SOLUTION_H	CodeGen/PBQP/Solution.h	15;"	d
LLVM_CODEGEN_PSEUDOSOURCEVALUE_H	CodeGen/PseudoSourceValue.h	15;"	d
LLVM_CODEGEN_REGALLOCPBQP_H	CodeGen/RegAllocPBQP.h	17;"	d
LLVM_CODEGEN_REGISTERCLASSINFO_H	CodeGen/RegisterClassInfo.h	18;"	d
LLVM_CODEGEN_REGISTERPRESSURE_H	CodeGen/RegisterPressure.h	16;"	d
LLVM_CODEGEN_REGISTER_SCAVENGING_H	CodeGen/RegisterScavenging.h	18;"	d
LLVM_CODEGEN_RUNTIMELIBCALLS_H	CodeGen/RuntimeLibcalls.h	16;"	d
LLVM_CODEGEN_SCHEDULEDAGILP_H	CodeGen/ScheduleDAGILP.h	15;"	d
LLVM_CODEGEN_SCHEDULEDAG_H	CodeGen/ScheduleDAG.h	17;"	d
LLVM_CODEGEN_SCHEDULEHAZARDRECOGNIZER_H	CodeGen/ScheduleHazardRecognizer.h	16;"	d
LLVM_CODEGEN_SCOREBOARDHAZARDRECOGNIZER_H	CodeGen/ScoreboardHazardRecognizer.h	17;"	d
LLVM_CODEGEN_SELECTIONDAGNODES_H	CodeGen/SelectionDAGNodes.h	20;"	d
LLVM_CODEGEN_SELECTIONDAG_H	CodeGen/SelectionDAG.h	16;"	d
LLVM_CODEGEN_SELECTIONDAG_ISEL_H	CodeGen/SelectionDAGISel.h	16;"	d
LLVM_CODEGEN_SLOTINDEXES_H	CodeGen/SlotIndexes.h	20;"	d
LLVM_CODEGEN_TARGETLOWERINGOBJECTFILEIMPL_H	CodeGen/TargetLoweringObjectFileImpl.h	16;"	d
LLVM_CODEGEN_VALUETYPES_H	CodeGen/ValueTypes.h	17;"	d
LLVM_COFF_TARGET_ASM_INFO_H	MC/MCAsmInfoCOFF.h	11;"	d
LLVM_COMMA_JOIN1	ADT/VariadicFunction.h	23;"	d
LLVM_COMMA_JOIN1	ADT/VariadicFunction.h	296;"	d
LLVM_COMMA_JOIN10	ADT/VariadicFunction.h	305;"	d
LLVM_COMMA_JOIN10	ADT/VariadicFunction.h	32;"	d
LLVM_COMMA_JOIN11	ADT/VariadicFunction.h	306;"	d
LLVM_COMMA_JOIN11	ADT/VariadicFunction.h	33;"	d
LLVM_COMMA_JOIN12	ADT/VariadicFunction.h	307;"	d
LLVM_COMMA_JOIN12	ADT/VariadicFunction.h	34;"	d
LLVM_COMMA_JOIN13	ADT/VariadicFunction.h	308;"	d
LLVM_COMMA_JOIN13	ADT/VariadicFunction.h	35;"	d
LLVM_COMMA_JOIN14	ADT/VariadicFunction.h	309;"	d
LLVM_COMMA_JOIN14	ADT/VariadicFunction.h	36;"	d
LLVM_COMMA_JOIN15	ADT/VariadicFunction.h	310;"	d
LLVM_COMMA_JOIN15	ADT/VariadicFunction.h	37;"	d
LLVM_COMMA_JOIN16	ADT/VariadicFunction.h	311;"	d
LLVM_COMMA_JOIN16	ADT/VariadicFunction.h	38;"	d
LLVM_COMMA_JOIN17	ADT/VariadicFunction.h	312;"	d
LLVM_COMMA_JOIN17	ADT/VariadicFunction.h	39;"	d
LLVM_COMMA_JOIN18	ADT/VariadicFunction.h	313;"	d
LLVM_COMMA_JOIN18	ADT/VariadicFunction.h	40;"	d
LLVM_COMMA_JOIN19	ADT/VariadicFunction.h	314;"	d
LLVM_COMMA_JOIN19	ADT/VariadicFunction.h	41;"	d
LLVM_COMMA_JOIN2	ADT/VariadicFunction.h	24;"	d
LLVM_COMMA_JOIN2	ADT/VariadicFunction.h	297;"	d
LLVM_COMMA_JOIN20	ADT/VariadicFunction.h	315;"	d
LLVM_COMMA_JOIN20	ADT/VariadicFunction.h	42;"	d
LLVM_COMMA_JOIN21	ADT/VariadicFunction.h	316;"	d
LLVM_COMMA_JOIN21	ADT/VariadicFunction.h	43;"	d
LLVM_COMMA_JOIN22	ADT/VariadicFunction.h	317;"	d
LLVM_COMMA_JOIN22	ADT/VariadicFunction.h	44;"	d
LLVM_COMMA_JOIN23	ADT/VariadicFunction.h	318;"	d
LLVM_COMMA_JOIN23	ADT/VariadicFunction.h	45;"	d
LLVM_COMMA_JOIN24	ADT/VariadicFunction.h	319;"	d
LLVM_COMMA_JOIN24	ADT/VariadicFunction.h	46;"	d
LLVM_COMMA_JOIN25	ADT/VariadicFunction.h	320;"	d
LLVM_COMMA_JOIN25	ADT/VariadicFunction.h	47;"	d
LLVM_COMMA_JOIN26	ADT/VariadicFunction.h	321;"	d
LLVM_COMMA_JOIN26	ADT/VariadicFunction.h	48;"	d
LLVM_COMMA_JOIN27	ADT/VariadicFunction.h	322;"	d
LLVM_COMMA_JOIN27	ADT/VariadicFunction.h	49;"	d
LLVM_COMMA_JOIN28	ADT/VariadicFunction.h	323;"	d
LLVM_COMMA_JOIN28	ADT/VariadicFunction.h	50;"	d
LLVM_COMMA_JOIN29	ADT/VariadicFunction.h	324;"	d
LLVM_COMMA_JOIN29	ADT/VariadicFunction.h	51;"	d
LLVM_COMMA_JOIN3	ADT/VariadicFunction.h	25;"	d
LLVM_COMMA_JOIN3	ADT/VariadicFunction.h	298;"	d
LLVM_COMMA_JOIN30	ADT/VariadicFunction.h	325;"	d
LLVM_COMMA_JOIN30	ADT/VariadicFunction.h	52;"	d
LLVM_COMMA_JOIN31	ADT/VariadicFunction.h	326;"	d
LLVM_COMMA_JOIN31	ADT/VariadicFunction.h	53;"	d
LLVM_COMMA_JOIN32	ADT/VariadicFunction.h	327;"	d
LLVM_COMMA_JOIN32	ADT/VariadicFunction.h	54;"	d
LLVM_COMMA_JOIN4	ADT/VariadicFunction.h	26;"	d
LLVM_COMMA_JOIN4	ADT/VariadicFunction.h	299;"	d
LLVM_COMMA_JOIN5	ADT/VariadicFunction.h	27;"	d
LLVM_COMMA_JOIN5	ADT/VariadicFunction.h	300;"	d
LLVM_COMMA_JOIN6	ADT/VariadicFunction.h	28;"	d
LLVM_COMMA_JOIN6	ADT/VariadicFunction.h	301;"	d
LLVM_COMMA_JOIN7	ADT/VariadicFunction.h	29;"	d
LLVM_COMMA_JOIN7	ADT/VariadicFunction.h	302;"	d
LLVM_COMMA_JOIN8	ADT/VariadicFunction.h	303;"	d
LLVM_COMMA_JOIN8	ADT/VariadicFunction.h	30;"	d
LLVM_COMMA_JOIN9	ADT/VariadicFunction.h	304;"	d
LLVM_COMMA_JOIN9	ADT/VariadicFunction.h	31;"	d
LLVM_CONSTANTS_H	Constants.h	22;"	d
LLVM_CONSTANT_H	Constant.h	15;"	d
LLVM_DARWIN_TARGET_ASM_INFO_H	MC/MCAsmInfoDarwin.h	16;"	d
LLVM_DATALAYOUT_H	DataLayout.h	21;"	d
LLVM_DEBUGINFO_DICONTEXT_H	DebugInfo/DIContext.h	16;"	d
LLVM_DEFAULT_PASS_SUPPORT_H	DefaultPasses.h	15;"	d
LLVM_DEFINED_HAS_FEATURE	Support/type_traits.h	25;"	d
LLVM_DEFINE_OVERLOAD	ADT/VariadicFunction.h	111;"	d
LLVM_DEFINE_OVERLOAD	ADT/VariadicFunction.h	148;"	d
LLVM_DEFINE_OVERLOAD	ADT/VariadicFunction.h	158;"	d
LLVM_DEFINE_OVERLOAD	ADT/VariadicFunction.h	195;"	d
LLVM_DEFINE_OVERLOAD	ADT/VariadicFunction.h	205;"	d
LLVM_DEFINE_OVERLOAD	ADT/VariadicFunction.h	243;"	d
LLVM_DEFINE_OVERLOAD	ADT/VariadicFunction.h	254;"	d
LLVM_DEFINE_OVERLOAD	ADT/VariadicFunction.h	292;"	d
LLVM_DELETED_FUNCTION	ADT/ImmutableList.h	/^  ImmutableListImpl(const ImmutableListImpl&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ImmutableListImpl
LLVM_DELETED_FUNCTION	ADT/ImmutableList.h	/^  void operator=(const ImmutableListImpl&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ImmutableListImpl
LLVM_DELETED_FUNCTION	ADT/ImmutableMap.h	/^    Factory(const Factory& RHS) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ImmutableMap::Factory
LLVM_DELETED_FUNCTION	ADT/ImmutableMap.h	/^    void operator=(const Factory& RHS) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ImmutableMap::Factory
LLVM_DELETED_FUNCTION	ADT/ImmutableSet.h	/^    Factory(const Factory& RHS) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ImmutableSet::Factory
LLVM_DELETED_FUNCTION	ADT/ImmutableSet.h	/^    void operator=(const Factory& RHS) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ImmutableSet::Factory
LLVM_DELETED_FUNCTION	ADT/OwningPtr.h	/^  OwningArrayPtr &operator=(OwningArrayPtr const &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::OwningArrayPtr
LLVM_DELETED_FUNCTION	ADT/OwningPtr.h	/^  OwningArrayPtr(OwningArrayPtr const &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::OwningArrayPtr
LLVM_DELETED_FUNCTION	ADT/OwningPtr.h	/^  OwningPtr &operator=(OwningPtr const &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::OwningPtr
LLVM_DELETED_FUNCTION	ADT/OwningPtr.h	/^  OwningPtr(OwningPtr const &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::OwningPtr
LLVM_DELETED_FUNCTION	ADT/ScopedHashTable.h	/^  ScopedHashTableScope(ScopedHashTableScope&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ScopedHashTableScope
LLVM_DELETED_FUNCTION	ADT/ScopedHashTable.h	/^  void operator=(ScopedHashTableScope&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ScopedHashTableScope
LLVM_DELETED_FUNCTION	ADT/SmallPtrSet.h	/^  void operator=(const SmallPtrSetImpl &RHS) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SmallPtrSetImpl
LLVM_DELETED_FUNCTION	ADT/SparseSet.h	/^  SparseSet &operator=(const SparseSet&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SparseSet
LLVM_DELETED_FUNCTION	ADT/SparseSet.h	/^  SparseSet(const SparseSet&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SparseSet
LLVM_DELETED_FUNCTION	ADT/ValueMap.h	/^  ValueMap& operator=(const ValueMap&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ValueMap
LLVM_DELETED_FUNCTION	ADT/ValueMap.h	/^  ValueMap(const ValueMap&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ValueMap
LLVM_DELETED_FUNCTION	ADT/ilist.h	/^  iplist(const iplist &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::iplist
LLVM_DELETED_FUNCTION	ADT/ilist.h	/^  void operator=(const iplist &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::iplist
LLVM_DELETED_FUNCTION	Analysis/AliasSetTracker.h	/^  AliasSet(const AliasSet &AS) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::AliasSet
LLVM_DELETED_FUNCTION	Analysis/AliasSetTracker.h	/^  void operator=(const AliasSet &AS) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::AliasSet
LLVM_DELETED_FUNCTION	Analysis/CallGraph.h	/^  CallGraphNode(const CallGraphNode &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::CallGraphNode
LLVM_DELETED_FUNCTION	Analysis/CallGraph.h	/^  void operator=(const CallGraphNode &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::CallGraphNode
LLVM_DELETED_FUNCTION	Analysis/LazyValueInfo.h	/^  LazyValueInfo(const LazyValueInfo&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LazyValueInfo
LLVM_DELETED_FUNCTION	Analysis/LazyValueInfo.h	/^  void operator=(const LazyValueInfo&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LazyValueInfo
LLVM_DELETED_FUNCTION	Analysis/LoopInfo.h	/^    operator=(const LoopBase<BlockT, LoopT> &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LoopBase
LLVM_DELETED_FUNCTION	Analysis/LoopInfo.h	/^  LoopBase(const LoopBase<BlockT, LoopT> &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LoopBase
LLVM_DELETED_FUNCTION	Analysis/LoopInfo.h	/^  LoopInfo(const LoopInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LoopInfo
LLVM_DELETED_FUNCTION	Analysis/LoopInfo.h	/^  LoopInfoBase(const LoopInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LoopInfoBase
LLVM_DELETED_FUNCTION	Analysis/LoopInfo.h	/^  void operator=(const LoopInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LoopInfo
LLVM_DELETED_FUNCTION	Analysis/LoopInfo.h	/^  void operator=(const LoopInfoBase &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LoopInfoBase
LLVM_DELETED_FUNCTION	Analysis/RegionInfo.h	/^  Region(const Region &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Region
LLVM_DELETED_FUNCTION	Analysis/RegionInfo.h	/^  RegionInfo(const RegionInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RegionInfo
LLVM_DELETED_FUNCTION	Analysis/RegionInfo.h	/^  RegionNode(const RegionNode &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RegionNode
LLVM_DELETED_FUNCTION	Analysis/RegionInfo.h	/^  const Region &operator=(const Region &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Region
LLVM_DELETED_FUNCTION	Analysis/RegionInfo.h	/^  const RegionInfo &operator=(const RegionInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RegionInfo
LLVM_DELETED_FUNCTION	Analysis/RegionInfo.h	/^  const RegionNode &operator=(const RegionNode &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RegionNode
LLVM_DELETED_FUNCTION	Analysis/ScalarEvolution.h	/^    SCEV(const SCEV &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SCEV
LLVM_DELETED_FUNCTION	Analysis/ScalarEvolution.h	/^    void operator=(const SCEV &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SCEV
LLVM_DELETED_FUNCTION	Analysis/SparsePropagation.h	/^  SparseSolver(const SparseSolver&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SparseSolver
LLVM_DELETED_FUNCTION	Analysis/SparsePropagation.h	/^  void operator=(const SparseSolver&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SparseSolver
LLVM_DELETED_FUNCTION	BasicBlock.h	/^  BasicBlock(const BasicBlock &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BasicBlock
LLVM_DELETED_FUNCTION	BasicBlock.h	/^  void operator=(const BasicBlock &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BasicBlock
LLVM_DELETED_FUNCTION	Bitcode/Archive.h	/^    Archive& operator=(const Archive&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Archive
LLVM_DELETED_FUNCTION	Bitcode/Archive.h	/^    Archive() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Archive
LLVM_DELETED_FUNCTION	Bitcode/Archive.h	/^    Archive(const Archive&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Archive
LLVM_DELETED_FUNCTION	Bitcode/BitstreamReader.h	/^  BitstreamReader(const BitstreamReader&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BitstreamReader
LLVM_DELETED_FUNCTION	Bitcode/BitstreamReader.h	/^  void operator=(const BitstreamReader&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BitstreamReader
LLVM_DELETED_FUNCTION	CodeGen/GCMetadataPrinter.h	/^      operator=(const GCMetadataPrinter &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::GCMetadataPrinter
LLVM_DELETED_FUNCTION	CodeGen/GCMetadataPrinter.h	/^    GCMetadataPrinter(const GCMetadataPrinter &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::GCMetadataPrinter
LLVM_DELETED_FUNCTION	CodeGen/LiveInterval.h	/^    LiveInterval& operator=(const LiveInterval& rhs) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LiveInterval
LLVM_DELETED_FUNCTION	CodeGen/MachineFunction.h	/^  MachineFunction(const MachineFunction &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineFunction
LLVM_DELETED_FUNCTION	CodeGen/MachineFunction.h	/^  void operator=(const MachineFunction&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineFunction
LLVM_DELETED_FUNCTION	CodeGen/MachineInstr.h	/^  MachineInstr(const MachineInstr&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineInstr
LLVM_DELETED_FUNCTION	CodeGen/MachineInstr.h	/^  void operator=(const MachineInstr&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineInstr
LLVM_DELETED_FUNCTION	CodeGen/MachineLoopInfo.h	/^  MachineLoopInfo(const MachineLoopInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineLoopInfo
LLVM_DELETED_FUNCTION	CodeGen/MachineLoopInfo.h	/^  void operator=(const MachineLoopInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineLoopInfo
LLVM_DELETED_FUNCTION	CodeGen/MachineRegisterInfo.h	/^  MachineRegisterInfo(const MachineRegisterInfo&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineRegisterInfo
LLVM_DELETED_FUNCTION	CodeGen/MachineRegisterInfo.h	/^  void operator=(const MachineRegisterInfo&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineRegisterInfo
LLVM_DELETED_FUNCTION	CodeGen/MachineSSAUpdater.h	/^  MachineSSAUpdater(const MachineSSAUpdater&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineSSAUpdater
LLVM_DELETED_FUNCTION	CodeGen/MachineSSAUpdater.h	/^  void operator=(const MachineSSAUpdater&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MachineSSAUpdater
LLVM_DELETED_FUNCTION	CodeGen/RegAllocPBQP.h	/^    PBQPBuilder(const PBQPBuilder&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PBQPBuilder
LLVM_DELETED_FUNCTION	CodeGen/RegAllocPBQP.h	/^    void operator=(const PBQPBuilder&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PBQPBuilder
LLVM_DELETED_FUNCTION	CodeGen/SelectionDAG.h	/^  SDDbgInfo(const SDDbgInfo&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SDDbgInfo
LLVM_DELETED_FUNCTION	CodeGen/SelectionDAG.h	/^  SelectionDAG(const SelectionDAG&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SelectionDAG
LLVM_DELETED_FUNCTION	CodeGen/SelectionDAG.h	/^  void operator=(const SDDbgInfo&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SDDbgInfo
LLVM_DELETED_FUNCTION	CodeGen/SelectionDAG.h	/^  void operator=(const SelectionDAG&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SelectionDAG
LLVM_DELETED_FUNCTION	CodeGen/SelectionDAGNodes.h	/^  SDUse(const SDUse &U) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SDUse
LLVM_DELETED_FUNCTION	CodeGen/SelectionDAGNodes.h	/^  explicit BuildVectorSDNode() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BuildVectorSDNode
LLVM_DELETED_FUNCTION	CodeGen/SelectionDAGNodes.h	/^  void operator=(const SDUse &U) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SDUse
LLVM_DELETED_FUNCTION	Constant.h	/^  Constant(const Constant &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Constant
LLVM_DELETED_FUNCTION	Constant.h	/^  void operator=(const Constant &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Constant
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantAggregateZero(const ConstantAggregateZero &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantAggregateZero
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantArray(const ConstantArray &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantArray
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantDataArray(const ConstantDataArray &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantDataArray
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantDataSequential(const ConstantDataSequential &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantDataSequential
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantDataVector(const ConstantDataVector &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantDataVector
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantFP(const ConstantFP &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantFP
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantInt(const ConstantInt &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantInt
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantPointerNull(const ConstantPointerNull &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantPointerNull
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantStruct(const ConstantStruct &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantStruct
LLVM_DELETED_FUNCTION	Constants.h	/^  ConstantVector(const ConstantVector &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantVector
LLVM_DELETED_FUNCTION	Constants.h	/^  UndefValue(const UndefValue &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::UndefValue
LLVM_DELETED_FUNCTION	Constants.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BlockAddress
LLVM_DELETED_FUNCTION	Constants.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantAggregateZero
LLVM_DELETED_FUNCTION	Constants.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantDataArray
LLVM_DELETED_FUNCTION	Constants.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantDataSequential
LLVM_DELETED_FUNCTION	Constants.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantDataVector
LLVM_DELETED_FUNCTION	Constants.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantFP
LLVM_DELETED_FUNCTION	Constants.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantInt
LLVM_DELETED_FUNCTION	Constants.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ConstantPointerNull
LLVM_DELETED_FUNCTION	Constants.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::UndefValue
LLVM_DELETED_FUNCTION	DIBuilder.h	/^    DIBuilder(const DIBuilder &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::DIBuilder
LLVM_DELETED_FUNCTION	DIBuilder.h	/^    void operator=(const DIBuilder &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::DIBuilder
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  ArrayType(const ArrayType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ArrayType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  FunctionType(const FunctionType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::FunctionType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  PointerType(const PointerType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PointerType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  SequentialType(const SequentialType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SequentialType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  StructType(const StructType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::StructType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  VectorType(const VectorType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::VectorType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  const ArrayType &operator=(const ArrayType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ArrayType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  const FunctionType &operator=(const FunctionType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::FunctionType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  const PointerType &operator=(const PointerType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PointerType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  const SequentialType &operator=(const SequentialType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SequentialType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  const StructType &operator=(const StructType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::StructType
LLVM_DELETED_FUNCTION	DerivedTypes.h	/^  const VectorType &operator=(const VectorType &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::VectorType
LLVM_DELETED_FUNCTION	ExecutionEngine/ObjectImage.h	/^  ObjectImage() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ObjectImage
LLVM_DELETED_FUNCTION	ExecutionEngine/ObjectImage.h	/^  ObjectImage(const ObjectImage &other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ObjectImage
LLVM_DELETED_FUNCTION	ExecutionEngine/RuntimeDyld.h	/^  RTDyldMemoryManager(const RTDyldMemoryManager&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RTDyldMemoryManager
LLVM_DELETED_FUNCTION	ExecutionEngine/RuntimeDyld.h	/^  RuntimeDyld(const RuntimeDyld &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RuntimeDyld
LLVM_DELETED_FUNCTION	ExecutionEngine/RuntimeDyld.h	/^  void operator=(const RTDyldMemoryManager&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RTDyldMemoryManager
LLVM_DELETED_FUNCTION	ExecutionEngine/RuntimeDyld.h	/^  void operator=(const RuntimeDyld &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RuntimeDyld
LLVM_DELETED_FUNCTION	Function.h	/^  Function(const Function&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Function
LLVM_DELETED_FUNCTION	Function.h	/^  void operator=(const Function&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Function
LLVM_DELETED_FUNCTION	GlobalAlias.h	/^  GlobalAlias(const GlobalAlias &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::GlobalAlias
LLVM_DELETED_FUNCTION	GlobalAlias.h	/^  void operator=(const GlobalAlias &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::GlobalAlias
LLVM_DELETED_FUNCTION	GlobalValue.h	/^  GlobalValue(const GlobalValue &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::GlobalValue
LLVM_DELETED_FUNCTION	GlobalVariable.h	/^  GlobalVariable(const GlobalVariable &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::GlobalVariable
LLVM_DELETED_FUNCTION	GlobalVariable.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::GlobalVariable
LLVM_DELETED_FUNCTION	GlobalVariable.h	/^  void operator=(const GlobalVariable &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::GlobalVariable
LLVM_DELETED_FUNCTION	IRBuilder.h	/^  Value *CreateIntCast(Value *, Type *, const char *) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::IRBuilder
LLVM_DELETED_FUNCTION	InlineAsm.h	/^  InlineAsm(const InlineAsm &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::InlineAsm
LLVM_DELETED_FUNCTION	InlineAsm.h	/^  void operator=(const InlineAsm&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::InlineAsm
LLVM_DELETED_FUNCTION	InstrTypes.h	/^  CmpInst() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::CmpInst
LLVM_DELETED_FUNCTION	InstrTypes.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BinaryOperator
LLVM_DELETED_FUNCTION	InstrTypes.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::CmpInst
LLVM_DELETED_FUNCTION	InstrTypes.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::UnaryInstruction
LLVM_DELETED_FUNCTION	Instruction.h	/^  Instruction(const Instruction &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Instruction
LLVM_DELETED_FUNCTION	Instruction.h	/^  void operator=(const Instruction &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Instruction
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::AtomicCmpXchgInst
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::AtomicRMWInst
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::FenceInst
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::IndirectBrInst
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::InsertValueInst
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LandingPadInst
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PHINode
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::StoreInst
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SwitchInst
LLVM_DELETED_FUNCTION	Instructions.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::UnreachableInst
LLVM_DELETED_FUNCTION	IntrinsicInst.h	/^    IntrinsicInst() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::IntrinsicInst
LLVM_DELETED_FUNCTION	IntrinsicInst.h	/^    IntrinsicInst(const IntrinsicInst&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::IntrinsicInst
LLVM_DELETED_FUNCTION	IntrinsicInst.h	/^    void operator=(const IntrinsicInst&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::IntrinsicInst
LLVM_DELETED_FUNCTION	LLVMContext.h	/^  LLVMContext(LLVMContext&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LLVMContext
LLVM_DELETED_FUNCTION	LLVMContext.h	/^  void operator=(LLVMContext&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LLVMContext
LLVM_DELETED_FUNCTION	MC/MCAsmBackend.h	/^  MCAsmBackend(const MCAsmBackend &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAsmBackend
LLVM_DELETED_FUNCTION	MC/MCAsmBackend.h	/^  void operator=(const MCAsmBackend &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAsmBackend
LLVM_DELETED_FUNCTION	MC/MCAssembler.h	/^  MCAssembler(const MCAssembler&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAssembler
LLVM_DELETED_FUNCTION	MC/MCAssembler.h	/^  MCFragment(const MCFragment&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCFragment
LLVM_DELETED_FUNCTION	MC/MCAssembler.h	/^  MCSectionData(const MCSectionData&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCSectionData
LLVM_DELETED_FUNCTION	MC/MCAssembler.h	/^  void operator=(const MCAssembler&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAssembler
LLVM_DELETED_FUNCTION	MC/MCAssembler.h	/^  void operator=(const MCFragment&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCFragment
LLVM_DELETED_FUNCTION	MC/MCAssembler.h	/^  void operator=(const MCSectionData&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCSectionData
LLVM_DELETED_FUNCTION	MC/MCCodeEmitter.h	/^  MCCodeEmitter(const MCCodeEmitter &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCCodeEmitter
LLVM_DELETED_FUNCTION	MC/MCCodeEmitter.h	/^  void operator=(const MCCodeEmitter &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCCodeEmitter
LLVM_DELETED_FUNCTION	MC/MCContext.h	/^    MCContext &operator=(const MCContext&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCContext
LLVM_DELETED_FUNCTION	MC/MCContext.h	/^    MCContext(const MCContext&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCContext
LLVM_DELETED_FUNCTION	MC/MCDwarf.h	/^    MCDwarfFile(const MCDwarfFile&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCDwarfFile
LLVM_DELETED_FUNCTION	MC/MCDwarf.h	/^    MCLineSection(const MCLineSection&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCLineSection
LLVM_DELETED_FUNCTION	MC/MCDwarf.h	/^    void operator=(const MCDwarfFile&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCDwarfFile
LLVM_DELETED_FUNCTION	MC/MCDwarf.h	/^    void operator=(const MCLineSection&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCLineSection
LLVM_DELETED_FUNCTION	MC/MCExpr.h	/^  MCExpr(const MCExpr&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCExpr
LLVM_DELETED_FUNCTION	MC/MCExpr.h	/^  void operator=(const MCExpr&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCExpr
LLVM_DELETED_FUNCTION	MC/MCLabel.h	/^    MCLabel(const MCLabel&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCLabel
LLVM_DELETED_FUNCTION	MC/MCLabel.h	/^    void operator=(const MCLabel&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCLabel
LLVM_DELETED_FUNCTION	MC/MCObjectWriter.h	/^  MCObjectWriter(const MCObjectWriter &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCObjectWriter
LLVM_DELETED_FUNCTION	MC/MCObjectWriter.h	/^  void operator=(const MCObjectWriter &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCObjectWriter
LLVM_DELETED_FUNCTION	MC/MCParser/AsmLexer.h	/^  AsmLexer(const AsmLexer&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::AsmLexer
LLVM_DELETED_FUNCTION	MC/MCParser/AsmLexer.h	/^  void operator=(const AsmLexer&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::AsmLexer
LLVM_DELETED_FUNCTION	MC/MCParser/MCAsmLexer.h	/^  MCAsmLexer(const MCAsmLexer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAsmLexer
LLVM_DELETED_FUNCTION	MC/MCParser/MCAsmLexer.h	/^  void operator=(const MCAsmLexer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAsmLexer
LLVM_DELETED_FUNCTION	MC/MCParser/MCAsmParser.h	/^  MCAsmParser(const MCAsmParser &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAsmParser
LLVM_DELETED_FUNCTION	MC/MCParser/MCAsmParser.h	/^  void operator=(const MCAsmParser &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAsmParser
LLVM_DELETED_FUNCTION	MC/MCParser/MCAsmParserExtension.h	/^  MCAsmParserExtension(const MCAsmParserExtension &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAsmParserExtension
LLVM_DELETED_FUNCTION	MC/MCParser/MCAsmParserExtension.h	/^  void operator=(const MCAsmParserExtension &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCAsmParserExtension
LLVM_DELETED_FUNCTION	MC/MCSection.h	/^    MCSection(const MCSection&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCSection
LLVM_DELETED_FUNCTION	MC/MCSection.h	/^    void operator=(const MCSection&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCSection
LLVM_DELETED_FUNCTION	MC/MCStreamer.h	/^    MCStreamer &operator=(const MCStreamer&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCStreamer
LLVM_DELETED_FUNCTION	MC/MCStreamer.h	/^    MCStreamer(const MCStreamer&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCStreamer
LLVM_DELETED_FUNCTION	MC/MCSymbol.h	/^    MCSymbol(const MCSymbol&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCSymbol
LLVM_DELETED_FUNCTION	MC/MCSymbol.h	/^    void operator=(const MCSymbol&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCSymbol
LLVM_DELETED_FUNCTION	MC/MCTargetAsmLexer.h	/^  MCTargetAsmLexer(const MCTargetAsmLexer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCTargetAsmLexer
LLVM_DELETED_FUNCTION	MC/MCTargetAsmLexer.h	/^  void operator=(const MCTargetAsmLexer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCTargetAsmLexer
LLVM_DELETED_FUNCTION	MC/MCTargetAsmParser.h	/^  MCTargetAsmParser(const MCTargetAsmParser &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCTargetAsmParser
LLVM_DELETED_FUNCTION	MC/MCTargetAsmParser.h	/^  void operator=(const MCTargetAsmParser &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MCTargetAsmParser
LLVM_DELETED_FUNCTION	Metadata.h	/^  MDNode(const MDNode &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MDNode
LLVM_DELETED_FUNCTION	Metadata.h	/^  MDString(const MDString &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MDString
LLVM_DELETED_FUNCTION	Metadata.h	/^  NamedMDNode(const NamedMDNode &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::NamedMDNode
LLVM_DELETED_FUNCTION	Metadata.h	/^  void operator=(const MDNode &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MDNode
LLVM_DELETED_FUNCTION	Object/Binary.h	/^  Binary() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::object::Binary
LLVM_DELETED_FUNCTION	Object/Binary.h	/^  Binary(const Binary &other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::object::Binary
LLVM_DELETED_FUNCTION	Object/ObjectFile.h	/^  ObjectFile() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::object::ObjectFile
LLVM_DELETED_FUNCTION	Object/ObjectFile.h	/^  ObjectFile(const ObjectFile &other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::object::ObjectFile
LLVM_DELETED_FUNCTION	Operator.h	/^  Operator() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Operator
LLVM_DELETED_FUNCTION	Operator.h	/^  void *operator new(size_t s) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Operator
LLVM_DELETED_FUNCTION	Operator.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Operator
LLVM_DELETED_FUNCTION	Pass.h	/^  Pass(const Pass &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Pass
LLVM_DELETED_FUNCTION	Pass.h	/^  void operator=(const Pass&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Pass
LLVM_DELETED_FUNCTION	PassAnalysisSupport.h	/^  AnalysisResolver() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::AnalysisResolver
LLVM_DELETED_FUNCTION	PassSupport.h	/^  PassInfo(const PassInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PassInfo
LLVM_DELETED_FUNCTION	PassSupport.h	/^  void operator=(const PassInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PassInfo
LLVM_DELETED_FUNCTION	Support/Allocator.h	/^  BumpPtrAllocator(const BumpPtrAllocator &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BumpPtrAllocator
LLVM_DELETED_FUNCTION	Support/Allocator.h	/^  void operator=(const BumpPtrAllocator &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BumpPtrAllocator
LLVM_DELETED_FUNCTION	Support/Compiler.h	55;"	d
LLVM_DELETED_FUNCTION	Support/Compiler.h	57;"	d
LLVM_DELETED_FUNCTION	Support/FileOutputBuffer.h	/^  FileOutputBuffer &operator=(const FileOutputBuffer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::FileOutputBuffer
LLVM_DELETED_FUNCTION	Support/FileOutputBuffer.h	/^  FileOutputBuffer(const FileOutputBuffer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::FileOutputBuffer
LLVM_DELETED_FUNCTION	Support/FileSystem.h	/^  mapped_file_region &operator =(mapped_file_region&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::fs::mapped_file_region
LLVM_DELETED_FUNCTION	Support/FileSystem.h	/^  mapped_file_region() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::fs::mapped_file_region
LLVM_DELETED_FUNCTION	Support/FileSystem.h	/^  mapped_file_region(mapped_file_region&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::fs::mapped_file_region
LLVM_DELETED_FUNCTION	Support/LockFileManager.h	/^  LockFileManager &operator=(const LockFileManager &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LockFileManager
LLVM_DELETED_FUNCTION	Support/LockFileManager.h	/^  LockFileManager(const LockFileManager &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LockFileManager
LLVM_DELETED_FUNCTION	Support/MemoryBuffer.h	/^  MemoryBuffer &operator=(const MemoryBuffer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MemoryBuffer
LLVM_DELETED_FUNCTION	Support/MemoryBuffer.h	/^  MemoryBuffer(const MemoryBuffer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MemoryBuffer
LLVM_DELETED_FUNCTION	Support/Mutex.h	/^      MutexImpl(const MutexImpl &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::MutexImpl
LLVM_DELETED_FUNCTION	Support/Mutex.h	/^      void operator=(const MutexImpl &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::MutexImpl
LLVM_DELETED_FUNCTION	Support/MutexGuard.h	/^    MutexGuard(const MutexGuard &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MutexGuard
LLVM_DELETED_FUNCTION	Support/MutexGuard.h	/^    void operator=(const MutexGuard &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MutexGuard
LLVM_DELETED_FUNCTION	Support/PrettyStackTrace.h	/^    PrettyStackTraceEntry(const PrettyStackTraceEntry &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PrettyStackTraceEntry
LLVM_DELETED_FUNCTION	Support/PrettyStackTrace.h	/^    void operator=(const PrettyStackTraceEntry&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PrettyStackTraceEntry
LLVM_DELETED_FUNCTION	Support/Program.h	/^    Program& operator=(const Program& other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::Program
LLVM_DELETED_FUNCTION	Support/Program.h	/^    Program(const Program& other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::Program
LLVM_DELETED_FUNCTION	Support/RWMutex.h	/^      RWMutexImpl(const RWMutexImpl & original) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::RWMutexImpl
LLVM_DELETED_FUNCTION	Support/RWMutex.h	/^      void operator=(const RWMutexImpl &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::RWMutexImpl
LLVM_DELETED_FUNCTION	Support/Registry.h	/^    Registry() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Registry
LLVM_DELETED_FUNCTION	Support/Registry.h	/^    RegistryTraits() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RegistryTraits
LLVM_DELETED_FUNCTION	Support/SourceMgr.h	/^  SourceMgr(const SourceMgr&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SourceMgr
LLVM_DELETED_FUNCTION	Support/SourceMgr.h	/^  void operator=(const SourceMgr&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SourceMgr
LLVM_DELETED_FUNCTION	Support/StreamableMemoryObject.h	/^  StreamingMemoryObject(const StreamingMemoryObject&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_DELETED_FUNCTION	Support/StreamableMemoryObject.h	/^  void operator=(const StreamingMemoryObject&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_DELETED_FUNCTION	Support/Timer.h	/^  TimeRegion(const TimeRegion &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TimeRegion
LLVM_DELETED_FUNCTION	Support/Timer.h	/^  TimerGroup(const TimerGroup &TG) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TimerGroup
LLVM_DELETED_FUNCTION	Support/Timer.h	/^  void operator=(const TimerGroup &TG) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TimerGroup
LLVM_DELETED_FUNCTION	Support/ValueHandle.h	/^  ValueHandleBase(const ValueHandleBase&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ValueHandleBase
LLVM_DELETED_FUNCTION	Support/raw_ostream.h	/^  raw_ostream(const raw_ostream &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::raw_ostream
LLVM_DELETED_FUNCTION	Support/raw_ostream.h	/^  void operator=(const raw_ostream &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::raw_ostream
LLVM_DELETED_FUNCTION	Support/system_error.h	/^  error_category& operator=(const error_category&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::error_category
LLVM_DELETED_FUNCTION	Support/system_error.h	/^  error_category(const error_category&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::error_category
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  BinOpInit &operator=(const BinOpInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BinOpInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  BinOpInit(const BinOpInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BinOpInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  BitInit &operator=(BitInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BitInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  BitInit(const BitInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BitInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  BitsInit &operator=(const BitsInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BitsInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  BitsInit(const BitsInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BitsInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  DagInit &operator=(const DagInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::DagInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  DagInit(const DagInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::DagInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  DefInit &operator=(const DefInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::DefInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  DefInit(const DefInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::DefInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  FieldInit &operator=(const FieldInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::FieldInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  FieldInit(const FieldInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::FieldInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  Init &operator=(const Init &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Init
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  Init(const Init &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Init
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  IntInit &operator=(const IntInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::IntInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  IntInit(const IntInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::IntInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  ListInit &operator=(const ListInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ListInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  ListInit(const ListInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ListInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  OpInit &operator=(OpInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::OpInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  OpInit(const OpInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::OpInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  StringInit &operator=(const StringInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::StringInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  StringInit(const StringInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::StringInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  TernOpInit &operator=(const TernOpInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TernOpInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  TernOpInit(const TernOpInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TernOpInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  TypedInit &operator=(const TypedInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TypedInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  TypedInit(const TypedInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TypedInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  UnOpInit &operator=(const UnOpInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::UnOpInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  UnOpInit(const UnOpInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::UnOpInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  UnsetInit &operator=(const UnsetInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::UnsetInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  UnsetInit(const UnsetInit &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::UnsetInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  VarBitInit &operator=(const VarBitInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::VarBitInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  VarBitInit(const VarBitInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::VarBitInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  VarInit &operator=(const VarInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::VarInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  VarInit(const VarInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::VarInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  VarListElementInit(const VarListElementInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::VarListElementInit
LLVM_DELETED_FUNCTION	TableGen/Record.h	/^  void operator=(const VarListElementInit &Other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::VarListElementInit
LLVM_DELETED_FUNCTION	Target/TargetInstrInfo.h	/^  TargetInstrInfo(const TargetInstrInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetInstrInfo
LLVM_DELETED_FUNCTION	Target/TargetInstrInfo.h	/^  void operator=(const TargetInstrInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetInstrInfo
LLVM_DELETED_FUNCTION	Target/TargetIntrinsicInfo.h	/^  TargetIntrinsicInfo(const TargetIntrinsicInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetIntrinsicInfo
LLVM_DELETED_FUNCTION	Target/TargetIntrinsicInfo.h	/^  void operator=(const TargetIntrinsicInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetIntrinsicInfo
LLVM_DELETED_FUNCTION	Target/TargetLowering.h	/^  TargetLowering(const TargetLowering&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetLowering
LLVM_DELETED_FUNCTION	Target/TargetLowering.h	/^  void operator=(const TargetLowering&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetLowering
LLVM_DELETED_FUNCTION	Target/TargetLoweringObjectFile.h	/^    const TargetLoweringObjectFile&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetLoweringObjectFile
LLVM_DELETED_FUNCTION	Target/TargetLoweringObjectFile.h	/^  void operator=(const TargetLoweringObjectFile&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetLoweringObjectFile
LLVM_DELETED_FUNCTION	Target/TargetMachine.h	/^  TargetMachine(const TargetMachine &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetMachine
LLVM_DELETED_FUNCTION	Target/TargetMachine.h	/^  void operator=(const TargetMachine &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetMachine
LLVM_DELETED_FUNCTION	Target/TargetSelectionDAGInfo.h	/^  TargetSelectionDAGInfo(const TargetSelectionDAGInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetSelectionDAGInfo
LLVM_DELETED_FUNCTION	Target/TargetSelectionDAGInfo.h	/^  void operator=(const TargetSelectionDAGInfo &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetSelectionDAGInfo
LLVM_DELETED_FUNCTION	Target/TargetSubtargetInfo.h	/^  TargetSubtargetInfo(const TargetSubtargetInfo&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetSubtargetInfo
LLVM_DELETED_FUNCTION	Target/TargetSubtargetInfo.h	/^  void operator=(const TargetSubtargetInfo&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TargetSubtargetInfo
LLVM_DELETED_FUNCTION	Transforms/Utils/SSAUpdater.h	/^  SSAUpdater(const SSAUpdater&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SSAUpdater
LLVM_DELETED_FUNCTION	Transforms/Utils/SSAUpdater.h	/^  void operator=(const SSAUpdater&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SSAUpdater
LLVM_DELETED_FUNCTION	Use.h	/^  Use(const Use &U) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Use
LLVM_DELETED_FUNCTION	User.h	/^  User(const User &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::User
LLVM_DELETED_FUNCTION	User.h	/^  void *operator new(size_t) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::User
LLVM_DELETED_FUNCTION	Value.h	/^  Value(const Value &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Value
LLVM_DELETED_FUNCTION	Value.h	/^  void operator=(const Value &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Value
LLVM_DERIVED_TYPES_H	DerivedTypes.h	19;"	d
LLVM_DISASSEMBLER	Support/TargetSelect.h	107;"	d
LLVM_DISASSEMBLER	Support/TargetSelect.h	42;"	d
LLVM_ELF_IMPORT_TYPES	Object/ELF.h	86;"	d
LLVM_ELF_SWITCH_RELOC_TYPE_NAME	Object/ELF.h	1481;"	d
LLVM_ELF_SWITCH_RELOC_TYPE_NAME	Object/ELF.h	1824;"	d
LLVM_EXECUTIONENGINE_OBJECTBUFFER_H	ExecutionEngine/ObjectBuffer.h	16;"	d
LLVM_EXECUTIONENGINE_OBJECTIMAGE_H	ExecutionEngine/ObjectImage.h	15;"	d
LLVM_EXECUTION_ENGINE_H	ExecutionEngine/ExecutionEngine.h	16;"	d
LLVM_EXECUTION_ENGINE_JIT_EVENTLISTENER_H	ExecutionEngine/JITEventListener.h	16;"	d
LLVM_EXECUTION_ENGINE_JIT_H	ExecutionEngine/JIT.h	16;"	d
LLVM_EXECUTION_ENGINE_JIT_MEMMANAGER_H	ExecutionEngine/JITMemoryManager.h	11;"	d
LLVM_EXECUTION_ENGINE_MCJIT_H	ExecutionEngine/MCJIT.h	16;"	d
LLVM_EXTENSION	Support/Compiler.h	180;"	d
LLVM_EXTENSION	Support/Compiler.h	182;"	d
LLVM_FINAL	Support/Compiler.h	63;"	d
LLVM_FINAL	Support/Compiler.h	65;"	d
LLVM_FLOAT_H	ADT/APFloat.h	101;"	d
LLVM_FUNCTION_H	Function.h	19;"	d
LLVM_GCOV_H	Support/GCOV.h	16;"	d
LLVM_GLOBALVALUE_H	GlobalValue.h	19;"	d
LLVM_GLOBAL_ALIAS_H	GlobalAlias.h	16;"	d
LLVM_GLOBAL_VARIABLE_H	GlobalVariable.h	21;"	d
LLVM_INITIALIZEPASSES_H	InitializePasses.h	16;"	d
LLVM_INLINEASM_H	InlineAsm.h	17;"	d
LLVM_INSTRUCTIONS_H	Instructions.h	17;"	d
LLVM_INSTRUCTION_H	Instruction.h	16;"	d
LLVM_INSTRUCTION_TYPES_H	InstrTypes.h	17;"	d
LLVM_INTERVAL_H	Analysis/Interval.h	21;"	d
LLVM_INTERVAL_ITERATOR_H	Analysis/IntervalIterator.h	34;"	d
LLVM_INTERVAL_PARTITION_H	Analysis/IntervalPartition.h	24;"	d
LLVM_INTRINSICINST_H	IntrinsicInst.h	25;"	d
LLVM_INTRINSICS_H	Intrinsics.h	17;"	d
LLVM_IRBUILDER_H	IRBuilder.h	16;"	d
LLVM_LIBRARY_VISIBILITY	Support/Compiler.h	81;"	d
LLVM_LIBRARY_VISIBILITY	Support/Compiler.h	83;"	d
LLVM_LIKELY	Support/Compiler.h	125;"	d
LLVM_LIKELY	Support/Compiler.h	128;"	d
LLVM_LINKALLPASSES_H	LinkAllPasses.h	16;"	d
LLVM_LINKALLVMCORE_H	LinkAllVMCore.h	17;"	d
LLVM_LINKER_H	Linker.h	15;"	d
LLVM_LLVMCONTEXT_H	LLVMContext.h	16;"	d
LLVM_LOOP_PASS_H	Analysis/LoopPass.h	16;"	d
LLVM_MC_MACHINELOCATION_H	MC/MachineLocation.h	22;"	d
LLVM_MC_MCASMBACKEND_H	MC/MCAsmBackend.h	11;"	d
LLVM_MC_MCASMLAYOUT_H	MC/MCAsmLayout.h	11;"	d
LLVM_MC_MCASMLEXER_H	MC/MCParser/MCAsmLexer.h	11;"	d
LLVM_MC_MCASMOPERAND_H	MC/MCParser/MCParsedAsmOperand.h	11;"	d
LLVM_MC_MCASMPARSEREXTENSION_H	MC/MCParser/MCAsmParserExtension.h	11;"	d
LLVM_MC_MCASMPARSER_H	MC/MCParser/MCAsmParser.h	11;"	d
LLVM_MC_MCASSEMBLER_H	MC/MCAssembler.h	11;"	d
LLVM_MC_MCATOM_H	MC/MCAtom.h	17;"	d
LLVM_MC_MCBJECTFILEINFO_H	MC/MCObjectFileInfo.h	15;"	d
LLVM_MC_MCCODEEMITTER_H	MC/MCCodeEmitter.h	11;"	d
LLVM_MC_MCCODEGENINFO_H	MC/MCCodeGenInfo.h	16;"	d
LLVM_MC_MCCONTEXT_H	MC/MCContext.h	11;"	d
LLVM_MC_MCDIRECTIVES_H	MC/MCDirectives.h	15;"	d
LLVM_MC_MCDWARF_H	MC/MCDwarf.h	16;"	d
LLVM_MC_MCELFOBJECTWRITER_H	MC/MCELFObjectWriter.h	11;"	d
LLVM_MC_MCELFSYMBOLFLAGS_H	MC/MCELFSymbolFlags.h	15;"	d
LLVM_MC_MCEXPR_H	MC/MCExpr.h	11;"	d
LLVM_MC_MCFIXUPKINDINFO_H	MC/MCFixupKindInfo.h	11;"	d
LLVM_MC_MCFIXUP_H	MC/MCFixup.h	11;"	d
LLVM_MC_MCINSTPRINTER_H	MC/MCInstPrinter.h	11;"	d
LLVM_MC_MCINSTRDESC_H	MC/MCInstrDesc.h	16;"	d
LLVM_MC_MCINSTRINFO_H	MC/MCInstrInfo.h	15;"	d
LLVM_MC_MCINSTRITINERARIES_H	MC/MCInstrItineraries.h	17;"	d
LLVM_MC_MCINST_H	MC/MCInst.h	17;"	d
LLVM_MC_MCLABEL_H	MC/MCLabel.h	15;"	d
LLVM_MC_MCMACHOBJECTWRITER_H	MC/MCMachObjectWriter.h	11;"	d
LLVM_MC_MCMACHOSYMBOLFLAGS_H	MC/MCMachOSymbolFlags.h	15;"	d
LLVM_MC_MCMODULE_H	MC/MCModule.h	16;"	d
LLVM_MC_MCOBJECTSTREAMER_H	MC/MCObjectStreamer.h	11;"	d
LLVM_MC_MCOBJECTWRITER_H	MC/MCObjectWriter.h	11;"	d
LLVM_MC_MCREGISTERINFO_H	MC/MCRegisterInfo.h	17;"	d
LLVM_MC_MCSCHEDMODEL_H	MC/MCSchedule.h	16;"	d
LLVM_MC_MCSECTIONCOFF_H	MC/MCSectionCOFF.h	15;"	d
LLVM_MC_MCSECTIONELF_H	MC/MCSectionELF.h	15;"	d
LLVM_MC_MCSECTIONMACHO_H	MC/MCSectionMachO.h	15;"	d
LLVM_MC_MCSECTION_H	MC/MCSection.h	15;"	d
LLVM_MC_MCSTREAMER_H	MC/MCStreamer.h	15;"	d
LLVM_MC_MCSUBTARGET_H	MC/MCSubtargetInfo.h	15;"	d
LLVM_MC_MCSYMBOL_H	MC/MCSymbol.h	15;"	d
LLVM_MC_MCTARGETASMLEXER_H	MC/MCTargetAsmLexer.h	11;"	d
LLVM_MC_MCVALUE_H	MC/MCValue.h	15;"	d
LLVM_MC_MCWIN64EH_H	MC/MCWin64EH.h	16;"	d
LLVM_MC_MCWINCOFFOBJECTWRITER_H	MC/MCWinCOFFObjectWriter.h	11;"	d
LLVM_MC_SECTIONKIND_H	MC/SectionKind.h	16;"	d
LLVM_MC_SUBTARGETFEATURE_H	MC/SubtargetFeature.h	19;"	d
LLVM_MC_TARGETPARSER_H	MC/MCTargetAsmParser.h	11;"	d
LLVM_MDBUILDER_H	MDBuilder.h	16;"	d
LLVM_METADATA_H	Metadata.h	17;"	d
LLVM_MODULE_H	Module.h	16;"	d
LLVM_OBJECT_ARCHIVE_H	Object/Archive.h	15;"	d
LLVM_OBJECT_BINARY_H	Object/Binary.h	15;"	d
LLVM_OBJECT_COFF_H	Object/COFF.h	15;"	d
LLVM_OBJECT_ELF_H	Object/ELF.h	15;"	d
LLVM_OBJECT_ERROR_H	Object/Error.h	15;"	d
LLVM_OBJECT_MACHOFORMAT_H	Object/MachOFormat.h	23;"	d
LLVM_OBJECT_MACHOOBJECT_H	Object/MachOObject.h	11;"	d
LLVM_OBJECT_MACHO_H	Object/MachO.h	16;"	d
LLVM_OBJECT_OBJECT_FILE_H	Object/ObjectFile.h	15;"	d
LLVM_OPERAND_TRAITS_H	OperandTraits.h	16;"	d
LLVM_OPERATOR_H	Operator.h	16;"	d
LLVM_OVERRIDE	InstrTypes.h	/^  virtual BinaryOperator *clone_impl() const LLVM_OVERRIDE;$/;"	m	class:llvm::BinaryOperator
LLVM_OVERRIDE	InstrTypes.h	/^  virtual void anchor() LLVM_OVERRIDE; \/\/ Out of line virtual method.$/;"	m	class:llvm::CmpInst
LLVM_OVERRIDE	InstrTypes.h	/^  virtual void anchor() LLVM_OVERRIDE;$/;"	m	class:llvm::CastInst
LLVM_OVERRIDE	Support/Allocator.h	/^  virtual MemSlab *Allocate(size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::MallocSlabAllocator
LLVM_OVERRIDE	Support/Allocator.h	/^  virtual void Deallocate(MemSlab *Slab) LLVM_OVERRIDE;$/;"	m	class:llvm::MallocSlabAllocator
LLVM_OVERRIDE	Support/CommandLine.h	/^  virtual size_t getOptionWidth() const LLVM_OVERRIDE;$/;"	m	class:llvm::cl::alias
LLVM_OVERRIDE	Support/CommandLine.h	/^  virtual void printOptionInfo(size_t GlobalWidth) const LLVM_OVERRIDE;$/;"	m	class:llvm::cl::alias
LLVM_OVERRIDE	Support/Compiler.h	71;"	d
LLVM_OVERRIDE	Support/Compiler.h	73;"	d
LLVM_OVERRIDE	Support/FormattedStream.h	/^    virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::formatted_raw_ostream
LLVM_OVERRIDE	Support/PrettyStackTrace.h	/^    virtual void print(raw_ostream &OS) const LLVM_OVERRIDE;$/;"	m	class:llvm::PrettyStackTraceProgram
LLVM_OVERRIDE	Support/PrettyStackTrace.h	/^    virtual void print(raw_ostream &OS) const LLVM_OVERRIDE;$/;"	m	class:llvm::PrettyStackTraceString
LLVM_OVERRIDE	Support/StreamableMemoryObject.h	/^                        uint64_t* copied) const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	Support/StreamableMemoryObject.h	/^  virtual bool isObjectEnd(uint64_t address) const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	Support/StreamableMemoryObject.h	/^  virtual bool isValidAddress(uint64_t address) const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	Support/StreamableMemoryObject.h	/^  virtual int readByte(uint64_t address, uint8_t* ptr) const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	Support/StreamableMemoryObject.h	/^  virtual uint64_t getExtent() const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	Support/circular_raw_ostream.h	/^    virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::circular_raw_ostream
LLVM_OVERRIDE	Support/raw_os_ostream.h	/^  virtual uint64_t current_pos() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_os_ostream
LLVM_OVERRIDE	Support/raw_os_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_os_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^                                   bool bg=false) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual bool has_colors() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual bool is_displayed() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual raw_ostream &resetColor() LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual raw_ostream &reverseColor() LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual size_t preferred_buffer_size() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual uint64_t current_pos() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_null_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual uint64_t current_pos() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_svector_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_string_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_svector_ostream
LLVM_OVERRIDE	Support/raw_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_null_ostream
LLVM_OVERRIDE	Support/system_error.h	/^  virtual std::string message(int ev) const LLVM_OVERRIDE;$/;"	m	class:llvm::_do_message
LLVM_PASSMANAGERS_H	PassManagers.h	15;"	d
LLVM_PASSMANAGER_H	PassManager.h	18;"	d
LLVM_PASSREGISTRY_H	PassRegistry.h	18;"	d
LLVM_PASS_ANALYSIS_SUPPORT_H	PassAnalysisSupport.h	20;"	d
LLVM_PASS_H	Pass.h	30;"	d
LLVM_PASS_SUPPORT_H	PassSupport.h	22;"	d
LLVM_PATHPROFILEINFO_H	Analysis/PathProfileInfo.h	15;"	d
LLVM_PATH_DEPRECATED_MSG	Support/PathV1.h	24;"	d
LLVM_PATH_NUMBERING_H	Analysis/PathNumbering.h	27;"	d
LLVM_READNONE	Support/Compiler.h	113;"	d
LLVM_READNONE	Support/Compiler.h	115;"	d
LLVM_READONLY	Function.h	/^  unsigned getIntrinsicID() const LLVM_READONLY;$/;"	m	class:llvm::Function
LLVM_READONLY	Support/Compiler.h	119;"	d
LLVM_READONLY	Support/Compiler.h	121;"	d
LLVM_REGION_PASS_H	Analysis/RegionPass.h	17;"	d
LLVM_RUNTIME_DYLD_H	ExecutionEngine/RuntimeDyld.h	15;"	d
LLVM_SUPPORT_ALIGNOF_H	Support/AlignOf.h	16;"	d
LLVM_SUPPORT_ALLOCATOR_H	Support/Allocator.h	15;"	d
LLVM_SUPPORT_BLOCKFREQUENCY_H	Support/BlockFrequency.h	15;"	d
LLVM_SUPPORT_BRANCHPROBABILITY_H	Support/BranchProbability.h	15;"	d
LLVM_SUPPORT_CALLSITE_H	Support/CallSite.h	27;"	d
LLVM_SUPPORT_CAPACITY_H	Support/Capacity.h	16;"	d
LLVM_SUPPORT_CASTING_H	Support/Casting.h	16;"	d
LLVM_SUPPORT_CFG_H	Support/CFG.h	16;"	d
LLVM_SUPPORT_CIRCULAR_RAW_OSTREAM_H	Support/circular_raw_ostream.h	16;"	d
LLVM_SUPPORT_CODEGEN_H	Support/CodeGen.h	16;"	d
LLVM_SUPPORT_COMMANDLINE_H	Support/CommandLine.h	21;"	d
LLVM_SUPPORT_COMPILER_H	Support/Compiler.h	16;"	d
LLVM_SUPPORT_CONSTANTFOLDER_H	Support/ConstantFolder.h	18;"	d
LLVM_SUPPORT_CONSTANT_RANGE_H	Support/ConstantRange.h	33;"	d
LLVM_SUPPORT_CRASHRECOVERYCONTEXT_H	Support/CrashRecoveryContext.h	11;"	d
LLVM_SUPPORT_DATAEXTRACTOR_H	Support/DataExtractor.h	11;"	d
LLVM_SUPPORT_DATAFLOW_H	Support/DataFlow.h	15;"	d
LLVM_SUPPORT_DATASTREAM_H_	Support/DataStream.h	18;"	d
LLVM_SUPPORT_DEBUGLOC_H	Support/DebugLoc.h	16;"	d
LLVM_SUPPORT_DEBUG_H	Support/Debug.h	27;"	d
LLVM_SUPPORT_DOTGRAPHTRAITS_H	Support/DOTGraphTraits.h	18;"	d
LLVM_SUPPORT_DWARF_H	Support/Dwarf.h	17;"	d
LLVM_SUPPORT_ELF_H	Support/ELF.h	21;"	d
LLVM_SUPPORT_ENDIAN_H	Support/Endian.h	15;"	d
LLVM_SUPPORT_ERRORHANDLING_H	Support/ErrorHandling.h	16;"	d
LLVM_SUPPORT_FILEOUTPUTBUFFER_H	Support/FileOutputBuffer.h	15;"	d
LLVM_SUPPORT_FILEUTILITIES_H	Support/FileUtilities.h	16;"	d
LLVM_SUPPORT_FILE_SYSTEM_H	Support/FileSystem.h	28;"	d
LLVM_SUPPORT_FORMATTEDSTREAM_H	Support/FormattedStream.h	16;"	d
LLVM_SUPPORT_FORMAT_H	Support/Format.h	24;"	d
LLVM_SUPPORT_GETELEMENTPTRTYPE_H	Support/GetElementPtrTypeIterator.h	16;"	d
LLVM_SUPPORT_GRAPHWRITER_H	Support/GraphWriter.h	24;"	d
LLVM_SUPPORT_INSTITERATOR_H	Support/InstIterator.h	20;"	d
LLVM_SUPPORT_INSTVISITOR_H	Support/InstVisitor.h	12;"	d
LLVM_SUPPORT_IRREADER_H	Support/IRReader.h	20;"	d
LLVM_SUPPORT_LEAKDETECTOR_H	Support/LeakDetector.h	23;"	d
LLVM_SUPPORT_LOCALE	Support/Locale.h	2;"	d
LLVM_SUPPORT_LOCKFILEMANAGER_H	Support/LockFileManager.h	10;"	d
LLVM_SUPPORT_MACHO_H	Support/MachO.h	15;"	d
LLVM_SUPPORT_MANAGED_STATIC_H	Support/ManagedStatic.h	15;"	d
LLVM_SUPPORT_MANGLER_H	Target/Mangler.h	15;"	d
LLVM_SUPPORT_MATHEXTRAS_H	Support/MathExtras.h	15;"	d
LLVM_SUPPORT_MEMORYBUFFER_H	Support/MemoryBuffer.h	15;"	d
LLVM_SUPPORT_MUTEXGUARD_H	Support/MutexGuard.h	16;"	d
LLVM_SUPPORT_NOFOLDER_H	Support/NoFolder.h	23;"	d
LLVM_SUPPORT_OUTPUTBUFFER_H	Support/OutputBuffer.h	15;"	d
LLVM_SUPPORT_PASSMANAGERBUILDER_H	Transforms/IPO/PassManagerBuilder.h	16;"	d
LLVM_SUPPORT_PASS_NAME_PARSER_H	Support/PassNameParser.h	24;"	d
LLVM_SUPPORT_PATHV2_H	Support/PathV2.h	17;"	d
LLVM_SUPPORT_PATTERNMATCH_H	Support/PatternMatch.h	30;"	d
LLVM_SUPPORT_PLUGINLOADER_H	Support/PluginLoader.h	18;"	d
LLVM_SUPPORT_POINTERLIKETYPETRAITS_H	Support/PointerLikeTypeTraits.h	16;"	d
LLVM_SUPPORT_PREDITERATORCACHE_H	Support/PredIteratorCache.h	20;"	d
LLVM_SUPPORT_PRETTYSTACKTRACE_H	Support/PrettyStackTrace.h	17;"	d
LLVM_SUPPORT_RAW_OSTREAM_H	Support/raw_ostream.h	15;"	d
LLVM_SUPPORT_RAW_OS_OSTREAM_H	Support/raw_os_ostream.h	15;"	d
LLVM_SUPPORT_RECYCLER_H	Support/Recycler.h	16;"	d
LLVM_SUPPORT_RECYCLINGALLOCATOR_H	Support/RecyclingAllocator.h	16;"	d
LLVM_SUPPORT_REGEX_H	Support/Regex.h	15;"	d
LLVM_SUPPORT_REGISTRY_H	Support/Registry.h	15;"	d
LLVM_SUPPORT_REGISTRY_PARSER_H	Support/RegistryParser.h	15;"	d
LLVM_SUPPORT_STRINGPOOL_H	Support/StringPool.h	30;"	d
LLVM_SUPPORT_SYSTEMUTILS_H	Support/SystemUtils.h	16;"	d
LLVM_SUPPORT_TARGETFOLDER_H	Support/TargetFolder.h	20;"	d
LLVM_SUPPORT_TARGETREGISTRY_H	Support/TargetRegistry.h	20;"	d
LLVM_SUPPORT_TARGETSELECT_H	Support/TargetSelect.h	17;"	d
LLVM_SUPPORT_TIMER_H	Support/Timer.h	16;"	d
LLVM_SUPPORT_TOOL_OUTPUT_FILE_H	Support/ToolOutputFile.h	15;"	d
LLVM_SUPPORT_TYPE_TRAITS_H	Support/type_traits.h	18;"	d
LLVM_SUPPORT_VALUEHANDLE_H	Support/ValueHandle.h	15;"	d
LLVM_SUPPORT_WIN64EH_H	Support/Win64EH.h	17;"	d
LLVM_SUPPORT_WIN_COFF_H	Support/COFF.h	24;"	d
LLVM_SUPPORT_YAML_PARSER_H	Support/YAMLParser.h	39;"	d
LLVM_SYMBOLTABLELISTTRAITS_H	SymbolTableListTraits.h	26;"	d
LLVM_SYSTEM_ATOMIC_H	Support/Atomic.h	15;"	d
LLVM_SYSTEM_DISASSEMBLER_H	Support/Disassembler.h	16;"	d
LLVM_SYSTEM_DYNAMIC_LIBRARY_H	Support/DynamicLibrary.h	15;"	d
LLVM_SYSTEM_ERRNO_H	Support/Errno.h	15;"	d
LLVM_SYSTEM_FENV_H	Support/FEnv.h	16;"	d
LLVM_SYSTEM_HOST_H	Support/Host.h	15;"	d
LLVM_SYSTEM_INCLUDEFILE_H	Support/IncludeFile.h	16;"	d
LLVM_SYSTEM_LEB128_H	Support/LEB128.h	16;"	d
LLVM_SYSTEM_MEMORY_H	Support/Memory.h	15;"	d
LLVM_SYSTEM_MUTEX_H	Support/Mutex.h	15;"	d
LLVM_SYSTEM_PATH_H	Support/PathV1.h	15;"	d
LLVM_SYSTEM_PROCESS_H	Support/Process.h	15;"	d
LLVM_SYSTEM_PROGRAM_H	Support/Program.h	15;"	d
LLVM_SYSTEM_RWMUTEX_H	Support/RWMutex.h	15;"	d
LLVM_SYSTEM_SIGNALS_H	Support/Signals.h	16;"	d
LLVM_SYSTEM_SOLARIS_H	Support/Solaris.h	15;"	d
LLVM_SYSTEM_SWAP_BYTE_ORDER_H	Support/SwapByteOrder.h	16;"	d
LLVM_SYSTEM_SYSTEM_ERROR_H	Support/system_error.h	18;"	d
LLVM_SYSTEM_THREADING_H	Support/Threading.h	15;"	d
LLVM_SYSTEM_THREAD_LOCAL_H	Support/ThreadLocal.h	15;"	d
LLVM_SYSTEM_TIMEVALUE_H	Support/TimeValue.h	18;"	d
LLVM_SYSTEM_VALGRIND_H	Support/Valgrind.h	17;"	d
LLVM_TABLEGEN_ERROR_H	TableGen/Error.h	16;"	d
LLVM_TABLEGEN_MAIN_H	TableGen/Main.h	15;"	d
LLVM_TABLEGEN_RECORD_H	TableGen/Record.h	16;"	d
LLVM_TABLEGEN_TABLEGENBACKEND_H	TableGen/TableGenBackend.h	15;"	d
LLVM_TARGET	Support/TargetSelect.h	23;"	d
LLVM_TARGET	Support/TargetSelect.h	26;"	d
LLVM_TARGET	Support/TargetSelect.h	30;"	d
LLVM_TARGET	Support/TargetSelect.h	54;"	d
LLVM_TARGET	Support/TargetSelect.h	67;"	d
LLVM_TARGET	Support/TargetSelect.h	77;"	d
LLVM_TARGET_ASM_INFO_H	MC/MCAsmInfo.h	17;"	d
LLVM_TARGET_TARGETCALLINGCONV_H	Target/TargetCallingConv.h	15;"	d
LLVM_TARGET_TARGETELFWRITERINFO_H	Target/TargetELFWriterInfo.h	15;"	d
LLVM_TARGET_TARGETFRAMELOWERING_H	Target/TargetFrameLowering.h	15;"	d
LLVM_TARGET_TARGETINSTRINFO_H	Target/TargetInstrInfo.h	15;"	d
LLVM_TARGET_TARGETINTRINSICINFO_H	Target/TargetIntrinsicInfo.h	15;"	d
LLVM_TARGET_TARGETJITINFO_H	Target/TargetJITInfo.h	18;"	d
LLVM_TARGET_TARGETLIBRARYINFO_H	Target/TargetLibraryInfo.h	11;"	d
LLVM_TARGET_TARGETLOWERINGOBJECTFILE_H	Target/TargetLoweringObjectFile.h	16;"	d
LLVM_TARGET_TARGETLOWERING_H	Target/TargetLowering.h	23;"	d
LLVM_TARGET_TARGETMACHINE_H	Target/TargetMachine.h	15;"	d
LLVM_TARGET_TARGETOPCODES_H	Target/TargetOpcodes.h	15;"	d
LLVM_TARGET_TARGETOPTIONS_H	Target/TargetOptions.h	16;"	d
LLVM_TARGET_TARGETREGISTERINFO_H	Target/TargetRegisterInfo.h	17;"	d
LLVM_TARGET_TARGETSCHEDMODEL_H	CodeGen/TargetSchedule.h	17;"	d
LLVM_TARGET_TARGETSELECTIONDAGINFO_H	Target/TargetSelectionDAGInfo.h	17;"	d
LLVM_TARGET_TARGETSUBTARGETINFO_H	Target/TargetSubtargetInfo.h	15;"	d
LLVM_TARGET_TARGET_TRANSFORMATION_IMPL_H	Target/TargetTransformImpl.h	16;"	d
LLVM_TRANSFORMS_INSTRUMENTATION_H	Transforms/Instrumentation.h	15;"	d
LLVM_TRANSFORMS_IPO_H	Transforms/IPO.h	16;"	d
LLVM_TRANSFORMS_IPO_INLINERPASS_H	Transforms/IPO/InlinerPass.h	18;"	d
LLVM_TRANSFORMS_SCALAR_H	Transforms/Scalar.h	16;"	d
LLVM_TRANSFORMS_TARGET_TRANSFORM_INTERFACE	TargetTransformInfo.h	23;"	d
LLVM_TRANSFORMS_UNIFYFUNCTIONEXITNODES_H	Transforms/Utils/UnifyFunctionExitNodes.h	19;"	d
LLVM_TRANSFORMS_UTILS_ADDRMODEMATCHER_H	Transforms/Utils/AddrModeMatcher.h	20;"	d
LLVM_TRANSFORMS_UTILS_BASICBLOCK_H	Transforms/Utils/BasicBlockUtils.h	16;"	d
LLVM_TRANSFORMS_UTILS_CLONING_H	Transforms/Utils/Cloning.h	19;"	d
LLVM_TRANSFORMS_UTILS_CMPINSTANALYSIS_H	Transforms/Utils/CmpInstAnalysis.h	16;"	d
LLVM_TRANSFORMS_UTILS_CODE_EXTRACTOR_H	Transforms/Utils/CodeExtractor.h	16;"	d
LLVM_TRANSFORMS_UTILS_LOCAL_H	Transforms/Utils/Local.h	16;"	d
LLVM_TRANSFORMS_UTILS_MODULE_UTILS_H	Transforms/Utils/ModuleUtils.h	15;"	d
LLVM_TRANSFORMS_UTILS_SIMPLIFYINDVAR_H	Transforms/Utils/SimplifyIndVar.h	17;"	d
LLVM_TRANSFORMS_UTILS_SIMPLIFYLIBCALLS_H	Transforms/Utils/SimplifyLibCalls.h	16;"	d
LLVM_TRANSFORMS_UTILS_SSAUPDATERIMPL_H	Transforms/Utils/SSAUpdaterImpl.h	16;"	d
LLVM_TRANSFORMS_UTILS_SSAUPDATER_H	Transforms/Utils/SSAUpdater.h	15;"	d
LLVM_TRANSFORMS_UTILS_UNROLLLOOP_H	Transforms/Utils/UnrollLoop.h	17;"	d
LLVM_TRANSFORMS_UTILS_VALUEMAPPER_H	Transforms/Utils/ValueMapper.h	16;"	d
LLVM_TRANSFORMS_VECTORIZE_H	Transforms/Vectorize.h	16;"	d
LLVM_TYPEBUILDER_H	TypeBuilder.h	16;"	d
LLVM_TYPEFINDER_H	TypeFinder.h	15;"	d
LLVM_TYPE_H	Type.h	16;"	d
LLVM_UNLIKELY	Support/Compiler.h	126;"	d
LLVM_UNLIKELY	Support/Compiler.h	129;"	d
LLVM_USER_H	User.h	20;"	d
LLVM_USE_H	Use.h	26;"	d
LLVM_USE_RVALUE_REFERENCES	Support/Compiler.h	28;"	d
LLVM_USE_RVALUE_REFERENCES	Support/Compiler.h	30;"	d
LLVM_VALUE_H	Value.h	15;"	d
LLVM_VALUE_SYMBOL_TABLE_H	ValueSymbolTable.h	15;"	d
LNot	MC/MCExpr.h	/^    LNot,  \/\/\/< Logical negation.$/;"	e	enum:llvm::MCUnaryExpr::Opcode
LOAD	CodeGen/ISDOpcodes.h	/^    LOAD, STORE,$/;"	e	enum:llvm::ISD::NodeType
LOAD	CodeGen/LiveInterval.h	/^        LOAD  = 0,$/;"	e	enum:llvm::LiveInterval::InstrSlots::__anon40
LOG10_F32	CodeGen/RuntimeLibcalls.h	/^    LOG10_F32,$/;"	e	enum:llvm::RTLIB::Libcall
LOG10_F64	CodeGen/RuntimeLibcalls.h	/^    LOG10_F64,$/;"	e	enum:llvm::RTLIB::Libcall
LOG10_F80	CodeGen/RuntimeLibcalls.h	/^    LOG10_F80,$/;"	e	enum:llvm::RTLIB::Libcall
LOG10_PPCF128	CodeGen/RuntimeLibcalls.h	/^    LOG10_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
LOG2_F32	CodeGen/RuntimeLibcalls.h	/^    LOG2_F32,$/;"	e	enum:llvm::RTLIB::Libcall
LOG2_F64	CodeGen/RuntimeLibcalls.h	/^    LOG2_F64,$/;"	e	enum:llvm::RTLIB::Libcall
LOG2_F80	CodeGen/RuntimeLibcalls.h	/^    LOG2_F80,$/;"	e	enum:llvm::RTLIB::Libcall
LOG2_PPCF128	CodeGen/RuntimeLibcalls.h	/^    LOG2_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
LOG_F32	CodeGen/RuntimeLibcalls.h	/^    LOG_F32,$/;"	e	enum:llvm::RTLIB::Libcall
LOG_F64	CodeGen/RuntimeLibcalls.h	/^    LOG_F64,$/;"	e	enum:llvm::RTLIB::Libcall
LOG_F80	CodeGen/RuntimeLibcalls.h	/^    LOG_F80,$/;"	e	enum:llvm::RTLIB::Libcall
LOG_PPCF128	CodeGen/RuntimeLibcalls.h	/^    LOG_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
LOr	MC/MCExpr.h	/^    LOr,  \/\/\/< Logical or.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
LPPassManager	Analysis/LoopPass.h	/^class LPPassManager : public FunctionPass, public PMDataManager {$/;"	c	namespace:llvm
LPadToCallSiteMap	CodeGen/MachineModuleInfo.h	/^  DenseMap<MCSymbol*, SmallVector<unsigned, 4> > LPadToCallSiteMap;$/;"	m	class:llvm::MachineModuleInfo
LParen	MC/MCParser/MCAsmLexer.h	/^    LParen, RParen, LBrac, RBrac, LCurly, RCurly,$/;"	e	enum:llvm::AsmToken::TokenKind
LQ	Analysis/LoopPass.h	/^  std::deque<Loop *> LQ;$/;"	m	class:llvm::LPPassManager
LQR_Dead	CodeGen/MachineBasicBlock.h	/^    LQR_Dead,            \/\/\/< Register is known to be dead.$/;"	e	enum:llvm::MachineBasicBlock::LivenessQueryResult
LQR_Live	CodeGen/MachineBasicBlock.h	/^    LQR_Live,            \/\/\/< Register is known to be live.$/;"	e	enum:llvm::MachineBasicBlock::LivenessQueryResult
LQR_OverlappingLive	CodeGen/MachineBasicBlock.h	/^    LQR_OverlappingLive, \/\/\/< Register itself is not live, but some overlapping$/;"	e	enum:llvm::MachineBasicBlock::LivenessQueryResult
LQR_Unknown	CodeGen/MachineBasicBlock.h	/^    LQR_Unknown          \/\/\/< Register liveness not decidable from local$/;"	e	enum:llvm::MachineBasicBlock::LivenessQueryResult
LRCalc	CodeGen/LiveIntervalAnalysis.h	/^    LiveRangeCalc *LRCalc;$/;"	m	class:llvm::LiveIntervals
LRE_CanEraseVirtReg	CodeGen/LiveRangeEdit.h	/^    virtual bool LRE_CanEraseVirtReg(unsigned) { return true; }$/;"	f	class:llvm::LiveRangeEdit::Delegate
LRE_DidCloneVirtReg	CodeGen/LiveRangeEdit.h	/^    virtual void LRE_DidCloneVirtReg(unsigned New, unsigned Old) {}$/;"	f	class:llvm::LiveRangeEdit::Delegate
LRE_WillEraseInstruction	CodeGen/LiveRangeEdit.h	/^    virtual void LRE_WillEraseInstruction(MachineInstr *MI) {}$/;"	f	class:llvm::LiveRangeEdit::Delegate
LRE_WillShrinkVirtReg	CodeGen/LiveRangeEdit.h	/^    virtual void LRE_WillShrinkVirtReg(unsigned) {}$/;"	f	class:llvm::LiveRangeEdit::Delegate
LSBaseSDNode	CodeGen/SelectionDAGNodes.h	/^  LSBaseSDNode(ISD::NodeType NodeTy, DebugLoc dl, SDValue *Operands,$/;"	f	class:llvm::LSBaseSDNode
LSBaseSDNode	CodeGen/SelectionDAGNodes.h	/^class LSBaseSDNode : public MemSDNode {$/;"	c	namespace:llvm
LSDAADDR	CodeGen/ISDOpcodes.h	/^    LSDAADDR,$/;"	e	enum:llvm::ISD::NodeType
LSDAEncoding	MC/MCObjectFileInfo.h	/^  unsigned LSDAEncoding;$/;"	m	class:llvm::MCObjectFileInfo
LSDASection	MC/MCObjectFileInfo.h	/^  const MCSection *LSDASection;$/;"	m	class:llvm::MCObjectFileInfo
LSRMode	Analysis/ScalarEvolutionExpander.h	/^    bool LSRMode;$/;"	m	class:llvm::SCEVExpander
LShrOperator	Operator.h	/^class LShrOperator$/;"	c	namespace:llvm
LT	Analysis/DependenceAnalysis.h	/^             LT = 1,$/;"	e	enum:llvm::Dependence::DVEntry::__anon25
LT	MC/MCExpr.h	/^    LT,   \/\/\/< Signed less than comparison (result is either 0 or$/;"	e	enum:llvm::MCBinaryExpr::Opcode
LTE	MC/MCExpr.h	/^    LTE,  \/\/\/< Signed less than or equal comparison (result is either 0 or$/;"	e	enum:llvm::MCBinaryExpr::Opcode
LTO	DefaultPasses.h	/^    LTO$/;"	e	enum:llvm::StandardPass::StandardSet
LV	CodeGen/LiveIntervalAnalysis.h	/^    LiveVariables* LV;$/;"	m	class:llvm::LiveIntervals
L_OPENED	Support/IntegersSubsetMapping.h	/^    L_OPENED,$/;"	e	enum:llvm::IntegersSubsetMapping::DiffProcessState
Label	Analysis/Dominators.h	/^    NodeT *Label;$/;"	m	struct:llvm::DominatorTreeBase::InfoRec
Label	CodeGen/GCMetadata.h	/^    MCSymbol *Label;    \/\/\/< A label.$/;"	m	struct:llvm::GCPoint
Label	CodeGen/SelectionDAGNodes.h	/^  MCSymbol *Label;$/;"	m	class:llvm::EHLabelSDNode
Label	MC/MCDwarf.h	/^    MCSymbol *Label;$/;"	m	class:llvm::MCCFIInstruction
Label	MC/MCDwarf.h	/^    MCSymbol *Label;$/;"	m	class:llvm::MCGenDwarfLabelEntry
Label	MC/MCDwarf.h	/^    MCSymbol *Label;$/;"	m	class:llvm::MCLineEntry
Label	MC/MCWin64EH.h	/^    MCSymbol *Label;$/;"	m	class:llvm::MCWin64EHInstruction
Label	MC/MachineLocation.h	/^  MCSymbol *Label;$/;"	m	class:llvm::MachineMove
LabelSuffix	MC/MCAsmInfo.h	/^    const char *LabelSuffix;                 \/\/ Defaults to ":"$/;"	m	class:llvm::MCAsmInfo
LabelTyID	Type.h	/^    LabelTyID,       \/\/\/<  7: Labels$/;"	e	enum:llvm::Type::TypeID
LandingPadBlock	CodeGen/MachineModuleInfo.h	/^  MachineBasicBlock *LandingPadBlock;    \/\/ Landing pad block.$/;"	m	struct:llvm::LandingPadInfo
LandingPadInfo	CodeGen/MachineModuleInfo.h	/^  explicit LandingPadInfo(MachineBasicBlock *MBB)$/;"	f	struct:llvm::LandingPadInfo
LandingPadInfo	CodeGen/MachineModuleInfo.h	/^struct LandingPadInfo {$/;"	s	namespace:llvm
LandingPadInst	Instructions.h	/^class LandingPadInst : public Instruction {$/;"	c	namespace:llvm
LandingPadLabel	CodeGen/MachineModuleInfo.h	/^  MCSymbol *LandingPadLabel;             \/\/ Label at beginning of landing pad.$/;"	m	struct:llvm::LandingPadInfo
LandingPads	CodeGen/MachineModuleInfo.h	/^  std::vector<LandingPadInfo> LandingPads;$/;"	m	class:llvm::MachineModuleInfo
Large	Support/CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
LargeRep	ADT/DenseMap.h	/^  struct LargeRep {$/;"	s	class:llvm::SmallDenseMap
LargestSDNode	CodeGen/SelectionDAGNodes.h	/^typedef LoadSDNode LargestSDNode;$/;"	t	namespace:llvm
LastCallToStaticBonus	Analysis/InlineCost.h	/^    const int LastCallToStaticBonus = -15000;$/;"	m	namespace:llvm::InlineConstants
LastF	Analysis/BranchProbabilityInfo.h	/^  Function *LastF;$/;"	m	class:llvm::BranchProbabilityInfo
LastFn	CodeGen/AsmPrinter.h	/^    mutable unsigned LastFn;$/;"	m	class:llvm::AsmPrinter
LastFrameInst	MC/MCWin64EH.h	/^    int LastFrameInst;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
LastID	TableGen/Record.h	/^  static unsigned LastID;$/;"	m	class:llvm::Record
LastInsn	CodeGen/LexicalScopes.h	/^  const MachineInstr *LastInsn;       \/\/ Last instruction of this scope.$/;"	m	class:llvm::LexicalScope
LastLocalValue	CodeGen/FastISel.h	/^  MachineInstr *LastLocalValue;$/;"	m	class:llvm::FastISel
LastMI	CodeGen/AsmPrinter.h	/^    mutable const MachineInstr *LastMI;$/;"	m	class:llvm::AsmPrinter
LastOperandCycle	MC/MCInstrItineraries.h	/^  unsigned LastOperandCycle;   \/\/\/< Index of last + 1 operand rd\/wr$/;"	m	struct:llvm::InstrItinerary
LastPrimitiveTyID	Type.h	/^    LastPrimitiveTyID = X86_MMXTyID,$/;"	e	enum:llvm::Type::TypeID
LastSimpleValueType	CodeGen/ValueTypes.h	/^      LastSimpleValueType = 255,$/;"	e	enum:llvm::MVT::SimpleValueType
LastStage	MC/MCInstrItineraries.h	/^  unsigned LastStage;          \/\/\/< Index of last + 1 stage in itinerary$/;"	m	struct:llvm::InstrItinerary
LastSymbol	MC/MCStreamer.h	/^    MCSymbol* LastSymbol;$/;"	m	class:llvm::MCStreamer
LastUnique	ValueSymbolTable.h	/^  mutable uint32_t LastUnique; \/\/\/< Counter for tracking unique names$/;"	m	class:llvm::ValueSymbolTable
LastUser	PassManagers.h	/^  DenseMap<Pass *, Pass *> LastUser;$/;"	m	class:llvm::PMTopLevelManager
LastValInScope	ADT/ScopedHashTable.h	/^  ScopedHashTableVal<K, V> *LastValInScope;$/;"	m	class:llvm::ScopedHashTableScope
LastValidFragment	MC/MCAsmLayout.h	/^  mutable DenseMap<const MCSectionData*, MCFragment *> LastValidFragment;$/;"	m	class:llvm::MCAsmLayout
LateVal	CodeGen/LiveInterval.h	/^    VNInfo *LateVal;$/;"	m	class:llvm::LiveRangeQuery
Latency	CodeGen/ScheduleDAG.h	/^    unsigned Latency;$/;"	m	class:llvm::SDep
Latency	CodeGen/ScheduleDAG.h	/^    unsigned short Latency;             \/\/ Node latency.$/;"	m	class:llvm::SUnit
LatencyPriorityQueue	CodeGen/LatencyPriorityQueue.h	/^    LatencyPriorityQueue() : Picker(this) {$/;"	f	class:llvm::LatencyPriorityQueue
LatencyPriorityQueue	CodeGen/LatencyPriorityQueue.h	/^  class LatencyPriorityQueue : public SchedulingPriorityQueue {$/;"	c	namespace:llvm
LatticeFunc	Analysis/SparsePropagation.h	/^  AbstractLatticeFunction *LatticeFunc;$/;"	m	class:llvm::SparseSolver
LatticeVal	Analysis/SparsePropagation.h	/^  typedef AbstractLatticeFunction::LatticeVal LatticeVal;$/;"	t	class:llvm::SparseSolver
LatticeVal	Analysis/SparsePropagation.h	/^  typedef void *LatticeVal;$/;"	t	class:llvm::AbstractLatticeFunction
LayoutAlignElem	DataLayout.h	/^struct LayoutAlignElem {$/;"	s	namespace:llvm
LayoutMap	DataLayout.h	/^  mutable void *LayoutMap;$/;"	m	class:llvm::DataLayout
LayoutOrder	MC/MCAssembler.h	/^  unsigned LayoutOrder;$/;"	m	class:llvm::MCFragment
LayoutOrder	MC/MCAssembler.h	/^  unsigned LayoutOrder;$/;"	m	class:llvm::MCSectionData
LazyFunctionCreator	ExecutionEngine/ExecutionEngine.h	/^  void *(*LazyFunctionCreator)(const std::string &);$/;"	m	class:llvm::ExecutionEngine
LazyResolverFn	Target/TargetJITInfo.h	/^    typedef void (*LazyResolverFn)();$/;"	t	class:llvm::TargetJITInfo
LazySymbolPointerSection	MC/MCObjectFileInfo.h	/^  const MCSection *LazySymbolPointerSection;$/;"	m	class:llvm::MCObjectFileInfo
LazyValueInfo	Analysis/LazyValueInfo.h	/^  LazyValueInfo() : FunctionPass(ID), PImpl(0) {$/;"	f	class:llvm::LazyValueInfo
LazyValueInfo	Analysis/LazyValueInfo.h	/^class LazyValueInfo : public FunctionPass {$/;"	c	namespace:llvm
Leader	ADT/EquivalenceClasses.h	/^    mutable const ECValue *Leader, *Next;$/;"	m	class:llvm::EquivalenceClasses::ECValue
Leaf	ADT/IntervalMap.h	/^  typedef IntervalMapImpl::LeafNode<KeyT, ValT, Sizer::LeafSize, Traits> Leaf;$/;"	t	class:llvm::IntervalMap
LeafBase	ADT/IntervalMap.h	/^  typedef NodeBase<std::pair<KeyT, KeyT>, ValT, LeafSize> LeafBase;$/;"	t	struct:llvm::IntervalMapImpl::NodeSizer
LeafNode	ADT/IntervalMap.h	/^class LeafNode : public NodeBase<std::pair<KeyT, KeyT>, ValT, N> {$/;"	c	namespace:llvm::IntervalMapImpl
LeafSize	ADT/IntervalMap.h	/^    LeafSize = DesiredLeafSize > MinLeafSize ? DesiredLeafSize : MinLeafSize$/;"	e	enum:llvm::IntervalMapImpl::NodeSizer::__anon20
LeakDetector	Support/LeakDetector.h	/^struct LeakDetector {$/;"	s	namespace:llvm
LeftMapping	Support/IntegersSubsetMapping.h	/^    self *LeftMapping;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Legal	Target/TargetLowering.h	/^    Legal,      \/\/ The target natively supports this operation.$/;"	e	enum:llvm::TargetLowering::LegalizeAction
LegalIntWidths	DataLayout.h	/^  SmallVector<unsigned char, 8> LegalIntWidths; \/\/\/< Legal Integers.$/;"	m	class:llvm::DataLayout
LegalOperations	Target/TargetLowering.h	/^    bool LegalOperations() const { return LegalOps; }$/;"	f	struct:llvm::TargetLowering::TargetLoweringOpt
LegalOps	Target/TargetLowering.h	/^    bool LegalOps;$/;"	m	struct:llvm::TargetLowering::TargetLoweringOpt
LegalTypes	Target/TargetLowering.h	/^    bool LegalTypes() const { return LegalTys; }$/;"	f	struct:llvm::TargetLowering::TargetLoweringOpt
LegalTys	Target/TargetLowering.h	/^    bool LegalTys;$/;"	m	struct:llvm::TargetLowering::TargetLoweringOpt
LegalizeAction	Target/TargetLowering.h	/^  enum LegalizeAction {$/;"	g	class:llvm::TargetLowering
LegalizeKind	Target/TargetLowering.h	/^  typedef std::pair<LegalizeTypeAction, EVT> LegalizeKind;$/;"	t	class:llvm::TargetLowering
LegalizeTypeAction	Target/TargetLowering.h	/^  enum LegalizeTypeAction {$/;"	g	class:llvm::TargetLowering
Length	ADT/ArrayRef.h	/^      : Data(Arr), Length(N) {}$/;"	f	class:llvm::ArrayRef
Length	ADT/ArrayRef.h	/^    size_type Length;$/;"	m	class:llvm::ArrayRef
Length	ADT/StringRef.h	/^    size_t Length;$/;"	m	class:llvm::StringRef
Length	Object/COFF.h	/^  support::ulittle32_t Length;$/;"	m	struct:llvm::object::coff_aux_section_definition
Length	Object/MachOFormat.h	/^    uint16_t Length;  \/* number of bytes in data region *\/$/;"	m	struct:llvm::object::macho::DataInCodeTableEntry
Length	Support/COFF.h	/^    uint32_t Length;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
Less	MC/MCParser/MCAsmLexer.h	/^    Less, LessEqual, LessLess, LessGreater,$/;"	e	enum:llvm::AsmToken::TokenKind
Less	Support/CodeGen.h	/^      Less,        \/\/ -O1$/;"	e	enum:llvm::CodeGenOpt::Level
LessBySize	Support/IntegersSubset.h	/^    static bool LessBySize(const self &LHS, const self &RHS) {$/;"	f	class:llvm::IntRange
LessEqual	MC/MCParser/MCAsmLexer.h	/^    Less, LessEqual, LessLess, LessGreater,$/;"	e	enum:llvm::AsmToken::TokenKind
LessGreater	MC/MCParser/MCAsmLexer.h	/^    Less, LessEqual, LessLess, LessGreater,$/;"	e	enum:llvm::AsmToken::TokenKind
LessLess	MC/MCParser/MCAsmLexer.h	/^    Less, LessEqual, LessLess, LessGreater,$/;"	e	enum:llvm::AsmToken::TokenKind
LessRecord	TableGen/Record.h	/^struct LessRecord {$/;"	s	namespace:llvm
LessRecordByID	TableGen/Record.h	/^struct LessRecordByID {$/;"	s	namespace:llvm
LessRecordFieldName	TableGen/Record.h	/^struct LessRecordFieldName {$/;"	s	namespace:llvm
Level	Support/CodeGen.h	/^    enum Level {$/;"	g	namespace:llvm::CodeGenOpt
Level	Support/FileSystem.h	/^    uint16_t Level;$/;"	m	struct:llvm::sys::fs::detail::RecDirIterState
Levels	Analysis/DependenceAnalysis.h	/^    unsigned short Levels;$/;"	m	class:llvm::FullDependence
Lex	MC/MCParser/MCAsmLexer.h	/^  const AsmToken &Lex() {$/;"	f	class:llvm::MCAsmLexer
Lex	MC/MCParser/MCAsmParserExtension.h	/^  const AsmToken &Lex() { return getParser().Lex(); }$/;"	f	class:llvm::MCAsmParserExtension
Lex	MC/MCTargetAsmLexer.h	/^  const AsmToken &Lex() {$/;"	f	class:llvm::MCTargetAsmLexer
Lexer	MC/MCTargetAsmLexer.h	/^  MCAsmLexer *Lexer;$/;"	m	class:llvm::MCTargetAsmLexer
LexicalScope	CodeGen/LexicalScopes.h	/^  LexicalScope(LexicalScope *P, const MDNode *D, const MDNode *I, bool A)$/;"	f	class:llvm::LexicalScope
LexicalScope	CodeGen/LexicalScopes.h	/^class LexicalScope {$/;"	c	namespace:llvm
LexicalScopeMap	CodeGen/LexicalScopes.h	/^  DenseMap<const MDNode *, LexicalScope *> LexicalScopeMap;$/;"	m	class:llvm::LexicalScopes
LexicalScopes	CodeGen/LexicalScopes.h	/^  LexicalScopes() : MF(NULL),  CurrentFnLexicalScope(NULL) { }$/;"	f	class:llvm::LexicalScopes
LexicalScopes	CodeGen/LexicalScopes.h	/^class LexicalScopes {$/;"	c	namespace:llvm
LibCallAliasAnalysis	Analysis/LibCallAliasAnalysis.h	/^    explicit LibCallAliasAnalysis(LibCallInfo *LC = 0)$/;"	f	struct:llvm::LibCallAliasAnalysis
LibCallAliasAnalysis	Analysis/LibCallAliasAnalysis.h	/^    explicit LibCallAliasAnalysis(char &ID, LibCallInfo *LC)$/;"	f	struct:llvm::LibCallAliasAnalysis
LibCallAliasAnalysis	Analysis/LibCallAliasAnalysis.h	/^  struct LibCallAliasAnalysis : public FunctionPass, public AliasAnalysis {$/;"	s	namespace:llvm
LibCallFunctionInfo	Analysis/LibCallSemantics.h	/^  struct LibCallFunctionInfo {$/;"	s	namespace:llvm
LibCallInfo	Analysis/LibCallSemantics.h	/^    LibCallInfo() : Impl(0), Locations(0), NumLocations(0) {}$/;"	f	class:llvm::LibCallInfo
LibCallInfo	Analysis/LibCallSemantics.h	/^  class LibCallInfo {$/;"	c	namespace:llvm
LibCallLocationInfo	Analysis/LibCallSemantics.h	/^  struct LibCallLocationInfo {$/;"	s	namespace:llvm
LibCallSimplifier	Transforms/Utils/SimplifyLibCalls.h	/^  class LibCallSimplifier {$/;"	c	namespace:llvm
LibFunc	Target/TargetLibraryInfo.h	/^  namespace LibFunc {$/;"	n	namespace:llvm
LibInfo	CodeGen/FastISel.h	/^  const TargetLibraryInfo *LibInfo;$/;"	m	class:llvm::FastISel
LibInfo	CodeGen/SelectionDAGISel.h	/^  const TargetLibraryInfo *LibInfo;$/;"	m	class:llvm::SelectionDAGISel
LibPaths	Linker.h	/^    std::vector<sys::Path> LibPaths; \/\/\/< The library search paths$/;"	m	class:llvm::Linker
Libcall	CodeGen/RuntimeLibcalls.h	/^  enum Libcall {$/;"	g	namespace:llvm::RTLIB
LibcallCallingConvs	Target/TargetLowering.h	/^  CallingConv::ID LibcallCallingConvs[RTLIB::UNKNOWN_LIBCALL];$/;"	m	class:llvm::TargetLowering
LibcallRoutineNames	Target/TargetLowering.h	/^  const char *LibcallRoutineNames[RTLIB::UNKNOWN_LIBCALL];$/;"	m	class:llvm::TargetLowering
LibraryInfo	Transforms/IPO/PassManagerBuilder.h	/^  TargetLibraryInfo *LibraryInfo;$/;"	m	class:llvm::PassManagerBuilder
LibraryList	Module.h	/^  LibraryListType LibraryList;    \/\/\/< The Libraries needed by the module$/;"	m	class:llvm::Module
LibraryListType	Module.h	/^  typedef std::vector<std::string> LibraryListType;$/;"	t	class:llvm::Module
LibraryPimpl	Object/ObjectFile.h	/^  DataRefImpl LibraryPimpl;$/;"	m	class:llvm::object::LibraryRef
LibraryRef	Object/ObjectFile.h	/^  LibraryRef() : OwningObject(NULL) { }$/;"	f	class:llvm::object::LibraryRef
LibraryRef	Object/ObjectFile.h	/^class LibraryRef {$/;"	c	namespace:llvm::object
LibraryRef	Object/ObjectFile.h	/^inline LibraryRef::LibraryRef(DataRefImpl LibraryP, const ObjectFile *Owner)$/;"	f	class:llvm::object::LibraryRef
Line	Analysis/DependenceAnalysis.h	/^      enum ConstraintKind { Empty, Point, Distance, Line, Any } Kind;$/;"	e	enum:llvm::DependenceAnalysis::Constraint::ConstraintKind
Line	DebugInfo/DIContext.h	/^  uint32_t Line;$/;"	m	class:llvm::DILineInfo
Line	MC/MCDwarf.h	/^    unsigned Line;$/;"	m	class:llvm::MCDwarfLoc
LineCol	Support/DebugLoc.h	/^    unsigned LineCol;$/;"	m	class:llvm::DebugLoc
LineContents	Support/SourceMgr.h	/^  std::string Message, LineContents;$/;"	m	class:llvm::SMDiagnostic
LineCounts	Support/GCOV.h	/^typedef SmallVector<uint32_t, 16> LineCounts;$/;"	t	namespace:llvm
LineDelta	MC/MCAssembler.h	/^  int64_t LineDelta;$/;"	m	class:llvm::MCDwarfLineAddrFragment
LineInfo	Support/GCOV.h	/^  StringMap<LineCounts> LineInfo;$/;"	m	class:llvm::FileInfo
LineNo	Support/SourceMgr.h	/^  int LineNo, ColumnNo;$/;"	m	class:llvm::SMDiagnostic
LineNoCache	Support/SourceMgr.h	/^  mutable void *LineNoCache;$/;"	m	class:llvm::SourceMgr
LineNumber	MC/MCDwarf.h	/^    unsigned LineNumber;$/;"	m	class:llvm::MCGenDwarfLabelEntry
LineNumber	Support/GCOV.h	/^  uint32_t LineNumber;$/;"	m	class:llvm::GCOVFunction
LineStart	ExecutionEngine/JITEventListener.h	/^  struct LineStart {$/;"	s	struct:llvm::JITEvent_EmittedFunctionDetails
LineStarts	ExecutionEngine/JITEventListener.h	/^  std::vector<LineStart> LineStarts;$/;"	m	struct:llvm::JITEvent_EmittedFunctionDetails
Linenumber	Support/COFF.h	/^    uint16_t Linenumber;$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
Lines	Support/GCOV.h	/^  SmallVector<uint32_t, 4> Lines;$/;"	m	class:llvm::GCOVLines
Lines	Support/GCOV.h	/^  StringMap<GCOVLines *> Lines;$/;"	m	class:llvm::GCOVBlock
LinkDegreeComparator	CodeGen/PBQP/Heuristics/Briggs.h	/^        LinkDegreeComparator(HeuristicSolverImpl<Briggs> &s) : s(&s) {}$/;"	f	class:PBQP::Heuristics::Briggs::LinkDegreeComparator
LinkDegreeComparator	CodeGen/PBQP/Heuristics/Briggs.h	/^      class LinkDegreeComparator {$/;"	c	class:PBQP::Heuristics::Briggs
LinkInModule	Linker.h	/^    bool LinkInModule($/;"	f	class:llvm::Linker
LinkOnceAnyLinkage	GlobalValue.h	/^    LinkOnceAnyLinkage, \/\/\/< Keep one copy of function when linking (inline)$/;"	e	enum:llvm::GlobalValue::LinkageTypes
LinkOnceDirective	MC/MCAsmInfo.h	/^    const char *LinkOnceDirective;           \/\/ Defaults to NULL.$/;"	m	class:llvm::MCAsmInfo
LinkOnceODRAutoHideLinkage	GlobalValue.h	/^    LinkOnceODRAutoHideLinkage, \/\/\/< Like LinkOnceODRLinkage but addr not taken.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
LinkOnceODRLinkage	GlobalValue.h	/^    LinkOnceODRLinkage, \/\/\/< Same, but only replaced by something equivalent.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
LinkageTypes	GlobalValue.h	/^  enum LinkageTypes {$/;"	g	class:llvm::GlobalValue
LinkeditDataLoadCommand	Object/MachOFormat.h	/^  struct LinkeditDataLoadCommand {$/;"	s	namespace:llvm::object::macho
LinkeditLoadCommandSize	Object/MachOFormat.h	/^    LinkeditLoadCommandSize = 16$/;"	e	enum:llvm::object::macho::StructureSizes
Linker	Linker.h	/^class Linker {$/;"	c	namespace:llvm
LinkerMode	Linker.h	/^    enum LinkerMode {$/;"	g	class:llvm::Linker
LinkerPrivate	Target/Mangler.h	/^    LinkerPrivate          \/\/\/< Emit "linker private" prefix before each symbol.$/;"	e	enum:llvm::Mangler::ManglerPrefixTy
LinkerPrivateGlobalPrefix	MC/MCAsmInfo.h	/^    const char *LinkerPrivateGlobalPrefix;   \/\/ Defaults to ""$/;"	m	class:llvm::MCAsmInfo
LinkerPrivateLinkage	GlobalValue.h	/^    LinkerPrivateLinkage, \/\/\/< Like Private, but linker removes.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
LinkerPrivateWeakLinkage	GlobalValue.h	/^    LinkerPrivateWeakLinkage, \/\/\/< Like LinkerPrivate, but weak.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
LinkerRequiresNonEmptyDwarfLines	MC/MCAsmInfo.h	/^    bool LinkerRequiresNonEmptyDwarfLines; \/\/ Default to false.$/;"	m	class:llvm::MCAsmInfo
Linux	ADT/Triple.h	/^    Linux,$/;"	e	enum:llvm::Triple::OSType
List	CodeGen/MachinePassRegistry.h	/^  MachinePassRegistryNode *List;        \/\/ List of registry nodes.$/;"	m	class:llvm::MachinePassRegistry
List	MC/MCRegisterInfo.h	/^    const uint16_t *List;$/;"	m	class:llvm::MCRegisterInfo::DiffListIterator
ListInit	TableGen/Record.h	/^  explicit ListInit(ArrayRef<Init *> Range, RecTy *EltTy)$/;"	f	class:llvm::ListInit
ListInit	TableGen/Record.h	/^class ListInit : public TypedInit, public FoldingSetNode {$/;"	c	namespace:llvm
ListRecTy	TableGen/Record.h	/^  explicit ListRecTy(RecTy *T) : RecTy(ListRecTyKind), Ty(T) {}$/;"	f	class:llvm::ListRecTy
ListRecTy	TableGen/Record.h	/^class ListRecTy : public RecTy {$/;"	c	namespace:llvm
ListRecTyKind	TableGen/Record.h	/^    ListRecTyKind,$/;"	e	enum:llvm::RecTy::RecTyKind
ListTy	ADT/ImmutableList.h	/^  typedef ImmutableListImpl<T> ListTy;$/;"	t	class:llvm::ImmutableListFactory
ListTy	TableGen/Record.h	/^  ListRecTy *ListTy;$/;"	m	class:llvm::RecTy
Listener	CodeGen/MachinePassRegistry.h	/^  MachinePassRegistryListener* Listener;\/\/ Listener for list adds are removes.$/;"	m	class:llvm::MachinePassRegistry
ListenerHead	Support/Registry.h	/^    static listener *ListenerHead, *ListenerTail;$/;"	m	class:llvm::Registry
ListenerHead	Support/Registry.h	/^  typename Registry<T,U>::listener *Registry<T,U>::ListenerHead;$/;"	m	class:llvm::Registry
ListenerTail	Support/Registry.h	/^    static listener *ListenerHead, *ListenerTail;$/;"	m	class:llvm::Registry
ListenerTail	Support/Registry.h	/^  typename Registry<T,U>::listener *Registry<T,U>::ListenerTail;$/;"	m	class:llvm::Registry
LittleEndian	DataLayout.h	/^  bool          LittleEndian;          \/\/\/< Defaults to false$/;"	m	class:llvm::DataLayout
LittleEndian	Module.h	/^  enum Endianness  { AnyEndianness, LittleEndian, BigEndian };$/;"	e	enum:llvm::Module::Endianness
LiveInRegs	CodeGen/RegisterPressure.h	/^  SmallVector<unsigned,8> LiveInRegs;$/;"	m	struct:llvm::RegisterPressure
LiveIns	CodeGen/MachineBasicBlock.h	/^  std::vector<unsigned> LiveIns;$/;"	m	class:llvm::MachineBasicBlock
LiveIns	CodeGen/MachineRegisterInfo.h	/^  std::vector<std::pair<unsigned, unsigned> > LiveIns;$/;"	m	class:llvm::MachineRegisterInfo
LiveInterval	CodeGen/LiveInterval.h	/^    LiveInterval(unsigned Reg, float Weight)$/;"	f	class:llvm::LiveInterval
LiveInterval	CodeGen/LiveInterval.h	/^  class LiveInterval {$/;"	c	namespace:llvm
LiveIntervals	CodeGen/LiveIntervalAnalysis.h	/^  class LiveIntervals : public MachineFunctionPass {$/;"	c	namespace:llvm
LiveOutInfo	CodeGen/FunctionLoweringInfo.h	/^    LiveOutInfo() : NumSignBits(0), IsValid(true), KnownOne(1, 0),$/;"	f	struct:llvm::FunctionLoweringInfo::LiveOutInfo
LiveOutInfo	CodeGen/FunctionLoweringInfo.h	/^  struct LiveOutInfo {$/;"	s	class:llvm::FunctionLoweringInfo
LiveOutRegInfo	CodeGen/FunctionLoweringInfo.h	/^  IndexedMap<LiveOutInfo, VirtReg2IndexFunctor> LiveOutRegInfo;$/;"	m	class:llvm::FunctionLoweringInfo
LiveOutRegs	CodeGen/RegisterPressure.h	/^  SmallVector<unsigned,8> LiveOutRegs;$/;"	m	struct:llvm::RegisterPressure
LiveOuts	CodeGen/MachineRegisterInfo.h	/^  std::vector<unsigned> LiveOuts;$/;"	m	class:llvm::MachineRegisterInfo
LivePhysRegs	CodeGen/RegisterPressure.h	/^  SparseSet<unsigned> LivePhysRegs;$/;"	m	class:llvm::RegPressureTracker
LiveRange	CodeGen/LiveInterval.h	/^    LiveRange(SlotIndex S, SlotIndex E, VNInfo *V)$/;"	f	struct:llvm::LiveRange
LiveRange	CodeGen/LiveInterval.h	/^  struct LiveRange {$/;"	s	namespace:llvm
LiveRangeEdit	CodeGen/LiveRangeEdit.h	/^  LiveRangeEdit(LiveInterval *parent,$/;"	f	class:llvm::LiveRangeEdit
LiveRangeEdit	CodeGen/LiveRangeEdit.h	/^class LiveRangeEdit {$/;"	c	namespace:llvm
LiveRangeQuery	CodeGen/LiveInterval.h	/^    LiveRangeQuery(const LiveInterval &LI, SlotIndex Idx)$/;"	f	class:llvm::LiveRangeQuery
LiveRangeQuery	CodeGen/LiveInterval.h	/^  class LiveRangeQuery {$/;"	c	namespace:llvm
LiveRegionEnd	CodeGen/MachineScheduler.h	/^  MachineBasicBlock::iterator LiveRegionEnd;$/;"	m	class:llvm::ScheduleDAGMI
LiveStacks	CodeGen/LiveStackAnalysis.h	/^    LiveStacks() : MachineFunctionPass(ID) {$/;"	f	class:llvm::LiveStacks
LiveStacks	CodeGen/LiveStackAnalysis.h	/^  class LiveStacks : public MachineFunctionPass {$/;"	c	namespace:llvm
LiveVariables	CodeGen/LiveVariables.h	/^  LiveVariables() : MachineFunctionPass(ID) {$/;"	f	class:llvm::LiveVariables
LiveVariables	CodeGen/LiveVariables.h	/^class LiveVariables : public MachineFunctionPass {$/;"	c	namespace:llvm
LiveVirtRegs	CodeGen/RegisterPressure.h	/^  SparseSet<unsigned, VirtReg2IndexFunctor> LiveVirtRegs;$/;"	m	class:llvm::RegPressureTracker
LivenessQueryResult	CodeGen/MachineBasicBlock.h	/^  enum LivenessQueryResult {$/;"	g	class:llvm::MachineBasicBlock
Lo_32	Support/MathExtras.h	/^inline uint32_t Lo_32(uint64_t Value) {$/;"	f	namespace:llvm
LoadAndStorePromoter	Transforms/Utils/SSAUpdater.h	/^class LoadAndStorePromoter {$/;"	c	namespace:llvm
LoadCommand	Object/MachOFormat.h	/^  struct LoadCommand {$/;"	s	namespace:llvm::object::macho
LoadCommandCodeSignDRs	Support/MachO.h	/^      LoadCommandCodeSignDRs              = 0x0000002Bu, \/\/ LC_DYLIB_CODE_SIGN_DRS$/;"	e	enum:llvm::MachO::__anon126
LoadCommandCodeSignature	Support/MachO.h	/^      LoadCommandCodeSignature            = 0x0000001Du, \/\/ LC_CODE_SIGNATURE$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDataInCode	Support/MachO.h	/^      LoadCommandDataInCode               = 0x00000029u, \/\/ LC_DATA_IN_CODE$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDyldEnvironment	Support/MachO.h	/^      LoadCommandDyldEnvironment          = 0x00000027u, \/\/ LC_DYLD_ENVIRONMENT$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDylibIdent	Support/MachO.h	/^      LoadCommandDylibIdent               = 0x0000000Du, \/\/ LC_ID_DYLIB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDylibLazyLoad	Support/MachO.h	/^      LoadCommandDylibLazyLoad            = 0x00000020u, \/\/ LC_LAZY_LOAD_DYLIB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDylibLoad	Support/MachO.h	/^      LoadCommandDylibLoad                = 0x0000000Cu, \/\/ LC_LOAD_DYLIB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDylibLoadUpward	Support/MachO.h	/^      LoadCommandDylibLoadUpward          = 0x80000023u, \/\/ LC_LOAD_UPWARD_DYLIB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDylibLoadWeak	Support/MachO.h	/^      LoadCommandDylibLoadWeak            = 0x80000018u, \/\/ LC_LOAD_WEAK_DYLIB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDylibPrebound	Support/MachO.h	/^      LoadCommandDylibPrebound            = 0x00000010u, \/\/ LC_PREBOUND_DYLIB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDylibReexport	Support/MachO.h	/^      LoadCommandDylibReexport            = 0x8000001Fu, \/\/ LC_REEXPORT_DYLIB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDynamicLinkerIdent	Support/MachO.h	/^      LoadCommandDynamicLinkerIdent       = 0x0000000Fu, \/\/ LC_ID_DYLINKER$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDynamicLinkerInfo	Support/MachO.h	/^      LoadCommandDynamicLinkerInfo        = 0x00000022u, \/\/ LC_DYLD_INFO$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDynamicLinkerInfoOnly	Support/MachO.h	/^      LoadCommandDynamicLinkerInfoOnly    = 0x80000022u, \/\/ LC_DYLD_INFO_ONLY$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDynamicLinkerLoad	Support/MachO.h	/^      LoadCommandDynamicLinkerLoad        = 0x0000000Eu, \/\/ LC_LOAD_DYLINKER$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDynamicLinkerRequired	Support/MachO.h	/^      LoadCommandDynamicLinkerRequired    = 0x80000000u, \/\/ LC_REQ_DYLD$/;"	e	enum:llvm::MachO::__anon126
LoadCommandDynamicSymtabInfo	Support/MachO.h	/^      LoadCommandDynamicSymtabInfo        = 0x0000000Bu, \/\/ LC_DYSYMTAB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandEncryptionInfo	Support/MachO.h	/^      LoadCommandEncryptionInfo           = 0x00000021u, \/\/ LC_ENCRYPTION_INFO$/;"	e	enum:llvm::MachO::__anon126
LoadCommandFixedVMFileInclusion	Support/MachO.h	/^      LoadCommandFixedVMFileInclusion     = 0x00000009u, \/\/ LC_FVMFILE$/;"	e	enum:llvm::MachO::__anon126
LoadCommandFixedVMShlibIdent	Support/MachO.h	/^      LoadCommandFixedVMShlibIdent        = 0x00000007u, \/\/ LC_IDFVMLIB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandFixedVMShlibLoad	Support/MachO.h	/^      LoadCommandFixedVMShlibLoad         = 0x00000006u, \/\/ LC_LOADFVMLIB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandFunctionStarts	Support/MachO.h	/^      LoadCommandFunctionStarts           = 0x00000026u, \/\/ LC_FUNCTION_STARTS$/;"	e	enum:llvm::MachO::__anon126
LoadCommandIdent	Support/MachO.h	/^      LoadCommandIdent                    = 0x00000008u, \/\/ LC_IDENT$/;"	e	enum:llvm::MachO::__anon126
LoadCommandInfo	Object/MachO.h	/^typedef MachOObject::LoadCommandInfo LoadCommandInfo;$/;"	t	namespace:llvm::object
LoadCommandInfo	Object/MachOObject.h	/^  struct LoadCommandInfo {$/;"	s	class:llvm::object::MachOObject
LoadCommandMain	Support/MachO.h	/^      LoadCommandMain                     = 0x80000028u, \/\/ LC_MAIN$/;"	e	enum:llvm::MachO::__anon126
LoadCommandPreBindChecksum	Support/MachO.h	/^      LoadCommandPreBindChecksum          = 0x00000017u, \/\/ LC_PREBIND_CKSUM$/;"	e	enum:llvm::MachO::__anon126
LoadCommandPrePage	Support/MachO.h	/^      LoadCommandPrePage                  = 0x0000000Au, \/\/ LC_PREPAGE$/;"	e	enum:llvm::MachO::__anon126
LoadCommandRoutines32	Support/MachO.h	/^      LoadCommandRoutines32               = 0x00000011u, \/\/ LC_ROUTINES$/;"	e	enum:llvm::MachO::__anon126
LoadCommandRoutines64	Support/MachO.h	/^      LoadCommandRoutines64               = 0x0000001Au, \/\/ LC_ROUTINES_64$/;"	e	enum:llvm::MachO::__anon126
LoadCommandRunpath	Support/MachO.h	/^      LoadCommandRunpath                  = 0x8000001Cu, \/\/ LC_RPATH$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSegment32	Support/MachO.h	/^      LoadCommandSegment32                = 0x00000001u, \/\/ LC_SEGMENT$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSegment64	Support/MachO.h	/^      LoadCommandSegment64                = 0x00000019u, \/\/ LC_SEGMENT_64$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSegmentSplitInfo	Support/MachO.h	/^      LoadCommandSegmentSplitInfo         = 0x0000001Eu, \/\/ LC_SEGMENT_SPLIT_INFO$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSourceVersion	Support/MachO.h	/^      LoadCommandSourceVersion            = 0x0000002Au, \/\/ LC_SOURCE_VERSION$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSubClient	Support/MachO.h	/^      LoadCommandSubClient                = 0x00000014u, \/\/ LC_SUB_CLIENT$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSubFramework	Support/MachO.h	/^      LoadCommandSubFramework             = 0x00000012u, \/\/ LC_SUB_FRAMEWORK$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSubLibrary	Support/MachO.h	/^      LoadCommandSubLibrary               = 0x00000015u, \/\/ LC_SUB_LIBRARY$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSubUmbrella	Support/MachO.h	/^      LoadCommandSubUmbrella              = 0x00000013u, \/\/ LC_SUB_UMBRELLA$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSymSeg	Support/MachO.h	/^      LoadCommandSymSeg                   = 0x00000003u, \/\/ LC_SYMSEG$/;"	e	enum:llvm::MachO::__anon126
LoadCommandSymtab	Support/MachO.h	/^      LoadCommandSymtab                   = 0x00000002u, \/\/ LC_SYMTAB$/;"	e	enum:llvm::MachO::__anon126
LoadCommandThread	Support/MachO.h	/^      LoadCommandThread                   = 0x00000004u, \/\/ LC_THREAD$/;"	e	enum:llvm::MachO::__anon126
LoadCommandTwoLevelHints	Support/MachO.h	/^      LoadCommandTwoLevelHints            = 0x00000016u, \/\/ LC_TWOLEVEL_HINTS$/;"	e	enum:llvm::MachO::__anon126
LoadCommandType	Object/MachOFormat.h	/^  enum LoadCommandType {$/;"	g	namespace:llvm::object::macho
LoadCommandUUID	Support/MachO.h	/^      LoadCommandUUID                     = 0x0000001Bu, \/\/ LC_UUID$/;"	e	enum:llvm::MachO::__anon126
LoadCommandUnixThread	Support/MachO.h	/^      LoadCommandUnixThread               = 0x00000005u, \/\/ LC_UNIXTHREAD$/;"	e	enum:llvm::MachO::__anon126
LoadCommandVersionMinIPhoneOS	Support/MachO.h	/^      LoadCommandVersionMinIPhoneOS       = 0x00000025u, \/\/ LC_VERSION_MIN_IPHONEOS$/;"	e	enum:llvm::MachO::__anon126
LoadCommandVersionMinMacOSX	Support/MachO.h	/^      LoadCommandVersionMinMacOSX         = 0x00000024u, \/\/ LC_VERSION_MIN_MACOSX$/;"	e	enum:llvm::MachO::__anon126
LoadCommands	Object/MachOObject.h	/^  LoadCommandInfo *LoadCommands;$/;"	m	class:llvm::object::MachOObject
LoadExtActions	Target/TargetLowering.h	/^  uint8_t LoadExtActions[MVT::LAST_VALUETYPE][ISD::LAST_LOADEXT_TYPE];$/;"	m	class:llvm::TargetLowering
LoadExtType	CodeGen/ISDOpcodes.h	/^  enum LoadExtType {$/;"	g	namespace:llvm::ISD
LoadInst	Instructions.h	/^class LoadInst : public UnaryInstruction {$/;"	c	namespace:llvm
LoadLatency	MC/MCSchedule.h	/^  unsigned LoadLatency;$/;"	m	class:llvm::MCSchedModel
LoadLibraryPermanently	Support/DynamicLibrary.h	/^    static bool LoadLibraryPermanently(const char *Filename,$/;"	f	class:llvm::sys::DynamicLibrary
LoadSDNode	CodeGen/SelectionDAGNodes.h	/^  LoadSDNode(SDValue *ChainPtrOff, DebugLoc dl, SDVTList VTs,$/;"	f	class:llvm::LoadSDNode
LoadSDNode	CodeGen/SelectionDAGNodes.h	/^class LoadSDNode : public LSBaseSDNode {$/;"	c	namespace:llvm
LoadVersionDefs	Object/ELF.h	/^                  LoadVersionDefs(const Elf_Shdr *sec) const {$/;"	f	class:llvm::object::ELFObjectFile
LoadVersionMap	Object/ELF.h	/^void ELFObjectFile<target_endianness, is64Bits>::LoadVersionMap() const {$/;"	f	class:llvm::object::ELFObjectFile
LoadVersionNeeds	Object/ELF.h	/^                  LoadVersionNeeds(const Elf_Shdr *sec) const {$/;"	f	class:llvm::object::ELFObjectFile
LoaderFlags	Support/COFF.h	/^    uint32_t LoaderFlags;$/;"	m	struct:llvm::COFF::PEHeader
Loc	CodeGen/CallingConvLower.h	/^  unsigned Loc;$/;"	m	class:llvm::CCValAssign
Loc	CodeGen/GCMetadata.h	/^    DebugLoc Loc;$/;"	m	struct:llvm::GCPoint
Loc	ExecutionEngine/JITEventListener.h	/^    DebugLoc Loc;$/;"	m	struct:llvm::JITEvent_EmittedFunctionDetails::LineStart
Loc	MC/MCFixup.h	/^  SMLoc Loc;$/;"	m	class:llvm::MCFixup
Loc	MC/MCInst.h	/^  SMLoc Loc;$/;"	m	class:llvm::MCInst
Loc	Support/CommandLine.h	/^  Ty &Loc;$/;"	m	struct:llvm::cl::LocationClass
Loc	Support/SourceMgr.h	/^  SMLoc Loc;$/;"	m	class:llvm::SMDiagnostic
LocInfo	CodeGen/CallingConvLower.h	/^  enum LocInfo {$/;"	g	class:llvm::CCValAssign
LocResult	Analysis/LibCallSemantics.h	/^    enum LocResult {$/;"	g	struct:llvm::LibCallLocationInfo
LocVT	CodeGen/CallingConvLower.h	/^  MVT LocVT;$/;"	m	class:llvm::CCValAssign
LocalAreaOffset	Target/TargetFrameLowering.h	/^  int LocalAreaOffset;$/;"	m	class:llvm::TargetFrameLowering
LocalDepMapType	Analysis/MemoryDependenceAnalysis.h	/^    typedef DenseMap<Instruction*, MemDepResult> LocalDepMapType;$/;"	t	class:llvm::MemoryDependenceAnalysis
LocalDeps	Analysis/MemoryDependenceAnalysis.h	/^    LocalDepMapType LocalDeps;$/;"	m	class:llvm::MemoryDependenceAnalysis
LocalDifference_RIT	MC/MCMachObjectWriter.h	/^  unsigned LocalDifference_RIT;$/;"	m	class:llvm::MCMachObjectTargetWriter
LocalDynamic	Support/CodeGen.h	/^      LocalDynamic,$/;"	e	enum:llvm::TLSModel::Model
LocalDynamicTLSModel	GlobalVariable.h	/^    LocalDynamicTLSModel,$/;"	e	enum:llvm::GlobalVariable::ThreadLocalMode
LocalExec	Support/CodeGen.h	/^      LocalExec$/;"	e	enum:llvm::TLSModel::Model
LocalExecTLSModel	GlobalVariable.h	/^    LocalExecTLSModel$/;"	e	enum:llvm::GlobalVariable::ThreadLocalMode
LocalFrameMaxAlign	CodeGen/MachineFrameInfo.h	/^  unsigned LocalFrameMaxAlign;$/;"	m	class:llvm::MachineFrameInfo
LocalFrameObjects	CodeGen/MachineFrameInfo.h	/^  SmallVector<std::pair<int, int64_t>, 32> LocalFrameObjects;$/;"	m	class:llvm::MachineFrameInfo
LocalFrameSize	CodeGen/MachineFrameInfo.h	/^  int64_t LocalFrameSize;$/;"	m	class:llvm::MachineFrameInfo
LocalOperands	CodeGen/SelectionDAGNodes.h	/^  SDUse LocalOperands[4];$/;"	m	class:llvm::MachineSDNode
LocalRelocation	Constant.h	/^    LocalRelocation = 1,$/;"	e	enum:llvm::Constant::PossibleRelocationsTy
LocalRelocationTableOffset	Object/MachOFormat.h	/^    uint32_t LocalRelocationTableOffset;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
LocalSymbolData	MC/MCMachObjectWriter.h	/^  std::vector<MachSymbolData> LocalSymbolData;$/;"	m	class:llvm::MachObjectWriter
LocalSymbolsIndex	Object/MachOFormat.h	/^    uint32_t LocalSymbolsIndex;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
LocalValueMap	CodeGen/FastISel.h	/^  DenseMap<const Value *, unsigned> LocalValueMap;$/;"	m	class:llvm::FastISel
Location	Analysis/AliasAnalysis.h	/^    explicit Location(const Value *P = 0, uint64_t S = UnknownSize,$/;"	f	struct:llvm::AliasAnalysis::Location
Location	Analysis/AliasAnalysis.h	/^  struct Location {$/;"	s	class:llvm::AliasAnalysis
Location	Support/CommandLine.h	/^  DataType *Location;   \/\/ Where to store the object...$/;"	m	class:llvm::cl::opt_storage
Location	Support/CommandLine.h	/^  StorageClass *Location;   \/\/ Where to store the object...$/;"	m	class:llvm::cl::list_storage
Location	Support/CommandLine.h	/^  unsigned *Location;   \/\/ Where to store the bits...$/;"	m	class:llvm::cl::bits_storage
LocationClass	Support/CommandLine.h	/^  LocationClass(Ty &L) : Loc(L) {}$/;"	f	struct:llvm::cl::LocationClass
LocationClass	Support/CommandLine.h	/^struct LocationClass {$/;"	s	namespace:llvm::cl
LocationDetails	Analysis/LibCallSemantics.h	/^    const LocationMRInfo *LocationDetails;$/;"	m	struct:llvm::LibCallFunctionInfo
LocationID	Analysis/LibCallSemantics.h	/^      unsigned LocationID;$/;"	m	struct:llvm::LibCallFunctionInfo::LocationMRInfo
LocationMRInfo	Analysis/LibCallSemantics.h	/^    struct LocationMRInfo {$/;"	s	struct:llvm::LibCallFunctionInfo
Locations	Analysis/LibCallSemantics.h	/^    mutable const LibCallLocationInfo *Locations;$/;"	m	class:llvm::LibCallInfo
LockFileManager	Support/LockFileManager.h	/^class LockFileManager {$/;"	c	namespace:llvm
LockFileName	Support/LockFileManager.h	/^  SmallString<128> LockFileName;$/;"	m	class:llvm::LockFileManager
LockFileState	Support/LockFileManager.h	/^  enum LockFileState {$/;"	g	class:llvm::LockFileManager
Locs	CodeGen/CallingConvLower.h	/^  SmallVector<CCValAssign, 16> &Locs;$/;"	m	class:llvm::CCState
Locs	TableGen/Error.h	/^  SmallVector<SMLoc, 4> Locs;$/;"	m	class:llvm::TGError
Locs	TableGen/Record.h	/^  SmallVector<SMLoc, 4> Locs;$/;"	m	class:llvm::Record
Log2Alignment	MC/MCAsmInfo.h	/^    enum LCOMMType { NoAlignment, ByteAlignment, Log2Alignment };$/;"	e	enum:llvm::LCOMM::LCOMMType
Log2CacheLine	ADT/IntervalMap.h	/^  Log2CacheLine = 6,$/;"	e	enum:llvm::IntervalMapImpl::__anon19
Log2_32	Support/MathExtras.h	/^inline unsigned Log2_32(uint32_t Value) {$/;"	f	namespace:llvm
Log2_32_Ceil	Support/MathExtras.h	/^inline unsigned Log2_32_Ceil(uint32_t Value) {$/;"	f	namespace:llvm
Log2_64	Support/MathExtras.h	/^inline unsigned Log2_64(uint64_t Value) {$/;"	f	namespace:llvm
Log2_64_Ceil	Support/MathExtras.h	/^inline unsigned Log2_64_Ceil(uint64_t Value) {$/;"	f	namespace:llvm
LookupBucketFor	ADT/DenseMap.h	/^  bool LookupBucketFor(const LookupKeyT &Val, BucketT *&FoundBucket) {$/;"	f	class:llvm::DenseMapBase
LookupBucketFor	ADT/DenseMap.h	/^  bool LookupBucketFor(const LookupKeyT &Val,$/;"	f	class:llvm::DenseMapBase
LookupPtrRegClass	MC/MCInstrDesc.h	/^    LookupPtrRegClass = 0,$/;"	e	enum:llvm::MCOI::OperandFlags
Loop	Analysis/LoopInfo.h	/^  Loop() {}$/;"	f	class:llvm::Loop
Loop	Analysis/LoopInfo.h	/^  explicit Loop(BasicBlock *BB) : LoopBase<BasicBlock, Loop>(BB) {}$/;"	f	class:llvm::Loop
Loop	Analysis/LoopInfo.h	/^class Loop : public LoopBase<BasicBlock, Loop> {$/;"	c	namespace:llvm
Loop	CodeGen/GCMetadata.h	/^      Loop,    \/\/\/< Instr is a loop (backwards branch).$/;"	e	enum:llvm::GC::PointKind
Loop	CodeGen/MachineLoopRanges.h	/^  const MachineLoop *const Loop;$/;"	m	class:llvm::MachineLoopRange
LoopBase	Analysis/LoopInfo.h	/^  LoopBase() : ParentLoop(0) {}$/;"	f	class:llvm::LoopBase
LoopBase	Analysis/LoopInfo.h	/^  explicit LoopBase(BlockT *BB) : ParentLoop(0) {$/;"	f	class:llvm::LoopBase
LoopBase	Analysis/LoopInfo.h	/^class LoopBase {$/;"	c	namespace:llvm
LoopBlocksDFS	Analysis/LoopIterator.h	/^  LoopBlocksDFS(Loop *Container) :$/;"	f	class:llvm::LoopBlocksDFS
LoopBlocksDFS	Analysis/LoopIterator.h	/^class LoopBlocksDFS {$/;"	c	namespace:llvm
LoopBlocksTraversal	Analysis/LoopIterator.h	/^  LoopBlocksTraversal(LoopBlocksDFS &Storage, LoopInfo *LInfo) :$/;"	f	class:llvm::LoopBlocksTraversal
LoopBlocksTraversal	Analysis/LoopIterator.h	/^class LoopBlocksTraversal {$/;"	c	namespace:llvm
LoopComputable	Analysis/ScalarEvolution.h	/^      LoopComputable  \/\/\/< The SCEV varies predictably with the loop.$/;"	e	enum:llvm::ScalarEvolution::LoopDisposition
LoopDependenceAnalysis	Analysis/LoopDependenceAnalysis.h	/^  LoopDependenceAnalysis() : LoopPass(ID) {$/;"	f	class:llvm::LoopDependenceAnalysis
LoopDependenceAnalysis	Analysis/LoopDependenceAnalysis.h	/^class LoopDependenceAnalysis : public LoopPass {$/;"	c	namespace:llvm
LoopDisposition	Analysis/ScalarEvolution.h	/^    enum LoopDisposition {$/;"	g	class:llvm::ScalarEvolution
LoopDispositions	Analysis/ScalarEvolution.h	/^             std::map<const Loop *, LoopDisposition> > LoopDispositions;$/;"	m	class:llvm::ScalarEvolution
LoopIndependent	Analysis/DependenceAnalysis.h	/^    bool LoopIndependent;$/;"	m	class:llvm::FullDependence
LoopInfo	Analysis/LoopInfo.h	/^  LoopInfo() : FunctionPass(ID) {$/;"	f	class:llvm::LoopInfo
LoopInfo	Analysis/LoopInfo.h	/^class LoopInfo : public FunctionPass {$/;"	c	namespace:llvm
LoopInfoBase	Analysis/LoopInfo.h	/^  LoopInfoBase() { }$/;"	f	class:llvm::LoopInfoBase
LoopInfoBase	Analysis/LoopInfo.h	/^class LoopInfoBase {$/;"	c	namespace:llvm
LoopInvariant	Analysis/ScalarEvolution.h	/^      LoopInvariant,  \/\/\/< The SCEV is loop-invariant.$/;"	e	enum:llvm::ScalarEvolution::LoopDisposition
LoopPass	Analysis/LoopPass.h	/^  explicit LoopPass(char &pid) : Pass(PT_Loop, pid) {}$/;"	f	class:llvm::LoopPass
LoopPass	Analysis/LoopPass.h	/^class LoopPass : public Pass {$/;"	c	namespace:llvm
LoopVariant	Analysis/ScalarEvolution.h	/^      LoopVariant,    \/\/\/< The SCEV is loop-variant (unknown).$/;"	e	enum:llvm::ScalarEvolution::LoopDisposition
Loops	Analysis/DependenceAnalysis.h	/^      SmallBitVector Loops;$/;"	m	struct:llvm::DependenceAnalysis::Subscript
Loops	CodeGen/CalcSpillWeights.h	/^    const MachineLoopInfo &Loops;$/;"	m	class:llvm::VirtRegAuxInfo
Low	Support/IntegersSubset.h	/^    IntType Low;$/;"	m	class:llvm::IntRange
Lower	Analysis/DependenceAnalysis.h	/^      const SCEV *Lower[8];$/;"	m	struct:llvm::DependenceAnalysis::BoundInfo
Lower	Support/ConstantRange.h	/^  APInt Lower, Upper;$/;"	m	class:llvm::ConstantRange
LowerCall	Target/TargetLowering.h	/^    LowerCall(CallLoweringInfo &\/*CLI*\/,$/;"	f	class:llvm::TargetLowering
LowerCustomJumpTableEntry	Target/TargetLowering.h	/^  LowerCustomJumpTableEntry(const MachineJumpTableInfo * \/*MJTI*\/,$/;"	f	class:llvm::TargetLowering
LowerFormalArguments	Target/TargetLowering.h	/^    LowerFormalArguments(SDValue \/*Chain*\/, CallingConv::ID \/*CallConv*\/,$/;"	f	class:llvm::TargetLowering
LowerReturn	Target/TargetLowering.h	/^    LowerReturn(SDValue \/*Chain*\/, CallingConv::ID \/*CallConv*\/,$/;"	f	class:llvm::TargetLowering
Lsda	MC/MCDwarf.h	/^    const MCSymbol *Lsda;$/;"	m	struct:llvm::MCDwarfFrameInfo
LsdaEncoding	MC/MCDwarf.h	/^    unsigned LsdaEncoding;$/;"	m	struct:llvm::MCDwarfFrameInfo
Lv2	ADT/Triple.h	/^    Lv2,        \/\/ PS3$/;"	e	enum:llvm::Triple::OSType
M	CodeGen/GCStrategy.h	/^    const Module *M;$/;"	m	class:llvm::GCStrategy
M	DIBuilder.h	/^    Module &M;$/;"	m	class:llvm::DIBuilder
M	ExecutionEngine/ExecutionEngine.h	/^  Module *M;$/;"	m	class:llvm::EngineBuilder
M	PassManager.h	/^  Module *M;$/;"	m	class:llvm::FunctionPassManager
M	PassManagers.h	/^  Module *M;$/;"	m	class:llvm::PassManagerPrettyStackEntry
M	Support/MutexGuard.h	/^    sys::Mutex &M;$/;"	m	class:llvm::MutexGuard
MACHINESCHEDULER_H	CodeGen/MachineScheduler.h	28;"	d
MAGENTA	Support/raw_ostream.h	/^    MAGENTA,$/;"	e	enum:llvm::raw_ostream::Colors
MAI	CodeGen/AsmPrinter.h	/^    const MCAsmInfo *MAI;$/;"	m	class:llvm::AsmPrinter
MAI	MC/MCContext.h	/^    const MCAsmInfo &MAI;$/;"	m	class:llvm::MCContext
MAI	MC/MCInstPrinter.h	/^  const MCAsmInfo &MAI;$/;"	m	class:llvm::MCInstPrinter
MAI	MC/MCParser/AsmLexer.h	/^  const MCAsmInfo &MAI;$/;"	m	class:llvm::AsmLexer
MAX_ALLOWED_VALUETYPE	CodeGen/ValueTypes.h	/^      MAX_ALLOWED_VALUETYPE = 64,$/;"	e	enum:llvm::MVT::SimpleValueType
MAX_INT_BITS	DerivedTypes.h	/^    MAX_INT_BITS = (1<<23)-1 \/\/\/< Maximum number of bits that can be specified$/;"	e	enum:llvm::IntegerType::__anon50
MArch	ExecutionEngine/ExecutionEngine.h	/^  std::string MArch;$/;"	m	class:llvm::EngineBuilder
MAttrs	ExecutionEngine/ExecutionEngine.h	/^  SmallVector<std::string, 4> MAttrs;$/;"	m	class:llvm::EngineBuilder
MBB	CodeGen/FunctionLoweringInfo.h	/^  MachineBasicBlock *MBB;$/;"	m	class:llvm::FunctionLoweringInfo
MBB	CodeGen/MachineOperand.h	/^    MachineBasicBlock *MBB;   \/\/ For MO_MachineBasicBlock.$/;"	m	union:llvm::MachineOperand::__anon36
MBB	CodeGen/MachineRelocation.h	/^    MachineBasicBlock *MBB; \/\/ If this is a pointer to a LLVM BB$/;"	m	union:llvm::MachineRelocation::__anon48
MBB	CodeGen/RegisterPressure.h	/^  const MachineBasicBlock *MBB;$/;"	m	class:llvm::RegPressureTracker
MBB	CodeGen/RegisterScavenging.h	/^  MachineBasicBlock *MBB;$/;"	m	class:llvm::RegScavenger
MBB	CodeGen/SelectionDAGNodes.h	/^  MachineBasicBlock *MBB;$/;"	m	class:llvm::BasicBlockSDNode
MBB2NumberFunctor	CodeGen/MachineBasicBlock.h	/^struct MBB2NumberFunctor :$/;"	s	namespace:llvm
MBBI	CodeGen/RegisterScavenging.h	/^  MachineBasicBlock::iterator MBBI;$/;"	m	class:llvm::RegScavenger
MBBMap	CodeGen/FunctionLoweringInfo.h	/^  DenseMap<const BasicBlock*, MachineBasicBlock *> MBBMap;$/;"	m	class:llvm::FunctionLoweringInfo
MBBNumbering	CodeGen/MachineFunction.h	/^  std::vector<MachineBasicBlock*> MBBNumbering;$/;"	m	class:llvm::MachineFunction
MBBRanges	CodeGen/SlotIndexes.h	/^    SmallVector<std::pair<SlotIndex, SlotIndex>, 8> MBBRanges;$/;"	m	class:llvm::SlotIndexes
MBBs	CodeGen/MachineJumpTableInfo.h	/^  std::vector<MachineBasicBlock*> MBBs;$/;"	m	struct:llvm::MachineJumpTableEntry
MBFI	CodeGen/MachineBlockFrequencyInfo.h	/^                     MachineBranchProbabilityInfo> *MBFI;$/;"	m	class:llvm::MachineBlockFrequencyInfo
MBLAZE_INTR	CallingConv.h	/^    MBLAZE_INTR = 73,$/;"	e	enum:llvm::CallingConv::ID
MBLAZE_SVOL	CallingConv.h	/^    MBLAZE_SVOL = 74,$/;"	e	enum:llvm::CallingConv::ID
MC	Target/TargetRegisterInfo.h	/^  const MCRegisterClass *MC;$/;"	m	class:llvm::TargetRegisterClass
MCAF_Code16	MC/MCDirectives.h	/^  MCAF_Code16,                \/\/\/< .code16 (X86) \/ .code 16 (ARM)$/;"	e	enum:llvm::MCAssemblerFlag
MCAF_Code32	MC/MCDirectives.h	/^  MCAF_Code32,                \/\/\/< .code32 (X86) \/ .code 32 (ARM)$/;"	e	enum:llvm::MCAssemblerFlag
MCAF_Code64	MC/MCDirectives.h	/^  MCAF_Code64                 \/\/\/< .code64 (X86)$/;"	e	enum:llvm::MCAssemblerFlag
MCAF_SubsectionsViaSymbols	MC/MCDirectives.h	/^  MCAF_SubsectionsViaSymbols, \/\/\/< .subsections_via_symbols (MachO)$/;"	e	enum:llvm::MCAssemblerFlag
MCAF_SyntaxUnified	MC/MCDirectives.h	/^  MCAF_SyntaxUnified,         \/\/\/< .syntax (ARM\/ELF)$/;"	e	enum:llvm::MCAssemblerFlag
MCAlignFragment	MC/MCAssembler.h	/^  MCAlignFragment(unsigned _Alignment, int64_t _Value, unsigned _ValueSize,$/;"	f	class:llvm::MCAlignFragment
MCAlignFragment	MC/MCAssembler.h	/^class MCAlignFragment : public MCFragment {$/;"	c	namespace:llvm
MCAsmBackend	MC/MCAsmBackend.h	/^class MCAsmBackend {$/;"	c	namespace:llvm
MCAsmBackendCtorFn	Support/TargetRegistry.h	/^    MCAsmBackendCtorTy MCAsmBackendCtorFn;$/;"	m	class:llvm::Target
MCAsmBackendCtorTy	Support/TargetRegistry.h	/^    typedef MCAsmBackend *(*MCAsmBackendCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCAsmInfo	MC/MCAsmInfo.h	/^  class MCAsmInfo {$/;"	c	namespace:llvm
MCAsmInfoCOFF	MC/MCAsmInfoCOFF.h	/^  class MCAsmInfoCOFF : public MCAsmInfo {$/;"	c	namespace:llvm
MCAsmInfoCtorFn	Support/TargetRegistry.h	/^    MCAsmInfoCtorFnTy MCAsmInfoCtorFn;$/;"	m	class:llvm::Target
MCAsmInfoCtorFnTy	Support/TargetRegistry.h	/^    typedef MCAsmInfo *(*MCAsmInfoCtorFnTy)(const Target &T,$/;"	t	class:llvm::Target
MCAsmInfoDarwin	MC/MCAsmInfoDarwin.h	/^  class MCAsmInfoDarwin : public MCAsmInfo {$/;"	c	namespace:llvm
MCAsmInfoGNUCOFF	MC/MCAsmInfoCOFF.h	/^  class MCAsmInfoGNUCOFF : public MCAsmInfoCOFF {$/;"	c	namespace:llvm
MCAsmInfoMicrosoft	MC/MCAsmInfoCOFF.h	/^  class MCAsmInfoMicrosoft : public MCAsmInfoCOFF {$/;"	c	namespace:llvm
MCAsmLayout	MC/MCAsmLayout.h	/^class MCAsmLayout {$/;"	c	namespace:llvm
MCAsmLexer	MC/MCParser/MCAsmLexer.h	/^class MCAsmLexer {$/;"	c	namespace:llvm
MCAsmLexerCtorFn	Support/TargetRegistry.h	/^    MCAsmLexerCtorTy MCAsmLexerCtorFn;$/;"	m	class:llvm::Target
MCAsmLexerCtorTy	Support/TargetRegistry.h	/^    typedef MCTargetAsmLexer *(*MCAsmLexerCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCAsmParser	MC/MCParser/MCAsmParser.h	/^class MCAsmParser {$/;"	c	namespace:llvm
MCAsmParserCtorFn	Support/TargetRegistry.h	/^    MCAsmParserCtorTy MCAsmParserCtorFn;$/;"	m	class:llvm::Target
MCAsmParserCtorTy	Support/TargetRegistry.h	/^    typedef MCTargetAsmParser *(*MCAsmParserCtorTy)(MCSubtargetInfo &STI,$/;"	t	class:llvm::Target
MCAsmParserExtension	MC/MCParser/MCAsmParserExtension.h	/^class MCAsmParserExtension {$/;"	c	namespace:llvm
MCAsmParserSemaCallback	MC/MCParser/MCAsmParser.h	/^class MCAsmParserSemaCallback {$/;"	c	namespace:llvm
MCAssembler	MC/MCAssembler.h	/^class MCAssembler {$/;"	c	namespace:llvm
MCAssemblerFlag	MC/MCDirectives.h	/^enum MCAssemblerFlag {$/;"	g	namespace:llvm
MCAtom	MC/MCAtom.h	/^  MCAtom(AtomType T, MCModule *P, uint64_t B, uint64_t E)$/;"	f	class:llvm::MCAtom
MCAtom	MC/MCAtom.h	/^class MCAtom {$/;"	c	namespace:llvm
MCBinaryExpr	MC/MCExpr.h	/^  MCBinaryExpr(Opcode _Op, const MCExpr *_LHS, const MCExpr *_RHS)$/;"	f	class:llvm::MCBinaryExpr
MCBinaryExpr	MC/MCExpr.h	/^class MCBinaryExpr : public MCExpr {$/;"	c	namespace:llvm
MCCFIInstruction	MC/MCDwarf.h	/^    MCCFIInstruction(MCSymbol *L, const MachineLocation &D,$/;"	f	class:llvm::MCCFIInstruction
MCCFIInstruction	MC/MCDwarf.h	/^    MCCFIInstruction(OpType Op, MCSymbol *L)$/;"	f	class:llvm::MCCFIInstruction
MCCFIInstruction	MC/MCDwarf.h	/^    MCCFIInstruction(OpType Op, MCSymbol *L, StringRef Vals)$/;"	f	class:llvm::MCCFIInstruction
MCCFIInstruction	MC/MCDwarf.h	/^    MCCFIInstruction(OpType Op, MCSymbol *L, const MachineLocation &D,$/;"	f	class:llvm::MCCFIInstruction
MCCFIInstruction	MC/MCDwarf.h	/^    MCCFIInstruction(OpType Op, MCSymbol *L, unsigned Register)$/;"	f	class:llvm::MCCFIInstruction
MCCFIInstruction	MC/MCDwarf.h	/^  class MCCFIInstruction {$/;"	c	namespace:llvm
MCCodeEmitter	MC/MCCodeEmitter.h	/^class MCCodeEmitter {$/;"	c	namespace:llvm
MCCodeEmitterCtorFn	Support/TargetRegistry.h	/^    MCCodeEmitterCtorTy MCCodeEmitterCtorFn;$/;"	m	class:llvm::Target
MCCodeEmitterCtorTy	Support/TargetRegistry.h	/^    typedef MCCodeEmitter *(*MCCodeEmitterCtorTy)(const MCInstrInfo &II,$/;"	t	class:llvm::Target
MCCodeGenInfo	MC/MCCodeGenInfo.h	/^  class MCCodeGenInfo {$/;"	c	namespace:llvm
MCCodeGenInfoCtorFn	Support/TargetRegistry.h	/^    MCCodeGenInfoCtorFnTy MCCodeGenInfoCtorFn;$/;"	m	class:llvm::Target
MCCodeGenInfoCtorFnTy	Support/TargetRegistry.h	/^    typedef MCCodeGenInfo *(*MCCodeGenInfoCtorFnTy)(StringRef TT,$/;"	t	class:llvm::Target
MCConstantExpr	MC/MCExpr.h	/^  explicit MCConstantExpr(int64_t _Value)$/;"	f	class:llvm::MCConstantExpr
MCConstantExpr	MC/MCExpr.h	/^class MCConstantExpr : public MCExpr {$/;"	c	namespace:llvm
MCContext	MC/MCContext.h	/^  class MCContext {$/;"	c	namespace:llvm
MCD	MC/MCFixedLenDisassembler.h	/^namespace MCD {$/;"	n	namespace:llvm
MCDISASSEMBLER_H	MC/MCDisassembler.h	10;"	d
MCDR_DataRegion	MC/MCDirectives.h	/^  MCDR_DataRegion,            \/\/\/< .data_region$/;"	e	enum:llvm::MCDataRegionType
MCDR_DataRegionEnd	MC/MCDirectives.h	/^  MCDR_DataRegionEnd          \/\/\/< .end_data_region$/;"	e	enum:llvm::MCDataRegionType
MCDR_DataRegionJT16	MC/MCDirectives.h	/^  MCDR_DataRegionJT16,        \/\/\/< .data_region jt16$/;"	e	enum:llvm::MCDataRegionType
MCDR_DataRegionJT32	MC/MCDirectives.h	/^  MCDR_DataRegionJT32,        \/\/\/< .data_region jt32$/;"	e	enum:llvm::MCDataRegionType
MCDR_DataRegionJT8	MC/MCDirectives.h	/^  MCDR_DataRegionJT8,         \/\/\/< .data_region jt8$/;"	e	enum:llvm::MCDataRegionType
MCData	MC/MCAtom.h	/^typedef uint8_t MCData;$/;"	t	namespace:llvm
MCDataFragment	MC/MCAssembler.h	/^  MCDataFragment(MCSectionData *SD = 0) : MCFragment(FT_Data, SD) {}$/;"	f	class:llvm::MCDataFragment
MCDataFragment	MC/MCAssembler.h	/^class MCDataFragment : public MCFragment {$/;"	c	namespace:llvm
MCDataRegionType	MC/MCDirectives.h	/^enum MCDataRegionType {$/;"	g	namespace:llvm
MCDisassembler	MC/MCDisassembler.h	/^  MCDisassembler(const MCSubtargetInfo &STI) : GetOpInfo(0), SymbolLookUp(0),$/;"	f	class:llvm::MCDisassembler
MCDisassembler	MC/MCDisassembler.h	/^class MCDisassembler {$/;"	c	namespace:llvm
MCDisassemblerCtorFn	Support/TargetRegistry.h	/^    MCDisassemblerCtorTy MCDisassemblerCtorFn;$/;"	m	class:llvm::Target
MCDisassemblerCtorTy	Support/TargetRegistry.h	/^    typedef MCDisassembler *(*MCDisassemblerCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCDwarfCallFrameFragment	MC/MCAssembler.h	/^  MCDwarfCallFrameFragment(const MCExpr &_AddrDelta,  MCSectionData *SD)$/;"	f	class:llvm::MCDwarfCallFrameFragment
MCDwarfCallFrameFragment	MC/MCAssembler.h	/^class MCDwarfCallFrameFragment : public MCFragment {$/;"	c	namespace:llvm
MCDwarfDirs	MC/MCContext.h	/^    std::vector<StringRef> MCDwarfDirs;$/;"	m	class:llvm::MCContext
MCDwarfFile	MC/MCDwarf.h	/^    MCDwarfFile(StringRef name, unsigned dirIndex)$/;"	f	class:llvm::MCDwarfFile
MCDwarfFile	MC/MCDwarf.h	/^  class MCDwarfFile {$/;"	c	namespace:llvm
MCDwarfFileTable	MC/MCDwarf.h	/^  class MCDwarfFileTable {$/;"	c	namespace:llvm
MCDwarfFiles	MC/MCContext.h	/^    std::vector<MCDwarfFile *> MCDwarfFiles;$/;"	m	class:llvm::MCContext
MCDwarfFrameEmitter	MC/MCDwarf.h	/^  class MCDwarfFrameEmitter {$/;"	c	namespace:llvm
MCDwarfFrameInfo	MC/MCDwarf.h	/^    MCDwarfFrameInfo() : Begin(0), End(0), Personality(0), Lsda(0),$/;"	f	struct:llvm::MCDwarfFrameInfo
MCDwarfFrameInfo	MC/MCDwarf.h	/^  struct MCDwarfFrameInfo {$/;"	s	namespace:llvm
MCDwarfLineAddr	MC/MCDwarf.h	/^  class MCDwarfLineAddr {$/;"	c	namespace:llvm
MCDwarfLineAddrFragment	MC/MCAssembler.h	/^  MCDwarfLineAddrFragment(int64_t _LineDelta, const MCExpr &_AddrDelta,$/;"	f	class:llvm::MCDwarfLineAddrFragment
MCDwarfLineAddrFragment	MC/MCAssembler.h	/^class MCDwarfLineAddrFragment : public MCFragment {$/;"	c	namespace:llvm
MCDwarfLoc	MC/MCDwarf.h	/^    MCDwarfLoc(unsigned fileNum, unsigned line, unsigned column, unsigned flags,$/;"	f	class:llvm::MCDwarfLoc
MCDwarfLoc	MC/MCDwarf.h	/^  class MCDwarfLoc {$/;"	c	namespace:llvm
MCELFObjectTargetWriter	MC/MCELFObjectWriter.h	/^class MCELFObjectTargetWriter {$/;"	c	namespace:llvm
MCExpr	MC/MCExpr.h	/^  explicit MCExpr(ExprKind _Kind) : Kind(_Kind) {}$/;"	f	class:llvm::MCExpr
MCExpr	MC/MCExpr.h	/^class MCExpr {$/;"	c	namespace:llvm
MCFIXEDLENDISASSEMBLER_H	MC/MCFixedLenDisassembler.h	12;"	d
MCFillFragment	MC/MCAssembler.h	/^  MCFillFragment(int64_t _Value, unsigned _ValueSize, uint64_t _Size,$/;"	f	class:llvm::MCFillFragment
MCFillFragment	MC/MCAssembler.h	/^class MCFillFragment : public MCFragment {$/;"	c	namespace:llvm
MCFixup	MC/MCFixup.h	/^class MCFixup {$/;"	c	namespace:llvm
MCFixupKind	MC/MCFixup.h	/^enum MCFixupKind {$/;"	g	namespace:llvm
MCFixupKindInfo	MC/MCFixupKindInfo.h	/^struct MCFixupKindInfo {$/;"	s	namespace:llvm
MCFragment	MC/MCAssembler.h	/^class MCFragment : public ilist_node<MCFragment> {$/;"	c	namespace:llvm
MCGenDwarfInfo	MC/MCDwarf.h	/^  class MCGenDwarfInfo {$/;"	c	namespace:llvm
MCGenDwarfLabelEntries	MC/MCContext.h	/^    std::vector<const MCGenDwarfLabelEntry *> MCGenDwarfLabelEntries;$/;"	m	class:llvm::MCContext
MCGenDwarfLabelEntry	MC/MCDwarf.h	/^    MCGenDwarfLabelEntry(StringRef name, unsigned fileNumber,$/;"	f	class:llvm::MCGenDwarfLabelEntry
MCGenDwarfLabelEntry	MC/MCDwarf.h	/^  class MCGenDwarfLabelEntry {$/;"	c	namespace:llvm
MCID	CodeGen/MachineInstr.h	/^  const MCInstrDesc *MCID;              \/\/ Instruction descriptor.$/;"	m	class:llvm::MachineInstr
MCID	MC/MCInstrDesc.h	/^namespace MCID {$/;"	n	namespace:llvm
MCInst	MC/MCInst.h	/^  MCInst() : Opcode(0) {}$/;"	f	class:llvm::MCInst
MCInst	MC/MCInst.h	/^class MCInst {$/;"	c	namespace:llvm
MCInstFragment	MC/MCAssembler.h	/^  MCInstFragment(const MCInst &_Inst, MCSectionData *SD = 0)$/;"	f	class:llvm::MCInstFragment
MCInstFragment	MC/MCAssembler.h	/^class MCInstFragment : public MCFragment {$/;"	c	namespace:llvm
MCInstPrinter	MC/MCInstPrinter.h	/^  MCInstPrinter(const MCAsmInfo &mai, const MCInstrInfo &mii,$/;"	f	class:llvm::MCInstPrinter
MCInstPrinter	MC/MCInstPrinter.h	/^class MCInstPrinter {$/;"	c	namespace:llvm
MCInstPrinterCtorFn	Support/TargetRegistry.h	/^    MCInstPrinterCtorTy MCInstPrinterCtorFn;$/;"	m	class:llvm::Target
MCInstPrinterCtorTy	Support/TargetRegistry.h	/^    typedef MCInstPrinter *(*MCInstPrinterCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCInstrAnalysis	MC/MCInstrAnalysis.h	/^  MCInstrAnalysis(const MCInstrInfo *Info) : Info(Info) {}$/;"	f	class:llvm::MCInstrAnalysis
MCInstrAnalysis	MC/MCInstrAnalysis.h	/^class MCInstrAnalysis {$/;"	c	namespace:llvm
MCInstrAnalysisCtorFn	Support/TargetRegistry.h	/^    MCInstrAnalysisCtorFnTy MCInstrAnalysisCtorFn;$/;"	m	class:llvm::Target
MCInstrAnalysisCtorFnTy	Support/TargetRegistry.h	/^    typedef MCInstrAnalysis *(*MCInstrAnalysisCtorFnTy)(const MCInstrInfo*Info);$/;"	t	class:llvm::Target
MCInstrDesc	MC/MCInstrDesc.h	/^class MCInstrDesc {$/;"	c	namespace:llvm
MCInstrInfo	MC/MCInstrInfo.h	/^class MCInstrInfo {$/;"	c	namespace:llvm
MCInstrInfoCtorFn	Support/TargetRegistry.h	/^    MCInstrInfoCtorFnTy MCInstrInfoCtorFn;$/;"	m	class:llvm::Target
MCInstrInfoCtorFnTy	Support/TargetRegistry.h	/^    typedef MCInstrInfo *(*MCInstrInfoCtorFnTy)(void);$/;"	t	class:llvm::Target
MCJITCtor	ExecutionEngine/ExecutionEngine.h	/^  static ExecutionEngine *(*MCJITCtor)($/;"	m	class:llvm::ExecutionEngine
MCLEBFragment	MC/MCAssembler.h	/^  MCLEBFragment(const MCExpr &Value_, bool IsSigned_, MCSectionData *SD)$/;"	f	class:llvm::MCLEBFragment
MCLEBFragment	MC/MCAssembler.h	/^class MCLEBFragment : public MCFragment {$/;"	c	namespace:llvm
MCLabel	MC/MCLabel.h	/^    MCLabel(unsigned instance)$/;"	f	class:llvm::MCLabel
MCLabel	MC/MCLabel.h	/^  class MCLabel {$/;"	c	namespace:llvm
MCLineEntries	MC/MCDwarf.h	/^    MCLineEntryCollection MCLineEntries;$/;"	m	class:llvm::MCLineSection
MCLineEntry	MC/MCDwarf.h	/^    MCLineEntry(MCSymbol *label, const MCDwarfLoc loc) : MCDwarfLoc(loc),$/;"	f	class:llvm::MCLineEntry
MCLineEntry	MC/MCDwarf.h	/^  class MCLineEntry : public MCDwarfLoc {$/;"	c	namespace:llvm
MCLineEntryCollection	MC/MCDwarf.h	/^    typedef std::vector<MCLineEntry> MCLineEntryCollection;$/;"	t	class:llvm::MCLineSection
MCLineSection	MC/MCDwarf.h	/^    MCLineSection() {}$/;"	f	class:llvm::MCLineSection
MCLineSection	MC/MCDwarf.h	/^  class MCLineSection {$/;"	c	namespace:llvm
MCLineSectionOrder	MC/MCContext.h	/^    std::vector<const MCSection *> MCLineSectionOrder;$/;"	m	class:llvm::MCContext
MCLineSections	MC/MCContext.h	/^    DenseMap<const MCSection *, MCLineSection *> MCLineSections;$/;"	m	class:llvm::MCContext
MCMachObjectTargetWriter	MC/MCMachObjectWriter.h	/^class MCMachObjectTargetWriter {$/;"	c	namespace:llvm
MCModule	MC/MCModule.h	/^  MCModule(IntervalMap<uint64_t, MCAtom*>::Allocator &A) : OffsetMap(A) { }$/;"	f	class:llvm::MCModule
MCModule	MC/MCModule.h	/^class MCModule {$/;"	c	namespace:llvm
MCOI	MC/MCInstrDesc.h	/^namespace MCOI {$/;"	n	namespace:llvm
MCObjectFileInfo	MC/MCObjectFileInfo.h	/^class MCObjectFileInfo {$/;"	c	namespace:llvm
MCObjectStreamer	MC/MCObjectStreamer.h	/^class MCObjectStreamer : public MCStreamer {$/;"	c	namespace:llvm
MCObjectStreamerCtorFn	Support/TargetRegistry.h	/^    MCObjectStreamerCtorTy MCObjectStreamerCtorFn;$/;"	m	class:llvm::Target
MCObjectStreamerCtorTy	Support/TargetRegistry.h	/^    typedef MCStreamer *(*MCObjectStreamerCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCObjectWriter	MC/MCObjectWriter.h	/^  MCObjectWriter(raw_ostream &_OS, bool _IsLittleEndian)$/;"	f	class:llvm::MCObjectWriter
MCObjectWriter	MC/MCObjectWriter.h	/^class MCObjectWriter {$/;"	c	namespace:llvm
MCOperand	MC/MCInst.h	/^  MCOperand() : Kind(kInvalid), FPImmVal(0.0) {}$/;"	f	class:llvm::MCOperand
MCOperand	MC/MCInst.h	/^class MCOperand {$/;"	c	namespace:llvm
MCOperandInfo	MC/MCInstrDesc.h	/^class MCOperandInfo {$/;"	c	namespace:llvm
MCOperandNum	MC/MCParser/MCParsedAsmOperand.h	/^  unsigned MCOperandNum;$/;"	m	class:llvm::MCParsedAsmOperand
MCOrgFragment	MC/MCAssembler.h	/^  MCOrgFragment(const MCExpr &_Offset, int8_t _Value, MCSectionData *SD = 0)$/;"	f	class:llvm::MCOrgFragment
MCOrgFragment	MC/MCAssembler.h	/^class MCOrgFragment : public MCFragment {$/;"	c	namespace:llvm
MCP	CodeGen/FastISel.h	/^  MachineConstantPool &MCP;$/;"	m	class:llvm::FastISel
MCPU	ExecutionEngine/ExecutionEngine.h	/^  std::string MCPU;$/;"	m	class:llvm::EngineBuilder
MCParsedAsmOperand	MC/MCParser/MCParsedAsmOperand.h	/^  MCParsedAsmOperand() {}$/;"	f	class:llvm::MCParsedAsmOperand
MCParsedAsmOperand	MC/MCParser/MCParsedAsmOperand.h	/^class MCParsedAsmOperand {$/;"	c	namespace:llvm
MCProcResourceDesc	MC/MCSchedule.h	/^struct MCProcResourceDesc {$/;"	s	namespace:llvm
MCReadAdvanceEntry	MC/MCSchedule.h	/^struct MCReadAdvanceEntry {$/;"	s	namespace:llvm
MCRegAliasIterator	MC/MCRegisterInfo.h	/^  MCRegAliasIterator(unsigned Reg, const MCRegisterInfo *MCRI,$/;"	f	class:llvm::MCRegAliasIterator
MCRegAliasIterator	MC/MCRegisterInfo.h	/^class MCRegAliasIterator : public MCRegisterInfo::DiffListIterator {$/;"	c	namespace:llvm
MCRegInfoCtorFn	Support/TargetRegistry.h	/^    MCRegInfoCtorFnTy MCRegInfoCtorFn;$/;"	m	class:llvm::Target
MCRegInfoCtorFnTy	Support/TargetRegistry.h	/^    typedef MCRegisterInfo *(*MCRegInfoCtorFnTy)(StringRef TT);$/;"	t	class:llvm::Target
MCRegUnitIterator	MC/MCRegisterInfo.h	/^  MCRegUnitIterator(unsigned Reg, const MCRegisterInfo *MCRI) {$/;"	f	class:llvm::MCRegUnitIterator
MCRegUnitIterator	MC/MCRegisterInfo.h	/^class MCRegUnitIterator : public MCRegisterInfo::DiffListIterator {$/;"	c	namespace:llvm
MCRegUnitRootIterator	MC/MCRegisterInfo.h	/^  MCRegUnitRootIterator(unsigned RegUnit, const MCRegisterInfo *MCRI) {$/;"	f	class:llvm::MCRegUnitRootIterator
MCRegUnitRootIterator	MC/MCRegisterInfo.h	/^class MCRegUnitRootIterator {$/;"	c	namespace:llvm
MCRegisterClass	MC/MCRegisterInfo.h	/^class MCRegisterClass {$/;"	c	namespace:llvm
MCRegisterDesc	MC/MCRegisterInfo.h	/^struct MCRegisterDesc {$/;"	s	namespace:llvm
MCRegisterInfo	MC/MCRegisterInfo.h	/^class MCRegisterInfo {$/;"	c	namespace:llvm
MCSA_ELF_TypeCommon	MC/MCDirectives.h	/^  MCSA_ELF_TypeCommon,      \/\/\/< .type _foo, STT_COMMON  # aka @common$/;"	e	enum:llvm::MCSymbolAttr
MCSA_ELF_TypeFunction	MC/MCDirectives.h	/^  MCSA_ELF_TypeFunction,    \/\/\/< .type _foo, STT_FUNC  # aka @function$/;"	e	enum:llvm::MCSymbolAttr
MCSA_ELF_TypeGnuUniqueObject	MC/MCDirectives.h	/^  MCSA_ELF_TypeGnuUniqueObject, \/\/\/ .type _foo, @gnu_unique_object$/;"	e	enum:llvm::MCSymbolAttr
MCSA_ELF_TypeIndFunction	MC/MCDirectives.h	/^  MCSA_ELF_TypeIndFunction, \/\/\/< .type _foo, STT_GNU_IFUNC$/;"	e	enum:llvm::MCSymbolAttr
MCSA_ELF_TypeNoType	MC/MCDirectives.h	/^  MCSA_ELF_TypeNoType,      \/\/\/< .type _foo, STT_NOTYPE  # aka @notype$/;"	e	enum:llvm::MCSymbolAttr
MCSA_ELF_TypeObject	MC/MCDirectives.h	/^  MCSA_ELF_TypeObject,      \/\/\/< .type _foo, STT_OBJECT  # aka @object$/;"	e	enum:llvm::MCSymbolAttr
MCSA_ELF_TypeTLS	MC/MCDirectives.h	/^  MCSA_ELF_TypeTLS,         \/\/\/< .type _foo, STT_TLS     # aka @tls_object$/;"	e	enum:llvm::MCSymbolAttr
MCSA_Global	MC/MCDirectives.h	/^  MCSA_Global,              \/\/\/< .globl$/;"	e	enum:llvm::MCSymbolAttr
MCSA_Hidden	MC/MCDirectives.h	/^  MCSA_Hidden,              \/\/\/< .hidden (ELF)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_IndirectSymbol	MC/MCDirectives.h	/^  MCSA_IndirectSymbol,      \/\/\/< .indirect_symbol (MachO)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_Internal	MC/MCDirectives.h	/^  MCSA_Internal,            \/\/\/< .internal (ELF)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_Invalid	MC/MCDirectives.h	/^  MCSA_Invalid = 0,    \/\/\/< Not a valid directive.$/;"	e	enum:llvm::MCSymbolAttr
MCSA_LazyReference	MC/MCDirectives.h	/^  MCSA_LazyReference,       \/\/\/< .lazy_reference (MachO)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_Local	MC/MCDirectives.h	/^  MCSA_Local,               \/\/\/< .local (ELF)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_NoDeadStrip	MC/MCDirectives.h	/^  MCSA_NoDeadStrip,         \/\/\/< .no_dead_strip (MachO)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_PrivateExtern	MC/MCDirectives.h	/^  MCSA_PrivateExtern,       \/\/\/< .private_extern (MachO)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_Protected	MC/MCDirectives.h	/^  MCSA_Protected,           \/\/\/< .protected (ELF)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_Reference	MC/MCDirectives.h	/^  MCSA_Reference,           \/\/\/< .reference (MachO)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_SymbolResolver	MC/MCDirectives.h	/^  MCSA_SymbolResolver,      \/\/\/< .symbol_resolver (MachO)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_Weak	MC/MCDirectives.h	/^  MCSA_Weak,                \/\/\/< .weak$/;"	e	enum:llvm::MCSymbolAttr
MCSA_WeakDefAutoPrivate	MC/MCDirectives.h	/^  MCSA_WeakDefAutoPrivate   \/\/\/< .weak_def_can_be_hidden (MachO)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_WeakDefinition	MC/MCDirectives.h	/^  MCSA_WeakDefinition,      \/\/\/< .weak_definition (MachO)$/;"	e	enum:llvm::MCSymbolAttr
MCSA_WeakReference	MC/MCDirectives.h	/^  MCSA_WeakReference,       \/\/\/< .weak_reference (MachO)$/;"	e	enum:llvm::MCSymbolAttr
MCSchedClassDesc	MC/MCSchedule.h	/^struct MCSchedClassDesc {$/;"	s	namespace:llvm
MCSchedModel	MC/MCSchedule.h	/^  MCSchedModel(): IssueWidth(DefaultIssueWidth),$/;"	f	class:llvm::MCSchedModel
MCSchedModel	MC/MCSchedule.h	/^  MCSchedModel(unsigned iw, int ml, unsigned ll, unsigned hl, unsigned mp,$/;"	f	class:llvm::MCSchedModel
MCSchedModel	MC/MCSchedule.h	/^class MCSchedModel {$/;"	c	namespace:llvm
MCSection	MC/MCSection.h	/^    MCSection(SectionVariant V, SectionKind K) : Variant(V), Kind(K) {}$/;"	f	class:llvm::MCSection
MCSection	MC/MCSection.h	/^  class MCSection {$/;"	c	namespace:llvm
MCSectionCOFF	MC/MCSectionCOFF.h	/^    MCSectionCOFF(StringRef Section, unsigned Characteristics,$/;"	f	class:llvm::MCSectionCOFF
MCSectionCOFF	MC/MCSectionCOFF.h	/^  class MCSectionCOFF : public MCSection {$/;"	c	namespace:llvm
MCSectionData	MC/MCAssembler.h	/^class MCSectionData : public ilist_node<MCSectionData> {$/;"	c	namespace:llvm
MCSectionELF	MC/MCSectionELF.h	/^  MCSectionELF(StringRef Section, unsigned type, unsigned flags,$/;"	f	class:llvm::MCSectionELF
MCSectionELF	MC/MCSectionELF.h	/^class MCSectionELF : public MCSection {$/;"	c	namespace:llvm
MCSectionMachO	MC/MCSectionMachO.h	/^class MCSectionMachO : public MCSection {$/;"	c	namespace:llvm
MCStreamer	MC/MCStreamer.h	/^  class MCStreamer {$/;"	c	namespace:llvm
MCSubRegIterator	MC/MCRegisterInfo.h	/^  MCSubRegIterator(unsigned Reg, const MCRegisterInfo *MCRI) {$/;"	f	class:llvm::MCSubRegIterator
MCSubRegIterator	MC/MCRegisterInfo.h	/^class MCSubRegIterator : public MCRegisterInfo::DiffListIterator {$/;"	c	namespace:llvm
MCSubtargetInfo	MC/MCSubtargetInfo.h	/^class MCSubtargetInfo {$/;"	c	namespace:llvm
MCSubtargetInfoCtorFn	Support/TargetRegistry.h	/^    MCSubtargetInfoCtorFnTy MCSubtargetInfoCtorFn;$/;"	m	class:llvm::Target
MCSubtargetInfoCtorFnTy	Support/TargetRegistry.h	/^    typedef MCSubtargetInfo *(*MCSubtargetInfoCtorFnTy)(StringRef TT,$/;"	t	class:llvm::Target
MCSuperRegIterator	MC/MCRegisterInfo.h	/^  MCSuperRegIterator(unsigned Reg, const MCRegisterInfo *MCRI) {$/;"	f	class:llvm::MCSuperRegIterator
MCSuperRegIterator	MC/MCRegisterInfo.h	/^class MCSuperRegIterator : public MCRegisterInfo::DiffListIterator {$/;"	c	namespace:llvm
MCSymbol	MC/MCSymbol.h	/^    MCSymbol(StringRef name, bool isTemporary)$/;"	f	class:llvm::MCSymbol
MCSymbol	MC/MCSymbol.h	/^  class MCSymbol {$/;"	c	namespace:llvm
MCSymbolAttr	MC/MCDirectives.h	/^enum MCSymbolAttr {$/;"	g	namespace:llvm
MCSymbolData	MC/MCAssembler.h	/^class MCSymbolData : public ilist_node<MCSymbolData> {$/;"	c	namespace:llvm
MCSymbolRefExpr	MC/MCExpr.h	/^  explicit MCSymbolRefExpr(const MCSymbol *_Symbol, VariantKind _Kind)$/;"	f	class:llvm::MCSymbolRefExpr
MCSymbolRefExpr	MC/MCExpr.h	/^class MCSymbolRefExpr : public MCExpr {$/;"	c	namespace:llvm
MCTargetAsmLexer	MC/MCTargetAsmLexer.h	/^class MCTargetAsmLexer {$/;"	c	namespace:llvm
MCTargetAsmParser	MC/MCTargetAsmParser.h	/^class MCTargetAsmParser : public MCAsmParserExtension {$/;"	c	namespace:llvm
MCTargetExpr	MC/MCExpr.h	/^  MCTargetExpr() : MCExpr(Target) {}$/;"	f	class:llvm::MCTargetExpr
MCTargetExpr	MC/MCExpr.h	/^class MCTargetExpr : public MCExpr {$/;"	c	namespace:llvm
MCUnaryExpr	MC/MCExpr.h	/^  MCUnaryExpr(Opcode _Op, const MCExpr *_Expr)$/;"	f	class:llvm::MCUnaryExpr
MCUnaryExpr	MC/MCExpr.h	/^class MCUnaryExpr : public MCExpr {$/;"	c	namespace:llvm
MCValue	MC/MCValue.h	/^class MCValue {$/;"	c	namespace:llvm
MCWin64EHInstruction	MC/MCWin64EH.h	/^    MCWin64EHInstruction(MCSymbol *L, unsigned Size)$/;"	f	class:llvm::MCWin64EHInstruction
MCWin64EHInstruction	MC/MCWin64EH.h	/^    MCWin64EHInstruction(OpType Op, MCSymbol *L, bool Code)$/;"	f	class:llvm::MCWin64EHInstruction
MCWin64EHInstruction	MC/MCWin64EH.h	/^    MCWin64EHInstruction(OpType Op, MCSymbol *L, unsigned Reg)$/;"	f	class:llvm::MCWin64EHInstruction
MCWin64EHInstruction	MC/MCWin64EH.h	/^    MCWin64EHInstruction(OpType Op, MCSymbol *L, unsigned Reg, unsigned Off)$/;"	f	class:llvm::MCWin64EHInstruction
MCWin64EHInstruction	MC/MCWin64EH.h	/^  class MCWin64EHInstruction {$/;"	c	namespace:llvm
MCWin64EHUnwindEmitter	MC/MCWin64EH.h	/^  class MCWin64EHUnwindEmitter {$/;"	c	namespace:llvm
MCWin64EHUnwindInfo	MC/MCWin64EH.h	/^    MCWin64EHUnwindInfo() : Begin(0), End(0), ExceptionHandler(0),$/;"	f	struct:llvm::MCWin64EHUnwindInfo
MCWin64EHUnwindInfo	MC/MCWin64EH.h	/^  struct MCWin64EHUnwindInfo {$/;"	s	namespace:llvm
MCWinCOFFObjectTargetWriter	MC/MCWinCOFFObjectWriter.h	/^  class MCWinCOFFObjectTargetWriter {$/;"	c	namespace:llvm
MCWriteLatencyEntry	MC/MCSchedule.h	/^struct MCWriteLatencyEntry {$/;"	s	namespace:llvm
MCWriteProcResEntry	MC/MCSchedule.h	/^struct MCWriteProcResEntry {$/;"	s	namespace:llvm
MD	CodeGen/MachineOperand.h	/^    const MDNode *MD;         \/\/ For MO_Metadata.$/;"	m	union:llvm::MachineOperand::__anon36
MD	CodeGen/SelectionDAGNodes.h	/^  const MDNode *MD;$/;"	m	class:llvm::MDNodeSDNode
MDBuilder	MDBuilder.h	/^    MDBuilder(LLVMContext &context) : Context(context) {}$/;"	f	class:llvm::MDBuilder
MDBuilder	MDBuilder.h	/^  class MDBuilder {$/;"	c	namespace:llvm
MDNODE_SDNODE	CodeGen/ISDOpcodes.h	/^    MDNODE_SDNODE,$/;"	e	enum:llvm::ISD::NodeType
MDNode	Metadata.h	/^class MDNode : public Value, public FoldingSetNode {$/;"	c	namespace:llvm
MDNodeSDNode	CodeGen/SelectionDAGNodes.h	/^  explicit MDNodeSDNode(const MDNode *md)$/;"	f	class:llvm::MDNodeSDNode
MDNodeSDNode	CodeGen/SelectionDAGNodes.h	/^class MDNodeSDNode : public SDNode {$/;"	c	namespace:llvm
MDNodeVal	Value.h	/^    MDNodeVal,                \/\/ This is an instance of MDNode$/;"	e	enum:llvm::Value::ValueTy
MDString	Metadata.h	/^class MDString : public Value {$/;"	c	namespace:llvm
MDStringVal	Value.h	/^    MDStringVal,              \/\/ This is an instance of MDString$/;"	e	enum:llvm::Value::ValueTy
MDT	CodeGen/MachineScheduler.h	/^  const MachineDominatorTree *MDT;$/;"	m	struct:llvm::MachineSchedContext
MDT	CodeGen/ScheduleDAGInstrs.h	/^    const MachineDominatorTree &MDT;$/;"	m	class:llvm::ScheduleDAGInstrs
MD_dbg	LLVMContext.h	/^    MD_dbg = 0,  \/\/ "dbg"$/;"	e	enum:llvm::LLVMContext::__anon63
MD_fpmath	LLVMContext.h	/^    MD_fpmath = 3,  \/\/ "fpmath"$/;"	e	enum:llvm::LLVMContext::__anon63
MD_prof	LLVMContext.h	/^    MD_prof = 2,  \/\/ "prof"$/;"	e	enum:llvm::LLVMContext::__anon63
MD_range	LLVMContext.h	/^    MD_range = 4, \/\/ "range"$/;"	e	enum:llvm::LLVMContext::__anon63
MD_tbaa	LLVMContext.h	/^    MD_tbaa = 1, \/\/ "tbaa"$/;"	e	enum:llvm::LLVMContext::__anon63
MD_tbaa_struct	LLVMContext.h	/^    MD_tbaa_struct = 5 \/\/ "tbaa.struct"$/;"	e	enum:llvm::LLVMContext::__anon63
MEMBARRIER	CodeGen/ISDOpcodes.h	/^    MEMBARRIER,$/;"	e	enum:llvm::ISD::NodeType
MEMCPY	CodeGen/RuntimeLibcalls.h	/^    MEMCPY,$/;"	e	enum:llvm::RTLIB::Libcall
MEMMOVE	CodeGen/RuntimeLibcalls.h	/^    MEMMOVE,$/;"	e	enum:llvm::RTLIB::Libcall
MEMORYOBJECT_H	Support/MemoryObject.h	11;"	d
MEMSET	CodeGen/RuntimeLibcalls.h	/^    MEMSET,$/;"	e	enum:llvm::RTLIB::Libcall
MERGE_VALUES	CodeGen/ISDOpcodes.h	/^    MERGE_VALUES,$/;"	e	enum:llvm::ISD::NodeType
METADATA_ATTACHMENT	Bitcode/LLVMBitCodes.h	/^    METADATA_ATTACHMENT    = 11   \/\/ [m x [value, [n x [id, mdnode]]]$/;"	e	enum:llvm::bitc::MetadataCodes
METADATA_ATTACHMENT_ID	Bitcode/LLVMBitCodes.h	/^    METADATA_ATTACHMENT_ID,$/;"	e	enum:llvm::bitc::BlockIDs
METADATA_BLOCK_ID	Bitcode/LLVMBitCodes.h	/^    METADATA_BLOCK_ID,$/;"	e	enum:llvm::bitc::BlockIDs
METADATA_FN_NODE	Bitcode/LLVMBitCodes.h	/^    METADATA_FN_NODE       = 9,   \/\/ FN_NODE:       [n x (type num, value num)]$/;"	e	enum:llvm::bitc::MetadataCodes
METADATA_KIND	Bitcode/LLVMBitCodes.h	/^    METADATA_KIND          = 6,   \/\/ [n x [id, name]]$/;"	e	enum:llvm::bitc::MetadataCodes
METADATA_NAME	Bitcode/LLVMBitCodes.h	/^    METADATA_NAME          = 4,   \/\/ STRING:        [values]$/;"	e	enum:llvm::bitc::MetadataCodes
METADATA_NAMED_NODE	Bitcode/LLVMBitCodes.h	/^    METADATA_NAMED_NODE    = 10,  \/\/ NAMED_NODE:    [n x mdnodes]$/;"	e	enum:llvm::bitc::MetadataCodes
METADATA_NODE	Bitcode/LLVMBitCodes.h	/^    METADATA_NODE          = 8,   \/\/ NODE:          [n x (type num, value num)]$/;"	e	enum:llvm::bitc::MetadataCodes
METADATA_STRING	Bitcode/LLVMBitCodes.h	/^    METADATA_STRING        = 1,   \/\/ MDSTRING:      [values]$/;"	e	enum:llvm::bitc::MetadataCodes
MF	CodeGen/AsmPrinter.h	/^    const MachineFunction *MF;$/;"	m	class:llvm::AsmPrinter
MF	CodeGen/CalcSpillWeights.h	/^    MachineFunction &MF;$/;"	m	class:llvm::VirtRegAuxInfo
MF	CodeGen/CallingConvLower.h	/^  MachineFunction &MF;$/;"	m	class:llvm::CCState
MF	CodeGen/DFAPacketizer.h	/^  const MachineFunction &MF;$/;"	m	class:llvm::VLIWPacketizerList
MF	CodeGen/EdgeBundles.h	/^  const MachineFunction *MF;$/;"	m	class:llvm::EdgeBundles
MF	CodeGen/FunctionLoweringInfo.h	/^  MachineFunction *MF;$/;"	m	class:llvm::FunctionLoweringInfo
MF	CodeGen/LexicalScopes.h	/^  const MachineFunction *MF;$/;"	m	class:llvm::LexicalScopes
MF	CodeGen/LiveIntervalAnalysis.h	/^    MachineFunction* MF;$/;"	m	class:llvm::LiveIntervals
MF	CodeGen/LiveVariables.h	/^  MachineFunction *MF;$/;"	m	class:llvm::LiveVariables
MF	CodeGen/MachineFunctionAnalysis.h	/^  MachineFunction *MF;$/;"	m	struct:llvm::MachineFunctionAnalysis
MF	CodeGen/MachineScheduler.h	/^  MachineFunction *MF;$/;"	m	struct:llvm::MachineSchedContext
MF	CodeGen/RegisterClassInfo.h	/^  const MachineFunction *MF;$/;"	m	class:llvm::RegisterClassInfo
MF	CodeGen/RegisterPressure.h	/^  const MachineFunction     *MF;$/;"	m	class:llvm::RegPressureTracker
MF	CodeGen/ScheduleDAG.h	/^    MachineFunction &MF;                  \/\/ Machine function$/;"	m	class:llvm::ScheduleDAG
MF	CodeGen/SelectionDAG.h	/^  MachineFunction *MF;$/;"	m	class:llvm::SelectionDAG
MF	CodeGen/SelectionDAGISel.h	/^  MachineFunction *MF;$/;"	m	class:llvm::SelectionDAGISel
MF	ExecutionEngine/JITEventListener.h	/^  const MachineFunction *MF;$/;"	m	struct:llvm::JITEvent_EmittedFunctionDetails
MFI	CodeGen/FastISel.h	/^  MachineFrameInfo &MFI;$/;"	m	class:llvm::FastISel
MFI	CodeGen/ScheduleDAGInstrs.h	/^    const MachineFrameInfo *MFI;$/;"	m	class:llvm::ScheduleDAGInstrs
MFInfo	CodeGen/MachineFunction.h	/^  MachineFunctionInfo *MFInfo;$/;"	m	class:llvm::MachineFunction
MF_EXEC	Support/Memory.h	/^      MF_EXEC  = 0x4000000$/;"	e	enum:llvm::sys::Memory::ProtectionFlags
MF_READ	Support/Memory.h	/^      MF_READ  = 0x1000000,$/;"	e	enum:llvm::sys::Memory::ProtectionFlags
MF_WRITE	Support/Memory.h	/^      MF_WRITE = 0x2000000,$/;"	e	enum:llvm::sys::Memory::ProtectionFlags
MHS	TableGen/Record.h	/^  Init *LHS, *MHS, *RHS;$/;"	m	class:llvm::TernOpInit
MI	Analysis/ProfileInfo.h	/^    ProfileInfoT<MachineFunction, MachineBasicBlock> *MI() {$/;"	f	class:llvm::ProfileInfoT
MI	CodeGen/MachineInstrBuilder.h	/^  MachineInstr *MI;$/;"	m	class:llvm::MachineInstrBuilder
MIBundleOperands	CodeGen/MachineInstrBundle.h	/^  MIBundleOperands(MachineInstr *MI) : MachineOperandIteratorBase(MI, true) {}$/;"	f	class:llvm::MIBundleOperands
MIBundleOperands	CodeGen/MachineInstrBundle.h	/^class MIBundleOperands : public MachineOperandIteratorBase {$/;"	c	namespace:llvm
MICROSECONDS_PER_SECOND	Support/TimeValue.h	/^      MICROSECONDS_PER_SECOND = 1000000,    \/\/\/< One Million$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
MICheckType	CodeGen/MachineInstr.h	/^  enum MICheckType {$/;"	g	class:llvm::MachineInstr
MIFlag	CodeGen/MachineInstr.h	/^  enum MIFlag {$/;"	g	class:llvm::MachineInstr
MII	CodeGen/MachineBasicBlock.h	/^    IterTy MII;$/;"	m	class:llvm::MachineBasicBlock::bundle_iterator
MII	MC/MCInstPrinter.h	/^  const MCInstrInfo &MII;$/;"	m	class:llvm::MCInstPrinter
MILLISECONDS_PER_SECOND	Support/TimeValue.h	/^      MILLISECONDS_PER_SECOND = 1000,       \/\/\/< One Thousand$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
MIN_INT_BITS	DerivedTypes.h	/^    MIN_INT_BITS = 1,        \/\/\/< Minimum number of bits that can be specified$/;"	e	enum:llvm::IntegerType::__anon50
MIOp_AsmString	InlineAsm.h	/^    MIOp_AsmString = 0,$/;"	e	enum:llvm::InlineAsm::__anon57
MIOp_ExtraInfo	InlineAsm.h	/^    MIOp_ExtraInfo = 1,    \/\/ HasSideEffects, IsAlignStack, AsmDialect.$/;"	e	enum:llvm::InlineAsm::__anon57
MIOp_FirstOperand	InlineAsm.h	/^    MIOp_FirstOperand = 2,$/;"	e	enum:llvm::InlineAsm::__anon57
MIOperands	CodeGen/MachineInstrBundle.h	/^  MIOperands(MachineInstr *MI) : MachineOperandIteratorBase(MI, false) {}$/;"	f	class:llvm::MIOperands
MIOperands	CodeGen/MachineInstrBundle.h	/^class MIOperands : public MachineOperandIteratorBase {$/;"	c	namespace:llvm
MISUnitMap	CodeGen/ScheduleDAGInstrs.h	/^    DenseMap<MachineInstr*, SUnit*> MISUnitMap;$/;"	m	class:llvm::ScheduleDAGInstrs
MIToSUnit	CodeGen/DFAPacketizer.h	/^  std::map<MachineInstr*, SUnit*> MIToSUnit;$/;"	m	class:llvm::VLIWPacketizerList
MIV	Analysis/DependenceAnalysis.h	/^      enum ClassificationKind { ZIV, SIV, RDIV, MIV, NonLinear } Classification;$/;"	e	enum:llvm::DependenceAnalysis::Subscript::ClassificationKind
MLI	CodeGen/MachineScheduler.h	/^  const MachineLoopInfo *MLI;$/;"	m	struct:llvm::MachineSchedContext
MLI	CodeGen/ScheduleDAGInstrs.h	/^    const MachineLoopInfo &MLI;$/;"	m	class:llvm::ScheduleDAGInstrs
MM	ExecutionEngine/RuntimeDyld.h	/^  RTDyldMemoryManager *MM;$/;"	m	class:llvm::RuntimeDyld
MMI	CodeGen/AsmPrinter.h	/^    MachineModuleInfo *MMI;$/;"	m	class:llvm::AsmPrinter
MMI	CodeGen/MachineFunction.h	/^  MachineModuleInfo &MMI;$/;"	m	class:llvm::MachineFunction
MMO	CodeGen/SelectionDAGNodes.h	/^  MachineMemOperand *MMO;$/;"	m	class:llvm::MemSDNode
MMX	Intrinsics.h	/^      Void, MMX, Metadata, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
MODIFICATION_MSG	PassManagers.h	/^  MODIFICATION_MSG, \/\/ "' Made Modification '"$/;"	e	enum:llvm::PassDebuggingString
MODULE_BLOCK_ID	Bitcode/LLVMBitCodes.h	/^    MODULE_BLOCK_ID          = FIRST_APPLICATION_BLOCKID,$/;"	e	enum:llvm::bitc::BlockIDs
MODULE_CODE_ALIAS	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_ALIAS       = 9,$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_ASM	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_ASM         = 4,    \/\/ ASM:         [strchr x N]$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_DATALAYOUT	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_DATALAYOUT  = 3,    \/\/ DATALAYOUT:  [strchr x N]$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_DEPLIB	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_DEPLIB      = 6,    \/\/ DEPLIB:      [strchr x N]$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_FUNCTION	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_FUNCTION    = 8,$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_GCNAME	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_GCNAME      = 11   \/\/ GCNAME: [strchr x N]$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_GLOBALVAR	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_GLOBALVAR   = 7,$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_PURGEVALS	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_PURGEVALS   = 10,$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_SECTIONNAME	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_SECTIONNAME = 5,    \/\/ SECTIONNAME: [strchr x N]$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_TRIPLE	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_TRIPLE      = 2,    \/\/ TRIPLE:      [strchr x N]$/;"	e	enum:llvm::bitc::ModuleCodes
MODULE_CODE_VERSION	Bitcode/LLVMBitCodes.h	/^    MODULE_CODE_VERSION     = 1,    \/\/ VERSION:     [version#]$/;"	e	enum:llvm::bitc::ModuleCodes
MOFI	MC/MCContext.h	/^    const MCObjectFileInfo *MOFI;$/;"	m	class:llvm::MCContext
MOInvariant	CodeGen/MachineMemOperand.h	/^    MOInvariant = 16,$/;"	e	enum:llvm::MachineMemOperand::MemOperandFlags
MOLoad	CodeGen/MachineMemOperand.h	/^    MOLoad = 1,$/;"	e	enum:llvm::MachineMemOperand::MemOperandFlags
MOMaxBits	CodeGen/MachineMemOperand.h	/^    MOMaxBits = 5$/;"	e	enum:llvm::MachineMemOperand::MemOperandFlags
MONonTemporal	CodeGen/MachineMemOperand.h	/^    MONonTemporal = 8,$/;"	e	enum:llvm::MachineMemOperand::MemOperandFlags
MOStore	CodeGen/MachineMemOperand.h	/^    MOStore = 2,$/;"	e	enum:llvm::MachineMemOperand::MemOperandFlags
MOVolatile	CodeGen/MachineMemOperand.h	/^    MOVolatile = 4,$/;"	e	enum:llvm::MachineMemOperand::MemOperandFlags
MO_BlockAddress	CodeGen/MachineOperand.h	/^    MO_BlockAddress,           \/\/\/< Address of a basic block$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_CImmediate	CodeGen/MachineOperand.h	/^    MO_CImmediate,             \/\/\/< Immediate >64bit operand$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_ConstantPoolIndex	CodeGen/MachineOperand.h	/^    MO_ConstantPoolIndex,      \/\/\/< Address of indexed Constant in Constant Pool$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_ExternalSymbol	CodeGen/MachineOperand.h	/^    MO_ExternalSymbol,         \/\/\/< Name of external global symbol$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_FPImmediate	CodeGen/MachineOperand.h	/^    MO_FPImmediate,            \/\/\/< Floating-point immediate operand$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_FrameIndex	CodeGen/MachineOperand.h	/^    MO_FrameIndex,             \/\/\/< Abstract Stack Frame Index$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_GlobalAddress	CodeGen/MachineOperand.h	/^    MO_GlobalAddress,          \/\/\/< Address of a global value$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_Immediate	CodeGen/MachineOperand.h	/^    MO_Immediate,              \/\/\/< Immediate operand$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_JumpTableIndex	CodeGen/MachineOperand.h	/^    MO_JumpTableIndex,         \/\/\/< Address of indexed Jump Table for switch$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_MCSymbol	CodeGen/MachineOperand.h	/^    MO_MCSymbol                \/\/\/< MCSymbol reference (for debug\/eh info)$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_MachineBasicBlock	CodeGen/MachineOperand.h	/^    MO_MachineBasicBlock,      \/\/\/< MachineBasicBlock reference$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_Metadata	CodeGen/MachineOperand.h	/^    MO_Metadata,               \/\/\/< Metadata reference (for debug info)$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_Register	CodeGen/MachineOperand.h	/^    MO_Register,               \/\/\/< Register operand.$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_RegisterMask	CodeGen/MachineOperand.h	/^    MO_RegisterMask,           \/\/\/< Mask of preserved registers.$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MO_TargetIndex	CodeGen/MachineOperand.h	/^    MO_TargetIndex,            \/\/\/< Target-dependent index+offset operand.$/;"	e	enum:llvm::MachineOperand::MachineOperandType
MRI	CodeGen/FastISel.h	/^  MachineRegisterInfo &MRI;$/;"	m	class:llvm::FastISel
MRI	CodeGen/LiveIntervalAnalysis.h	/^    MachineRegisterInfo* MRI;$/;"	m	class:llvm::LiveIntervals
MRI	CodeGen/LiveRangeEdit.h	/^  MachineRegisterInfo &MRI;$/;"	m	class:llvm::LiveRangeEdit
MRI	CodeGen/LiveVariables.h	/^  MachineRegisterInfo* MRI;$/;"	m	class:llvm::LiveVariables
MRI	CodeGen/MachineSSAUpdater.h	/^  MachineRegisterInfo *MRI;$/;"	m	class:llvm::MachineSSAUpdater
MRI	CodeGen/RegisterPressure.h	/^  const MachineRegisterInfo *MRI;$/;"	m	class:llvm::RegPressureTracker
MRI	CodeGen/RegisterScavenging.h	/^  MachineRegisterInfo* MRI;$/;"	m	class:llvm::RegScavenger
MRI	CodeGen/ScheduleDAG.h	/^    MachineRegisterInfo &MRI;             \/\/ Virtual\/real register map$/;"	m	class:llvm::ScheduleDAG
MRI	MC/MCContext.h	/^    const MCRegisterInfo &MRI;$/;"	m	class:llvm::MCContext
MRI	MC/MCInstPrinter.h	/^  const MCRegisterInfo &MRI;$/;"	m	class:llvm::MCInstPrinter
MRInfo	Analysis/LibCallSemantics.h	/^      AliasAnalysis::ModRefResult MRInfo;$/;"	m	struct:llvm::LibCallFunctionInfo::LocationMRInfo
MSP430_INTR	CallingConv.h	/^    MSP430_INTR = 69,$/;"	e	enum:llvm::CallingConv::ID
MT_Block	Support/YAMLParser.h	/^    MT_Block,$/;"	e	enum:llvm::yaml::MappingNode::MappingType
MT_Flow	Support/YAMLParser.h	/^    MT_Flow,$/;"	e	enum:llvm::yaml::MappingNode::MappingType
MT_Inline	Support/YAMLParser.h	/^    MT_Inline \/\/\/< An inline mapping node is used for "[key: value]".$/;"	e	enum:llvm::yaml::MappingNode::MappingType
MT_Invalid	Support/COFF.h	/^    MT_Invalid = 0xffff,$/;"	e	enum:llvm::COFF::MachineTypes
MUL	CodeGen/ISDOpcodes.h	/^    ADD, SUB, MUL, SDIV, UDIV, SREM, UREM,$/;"	e	enum:llvm::ISD::NodeType
MULHS	CodeGen/ISDOpcodes.h	/^    MULHU, MULHS,$/;"	e	enum:llvm::ISD::NodeType
MULHU	CodeGen/ISDOpcodes.h	/^    MULHU, MULHS,$/;"	e	enum:llvm::ISD::NodeType
MULO_I128	CodeGen/RuntimeLibcalls.h	/^    MULO_I128,$/;"	e	enum:llvm::RTLIB::Libcall
MULO_I32	CodeGen/RuntimeLibcalls.h	/^    MULO_I32,$/;"	e	enum:llvm::RTLIB::Libcall
MULO_I64	CodeGen/RuntimeLibcalls.h	/^    MULO_I64,$/;"	e	enum:llvm::RTLIB::Libcall
MUL_F32	CodeGen/RuntimeLibcalls.h	/^    MUL_F32,$/;"	e	enum:llvm::RTLIB::Libcall
MUL_F64	CodeGen/RuntimeLibcalls.h	/^    MUL_F64,$/;"	e	enum:llvm::RTLIB::Libcall
MUL_F80	CodeGen/RuntimeLibcalls.h	/^    MUL_F80,$/;"	e	enum:llvm::RTLIB::Libcall
MUL_I128	CodeGen/RuntimeLibcalls.h	/^    MUL_I128,$/;"	e	enum:llvm::RTLIB::Libcall
MUL_I16	CodeGen/RuntimeLibcalls.h	/^    MUL_I16,$/;"	e	enum:llvm::RTLIB::Libcall
MUL_I32	CodeGen/RuntimeLibcalls.h	/^    MUL_I32,$/;"	e	enum:llvm::RTLIB::Libcall
MUL_I64	CodeGen/RuntimeLibcalls.h	/^    MUL_I64,$/;"	e	enum:llvm::RTLIB::Libcall
MUL_I8	CodeGen/RuntimeLibcalls.h	/^    MUL_I8,$/;"	e	enum:llvm::RTLIB::Libcall
MUL_PPCF128	CodeGen/RuntimeLibcalls.h	/^    MUL_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
MVT	CodeGen/ValueTypes.h	/^    MVT() : SimpleTy((SimpleValueType)(INVALID_SIMPLE_VALUE_TYPE)) {}$/;"	f	class:llvm::MVT
MVT	CodeGen/ValueTypes.h	/^    MVT(SimpleValueType SVT) : SimpleTy(SVT) { }$/;"	f	class:llvm::MVT
MVT	CodeGen/ValueTypes.h	/^  class MVT {$/;"	c	namespace:llvm
MacOSX	ADT/Triple.h	/^    MacOSX,$/;"	e	enum:llvm::Triple::OSType
MachO	ADT/Triple.h	/^    MachO,$/;"	e	enum:llvm::Triple::EnvironmentType
MachO	Support/MachO.h	/^  namespace MachO {$/;"	n	namespace:llvm
MachOObj	Object/MachO.h	/^  MachOObject *MachOObj;$/;"	m	class:llvm::object::MachOObjectFile
MachOObject	Object/MachOObject.h	/^class MachOObject {$/;"	c	namespace:llvm::object
MachOObjectFile	Object/MachO.h	/^class MachOObjectFile : public ObjectFile {$/;"	c	namespace:llvm::object
MachORelocation	CodeGen/MachORelocation.h	/^    MachORelocation(uint32_t addr, uint32_t index, bool pcrel, uint8_t len,$/;"	f	class:llvm::MachORelocation
MachORelocation	CodeGen/MachORelocation.h	/^  class MachORelocation {$/;"	c	namespace:llvm
MachOUniquingMap	MC/MCContext.h	/^    void *MachOUniquingMap, *ELFUniquingMap, *COFFUniquingMap;$/;"	m	class:llvm::MCContext
MachObjectWriter	MC/MCMachObjectWriter.h	/^  MachObjectWriter(MCMachObjectTargetWriter *MOTW, raw_ostream &_OS,$/;"	f	class:llvm::MachObjectWriter
MachObjectWriter	MC/MCMachObjectWriter.h	/^class MachObjectWriter : public MCObjectWriter {$/;"	c	namespace:llvm
MachSymbolData	MC/MCMachObjectWriter.h	/^  struct MachSymbolData {$/;"	s	class:llvm::MachObjectWriter
Mach_O_Bundle_FileType	Support/PathV1.h	/^    Mach_O_Bundle_FileType,            \/\/\/< Mach-O Bundle file$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_Core_FileType	Support/PathV1.h	/^    Mach_O_Core_FileType,              \/\/\/< Mach-O Core File$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_DSYMCompanion_FileType	Support/PathV1.h	/^    Mach_O_DSYMCompanion_FileType,     \/\/\/< Mach-O dSYM companion file$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_DynamicLinker_FileType	Support/PathV1.h	/^    Mach_O_DynamicLinker_FileType,     \/\/\/< The Mach-O dynamic linker$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_DynamicallyLinkedSharedLibStub_FileType	Support/PathV1.h	/^    Mach_O_DynamicallyLinkedSharedLibStub_FileType, \/\/\/< Mach-O Shared lib stub$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_DynamicallyLinkedSharedLib_FileType	Support/PathV1.h	/^    Mach_O_DynamicallyLinkedSharedLib_FileType, \/\/\/< Mach-O dynlinked shared lib$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_Executable_FileType	Support/PathV1.h	/^    Mach_O_Executable_FileType,        \/\/\/< Mach-O Executable$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_FixedVirtualMemorySharedLib_FileType	Support/PathV1.h	/^    Mach_O_FixedVirtualMemorySharedLib_FileType, \/\/\/< Mach-O Shared Lib, FVM$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_Object_FileType	Support/PathV1.h	/^    Mach_O_Object_FileType,            \/\/\/< Mach-O Object file$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_PreloadExecutable_FileType	Support/PathV1.h	/^    Mach_O_PreloadExecutable_FileType, \/\/\/< Mach-O Preloaded Executable$/;"	e	enum:llvm::sys::LLVMFileType
Machine	MC/MCWinCOFFObjectWriter.h	/^    const unsigned Machine;$/;"	m	class:llvm::MCWinCOFFObjectTargetWriter
Machine	Object/COFF.h	/^  support::ulittle16_t Machine;$/;"	m	struct:llvm::object::coff_file_header
Machine	Support/COFF.h	/^    uint16_t Machine;$/;"	m	struct:llvm::COFF::ImportHeader
Machine	Support/COFF.h	/^    uint16_t Machine;$/;"	m	struct:llvm::COFF::header
MachineBasicBlock	CodeGen/MachineBasicBlock.h	/^  MachineBasicBlock() {}$/;"	f	class:llvm::MachineBasicBlock
MachineBasicBlock	CodeGen/MachineBasicBlock.h	/^class MachineBasicBlock : public ilist_node<MachineBasicBlock> {$/;"	c	namespace:llvm
MachineBlockFrequencyInfo	CodeGen/MachineBlockFrequencyInfo.h	/^class MachineBlockFrequencyInfo : public MachineFunctionPass {$/;"	c	namespace:llvm
MachineBranchProbabilityInfo	CodeGen/MachineBranchProbabilityInfo.h	/^  MachineBranchProbabilityInfo() : ImmutablePass(ID) {$/;"	f	class:llvm::MachineBranchProbabilityInfo
MachineBranchProbabilityInfo	CodeGen/MachineBranchProbabilityInfo.h	/^class MachineBranchProbabilityInfo : public ImmutablePass {$/;"	c	namespace:llvm
MachineCPVal	CodeGen/MachineConstantPool.h	/^    MachineConstantPoolValue *MachineCPVal;$/;"	m	union:llvm::MachineConstantPoolEntry::__anon44
MachineCPVal	CodeGen/SelectionDAGNodes.h	/^    MachineConstantPoolValue *MachineCPVal;$/;"	m	union:llvm::ConstantPoolSDNode::__anon31
MachineCPVsSharingEntries	CodeGen/MachineConstantPool.h	/^  DenseSet<MachineConstantPoolValue*> MachineCPVsSharingEntries;$/;"	m	class:llvm::MachineConstantPool
MachineCodeEmitter	CodeGen/MachineCodeEmitter.h	/^class MachineCodeEmitter {$/;"	c	namespace:llvm
MachineCodeInfo	CodeGen/MachineCodeInfo.h	/^  MachineCodeInfo() : Size(0), Address(0) {}$/;"	f	class:llvm::MachineCodeInfo
MachineCodeInfo	CodeGen/MachineCodeInfo.h	/^class MachineCodeInfo {$/;"	c	namespace:llvm
MachineConstantPool	CodeGen/MachineConstantPool.h	/^  explicit MachineConstantPool(const DataLayout *td)$/;"	f	class:llvm::MachineConstantPool
MachineConstantPool	CodeGen/MachineConstantPool.h	/^class MachineConstantPool {$/;"	c	namespace:llvm
MachineConstantPoolEntry	CodeGen/MachineConstantPool.h	/^  MachineConstantPoolEntry(MachineConstantPoolValue *V, unsigned A)$/;"	f	class:llvm::MachineConstantPoolEntry
MachineConstantPoolEntry	CodeGen/MachineConstantPool.h	/^  MachineConstantPoolEntry(const Constant *V, unsigned A)$/;"	f	class:llvm::MachineConstantPoolEntry
MachineConstantPoolEntry	CodeGen/MachineConstantPool.h	/^class MachineConstantPoolEntry {$/;"	c	namespace:llvm
MachineConstantPoolValue	CodeGen/MachineConstantPool.h	/^  explicit MachineConstantPoolValue(Type *ty) : Ty(ty) {}$/;"	f	class:llvm::MachineConstantPoolValue
MachineConstantPoolValue	CodeGen/MachineConstantPool.h	/^class MachineConstantPoolValue {$/;"	c	namespace:llvm
MachineDomTreeNode	CodeGen/MachineDominators.h	/^typedef DomTreeNodeBase<MachineBasicBlock> MachineDomTreeNode;$/;"	t	namespace:llvm
MachineDominatorTree	CodeGen/MachineDominators.h	/^class MachineDominatorTree : public MachineFunctionPass {$/;"	c	namespace:llvm
MachineFrameInfo	CodeGen/MachineFrameInfo.h	/^    explicit MachineFrameInfo(const TargetFrameLowering &tfi) : TFI(tfi) {$/;"	f	class:llvm::MachineFrameInfo
MachineFrameInfo	CodeGen/MachineFrameInfo.h	/^class MachineFrameInfo {$/;"	c	namespace:llvm
MachineFunction	CodeGen/MachineFunction.h	/^class MachineFunction {$/;"	c	namespace:llvm
MachineFunctionAnalysis	CodeGen/MachineFunctionAnalysis.h	/^struct MachineFunctionAnalysis : public FunctionPass {$/;"	s	namespace:llvm
MachineFunctionInfo	CodeGen/MachineFunction.h	/^struct MachineFunctionInfo {$/;"	s	namespace:llvm
MachineFunctionPass	CodeGen/MachineFunctionPass.h	/^  explicit MachineFunctionPass(char &ID) : FunctionPass(ID) {}$/;"	f	class:llvm::MachineFunctionPass
MachineFunctionPass	CodeGen/MachineFunctionPass.h	/^class MachineFunctionPass : public FunctionPass {$/;"	c	namespace:llvm
MachineInstr	CodeGen/MachineInstr.h	/^class MachineInstr : public ilist_node<MachineInstr> {$/;"	c	namespace:llvm
MachineInstrBuilder	CodeGen/MachineInstrBuilder.h	/^  MachineInstrBuilder() : MI(0) {}$/;"	f	class:llvm::MachineInstrBuilder
MachineInstrBuilder	CodeGen/MachineInstrBuilder.h	/^  explicit MachineInstrBuilder(MachineInstr *mi) : MI(mi) {}$/;"	f	class:llvm::MachineInstrBuilder
MachineInstrBuilder	CodeGen/MachineInstrBuilder.h	/^class MachineInstrBuilder {$/;"	c	namespace:llvm
MachineInstrExpressionTrait	CodeGen/MachineInstr.h	/^struct MachineInstrExpressionTrait : DenseMapInfo<MachineInstr*> {$/;"	s	namespace:llvm
MachineJumpTableEntry	CodeGen/MachineJumpTableInfo.h	/^  explicit MachineJumpTableEntry(const std::vector<MachineBasicBlock*> &M)$/;"	f	struct:llvm::MachineJumpTableEntry
MachineJumpTableEntry	CodeGen/MachineJumpTableInfo.h	/^struct MachineJumpTableEntry {$/;"	s	namespace:llvm
MachineJumpTableInfo	CodeGen/MachineJumpTableInfo.h	/^  explicit MachineJumpTableInfo(JTEntryKind Kind): EntryKind(Kind) {}$/;"	f	class:llvm::MachineJumpTableInfo
MachineJumpTableInfo	CodeGen/MachineJumpTableInfo.h	/^class MachineJumpTableInfo {$/;"	c	namespace:llvm
MachineLocation	MC/MachineLocation.h	/^  MachineLocation()$/;"	f	class:llvm::MachineLocation
MachineLocation	MC/MachineLocation.h	/^  MachineLocation(unsigned R, int O)$/;"	f	class:llvm::MachineLocation
MachineLocation	MC/MachineLocation.h	/^  explicit MachineLocation(unsigned R)$/;"	f	class:llvm::MachineLocation
MachineLocation	MC/MachineLocation.h	/^class MachineLocation {$/;"	c	namespace:llvm
MachineLoop	CodeGen/MachineLoopInfo.h	/^  explicit MachineLoop(MachineBasicBlock *MBB)$/;"	f	class:llvm::MachineLoop
MachineLoop	CodeGen/MachineLoopInfo.h	/^class MachineLoop : public LoopBase<MachineBasicBlock, MachineLoop> {$/;"	c	namespace:llvm
MachineLoopInfo	CodeGen/MachineLoopInfo.h	/^  MachineLoopInfo() : MachineFunctionPass(ID) {$/;"	f	class:llvm::MachineLoopInfo
MachineLoopInfo	CodeGen/MachineLoopInfo.h	/^class MachineLoopInfo : public MachineFunctionPass {$/;"	c	namespace:llvm
MachineLoopRange	CodeGen/MachineLoopRanges.h	/^class MachineLoopRange {$/;"	c	namespace:llvm
MachineLoopRanges	CodeGen/MachineLoopRanges.h	/^  MachineLoopRanges() : MachineFunctionPass(ID), Indexes(0) {}$/;"	f	class:llvm::MachineLoopRanges
MachineLoopRanges	CodeGen/MachineLoopRanges.h	/^class MachineLoopRanges : public MachineFunctionPass {$/;"	c	namespace:llvm
MachineMemOperand	CodeGen/MachineMemOperand.h	/^class MachineMemOperand {$/;"	c	namespace:llvm
MachineModuleInfo	CodeGen/MachineModuleInfo.h	/^class MachineModuleInfo : public ImmutablePass {$/;"	c	namespace:llvm
MachineModuleInfoELF	CodeGen/MachineModuleInfoImpls.h	/^    MachineModuleInfoELF(const MachineModuleInfo &) {}$/;"	f	class:llvm::MachineModuleInfoELF
MachineModuleInfoELF	CodeGen/MachineModuleInfoImpls.h	/^  class MachineModuleInfoELF : public MachineModuleInfoImpl {$/;"	c	namespace:llvm
MachineModuleInfoImpl	CodeGen/MachineModuleInfo.h	/^class MachineModuleInfoImpl {$/;"	c	namespace:llvm
MachineModuleInfoMachO	CodeGen/MachineModuleInfoImpls.h	/^    MachineModuleInfoMachO(const MachineModuleInfo &) {}$/;"	f	class:llvm::MachineModuleInfoMachO
MachineModuleInfoMachO	CodeGen/MachineModuleInfoImpls.h	/^  class MachineModuleInfoMachO : public MachineModuleInfoImpl {$/;"	c	namespace:llvm
MachineMove	MC/MachineLocation.h	/^  MachineMove() : Label(0) {}$/;"	f	class:llvm::MachineMove
MachineMove	MC/MachineLocation.h	/^  MachineMove(MCSymbol *label, const MachineLocation &D,$/;"	f	class:llvm::MachineMove
MachineMove	MC/MachineLocation.h	/^class MachineMove {$/;"	c	namespace:llvm
MachineOperand	CodeGen/MachineOperand.h	/^  explicit MachineOperand(MachineOperandType K) : OpKind(K), ParentMI(0) {$/;"	f	class:llvm::MachineOperand
MachineOperand	CodeGen/MachineOperand.h	/^class MachineOperand {$/;"	c	namespace:llvm
MachineOperandIteratorBase	CodeGen/MachineInstrBundle.h	/^  explicit MachineOperandIteratorBase(MachineInstr *MI, bool WholeBundle) {$/;"	f	class:llvm::MachineOperandIteratorBase
MachineOperandIteratorBase	CodeGen/MachineInstrBundle.h	/^class MachineOperandIteratorBase {$/;"	c	namespace:llvm
MachineOperandType	CodeGen/MachineOperand.h	/^  enum MachineOperandType {$/;"	g	class:llvm::MachineOperand
MachineOperandType	MC/MCInst.h	/^  enum MachineOperandType {$/;"	g	class:llvm::MCOperand
MachinePassCtor	CodeGen/MachinePassRegistry.h	/^typedef void *(*MachinePassCtor)();$/;"	t	namespace:llvm
MachinePassRegistry	CodeGen/MachinePassRegistry.h	/^class MachinePassRegistry {$/;"	c	namespace:llvm
MachinePassRegistryListener	CodeGen/MachinePassRegistry.h	/^  MachinePassRegistryListener() {}$/;"	f	class:llvm::MachinePassRegistryListener
MachinePassRegistryListener	CodeGen/MachinePassRegistry.h	/^class MachinePassRegistryListener {$/;"	c	namespace:llvm
MachinePassRegistryNode	CodeGen/MachinePassRegistry.h	/^  MachinePassRegistryNode(const char *N, const char *D, MachinePassCtor C)$/;"	f	class:llvm::MachinePassRegistryNode
MachinePassRegistryNode	CodeGen/MachinePassRegistry.h	/^class MachinePassRegistryNode {$/;"	c	namespace:llvm
MachinePointerInfo	CodeGen/MachineMemOperand.h	/^  explicit MachinePointerInfo(const Value *v = 0, int64_t offset = 0)$/;"	f	struct:llvm::MachinePointerInfo
MachinePointerInfo	CodeGen/MachineMemOperand.h	/^struct MachinePointerInfo {$/;"	s	namespace:llvm
MachinePostDominatorTree	CodeGen/MachinePostDominators.h	/^struct MachinePostDominatorTree : public MachineFunctionPass {$/;"	s	namespace:llvm
MachineProfile	Analysis/ProfileInfo.h	/^    ProfileInfoT<MachineFunction, MachineBasicBlock> *MachineProfile;$/;"	m	class:llvm::ProfileInfoT
MachineProfileInfo	Analysis/ProfileInfo.h	/^  typedef ProfileInfoT<MachineFunction, MachineBasicBlock> MachineProfileInfo;$/;"	t	namespace:llvm
MachineRegisterInfo	CodeGen/MachineRegisterInfo.h	/^class MachineRegisterInfo {$/;"	c	namespace:llvm
MachineRelocation	CodeGen/MachineRelocation.h	/^class MachineRelocation {$/;"	c	namespace:llvm
MachineSDNode	CodeGen/SelectionDAGNodes.h	/^  MachineSDNode(unsigned Opc, const DebugLoc DL, SDVTList VTs)$/;"	f	class:llvm::MachineSDNode
MachineSDNode	CodeGen/SelectionDAGNodes.h	/^class MachineSDNode : public SDNode {$/;"	c	namespace:llvm
MachineSSAUpdater	CodeGen/MachineSSAUpdater.h	/^class MachineSSAUpdater {$/;"	c	namespace:llvm
MachineSchedContext	CodeGen/MachineScheduler.h	/^struct MachineSchedContext {$/;"	s	namespace:llvm
MachineSchedRegistry	CodeGen/MachineScheduler.h	/^  MachineSchedRegistry(const char *N, const char *D, ScheduleDAGCtor C)$/;"	f	class:llvm::MachineSchedRegistry
MachineSchedRegistry	CodeGen/MachineScheduler.h	/^class MachineSchedRegistry : public MachinePassRegistryNode {$/;"	c	namespace:llvm
MachineSchedStrategy	CodeGen/MachineScheduler.h	/^class MachineSchedStrategy {$/;"	c	namespace:llvm
MachineType	Target/TargetELFWriterInfo.h	/^    enum MachineType {$/;"	g	class:llvm::TargetELFWriterInfo
MachineTypes	Support/COFF.h	/^  enum MachineTypes {$/;"	g	namespace:llvm::COFF
Magic	Object/MachOFormat.h	/^    uint32_t Magic;$/;"	m	struct:llvm::object::macho::Header
Magic	Support/COFF.h	/^    uint16_t Magic;$/;"	m	struct:llvm::COFF::DOSHeader
Magic	Support/COFF.h	/^    uint16_t Magic;$/;"	m	struct:llvm::COFF::PEHeader
MajorImageVersion	Support/COFF.h	/^    uint16_t MajorImageVersion;$/;"	m	struct:llvm::COFF::PEHeader
MajorLinkerVersion	Support/COFF.h	/^    uint8_t  MajorLinkerVersion;$/;"	m	struct:llvm::COFF::PEHeader
MajorOperatingSystemVersion	Support/COFF.h	/^    uint16_t MajorOperatingSystemVersion;$/;"	m	struct:llvm::COFF::PEHeader
MajorSubsystemVersion	Support/COFF.h	/^    uint16_t MajorSubsystemVersion;$/;"	m	struct:llvm::COFF::PEHeader
MajorVersionFunc	ExecutionEngine/OProfileWrapper.h	/^  op_major_version_ptr_t          MajorVersionFunc;$/;"	m	class:llvm::OProfileWrapper
MallocAllocator	Support/Allocator.h	/^  MallocAllocator() {}$/;"	f	class:llvm::MallocAllocator
MallocAllocator	Support/Allocator.h	/^class MallocAllocator {$/;"	c	namespace:llvm
MallocSlabAllocator	Support/Allocator.h	/^  MallocSlabAllocator() : Allocator() { }$/;"	f	class:llvm::MallocSlabAllocator
MallocSlabAllocator	Support/Allocator.h	/^class MallocSlabAllocator : public SlabAllocator {$/;"	c	namespace:llvm
ManagedStatic	Support/ManagedStatic.h	/^class ManagedStatic : public ManagedStaticBase {$/;"	c	namespace:llvm
ManagedStaticBase	Support/ManagedStatic.h	/^class ManagedStaticBase {$/;"	c	namespace:llvm
Mang	CodeGen/AsmPrinter.h	/^    Mangler *Mang;$/;"	m	class:llvm::AsmPrinter
Mangler	Target/Mangler.h	/^  Mangler(MCContext &context, const DataLayout &td)$/;"	f	class:llvm::Mangler
Mangler	Target/Mangler.h	/^class Mangler {$/;"	c	namespace:llvm
ManglerPrefixTy	Target/Mangler.h	/^  enum ManglerPrefixTy {$/;"	g	class:llvm::Mangler
Map	ADT/MapVector.h	/^  MapType Map;$/;"	m	class:llvm::MapVector
Map	ADT/UniqueVector.h	/^  std::map<T, unsigned> Map;$/;"	m	class:llvm::UniqueVector
Map	ADT/ValueMap.h	/^  MapT Map;$/;"	m	class:llvm::ValueMap
Map	ADT/ValueMap.h	/^  ValueMapT *Map;$/;"	m	class:llvm::ValueMapCallbackVH
Map	CodeGen/MachineLoopRanges.h	/^  typedef IntervalMap<SlotIndex, unsigned, 4> Map;$/;"	t	class:llvm::MachineLoopRange
MapAllocator	CodeGen/MachineLoopRanges.h	/^  typedef MachineLoopRange::Allocator MapAllocator;$/;"	t	class:llvm::MachineLoopRanges
MapEntryTy	ADT/StringMap.h	/^  typedef StringMapEntry<ValueTy> MapEntryTy;$/;"	t	class:llvm::StringMap
MapT	ADT/ValueMap.h	/^  typedef DenseMap<ValueMapCVH, ValueT, DenseMapInfo<ValueMapCVH> > MapT;$/;"	t	class:llvm::ValueMap
MapTy	ADT/DenseSet.h	/^  typedef DenseMap<ValueT, char, ValueInfoT> MapTy;$/;"	t	class:llvm::DenseSet
MapValue	Transforms/Utils/ValueMapper.h	/^  inline Constant *MapValue(const Constant *V, ValueToValueMapTy &VM,$/;"	f	namespace:llvm
MapValue	Transforms/Utils/ValueMapper.h	/^  inline MDNode *MapValue(const MDNode *V, ValueToValueMapTy &VM,$/;"	f	namespace:llvm
MapVector	ADT/MapVector.h	/^class MapVector {$/;"	c	namespace:llvm
Mapping	Support/FileSystem.h	/^  void *Mapping;$/;"	m	class:llvm::sys::fs::mapped_file_region
MappingNode	Support/YAMLParser.h	/^  MappingNode(OwningPtr<Document> &D, StringRef Anchor, MappingType MT)$/;"	f	class:llvm::yaml::MappingNode
MappingNode	Support/YAMLParser.h	/^class MappingNode : public Node {$/;"	c	namespace:llvm::yaml
MappingTy	Support/IntegersSubsetMapping.h	/^      IntegersSubsetMapping<SuccessorClass, IntegersSubsetTy, IntTy> MappingTy;$/;"	t	class:llvm::IntegersSubsetMapping::DiffStateMachine
MappingType	Support/YAMLParser.h	/^  enum MappingType {$/;"	g	class:llvm::yaml::MappingNode
Mask	CodeGen/SelectionDAGNodes.h	/^  const int *Mask;$/;"	m	class:llvm::ShuffleVectorSDNode
Mask	Target/TargetRegisterInfo.h	/^  const uint32_t *Mask;$/;"	m	class:llvm::SuperRegClassIterator
Match	Transforms/Utils/AddrModeMatcher.h	/^  static ExtAddrMode Match(Value *V, Type *AccessTy,$/;"	f	class:llvm::AddressingModeMatcher
MatchResultTy	MC/MCTargetAsmParser.h	/^  enum MatchResultTy {$/;"	g	class:llvm::MCTargetAsmParser
Match_InvalidOperand	MC/MCTargetAsmParser.h	/^    Match_InvalidOperand,$/;"	e	enum:llvm::MCTargetAsmParser::MatchResultTy
Match_MissingFeature	MC/MCTargetAsmParser.h	/^    Match_MissingFeature,$/;"	e	enum:llvm::MCTargetAsmParser::MatchResultTy
Match_MnemonicFail	MC/MCTargetAsmParser.h	/^    Match_MnemonicFail,$/;"	e	enum:llvm::MCTargetAsmParser::MatchResultTy
Match_Success	MC/MCTargetAsmParser.h	/^    Match_Success,$/;"	e	enum:llvm::MCTargetAsmParser::MatchResultTy
Matches	TableGen/StringMatcher.h	/^  const std::vector<StringPair> &Matches;$/;"	m	class:llvm::StringMatcher
MatchingInput	InlineAsm.h	/^    signed char MatchingInput;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
MatchingInput	InlineAsm.h	/^    signed char MatchingInput;$/;"	m	struct:llvm::InlineAsm::SubConstraintInfo
Materializer	Module.h	/^  OwningPtr<GVMaterializer> Materializer;  \/\/\/< Used to materialize GlobalValues$/;"	m	class:llvm::Module
Matrix	CodeGen/PBQP/Math.h	/^    Matrix(const Matrix &m) :$/;"	f	class:PBQP::Matrix
Matrix	CodeGen/PBQP/Math.h	/^    Matrix(unsigned rows, unsigned cols) :$/;"	f	class:PBQP::Matrix
Matrix	CodeGen/PBQP/Math.h	/^    Matrix(unsigned rows, unsigned cols, PBQPNum initVal) :$/;"	f	class:PBQP::Matrix
Matrix	CodeGen/PBQP/Math.h	/^class Matrix {$/;"	c	namespace:PBQP
Max	Analysis/ScalarEvolution.h	/^      const SCEV *Max;$/;"	m	class:llvm::ScalarEvolution::BackedgeTakenInfo
Max	Analysis/ScalarEvolution.h	/^      const SCEV *Max;$/;"	m	struct:llvm::ScalarEvolution::ExitLimit
Max	Instructions.h	/^    Max,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
MaxAlignment	CodeGen/MachineFrameInfo.h	/^  unsigned MaxAlignment;$/;"	m	class:llvm::MachineFrameInfo
MaxBytesToEmit	MC/MCAssembler.h	/^  unsigned MaxBytesToEmit;$/;"	m	class:llvm::MCAlignFragment
MaxCallFrameSize	CodeGen/MachineFrameInfo.h	/^  unsigned MaxCallFrameSize;$/;"	m	class:llvm::MachineFrameInfo
MaxCandPairsForCycleCheck	Transforms/Vectorize.h	/^  unsigned MaxCandPairsForCycleCheck;$/;"	m	struct:llvm::VectorizeConfig
MaxCount	Analysis/ProfileDataLoader.h	/^  static const unsigned MaxCount;$/;"	m	class:llvm::ProfileDataLoader
MaxInstLength	MC/MCAsmInfo.h	/^    unsigned MaxInstLength;                  \/\/ Defaults to 4.$/;"	m	class:llvm::MCAsmInfo
MaxInsts	Transforms/Vectorize.h	/^  unsigned MaxInsts;$/;"	m	struct:llvm::VectorizeConfig
MaxIter	Transforms/Vectorize.h	/^  unsigned MaxIter;$/;"	m	struct:llvm::VectorizeConfig
MaxLevels	Analysis/DependenceAnalysis.h	/^    unsigned CommonLevels, SrcLevels, MaxLevels;$/;"	m	class:llvm::DependenceAnalysis
MaxLookAhead	CodeGen/ScheduleHazardRecognizer.h	/^  unsigned MaxLookAhead;$/;"	m	class:llvm::ScheduleHazardRecognizer
MaxMin_match	Support/PatternMatch.h	/^  MaxMin_match(const LHS_t &LHS, const RHS_t &RHS)$/;"	f	struct:llvm::PatternMatch::MaxMin_match
MaxMin_match	Support/PatternMatch.h	/^struct MaxMin_match {$/;"	s	namespace:llvm::PatternMatch
MaxOptimizationLevel	DefaultPasses.h	/^  static unsigned MaxOptimizationLevel(unsigned flags) {$/;"	f	class:llvm::StandardPass
MaxOptimizationLevelMask	DefaultPasses.h	/^    MaxOptimizationLevelMask=0xf0,$/;"	e	enum:llvm::StandardPass::OptimizationFlagComponents
MaxOptimizationLevelShift	DefaultPasses.h	/^    MaxOptimizationLevelShift=4,$/;"	e	enum:llvm::StandardPass::OptimizationFlagComponents
MaxSetPressure	CodeGen/RegisterPressure.h	/^  std::vector<unsigned> MaxSetPressure;$/;"	m	struct:llvm::RegisterPressure
MaxTargetFixupKind	MC/MCFixup.h	/^  MaxTargetFixupKind = (1 << 8)$/;"	e	enum:llvm::MCFixupKind
MaxTime	Support/TimeValue.h	/^    static const TimeValue MaxTime;$/;"	m	class:llvm::sys::TimeValue
MaxVMProtection	Object/MachOFormat.h	/^    uint32_t MaxVMProtection;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
MaxVMProtection	Object/MachOFormat.h	/^    uint32_t MaxVMProtection;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
MaximumAlignment	Value.h	/^  static const unsigned MaximumAlignment = 1u << 29;$/;"	m	class:llvm::Value
MaximumExtraParagraphs	Support/COFF.h	/^    uint16_t MaximumExtraParagraphs;$/;"	m	struct:llvm::COFF::DOSHeader
MayAlias	Analysis/AliasAnalysis.h	/^    MayAlias,           \/\/\/< Anything goes.$/;"	e	enum:llvm::AliasAnalysis::AliasResult
MayAlias	Analysis/AliasSetTracker.h	/^    MustAlias = 0, MayAlias = 1$/;"	e	enum:llvm::AliasSet::AliasType
MayLoad	MC/MCInstrDesc.h	/^    MayLoad,$/;"	e	enum:llvm::MCID::__anon69
MayNeedSP	CodeGen/MachineFrameInfo.h	/^    bool MayNeedSP;$/;"	m	struct:llvm::MachineFrameInfo::StackObject
MayNeedStackProtector	CodeGen/MachineFrameInfo.h	/^  bool MayNeedStackProtector(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
MayStore	MC/MCInstrDesc.h	/^    MayStore,$/;"	e	enum:llvm::MCID::__anon69
Medium	Support/CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
MemCpyInst	IntrinsicInst.h	/^  class MemCpyInst : public MemTransferInst {$/;"	c	namespace:llvm
MemDepResult	Analysis/MemoryDependenceAnalysis.h	/^    MemDepResult() : Value(0, Invalid) {}$/;"	f	class:llvm::MemDepResult
MemDepResult	Analysis/MemoryDependenceAnalysis.h	/^    explicit MemDepResult(PairTy V) : Value(V) {}$/;"	f	class:llvm::MemDepResult
MemDepResult	Analysis/MemoryDependenceAnalysis.h	/^  class MemDepResult {$/;"	c	namespace:llvm
MemIndexedMode	CodeGen/ISDOpcodes.h	/^  enum MemIndexedMode {$/;"	g	namespace:llvm::ISD
MemIntrinsic	IntrinsicInst.h	/^  class MemIntrinsic : public IntrinsicInst {$/;"	c	namespace:llvm
MemIntrinsicSDNode	CodeGen/SelectionDAGNodes.h	/^  MemIntrinsicSDNode(unsigned Opc, DebugLoc dl, SDVTList VTs,$/;"	f	class:llvm::MemIntrinsicSDNode
MemIntrinsicSDNode	CodeGen/SelectionDAGNodes.h	/^class MemIntrinsicSDNode : public MemSDNode {$/;"	c	namespace:llvm
MemMoveInst	IntrinsicInst.h	/^  class MemMoveInst : public MemTransferInst {$/;"	c	namespace:llvm
MemOperandFlags	CodeGen/MachineMemOperand.h	/^  enum MemOperandFlags {$/;"	g	class:llvm::MachineMemOperand
MemRefs	CodeGen/MachineInstr.h	/^  mmo_iterator MemRefs;$/;"	m	class:llvm::MachineInstr
MemRefs	CodeGen/SelectionDAGNodes.h	/^  mmo_iterator MemRefs;$/;"	m	class:llvm::MachineSDNode
MemRefsEnd	CodeGen/SelectionDAGNodes.h	/^  mmo_iterator MemRefsEnd;$/;"	m	class:llvm::MachineSDNode
MemSDNode	CodeGen/SelectionDAGNodes.h	/^class MemSDNode : public SDNode {$/;"	c	namespace:llvm
MemSetInst	IntrinsicInst.h	/^  class MemSetInst : public MemIntrinsic {$/;"	c	namespace:llvm
MemSlab	Support/Allocator.h	/^class MemSlab {$/;"	c	namespace:llvm
MemTransferInst	IntrinsicInst.h	/^  class MemTransferInst : public MemIntrinsic {$/;"	c	namespace:llvm
MemUsed	Support/Timer.h	/^  ssize_t MemUsed;       \/\/ Memory allocated (in bytes)$/;"	m	class:llvm::TimeRecord
MemberOffsets	DataLayout.h	/^  uint64_t MemberOffsets[1];  \/\/ variable sized array!$/;"	m	class:llvm::StructLayout
MembersList	Bitcode/Archive.h	/^    typedef iplist<ArchiveMember> MembersList;$/;"	t	class:llvm::Archive
Memory	Support/Memory.h	/^  class Memory {$/;"	c	namespace:llvm::sys
Memory	Support/PredIteratorCache.h	/^    BumpPtrAllocator Memory;$/;"	m	class:llvm::PredIteratorCache
MemoryBlock	Support/Memory.h	/^    MemoryBlock() : Address(0), Size(0) { }$/;"	f	class:llvm::sys::MemoryBlock
MemoryBlock	Support/Memory.h	/^    MemoryBlock(void *addr, size_t size) : Address(addr), Size(size) { }$/;"	f	class:llvm::sys::MemoryBlock
MemoryBlock	Support/Memory.h	/^  class MemoryBlock {$/;"	c	namespace:llvm::sys
MemoryBuffer	Support/MemoryBuffer.h	/^  MemoryBuffer() {}$/;"	f	class:llvm::MemoryBuffer
MemoryBuffer	Support/MemoryBuffer.h	/^class MemoryBuffer {$/;"	c	namespace:llvm
MemoryBuffer_MMap	Support/MemoryBuffer.h	/^    MemoryBuffer_MMap$/;"	e	enum:llvm::MemoryBuffer::BufferKind
MemoryBuffer_Malloc	Support/MemoryBuffer.h	/^    MemoryBuffer_Malloc,$/;"	e	enum:llvm::MemoryBuffer::BufferKind
MemoryDependenceAnalysis	Analysis/MemoryDependenceAnalysis.h	/^  class MemoryDependenceAnalysis : public FunctionPass {$/;"	c	namespace:llvm
MemoryInst	Transforms/Utils/AddrModeMatcher.h	/^  Instruction *MemoryInst;$/;"	m	class:llvm::AddressingModeMatcher
MemoryObject	Support/MemoryObject.h	/^class MemoryObject {$/;"	c	namespace:llvm
MemoryOps	Instruction.h	/^  enum MemoryOps {$/;"	g	class:llvm::Instruction
MemoryVT	CodeGen/SelectionDAGNodes.h	/^  EVT MemoryVT;$/;"	m	class:llvm::MemSDNode
MergeValues	Analysis/SparsePropagation.h	/^  virtual LatticeVal MergeValues(LatticeVal X, LatticeVal Y) {$/;"	f	class:llvm::AbstractLatticeFunction
Mergeable1ByteCString	MC/SectionKind.h	/^           Mergeable1ByteCString,$/;"	e	enum:llvm::SectionKind::Kind
Mergeable2ByteCString	MC/SectionKind.h	/^           Mergeable2ByteCString,$/;"	e	enum:llvm::SectionKind::Kind
Mergeable4ByteCString	MC/SectionKind.h	/^           Mergeable4ByteCString,$/;"	e	enum:llvm::SectionKind::Kind
MergeableConst	MC/SectionKind.h	/^        MergeableConst,$/;"	e	enum:llvm::SectionKind::Kind
MergeableConst16	MC/SectionKind.h	/^            MergeableConst16,$/;"	e	enum:llvm::SectionKind::Kind
MergeableConst16Section	MC/MCObjectFileInfo.h	/^  const MCSection *MergeableConst16Section;$/;"	m	class:llvm::MCObjectFileInfo
MergeableConst4	MC/SectionKind.h	/^            MergeableConst4,$/;"	e	enum:llvm::SectionKind::Kind
MergeableConst4Section	MC/MCObjectFileInfo.h	/^  const MCSection *MergeableConst4Section;$/;"	m	class:llvm::MCObjectFileInfo
MergeableConst8	MC/SectionKind.h	/^            MergeableConst8,$/;"	e	enum:llvm::SectionKind::Kind
MergeableConst8Section	MC/MCObjectFileInfo.h	/^  const MCSection *MergeableConst8Section;$/;"	m	class:llvm::MCObjectFileInfo
Message	Support/SourceMgr.h	/^  std::string Message, LineContents;$/;"	m	class:llvm::SMDiagnostic
Message	TableGen/Error.h	/^  std::string Message;$/;"	m	class:llvm::TGError
Metadata	CodeGen/GCMetadata.h	/^    const Constant *Metadata; \/\/\/< Metadata straight from the call$/;"	m	struct:llvm::GCRoot
Metadata	CodeGen/ValueTypes.h	/^      Metadata       = 250,$/;"	e	enum:llvm::MVT::SimpleValueType
Metadata	Intrinsics.h	/^      Void, MMX, Metadata, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
Metadata	MC/SectionKind.h	/^    Metadata,$/;"	e	enum:llvm::SectionKind::Kind
MetadataCodes	Bitcode/LLVMBitCodes.h	/^  enum MetadataCodes {$/;"	g	namespace:llvm::bitc
MetadataTyID	Type.h	/^    MetadataTyID,    \/\/\/<  8: Metadata$/;"	e	enum:llvm::Type::TypeID
Mi2IndexMap	CodeGen/SlotIndexes.h	/^    typedef DenseMap<const MachineInstr*, SlotIndex> Mi2IndexMap;$/;"	t	class:llvm::SlotIndexes
Min	Instructions.h	/^    Min,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
MinAlign	Support/MathExtras.h	/^inline uint64_t MinAlign(uint64_t A, uint64_t B) {$/;"	f	namespace:llvm
MinFunctionAlignment	Target/TargetLowering.h	/^  unsigned MinFunctionAlignment;$/;"	m	class:llvm::TargetLowering
MinGW32	ADT/Triple.h	/^    MinGW32,    \/\/ i*86-pc-mingw32, *-w64-mingw32$/;"	e	enum:llvm::Triple::OSType
MinLatency	CodeGen/ScheduleDAG.h	/^    unsigned MinLatency;$/;"	m	class:llvm::SDep
MinLatency	MC/MCSchedule.h	/^  int MinLatency;$/;"	m	class:llvm::MCSchedModel
MinLeafSize	ADT/IntervalMap.h	/^    MinLeafSize = 3,$/;"	e	enum:llvm::IntervalMapImpl::NodeSizer::__anon20
MinStackArgumentAlignment	Target/TargetLowering.h	/^  unsigned MinStackArgumentAlignment;$/;"	m	class:llvm::TargetLowering
MinTime	Support/TimeValue.h	/^    static const TimeValue MinTime;$/;"	m	class:llvm::sys::TimeValue
MinVisitNumStack	ADT/SCCIterator.h	/^  std::vector<unsigned> MinVisitNumStack;$/;"	m	class:llvm::scc_iterator
MinimumExtraParagraphs	Support/COFF.h	/^    uint16_t MinimumExtraParagraphs;$/;"	m	struct:llvm::COFF::DOSHeader
MinimumJumpTableEntries	Target/TargetLowering.h	/^  int MinimumJumpTableEntries;$/;"	m	class:llvm::TargetLowering
Minix	ADT/Triple.h	/^    Minix,$/;"	e	enum:llvm::Triple::OSType
MinorImageVersion	Support/COFF.h	/^    uint16_t MinorImageVersion;$/;"	m	struct:llvm::COFF::PEHeader
MinorLinkerVersion	Support/COFF.h	/^    uint8_t  MinorLinkerVersion;$/;"	m	struct:llvm::COFF::PEHeader
MinorOperatingSystemVersion	Support/COFF.h	/^    uint16_t MinorOperatingSystemVersion;$/;"	m	struct:llvm::COFF::PEHeader
MinorSubsystemVersion	Support/COFF.h	/^    uint16_t MinorSubsystemVersion;$/;"	m	struct:llvm::COFF::PEHeader
MinorVersionFunc	ExecutionEngine/OProfileWrapper.h	/^  op_major_version_ptr_t          MinorVersionFunc;$/;"	m	class:llvm::OProfileWrapper
Minus	MC/MCExpr.h	/^    Minus, \/\/\/< Unary minus.$/;"	e	enum:llvm::MCUnaryExpr::Opcode
Minus	MC/MCParser/MCAsmLexer.h	/^    Plus, Minus, Tilde,$/;"	e	enum:llvm::AsmToken::TokenKind
MiscFlags	Support/CommandLine.h	/^enum MiscFlags {               \/\/ Miscellaneous flags to adjust argument$/;"	g	namespace:llvm::cl
MispredictPenalty	MC/MCSchedule.h	/^  unsigned MispredictPenalty;$/;"	m	class:llvm::MCSchedModel
MissingValue	Analysis/ProfileInfo.h	/^    static const double MissingValue;$/;"	m	class:llvm::ProfileInfoT
Mod	Analysis/AliasAnalysis.h	/^  enum ModRefResult { NoModRef = 0, Ref = 1, Mod = 2, ModRef = 3 };$/;"	e	enum:llvm::AliasAnalysis::ModRefResult
Mod	Analysis/CallGraph.h	/^  Module *Mod;              \/\/ The module this call graph represents$/;"	m	class:llvm::CallGraph
Mod	MC/MCExpr.h	/^    Mod,  \/\/\/< Signed remainder.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
ModFlagBehavior	Module.h	/^  enum ModFlagBehavior { Error = 1, Warning  = 2, Require = 3, Override = 4 };$/;"	g	class:llvm::Module
ModRef	Analysis/AliasAnalysis.h	/^  enum ModRefResult { NoModRef = 0, Ref = 1, Mod = 2, ModRef = 3 };$/;"	e	enum:llvm::AliasAnalysis::ModRefResult
ModRef	Analysis/AliasSetTracker.h	/^    Mods     = 2, ModRef = 3        \/\/ Mod = bit 2$/;"	e	enum:llvm::AliasSet::AccessType
ModRefBehavior	Analysis/AliasAnalysis.h	/^  enum ModRefBehavior {$/;"	g	class:llvm::AliasAnalysis
ModRefResult	Analysis/AliasAnalysis.h	/^  enum ModRefResult { NoModRef = 0, Ref = 1, Mod = 2, ModRef = 3 };$/;"	g	class:llvm::AliasAnalysis
Mode	Support/FileSystem.h	/^  mapmode Mode;$/;"	m	class:llvm::sys::fs::mapped_file_region
Model	Support/CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	g	namespace:llvm::CodeModel
Model	Support/CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	g	namespace:llvm::Reloc
Model	Support/CodeGen.h	/^    enum Model {$/;"	g	namespace:llvm::TLSModel
Mods	Analysis/AliasSetTracker.h	/^    Mods     = 2, ModRef = 3        \/\/ Mod = bit 2$/;"	e	enum:llvm::AliasSet::AccessType
Module	DefaultPasses.h	/^    Module,$/;"	e	enum:llvm::StandardPass::StandardSet
Module	Module.h	/^class Module {$/;"	c	namespace:llvm
ModuleCodes	Bitcode/LLVMBitCodes.h	/^  enum ModuleCodes {$/;"	g	namespace:llvm::bitc
ModuleFlagEntry	Module.h	/^    ModuleFlagEntry(ModFlagBehavior B, MDString *K, Value *V)$/;"	f	struct:llvm::Module::ModuleFlagEntry
ModuleFlagEntry	Module.h	/^  struct ModuleFlagEntry {$/;"	s	class:llvm::Module
ModuleID	Module.h	/^  std::string ModuleID;           \/\/\/< Human readable identifier for the module$/;"	m	class:llvm::Module
ModuleMap	Bitcode/Archive.h	/^      ModuleMap;$/;"	t	class:llvm::Archive
ModulePass	Pass.h	/^  explicit ModulePass(char &pid) : Pass(PT_Module, pid) {}$/;"	f	class:llvm::ModulePass
ModulePass	Pass.h	/^class ModulePass : public Pass {$/;"	c	namespace:llvm
ModuleTableOffset	Object/MachOFormat.h	/^    uint32_t ModuleTableOffset;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
Modules	ExecutionEngine/ExecutionEngine.h	/^  SmallVector<Module*, 1> Modules;$/;"	m	class:llvm::ExecutionEngine
Monotonic	Instructions.h	/^  Monotonic = 2,$/;"	e	enum:llvm::AtomicOrdering
MostAlignedSDNode	CodeGen/SelectionDAGNodes.h	/^typedef GlobalAddressSDNode MostAlignedSDNode;$/;"	t	namespace:llvm
Move	MC/MCDwarf.h	/^    enum OpType { SameValue, RememberState, RestoreState, Move, RelMove, Escape,$/;"	e	enum:llvm::MCCFIInstruction::OpType
MoveImm	MC/MCInstrDesc.h	/^    MoveImm,$/;"	e	enum:llvm::MCID::__anon69
Mul	MC/MCExpr.h	/^    Mul,  \/\/\/< Multiplication.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
MulOperator	Operator.h	/^class MulOperator$/;"	c	namespace:llvm
MultiClass	TableGen/Record.h	/^  MultiClass(const std::string &Name, SMLoc Loc, RecordKeeper &Records) :$/;"	f	struct:llvm::MultiClass
MultiClass	TableGen/Record.h	/^struct MultiClass {$/;"	s	namespace:llvm
MustAlias	Analysis/AliasAnalysis.h	/^    MustAlias           \/\/\/< Pointers are equal.$/;"	e	enum:llvm::AliasAnalysis::AliasResult
MustAlias	Analysis/AliasSetTracker.h	/^    MustAlias = 0, MayAlias = 1$/;"	e	enum:llvm::AliasSet::AliasType
MutableArrayRef	ADT/ArrayRef.h	/^    MutableArrayRef(T *begin, T *end) : ArrayRef<T>(begin, end) {}$/;"	f	class:llvm::MutableArrayRef
MutableArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ MutableArrayRef() : ArrayRef<T>() {}$/;"	f	class:llvm::MutableArrayRef
MutableArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ MutableArrayRef(SmallVectorImpl<T> &Vec)$/;"	f	class:llvm::MutableArrayRef
MutableArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ MutableArrayRef(T &OneElt) : ArrayRef<T>(OneElt) {}$/;"	f	class:llvm::MutableArrayRef
MutableArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ MutableArrayRef(T *data, size_t length)$/;"	f	class:llvm::MutableArrayRef
MutableArrayRef	ADT/ArrayRef.h	/^    \/*implicit*\/ MutableArrayRef(std::vector<T> &Vec)$/;"	f	class:llvm::MutableArrayRef
MutableArrayRef	ADT/ArrayRef.h	/^  class MutableArrayRef : public ArrayRef<T> {$/;"	c	namespace:llvm
Mutations	CodeGen/MachineScheduler.h	/^  std::vector<ScheduleDAGMutation*> Mutations;$/;"	m	class:llvm::ScheduleDAGMI
Mutex	Support/Mutex.h	/^    typedef SmartMutex<false> Mutex;$/;"	t	namespace:llvm::sys
MutexGuard	Support/MutexGuard.h	/^    MutexGuard(sys::Mutex &m) : M(m) { M.acquire(); }$/;"	f	class:llvm::MutexGuard
MutexGuard	Support/MutexGuard.h	/^  class MutexGuard {$/;"	c	namespace:llvm
MutexImpl	Support/Mutex.h	/^    class MutexImpl$/;"	c	namespace:llvm::sys
N	Support/BranchProbability.h	/^  uint32_t N;$/;"	m	class:llvm::BranchProbability
NANOSECONDS_PER_MICROSECOND	Support/TimeValue.h	/^      NANOSECONDS_PER_MICROSECOND = 1000,   \/\/\/< One Thousand$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NANOSECONDS_PER_MILLISECOND	Support/TimeValue.h	/^      NANOSECONDS_PER_MILLISECOND = 1000000,\/\/\/< One Million$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NANOSECONDS_PER_POSIX_TICK	Support/TimeValue.h	/^      NANOSECONDS_PER_POSIX_TICK = 100,     \/\/\/< Posix tick is 100 Hz (10ms)$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NANOSECONDS_PER_SECOND	Support/TimeValue.h	/^      NANOSECONDS_PER_SECOND = 1000000000,  \/\/\/< One Billion$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NANOSECONDS_PER_WIN32_TICK	Support/TimeValue.h	/^      NANOSECONDS_PER_WIN32_TICK = 100      \/\/\/< Win32 tick is 100 Hz (10ms)$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NE	Analysis/DependenceAnalysis.h	/^             NE = 5,$/;"	e	enum:llvm::Dependence::DVEntry::__anon25
NE	MC/MCExpr.h	/^    NE,   \/\/\/< Inequality comparison.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
NEARBYINT_F32	CodeGen/RuntimeLibcalls.h	/^    NEARBYINT_F32,$/;"	e	enum:llvm::RTLIB::Libcall
NEARBYINT_F64	CodeGen/RuntimeLibcalls.h	/^    NEARBYINT_F64,$/;"	e	enum:llvm::RTLIB::Libcall
NEARBYINT_F80	CodeGen/RuntimeLibcalls.h	/^    NEARBYINT_F80,$/;"	e	enum:llvm::RTLIB::Libcall
NEARBYINT_PPCF128	CodeGen/RuntimeLibcalls.h	/^    NEARBYINT_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
NEATO	Support/GraphWriter.h	/^      NEATO,$/;"	e	enum:llvm::GraphProgram::Name
NEG_I32	CodeGen/RuntimeLibcalls.h	/^    NEG_I32,$/;"	e	enum:llvm::RTLIB::Libcall
NEG_I64	CodeGen/RuntimeLibcalls.h	/^    NEG_I64,$/;"	e	enum:llvm::RTLIB::Libcall
NK_Alias	Support/YAMLParser.h	/^    NK_Alias$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_KeyValue	Support/YAMLParser.h	/^    NK_KeyValue,$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_Mapping	Support/YAMLParser.h	/^    NK_Mapping,$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_Null	Support/YAMLParser.h	/^    NK_Null,$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_Scalar	Support/YAMLParser.h	/^    NK_Scalar,$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_Sequence	Support/YAMLParser.h	/^    NK_Sequence,$/;"	e	enum:llvm::yaml::Node::NodeKind
NListDescWeakDef	Support/MachO.h	/^      NListDescWeakDef          = 0x80u,$/;"	e	enum:llvm::MachO::__anon126
NListDescWeakRef	Support/MachO.h	/^      NListDescWeakRef          = 0x40u,$/;"	e	enum:llvm::MachO::__anon126
NListSectionMaxSection	Support/MachO.h	/^      NListSectionMaxSection    = 0xffu, \/\/ MAX_SECT$/;"	e	enum:llvm::MachO::__anon126
NListSectionNoSection	Support/MachO.h	/^      NListSectionNoSection     = 0u, \/\/ NO_SECT$/;"	e	enum:llvm::MachO::__anon126
NListTypeAbsolute	Support/MachO.h	/^      NListTypeAbsolute           = 0x2u, \/\/ N_ABS$/;"	e	enum:llvm::MachO::__anon126
NListTypeIndirect	Support/MachO.h	/^      NListTypeIndirect           = 0xau, \/\/ N_INDR$/;"	e	enum:llvm::MachO::__anon126
NListTypePreboundUndefined	Support/MachO.h	/^      NListTypePreboundUndefined  = 0xcu, \/\/ N_PBUD$/;"	e	enum:llvm::MachO::__anon126
NListTypeSection	Support/MachO.h	/^      NListTypeSection            = 0xeu, \/\/ N_SECT$/;"	e	enum:llvm::MachO::__anon126
NListTypeUndefined	Support/MachO.h	/^      NListTypeUndefined          = 0x0u, \/\/ N_UNDF$/;"	e	enum:llvm::MachO::__anon126
NONE	Analysis/DependenceAnalysis.h	/^      enum { NONE = 0,$/;"	e	enum:llvm::Dependence::DVEntry::__anon25
NON_EXTLOAD	CodeGen/ISDOpcodes.h	/^    NON_EXTLOAD = 0,$/;"	e	enum:llvm::ISD::LoadExtType
NORMAL	Analysis/PathNumbering.h	/^  enum EdgeType { NORMAL, BACKEDGE, SPLITEDGE,$/;"	e	enum:llvm::BallLarusEdge::EdgeType
NUM	CodeGen/LiveInterval.h	/^        NUM   = 4$/;"	e	enum:llvm::LiveInterval::InstrSlots::__anon40
Naked	Attributes.h	/^    Naked           = 7,   \/\/\/< Naked function$/;"	e	enum:llvm::Attributes::AttrVal
Name	ADT/Statistic.h	/^  const char *Name;$/;"	m	class:llvm::Statistic
Name	Analysis/DOTGraphTraitsPass.h	/^  std::string Name;$/;"	m	struct:llvm::DOTGraphTraitsPrinter
Name	Analysis/DOTGraphTraitsPass.h	/^  std::string Name;$/;"	m	struct:llvm::DOTGraphTraitsViewer
Name	Analysis/LibCallSemantics.h	/^    const char *Name;$/;"	m	struct:llvm::LibCallFunctionInfo
Name	Bitcode/BitstreamReader.h	/^    std::string Name;$/;"	m	struct:llvm::BitstreamReader::BlockInfo
Name	CodeGen/GCStrategy.h	/^    std::string Name;$/;"	m	class:llvm::GCStrategy
Name	CodeGen/MachinePassRegistry.h	/^  const char *Name;                     \/\/ Name of function pass.$/;"	m	class:llvm::MachinePassRegistryNode
Name	CodeGen/MachineScheduler.h	/^  std::string Name;$/;"	m	class:llvm::ReadyQueue
Name	MC/MCDwarf.h	/^    StringRef Name;$/;"	m	class:llvm::MCDwarfFile
Name	MC/MCDwarf.h	/^    StringRef Name;$/;"	m	class:llvm::MCGenDwarfLabelEntry
Name	MC/MCFixupKindInfo.h	/^  const char *Name;$/;"	m	struct:llvm::MCFixupKindInfo
Name	MC/MCRegisterInfo.h	/^  const char *Name;$/;"	m	class:llvm::MCRegisterClass
Name	MC/MCRegisterInfo.h	/^  uint32_t Name;      \/\/ Printable name for the reg (for debugging)$/;"	m	struct:llvm::MCRegisterDesc
Name	MC/MCSchedule.h	/^  const char *Name;$/;"	m	struct:llvm::MCProcResourceDesc
Name	MC/MCSchedule.h	/^  const char* Name;$/;"	m	struct:llvm::MCSchedClassDesc
Name	MC/MCSymbol.h	/^    StringRef Name;$/;"	m	class:llvm::MCSymbol
Name	Metadata.h	/^  std::string Name;$/;"	m	class:llvm::NamedMDNode
Name	Object/COFF.h	/^  char Name[8];$/;"	m	struct:llvm::object::coff_section
Name	Object/COFF.h	/^  } Name;$/;"	m	struct:llvm::object::coff_symbol	typeref:union:llvm::object::coff_symbol::__anon71
Name	Object/MachOFormat.h	/^    char Name[16];$/;"	m	struct:llvm::object::macho::Section
Name	Object/MachOFormat.h	/^    char Name[16];$/;"	m	struct:llvm::object::macho::Section64
Name	Object/MachOFormat.h	/^    char Name[16];$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
Name	Object/MachOFormat.h	/^    char Name[16];$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
Name	Support/COFF.h	/^    char     Name[NameSize];$/;"	m	struct:llvm::COFF::section
Name	Support/COFF.h	/^    char     Name[NameSize];$/;"	m	struct:llvm::COFF::symbol
Name	Support/CommandLine.h	/^    const char *Name;$/;"	m	class:llvm::cl::generic_parser_base::GenericOptionInfo
Name	Support/GCOV.h	/^  StringRef Name;$/;"	m	class:llvm::GCOVFunction
Name	Support/GraphWriter.h	/^   enum Name {$/;"	g	namespace:llvm::GraphProgram
Name	Support/Registry.h	/^    const char *Name, *Desc;$/;"	m	class:llvm::SimpleRegistryEntry
Name	Support/TargetRegistry.h	/^    const char *Name;$/;"	m	class:llvm::Target
Name	Support/Timer.h	/^  std::string Name;      \/\/ The name of this time variable.$/;"	m	class:llvm::Timer
Name	Support/Timer.h	/^  std::string Name;$/;"	m	class:llvm::TimerGroup
Name	Support/YAMLParser.h	/^  StringRef Name;$/;"	m	class:llvm::yaml::AliasNode
Name	TableGen/Record.h	/^  Init *Name;$/;"	m	class:llvm::Record
Name	TableGen/Record.h	/^  Init *Name;$/;"	m	class:llvm::RecordVal
Name	Value.h	/^  ValueName *Name;$/;"	m	class:llvm::Value
NameRVA	Support/COFF.h	/^    uint32_t NameRVA;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
NameSize	Support/COFF.h	/^    NameSize       = 8,$/;"	e	enum:llvm::COFF::__anon80
NamedMDList	Module.h	/^  NamedMDListType NamedMDList;    \/\/\/< The named metadata in the module$/;"	m	class:llvm::Module
NamedMDListType	Module.h	/^  typedef ilist<NamedMDNode> NamedMDListType;$/;"	t	class:llvm::Module
NamedMDNode	Metadata.h	/^class NamedMDNode : public ilist_node<NamedMDNode> {$/;"	c	namespace:llvm
NamedMDSymTab	Module.h	/^  void *NamedMDSymTab;            \/\/\/< NamedMDNode names.$/;"	m	class:llvm::Module
NamedRegionTimer	Support/Timer.h	/^struct NamedRegionTimer : public TimeRegion {$/;"	s	namespace:llvm
Nand	Instructions.h	/^    Nand,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
NanoSecondsType	Support/TimeValue.h	/^    typedef int32_t NanoSecondsType;\/\/\/< Type used for representing nanoseconds.$/;"	t	class:llvm::sys::TimeValue
NativeClient	ADT/Triple.h	/^    NativeClient,$/;"	e	enum:llvm::Triple::OSType
NeededSafePoints	CodeGen/GCStrategy.h	/^    unsigned NeededSafePoints; \/\/\/< Bitmask of required safe points.$/;"	m	class:llvm::GCStrategy
NeedsPHITranslationFromBlock	Analysis/PHITransAddr.h	/^  bool NeedsPHITranslationFromBlock(BasicBlock *BB) const {$/;"	f	class:llvm::PHITransAddr
NegPart	Analysis/DependenceAnalysis.h	/^      const SCEV *NegPart;$/;"	m	struct:llvm::DependenceAnalysis::CoefficientInfo
Nest	Attributes.h	/^    Nest            = 8,   \/\/\/< Nested function static chain$/;"	e	enum:llvm::Attributes::AttrVal
Nest	Target/TargetCallingConv.h	/^    static const uint64_t Nest           = 1ULL<<5;  \/\/\/< Nested fn static chain$/;"	m	struct:llvm::ISD::ArgFlagsTy
NestOffs	Target/TargetCallingConv.h	/^    static const uint64_t NestOffs       = 5;$/;"	m	struct:llvm::ISD::ArgFlagsTy
NetBSD	ADT/Triple.h	/^    NetBSD,$/;"	e	enum:llvm::Triple::OSType
NeverInlineCost	Analysis/InlineCost.h	/^      NeverInlineCost = INT_MAX$/;"	e	enum:llvm::InlineCost::SentinelValues
New	Target/TargetLowering.h	/^    SDValue New;$/;"	m	struct:llvm::TargetLowering::TargetLoweringOpt
NewRegs	CodeGen/LiveRangeEdit.h	/^  SmallVectorImpl<LiveInterval*> &NewRegs;$/;"	m	class:llvm::LiveRangeEdit
Newline	Support/Regex.h	/^      Newline=2$/;"	e	enum:llvm::Regex::__anon128
Next	ADT/EquivalenceClasses.h	/^    mutable const ECValue *Leader, *Next;$/;"	m	class:llvm::EquivalenceClasses::ECValue
Next	ADT/ilist_node.h	/^  NodeTy *Next;$/;"	m	class:llvm::ilist_node
Next	Analysis/ScalarEvolutionExpressions.h	/^    SCEVUnknown *Next;$/;"	m	class:llvm::SCEVUnknown
Next	CodeGen/MachineOperand.h	/^      MachineOperand *Next;$/;"	m	struct:llvm::MachineOperand::__anon36::__anon37
Next	CodeGen/MachinePassRegistry.h	/^  MachinePassRegistryNode *Next;        \/\/ Next function pass in list.$/;"	m	class:llvm::MachinePassRegistryNode
Next	CodeGen/SelectionDAG.h	/^    DAGUpdateListener *const Next;$/;"	m	struct:llvm::SelectionDAG::DAGUpdateListener
Next	CodeGen/SelectionDAGNodes.h	/^  SDUse **Prev, *Next;$/;"	m	class:llvm::SDUse
Next	Constants.h	/^  ConstantDataSequential *Next;$/;"	m	class:llvm::ConstantDataSequential
Next	Support/ManagedStatic.h	/^  mutable const ManagedStaticBase *Next;$/;"	m	class:llvm::ManagedStaticBase
Next	Support/Recycler.h	/^  RecyclerStruct *Prev, *Next;$/;"	m	struct:llvm::RecyclerStruct
Next	Support/Registry.h	/^      listener *Prev, *Next;$/;"	m	class:llvm::Registry::listener
Next	Support/Registry.h	/^      node *Next;$/;"	m	class:llvm::Registry::node
Next	Support/TargetRegistry.h	/^    Target *Next;$/;"	m	class:llvm::Target
Next	Support/Timer.h	/^  Timer **Prev, *Next;   \/\/ Doubly linked list of timers in the group.$/;"	m	class:llvm::Timer
Next	Support/Timer.h	/^  TimerGroup **Prev, *Next; \/\/ Doubly linked list of TimerGroup's.$/;"	m	class:llvm::TimerGroup
Next	Support/ValueHandle.h	/^  ValueHandleBase *Next;$/;"	m	class:llvm::ValueHandleBase
Next	Use.h	/^  Use *Next;$/;"	m	class:llvm::Use
NextAnonGlobalID	Target/Mangler.h	/^  unsigned NextAnonGlobalID;$/;"	m	class:llvm::Mangler
NextChar	Bitcode/BitstreamReader.h	/^  size_t NextChar;$/;"	m	class:llvm::BitstreamCursor
NextCycles_	MC/MCInstrItineraries.h	/^  int NextCycles_;   \/\/\/< Number of machine cycles to next stage$/;"	m	struct:llvm::InstrStage
NextEntry	Support/PrettyStackTrace.h	/^    const PrettyStackTraceEntry *NextEntry;$/;"	m	class:llvm::PrettyStackTraceEntry
NextExit	Analysis/ScalarEvolution.h	/^      PointerIntPair<ExitNotTakenInfo*, 1> NextExit;$/;"	m	struct:llvm::ScalarEvolution::ExitNotTakenInfo
NextFnNum	CodeGen/MachineFunctionAnalysis.h	/^  unsigned NextFnNum;$/;"	m	struct:llvm::MachineFunctionAnalysis
NextForKey	ADT/ScopedHashTable.h	/^  ScopedHashTableVal *NextForKey;$/;"	m	class:llvm::ScopedHashTableVal
NextInFoldingSetBucket	ADT/FoldingSet.h	/^    void *NextInFoldingSetBucket;$/;"	m	class:llvm::FoldingSetImpl::Node
NextInList	Analysis/AliasSetTracker.h	/^    PointerRec **PrevInList, *NextInList;$/;"	m	class:llvm::AliasSet::PointerRec
NextInScope	ADT/ScopedHashTable.h	/^  ScopedHashTableVal *NextInScope;$/;"	m	class:llvm::ScopedHashTableVal
NextPowerOf2	Support/MathExtras.h	/^inline uint64_t NextPowerOf2(uint64_t A) {$/;"	f	namespace:llvm
NextPtr	Support/Allocator.h	/^  MemSlab *NextPtr;$/;"	m	class:llvm::MemSlab
NextRegistered	Support/CommandLine.h	/^  Option *NextRegistered; \/\/ Singly linked list of registered options.$/;"	m	class:llvm::cl::Option
NextUniqueID	MC/MCContext.h	/^    unsigned NextUniqueID;$/;"	m	class:llvm::MCContext
Nlist32Size	Object/MachOFormat.h	/^    Nlist32Size = 12,$/;"	e	enum:llvm::object::macho::StructureSizes
Nlist64Size	Object/MachOFormat.h	/^    Nlist64Size = 16,$/;"	e	enum:llvm::object::macho::StructureSizes
NlistMaskExternal	Support/MachO.h	/^      NlistMaskExternal         = 0x01, \/\/ N_EXT$/;"	e	enum:llvm::MachO::__anon126
NlistMaskPrivateExternal	Support/MachO.h	/^      NlistMaskPrivateExternal  = 0x10, \/\/ N_PEXT$/;"	e	enum:llvm::MachO::__anon126
NlistMaskStab	Support/MachO.h	/^      NlistMaskStab             = 0xe0, \/\/ N_STAB$/;"	e	enum:llvm::MachO::__anon126
NlistMaskType	Support/MachO.h	/^      NlistMaskType             = 0x0e, \/\/ N_TYPE$/;"	e	enum:llvm::MachO::__anon126
No	Analysis/LibCallSemantics.h	/^      Yes, No, Unknown$/;"	e	enum:llvm::LibCallLocationInfo::LocResult
NoAlias	Analysis/AliasAnalysis.h	/^    NoAlias = 0,        \/\/\/< No dependencies.$/;"	e	enum:llvm::AliasAnalysis::AliasResult
NoAlias	Attributes.h	/^    NoAlias         = 9,   \/\/\/< Considered to not alias after call$/;"	e	enum:llvm::Attributes::AttrVal
NoAlignment	MC/MCAsmInfo.h	/^    enum LCOMMType { NoAlignment, ByteAlignment, Log2Alignment };$/;"	e	enum:llvm::LCOMM::LCOMMType
NoCapture	Attributes.h	/^    NoCapture       = 10,  \/\/\/< Function creates no aliases of pointer$/;"	e	enum:llvm::Attributes::AttrVal
NoCond	MC/MCParser/AsmCond.h	/^    NoCond,     \/\/ no conditional is being processed$/;"	e	enum:llvm::AsmCond::ConditionalAssemblyType
NoFlagSet	Target/TargetCallingConv.h	/^    static const uint64_t NoFlagSet      = 0ULL;$/;"	m	struct:llvm::ISD::ArgFlagsTy
NoFlags	CodeGen/MachineInstr.h	/^    NoFlags      = 0,$/;"	e	enum:llvm::MachineInstr::MIFlag
NoFlags	Support/Regex.h	/^      NoFlags=0,$/;"	e	enum:llvm::Regex::__anon128
NoFolder	Support/NoFolder.h	/^  explicit NoFolder() {}$/;"	f	class:llvm::NoFolder
NoFolder	Support/NoFolder.h	/^class NoFolder {$/;"	c	namespace:llvm
NoHazard	CodeGen/ScheduleHazardRecognizer.h	/^    NoHazard,      \/\/ This instruction can be emitted at this cycle.$/;"	e	enum:llvm::ScheduleHazardRecognizer::HazardType
NoImplicitFloat	Attributes.h	/^    NoImplicitFloat = 11,  \/\/\/< Disable implicit floating point insts$/;"	e	enum:llvm::Attributes::AttrVal
NoInline	Attributes.h	/^    NoInline        = 12,  \/\/\/< inline=never$/;"	e	enum:llvm::Attributes::AttrVal
NoMemOpBoost	Transforms/Vectorize.h	/^  bool NoMemOpBoost;$/;"	m	struct:llvm::VectorizeConfig
NoModRef	Analysis/AliasAnalysis.h	/^  enum ModRefResult { NoModRef = 0, Ref = 1, Mod = 2, ModRef = 3 };$/;"	e	enum:llvm::AliasAnalysis::ModRefResult
NoModRef	Analysis/AliasSetTracker.h	/^    NoModRef = 0, Refs = 1,         \/\/ Ref = bit 1$/;"	e	enum:llvm::AliasSet::AccessType
NoRedZone	Attributes.h	/^    NoRedZone       = 14,  \/\/\/< Disable redzone$/;"	e	enum:llvm::Attributes::AttrVal
NoRelocation	Constant.h	/^    NoRelocation = 0,$/;"	e	enum:llvm::Constant::PossibleRelocationsTy
NoReturn	Attributes.h	/^    NoReturn        = 15,  \/\/\/< Mark the function as not returning$/;"	e	enum:llvm::Attributes::AttrVal
NoSignedWrap	Operator.h	/^    NoSignedWrap   = (1 << 1)$/;"	e	enum:llvm::OverflowingBinaryOperator::__anon77
NoUnsignedWrap	Operator.h	/^    NoUnsignedWrap = (1 << 0),$/;"	e	enum:llvm::OverflowingBinaryOperator::__anon77
NoUnwind	Attributes.h	/^    NoUnwind        = 16,  \/\/\/< Function doesn't unwind stack$/;"	e	enum:llvm::Attributes::AttrVal
NoWrapFlags	Analysis/ScalarEvolution.h	/^    enum NoWrapFlags { FlagAnyWrap = 0,          \/\/ No guarantee.$/;"	g	class:llvm::SCEV
NoWrapMask	Analysis/ScalarEvolution.h	/^                       NoWrapMask  = (1 << 3) -1 };$/;"	e	enum:llvm::SCEV::NoWrapFlags
Node	ADT/EquivalenceClasses.h	/^    const ECValue *Node;$/;"	m	class:llvm::EquivalenceClasses::member_iterator
Node	ADT/FoldingSet.h	/^    Node() : NextInFoldingSetBucket(0) {}$/;"	f	class:llvm::FoldingSetImpl::Node
Node	ADT/FoldingSet.h	/^  class Node {$/;"	c	class:llvm::FoldingSetImpl
Node	ADT/ScopedHashTable.h	/^  ScopedHashTableVal<K, V> *Node;$/;"	m	class:llvm::ScopedHashTableIterator
Node	Analysis/RegionIterator.h	/^  NodeType* Node;$/;"	m	class:llvm::RNSuccIterator
Node	Analysis/RegionIterator.h	/^  PointerIntPair<NodeType*, 2, enum ItMode> Node;$/;"	m	class:llvm::RNSuccIterator
Node	CodeGen/ScheduleDAG.h	/^    SDNode *Node;                       \/\/ Representative node.$/;"	m	class:llvm::SUnit
Node	CodeGen/ScheduleDAG.h	/^    SUnit *Node;$/;"	m	class:llvm::SUnitIterator
Node	CodeGen/SelectionDAGNodes.h	/^  SDNode *Node;       \/\/ The node defining the value we are using.$/;"	m	class:llvm::SDValue
Node	CodeGen/SelectionDAGNodes.h	/^  const SDNode *Node;$/;"	m	class:llvm::SDNodeIterator
Node	Support/Registry.h	/^      node Node;$/;"	m	class:llvm::Registry::Add
Node	Support/YAMLParser.h	/^class Node {$/;"	c	namespace:llvm::yaml
Node	Target/TargetLowering.h	/^    SDValue Node;$/;"	m	struct:llvm::TargetLowering::ArgListEntry
Node2Index	CodeGen/ScheduleDAG.h	/^    std::vector<int> Node2Index;$/;"	m	class:llvm::ScheduleDAGTopologicalSort
Node2VReg	CodeGen/RegAllocPBQP.h	/^                     PBQP::NodeItrComparator>  Node2VReg;$/;"	t	class:llvm::PBQPRAProblem
NodeAllocator	CodeGen/SelectionDAG.h	/^  NodeAllocatorType NodeAllocator;$/;"	m	class:llvm::SelectionDAG
NodeAllocator	Support/YAMLParser.h	/^  BumpPtrAllocator NodeAllocator;$/;"	m	class:llvm::yaml::Document
NodeAllocatorType	CodeGen/SelectionDAG.h	/^    NodeAllocatorType;$/;"	t	class:llvm::SelectionDAG
NodeBase	ADT/IntervalMap.h	/^class NodeBase {$/;"	c	namespace:llvm::IntervalMapImpl
NodeColor	Analysis/PathNumbering.h	/^  enum NodeColor { WHITE, GRAY, BLACK };$/;"	g	class:llvm::BallLarusNode
NodeData	CodeGen/PBQP/HeuristicSolver.h	/^      NodeData() : solverDegree(0) {}$/;"	f	class:PBQP::HeuristicSolverImpl::NodeData
NodeData	CodeGen/PBQP/HeuristicSolver.h	/^    class NodeData {$/;"	c	class:PBQP::HeuristicSolverImpl
NodeData	CodeGen/PBQP/Heuristics/Briggs.h	/^        NodeData()$/;"	f	struct:PBQP::Heuristics::Briggs::NodeData
NodeData	CodeGen/PBQP/Heuristics/Briggs.h	/^      struct NodeData {$/;"	s	class:PBQP::Heuristics::Briggs
NodeDataList	CodeGen/PBQP/HeuristicSolver.h	/^    typedef std::list<NodeData> NodeDataList;$/;"	t	class:PBQP::HeuristicSolverImpl
NodeEntry	CodeGen/PBQP/Graph.h	/^      NodeEntry(const Vector &costs) : costs(costs), degree(0) {}$/;"	f	class:PBQP::Graph::NodeEntry
NodeEntry	CodeGen/PBQP/Graph.h	/^    class NodeEntry {$/;"	c	class:PBQP::Graph
NodeEquals	ADT/FoldingSet.h	/^  virtual bool NodeEquals(FoldingSetImpl::Node *N,$/;"	f	class:llvm::ContextualFoldingSet
NodeEquals	ADT/FoldingSet.h	/^  virtual bool NodeEquals(Node *N, const FoldingSetNodeID &ID, unsigned IDHash,$/;"	f	class:llvm::FoldingSet
NodeGraphAttrs	CodeGen/SelectionDAG.h	/^  std::map<const SDNode *, std::string> NodeGraphAttrs;$/;"	m	class:llvm::SelectionDAG
NodeId	CodeGen/SelectionDAGNodes.h	/^  int NodeId;$/;"	m	class:llvm::SDNode
NodeItr	CodeGen/PBQP/Graph.h	/^    typedef NodeList::iterator NodeItr;$/;"	t	class:PBQP::Graph
NodeItrComparator	CodeGen/PBQP/Graph.h	/^  class NodeItrComparator {$/;"	c	namespace:PBQP
NodeKind	ADT/Twine.h	/^    enum NodeKind {$/;"	g	class:llvm::Twine
NodeKind	Support/YAMLParser.h	/^  enum NodeKind {$/;"	g	class:llvm::yaml::Node
NodeList	CodeGen/PBQP/Graph.h	/^    typedef std::list<NodeEntry> NodeList;$/;"	t	class:PBQP::Graph
NodeNum	CodeGen/ScheduleDAG.h	/^    unsigned NodeNum;                   \/\/ Entry # of node in the node vector.$/;"	m	class:llvm::SUnit
NodePtr	ADT/FoldingSet.h	/^  FoldingSetNode *NodePtr;$/;"	m	class:llvm::FoldingSetIteratorImpl
NodePtr	ADT/ilist.h	/^  pointer NodePtr;$/;"	m	class:llvm::ilist_iterator
NodeQueueId	CodeGen/ScheduleDAG.h	/^    unsigned NodeQueueId;               \/\/ Queue id of node.$/;"	m	class:llvm::SUnit
NodeRef	ADT/IntervalMap.h	/^  NodeRef() {}$/;"	f	class:llvm::IntervalMapImpl::NodeRef
NodeRef	ADT/IntervalMap.h	/^  NodeRef(NodeT *p, unsigned n) : pip(p, n - 1) {$/;"	f	class:llvm::IntervalMapImpl::NodeRef
NodeRef	ADT/IntervalMap.h	/^class NodeRef {$/;"	c	namespace:llvm::IntervalMapImpl
NodeSizer	ADT/IntervalMap.h	/^struct NodeSizer {$/;"	s	namespace:llvm::IntervalMapImpl
NodeType	ADT/DepthFirstIterator.h	/^  typedef typename GT::NodeType          NodeType;$/;"	t	class:llvm::df_iterator
NodeType	ADT/GraphTraits.h	/^  typedef typename GraphTraits<T>::NodeType NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	ADT/GraphTraits.h	/^  typedef typename GraphType::UnknownGraphTypeError NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	ADT/PostOrderIterator.h	/^  typedef typename GT::NodeType          NodeType;$/;"	t	class:llvm::po_iterator
NodeType	ADT/PostOrderIterator.h	/^  typedef typename GT::NodeType NodeType;$/;"	t	class:llvm::ReversePostOrderTraversal
NodeType	ADT/SCCIterator.h	/^  typedef typename GT::NodeType          NodeType;$/;"	t	class:llvm::scc_iterator
NodeType	Analysis/CallGraph.h	/^  typedef CallGraphNode NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Analysis/CallGraph.h	/^  typedef const CallGraphNode NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Analysis/Dominators.h	/^  typedef DomTreeNode NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Analysis/Interval.h	/^  typedef Interval NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Analysis/LoopInfo.h	/^  typedef Loop NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Analysis/LoopInfo.h	/^  typedef const Loop NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	CodeGen/ISDOpcodes.h	/^  enum NodeType {$/;"	g	namespace:llvm::ISD
NodeType	CodeGen/MachineBasicBlock.h	/^  typedef MachineBasicBlock NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	CodeGen/MachineBasicBlock.h	/^  typedef const MachineBasicBlock NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	CodeGen/MachineDominators.h	/^  typedef MachineDomTreeNode NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	CodeGen/MachineLoopInfo.h	/^  typedef MachineLoop NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	CodeGen/MachineLoopInfo.h	/^  typedef const MachineLoop NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	CodeGen/ScheduleDAG.h	/^    typedef SUnit NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	CodeGen/SelectionDAGNodes.h	/^  int16_t NodeType;$/;"	m	class:llvm::SDNode
NodeType	CodeGen/SelectionDAGNodes.h	/^  typedef SDNode NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Support/CFG.h	/^  typedef BasicBlock NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Support/CFG.h	/^  typedef const BasicBlock NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Support/DataFlow.h	/^  typedef Value NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Support/DataFlow.h	/^  typedef const Value NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Support/GraphWriter.h	/^  typedef typename GTraits::NodeType          NodeType;$/;"	t	class:llvm::GraphWriter
NodeType	Type.h	/^  typedef Type NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	Type.h	/^  typedef const Type NodeType;$/;"	t	struct:llvm::GraphTraits
Nodes	Analysis/Interval.h	/^  std::vector<BasicBlock*> Nodes;$/;"	m	class:llvm::Interval
Nodes	CallGraphSCCPass.h	/^  std::vector<CallGraphNode*> Nodes;$/;"	m	class:llvm::CallGraphSCC
NodesSeen	DebugInfo.h	/^    SmallPtrSet<MDNode *, 64> NodesSeen;$/;"	m	class:llvm::DebugInfoFinder
NonConst	Support/PointerLikeTypeTraits.h	/^  typedef PointerLikeTypeTraits<T*> NonConst;$/;"	t	class:llvm::PointerLikeTypeTraits
NonFuncLocal	Analysis/MemoryDependenceAnalysis.h	/^      NonFuncLocal = 0x8,$/;"	e	enum:llvm::MemDepResult::OtherType
NonLazyBind	Attributes.h	/^    NonLazyBind     = 13,  \/\/\/< Function is called early and\/or$/;"	e	enum:llvm::Attributes::AttrVal
NonLazySymbolPointerSection	MC/MCObjectFileInfo.h	/^  const MCSection *NonLazySymbolPointerSection;$/;"	m	class:llvm::MCObjectFileInfo
NonLinear	Analysis/DependenceAnalysis.h	/^      enum ClassificationKind { ZIV, SIV, RDIV, MIV, NonLinear } Classification;$/;"	e	enum:llvm::DependenceAnalysis::Subscript::ClassificationKind
NonLocal	Analysis/MemoryDependenceAnalysis.h	/^      NonLocal = 0x4,$/;"	e	enum:llvm::MemDepResult::OtherType
NonLocalDepEntry	Analysis/MemoryDependenceAnalysis.h	/^    NonLocalDepEntry(BasicBlock *bb) : BB(bb) {}$/;"	f	class:llvm::NonLocalDepEntry
NonLocalDepEntry	Analysis/MemoryDependenceAnalysis.h	/^    NonLocalDepEntry(BasicBlock *bb, MemDepResult result)$/;"	f	class:llvm::NonLocalDepEntry
NonLocalDepEntry	Analysis/MemoryDependenceAnalysis.h	/^  class NonLocalDepEntry {$/;"	c	namespace:llvm
NonLocalDepInfo	Analysis/MemoryDependenceAnalysis.h	/^    typedef std::vector<NonLocalDepEntry> NonLocalDepInfo;$/;"	t	class:llvm::MemoryDependenceAnalysis
NonLocalDepMapType	Analysis/MemoryDependenceAnalysis.h	/^    typedef DenseMap<Instruction*, PerInstNLInfo> NonLocalDepMapType;$/;"	t	class:llvm::MemoryDependenceAnalysis
NonLocalDepResult	Analysis/MemoryDependenceAnalysis.h	/^    NonLocalDepResult(BasicBlock *bb, MemDepResult result, Value *address)$/;"	f	class:llvm::NonLocalDepResult
NonLocalDepResult	Analysis/MemoryDependenceAnalysis.h	/^  class NonLocalDepResult {$/;"	c	namespace:llvm
NonLocalDeps	Analysis/MemoryDependenceAnalysis.h	/^      NonLocalDepInfo NonLocalDeps;$/;"	m	struct:llvm::MemoryDependenceAnalysis::NonLocalPointerInfo
NonLocalDeps	Analysis/MemoryDependenceAnalysis.h	/^    NonLocalDepMapType NonLocalDeps;$/;"	m	class:llvm::MemoryDependenceAnalysis
NonLocalPointerDeps	Analysis/MemoryDependenceAnalysis.h	/^    CachedNonLocalPointerInfo NonLocalPointerDeps;$/;"	m	class:llvm::MemoryDependenceAnalysis
NonLocalPointerInfo	Analysis/MemoryDependenceAnalysis.h	/^      NonLocalPointerInfo() : Size(AliasAnalysis::UnknownSize), TBAATag(0) {}$/;"	f	struct:llvm::MemoryDependenceAnalysis::NonLocalPointerInfo
NonLocalPointerInfo	Analysis/MemoryDependenceAnalysis.h	/^    struct NonLocalPointerInfo {$/;"	s	class:llvm::MemoryDependenceAnalysis
None	Attributes.h	/^    None            = 0,   \/\/\/< No attributes have been set$/;"	e	enum:llvm::Attributes::AttrVal
None	MC/MCAsmInfo.h	/^    enum ExceptionsType { None, DwarfCFI, SjLj, ARM, Win64 };$/;"	e	enum:llvm::ExceptionHandling::ExceptionsType
None	Support/CodeGen.h	/^      None,        \/\/ -O0$/;"	e	enum:llvm::CodeGenOpt::Level
None	Target/TargetLowering.h	/^      None,             \/\/ No preference$/;"	e	enum:llvm::Sched::Preference
NoopHazard	CodeGen/ScheduleHazardRecognizer.h	/^    NoopHazard     \/\/ This instruction can't be emitted, and needs noops.$/;"	e	enum:llvm::ScheduleHazardRecognizer::HazardType
NoreturnPenalty	Analysis/InlineCost.h	/^    const int NoreturnPenalty = 10000;$/;"	m	namespace:llvm::InlineConstants
NormalCtor	PassSupport.h	/^  NormalCtor_t NormalCtor;$/;"	m	class:llvm::PassInfo
NormalCtor_t	PassSupport.h	/^  typedef Pass* (*NormalCtor_t)();$/;"	t	class:llvm::PassInfo
NormalFormatting	Support/CommandLine.h	/^  NormalFormatting = 0x00,     \/\/ Nothing special$/;"	e	enum:llvm::cl::FormattingFlags
Normalize	Analysis/ScalarEvolutionNormalization.h	/^  Normalize,$/;"	e	enum:llvm::TransformKind
NormalizeAutodetect	Analysis/ScalarEvolutionNormalization.h	/^  NormalizeAutodetect,$/;"	e	enum:llvm::TransformKind
Not	ADT/APInt.h	/^inline APInt Not(const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
Not	MC/MCExpr.h	/^    Not,   \/\/\/< Bitwise negation.$/;"	e	enum:llvm::MCUnaryExpr::Opcode
NotAtomic	Instructions.h	/^  NotAtomic = 0,$/;"	e	enum:llvm::AtomicOrdering
NotDuplicable	MC/MCInstrDesc.h	/^    NotDuplicable,$/;"	e	enum:llvm::MCID::__anon69
NotHidden	Support/CommandLine.h	/^  NotHidden       = 0x00,      \/\/ Option included in -help & -help-hidden$/;"	e	enum:llvm::cl::OptionHidden
NotThreadLocal	GlobalVariable.h	/^    NotThreadLocal = 0,$/;"	e	enum:llvm::GlobalVariable::ThreadLocalMode
NotUniquedBit	Metadata.h	/^    NotUniquedBit    = 1 << 1,$/;"	e	enum:llvm::MDNode::__anon70
NotifyAdd	CodeGen/MachinePassRegistry.h	/^  virtual void NotifyAdd(const char *N,$/;"	f	class:llvm::RegisterPassParser
NotifyFreeingMachineCode	ExecutionEngine/JITEventListener.h	/^  virtual void NotifyFreeingMachineCode(void *) {}$/;"	f	class:llvm::JITEventListener
NotifyFunctionEmitted	ExecutionEngine/JITEventListener.h	/^  virtual void NotifyFunctionEmitted(const Function &,$/;"	f	class:llvm::JITEventListener
NotifyRemove	CodeGen/MachinePassRegistry.h	/^  virtual void NotifyRemove(const char *N) {$/;"	f	class:llvm::RegisterPassParser
Nowhere	Analysis/AliasAnalysis.h	/^  enum { Nowhere = 0, ArgumentPointees = 4, Anywhere = 8 | ArgumentPointees };$/;"	e	enum:llvm::AliasAnalysis::__anon29
NullKind	ADT/Twine.h	/^      NullKind,$/;"	e	enum:llvm::Twine::NodeKind
NullNode	Support/YAMLParser.h	/^  NullNode(OwningPtr<Document> &D) : Node(NK_Null, D, StringRef()) {}$/;"	f	class:llvm::yaml::NullNode
NullNode	Support/YAMLParser.h	/^class NullNode : public Node {$/;"	c	namespace:llvm::yaml
NullablePtr	ADT/NullablePtr.h	/^  NullablePtr(T *P = 0) : Ptr(P) {}$/;"	f	class:llvm::NullablePtr
NullablePtr	ADT/NullablePtr.h	/^class NullablePtr {$/;"	c	namespace:llvm
Num	CodeGen/GCMetadata.h	/^    int Num;            \/\/\/< Usually a frame index.$/;"	m	struct:llvm::GCRoot
NumBBInsts	Analysis/CodeMetrics.h	/^    DenseMap<const BasicBlock *, unsigned> NumBBInsts;$/;"	m	struct:llvm::CodeMetrics
NumBaseBits	ADT/SmallBitVector.h	/^    NumBaseBits = sizeof(uintptr_t) * CHAR_BIT,$/;"	e	enum:llvm::SmallBitVector::__anon5
NumBitWords	ADT/BitVector.h	/^  unsigned NumBitWords(unsigned S) const {$/;"	f	class:llvm::BitVector
NumBlocks	Analysis/CodeMetrics.h	/^    unsigned NumBlocks;$/;"	m	struct:llvm::CodeMetrics
NumBuckets	ADT/DenseMap.h	/^    unsigned NumBuckets;$/;"	m	struct:llvm::SmallDenseMap::LargeRep
NumBuckets	ADT/DenseMap.h	/^  unsigned NumBuckets;$/;"	m	class:llvm::DenseMap
NumBuckets	ADT/FoldingSet.h	/^  unsigned NumBuckets;$/;"	m	class:llvm::FoldingSetImpl
NumBuckets	ADT/StringMap.h	/^  unsigned NumBuckets;$/;"	m	class:llvm::StringMapImpl
NumCalls	Analysis/CodeMetrics.h	/^    unsigned NumCalls;$/;"	m	struct:llvm::CodeMetrics
NumClasses	ADT/IntEqClasses.h	/^  unsigned NumClasses;$/;"	m	class:llvm::IntEqClasses
NumClasses	MC/MCRegisterInfo.h	/^  unsigned NumClasses;                        \/\/ Number of entries in the array$/;"	m	class:llvm::MCRegisterInfo
NumContainedTys	Type.h	/^  unsigned NumContainedTys;$/;"	m	class:llvm::Type
NumDefs	MC/MCInstrDesc.h	/^  unsigned short  NumDefs;       \/\/ Num of args that are definitions$/;"	m	class:llvm::MCInstrDesc
NumElements	ADT/SmallPtrSet.h	/^  unsigned NumElements;$/;"	m	class:llvm::SmallPtrSetImpl
NumElements	DataLayout.h	/^  unsigned NumElements;$/;"	m	class:llvm::StructLayout
NumElements	DerivedTypes.h	/^  uint64_t NumElements;$/;"	m	class:llvm::ArrayType
NumElements	DerivedTypes.h	/^  unsigned NumElements;$/;"	m	class:llvm::VectorType
NumEntries	ADT/DenseMap.h	/^  unsigned NumEntries;$/;"	m	class:llvm::DenseMap
NumExitBlocks	Transforms/Utils/CodeExtractor.h	/^    unsigned NumExitBlocks;$/;"	m	class:llvm::CodeExtractor
NumExternalRelocationTableEntries	Object/MachOFormat.h	/^    uint32_t NumExternalRelocationTableEntries;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
NumExternalSymbols	Object/MachOFormat.h	/^    uint32_t NumExternalSymbols;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
NumFeatures	MC/MCSubtargetInfo.h	/^  unsigned NumFeatures;                \/\/ Number of processor features$/;"	m	class:llvm::MCSubtargetInfo
NumFixedArgs	Target/TargetLowering.h	/^    unsigned NumFixedArgs;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
NumFixedObjects	CodeGen/MachineFrameInfo.h	/^  unsigned NumFixedObjects;$/;"	m	class:llvm::MachineFrameInfo
NumIndirectSymbolTableEntries	Object/MachOFormat.h	/^    uint32_t NumIndirectSymbolTableEntries;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
NumInlineCandidates	Analysis/CodeMetrics.h	/^    unsigned NumInlineCandidates;$/;"	m	struct:llvm::CodeMetrics
NumInstrsScheduled	CodeGen/MachineScheduler.h	/^  unsigned NumInstrsScheduled;$/;"	m	class:llvm::ScheduleDAGMI
NumInsts	Analysis/CodeMetrics.h	/^    unsigned NumInsts;$/;"	m	struct:llvm::CodeMetrics
NumItems	ADT/StringMap.h	/^  unsigned NumItems;$/;"	m	class:llvm::StringMapImpl
NumLibFuncs	Target/TargetLibraryInfo.h	/^      NumLibFuncs$/;"	e	enum:llvm::LibFunc::Func
NumLoadCommands	Object/MachOFormat.h	/^    uint32_t NumLoadCommands;$/;"	m	struct:llvm::object::macho::Header
NumLoadedCommands	Object/MachOObject.h	/^  mutable unsigned NumLoadedCommands;$/;"	m	class:llvm::object::MachOObject
NumLocalRelocationTableEntries	Object/MachOFormat.h	/^    uint32_t NumLocalRelocationTableEntries;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
NumLocalSymbols	Object/MachOFormat.h	/^    uint32_t NumLocalSymbols;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
NumLocations	Analysis/LibCallSemantics.h	/^    mutable unsigned NumLocations;$/;"	m	class:llvm::LibCallInfo
NumLowBitsAvailable	ADT/IntervalMap.h	/^    enum { NumLowBitsAvailable = Log2CacheLine };$/;"	e	enum:llvm::IntervalMapImpl::NodeRef::CacheAlignedPointerTraits::__anon22
NumLowBitsAvailable	ADT/PointerIntPair.h	/^    NumLowBitsAvailable = PtrTraits::NumLowBitsAvailable - IntBits$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon12
NumLowBitsAvailable	ADT/PointerUnion.h	/^      NumLowBitsAvailable = $/;"	e	enum:llvm::PointerLikeTypeTraits::__anon2
NumLowBitsAvailable	ADT/PointerUnion.h	/^      NumLowBitsAvailable = $/;"	e	enum:llvm::PointerLikeTypeTraits::__anon3
NumLowBitsAvailable	ADT/PointerUnion.h	/^      NumLowBitsAvailable = $/;"	e	enum:llvm::PointerLikeTypeTraits::__anon4
NumLowBitsAvailable	ADT/PointerUnion.h	/^      NumLowBitsAvailable = PT1BitsAv < PT2BitsAv ? PT1BitsAv : PT2BitsAv$/;"	e	enum:llvm::PointerUnionUIntTraits::__anon1
NumLowBitsAvailable	Instruction.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon59
NumLowBitsAvailable	Support/PointerLikeTypeTraits.h	/^  enum { NumLowBitsAvailable = 0 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon131
NumLowBitsAvailable	Support/PointerLikeTypeTraits.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon129
NumLowBitsAvailable	Support/PointerLikeTypeTraits.h	/^  enum { NumLowBitsAvailable = NonConst::NumLowBitsAvailable };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon130
NumLowBitsAvailable	Support/ValueHandle.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon132
NumLowBitsAvailable	Use.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon143
NumLowBitsAvailable	Value.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon144
NumMemRefs	CodeGen/MachineInstr.h	/^  uint16_t NumMemRefs;                  \/\/ information on memory references$/;"	m	class:llvm::MachineInstr
NumMicroOps	MC/MCInstrItineraries.h	/^  int      NumMicroOps;        \/\/\/< # of micro-ops, -1 means it's variable$/;"	m	struct:llvm::InstrItinerary
NumMicroOps	MC/MCSchedule.h	/^  unsigned short NumMicroOps;$/;"	m	struct:llvm::MCSchedClassDesc
NumModuleTableEntries	Object/MachOFormat.h	/^    uint32_t NumModuleTableEntries;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
NumNodes	ADT/FoldingSet.h	/^  unsigned NumNodes;$/;"	m	class:llvm::FoldingSetImpl
NumNodesSolelyBlocking	CodeGen/LatencyPriorityQueue.h	/^    std::vector<unsigned> NumNodesSolelyBlocking;$/;"	m	class:llvm::LatencyPriorityQueue
NumNodesSolelyBlocking	CodeGen/ResourcePriorityQueue.h	/^    std::vector<unsigned> NumNodesSolelyBlocking;$/;"	m	class:llvm::ResourcePriorityQueue
NumOccurrences	Support/CommandLine.h	/^  int NumOccurrences;     \/\/ The number of times specified$/;"	m	class:llvm::cl::Option
NumOccurrencesFlag	Support/CommandLine.h	/^enum NumOccurrencesFlag {      \/\/ Flags for the number of occurrences allowed$/;"	g	namespace:llvm::cl
NumOpcodes	MC/MCInstrInfo.h	/^  unsigned NumOpcodes;              \/\/ Number of entries in the desc array$/;"	m	class:llvm::MCInstrInfo
NumOperands	Analysis/ScalarEvolutionExpressions.h	/^    size_t NumOperands;$/;"	m	class:llvm::SCEVNAryExpr
NumOperands	CodeGen/SelectionDAGNodes.h	/^  unsigned short NumOperands, NumValues;$/;"	m	class:llvm::SDNode
NumOperands	MC/MCInstrDesc.h	/^  unsigned short  NumOperands;   \/\/ Num of args (may be more if variable_ops)$/;"	m	class:llvm::MCInstrDesc
NumOperands	Metadata.h	/^  unsigned NumOperands;$/;"	m	class:llvm::MDNode
NumOperands	User.h	/^  unsigned NumOperands;$/;"	m	class:llvm::User
NumPhysRegs	CodeGen/RegisterScavenging.h	/^  unsigned NumPhysRegs;$/;"	m	class:llvm::RegScavenger
NumPreds	CodeGen/ScheduleDAG.h	/^    unsigned NumPreds;                  \/\/ # of SDep::Data preds.$/;"	m	class:llvm::SUnit
NumPreds	Transforms/Utils/SSAUpdaterImpl.h	/^    unsigned NumPreds; \/\/ Number of predecessor blocks.$/;"	m	class:llvm::SSAUpdaterImpl::BBInfo
NumPredsLeft	CodeGen/ScheduleDAG.h	/^    unsigned NumPredsLeft;              \/\/ # of preds not scheduled.$/;"	m	class:llvm::SUnit
NumProcResourceKinds	MC/MCSchedule.h	/^  unsigned NumProcResourceKinds;$/;"	m	class:llvm::MCSchedModel
NumProcs	MC/MCSubtargetInfo.h	/^  unsigned NumProcs;                   \/\/ Number of processors$/;"	m	class:llvm::MCSubtargetInfo
NumReadAdvanceEntries	MC/MCSchedule.h	/^  unsigned NumReadAdvanceEntries;$/;"	m	struct:llvm::MCSchedClassDesc
NumReferencedSymbolTableEntries	Object/MachOFormat.h	/^    uint32_t NumReferencedSymbolTableEntries;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
NumReferences	Analysis/CallGraph.h	/^  unsigned NumReferences;$/;"	m	class:llvm::CallGraphNode
NumRegDefsLeft	CodeGen/ScheduleDAG.h	/^    unsigned short NumRegDefsLeft;      \/\/ # of reg defs with no scheduled use.$/;"	m	class:llvm::SUnit
NumRegUnits	MC/MCRegisterInfo.h	/^  unsigned NumRegUnits;                       \/\/ Number of regunits.$/;"	m	class:llvm::MCRegisterInfo
NumRegistersForVT	Target/TargetLowering.h	/^  unsigned char NumRegistersForVT[MVT::LAST_VALUETYPE];$/;"	m	class:llvm::TargetLowering
NumRegs	CodeGen/RegisterClassInfo.h	/^    unsigned NumRegs;$/;"	m	struct:llvm::RegisterClassInfo::RCInfo
NumRegs	MC/MCRegisterInfo.h	/^  unsigned NumRegs;                           \/\/ Number of entries in the array$/;"	m	class:llvm::MCRegisterInfo
NumRelocationTableEntries	Object/MachOFormat.h	/^    uint32_t NumRelocationTableEntries;$/;"	m	struct:llvm::object::macho::Section
NumRelocationTableEntries	Object/MachOFormat.h	/^    uint32_t NumRelocationTableEntries;$/;"	m	struct:llvm::object::macho::Section64
NumRets	Analysis/CodeMetrics.h	/^    unsigned NumRets;$/;"	m	struct:llvm::CodeMetrics
NumSchedClasses	MC/MCSchedule.h	/^  unsigned NumSchedClasses;$/;"	m	class:llvm::MCSchedModel
NumSections	Object/MachOFormat.h	/^    uint32_t NumSections;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
NumSections	Object/MachOFormat.h	/^    uint32_t NumSections;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
NumSignBits	CodeGen/FunctionLoweringInfo.h	/^    unsigned NumSignBits : 31;$/;"	m	struct:llvm::FunctionLoweringInfo::LiveOutInfo
NumSubRegIndices	MC/MCRegisterInfo.h	/^  unsigned NumSubRegIndices;                  \/\/ Number of subreg indices.$/;"	m	class:llvm::MCRegisterInfo
NumSuccs	CodeGen/ScheduleDAG.h	/^    unsigned NumSuccs;                  \/\/ # of SDep::Data sucss.$/;"	m	class:llvm::SUnit
NumSuccsLeft	CodeGen/ScheduleDAG.h	/^    unsigned NumSuccsLeft;              \/\/ # of succs not scheduled.$/;"	m	class:llvm::SUnit
NumSymbolTableEntries	Object/MachOFormat.h	/^    uint32_t NumSymbolTableEntries;$/;"	m	struct:llvm::object::macho::SymtabLoadCommand
NumTOCEntries	Object/MachOFormat.h	/^    uint32_t NumTOCEntries;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
NumTombstones	ADT/DenseMap.h	/^  unsigned NumTombstones;$/;"	m	class:llvm::DenseMap
NumTombstones	ADT/DenseMap.h	/^  unsigned NumTombstones;$/;"	m	class:llvm::SmallDenseMap
NumTombstones	ADT/SmallPtrSet.h	/^  unsigned NumTombstones;$/;"	m	class:llvm::SmallPtrSetImpl
NumTombstones	ADT/StringMap.h	/^  unsigned NumTombstones;$/;"	m	class:llvm::StringMapImpl
NumTypeIDs	Type.h	/^    NumTypeIDs,                         \/\/ Must remain as last defined ID$/;"	e	enum:llvm::Type::TypeID
NumUndefinedSymbols	Object/MachOFormat.h	/^    uint32_t NumUndefinedSymbols;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
NumUnits	MC/MCSchedule.h	/^  unsigned NumUnits; \/\/ Number of resource of this kind$/;"	m	struct:llvm::MCProcResourceDesc
NumVTs	CodeGen/SelectionDAGNodes.h	/^  unsigned int NumVTs;$/;"	m	struct:llvm::SDVTList
NumValues	CodeGen/SelectionDAGNodes.h	/^  unsigned short NumOperands, NumValues;$/;"	m	class:llvm::SDNode
NumVectorInsts	Analysis/CodeMetrics.h	/^    unsigned NumVectorInsts;$/;"	m	struct:llvm::CodeMetrics
NumWriteLatencyEntries	MC/MCSchedule.h	/^  unsigned NumWriteLatencyEntries;$/;"	m	struct:llvm::MCSchedClassDesc
NumWriteProcResEntries	MC/MCSchedule.h	/^  unsigned NumWriteProcResEntries;$/;"	m	struct:llvm::MCSchedClassDesc
Number	CodeGen/MachineBasicBlock.h	/^  int Number;$/;"	m	class:llvm::MachineBasicBlock
Number	Object/COFF.h	/^  support::ulittle16_t Number;$/;"	m	struct:llvm::object::coff_aux_section_definition
Number	Support/COFF.h	/^    uint16_t Number;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
Number	Support/GCOV.h	/^  uint32_t Number;$/;"	m	class:llvm::GCOVBlock
NumberOfAuxSymbols	Object/COFF.h	/^  support::ulittle8_t  NumberOfAuxSymbols;$/;"	m	struct:llvm::object::coff_symbol
NumberOfAuxSymbols	Support/COFF.h	/^    uint8_t  NumberOfAuxSymbols;$/;"	m	struct:llvm::COFF::symbol
NumberOfLineNumbers	Support/COFF.h	/^    uint16_t NumberOfLineNumbers;$/;"	m	struct:llvm::COFF::section
NumberOfLinenumbers	Object/COFF.h	/^  support::ulittle16_t NumberOfLinenumbers;$/;"	m	struct:llvm::object::coff_aux_section_definition
NumberOfLinenumbers	Object/COFF.h	/^  support::ulittle16_t NumberOfLinenumbers;$/;"	m	struct:llvm::object::coff_section
NumberOfLinenumbers	Support/COFF.h	/^    uint16_t NumberOfLinenumbers;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
NumberOfRelocationItems	Support/COFF.h	/^    uint16_t NumberOfRelocationItems;$/;"	m	struct:llvm::COFF::DOSHeader
NumberOfRelocations	Object/COFF.h	/^  support::ulittle16_t NumberOfRelocations;$/;"	m	struct:llvm::object::coff_aux_section_definition
NumberOfRelocations	Object/COFF.h	/^  support::ulittle16_t NumberOfRelocations;$/;"	m	struct:llvm::object::coff_section
NumberOfRelocations	Support/COFF.h	/^    uint16_t NumberOfRelocations;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
NumberOfRelocations	Support/COFF.h	/^    uint16_t NumberOfRelocations;$/;"	m	struct:llvm::COFF::section
NumberOfRvaAndSize	Support/COFF.h	/^    uint32_t NumberOfRvaAndSize;$/;"	m	struct:llvm::COFF::PEHeader
NumberOfSections	Object/COFF.h	/^  support::ulittle16_t NumberOfSections;$/;"	m	struct:llvm::object::coff_file_header
NumberOfSections	Support/COFF.h	/^    uint16_t NumberOfSections;$/;"	m	struct:llvm::COFF::header
NumberOfSymbols	Object/COFF.h	/^  support::ulittle32_t NumberOfSymbols;$/;"	m	struct:llvm::object::coff_file_header
NumberOfSymbols	Support/COFF.h	/^    uint32_t NumberOfSymbols;$/;"	m	struct:llvm::COFF::header
NumeredTypesMapTy	Module.h	/^                   NumeredTypesMapTy;$/;"	t	class:llvm::Module
O	Support/GraphWriter.h	/^  raw_ostream &O;$/;"	m	class:llvm::GraphWriter
OBO_NO_SIGNED_WRAP	Bitcode/LLVMBitCodes.h	/^    OBO_NO_SIGNED_WRAP = 1$/;"	e	enum:llvm::bitc::OverflowingBinaryOperatorOptionalFlags
OBO_NO_UNSIGNED_WRAP	Bitcode/LLVMBitCodes.h	/^    OBO_NO_UNSIGNED_WRAP = 0,$/;"	e	enum:llvm::bitc::OverflowingBinaryOperatorOptionalFlags
OEMid	Support/COFF.h	/^    uint16_t OEMid;$/;"	m	struct:llvm::COFF::DOSHeader
OEMinfo	Support/COFF.h	/^    uint16_t OEMinfo;$/;"	m	struct:llvm::COFF::DOSHeader
OEQ_F32	CodeGen/RuntimeLibcalls.h	/^    OEQ_F32,$/;"	e	enum:llvm::RTLIB::Libcall
OEQ_F64	CodeGen/RuntimeLibcalls.h	/^    OEQ_F64,$/;"	e	enum:llvm::RTLIB::Libcall
OGE_F32	CodeGen/RuntimeLibcalls.h	/^    OGE_F32,$/;"	e	enum:llvm::RTLIB::Libcall
OGE_F64	CodeGen/RuntimeLibcalls.h	/^    OGE_F64,$/;"	e	enum:llvm::RTLIB::Libcall
OGT_F32	CodeGen/RuntimeLibcalls.h	/^    OGT_F32,$/;"	e	enum:llvm::RTLIB::Libcall
OGT_F64	CodeGen/RuntimeLibcalls.h	/^    OGT_F64,$/;"	e	enum:llvm::RTLIB::Libcall
OI	User.h	/^    op_iterator OI;$/;"	m	class:llvm::User::value_op_iterator
OLE_F32	CodeGen/RuntimeLibcalls.h	/^    OLE_F32,$/;"	e	enum:llvm::RTLIB::Libcall
OLE_F64	CodeGen/RuntimeLibcalls.h	/^    OLE_F64,$/;"	e	enum:llvm::RTLIB::Libcall
OLT_F32	CodeGen/RuntimeLibcalls.h	/^    OLT_F32,$/;"	e	enum:llvm::RTLIB::Libcall
OLT_F64	CodeGen/RuntimeLibcalls.h	/^    OLT_F64,$/;"	e	enum:llvm::RTLIB::Libcall
ON_BASICBLOCK_MSG	PassManagers.h	/^  ON_BASICBLOCK_MSG, \/\/ "'  on BasicBlock '" + PassName + "'...\\n"$/;"	e	enum:llvm::PassDebuggingString
ON_CG_MSG	PassManagers.h	/^  ON_CG_MSG \/\/ "' on Call Graph ...\\n'"$/;"	e	enum:llvm::PassDebuggingString
ON_FUNCTION_MSG	PassManagers.h	/^  ON_FUNCTION_MSG, \/\/ "' on Function '" + FunctionName + "'...\\n"$/;"	e	enum:llvm::PassDebuggingString
ON_LOOP_MSG	PassManagers.h	/^  ON_LOOP_MSG, \/\/ " 'on Loop ...\\n'"$/;"	e	enum:llvm::PassDebuggingString
ON_MODULE_MSG	PassManagers.h	/^  ON_MODULE_MSG, \/\/ "' on Module '" + ModuleName + "'...\\n"$/;"	e	enum:llvm::PassDebuggingString
ON_REGION_MSG	PassManagers.h	/^  ON_REGION_MSG, \/\/ " 'on Region ...\\n'"$/;"	e	enum:llvm::PassDebuggingString
OPC_CaptureGlueInput	CodeGen/SelectionDAGISel.h	/^    OPC_CaptureGlueInput,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckAndImm	CodeGen/SelectionDAGISel.h	/^    OPC_CheckAndImm, OPC_CheckOrImm,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckChild0Type	CodeGen/SelectionDAGISel.h	/^    OPC_CheckChild0Type, OPC_CheckChild1Type, OPC_CheckChild2Type,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckChild1Type	CodeGen/SelectionDAGISel.h	/^    OPC_CheckChild0Type, OPC_CheckChild1Type, OPC_CheckChild2Type,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckChild2Type	CodeGen/SelectionDAGISel.h	/^    OPC_CheckChild0Type, OPC_CheckChild1Type, OPC_CheckChild2Type,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckChild3Type	CodeGen/SelectionDAGISel.h	/^    OPC_CheckChild3Type, OPC_CheckChild4Type, OPC_CheckChild5Type,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckChild4Type	CodeGen/SelectionDAGISel.h	/^    OPC_CheckChild3Type, OPC_CheckChild4Type, OPC_CheckChild5Type,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckChild5Type	CodeGen/SelectionDAGISel.h	/^    OPC_CheckChild3Type, OPC_CheckChild4Type, OPC_CheckChild5Type,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckChild6Type	CodeGen/SelectionDAGISel.h	/^    OPC_CheckChild6Type, OPC_CheckChild7Type,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckChild7Type	CodeGen/SelectionDAGISel.h	/^    OPC_CheckChild6Type, OPC_CheckChild7Type,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckComplexPat	CodeGen/SelectionDAGISel.h	/^    OPC_CheckComplexPat,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckCondCode	CodeGen/SelectionDAGISel.h	/^    OPC_CheckCondCode,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckField	MC/MCFixedLenDisassembler.h	/^  OPC_CheckField,       \/\/ OPC_CheckField(uint8_t Start, uint8_t Len,$/;"	e	enum:llvm::MCD::DecoderOps
OPC_CheckFoldableChainNode	CodeGen/SelectionDAGISel.h	/^    OPC_CheckFoldableChainNode,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckInteger	CodeGen/SelectionDAGISel.h	/^    OPC_CheckInteger,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckOpcode	CodeGen/SelectionDAGISel.h	/^    OPC_CheckOpcode,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckOrImm	CodeGen/SelectionDAGISel.h	/^    OPC_CheckAndImm, OPC_CheckOrImm,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckPatternPredicate	CodeGen/SelectionDAGISel.h	/^    OPC_CheckPatternPredicate,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckPredicate	CodeGen/SelectionDAGISel.h	/^    OPC_CheckPredicate,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckPredicate	MC/MCFixedLenDisassembler.h	/^  OPC_CheckPredicate,   \/\/ OPC_CheckPredicate(uleb128 PIdx, uint16_t NumToSkip)$/;"	e	enum:llvm::MCD::DecoderOps
OPC_CheckSame	CodeGen/SelectionDAGISel.h	/^    OPC_CheckSame,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckType	CodeGen/SelectionDAGISel.h	/^    OPC_CheckType,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CheckValueType	CodeGen/SelectionDAGISel.h	/^    OPC_CheckValueType,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_CompleteMatch	CodeGen/SelectionDAGISel.h	/^    OPC_CompleteMatch$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_Decode	MC/MCFixedLenDisassembler.h	/^  OPC_Decode,           \/\/ OPC_Decode(uleb128 Opcode, uleb128 DIdx)$/;"	e	enum:llvm::MCD::DecoderOps
OPC_EmitConvertToTarget	CodeGen/SelectionDAGISel.h	/^    OPC_EmitConvertToTarget,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_EmitCopyToReg	CodeGen/SelectionDAGISel.h	/^    OPC_EmitCopyToReg,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_EmitInteger	CodeGen/SelectionDAGISel.h	/^    OPC_EmitInteger,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_EmitMergeInputChains	CodeGen/SelectionDAGISel.h	/^    OPC_EmitMergeInputChains,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_EmitMergeInputChains1_0	CodeGen/SelectionDAGISel.h	/^    OPC_EmitMergeInputChains1_0,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_EmitMergeInputChains1_1	CodeGen/SelectionDAGISel.h	/^    OPC_EmitMergeInputChains1_1,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_EmitNode	CodeGen/SelectionDAGISel.h	/^    OPC_EmitNode,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_EmitNodeXForm	CodeGen/SelectionDAGISel.h	/^    OPC_EmitNodeXForm,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_EmitRegister	CodeGen/SelectionDAGISel.h	/^    OPC_EmitRegister,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_EmitRegister2	CodeGen/SelectionDAGISel.h	/^    OPC_EmitRegister2,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_ExtractField	MC/MCFixedLenDisassembler.h	/^  OPC_ExtractField = 1, \/\/ OPC_ExtractField(uint8_t Start, uint8_t Len)$/;"	e	enum:llvm::MCD::DecoderOps
OPC_Fail	MC/MCFixedLenDisassembler.h	/^  OPC_Fail              \/\/ OPC_Fail()$/;"	e	enum:llvm::MCD::DecoderOps
OPC_FilterValue	MC/MCFixedLenDisassembler.h	/^  OPC_FilterValue,      \/\/ OPC_FilterValue(uleb128 Val, uint16_t NumToSkip)$/;"	e	enum:llvm::MCD::DecoderOps
OPC_MarkGlueResults	CodeGen/SelectionDAGISel.h	/^    OPC_MarkGlueResults,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_MorphNodeTo	CodeGen/SelectionDAGISel.h	/^    OPC_MorphNodeTo,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_MoveChild	CodeGen/SelectionDAGISel.h	/^    OPC_MoveChild,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_MoveParent	CodeGen/SelectionDAGISel.h	/^    OPC_MoveParent,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordChild0	CodeGen/SelectionDAGISel.h	/^    OPC_RecordChild0, OPC_RecordChild1, OPC_RecordChild2, OPC_RecordChild3,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordChild1	CodeGen/SelectionDAGISel.h	/^    OPC_RecordChild0, OPC_RecordChild1, OPC_RecordChild2, OPC_RecordChild3,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordChild2	CodeGen/SelectionDAGISel.h	/^    OPC_RecordChild0, OPC_RecordChild1, OPC_RecordChild2, OPC_RecordChild3,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordChild3	CodeGen/SelectionDAGISel.h	/^    OPC_RecordChild0, OPC_RecordChild1, OPC_RecordChild2, OPC_RecordChild3,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordChild4	CodeGen/SelectionDAGISel.h	/^    OPC_RecordChild4, OPC_RecordChild5, OPC_RecordChild6, OPC_RecordChild7,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordChild5	CodeGen/SelectionDAGISel.h	/^    OPC_RecordChild4, OPC_RecordChild5, OPC_RecordChild6, OPC_RecordChild7,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordChild6	CodeGen/SelectionDAGISel.h	/^    OPC_RecordChild4, OPC_RecordChild5, OPC_RecordChild6, OPC_RecordChild7,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordChild7	CodeGen/SelectionDAGISel.h	/^    OPC_RecordChild4, OPC_RecordChild5, OPC_RecordChild6, OPC_RecordChild7,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordMemRef	CodeGen/SelectionDAGISel.h	/^    OPC_RecordMemRef,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_RecordNode	CodeGen/SelectionDAGISel.h	/^    OPC_RecordNode,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_Scope	CodeGen/SelectionDAGISel.h	/^    OPC_Scope,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_SoftFail	MC/MCFixedLenDisassembler.h	/^  OPC_SoftFail,         \/\/ OPC_SoftFail(uleb128 PMask, uleb128 NMask)$/;"	e	enum:llvm::MCD::DecoderOps
OPC_SwitchOpcode	CodeGen/SelectionDAGISel.h	/^    OPC_SwitchOpcode,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPC_SwitchType	CodeGen/SelectionDAGISel.h	/^    OPC_SwitchType,$/;"	e	enum:llvm::SelectionDAGISel::BuiltinOpcodes
OPERAND_IMMEDIATE	MC/MCInstrDesc.h	/^    OPERAND_IMMEDIATE,$/;"	e	enum:llvm::MCOI::OperandType
OPERAND_MEMORY	MC/MCInstrDesc.h	/^    OPERAND_MEMORY,$/;"	e	enum:llvm::MCOI::OperandType
OPERAND_PCREL	MC/MCInstrDesc.h	/^    OPERAND_PCREL$/;"	e	enum:llvm::MCOI::OperandType
OPERAND_REGISTER	MC/MCInstrDesc.h	/^    OPERAND_REGISTER,$/;"	e	enum:llvm::MCOI::OperandType
OPERAND_UNKNOWN	MC/MCInstrDesc.h	/^    OPERAND_UNKNOWN,$/;"	e	enum:llvm::MCOI::OperandType
OPFL_Chain	CodeGen/SelectionDAGISel.h	/^    OPFL_Chain      = 1,     \/\/ Node has a chain input.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_GlueInput	CodeGen/SelectionDAGISel.h	/^    OPFL_GlueInput  = 2,     \/\/ Node has a glue input.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_GlueOutput	CodeGen/SelectionDAGISel.h	/^    OPFL_GlueOutput = 4,     \/\/ Node has a glue output.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_MemRefs	CodeGen/SelectionDAGISel.h	/^    OPFL_MemRefs    = 8,     \/\/ Node gets accumulated MemRefs.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_None	CodeGen/SelectionDAGISel.h	/^    OPFL_None       = 0,  \/\/ Node has no chain or glue input and isn't variadic.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_Variadic0	CodeGen/SelectionDAGISel.h	/^    OPFL_Variadic0  = 1<<4,  \/\/ Node is variadic, root has 0 fixed inputs.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_Variadic1	CodeGen/SelectionDAGISel.h	/^    OPFL_Variadic1  = 2<<4,  \/\/ Node is variadic, root has 1 fixed inputs.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_Variadic2	CodeGen/SelectionDAGISel.h	/^    OPFL_Variadic2  = 3<<4,  \/\/ Node is variadic, root has 2 fixed inputs.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_Variadic3	CodeGen/SelectionDAGISel.h	/^    OPFL_Variadic3  = 4<<4,  \/\/ Node is variadic, root has 3 fixed inputs.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_Variadic4	CodeGen/SelectionDAGISel.h	/^    OPFL_Variadic4  = 5<<4,  \/\/ Node is variadic, root has 4 fixed inputs.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_Variadic5	CodeGen/SelectionDAGISel.h	/^    OPFL_Variadic5  = 6<<4,  \/\/ Node is variadic, root has 5 fixed inputs.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_Variadic6	CodeGen/SelectionDAGISel.h	/^    OPFL_Variadic6  = 7<<4,  \/\/ Node is variadic, root has 6 fixed inputs.$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPFL_VariadicInfo	CodeGen/SelectionDAGISel.h	/^    OPFL_VariadicInfo = OPFL_Variadic6$/;"	e	enum:llvm::SelectionDAGISel::__anon43
OPROFILE_WRAPPER_H	ExecutionEngine/OProfileWrapper.h	21;"	d
OProfileWrapper	ExecutionEngine/OProfileWrapper.h	/^  OProfileWrapper(op_open_agent_ptr_t OpenAgentImpl,$/;"	f	class:llvm::OProfileWrapper
OProfileWrapper	ExecutionEngine/OProfileWrapper.h	/^class OProfileWrapper {$/;"	c	namespace:llvm
OR	CodeGen/ISDOpcodes.h	/^    AND, OR, XOR,$/;"	e	enum:llvm::ISD::NodeType
ORDERING_ACQREL	Bitcode/LLVMBitCodes.h	/^    ORDERING_ACQREL = 5,$/;"	e	enum:llvm::bitc::AtomicOrderingCodes
ORDERING_ACQUIRE	Bitcode/LLVMBitCodes.h	/^    ORDERING_ACQUIRE = 3,$/;"	e	enum:llvm::bitc::AtomicOrderingCodes
ORDERING_MONOTONIC	Bitcode/LLVMBitCodes.h	/^    ORDERING_MONOTONIC = 2,$/;"	e	enum:llvm::bitc::AtomicOrderingCodes
ORDERING_NOTATOMIC	Bitcode/LLVMBitCodes.h	/^    ORDERING_NOTATOMIC = 0,$/;"	e	enum:llvm::bitc::AtomicOrderingCodes
ORDERING_RELEASE	Bitcode/LLVMBitCodes.h	/^    ORDERING_RELEASE = 4,$/;"	e	enum:llvm::bitc::AtomicOrderingCodes
ORDERING_SEQCST	Bitcode/LLVMBitCodes.h	/^    ORDERING_SEQCST = 6$/;"	e	enum:llvm::bitc::AtomicOrderingCodes
ORDERING_UNORDERED	Bitcode/LLVMBitCodes.h	/^    ORDERING_UNORDERED = 1,$/;"	e	enum:llvm::bitc::AtomicOrderingCodes
OS	ADT/Triple.h	/^  OSType OS;$/;"	m	class:llvm::Triple
OS	ExecutionEngine/ObjectBuffer.h	/^  raw_svector_ostream     OS; \/\/ streaming wrapper$/;"	m	class:llvm::ObjectBufferStream
OS	MC/MCAssembler.h	/^  raw_ostream &OS;$/;"	m	class:llvm::MCAssembler
OS	MC/MCObjectWriter.h	/^  raw_ostream &OS;$/;"	m	class:llvm::MCObjectWriter
OS	Support/ToolOutputFile.h	/^  raw_fd_ostream OS;$/;"	m	class:llvm::tool_output_file
OS	Support/raw_os_ostream.h	/^  std::ostream &OS;$/;"	m	class:llvm::raw_os_ostream
OS	Support/raw_ostream.h	/^  SmallVectorImpl<char> &OS;$/;"	m	class:llvm::raw_svector_ostream
OS	Support/raw_ostream.h	/^  std::string &OS;$/;"	m	class:llvm::raw_string_ostream
OS	TableGen/StringMatcher.h	/^  raw_ostream &OS;$/;"	m	class:llvm::StringMatcher
OSABI	MC/MCELFObjectWriter.h	/^  const uint8_t OSABI;$/;"	m	class:llvm::MCELFObjectTargetWriter
OSType	ADT/Triple.h	/^  enum OSType {$/;"	g	class:llvm::Triple
O_F32	CodeGen/RuntimeLibcalls.h	/^    O_F32,$/;"	e	enum:llvm::RTLIB::Libcall
O_F64	CodeGen/RuntimeLibcalls.h	/^    O_F64,$/;"	e	enum:llvm::RTLIB::Libcall
Obj	ADT/IntrusiveRefCntPtr.h	/^    T* Obj;$/;"	m	class:llvm::IntrusiveRefCntPtr
ObjFileMMI	CodeGen/MachineModuleInfo.h	/^  MachineModuleInfoImpl *ObjFileMMI;$/;"	m	class:llvm::MachineModuleInfo
ObjectBuffer	ExecutionEngine/ObjectBuffer.h	/^  ObjectBuffer() {}$/;"	f	class:llvm::ObjectBuffer
ObjectBuffer	ExecutionEngine/ObjectBuffer.h	/^  ObjectBuffer(MemoryBuffer* Buf) : Buffer(Buf) {}$/;"	f	class:llvm::ObjectBuffer
ObjectBuffer	ExecutionEngine/ObjectBuffer.h	/^class ObjectBuffer {$/;"	c	namespace:llvm
ObjectBufferStream	ExecutionEngine/ObjectBuffer.h	/^  ObjectBufferStream() : OS(SV) {}$/;"	f	class:llvm::ObjectBufferStream
ObjectBufferStream	ExecutionEngine/ObjectBuffer.h	/^class ObjectBufferStream : public ObjectBuffer {$/;"	c	namespace:llvm
ObjectFile	Object/ObjectFile.h	/^class ObjectFile : public Binary {$/;"	c	namespace:llvm::object
ObjectImage	ExecutionEngine/ObjectImage.h	/^  ObjectImage(ObjectBuffer *Input) : Buffer(Input) {}$/;"	f	class:llvm::ObjectImage
ObjectImage	ExecutionEngine/ObjectImage.h	/^class ObjectImage {$/;"	c	namespace:llvm
ObjectSize	Support/StreamableMemoryObject.h	/^  mutable size_t ObjectSize; \/\/ 0 if unknown, set if wrapper seen or EOF reached$/;"	m	class:llvm::StreamingMemoryObject
ObjectSizeOffsetEvaluator	Analysis/MemoryBuiltins.h	/^class ObjectSizeOffsetEvaluator$/;"	c	namespace:llvm
ObjectSizeOffsetVisitor	Analysis/MemoryBuiltins.h	/^class ObjectSizeOffsetVisitor$/;"	c	namespace:llvm
Objects	CodeGen/MachineFrameInfo.h	/^  std::vector<StackObject> Objects;$/;"	m	class:llvm::MachineFrameInfo
Offset	CodeGen/MachineMemOperand.h	/^  int64_t Offset;$/;"	m	struct:llvm::MachinePointerInfo
Offset	CodeGen/MachineRelocation.h	/^  uintptr_t Offset;$/;"	m	class:llvm::MachineRelocation
Offset	CodeGen/SelectionDAGNodes.h	/^  int Offset;  \/\/ It's a MachineConstantPoolValue if top bit is set.$/;"	m	class:llvm::ConstantPoolSDNode
Offset	CodeGen/SelectionDAGNodes.h	/^  int64_t Offset;$/;"	m	class:llvm::BlockAddressSDNode
Offset	CodeGen/SelectionDAGNodes.h	/^  int64_t Offset;$/;"	m	class:llvm::GlobalAddressSDNode
Offset	CodeGen/SelectionDAGNodes.h	/^  int64_t Offset;$/;"	m	class:llvm::TargetIndexSDNode
Offset	MC/MCAssembler.h	/^  const MCExpr *Offset;$/;"	m	class:llvm::MCOrgFragment
Offset	MC/MCAssembler.h	/^  uint64_t Offset;$/;"	m	class:llvm::MCFragment
Offset	MC/MCAssembler.h	/^  uint64_t Offset;$/;"	m	class:llvm::MCSymbolData
Offset	MC/MCFixup.h	/^  uint32_t Offset;$/;"	m	class:llvm::MCFixup
Offset	MC/MCWin64EH.h	/^    unsigned Offset;$/;"	m	class:llvm::MCWin64EHInstruction
Offset	MC/MachineLocation.h	/^  int Offset;                           \/\/ Displacement if not register.$/;"	m	class:llvm::MachineLocation
Offset	MDBuilder.h	/^      uint64_t Offset;$/;"	m	struct:llvm::MDBuilder::TBAAStructField
Offset	Object/COFF.h	/^    StringTableOffset Offset;$/;"	m	union:llvm::object::coff_symbol::__anon71
Offset	Object/COFF.h	/^    support::ulittle32_t Offset;$/;"	m	struct:llvm::object::coff_symbol::StringTableOffset
Offset	Object/MachOFormat.h	/^    uint32_t Offset;  \/* from mach_header to start of data region *\/$/;"	m	struct:llvm::object::macho::DataInCodeTableEntry
Offset	Object/MachOFormat.h	/^    uint32_t Offset;$/;"	m	struct:llvm::object::macho::Section
Offset	Object/MachOFormat.h	/^    uint32_t Offset;$/;"	m	struct:llvm::object::macho::Section64
Offset	Object/MachOObject.h	/^    uint64_t Offset;$/;"	m	struct:llvm::object::MachOObject::LoadCommandInfo
Offset	Target/TargetFrameLowering.h	/^    int Offset; \/\/ Offset relative to stack pointer on function entry.$/;"	m	struct:llvm::TargetFrameLowering::SpillSlot
OffsetAdjustment	CodeGen/MachineFrameInfo.h	/^  int OffsetAdjustment;$/;"	m	class:llvm::MachineFrameInfo
OffsetHi	CodeGen/MachineOperand.h	/^      int OffsetHi;               \/\/ An offset from the object, high 32 bits.$/;"	m	struct:llvm::MachineOperand::__anon36::__anon38
OffsetLo	CodeGen/MachineOperand.h	/^    unsigned OffsetLo;        \/\/ Matches Contents.OffsetedInfo.OffsetHi.$/;"	m	union:llvm::MachineOperand::__anon35
OffsetMap	MC/MCModule.h	/^  IntervalMap<uint64_t, MCAtom*> OffsetMap;$/;"	m	class:llvm::MCModule
OffsetToAlignment	Support/MathExtras.h	/^inline uint64_t OffsetToAlignment(uint64_t Value, uint64_t Align) {$/;"	f	namespace:llvm
OffsetedInfo	CodeGen/MachineOperand.h	/^    } OffsetedInfo;$/;"	m	union:llvm::MachineOperand::__anon36	typeref:struct:llvm::MachineOperand::__anon36::__anon38
Old	Target/TargetLowering.h	/^    SDValue Old;$/;"	m	struct:llvm::TargetLowering::TargetLoweringOpt
One	Target/TargetCallingConv.h	/^    static const uint64_t One            = 1ULL; \/\/\/< 1 of this type, for shifts$/;"	m	struct:llvm::ISD::ArgFlagsTy
OneOrMore	Support/CommandLine.h	/^  OneOrMore       = 0x03,      \/\/ One or more occurrences required$/;"	e	enum:llvm::cl::NumOccurrencesFlag
OneUse_match	Support/PatternMatch.h	/^  OneUse_match(const SubPattern_t &SP) : SubPattern(SP) {}$/;"	f	struct:llvm::PatternMatch::OneUse_match
OneUse_match	Support/PatternMatch.h	/^struct OneUse_match {$/;"	s	namespace:llvm::PatternMatch
OnlyAccessesArgumentPointees	Analysis/AliasAnalysis.h	/^    OnlyAccessesArgumentPointees = ArgumentPointees | ModRef,$/;"	e	enum:llvm::AliasAnalysis::ModRefBehavior
OnlyNamed	TypeFinder.h	/^  bool OnlyNamed;$/;"	m	class:llvm::TypeFinder
OnlyReadsArgumentPointees	Analysis/AliasAnalysis.h	/^    OnlyReadsArgumentPointees = ArgumentPointees | Ref,$/;"	e	enum:llvm::AliasAnalysis::ModRefBehavior
OnlyReadsMemory	Analysis/AliasAnalysis.h	/^    OnlyReadsMemory = Anywhere | Ref,$/;"	e	enum:llvm::AliasAnalysis::ModRefBehavior
Op	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *Op;$/;"	m	class:llvm::SCEVCastExpr
Op	CodeGen/MachineRegisterInfo.h	/^    MachineOperand *Op;$/;"	m	class:llvm::MachineRegisterInfo::defusechain_iterator
Op	CodeGen/SelectionDAGNodes.h	/^    SDUse *Op;$/;"	m	class:llvm::SDNode::use_iterator
Op	CodeGen/SelectionDAGNodes.h	/^  SDUse Op;$/;"	m	class:llvm::HandleSDNode
Op	CodeGen/SelectionDAGNodes.h	/^  SDUse Op;$/;"	m	class:llvm::UnarySDNode
Op	MC/MCExpr.h	/^  Opcode Op;$/;"	m	class:llvm::MCBinaryExpr
Op	MC/MCExpr.h	/^  Opcode Op;$/;"	m	class:llvm::MCUnaryExpr
Op	Support/PatternMatch.h	/^  Op_t Op;$/;"	m	struct:llvm::PatternMatch::CastClass_match
Op	User.h	/^  template <int Idx> Use &Op() {$/;"	f	class:llvm::User
Op	User.h	/^  template <int Idx> const Use &Op() const {$/;"	f	class:llvm::User
OpActions	Target/TargetLowering.h	/^  uint8_t OpActions[MVT::LAST_VALUETYPE][ISD::BUILTIN_OP_END];$/;"	m	class:llvm::TargetLowering
OpDeref	DIBuilder.h	/^    enum ComplexAddrKind { OpPlus=1, OpDeref };$/;"	e	enum:llvm::DIBuilder::ComplexAddrKind
OpE	CodeGen/MachineInstrBundle.h	/^  MachineInstr::mop_iterator OpI, OpE;$/;"	m	class:llvm::MachineOperandIteratorBase
OpFrom	User.h	/^  template <int Idx, typename U> static Use &OpFrom(const U *that) {$/;"	f	class:llvm::User
OpI	CodeGen/MachineInstrBundle.h	/^  MachineInstr::mop_iterator OpI, OpE;$/;"	m	class:llvm::MachineOperandIteratorBase
OpIdx	Analysis/ConstantsScanner.h	/^  unsigned OpIdx;                           \/\/ Operand index$/;"	m	class:llvm::constant_iterator
OpIdx	CodeGen/ScheduleDAGInstrs.h	/^    int OpIdx;$/;"	m	struct:llvm::PhysRegSUOper
OpInfo	MC/MCInstrDesc.h	/^  const MCOperandInfo *OpInfo;   \/\/ 'NumOperands' entries about operands$/;"	m	class:llvm::MCInstrDesc
OpInit	TableGen/Record.h	/^  explicit OpInit(InitKind K, RecTy *Type) : TypedInit(K, Type) {}$/;"	f	class:llvm::OpInit
OpInit	TableGen/Record.h	/^class OpInit : public TypedInit {$/;"	c	namespace:llvm
OpIt	Support/GetElementPtrTypeIterator.h	/^    ItTy OpIt;$/;"	m	class:llvm::generic_gep_type_iterator
OpKind	CodeGen/MachineOperand.h	/^  unsigned char OpKind; \/\/ MachineOperandType$/;"	m	class:llvm::MachineOperand
OpPlus	DIBuilder.h	/^    enum ComplexAddrKind { OpPlus=1, OpDeref };$/;"	e	enum:llvm::DIBuilder::ComplexAddrKind
OpType	MC/MCDwarf.h	/^    enum OpType { SameValue, RememberState, RestoreState, Move, RelMove, Escape,$/;"	g	class:llvm::MCCFIInstruction
OpType	MC/MCWin64EH.h	/^    typedef Win64EH::UnwindOpcodes OpType;$/;"	t	class:llvm::MCWin64EHInstruction
Op_AsmString	InlineAsm.h	/^    Op_AsmString = 1,$/;"	e	enum:llvm::InlineAsm::__anon57
Op_ExtraInfo	InlineAsm.h	/^    Op_ExtraInfo = 3,    \/\/ HasSideEffects, IsAlignStack, AsmDialect.$/;"	e	enum:llvm::InlineAsm::__anon57
Op_FirstOperand	InlineAsm.h	/^    Op_FirstOperand = 4,$/;"	e	enum:llvm::InlineAsm::__anon57
Op_InputChain	InlineAsm.h	/^    Op_InputChain = 0,$/;"	e	enum:llvm::InlineAsm::__anon57
Op_MDNode	InlineAsm.h	/^    Op_MDNode = 2,$/;"	e	enum:llvm::InlineAsm::__anon57
Opc	TableGen/Record.h	/^  BinaryOp Opc;$/;"	m	class:llvm::BinOpInit
Opc	TableGen/Record.h	/^  TernaryOp Opc;$/;"	m	class:llvm::TernOpInit
Opc	TableGen/Record.h	/^  UnaryOp Opc;$/;"	m	class:llvm::UnOpInit
Opcode	MC/MCExpr.h	/^  enum Opcode {$/;"	g	class:llvm::MCBinaryExpr
Opcode	MC/MCExpr.h	/^  enum Opcode {$/;"	g	class:llvm::MCUnaryExpr
Opcode	MC/MCInst.h	/^  unsigned Opcode;$/;"	m	class:llvm::MCInst
Opcode	MC/MCInstrDesc.h	/^  unsigned short  Opcode;        \/\/ The opcode number$/;"	m	class:llvm::MCInstrDesc
OpcodeOffset	CodeGen/SelectionDAGISel.h	/^  std::vector<unsigned> OpcodeOffset;$/;"	m	class:llvm::SelectionDAGISel
OpenAgentFunc	ExecutionEngine/OProfileWrapper.h	/^  op_open_agent_ptr_t             OpenAgentFunc;$/;"	m	class:llvm::OProfileWrapper
OpenBSD	ADT/Triple.h	/^    OpenBSD,$/;"	e	enum:llvm::Triple::OSType
OpenPt	Support/IntegersSubsetMapping.h	/^    IntTy OpenPt;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Operand	CodeGen/ScheduleDAG.h	/^    unsigned Operand;$/;"	m	class:llvm::SUnitIterator
Operand	CodeGen/SelectionDAGNodes.h	/^  unsigned Operand;$/;"	m	class:llvm::SDNodeIterator
OperandAllocator	CodeGen/SelectionDAG.h	/^  BumpPtrAllocator OperandAllocator;$/;"	m	class:llvm::SelectionDAG
OperandConstraint	MC/MCInstrDesc.h	/^  enum OperandConstraint {$/;"	g	namespace:llvm::MCOI
OperandCycles	MC/MCInstrItineraries.h	/^  const unsigned       *OperandCycles;  \/\/\/< Array of operand cycles selected$/;"	m	class:llvm::InstrItineraryData
OperandCycles	MC/MCSubtargetInfo.h	/^  const unsigned *OperandCycles;       \/\/ Itinerary operand cycles$/;"	m	class:llvm::MCSubtargetInfo
OperandFlags	MC/MCInstrDesc.h	/^  enum OperandFlags {$/;"	g	namespace:llvm::MCOI
OperandList	Bitcode/BitCodes.h	/^  SmallVector<BitCodeAbbrevOp, 32> OperandList;$/;"	m	class:llvm::BitCodeAbbrev
OperandList	CodeGen/SelectionDAGNodes.h	/^  SDUse *OperandList;$/;"	m	class:llvm::SDNode
OperandList	User.h	/^  Use *OperandList;$/;"	m	class:llvm::User
OperandTraits	Constants.h	/^struct OperandTraits<BlockAddress> :$/;"	s	namespace:llvm
OperandTraits	Constants.h	/^struct OperandTraits<ConstantArray> :$/;"	s	namespace:llvm
OperandTraits	Constants.h	/^struct OperandTraits<ConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	Constants.h	/^struct OperandTraits<ConstantStruct> :$/;"	s	namespace:llvm
OperandTraits	Constants.h	/^struct OperandTraits<ConstantVector> :$/;"	s	namespace:llvm
OperandTraits	GlobalAlias.h	/^struct OperandTraits<GlobalAlias> :$/;"	s	namespace:llvm
OperandTraits	GlobalVariable.h	/^struct OperandTraits<GlobalVariable> :$/;"	s	namespace:llvm
OperandTraits	InstrTypes.h	/^struct OperandTraits<BinaryOperator> :$/;"	s	namespace:llvm
OperandTraits	InstrTypes.h	/^struct OperandTraits<CmpInst> : public FixedNumOperandTraits<CmpInst, 2> {$/;"	s	namespace:llvm
OperandTraits	InstrTypes.h	/^struct OperandTraits<UnaryInstruction> :$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<AtomicCmpXchgInst> :$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<AtomicRMWInst>$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<BranchInst> : public VariadicOperandTraits<BranchInst, 1> {$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<CallInst> : public VariadicOperandTraits<CallInst, 1> {$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<ExtractElementInst> :$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<GetElementPtrInst> :$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<IndirectBrInst> : public HungoffOperandTraits<1> {$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<InsertElementInst> :$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<InsertValueInst> :$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<InvokeInst> : public VariadicOperandTraits<InvokeInst, 3> {$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<LandingPadInst> : public HungoffOperandTraits<2> {$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<PHINode> : public HungoffOperandTraits<2> {$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<ResumeInst> :$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<ReturnInst> : public VariadicOperandTraits<ReturnInst> {$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<SelectInst> : public FixedNumOperandTraits<SelectInst, 3> {$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<ShuffleVectorInst> :$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<StoreInst> : public FixedNumOperandTraits<StoreInst, 2> {$/;"	s	namespace:llvm
OperandTraits	Instructions.h	/^struct OperandTraits<SwitchInst> : public HungoffOperandTraits<2> {$/;"	s	namespace:llvm
OperandType	MC/MCInstrDesc.h	/^  enum OperandType {$/;"	g	namespace:llvm::MCOI
OperandType	MC/MCInstrDesc.h	/^  uint8_t OperandType;$/;"	m	class:llvm::MCOperandInfo
OperandValToReplace	Analysis/IVUsers.h	/^  WeakVH OperandValToReplace;$/;"	m	class:llvm::IVStrideUse
Operands	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *const *Operands;$/;"	m	class:llvm::SCEVNAryExpr
Operands	CodeGen/MachineInstr.h	/^  std::vector<MachineOperand> Operands; \/\/ the operands$/;"	m	class:llvm::MachineInstr
Operands	MC/MCInst.h	/^  SmallVector<MCOperand, 8> Operands;$/;"	m	class:llvm::MCInst
Operands	Metadata.h	/^  void *Operands; \/\/ SmallVector<TrackingVH<MDNode>, 4>$/;"	m	class:llvm::NamedMDNode
Operation	MC/MCDwarf.h	/^    OpType Operation;$/;"	m	class:llvm::MCCFIInstruction
Operation	MC/MCWin64EH.h	/^    OpType Operation;$/;"	m	class:llvm::MCWin64EHInstruction
OperationEquivalenceFlags	Instruction.h	/^  enum OperationEquivalenceFlags {$/;"	g	class:llvm::Instruction
Operator	Operator.h	/^class Operator : public User {$/;"	c	namespace:llvm
Ops	CodeGen/SelectionDAGNodes.h	/^  SDUse Ops[2];$/;"	m	class:llvm::BinarySDNode
Ops	CodeGen/SelectionDAGNodes.h	/^  SDUse Ops[2];$/;"	m	class:llvm::ShuffleVectorSDNode
Ops	CodeGen/SelectionDAGNodes.h	/^  SDUse Ops[3];$/;"	m	class:llvm::TernarySDNode
Ops	CodeGen/SelectionDAGNodes.h	/^  SDUse Ops[4];$/;"	m	class:llvm::AtomicSDNode
Ops	CodeGen/SelectionDAGNodes.h	/^  SDUse Ops[4];$/;"	m	class:llvm::LSBaseSDNode
Opt	Support/CommandLine.h	/^  Option &Opt;$/;"	m	struct:llvm::cl::aliasopt
Opt	Support/PassNameParser.h	/^  cl::Option *Opt;$/;"	m	class:llvm::PassNameParser
OptEdgeInfo	Analysis/ProfileDataTypes.h	/^  OptEdgeInfo   = 7    \/* Edge profiling information, optimal version *\/$/;"	e	enum:ProfilingType
OptLevel	CodeGen/SelectionDAG.h	/^  CodeGenOpt::Level OptLevel;$/;"	m	class:llvm::SelectionDAG
OptLevel	CodeGen/SelectionDAGISel.h	/^  CodeGenOpt::Level OptLevel;$/;"	m	class:llvm::SelectionDAGISel
OptLevel	ExecutionEngine/ExecutionEngine.h	/^  CodeGenOpt::Level OptLevel;$/;"	m	class:llvm::EngineBuilder
OptLevel	MC/MCCodeGenInfo.h	/^    CodeGenOpt::Level OptLevel;$/;"	m	class:llvm::MCCodeGenInfo
OptLevel	Transforms/IPO/PassManagerBuilder.h	/^  unsigned OptLevel;$/;"	m	class:llvm::PassManagerBuilder
OptVal	Support/CommandLine.h	/^  typedef OptionValue<DataType> OptVal;$/;"	t	class:llvm::cl::basic_parser
OptimalEdgeCounts	Analysis/ProfileInfoLoader.h	/^  std::vector<unsigned>    OptimalEdgeCounts;$/;"	m	class:llvm::ProfileInfoLoader
OptimalList	CodeGen/PBQP/HeuristicBase.h	/^    typedef std::list<Graph::NodeItr> OptimalList;$/;"	t	class:PBQP::HeuristicBase
OptimizationFlagComponents	DefaultPasses.h	/^  enum OptimizationFlagComponents {$/;"	g	class:llvm::StandardPass
OptimizationFlags	DefaultPasses.h	/^  enum OptimizationFlags {$/;"	g	class:llvm::StandardPass
OptimizationLevel	DefaultPasses.h	/^  static unsigned OptimizationLevel(unsigned flags) {$/;"	f	class:llvm::StandardPass
OptimizationLevelMask	DefaultPasses.h	/^    OptimizationLevelMask=0xf,$/;"	e	enum:llvm::StandardPass::OptimizationFlagComponents
OptimizeForSize	Attributes.h	/^    OptimizeForSize = 17,  \/\/\/< opt_size$/;"	e	enum:llvm::Attributes::AttrVal
OptimizeSize	DefaultPasses.h	/^    OptimizeSize = 1<<0,$/;"	e	enum:llvm::StandardPass::OptimizationFlags
OptimzationFlags	DefaultPasses.h	/^  static unsigned OptimzationFlags(unsigned minLevel=0, unsigned maxLevel=0xf,$/;"	f	class:llvm::StandardPass
Option	Support/CommandLine.h	/^  explicit Option(enum NumOccurrencesFlag OccurrencesFlag,$/;"	f	class:llvm::cl::Option
Option	Support/CommandLine.h	/^class Option {$/;"	c	namespace:llvm::cl
OptionDiffPrinter	Support/CommandLine.h	/^struct OptionDiffPrinter {$/;"	s	namespace:llvm::cl
OptionDiffPrinter	Support/CommandLine.h	/^struct OptionDiffPrinter<DT, DT> {$/;"	s	namespace:llvm::cl
OptionHidden	Support/CommandLine.h	/^enum OptionHidden {            \/\/ Control whether -help shows this option$/;"	g	namespace:llvm::cl
OptionInfo	Support/CommandLine.h	/^    OptionInfo(const char *name, DataType v, const char *helpStr) :$/;"	f	class:llvm::cl::parser::OptionInfo
OptionInfo	Support/CommandLine.h	/^  class OptionInfo : public GenericOptionInfo {$/;"	c	class:llvm::cl::parser
OptionValue	Support/CommandLine.h	/^  OptionValue() {}$/;"	f	struct:llvm::cl::OptionValue
OptionValue	Support/CommandLine.h	/^  OptionValue(const DataType& V) {$/;"	f	struct:llvm::cl::OptionValue
OptionValue	Support/CommandLine.h	/^  OptionValue(const cl::boolOrDefault& V) {$/;"	f	struct:llvm::cl::OptionValue
OptionValue	Support/CommandLine.h	/^  OptionValue(const std::string& V) {$/;"	f	struct:llvm::cl::OptionValue
OptionValue	Support/CommandLine.h	/^struct OptionValue : OptionValueBase<DataType, is_class<DataType>::value> {$/;"	s	namespace:llvm::cl
OptionValue	Support/CommandLine.h	/^struct OptionValue<cl::boolOrDefault> : OptionValueCopy<cl::boolOrDefault> {$/;"	s	namespace:llvm::cl
OptionValue	Support/CommandLine.h	/^struct OptionValue<std::string> : OptionValueCopy<std::string> {$/;"	s	namespace:llvm::cl
OptionValueBase	Support/CommandLine.h	/^struct OptionValueBase : public GenericOptionValue {$/;"	s	namespace:llvm::cl
OptionValueBase	Support/CommandLine.h	/^struct OptionValueBase<DataType, false> : OptionValueCopy<DataType> {$/;"	s	namespace:llvm::cl
OptionValueCopy	Support/CommandLine.h	/^  OptionValueCopy() : Valid(false) {}$/;"	f	class:llvm::cl::OptionValueCopy
OptionValueCopy	Support/CommandLine.h	/^class OptionValueCopy : public GenericOptionValue {$/;"	c	namespace:llvm::cl
Optional	ADT/Optional.h	/^  Optional(T &&y) : x(std::forward<T>(y)), hasVal(true) {}$/;"	f	class:llvm::Optional
Optional	ADT/Optional.h	/^  Optional(const T &y) : x(y), hasVal(true) {}$/;"	f	class:llvm::Optional
Optional	ADT/Optional.h	/^  explicit Optional() : x(), hasVal(false) {}$/;"	f	class:llvm::Optional
Optional	ADT/Optional.h	/^class Optional {$/;"	c	namespace:llvm
Optional	Support/CommandLine.h	/^  Optional        = 0x00,      \/\/ Zero or One occurrence$/;"	e	enum:llvm::cl::NumOccurrencesFlag
OptionalDef	MC/MCInstrDesc.h	/^    OptionalDef$/;"	e	enum:llvm::MCOI::OperandFlags
OptionalOperandTraits	OperandTraits.h	/^struct OptionalOperandTraits : public FixedNumOperandTraits<SubClass, ARITY> {$/;"	s	namespace:llvm
Options	ExecutionEngine/ExecutionEngine.h	/^  TargetOptions Options;$/;"	m	class:llvm::EngineBuilder
Options	Target/TargetMachine.h	/^  TargetOptions Options;$/;"	m	class:llvm::TargetMachine
Or	ADT/APInt.h	/^  APInt Or(const APInt& RHS) const {$/;"	f	class:llvm::APInt
Or	ADT/APInt.h	/^inline APInt Or(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
Or	ADT/APSInt.h	/^  APSInt Or(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
Or	Instructions.h	/^    Or,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
Or	MC/MCExpr.h	/^    Or,   \/\/\/< Bitwise or.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
Order	CodeGen/RegisterClassInfo.h	/^    OwningArrayPtr<unsigned> Order;$/;"	m	struct:llvm::RegisterClassInfo::RCInfo
Order	CodeGen/ScheduleDAG.h	/^      Order        \/\/\/< Any other ordering dependency.$/;"	e	enum:llvm::SDep::Kind
Order	CodeGen/ScheduleDAG.h	/^      } Order;$/;"	m	union:llvm::SDep::__anon41	typeref:struct:llvm::SDep::__anon41::__anon42
OrderFunc	Target/TargetRegisterInfo.h	/^  ArrayRef<uint16_t> (*OrderFunc)(const MachineFunction&);$/;"	m	class:llvm::TargetRegisterClass
Ordering	CodeGen/SelectionDAG.h	/^  SDNodeOrdering *Ordering;$/;"	m	class:llvm::SelectionDAG
Ordinal	MC/MCAssembler.h	/^  unsigned Ordinal;$/;"	m	class:llvm::MCSectionData
OrdinalHint	Support/COFF.h	/^    uint16_t OrdinalHint;$/;"	m	struct:llvm::COFF::ImportHeader
OrigAlign	Target/TargetCallingConv.h	/^    static const uint64_t OrigAlign      = 0x1FULL<<27;$/;"	m	struct:llvm::ISD::ArgFlagsTy
OrigAlignOffs	Target/TargetCallingConv.h	/^    static const uint64_t OrigAlignOffs  = 27;$/;"	m	struct:llvm::ISD::ArgFlagsTy
OrigArgIndex	Target/TargetCallingConv.h	/^    unsigned OrigArgIndex;$/;"	m	struct:llvm::ISD::InputArg
OrigContainer	Analysis/IntervalIterator.h	/^  OrigContainer_t *OrigContainer;$/;"	m	class:llvm::IntervalIterator
OrigMI	CodeGen/LiveRangeEdit.h	/^    MachineInstr *OrigMI;   \/\/ Instruction defining ParentVNI.$/;"	m	struct:llvm::LiveRangeEdit::Remat
OrigNode	CodeGen/ScheduleDAG.h	/^    SUnit *OrigNode;                    \/\/ If not this, the node from which$/;"	m	class:llvm::SUnit
Other	Analysis/MemoryDependenceAnalysis.h	/^      Other$/;"	e	enum:llvm::MemDepResult::DepType
Other	CodeGen/ValueTypes.h	/^      Other          =   0,   \/\/ This is a non-standard value$/;"	e	enum:llvm::MVT::SimpleValueType
OtherOps	Instruction.h	/^  enum OtherOps {$/;"	g	class:llvm::Instruction
OtherType	Analysis/MemoryDependenceAnalysis.h	/^    enum OtherType {$/;"	g	class:llvm::MemDepResult
Out	Bitcode/BitstreamWriter.h	/^  SmallVectorImpl<char> &Out;$/;"	m	class:llvm::BitstreamWriter
OutBufCur	Support/raw_ostream.h	/^  char *OutBufStart, *OutBufEnd, *OutBufCur;$/;"	m	class:llvm::raw_ostream
OutBufEnd	Support/raw_ostream.h	/^  char *OutBufStart, *OutBufEnd, *OutBufCur;$/;"	m	class:llvm::raw_ostream
OutBufStart	Support/raw_ostream.h	/^  char *OutBufStart, *OutBufEnd, *OutBufCur;$/;"	m	class:llvm::raw_ostream
OutContext	CodeGen/AsmPrinter.h	/^    MCContext &OutContext;$/;"	m	class:llvm::AsmPrinter
OutStreamer	CodeGen/AsmPrinter.h	/^    MCStreamer &OutStreamer;$/;"	m	class:llvm::AsmPrinter
OutVals	Target/TargetLowering.h	/^    SmallVector<SDValue, 32> OutVals;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
Output	CodeGen/ScheduleDAG.h	/^      Output,      \/\/\/< A register output-dependence (aka WAW).$/;"	e	enum:llvm::SDep::Kind
Output	Support/OutputBuffer.h	/^    std::vector<unsigned char> &Output;$/;"	m	class:llvm::OutputBuffer
OutputArg	Target/TargetCallingConv.h	/^    OutputArg() : IsFixed(false) {}$/;"	f	struct:llvm::ISD::OutputArg
OutputArg	Target/TargetCallingConv.h	/^    OutputArg(ArgFlagsTy flags, EVT vt, bool isfixed)$/;"	f	struct:llvm::ISD::OutputArg
OutputArg	Target/TargetCallingConv.h	/^  struct OutputArg {$/;"	s	namespace:llvm::ISD
OutputBuffer	Support/OutputBuffer.h	/^    OutputBuffer(std::vector<unsigned char> &Out,$/;"	f	class:llvm::OutputBuffer
OutputBuffer	Support/OutputBuffer.h	/^  class OutputBuffer {$/;"	c	namespace:llvm
Outs	Target/TargetLowering.h	/^    SmallVector<ISD::OutputArg, 32> Outs;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
OverdefinedVal	Analysis/SparsePropagation.h	/^  LatticeVal UndefVal, OverdefinedVal, UntrackedVal;$/;"	m	class:llvm::AbstractLatticeFunction
OverflowingBinaryOperator	Operator.h	/^class OverflowingBinaryOperator : public Operator {$/;"	c	namespace:llvm
OverflowingBinaryOperatorOptionalFlags	Bitcode/LLVMBitCodes.h	/^  enum OverflowingBinaryOperatorOptionalFlags {$/;"	g	namespace:llvm::bitc
Overlaps	MC/MCRegisterInfo.h	/^  uint32_t Overlaps;  \/\/ Overlapping registers, described above$/;"	m	struct:llvm::MCRegisterDesc
OverlayNumber	Support/COFF.h	/^    uint16_t OverlayNumber;$/;"	m	struct:llvm::COFF::DOSHeader
Override	Module.h	/^  enum ModFlagBehavior { Error = 1, Warning  = 2, Require = 3, Override = 4 };$/;"	e	enum:llvm::Module::ModFlagBehavior
Owner	Support/LockFileManager.h	/^  Optional<std::pair<std::string, int> > Owner;$/;"	m	class:llvm::LockFileManager
OwningArrayPtr	ADT/OwningPtr.h	/^  OwningArrayPtr(OwningArrayPtr &&Other) : Ptr(Other.take()) {}$/;"	f	class:llvm::OwningArrayPtr
OwningArrayPtr	ADT/OwningPtr.h	/^  explicit OwningArrayPtr(T *P = 0) : Ptr(P) {}$/;"	f	class:llvm::OwningArrayPtr
OwningArrayPtr	ADT/OwningPtr.h	/^class OwningArrayPtr {$/;"	c	namespace:llvm
OwningObject	Object/ELF.h	/^  const OwningType *OwningObject;$/;"	m	class:llvm::object::DynRefImpl
OwningObject	Object/ObjectFile.h	/^  const ObjectFile *OwningObject;$/;"	m	class:llvm::object::LibraryRef
OwningObject	Object/ObjectFile.h	/^  const ObjectFile *OwningObject;$/;"	m	class:llvm::object::RelocationRef
OwningObject	Object/ObjectFile.h	/^  const ObjectFile *OwningObject;$/;"	m	class:llvm::object::SectionRef
OwningObject	Object/ObjectFile.h	/^  const ObjectFile *OwningObject;$/;"	m	class:llvm::object::SymbolRef
OwningPtr	ADT/OwningPtr.h	/^  OwningPtr(OwningPtr &&Other) : Ptr(Other.take()) {}$/;"	f	class:llvm::OwningPtr
OwningPtr	ADT/OwningPtr.h	/^  explicit OwningPtr(T *P = 0) : Ptr(P) {}$/;"	f	class:llvm::OwningPtr
OwningPtr	ADT/OwningPtr.h	/^class OwningPtr {$/;"	c	namespace:llvm
OwningType	Object/ELF.h	/^  typedef ELFObjectFile<target_endianness, is64Bits> OwningType;$/;"	t	class:llvm::object::DynRefImpl
OwnsStream	Support/circular_raw_ostream.h	/^    bool OwnsStream;$/;"	m	class:llvm::circular_raw_ostream
P	ADT/SetVector.h	/^    UnaryPredicate P;$/;"	m	class:llvm::SetVector::TestAndEraseFromSet
P	CodeGen/RegisterPressure.h	/^  RegisterPressure &P;$/;"	m	class:llvm::RegPressureTracker
P	PassManagers.h	/^  Pass *P;$/;"	m	class:llvm::PassManagerPrettyStackEntry
PARAMATTR_BLOCK_ID	Bitcode/LLVMBitCodes.h	/^    PARAMATTR_BLOCK_ID,$/;"	e	enum:llvm::bitc::BlockIDs
PARAMATTR_CODE_ENTRY	Bitcode/LLVMBitCodes.h	/^    PARAMATTR_CODE_ENTRY = 1   \/\/ ENTRY: [paramidx0, attr0, paramidx1, attr1...]$/;"	e	enum:llvm::bitc::AttributeCodes
PBQP	CodeGen/PBQP/Graph.h	/^namespace PBQP {$/;"	n
PBQP	CodeGen/PBQP/HeuristicBase.h	/^namespace PBQP {$/;"	n
PBQP	CodeGen/PBQP/HeuristicSolver.h	/^namespace PBQP {$/;"	n
PBQP	CodeGen/PBQP/Heuristics/Briggs.h	/^namespace PBQP {$/;"	n
PBQP	CodeGen/PBQP/Math.h	/^namespace PBQP {$/;"	n
PBQP	CodeGen/PBQP/Solution.h	/^namespace PBQP {$/;"	n
PBQPBuilder	CodeGen/RegAllocPBQP.h	/^    PBQPBuilder() {}$/;"	f	class:llvm::PBQPBuilder
PBQPBuilder	CodeGen/RegAllocPBQP.h	/^  class PBQPBuilder {$/;"	c	namespace:llvm
PBQPBuilderWithCoalescing	CodeGen/RegAllocPBQP.h	/^  class PBQPBuilderWithCoalescing : public PBQPBuilder {$/;"	c	namespace:llvm
PBQPNum	CodeGen/PBQP/Math.h	/^typedef float PBQPNum;$/;"	t	namespace:PBQP
PBQPRAProblem	CodeGen/RegAllocPBQP.h	/^  class PBQPRAProblem {$/;"	c	namespace:llvm
PC	ADT/Triple.h	/^    PC,$/;"	e	enum:llvm::Triple::VendorType
PCMARKER	CodeGen/ISDOpcodes.h	/^    PCMARKER,$/;"	e	enum:llvm::ISD::NodeType
PCSymbol	MC/MCAsmInfo.h	/^    const char *PCSymbol;                    \/\/ Defaults to "$".$/;"	m	class:llvm::MCAsmInfo
PDT	Analysis/RegionInfo.h	/^  PostDominatorTree *PDT;$/;"	m	class:llvm::RegionInfo
PDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *PDataSection;$/;"	m	class:llvm::MCObjectFileInfo
PEHeader	Support/COFF.h	/^  struct PEHeader {$/;"	s	namespace:llvm::COFF
PEO_EXACT	Bitcode/LLVMBitCodes.h	/^    PEO_EXACT = 0$/;"	e	enum:llvm::bitc::PossiblyExactOperatorOptionalFlags
PF_MASKOS	Support/ELF.h	/^  PF_MASKOS   = 0x0ff00000,\/\/ Bits for operating system-specific semantics.$/;"	e	enum:llvm::ELF::__anon107
PF_MASKPROC	Support/ELF.h	/^  PF_MASKPROC = 0xf0000000 \/\/ Bits for processor-specific semantics.$/;"	e	enum:llvm::ELF::__anon107
PF_R	Support/ELF.h	/^  PF_R        = 4,         \/\/ Read$/;"	e	enum:llvm::ELF::__anon107
PF_W	Support/ELF.h	/^  PF_W        = 2,         \/\/ Write$/;"	e	enum:llvm::ELF::__anon107
PF_X	Support/ELF.h	/^  PF_X        = 1,         \/\/ Execute$/;"	e	enum:llvm::ELF::__anon107
PHI	Target/TargetOpcodes.h	/^    PHI = 0,$/;"	e	enum:llvm::TargetOpcode::__anon139
PHIJoins	CodeGen/LiveVariables.h	/^  SparseBitVector<> PHIJoins;$/;"	m	class:llvm::LiveVariables
PHINode	Instructions.h	/^  PHINode(Type *Ty, unsigned NumReservedValues, const Twine &NameStr,$/;"	f	class:llvm::PHINode
PHINode	Instructions.h	/^  explicit PHINode(Type *Ty, unsigned NumReservedValues,$/;"	f	class:llvm::PHINode
PHINode	Instructions.h	/^class PHINode : public Instruction {$/;"	c	namespace:llvm
PHINodesToUpdate	CodeGen/FunctionLoweringInfo.h	/^  std::vector<std::pair<MachineInstr*, unsigned> > PHINodesToUpdate;$/;"	m	class:llvm::FunctionLoweringInfo
PHITag	Transforms/Utils/SSAUpdaterImpl.h	/^    PhiT *PHITag;      \/\/ Marker for existing PHIs that match.$/;"	m	class:llvm::SSAUpdaterImpl::BBInfo
PHITransAddr	Analysis/PHITransAddr.h	/^  PHITransAddr(Value *addr, const DataLayout *td) : Addr(addr), TD(td), TLI(0) {$/;"	f	class:llvm::PHITransAddr
PHITransAddr	Analysis/PHITransAddr.h	/^class PHITransAddr {$/;"	c	namespace:llvm
PHIVarInfo	CodeGen/LiveVariables.h	/^  SmallVector<unsigned, 4> *PHIVarInfo;$/;"	m	class:llvm::LiveVariables
PIC_	Support/CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	e	enum:llvm::Reloc::Model
PImpl	Analysis/LazyValueInfo.h	/^  void *PImpl;$/;"	m	class:llvm::LazyValueInfo
PM	CodeGen/Passes.h	/^  PassManagerBase *PM;$/;"	m	class:llvm::TargetPassConfig
PM	PassAnalysisSupport.h	/^  PMDataManager &PM;$/;"	m	class:llvm::AnalysisResolver
PM	PassManager.h	/^  PassManagerImpl *PM;$/;"	m	class:llvm::PassManager
PMDataManager	PassManagers.h	/^  explicit PMDataManager() : TPM(NULL), Depth(0) {$/;"	f	class:llvm::PMDataManager
PMDataManager	PassManagers.h	/^class PMDataManager {$/;"	c	namespace:llvm
PMStack	PassManagers.h	/^class PMStack {$/;"	c	namespace:llvm
PMT_BasicBlockPassManager	Pass.h	/^  PMT_BasicBlockPassManager, \/\/\/< BBPassManager$/;"	e	enum:llvm::PassManagerType
PMT_CallGraphPassManager	Pass.h	/^  PMT_CallGraphPassManager,  \/\/\/< CGPassManager$/;"	e	enum:llvm::PassManagerType
PMT_FunctionPassManager	Pass.h	/^  PMT_FunctionPassManager,   \/\/\/< FPPassManager$/;"	e	enum:llvm::PassManagerType
PMT_Last	Pass.h	/^  PMT_Last$/;"	e	enum:llvm::PassManagerType
PMT_LoopPassManager	Pass.h	/^  PMT_LoopPassManager,       \/\/\/< LPPassManager$/;"	e	enum:llvm::PassManagerType
PMT_ModulePassManager	Pass.h	/^  PMT_ModulePassManager = 1, \/\/\/< MPPassManager$/;"	e	enum:llvm::PassManagerType
PMT_RegionPassManager	Pass.h	/^  PMT_RegionPassManager,     \/\/\/< RGPassManager$/;"	e	enum:llvm::PassManagerType
PMT_Unknown	Pass.h	/^  PMT_Unknown = 0,$/;"	e	enum:llvm::PassManagerType
PMTopLevelManager	PassManagers.h	/^class PMTopLevelManager {$/;"	c	namespace:llvm
POIterator	Analysis/LoopIterator.h	/^  typedef std::vector<BasicBlock*>::const_iterator POIterator;$/;"	t	class:llvm::LoopBlocksDFS
POST_DEC	CodeGen/ISDOpcodes.h	/^    POST_DEC,$/;"	e	enum:llvm::ISD::MemIndexedMode
POST_INC	CodeGen/ISDOpcodes.h	/^    POST_INC,$/;"	e	enum:llvm::ISD::MemIndexedMode
POT	Analysis/BlockFrequencyImpl.h	/^  std::vector<BlockT *> POT;$/;"	m	class:llvm::BlockFrequencyImpl
POTIterator	Analysis/LoopIterator.h	/^  typedef po_iterator<BasicBlock*, LoopBlocksTraversal, true> POTIterator;$/;"	t	class:llvm::LoopBlocksTraversal
POWI_F32	CodeGen/RuntimeLibcalls.h	/^    POWI_F32,$/;"	e	enum:llvm::RTLIB::Libcall
POWI_F64	CodeGen/RuntimeLibcalls.h	/^    POWI_F64,$/;"	e	enum:llvm::RTLIB::Libcall
POWI_F80	CodeGen/RuntimeLibcalls.h	/^    POWI_F80,$/;"	e	enum:llvm::RTLIB::Libcall
POWI_PPCF128	CodeGen/RuntimeLibcalls.h	/^    POWI_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
POW_F32	CodeGen/RuntimeLibcalls.h	/^    POW_F32,$/;"	e	enum:llvm::RTLIB::Libcall
POW_F64	CodeGen/RuntimeLibcalls.h	/^    POW_F64,$/;"	e	enum:llvm::RTLIB::Libcall
POW_F80	CodeGen/RuntimeLibcalls.h	/^    POW_F80,$/;"	e	enum:llvm::RTLIB::Libcall
POW_PPCF128	CodeGen/RuntimeLibcalls.h	/^    POW_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
PPCDoubleDouble	ADT/APFloat.h	/^    static const fltSemantics PPCDoubleDouble;$/;"	m	class:llvm::APFloat
PPC_FP128TyID	Type.h	/^    PPC_FP128TyID,   \/\/\/<  6: 128-bit floating point type (two 64-bits, PowerPC)$/;"	e	enum:llvm::Type::TypeID
PQ	CodeGen/LatencyPriorityQueue.h	/^    LatencyPriorityQueue *PQ;$/;"	m	struct:llvm::latency_sort
PQ	CodeGen/ResourcePriorityQueue.h	/^    ResourcePriorityQueue *PQ;$/;"	m	struct:llvm::resource_sort
PREFETCH	CodeGen/ISDOpcodes.h	/^    PREFETCH,$/;"	e	enum:llvm::ISD::NodeType
PRESERVE_STREAM	Support/FormattedStream.h	/^    static const bool PRESERVE_STREAM = false;$/;"	m	class:llvm::formatted_raw_ostream
PRE_DEC	CodeGen/ISDOpcodes.h	/^    PRE_DEC,$/;"	e	enum:llvm::ISD::MemIndexedMode
PRE_INC	CodeGen/ISDOpcodes.h	/^    PRE_INC,$/;"	e	enum:llvm::ISD::MemIndexedMode
PROFILE_INTEGER_INFO	ADT/ImmutableSet.h	838;"	d
PROFILE_INTEGER_INFO	ADT/ImmutableSet.h	852;"	d
PROLOG_LABEL	Target/TargetOpcodes.h	/^    PROLOG_LABEL = 2,$/;"	e	enum:llvm::TargetOpcode::__anon139
PSetID	CodeGen/RegisterPressure.h	/^  unsigned PSetID;$/;"	m	struct:llvm::PressureElement
PT	Instruction.h	/^  typedef Instruction* PT;$/;"	t	class:llvm::PointerLikeTypeTraits
PT	Value.h	/^  typedef Value* PT;$/;"	t	class:llvm::PointerLikeTypeTraits
PT1BitsAv	ADT/PointerUnion.h	/^      PT1BitsAv = (int)(PointerLikeTypeTraits<PT1>::NumLowBitsAvailable),$/;"	e	enum:llvm::PointerUnionUIntTraits::__anon1
PT2BitsAv	ADT/PointerUnion.h	/^      PT2BitsAv = (int)(PointerLikeTypeTraits<PT2>::NumLowBitsAvailable),$/;"	e	enum:llvm::PointerUnionUIntTraits::__anon1
PTOGV	ExecutionEngine/GenericValue.h	/^inline GenericValue PTOGV(void *P) { return GenericValue(P); }$/;"	f	namespace:llvm
PTX_Device	CallingConv.h	/^    PTX_Device = 72,$/;"	e	enum:llvm::CallingConv::ID
PTX_Kernel	CallingConv.h	/^    PTX_Kernel = 71,$/;"	e	enum:llvm::CallingConv::ID
PT_BasicBlock	Pass.h	/^  PT_BasicBlock,$/;"	e	enum:llvm::PassKind
PT_CallGraphSCC	Pass.h	/^  PT_CallGraphSCC,$/;"	e	enum:llvm::PassKind
PT_DYNAMIC	Support/ELF.h	/^  PT_DYNAMIC = 2, \/\/ Dynamic linking information.$/;"	e	enum:llvm::ELF::__anon106
PT_Function	Pass.h	/^  PT_Function,$/;"	e	enum:llvm::PassKind
PT_GNU_EH_FRAME	Support/ELF.h	/^  PT_GNU_EH_FRAME  = 0x6474e550,$/;"	e	enum:llvm::ELF::__anon106
PT_GNU_RELRO	Support/ELF.h	/^  PT_GNU_RELRO  = 0x6474e552, \/\/ Read-only after relocation.$/;"	e	enum:llvm::ELF::__anon106
PT_GNU_STACK	Support/ELF.h	/^  PT_GNU_STACK  = 0x6474e551, \/\/ Indicates stack executability.$/;"	e	enum:llvm::ELF::__anon106
PT_HIOS	Support/ELF.h	/^  PT_HIOS    = 0x6fffffff, \/\/ Highest operating system-specific pt entry type.$/;"	e	enum:llvm::ELF::__anon106
PT_HIPROC	Support/ELF.h	/^  PT_HIPROC  = 0x7fffffff  \/\/ Highest processor-specific program hdr entry type.$/;"	e	enum:llvm::ELF::__anon106
PT_INTERP	Support/ELF.h	/^  PT_INTERP  = 3, \/\/ Interpreter pathname.$/;"	e	enum:llvm::ELF::__anon106
PT_LOAD	Support/ELF.h	/^  PT_LOAD    = 1, \/\/ Loadable segment.$/;"	e	enum:llvm::ELF::__anon106
PT_LOOS	Support/ELF.h	/^  PT_LOOS    = 0x60000000, \/\/ Lowest operating system-specific pt entry type.$/;"	e	enum:llvm::ELF::__anon106
PT_LOPROC	Support/ELF.h	/^  PT_LOPROC  = 0x70000000, \/\/ Lowest processor-specific program hdr entry type.$/;"	e	enum:llvm::ELF::__anon106
PT_Loop	Pass.h	/^  PT_Loop,$/;"	e	enum:llvm::PassKind
PT_Module	Pass.h	/^  PT_Module,$/;"	e	enum:llvm::PassKind
PT_NOTE	Support/ELF.h	/^  PT_NOTE    = 4, \/\/ Auxiliary information.$/;"	e	enum:llvm::ELF::__anon106
PT_NULL	Support/ELF.h	/^  PT_NULL    = 0, \/\/ Unused segment.$/;"	e	enum:llvm::ELF::__anon106
PT_PHDR	Support/ELF.h	/^  PT_PHDR    = 6, \/\/ The program header table itself.$/;"	e	enum:llvm::ELF::__anon106
PT_PassManager	Pass.h	/^  PT_PassManager$/;"	e	enum:llvm::PassKind
PT_Region	Pass.h	/^  PT_Region,$/;"	e	enum:llvm::PassKind
PT_SHLIB	Support/ELF.h	/^  PT_SHLIB   = 5, \/\/ Reserved.$/;"	e	enum:llvm::ELF::__anon106
PT_SUNW_EH_FRAME	Support/ELF.h	/^  PT_SUNW_EH_FRAME = 0x6474e550,$/;"	e	enum:llvm::ELF::__anon106
PT_SUNW_UNWIND	Support/ELF.h	/^  PT_SUNW_UNWIND   = 0x6464e550,$/;"	e	enum:llvm::ELF::__anon106
PT_TLS	Support/ELF.h	/^  PT_TLS     = 7, \/\/ The thread-local storage template.$/;"	e	enum:llvm::ELF::__anon106
PackedVector	ADT/PackedVector.h	/^  PackedVector() { }$/;"	f	class:llvm::PackedVector
PackedVector	ADT/PackedVector.h	/^  explicit PackedVector(unsigned size) : Bits(size << (BitNum-1)) { }$/;"	f	class:llvm::PackedVector
PackedVector	ADT/PackedVector.h	/^class PackedVector : public PackedVectorBase<T, BitNum, BitVectorTy,$/;"	c	namespace:llvm
PackedVectorBase	ADT/PackedVector.h	/^class PackedVectorBase<T, BitNum, BitVectorTy, false> {$/;"	c	namespace:llvm
PackedVectorBase	ADT/PackedVector.h	/^class PackedVectorBase<T, BitNum, BitVectorTy, true> {$/;"	c	namespace:llvm
Packet	CodeGen/ResourcePriorityQueue.h	/^    std::vector<SUnit*> Packet;$/;"	m	class:llvm::ResourcePriorityQueue
Pair	ADT/DenseMapInfo.h	/^  typedef std::pair<T, U> Pair;$/;"	t	struct:llvm::DenseMapInfo
Pair	Analysis/MemoryDependenceAnalysis.h	/^      BBSkipFirstBlockPair Pair;$/;"	m	struct:llvm::MemoryDependenceAnalysis::NonLocalPointerInfo
PairAllocator	Analysis/LoopDependenceAnalysis.h	/^  BumpPtrAllocator PairAllocator;$/;"	m	class:llvm::LoopDependenceAnalysis
PairTy	Analysis/CallGraph.h	/^  typedef std::pair<const Function*, CallGraphNode*> PairTy;$/;"	t	struct:llvm::GraphTraits
PairTy	Analysis/MemoryDependenceAnalysis.h	/^    typedef PointerIntPair<Instruction*, 2, DepType> PairTy;$/;"	t	class:llvm::MemDepResult
Pairs	Analysis/LoopDependenceAnalysis.h	/^  FoldingSet<DependencePair> Pairs;$/;"	m	class:llvm::LoopDependenceAnalysis
ParallelLiveRanges	CodeGen/ResourcePriorityQueue.h	/^    unsigned ParallelLiveRanges;$/;"	m	class:llvm::ResourcePriorityQueue
Parent	Analysis/Dominators.h	/^    unsigned Parent;$/;"	m	struct:llvm::DominatorTreeBase::InfoRec
Parent	Analysis/IVUsers.h	/^  IVUsers *Parent;$/;"	m	class:llvm::IVStrideUse
Parent	Argument.h	/^  Function *Parent;$/;"	m	class:llvm::Argument
Parent	BasicBlock.h	/^  Function *Parent;$/;"	m	class:llvm::BasicBlock
Parent	CodeGen/LexicalScopes.h	/^  LexicalScope *Parent;                          \/\/ Parent to this scope.$/;"	m	class:llvm::LexicalScope
Parent	CodeGen/LiveRangeEdit.h	/^  LiveInterval *Parent;$/;"	m	class:llvm::LiveRangeEdit
Parent	CodeGen/MachineBasicBlock.h	/^  MachineBasicBlock* Parent;$/;"	m	struct:llvm::ilist_traits
Parent	CodeGen/MachineInstr.h	/^  MachineBasicBlock *Parent;            \/\/ Pointer to the owning basic block.$/;"	m	class:llvm::MachineInstr
Parent	GlobalValue.h	/^  Module *Parent;             \/\/ The containing module.$/;"	m	class:llvm::GlobalValue
Parent	Instruction.h	/^  BasicBlock *Parent;$/;"	m	class:llvm::Instruction
Parent	MC/MCAssembler.h	/^  MCSectionData *Parent;$/;"	m	class:llvm::MCFragment
Parent	MC/MCAtom.h	/^  MCModule *Parent;$/;"	m	class:llvm::MCAtom
Parent	Metadata.h	/^  Module *Parent;$/;"	m	class:llvm::NamedMDNode
Parent	Object/Archive.h	/^    const Archive *Parent;$/;"	m	class:llvm::object::Archive::Child
Parent	Object/Archive.h	/^    const Archive *Parent;$/;"	m	class:llvm::object::Archive::Symbol
ParentLoop	Analysis/LoopInfo.h	/^  LoopT *ParentLoop;$/;"	m	class:llvm::LoopBase
ParentMI	CodeGen/MachineOperand.h	/^  MachineInstr *ParentMI;$/;"	m	class:llvm::MachineOperand
ParentTy	Instructions.h	/^      ParentTy;$/;"	t	class:llvm::SwitchInst::CaseIt
ParentTy	Support/IntegersSubset.h	/^  typedef IntegersSubsetGeneric<IntItem> ParentTy;$/;"	t	class:llvm::IntegersSubset
ParentVNI	CodeGen/LiveRangeEdit.h	/^    VNInfo *ParentVNI;      \/\/ parent_'s value at the remat location.$/;"	m	struct:llvm::LiveRangeEdit::Remat
ParmContext	CodeGen/CallingConvLower.h	/^typedef enum { Unknown, Prologue, Call } ParmContext;$/;"	t	namespace:llvm	typeref:enum:llvm::__anon47
ParseConstraints	InlineAsm.h	/^  ConstraintInfoVector ParseConstraints() const {$/;"	f	class:llvm::InlineAsm
ParseIR	Support/IRReader.h	/^  inline Module *ParseIR(MemoryBuffer *Buffer,$/;"	f	namespace:llvm
ParseIRFile	Support/IRReader.h	/^  inline Module *ParseIRFile(const std::string &Filename,$/;"	f	namespace:llvm
Parser	MC/MCParser/MCAsmParserExtension.h	/^  MCAsmParser *Parser;$/;"	m	class:llvm::MCAsmParserExtension
Parser	Support/CommandLine.h	/^  ParserClass Parser;$/;"	m	class:llvm::cl::bits
Parser	Support/CommandLine.h	/^  ParserClass Parser;$/;"	m	class:llvm::cl::list
Parser	Support/CommandLine.h	/^  ParserClass Parser;$/;"	m	class:llvm::cl::opt
ParsingInlineAsm	MC/MCTargetAsmParser.h	/^  bool ParsingInlineAsm;$/;"	m	class:llvm::MCTargetAsmParser
PartOffset	Target/TargetCallingConv.h	/^    unsigned PartOffset;$/;"	m	struct:llvm::ISD::InputArg
PartialAlias	Analysis/AliasAnalysis.h	/^    PartialAlias,       \/\/\/< Pointers differ, but pointees overlap.$/;"	e	enum:llvm::AliasAnalysis::AliasResult
Pass	Pass.h	/^  explicit Pass(PassKind K, char &pid) : Resolver(0), PassID(&pid), Kind(K) { }$/;"	f	class:llvm::Pass
Pass	Pass.h	/^class Pass {$/;"	c	namespace:llvm
PassArgFilter	Support/PassNameParser.h	/^class PassArgFilter {$/;"	c	namespace:llvm
PassArgument	PassSupport.h	/^  const char      *const PassArgument; \/\/ Command Line argument to run this pass$/;"	m	class:llvm::PassInfo
PassConfig	CodeGen/MachineScheduler.h	/^  const TargetPassConfig *PassConfig;$/;"	m	struct:llvm::MachineSchedContext
PassDebuggingString	PassManagers.h	/^enum PassDebuggingString {$/;"	g	namespace:llvm
PassID	Pass.h	/^  const void *PassID;$/;"	m	class:llvm::Pass
PassID	PassSupport.h	/^  const void *PassID;      $/;"	m	class:llvm::PassInfo
PassInfo	PassSupport.h	/^  PassInfo(const char *name, const char *arg, const void *pi,$/;"	f	class:llvm::PassInfo
PassInfo	PassSupport.h	/^  PassInfo(const char *name, const void *pi)$/;"	f	class:llvm::PassInfo
PassInfo	PassSupport.h	/^class PassInfo {$/;"	c	namespace:llvm
PassKind	Pass.h	/^enum PassKind {$/;"	g	namespace:llvm
PassManager	PassManager.h	/^class PassManager : public PassManagerBase {$/;"	c	namespace:llvm
PassManagerBase	PassManager.h	/^class PassManagerBase {$/;"	c	namespace:llvm
PassManagerBuilder	Transforms/IPO/PassManagerBuilder.h	/^class PassManagerBuilder {$/;"	c	namespace:llvm
PassManagerPrettyStackEntry	PassManagers.h	/^  PassManagerPrettyStackEntry(Pass *p, Module &m)$/;"	f	class:llvm::PassManagerPrettyStackEntry
PassManagerPrettyStackEntry	PassManagers.h	/^  PassManagerPrettyStackEntry(Pass *p, Value &v)$/;"	f	class:llvm::PassManagerPrettyStackEntry
PassManagerPrettyStackEntry	PassManagers.h	/^  explicit PassManagerPrettyStackEntry(Pass *p)$/;"	f	class:llvm::PassManagerPrettyStackEntry
PassManagerPrettyStackEntry	PassManagers.h	/^class PassManagerPrettyStackEntry : public PrettyStackTraceEntry {$/;"	c	namespace:llvm
PassManagerType	Pass.h	/^enum PassManagerType {$/;"	g	namespace:llvm
PassManagers	PassManagers.h	/^  SmallVector<PMDataManager *, 8> PassManagers;$/;"	m	class:llvm::PMTopLevelManager
PassName	PassSupport.h	/^  const char      *const PassName;     \/\/ Nice name for Pass$/;"	m	class:llvm::PassInfo
PassNameParser	Support/PassNameParser.h	/^  PassNameParser() : Opt(0) {}$/;"	f	class:llvm::PassNameParser
PassNameParser	Support/PassNameParser.h	/^class PassNameParser : public PassRegistrationListener,$/;"	c	namespace:llvm
PassRegistrationListener	PassSupport.h	/^struct PassRegistrationListener {$/;"	s	namespace:llvm
PassRegistry	PassRegistry.h	/^  PassRegistry() : pImpl(0) { }$/;"	f	class:llvm::PassRegistry
PassRegistry	PassRegistry.h	/^class PassRegistry {$/;"	c	namespace:llvm
PassVector	PassManagers.h	/^  SmallVector<Pass *, 16> PassVector;$/;"	m	class:llvm::PMDataManager
Path	ADT/IntervalMap.h	/^class Path {$/;"	c	namespace:llvm::IntervalMapImpl
Path	Analysis/ProfileInfo.h	/^    typedef std::map<const BType*, const BType*> Path;$/;"	t	class:llvm::ProfileInfoT
Path	Support/FileSystem.h	/^  std::string Path;$/;"	m	class:llvm::sys::fs::directory_entry
Path	Support/PathV1.h	/^      Path() : path() {}$/;"	f	class:llvm::sys::Path
Path	Support/PathV1.h	/^      Path(const Path &that) : path(that.path) {}$/;"	f	class:llvm::sys::Path
Path	Support/PathV1.h	/^  class Path {$/;"	c	namespace:llvm::sys
Path	Support/PathV2.h	/^  StringRef Path;      \/\/\/< The entire path.$/;"	m	class:llvm::sys::path::const_iterator
PathInfo	Analysis/ProfileDataTypes.h	/^  PathInfo      = 5,   \/* Path profiling information      *\/$/;"	e	enum:ProfilingType
PathProfileHeader	Analysis/ProfileInfoTypes.h	/^} PathProfileHeader;$/;"	t	typeref:struct:__anon26
PathProfileInfo	Analysis/PathProfileInfo.h	/^class PathProfileInfo {$/;"	c	namespace:llvm
PathProfileTableEntry	Analysis/ProfileInfoTypes.h	/^} PathProfileTableEntry;$/;"	t	typeref:struct:__anon27
PathWithStatus	Support/PathV1.h	/^      PathWithStatus() : Path(), status(), fsIsValid(false) {}$/;"	f	class:llvm::sys::PathWithStatus
PathWithStatus	Support/PathV1.h	/^      PathWithStatus(const Path &other)$/;"	f	class:llvm::sys::PathWithStatus
PathWithStatus	Support/PathV1.h	/^      PathWithStatus(const PathWithStatus &that)$/;"	f	class:llvm::sys::PathWithStatus
PathWithStatus	Support/PathV1.h	/^      explicit PathWithStatus($/;"	f	class:llvm::sys::PathWithStatus
PathWithStatus	Support/PathV1.h	/^  class PathWithStatus : public Path {$/;"	c	namespace:llvm::sys
PatternMatch	Support/PatternMatch.h	/^namespace PatternMatch {$/;"	n	namespace:llvm
PeelFirst	Analysis/DependenceAnalysis.h	/^      bool PeelFirst : 1; \/\/ Peeling the first iteration will break dependence.$/;"	m	struct:llvm::Dependence::DVEntry
PeelLast	Analysis/DependenceAnalysis.h	/^      bool PeelLast  : 1; \/\/ Peeling the last iteration will break the dependence.$/;"	m	struct:llvm::Dependence::DVEntry
PendingLoads	CodeGen/ScheduleDAGInstrs.h	/^    std::vector<SUnit *> PendingLoads;$/;"	m	class:llvm::ScheduleDAGInstrs
PendingLoopPredicates	Analysis/ScalarEvolution.h	/^    DenseSet<Value*> PendingLoopPredicates;$/;"	m	class:llvm::ScalarEvolution
PerInstNLInfo	Analysis/MemoryDependenceAnalysis.h	/^    typedef std::pair<NonLocalDepInfo, bool> PerInstNLInfo;$/;"	t	class:llvm::MemoryDependenceAnalysis
Percent	MC/MCParser/MCAsmLexer.h	/^    Amp, AmpAmp, Exclaim, ExclaimEqual, Percent, Hash,$/;"	e	enum:llvm::AsmToken::TokenKind
Perms	Support/FileSystem.h	/^  perms Perms;$/;"	m	class:llvm::sys::fs::file_status
Personalities	CodeGen/MachineModuleInfo.h	/^  std::vector<const Function *> Personalities;$/;"	m	class:llvm::MachineModuleInfo
Personality	CodeGen/MachineModuleInfo.h	/^  const Function *Personality;           \/\/ Personality function.$/;"	m	struct:llvm::LandingPadInfo
Personality	MC/MCDwarf.h	/^    const MCSymbol *Personality;$/;"	m	struct:llvm::MCDwarfFrameInfo
PersonalityEncoding	MC/MCDwarf.h	/^    unsigned PersonalityEncoding;$/;"	m	struct:llvm::MCDwarfFrameInfo
PersonalityEncoding	MC/MCObjectFileInfo.h	/^  unsigned PersonalityEncoding;$/;"	m	class:llvm::MCObjectFileInfo
PhiT	Transforms/Utils/SSAUpdaterImpl.h	/^  typedef typename Traits::PhiT PhiT;$/;"	t	class:llvm::SSAUpdaterImpl
PhysRegDef	CodeGen/LiveVariables.h	/^  MachineInstr **PhysRegDef;$/;"	m	class:llvm::LiveVariables
PhysRegInfo	CodeGen/MachineInstrBundle.h	/^  struct PhysRegInfo {$/;"	s	class:llvm::MachineOperandIteratorBase
PhysRegSUOper	CodeGen/ScheduleDAGInstrs.h	/^    PhysRegSUOper(SUnit *su, int op): SU(su), OpIdx(op) {}$/;"	f	struct:llvm::PhysRegSUOper
PhysRegSUOper	CodeGen/ScheduleDAGInstrs.h	/^  struct PhysRegSUOper {$/;"	s	namespace:llvm
PhysRegSet	CodeGen/ScheduleDAGInstrs.h	/^    SparseSet<unsigned> PhysRegSet;$/;"	m	class:llvm::Reg2SUnitsMap
PhysRegUse	CodeGen/LiveVariables.h	/^  MachineInstr **PhysRegUse;$/;"	m	class:llvm::LiveVariables
PhysRegUseDefLists	CodeGen/MachineRegisterInfo.h	/^  MachineOperand **PhysRegUseDefLists;$/;"	m	class:llvm::MachineRegisterInfo
Picker	CodeGen/LatencyPriorityQueue.h	/^    latency_sort Picker;$/;"	m	class:llvm::LatencyPriorityQueue
Picker	CodeGen/ResourcePriorityQueue.h	/^    resource_sort Picker;$/;"	m	class:llvm::ResourcePriorityQueue
Pipe	MC/MCParser/MCAsmLexer.h	/^    Pipe, PipePipe, Caret,$/;"	e	enum:llvm::AsmToken::TokenKind
PipePipe	MC/MCParser/MCAsmLexer.h	/^    Pipe, PipePipe, Caret,$/;"	e	enum:llvm::AsmToken::TokenKind
PluginLoader	Support/PluginLoader.h	/^  struct PluginLoader {$/;"	s	namespace:llvm
Plus	MC/MCExpr.h	/^    Plus   \/\/\/< Unary plus.$/;"	e	enum:llvm::MCUnaryExpr::Opcode
Plus	MC/MCParser/MCAsmLexer.h	/^    Plus, Minus, Tilde,$/;"	e	enum:llvm::AsmToken::TokenKind
Point	Analysis/DependenceAnalysis.h	/^      enum ConstraintKind { Empty, Point, Distance, Line, Any } Kind;$/;"	e	enum:llvm::DependenceAnalysis::Constraint::ConstraintKind
Point	IRBuilder.h	/^    BasicBlock::iterator Point;$/;"	m	class:llvm::IRBuilderBase::InsertPoint
PointKind	CodeGen/GCMetadata.h	/^    enum PointKind {$/;"	g	namespace:llvm::GC
Pointer	Intrinsics.h	/^      Integer, Vector, Pointer, Struct,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
Pointer32	Module.h	/^  enum PointerSize { AnyPointerSize, Pointer32, Pointer64 };$/;"	e	enum:llvm::Module::PointerSize
Pointer64	Module.h	/^  enum PointerSize { AnyPointerSize, Pointer32, Pointer64 };$/;"	e	enum:llvm::Module::PointerSize
PointerAlignElem	DataLayout.h	/^struct PointerAlignElem {$/;"	s	namespace:llvm
PointerBitMask	ADT/PointerIntPair.h	/^    PointerBitMask =$/;"	e	enum:llvm::PointerIntPair::__anon11
PointerInfo	ADT/ValueMap.h	/^  typedef DenseMapInfo<KeyT> PointerInfo;$/;"	t	struct:llvm::DenseMapInfo
PointerInfo	Support/ValueHandle.h	/^  typedef DenseMapInfo<T*> PointerInfo;$/;"	t	struct:llvm::DenseMapInfo
PointerIntPair	ADT/PointerIntPair.h	/^  PointerIntPair() : Value(0) {}$/;"	f	class:llvm::PointerIntPair
PointerIntPair	ADT/PointerIntPair.h	/^  PointerIntPair(PointerTy Ptr, IntType Int) : Value(0) {$/;"	f	class:llvm::PointerIntPair
PointerIntPair	ADT/PointerIntPair.h	/^class PointerIntPair {$/;"	c	namespace:llvm
PointerIntTy	ADT/DepthFirstIterator.h	/^  typedef PointerIntPair<NodeType*, 1>   PointerIntTy;$/;"	t	class:llvm::df_iterator
PointerLikeTypeTraits	ADT/PointerIntPair.h	/^class PointerLikeTypeTraits<PointerIntPair<PointerTy, IntBits, IntType,$/;"	c	namespace:llvm
PointerLikeTypeTraits	ADT/PointerUnion.h	/^  class PointerLikeTypeTraits<PointerUnion3<PT1, PT2, PT3> > {$/;"	c	namespace:llvm
PointerLikeTypeTraits	ADT/PointerUnion.h	/^  class PointerLikeTypeTraits<PointerUnion4<PT1, PT2, PT3, PT4> > {$/;"	c	namespace:llvm
PointerLikeTypeTraits	ADT/PointerUnion.h	/^  class PointerLikeTypeTraits<PointerUnion<PT1, PT2> > {$/;"	c	namespace:llvm
PointerLikeTypeTraits	Instruction.h	/^class PointerLikeTypeTraits<Instruction*> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	Support/PointerLikeTypeTraits.h	/^class PointerLikeTypeTraits {$/;"	c	namespace:llvm
PointerLikeTypeTraits	Support/PointerLikeTypeTraits.h	/^class PointerLikeTypeTraits<T*> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	Support/PointerLikeTypeTraits.h	/^class PointerLikeTypeTraits<const T*> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	Support/PointerLikeTypeTraits.h	/^class PointerLikeTypeTraits<uintptr_t> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	Support/ValueHandle.h	/^class PointerLikeTypeTraits<ValueHandleBase**> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	Use.h	/^class PointerLikeTypeTraits<Use**> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	Value.h	/^class PointerLikeTypeTraits<Value*> {$/;"	c	namespace:llvm
PointerMap	Analysis/AliasSetTracker.h	/^  PointerMapType PointerMap;$/;"	m	class:llvm::AliasSetTracker
PointerMapType	Analysis/AliasSetTracker.h	/^    PointerMapType;$/;"	t	class:llvm::AliasSetTracker
PointerRec	Analysis/AliasSetTracker.h	/^    PointerRec(Value *V)$/;"	f	class:llvm::AliasSet::PointerRec
PointerRec	Analysis/AliasSetTracker.h	/^  class PointerRec {$/;"	c	class:llvm::AliasSet
PointerSize	MC/MCAsmInfo.h	/^    unsigned PointerSize;$/;"	m	class:llvm::MCAsmInfo
PointerSize	Module.h	/^  enum PointerSize { AnyPointerSize, Pointer32, Pointer64 };$/;"	g	class:llvm::Module
PointerSize	Support/DataExtractor.h	/^  uint8_t PointerSize;$/;"	m	class:llvm::DataExtractor
PointerToLineNumbers	Support/COFF.h	/^    uint32_t PointerToLineNumbers;$/;"	m	struct:llvm::COFF::section
PointerToLinenumber	Support/COFF.h	/^    uint32_t PointerToLinenumber;$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
PointerToLinenumbers	Object/COFF.h	/^  support::ulittle32_t PointerToLinenumbers;$/;"	m	struct:llvm::object::coff_section
PointerToNextFunction	Support/COFF.h	/^    uint32_t PointerToNextFunction;$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
PointerToNextFunction	Support/COFF.h	/^    uint32_t PointerToNextFunction;$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
PointerToRawData	Object/COFF.h	/^  support::ulittle32_t PointerToRawData;$/;"	m	struct:llvm::object::coff_section
PointerToRawData	Support/COFF.h	/^    uint32_t PointerToRawData;$/;"	m	struct:llvm::COFF::section
PointerToRelocations	Object/COFF.h	/^  support::ulittle32_t PointerToRelocations;$/;"	m	struct:llvm::object::coff_section
PointerToRelocations	Support/COFF.h	/^    uint32_t PointerToRelocations;$/;"	m	struct:llvm::COFF::section
PointerToSymbolTable	Object/COFF.h	/^  support::ulittle32_t PointerToSymbolTable;$/;"	m	struct:llvm::object::coff_file_header
PointerToSymbolTable	Support/COFF.h	/^    uint32_t PointerToSymbolTable;$/;"	m	struct:llvm::COFF::header
PointerTy	ExecutionEngine/GenericValue.h	/^typedef void* PointerTy;$/;"	t	namespace:llvm
PointerTy	Target/TargetLowering.h	/^  MVT PointerTy;$/;"	m	class:llvm::TargetLowering
PointerTyID	Type.h	/^    PointerTyID,     \/\/\/< 14: Pointers$/;"	e	enum:llvm::Type::TypeID
PointerType	DerivedTypes.h	/^class PointerType : public SequentialType {$/;"	c	namespace:llvm
PointerUnion3	ADT/PointerUnion.h	/^    PointerUnion3() {}$/;"	f	class:llvm::PointerUnion3
PointerUnion3	ADT/PointerUnion.h	/^    PointerUnion3(PT1 V) {$/;"	f	class:llvm::PointerUnion3
PointerUnion3	ADT/PointerUnion.h	/^    PointerUnion3(PT2 V) {$/;"	f	class:llvm::PointerUnion3
PointerUnion3	ADT/PointerUnion.h	/^    PointerUnion3(PT3 V) {$/;"	f	class:llvm::PointerUnion3
PointerUnion3	ADT/PointerUnion.h	/^  class PointerUnion3 {$/;"	c	namespace:llvm
PointerUnion4	ADT/PointerUnion.h	/^    PointerUnion4() {}$/;"	f	class:llvm::PointerUnion4
PointerUnion4	ADT/PointerUnion.h	/^    PointerUnion4(PT1 V) {$/;"	f	class:llvm::PointerUnion4
PointerUnion4	ADT/PointerUnion.h	/^    PointerUnion4(PT2 V) {$/;"	f	class:llvm::PointerUnion4
PointerUnion4	ADT/PointerUnion.h	/^    PointerUnion4(PT3 V) {$/;"	f	class:llvm::PointerUnion4
PointerUnion4	ADT/PointerUnion.h	/^    PointerUnion4(PT4 V) {$/;"	f	class:llvm::PointerUnion4
PointerUnion4	ADT/PointerUnion.h	/^  class PointerUnion4 {$/;"	c	namespace:llvm
PointerUnionTypeSelector	ADT/PointerUnion.h	/^  struct PointerUnionTypeSelector {$/;"	s	namespace:llvm
PointerUnionTypeSelector	ADT/PointerUnion.h	/^  struct PointerUnionTypeSelector<T, T, RET_EQ, RET_NE> {$/;"	s	namespace:llvm
PointerUnionTypeSelectorReturn	ADT/PointerUnion.h	/^  struct PointerUnionTypeSelectorReturn {$/;"	s	namespace:llvm
PointerUnionTypeSelectorReturn	ADT/PointerUnion.h	/^  struct PointerUnionTypeSelectorReturn<$/;"	s	namespace:llvm
PointerUnionUIntTraits	ADT/PointerUnion.h	/^  class PointerUnionUIntTraits {$/;"	c	namespace:llvm
PointerVal	ExecutionEngine/GenericValue.h	/^    PointerTy       PointerVal;$/;"	m	union:llvm::GenericValue::__anon52
Pointer_AddressSpace	Intrinsics.h	/^      unsigned Pointer_AddressSpace;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon60
Pointers	DataLayout.h	/^  DenseMap<unsigned, PointerAlignElem> Pointers;$/;"	m	class:llvm::DataLayout
Pool	Support/StringPool.h	/^      StringPool *Pool;  \/\/\/< So the string can remove itself.$/;"	m	struct:llvm::StringPool::PooledString
PoolAlignment	CodeGen/MachineConstantPool.h	/^  unsigned PoolAlignment; \/\/\/< The alignment for the pool.$/;"	m	class:llvm::MachineConstantPool
PooledString	Support/StringPool.h	/^      PooledString() : Pool(0), Refcount(0) { }$/;"	f	struct:llvm::StringPool::PooledString
PooledString	Support/StringPool.h	/^    struct PooledString {$/;"	s	class:llvm::StringPool
PooledStringPtr	Support/StringPool.h	/^    PooledStringPtr() : S(0) {}$/;"	f	class:llvm::PooledStringPtr
PooledStringPtr	Support/StringPool.h	/^    PooledStringPtr(const PooledStringPtr &That) : S(That.S) {$/;"	f	class:llvm::PooledStringPtr
PooledStringPtr	Support/StringPool.h	/^    explicit PooledStringPtr(entry_t *E) : S(E) {$/;"	f	class:llvm::PooledStringPtr
PooledStringPtr	Support/StringPool.h	/^  class PooledStringPtr {$/;"	c	namespace:llvm
PopBlockScope	Bitcode/BitstreamReader.h	/^  void PopBlockScope() {$/;"	f	class:llvm::BitstreamCursor
PopSection	MC/MCStreamer.h	/^    bool PopSection() {$/;"	f	class:llvm::MCStreamer
PopulateLoopsDFS	Analysis/LoopInfoImpl.h	/^  PopulateLoopsDFS(LoopInfoBase<BlockT, LoopT> *li):$/;"	f	class:llvm::__anon30::PopulateLoopsDFS
PopulateLoopsDFS	Analysis/LoopInfoImpl.h	/^class PopulateLoopsDFS {$/;"	c	namespace:llvm::__anon30
PosPart	Analysis/DependenceAnalysis.h	/^      const SCEV *PosPart;$/;"	m	struct:llvm::DependenceAnalysis::CoefficientInfo
Position	Support/CommandLine.h	/^  unsigned Position;      \/\/ Position of last occurrence of the option$/;"	m	class:llvm::cl::Option
Position	Support/PathV2.h	/^  size_t    Position;  \/\/\/< The iterators current position within Path.$/;"	m	class:llvm::sys::path::const_iterator
Positional	Support/CommandLine.h	/^  Positional       = 0x01,     \/\/ Is a positional argument, no '-' required$/;"	e	enum:llvm::cl::FormattingFlags
PositionalEatsArgs	Support/CommandLine.h	/^  PositionalEatsArgs = 0x02,  \/\/ Should this positional cl::list eat -args?$/;"	e	enum:llvm::cl::MiscFlags
Positions	Support/CommandLine.h	/^  std::vector<unsigned> Positions;$/;"	m	class:llvm::cl::bits
Positions	Support/CommandLine.h	/^  std::vector<unsigned> Positions;$/;"	m	class:llvm::cl::list
PosixZeroTime	Support/TimeValue.h	/^    static const TimeValue PosixZeroTime;$/;"	m	class:llvm::sys::TimeValue
PossibleRelocationsTy	Constant.h	/^  enum PossibleRelocationsTy {$/;"	g	class:llvm::Constant
PossiblyExactOperator	Operator.h	/^class PossiblyExactOperator : public Operator {$/;"	c	namespace:llvm
PossiblyExactOperatorOptionalFlags	Bitcode/LLVMBitCodes.h	/^  enum PossiblyExactOperatorOptionalFlags {$/;"	g	namespace:llvm::bitc
PostBlocks	Analysis/LoopIterator.h	/^  std::vector<BasicBlock*> PostBlocks;$/;"	m	class:llvm::LoopBlocksDFS
PostCall	CodeGen/GCMetadata.h	/^      PostCall \/\/\/< Instr is the return address of a call.$/;"	e	enum:llvm::GC::PointKind
PostDominatedByUnreachable	Analysis/BranchProbabilityInfo.h	/^  SmallPtrSet<BasicBlock *, 16> PostDominatedByUnreachable;$/;"	m	class:llvm::BranchProbabilityInfo
PostDominatorTree	Analysis/PostDominators.h	/^  PostDominatorTree() : FunctionPass(ID) {$/;"	f	struct:llvm::PostDominatorTree
PostDominatorTree	Analysis/PostDominators.h	/^struct PostDominatorTree : public FunctionPass {$/;"	s	namespace:llvm
PostIncLoopSet	Analysis/ScalarEvolutionNormalization.h	/^typedef SmallPtrSet<const Loop *, 2> PostIncLoopSet;$/;"	t	namespace:llvm
PostIncLoops	Analysis/IVUsers.h	/^  PostIncLoopSet PostIncLoops;$/;"	m	class:llvm::IVStrideUse
PostIncLoops	Analysis/ScalarEvolutionExpander.h	/^    PostIncLoopSet PostIncLoops;$/;"	m	class:llvm::SCEVExpander
PostNumbers	Analysis/LoopIterator.h	/^  DenseMap<BasicBlock*, unsigned> PostNumbers;$/;"	m	class:llvm::LoopBlocksDFS
PostRAMachineLICMID	CodeGen/Passes.h	/^  static char PostRAMachineLICMID;$/;"	m	class:llvm::TargetPassConfig
PostprocessISelDAG	CodeGen/SelectionDAGISel.h	/^  virtual void PostprocessISelDAG() {}$/;"	f	class:llvm::SelectionDAGISel
Pow2DivIsCheap	Target/TargetLowering.h	/^  bool Pow2DivIsCheap;$/;"	m	class:llvm::TargetLowering
Pow2LenOnly	Transforms/Vectorize.h	/^  bool Pow2LenOnly;$/;"	m	struct:llvm::VectorizeConfig
PreAllocated	CodeGen/MachineFrameInfo.h	/^    bool PreAllocated;$/;"	m	struct:llvm::MachineFrameInfo::StackObject
PreCall	CodeGen/GCMetadata.h	/^      PreCall, \/\/\/< Instr is a call instruction.$/;"	e	enum:llvm::GC::PointKind
PredCache	Analysis/MemoryDependenceAnalysis.h	/^    OwningPtr<PredIteratorCache> PredCache;$/;"	m	class:llvm::MemoryDependenceAnalysis
PredIterator	Support/CFG.h	/^  PredIterator() {}$/;"	f	class:llvm::PredIterator
PredIterator	Support/CFG.h	/^  explicit inline PredIterator(Ptr *bb) : It(bb->use_begin()) {$/;"	f	class:llvm::PredIterator
PredIterator	Support/CFG.h	/^  inline PredIterator(Ptr *bb, bool) : It(bb->use_end()) {}$/;"	f	class:llvm::PredIterator
PredIterator	Support/CFG.h	/^class PredIterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
PredIteratorCache	Support/PredIteratorCache.h	/^  class PredIteratorCache {$/;"	c	namespace:llvm
Predecessors	Analysis/Interval.h	/^  std::vector<BasicBlock*> Predecessors;$/;"	m	class:llvm::Interval
Predecessors	CodeGen/MachineBasicBlock.h	/^  std::vector<MachineBasicBlock *> Predecessors;$/;"	m	class:llvm::MachineBasicBlock
Predicable	MC/MCInstrDesc.h	/^    Predicable,$/;"	e	enum:llvm::MCID::__anon69
Predicate	InstrTypes.h	/^  enum Predicate {$/;"	g	class:llvm::CmpInst
Predicate	MC/MCInstrDesc.h	/^    Predicate,$/;"	e	enum:llvm::MCOI::OperandFlags
Predicate	Support/PatternMatch.h	/^  PredicateTy &Predicate;$/;"	m	struct:llvm::PatternMatch::CmpClass_match
Preds	CodeGen/ScheduleDAG.h	/^    SmallVector<SDep, 4> Preds;  \/\/ All sunit predecessors.$/;"	m	class:llvm::SUnit
Preds	Transforms/Utils/SSAUpdaterImpl.h	/^    BBInfo **Preds;    \/\/ Array[NumPreds] of predecessor blocks.$/;"	m	class:llvm::SSAUpdaterImpl::BBInfo
PrefAlign	DataLayout.h	/^  unsigned            PrefAlign;      \/\/\/< Pref. alignment for this type\/bitw$/;"	m	struct:llvm::PointerAlignElem
PrefAlign	DataLayout.h	/^  unsigned PrefAlign    : 16; \/\/\/< Pref. alignment for this type\/bitw$/;"	m	struct:llvm::LayoutAlignElem
PrefFunctionAlignment	Target/TargetLowering.h	/^  unsigned PrefFunctionAlignment;$/;"	m	class:llvm::TargetLowering
PrefLoopAlignment	Target/TargetLowering.h	/^  unsigned PrefLoopAlignment;$/;"	m	class:llvm::TargetLowering
Preference	Target/TargetLowering.h	/^    enum Preference {$/;"	g	namespace:llvm::Sched
Prefix	Support/CommandLine.h	/^  Prefix           = 0x02,     \/\/ Can this option directly prefix its value?$/;"	e	enum:llvm::cl::FormattingFlags
Prefix	TableGen/Record.h	/^  unsigned Prefix;$/;"	m	class:llvm::RecordVal
PreprocessISelDAG	CodeGen/SelectionDAGISel.h	/^  virtual void PreprocessISelDAG() {}$/;"	f	class:llvm::SelectionDAGISel
PreserveSource	Linker.h	/^      PreserveSource = 1 \/\/ Preserve the source module.$/;"	e	enum:llvm::Linker::LinkerMode
Preserved	PassAnalysisSupport.h	/^  VectorType Required, RequiredTransitive, Preserved;$/;"	m	class:llvm::AnalysisUsage
PreservesAll	PassAnalysisSupport.h	/^  bool PreservesAll;$/;"	m	class:llvm::AnalysisUsage
PressureElement	CodeGen/RegisterPressure.h	/^  PressureElement(): PSetID(~0U), UnitIncrease(0) {}$/;"	f	struct:llvm::PressureElement
PressureElement	CodeGen/RegisterPressure.h	/^  PressureElement(unsigned id, int inc): PSetID(id), UnitIncrease(inc) {}$/;"	f	struct:llvm::PressureElement
PressureElement	CodeGen/RegisterPressure.h	/^struct PressureElement {$/;"	s	namespace:llvm
PrettyStackTraceEntry	Support/PrettyStackTrace.h	/^  class PrettyStackTraceEntry {$/;"	c	namespace:llvm
PrettyStackTraceProgram	Support/PrettyStackTrace.h	/^    PrettyStackTraceProgram(int argc, const char * const*argv)$/;"	f	class:llvm::PrettyStackTraceProgram
PrettyStackTraceProgram	Support/PrettyStackTrace.h	/^  class PrettyStackTraceProgram : public PrettyStackTraceEntry {$/;"	c	namespace:llvm
PrettyStackTraceString	Support/PrettyStackTrace.h	/^    PrettyStackTraceString(const char *str) : Str(str) {}$/;"	f	class:llvm::PrettyStackTraceString
PrettyStackTraceString	Support/PrettyStackTrace.h	/^  class PrettyStackTraceString : public PrettyStackTraceEntry {$/;"	c	namespace:llvm
Prev	ADT/ilist_node.h	/^  NodeTy *Prev;$/;"	m	class:llvm::ilist_half_node
Prev	CodeGen/MachineOperand.h	/^      MachineOperand *Prev;   \/\/ Access list for register. See MRI.$/;"	m	struct:llvm::MachineOperand::__anon36::__anon37
Prev	CodeGen/SelectionDAGNodes.h	/^  SDUse **Prev, *Next;$/;"	m	class:llvm::SDUse
Prev	Support/Recycler.h	/^  RecyclerStruct *Prev, *Next;$/;"	m	struct:llvm::RecyclerStruct
Prev	Support/Registry.h	/^      listener *Prev, *Next;$/;"	m	class:llvm::Registry::listener
Prev	Support/Timer.h	/^  Timer **Prev, *Next;   \/\/ Doubly linked list of timers in the group.$/;"	m	class:llvm::Timer
Prev	Support/Timer.h	/^  TimerGroup **Prev, *Next; \/\/ Doubly linked list of TimerGroup's.$/;"	m	class:llvm::TimerGroup
Prev	Use.h	/^  PointerIntPair<Use**, 2, PrevPtrTag> Prev;$/;"	m	class:llvm::Use
PrevAbbrevs	Bitcode/BitstreamReader.h	/^    std::vector<BitCodeAbbrev*> PrevAbbrevs;$/;"	m	struct:llvm::BitstreamCursor::Block
PrevAbbrevs	Bitcode/BitstreamWriter.h	/^    std::vector<BitCodeAbbrev*> PrevAbbrevs;$/;"	m	struct:llvm::BitstreamWriter::Block
PrevCodeSize	Bitcode/BitstreamReader.h	/^    unsigned PrevCodeSize;$/;"	m	struct:llvm::BitstreamCursor::Block
PrevCodeSize	Bitcode/BitstreamWriter.h	/^    unsigned PrevCodeSize;$/;"	m	struct:llvm::BitstreamWriter::Block
PrevInList	Analysis/AliasSetTracker.h	/^    PointerRec **PrevInList, *NextInList;$/;"	m	class:llvm::AliasSet::PointerRec
PrevPair	Support/ValueHandle.h	/^  PointerIntPair<ValueHandleBase**, 2, HandleBaseKind> PrevPair;$/;"	m	class:llvm::ValueHandleBase
PrevPtrTag	Use.h	/^  enum PrevPtrTag { zeroDigitTag$/;"	g	class:llvm::Use
PrevScope	ADT/ScopedHashTable.h	/^  ScopedHashTableScope *PrevScope;$/;"	m	class:llvm::ScopedHashTableScope
PrintBB	Analysis/RegionInfo.h	/^  enum PrintStyle { PrintNone, PrintBB, PrintRN  };$/;"	e	enum:llvm::Region::PrintStyle
PrintDomTree	Analysis/Dominators.h	/^inline void PrintDomTree(const DomTreeNodeBase<NodeT> *N, raw_ostream &o,$/;"	f	namespace:llvm
PrintMessageAction	Analysis/Verifier.h	/^  PrintMessageAction,   \/\/\/< verifyModule will print to stderr and return true$/;"	e	enum:llvm::VerifierFailureAction
PrintNone	Analysis/RegionInfo.h	/^  enum PrintStyle { PrintNone, PrintBB, PrintRN  };$/;"	e	enum:llvm::Region::PrintStyle
PrintRN	Analysis/RegionInfo.h	/^  enum PrintStyle { PrintNone, PrintBB, PrintRN  };$/;"	e	enum:llvm::Region::PrintStyle
PrintReg	Target/TargetRegisterInfo.h	/^  PrintReg(unsigned reg, const TargetRegisterInfo *tri = 0, unsigned subidx = 0)$/;"	f	class:llvm::PrintReg
PrintReg	Target/TargetRegisterInfo.h	/^class PrintReg {$/;"	c	namespace:llvm
PrintRegUnit	Target/TargetRegisterInfo.h	/^  PrintRegUnit(unsigned unit, const TargetRegisterInfo *tri)$/;"	f	class:llvm::PrintRegUnit
PrintRegUnit	Target/TargetRegisterInfo.h	/^class PrintRegUnit {$/;"	c	namespace:llvm
PrintStats	Support/Allocator.h	/^  void PrintStats() const {}$/;"	f	class:llvm::MallocAllocator
PrintStats	Support/Recycler.h	/^  void PrintStats() {$/;"	f	class:llvm::Recycler
PrintStats	Support/RecyclingAllocator.h	/^  void PrintStats() { Base.PrintStats(); }$/;"	f	class:llvm::RecyclingAllocator
PrintStyle	Analysis/RegionInfo.h	/^  enum PrintStyle { PrintNone, PrintBB, PrintRN  };$/;"	g	class:llvm::Region
PriorityQueue	ADT/PriorityQueue.h	/^  PriorityQueue(Iterator begin, Iterator end,$/;"	f	class:llvm::PriorityQueue
PriorityQueue	ADT/PriorityQueue.h	/^  explicit PriorityQueue(const Compare &compare = Compare(),$/;"	f	class:llvm::PriorityQueue
PriorityQueue	ADT/PriorityQueue.h	/^class PriorityQueue : public std::priority_queue<T, Sequence, Compare> {$/;"	c	namespace:llvm
Private	Target/Mangler.h	/^    Private,               \/\/\/< Emit "private" prefix before each symbol.$/;"	e	enum:llvm::Mangler::ManglerPrefixTy
PrivateGlobalPrefix	MC/MCAsmInfo.h	/^    const char *PrivateGlobalPrefix;         \/\/ Defaults to "."$/;"	m	class:llvm::MCAsmInfo
PrivateLinkage	GlobalValue.h	/^    PrivateLinkage,     \/\/\/< Like Internal, but omit from symbol table.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
ProcDesc	MC/MCSubtargetInfo.h	/^  const SubtargetFeatureKV *ProcDesc;  \/\/ Processor descriptions$/;"	m	class:llvm::MCSubtargetInfo
ProcFeatures	MC/MCSubtargetInfo.h	/^  const SubtargetFeatureKV *ProcFeatures;  \/\/ Processor feature list$/;"	m	class:llvm::MCSubtargetInfo
ProcID	MC/MCSchedule.h	/^  unsigned ProcID;$/;"	m	class:llvm::MCSchedModel
ProcResourceIdx	MC/MCSchedule.h	/^  unsigned ProcResourceIdx;$/;"	m	struct:llvm::MCWriteProcResEntry
ProcResourceTable	MC/MCSchedule.h	/^  const MCProcResourceDesc *ProcResourceTable;$/;"	m	class:llvm::MCSchedModel
ProcSchedModels	MC/MCSubtargetInfo.h	/^  const SubtargetInfoKV *ProcSchedModels;$/;"	m	class:llvm::MCSubtargetInfo
Process	Support/Process.h	/^  class Process {$/;"	c	namespace:llvm::sys
ProcessInterval	Analysis/IntervalIterator.h	/^  bool ProcessInterval(NodeTy *Node) {$/;"	f	class:llvm::IntervalIterator
ProcessNode	Analysis/IntervalIterator.h	/^  void ProcessNode(Interval *Int, NodeTy *Node) {$/;"	f	class:llvm::IntervalIterator
Processed	Analysis/IVUsers.h	/^  SmallPtrSet<Instruction*,16> Processed;$/;"	m	class:llvm::IVUsers
Profile	ADT/FoldingSet.h	/^  static inline void Profile(T *X, FoldingSetNodeID &ID) {$/;"	f	struct:llvm::FoldingSetTrait
Profile	ADT/FoldingSet.h	/^  static void Profile(T &X, FoldingSetNodeID &ID) {$/;"	f	struct:llvm::DefaultFoldingSetTrait
Profile	ADT/FoldingSet.h	/^  static void Profile(T &X, FoldingSetNodeID &ID, Ctx Context) {$/;"	f	struct:llvm::DefaultContextualFoldingSetTrait
Profile	ADT/FoldingSet.h	/^  static void Profile(const T &X, FoldingSetNodeID &ID) {$/;"	f	struct:llvm::DefaultFoldingSetTrait
Profile	ADT/FoldingSet.h	/^  void Profile(FoldingSetNodeID &ID) const { $/;"	f	class:llvm::FastFoldingSetNode
Profile	ADT/FoldingSet.h	/^  void Profile(FoldingSetNodeID &ID) { FoldingSetTrait<T>::Profile(data, ID); }$/;"	f	class:llvm::FoldingSetNodeWrapper
Profile	ADT/ImmutableIntervalMap.h	/^  static void Profile(FoldingSetNodeID &ID, value_type_ref V) {$/;"	f	struct:llvm::ImutIntervalInfo
Profile	ADT/ImmutableList.h	/^  static inline void Profile(FoldingSetNodeID& ID, const T& H,$/;"	f	class:llvm::ImmutableListImpl
Profile	ADT/ImmutableList.h	/^  void Profile(FoldingSetNodeID& ID) const {$/;"	f	class:llvm::ImmutableList
Profile	ADT/ImmutableList.h	/^  void Profile(FoldingSetNodeID& ID) {$/;"	f	class:llvm::ImmutableListImpl
Profile	ADT/ImmutableMap.h	/^  inline void Profile(FoldingSetNodeID& ID) const {$/;"	f	class:llvm::ImmutableMap
Profile	ADT/ImmutableMap.h	/^  inline void Profile(FoldingSetNodeID& ID) const {$/;"	f	class:llvm::ImmutableMapRef
Profile	ADT/ImmutableMap.h	/^  static inline void Profile(FoldingSetNodeID& ID, const ImmutableMap& M) {$/;"	f	class:llvm::ImmutableMap
Profile	ADT/ImmutableMap.h	/^  static inline void Profile(FoldingSetNodeID& ID, const ImmutableMapRef &M) {$/;"	f	class:llvm::ImmutableMapRef
Profile	ADT/ImmutableMap.h	/^  static inline void Profile(FoldingSetNodeID& ID, value_type_ref V) {$/;"	f	struct:llvm::ImutKeyValueInfo
Profile	ADT/ImmutableSet.h	/^  inline void Profile(FoldingSetNodeID& ID) const {$/;"	f	class:llvm::ImmutableSet
Profile	ADT/ImmutableSet.h	/^  inline void Profile(FoldingSetNodeID& ID) const {$/;"	f	class:llvm::ImmutableSetRef
Profile	ADT/ImmutableSet.h	/^  static inline void Profile(FoldingSetNodeID &ID, value_type_ref X) {$/;"	f	struct:llvm::ImutProfileInfo
Profile	ADT/ImmutableSet.h	/^  static inline void Profile(FoldingSetNodeID& ID, const ImmutableSet& S) {$/;"	f	class:llvm::ImmutableSet
Profile	ADT/ImmutableSet.h	/^  static inline void Profile(FoldingSetNodeID& ID, const ImmutableSetRef& S) {$/;"	f	class:llvm::ImmutableSetRef
Profile	ADT/ImmutableSet.h	/^  static inline void Profile(FoldingSetNodeID& ID, value_type_ref X) {$/;"	f	struct:llvm::ImutProfileInfo
Profile	ADT/ImmutableSet.h	/^  static inline void Profile(FoldingSetNodeID& ID, value_type_ref X) {$/;"	f	struct:llvm::ImutProfileInteger
Profile	Analysis/ScalarEvolution.h	/^    static void Profile(const SCEV &X, FoldingSetNodeID& ID) {$/;"	f	struct:llvm::FoldingSetTrait
ProfileData	Analysis/ProfileDataLoader.h	/^typedef ProfileDataT<Function, BasicBlock> ProfileData;$/;"	t	namespace:llvm
ProfileDataLoader	Analysis/ProfileDataLoader.h	/^class ProfileDataLoader {$/;"	c	namespace:llvm
ProfileDataT	Analysis/ProfileDataLoader.h	/^class ProfileDataT {$/;"	c	namespace:llvm
ProfileInfo	Analysis/ProfileInfo.h	/^  typedef ProfileInfoT<Function, BasicBlock> ProfileInfo;$/;"	t	namespace:llvm
ProfileInfoLoader	Analysis/ProfileInfoLoader.h	/^class ProfileInfoLoader {$/;"	c	namespace:llvm
ProfileInfoT	Analysis/ProfileInfo.h	/^  class ProfileInfoT {$/;"	c	namespace:llvm
ProfilePath	Analysis/PathProfileInfo.h	/^class ProfilePath {$/;"	c	namespace:llvm
ProfilePathBlockIterator	Analysis/PathProfileInfo.h	/^typedef std::vector<BasicBlock*>::iterator ProfilePathBlockIterator;$/;"	t	namespace:llvm
ProfilePathBlockVector	Analysis/PathProfileInfo.h	/^typedef std::vector<BasicBlock*> ProfilePathBlockVector;$/;"	t	namespace:llvm
ProfilePathEdge	Analysis/PathProfileInfo.h	/^class ProfilePathEdge {$/;"	c	namespace:llvm
ProfilePathEdgeIterator	Analysis/PathProfileInfo.h	/^typedef std::vector<ProfilePathEdge>::iterator ProfilePathEdgeIterator;$/;"	t	namespace:llvm
ProfilePathEdgeVector	Analysis/PathProfileInfo.h	/^typedef std::vector<ProfilePathEdge> ProfilePathEdgeVector;$/;"	t	namespace:llvm
ProfilePathIterator	Analysis/PathProfileInfo.h	/^typedef std::map<unsigned int,ProfilePath*>::iterator ProfilePathIterator;$/;"	t	namespace:llvm
ProfilePathMap	Analysis/PathProfileInfo.h	/^typedef std::map<unsigned int,ProfilePath*> ProfilePathMap;$/;"	t	namespace:llvm
ProfilingArray	Analysis/ProfileInfoTypes.h	/^  ProfilingArray = 1,$/;"	e	enum:ProfilingStorageType
ProfilingHash	Analysis/ProfileInfoTypes.h	/^  ProfilingHash = 2$/;"	e	enum:ProfilingStorageType
ProfilingStorageType	Analysis/ProfileInfoTypes.h	/^enum ProfilingStorageType {$/;"	g
ProfilingType	Analysis/ProfileDataTypes.h	/^enum ProfilingType {$/;"	g
Program	Support/Program.h	/^  class Program {$/;"	c	namespace:llvm::sys
ProgramName	Linker.h	/^    std::string ProgramName; \/\/\/< Name of the program being linked$/;"	m	class:llvm::Linker
PrologEnd	MC/MCWin64EH.h	/^    MCSymbol *PrologEnd;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
Prologue	CodeGen/CallingConvLower.h	/^typedef enum { Unknown, Prologue, Call } ParmContext;$/;"	e	enum:llvm::__anon47
Promote	Target/TargetLowering.h	/^    Promote,    \/\/ This operation should be executed in a larger type.$/;"	e	enum:llvm::TargetLowering::LegalizeAction
PromoteToType	Target/TargetLowering.h	/^    PromoteToType;$/;"	m	class:llvm::TargetLowering
ProperSubClass	CodeGen/RegisterClassInfo.h	/^    bool ProperSubClass;$/;"	m	struct:llvm::RegisterClassInfo::RCInfo
ProperlyDominatesBlock	Analysis/ScalarEvolution.h	/^      ProperlyDominatesBlock \/\/\/< The SCEV properly dominates the block.$/;"	e	enum:llvm::ScalarEvolution::BlockDisposition
ProtectedVisibility	GlobalValue.h	/^    ProtectedVisibility     \/\/\/< The GV is protected$/;"	e	enum:llvm::GlobalValue::VisibilityTypes
ProtectedVisibilityAttr	MC/MCAsmInfo.h	/^    MCSymbolAttr ProtectedVisibilityAttr;    \/\/ Defaults to MCSA_Protected$/;"	m	class:llvm::MCAsmInfo
ProtectionFlags	Support/Memory.h	/^    enum ProtectionFlags {$/;"	g	class:llvm::sys::Memory
ProtoName	Transforms/Utils/SSAUpdater.h	/^  std::string ProtoName;$/;"	m	class:llvm::SSAUpdater
ProtoType	Transforms/Utils/SSAUpdater.h	/^  Type *ProtoType;$/;"	m	class:llvm::SSAUpdater
Pseudo	MC/MCInstrDesc.h	/^    Pseudo,$/;"	e	enum:llvm::MCID::__anon69
PseudoSourceValue	CodeGen/PseudoSourceValue.h	/^  class PseudoSourceValue : public Value {$/;"	c	namespace:llvm
PseudoSourceValueVal	Value.h	/^    PseudoSourceValueVal,     \/\/ This is an instance of PseudoSourceValue$/;"	e	enum:llvm::Value::ValueTy
Ptr	ADT/DenseMap.h	/^  pointer Ptr, End;$/;"	m	class:llvm::DenseMapIterator
Ptr	ADT/FoldingSet.h	/^  void *Ptr;$/;"	m	class:llvm::FoldingSetBucketIteratorImpl
Ptr	ADT/NullablePtr.h	/^  T *Ptr;$/;"	m	class:llvm::NullablePtr
Ptr	ADT/OwningPtr.h	/^  T *Ptr;$/;"	m	class:llvm::OwningArrayPtr
Ptr	ADT/OwningPtr.h	/^  T *Ptr;$/;"	m	class:llvm::OwningPtr
Ptr	ADT/StringMap.h	/^  StringMapEntryBase **Ptr;$/;"	m	class:llvm::StringMapConstIterator
Ptr	Analysis/AliasAnalysis.h	/^    const Value *Ptr;$/;"	m	struct:llvm::AliasAnalysis::Location
Ptr	Support/ManagedStatic.h	/^  mutable void *Ptr;$/;"	m	class:llvm::ManagedStaticBase
Ptr	Support/SMLoc.h	/^  const char *Ptr;$/;"	m	class:llvm::SMLoc
PtrInfo	CodeGen/MachineMemOperand.h	/^  MachinePointerInfo PtrInfo;$/;"	m	class:llvm::MachineMemOperand
PtrList	Analysis/AliasSetTracker.h	/^  PointerRec *PtrList, **PtrListEnd;  \/\/ Doubly linked list of nodes.$/;"	m	class:llvm::AliasSet
PtrListEnd	Analysis/AliasSetTracker.h	/^  PointerRec *PtrList, **PtrListEnd;  \/\/ Doubly linked list of nodes.$/;"	m	class:llvm::AliasSet
PtrSetTy	Analysis/MemoryBuiltins.h	/^  typedef SmallPtrSet<const Value*, 8> PtrSetTy;$/;"	t	class:llvm::ObjectSizeOffsetEvaluator
PtrToIntInst	Instructions.h	/^class PtrToIntInst : public CastInst {$/;"	c	namespace:llvm
PtrTraits	ADT/SmallPtrSet.h	/^  typedef PointerLikeTypeTraits<PtrTy> PtrTraits;$/;"	t	class:llvm::SmallPtrSetIterator
PtrTraits	ADT/SmallPtrSet.h	/^  typedef PointerLikeTypeTraits<PtrType> PtrTraits;$/;"	t	class:llvm::SmallPtrSet
PushSection	MC/MCStreamer.h	/^    void PushSection() {$/;"	f	class:llvm::MCStreamer
QueryType	CodeGen/MachineInstr.h	/^  enum QueryType {$/;"	g	class:llvm::MachineInstr
Queue	CodeGen/LatencyPriorityQueue.h	/^    std::vector<SUnit*> Queue;$/;"	m	class:llvm::LatencyPriorityQueue
Queue	CodeGen/MachineScheduler.h	/^  std::vector<SUnit*> Queue;$/;"	m	class:llvm::ReadyQueue
Queue	CodeGen/ResourcePriorityQueue.h	/^    std::vector<SUnit*> Queue;$/;"	m	class:llvm::ResourcePriorityQueue
QuietErrors	Linker.h	/^      QuietErrors   = 4  \/\/\/< Don't print errors to stderr.$/;"	e	enum:llvm::Linker::ControlFlags
QuietWarnings	Linker.h	/^      QuietWarnings = 2, \/\/\/< Don't print warnings to stderr.$/;"	e	enum:llvm::Linker::ControlFlags
R	Support/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::BinOp2_match
R	Support/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::BinaryOp_match
R	Support/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::CmpClass_match
R	Support/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::MaxMin_match
R	Support/PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::SelectClass_match
RAReg	MC/MCRegisterInfo.h	/^  unsigned RAReg;                             \/\/ Return address register$/;"	m	class:llvm::MCRegisterInfo
RBrac	MC/MCParser/MCAsmLexer.h	/^    LParen, RParen, LBrac, RBrac, LCurly, RCurly,$/;"	e	enum:llvm::AsmToken::TokenKind
RCI	CodeGen/RegisterPressure.h	/^  const RegisterClassInfo   *RCI;$/;"	m	class:llvm::RegPressureTracker
RCInfo	CodeGen/RegisterClassInfo.h	/^    RCInfo() : Tag(0), NumRegs(0), ProperSubClass(false) {}$/;"	f	struct:llvm::RegisterClassInfo::RCInfo
RCInfo	CodeGen/RegisterClassInfo.h	/^  struct RCInfo {$/;"	s	class:llvm::RegisterClassInfo
RCMaskWords	Target/TargetRegisterInfo.h	/^  const unsigned RCMaskWords;$/;"	m	class:llvm::SuperRegClassIterator
RCurly	MC/MCParser/MCAsmLexer.h	/^    LParen, RParen, LBrac, RBrac, LCurly, RCurly,$/;"	e	enum:llvm::AsmToken::TokenKind
RDIV	Analysis/DependenceAnalysis.h	/^      enum ClassificationKind { ZIV, SIV, RDIV, MIV, NonLinear } Classification;$/;"	e	enum:llvm::DependenceAnalysis::Subscript::ClassificationKind
READCYCLECOUNTER	CodeGen/ISDOpcodes.h	/^    READCYCLECOUNTER,$/;"	e	enum:llvm::ISD::NodeType
RED	Support/raw_ostream.h	/^    RED,$/;"	e	enum:llvm::raw_ostream::Colors
REFERENCE_ONLY	Support/circular_raw_ostream.h	/^    static const bool REFERENCE_ONLY = false;$/;"	m	class:llvm::circular_raw_ostream
REG_SEQUENCE	Target/TargetOpcodes.h	/^    REG_SEQUENCE = 12,$/;"	e	enum:llvm::TargetOpcode::__anon139
REM_F32	CodeGen/RuntimeLibcalls.h	/^    REM_F32,$/;"	e	enum:llvm::RTLIB::Libcall
REM_F64	CodeGen/RuntimeLibcalls.h	/^    REM_F64,$/;"	e	enum:llvm::RTLIB::Libcall
REM_F80	CodeGen/RuntimeLibcalls.h	/^    REM_F80,$/;"	e	enum:llvm::RTLIB::Libcall
REM_PPCF128	CodeGen/RuntimeLibcalls.h	/^    REM_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
RESOURCE_PRIORITY_QUEUE_H	CodeGen/ResourcePriorityQueue.h	18;"	d
RETURNADDR	CodeGen/ISDOpcodes.h	/^    FRAMEADDR, RETURNADDR,$/;"	e	enum:llvm::ISD::NodeType
RF_IgnoreMissingEntries	Transforms/Utils/ValueMapper.h	/^    RF_IgnoreMissingEntries = 2$/;"	e	enum:llvm::RemapFlags
RF_NoModuleLevelChanges	Transforms/Utils/ValueMapper.h	/^    RF_NoModuleLevelChanges = 1,$/;"	e	enum:llvm::RemapFlags
RF_None	Transforms/Utils/ValueMapper.h	/^    RF_None = 0,$/;"	e	enum:llvm::RemapFlags
RF_Scattered	Object/MachOFormat.h	/^    RF_Scattered = 0x80000000$/;"	e	enum:llvm::object::macho::RelocationFlags
RGPassManager	Analysis/RegionPass.h	/^class RGPassManager : public FunctionPass, public PMDataManager {$/;"	c	namespace:llvm
RHS	ADT/Twine.h	/^    Child RHS;$/;"	m	class:llvm::Twine
RHS	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *RHS;$/;"	m	class:llvm::SCEVUDivExpr
RHS	MC/MCExpr.h	/^  const MCExpr *LHS, *RHS;$/;"	m	class:llvm::MCBinaryExpr
RHS	TableGen/Record.h	/^  Init *LHS, *MHS, *RHS;$/;"	m	class:llvm::TernOpInit
RHS	TableGen/Record.h	/^  Init *LHS, *RHS;$/;"	m	class:llvm::BinOpInit
RHSKind	ADT/Twine.h	/^    unsigned char RHSKind;$/;"	m	class:llvm::Twine
RI	Analysis/RegionInfo.h	/^  RegionInfo* RI;$/;"	m	class:llvm::Region
RI	Analysis/RegionPass.h	/^  RegionInfo *RI;$/;"	m	class:llvm::RGPassManager
RINT_F32	CodeGen/RuntimeLibcalls.h	/^    RINT_F32,$/;"	e	enum:llvm::RTLIB::Libcall
RINT_F64	CodeGen/RuntimeLibcalls.h	/^    RINT_F64,$/;"	e	enum:llvm::RTLIB::Libcall
RINT_F80	CodeGen/RuntimeLibcalls.h	/^    RINT_F80,$/;"	e	enum:llvm::RTLIB::Libcall
RINT_PPCF128	CodeGen/RuntimeLibcalls.h	/^    RINT_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
RIT_ARM_Branch24Bit	Object/MachOFormat.h	/^    RIT_ARM_Branch24Bit = 5,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeARM
RIT_ARM_Half	Object/MachOFormat.h	/^    RIT_ARM_Half = 8,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeARM
RIT_ARM_HalfDifference	Object/MachOFormat.h	/^    RIT_ARM_HalfDifference = 9$/;"	e	enum:llvm::object::macho::RelocationInfoTypeARM
RIT_ARM_LocalDifference	Object/MachOFormat.h	/^    RIT_ARM_LocalDifference = 3,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeARM
RIT_ARM_PreboundLazyPointer	Object/MachOFormat.h	/^    RIT_ARM_PreboundLazyPointer = 4,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeARM
RIT_ARM_ThumbBranch22Bit	Object/MachOFormat.h	/^    RIT_ARM_ThumbBranch22Bit = 6,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeARM
RIT_ARM_ThumbBranch32Bit	Object/MachOFormat.h	/^    RIT_ARM_ThumbBranch32Bit = 7,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeARM
RIT_Difference	Object/MachOFormat.h	/^    RIT_Difference          = 2$/;"	e	enum:llvm::object::macho::RelocationInfoType
RIT_Generic_LocalDifference	Object/MachOFormat.h	/^    RIT_Generic_LocalDifference     = 4,$/;"	e	enum:llvm::object::macho::RelocationInfoType_Generic
RIT_Generic_PreboundLazyPointer	Object/MachOFormat.h	/^    RIT_Generic_PreboundLazyPointer = 3,$/;"	e	enum:llvm::object::macho::RelocationInfoType_Generic
RIT_Generic_TLV	Object/MachOFormat.h	/^    RIT_Generic_TLV                 = 5$/;"	e	enum:llvm::object::macho::RelocationInfoType_Generic
RIT_Pair	Object/MachOFormat.h	/^    RIT_Pair                = 1,$/;"	e	enum:llvm::object::macho::RelocationInfoType
RIT_Vanilla	Object/MachOFormat.h	/^    RIT_Vanilla             = 0,$/;"	e	enum:llvm::object::macho::RelocationInfoType
RIT_X86_64_Branch	Object/MachOFormat.h	/^    RIT_X86_64_Branch     = 2,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RIT_X86_64_GOT	Object/MachOFormat.h	/^    RIT_X86_64_GOT        = 4,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RIT_X86_64_GOTLoad	Object/MachOFormat.h	/^    RIT_X86_64_GOTLoad    = 3,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RIT_X86_64_Signed	Object/MachOFormat.h	/^    RIT_X86_64_Signed     = 1,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RIT_X86_64_Signed1	Object/MachOFormat.h	/^    RIT_X86_64_Signed1    = 6,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RIT_X86_64_Signed2	Object/MachOFormat.h	/^    RIT_X86_64_Signed2    = 7,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RIT_X86_64_Signed4	Object/MachOFormat.h	/^    RIT_X86_64_Signed4    = 8,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RIT_X86_64_Subtractor	Object/MachOFormat.h	/^    RIT_X86_64_Subtractor = 5,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RIT_X86_64_TLV	Object/MachOFormat.h	/^    RIT_X86_64_TLV        = 9$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RIT_X86_64_Unsigned	Object/MachOFormat.h	/^    RIT_X86_64_Unsigned   = 0,$/;"	e	enum:llvm::object::macho::RelocationInfoTypeX86_64
RMWOperations	Bitcode/LLVMBitCodes.h	/^  enum RMWOperations {$/;"	g	namespace:llvm::bitc
RMW_ADD	Bitcode/LLVMBitCodes.h	/^    RMW_ADD = 1,$/;"	e	enum:llvm::bitc::RMWOperations
RMW_AND	Bitcode/LLVMBitCodes.h	/^    RMW_AND = 3,$/;"	e	enum:llvm::bitc::RMWOperations
RMW_MAX	Bitcode/LLVMBitCodes.h	/^    RMW_MAX = 7,$/;"	e	enum:llvm::bitc::RMWOperations
RMW_MIN	Bitcode/LLVMBitCodes.h	/^    RMW_MIN = 8,$/;"	e	enum:llvm::bitc::RMWOperations
RMW_NAND	Bitcode/LLVMBitCodes.h	/^    RMW_NAND = 4,$/;"	e	enum:llvm::bitc::RMWOperations
RMW_OR	Bitcode/LLVMBitCodes.h	/^    RMW_OR = 5,$/;"	e	enum:llvm::bitc::RMWOperations
RMW_SUB	Bitcode/LLVMBitCodes.h	/^    RMW_SUB = 2,$/;"	e	enum:llvm::bitc::RMWOperations
RMW_UMAX	Bitcode/LLVMBitCodes.h	/^    RMW_UMAX = 9,$/;"	e	enum:llvm::bitc::RMWOperations
RMW_UMIN	Bitcode/LLVMBitCodes.h	/^    RMW_UMIN = 10$/;"	e	enum:llvm::bitc::RMWOperations
RMW_XCHG	Bitcode/LLVMBitCodes.h	/^    RMW_XCHG = 0,$/;"	e	enum:llvm::bitc::RMWOperations
RMW_XOR	Bitcode/LLVMBitCodes.h	/^    RMW_XOR = 6,$/;"	e	enum:llvm::bitc::RMWOperations
RNAllocableList	CodeGen/PBQP/Heuristics/Briggs.h	/^      typedef std::list<Graph::NodeItr> RNAllocableList;$/;"	t	class:PBQP::Heuristics::Briggs
RNAllocableListItr	CodeGen/PBQP/Heuristics/Briggs.h	/^      typedef RNAllocableList::iterator RNAllocableListItr;$/;"	t	class:PBQP::Heuristics::Briggs
RNSuccIterator	Analysis/RegionIterator.h	/^  inline RNSuccIterator(NodeType* node) : Node(node),$/;"	f	class:llvm::RNSuccIterator
RNSuccIterator	Analysis/RegionIterator.h	/^  inline RNSuccIterator(NodeType* node)$/;"	f	class:llvm::RNSuccIterator
RNSuccIterator	Analysis/RegionIterator.h	/^  inline RNSuccIterator(NodeType* node, bool) : Node(node),$/;"	f	class:llvm::RNSuccIterator
RNSuccIterator	Analysis/RegionIterator.h	/^  inline RNSuccIterator(NodeType* node, bool)$/;"	f	class:llvm::RNSuccIterator
RNSuccIterator	Analysis/RegionIterator.h	/^class RNSuccIterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
RNSuccIterator	Analysis/RegionIterator.h	/^class RNSuccIterator<FlatIt<NodeType> >$/;"	c	namespace:llvm
RNUnallocableList	CodeGen/PBQP/Heuristics/Briggs.h	/^      typedef std::list<Graph::NodeItr> RNUnallocableList;  $/;"	t	class:PBQP::Heuristics::Briggs
RNUnallocableListItr	CodeGen/PBQP/Heuristics/Briggs.h	/^      typedef RNUnallocableList::iterator RNUnallocableListItr;$/;"	t	class:PBQP::Heuristics::Briggs
ROTL	CodeGen/ISDOpcodes.h	/^    SHL, SRA, SRL, ROTL, ROTR,$/;"	e	enum:llvm::ISD::NodeType
ROTR	CodeGen/ISDOpcodes.h	/^    SHL, SRA, SRL, ROTL, ROTR,$/;"	e	enum:llvm::ISD::NodeType
RPO	Analysis/BlockFrequencyImpl.h	/^  DenseMap<BlockT *, unsigned> RPO;$/;"	m	class:llvm::BlockFrequencyImpl
RPOIterator	Analysis/LoopIterator.h	/^  typedef std::vector<BasicBlock*>::const_reverse_iterator RPOIterator;$/;"	t	class:llvm::LoopBlocksDFS
RPTracker	CodeGen/MachineScheduler.h	/^  RegPressureTracker RPTracker;$/;"	m	class:llvm::ScheduleDAGMI
RParen	MC/MCParser/MCAsmLexer.h	/^    LParen, RParen, LBrac, RBrac, LCurly, RCurly,$/;"	e	enum:llvm::AsmToken::TokenKind
RQ	Analysis/RegionPass.h	/^  std::deque<Region*> RQ;$/;"	m	class:llvm::RGPassManager
RTDyldMemoryManager	ExecutionEngine/RuntimeDyld.h	/^  RTDyldMemoryManager() {}$/;"	f	class:llvm::RTDyldMemoryManager
RTDyldMemoryManager	ExecutionEngine/RuntimeDyld.h	/^class RTDyldMemoryManager {$/;"	c	namespace:llvm
RTEMS	ADT/Triple.h	/^    RTEMS,$/;"	e	enum:llvm::Triple::OSType
RTLIB	CodeGen/RuntimeLibcalls.h	/^namespace RTLIB {$/;"	n	namespace:llvm
RWMutex	Support/RWMutex.h	/^    typedef SmartRWMutex<false> RWMutex;$/;"	t	namespace:llvm::sys
RWMutexImpl	Support/RWMutex.h	/^    class RWMutexImpl$/;"	c	namespace:llvm::sys
R_386_16	Support/ELF.h	/^  R_386_16            = 20,$/;"	e	enum:llvm::ELF::__anon89
R_386_32	Support/ELF.h	/^  R_386_32            = 1,$/;"	e	enum:llvm::ELF::__anon89
R_386_32PLT	Support/ELF.h	/^  R_386_32PLT         = 11,$/;"	e	enum:llvm::ELF::__anon89
R_386_8	Support/ELF.h	/^  R_386_8             = 22,$/;"	e	enum:llvm::ELF::__anon89
R_386_COPY	Support/ELF.h	/^  R_386_COPY          = 5,$/;"	e	enum:llvm::ELF::__anon89
R_386_GLOB_DAT	Support/ELF.h	/^  R_386_GLOB_DAT      = 6,$/;"	e	enum:llvm::ELF::__anon89
R_386_GOT32	Support/ELF.h	/^  R_386_GOT32         = 3,$/;"	e	enum:llvm::ELF::__anon89
R_386_GOTOFF	Support/ELF.h	/^  R_386_GOTOFF        = 9,$/;"	e	enum:llvm::ELF::__anon89
R_386_GOTPC	Support/ELF.h	/^  R_386_GOTPC         = 10,$/;"	e	enum:llvm::ELF::__anon89
R_386_IRELATIVE	Support/ELF.h	/^  R_386_IRELATIVE     = 42,$/;"	e	enum:llvm::ELF::__anon89
R_386_JUMP_SLOT	Support/ELF.h	/^  R_386_JUMP_SLOT     = 7,$/;"	e	enum:llvm::ELF::__anon89
R_386_NONE	Support/ELF.h	/^  R_386_NONE          = 0,$/;"	e	enum:llvm::ELF::__anon89
R_386_NUM	Support/ELF.h	/^  R_386_NUM           = 43$/;"	e	enum:llvm::ELF::__anon89
R_386_PC16	Support/ELF.h	/^  R_386_PC16          = 21,$/;"	e	enum:llvm::ELF::__anon89
R_386_PC32	Support/ELF.h	/^  R_386_PC32          = 2,$/;"	e	enum:llvm::ELF::__anon89
R_386_PC8	Support/ELF.h	/^  R_386_PC8           = 23,$/;"	e	enum:llvm::ELF::__anon89
R_386_PLT32	Support/ELF.h	/^  R_386_PLT32         = 4,$/;"	e	enum:llvm::ELF::__anon89
R_386_RELATIVE	Support/ELF.h	/^  R_386_RELATIVE      = 8,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_DESC	Support/ELF.h	/^  R_386_TLS_DESC      = 41,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_DESC_CALL	Support/ELF.h	/^  R_386_TLS_DESC_CALL = 40,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_DTPMOD32	Support/ELF.h	/^  R_386_TLS_DTPMOD32  = 35,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_DTPOFF32	Support/ELF.h	/^  R_386_TLS_DTPOFF32  = 36,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_GD	Support/ELF.h	/^  R_386_TLS_GD        = 18,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_GD_32	Support/ELF.h	/^  R_386_TLS_GD_32     = 24,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_GD_CALL	Support/ELF.h	/^  R_386_TLS_GD_CALL   = 26,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_GD_POP	Support/ELF.h	/^  R_386_TLS_GD_POP    = 27,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_GD_PUSH	Support/ELF.h	/^  R_386_TLS_GD_PUSH   = 25,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_GOTDESC	Support/ELF.h	/^  R_386_TLS_GOTDESC   = 39,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_GOTIE	Support/ELF.h	/^  R_386_TLS_GOTIE     = 16,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_IE	Support/ELF.h	/^  R_386_TLS_IE        = 15,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_IE_32	Support/ELF.h	/^  R_386_TLS_IE_32     = 33,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_LDM	Support/ELF.h	/^  R_386_TLS_LDM       = 19,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_LDM_32	Support/ELF.h	/^  R_386_TLS_LDM_32    = 28,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_LDM_CALL	Support/ELF.h	/^  R_386_TLS_LDM_CALL  = 30,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_LDM_POP	Support/ELF.h	/^  R_386_TLS_LDM_POP   = 31,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_LDM_PUSH	Support/ELF.h	/^  R_386_TLS_LDM_PUSH  = 29,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_LDO_32	Support/ELF.h	/^  R_386_TLS_LDO_32    = 32,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_LE	Support/ELF.h	/^  R_386_TLS_LE        = 17,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_LE_32	Support/ELF.h	/^  R_386_TLS_LE_32     = 34,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_TPOFF	Support/ELF.h	/^  R_386_TLS_TPOFF     = 14,$/;"	e	enum:llvm::ELF::__anon89
R_386_TLS_TPOFF32	Support/ELF.h	/^  R_386_TLS_TPOFF32   = 37,$/;"	e	enum:llvm::ELF::__anon89
R_ARM_ABS12	Support/ELF.h	/^  R_ARM_ABS12                 = 0x06,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ABS16	Support/ELF.h	/^  R_ARM_ABS16                 = 0x05,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ABS32	Support/ELF.h	/^  R_ARM_ABS32                 = 0x02,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ABS32_NOI	Support/ELF.h	/^  R_ARM_ABS32_NOI             = 0x37,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ABS8	Support/ELF.h	/^  R_ARM_ABS8                  = 0x08,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_PCREL_15_8	Support/ELF.h	/^  R_ARM_ALU_PCREL_15_8        = 0x21,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_PCREL_23_15	Support/ELF.h	/^  R_ARM_ALU_PCREL_23_15       = 0x22,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_PCREL_7_0	Support/ELF.h	/^  R_ARM_ALU_PCREL_7_0         = 0x20,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_PC_G0	Support/ELF.h	/^  R_ARM_ALU_PC_G0             = 0x3a,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_PC_G0_NC	Support/ELF.h	/^  R_ARM_ALU_PC_G0_NC          = 0x39,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_PC_G1	Support/ELF.h	/^  R_ARM_ALU_PC_G1             = 0x3c,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_PC_G1_NC	Support/ELF.h	/^  R_ARM_ALU_PC_G1_NC          = 0x3b,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_PC_G2	Support/ELF.h	/^  R_ARM_ALU_PC_G2             = 0x3d,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_SBREL_19_12_NC	Support/ELF.h	/^  R_ARM_ALU_SBREL_19_12_NC    = 0x24,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_SBREL_27_20_CK	Support/ELF.h	/^  R_ARM_ALU_SBREL_27_20_CK    = 0x25,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_SB_G0	Support/ELF.h	/^  R_ARM_ALU_SB_G0             = 0x47,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_SB_G0_NC	Support/ELF.h	/^  R_ARM_ALU_SB_G0_NC          = 0x46,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_SB_G1	Support/ELF.h	/^  R_ARM_ALU_SB_G1             = 0x49,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_SB_G1_NC	Support/ELF.h	/^  R_ARM_ALU_SB_G1_NC          = 0x48,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ALU_SB_G2	Support/ELF.h	/^  R_ARM_ALU_SB_G2             = 0x4a,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_BASE_ABS	Support/ELF.h	/^  R_ARM_BASE_ABS              = 0x1f,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_BASE_PREL	Support/ELF.h	/^  R_ARM_BASE_PREL             = 0x19,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_BREL_ADJ	Support/ELF.h	/^  R_ARM_BREL_ADJ              = 0x0c,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_CALL	Support/ELF.h	/^  R_ARM_CALL                  = 0x1c,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_COPY	Support/ELF.h	/^  R_ARM_COPY                  = 0x14,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GLOB_DAT	Support/ELF.h	/^  R_ARM_GLOB_DAT              = 0x15,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GNU_VTENTRY	Support/ELF.h	/^  R_ARM_GNU_VTENTRY           = 0x64,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GNU_VTINHERIT	Support/ELF.h	/^  R_ARM_GNU_VTINHERIT         = 0x65,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GOTOFF12	Support/ELF.h	/^  R_ARM_GOTOFF12              = 0x62,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GOTOFF32	Support/ELF.h	/^  R_ARM_GOTOFF32              = 0x18,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GOTRELAX	Support/ELF.h	/^  R_ARM_GOTRELAX              = 0x63,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GOT_ABS	Support/ELF.h	/^  R_ARM_GOT_ABS               = 0x5f,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GOT_BREL	Support/ELF.h	/^  R_ARM_GOT_BREL              = 0x1a,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GOT_BREL12	Support/ELF.h	/^  R_ARM_GOT_BREL12            = 0x61,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_GOT_PREL	Support/ELF.h	/^  R_ARM_GOT_PREL              = 0x60,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_JUMP24	Support/ELF.h	/^  R_ARM_JUMP24                = 0x1d,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_JUMP_SLOT	Support/ELF.h	/^  R_ARM_JUMP_SLOT             = 0x16,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDC_PC_G0	Support/ELF.h	/^  R_ARM_LDC_PC_G0             = 0x43,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDC_PC_G1	Support/ELF.h	/^  R_ARM_LDC_PC_G1             = 0x44,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDC_PC_G2	Support/ELF.h	/^  R_ARM_LDC_PC_G2             = 0x45,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDC_SB_G0	Support/ELF.h	/^  R_ARM_LDC_SB_G0             = 0x51,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDC_SB_G1	Support/ELF.h	/^  R_ARM_LDC_SB_G1             = 0x52,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDC_SB_G2	Support/ELF.h	/^  R_ARM_LDC_SB_G2             = 0x53,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDRS_PC_G0	Support/ELF.h	/^  R_ARM_LDRS_PC_G0            = 0x40,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDRS_PC_G1	Support/ELF.h	/^  R_ARM_LDRS_PC_G1            = 0x41,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDRS_PC_G2	Support/ELF.h	/^  R_ARM_LDRS_PC_G2            = 0x42,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDRS_SB_G0	Support/ELF.h	/^  R_ARM_LDRS_SB_G0            = 0x4e,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDRS_SB_G1	Support/ELF.h	/^  R_ARM_LDRS_SB_G1            = 0x4f,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDRS_SB_G2	Support/ELF.h	/^  R_ARM_LDRS_SB_G2            = 0x50,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDR_PC_G0	Support/ELF.h	/^  R_ARM_LDR_PC_G0             = 0x04,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDR_PC_G1	Support/ELF.h	/^  R_ARM_LDR_PC_G1             = 0x3e,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDR_PC_G2	Support/ELF.h	/^  R_ARM_LDR_PC_G2             = 0x3f,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDR_SBREL_11_0_NC	Support/ELF.h	/^  R_ARM_LDR_SBREL_11_0_NC     = 0x23,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDR_SB_G0	Support/ELF.h	/^  R_ARM_LDR_SB_G0             = 0x4b,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDR_SB_G1	Support/ELF.h	/^  R_ARM_LDR_SB_G1             = 0x4c,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_LDR_SB_G2	Support/ELF.h	/^  R_ARM_LDR_SB_G2             = 0x4d,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_ME_TOO	Support/ELF.h	/^  R_ARM_ME_TOO                = 0x80,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_MOVT_ABS	Support/ELF.h	/^  R_ARM_MOVT_ABS              = 0x2c,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_MOVT_BREL	Support/ELF.h	/^  R_ARM_MOVT_BREL             = 0x55,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_MOVT_PREL	Support/ELF.h	/^  R_ARM_MOVT_PREL             = 0x2e,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_MOVW_ABS_NC	Support/ELF.h	/^  R_ARM_MOVW_ABS_NC           = 0x2b,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_MOVW_BREL	Support/ELF.h	/^  R_ARM_MOVW_BREL             = 0x56,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_MOVW_BREL_NC	Support/ELF.h	/^  R_ARM_MOVW_BREL_NC          = 0x54,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_MOVW_PREL_NC	Support/ELF.h	/^  R_ARM_MOVW_PREL_NC          = 0x2d,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_NONE	Support/ELF.h	/^  R_ARM_NONE                  = 0x00,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PC24	Support/ELF.h	/^  R_ARM_PC24                  = 0x01,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PLT32	Support/ELF.h	/^  R_ARM_PLT32                 = 0x1b,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PLT32_ABS	Support/ELF.h	/^  R_ARM_PLT32_ABS             = 0x5e,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PREL31	Support/ELF.h	/^  R_ARM_PREL31                = 0x2a,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_0	Support/ELF.h	/^  R_ARM_PRIVATE_0             = 0x70,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_1	Support/ELF.h	/^  R_ARM_PRIVATE_1             = 0x71,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_10	Support/ELF.h	/^  R_ARM_PRIVATE_10            = 0x7a,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_11	Support/ELF.h	/^  R_ARM_PRIVATE_11            = 0x7b,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_12	Support/ELF.h	/^  R_ARM_PRIVATE_12            = 0x7c,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_13	Support/ELF.h	/^  R_ARM_PRIVATE_13            = 0x7d,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_14	Support/ELF.h	/^  R_ARM_PRIVATE_14            = 0x7e,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_15	Support/ELF.h	/^  R_ARM_PRIVATE_15            = 0x7f,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_2	Support/ELF.h	/^  R_ARM_PRIVATE_2             = 0x72,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_3	Support/ELF.h	/^  R_ARM_PRIVATE_3             = 0x73,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_4	Support/ELF.h	/^  R_ARM_PRIVATE_4             = 0x74,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_5	Support/ELF.h	/^  R_ARM_PRIVATE_5             = 0x75,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_6	Support/ELF.h	/^  R_ARM_PRIVATE_6             = 0x76,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_7	Support/ELF.h	/^  R_ARM_PRIVATE_7             = 0x77,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_8	Support/ELF.h	/^  R_ARM_PRIVATE_8             = 0x78,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_PRIVATE_9	Support/ELF.h	/^  R_ARM_PRIVATE_9             = 0x79,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_REL32	Support/ELF.h	/^  R_ARM_REL32                 = 0x03,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_REL32_NOI	Support/ELF.h	/^  R_ARM_REL32_NOI             = 0x38,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_RELATIVE	Support/ELF.h	/^  R_ARM_RELATIVE              = 0x17,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_SBREL31	Support/ELF.h	/^  R_ARM_SBREL31               = 0x27,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_SBREL32	Support/ELF.h	/^  R_ARM_SBREL32               = 0x09,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TARGET1	Support/ELF.h	/^  R_ARM_TARGET1               = 0x26,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TARGET2	Support/ELF.h	/^  R_ARM_TARGET2               = 0x29,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_ABS5	Support/ELF.h	/^  R_ARM_THM_ABS5              = 0x07,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_ALU_PREL_11_0	Support/ELF.h	/^  R_ARM_THM_ALU_PREL_11_0     = 0x35,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_CALL	Support/ELF.h	/^  R_ARM_THM_CALL              = 0x0a,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_JUMP11	Support/ELF.h	/^  R_ARM_THM_JUMP11            = 0x66,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_JUMP19	Support/ELF.h	/^  R_ARM_THM_JUMP19            = 0x33,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_JUMP24	Support/ELF.h	/^  R_ARM_THM_JUMP24            = 0x1e,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_JUMP6	Support/ELF.h	/^  R_ARM_THM_JUMP6             = 0x34,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_JUMP8	Support/ELF.h	/^  R_ARM_THM_JUMP8             = 0x67,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_MOVT_ABS	Support/ELF.h	/^  R_ARM_THM_MOVT_ABS          = 0x30,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_MOVT_BREL	Support/ELF.h	/^  R_ARM_THM_MOVT_BREL         = 0x58,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_MOVT_PREL	Support/ELF.h	/^  R_ARM_THM_MOVT_PREL         = 0x32,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_MOVW_ABS_NC	Support/ELF.h	/^  R_ARM_THM_MOVW_ABS_NC       = 0x2f,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_MOVW_BREL	Support/ELF.h	/^  R_ARM_THM_MOVW_BREL         = 0x59,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_MOVW_BREL_NC	Support/ELF.h	/^  R_ARM_THM_MOVW_BREL_NC      = 0x57,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_MOVW_PREL_NC	Support/ELF.h	/^  R_ARM_THM_MOVW_PREL_NC      = 0x31,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_PC12	Support/ELF.h	/^  R_ARM_THM_PC12              = 0x36,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_PC8	Support/ELF.h	/^  R_ARM_THM_PC8               = 0x0b,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_SWI8	Support/ELF.h	/^  R_ARM_THM_SWI8              = 0x0e,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_TLS_CALL	Support/ELF.h	/^  R_ARM_THM_TLS_CALL          = 0x5d,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_TLS_DESCSEQ16	Support/ELF.h	/^  R_ARM_THM_TLS_DESCSEQ16     = 0x81,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_TLS_DESCSEQ32	Support/ELF.h	/^  R_ARM_THM_TLS_DESCSEQ32     = 0x82$/;"	e	enum:llvm::ELF::__anon94
R_ARM_THM_XPC22	Support/ELF.h	/^  R_ARM_THM_XPC22             = 0x10,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_CALL	Support/ELF.h	/^  R_ARM_TLS_CALL              = 0x5b,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_DESC	Support/ELF.h	/^  R_ARM_TLS_DESC              = 0x0d,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_DESCSEQ	Support/ELF.h	/^  R_ARM_TLS_DESCSEQ           = 0x5c,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_DTPMOD32	Support/ELF.h	/^  R_ARM_TLS_DTPMOD32          = 0x11,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_DTPOFF32	Support/ELF.h	/^  R_ARM_TLS_DTPOFF32          = 0x12,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_GD32	Support/ELF.h	/^  R_ARM_TLS_GD32              = 0x68,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_GOTDESC	Support/ELF.h	/^  R_ARM_TLS_GOTDESC           = 0x5a,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_IE12GP	Support/ELF.h	/^  R_ARM_TLS_IE12GP            = 0x6f,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_IE32	Support/ELF.h	/^  R_ARM_TLS_IE32              = 0x6b,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_LDM32	Support/ELF.h	/^  R_ARM_TLS_LDM32             = 0x69,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_LDO12	Support/ELF.h	/^  R_ARM_TLS_LDO12             = 0x6d,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_LDO32	Support/ELF.h	/^  R_ARM_TLS_LDO32             = 0x6a,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_LE12	Support/ELF.h	/^  R_ARM_TLS_LE12              = 0x6e,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_LE32	Support/ELF.h	/^  R_ARM_TLS_LE32              = 0x6c,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_TLS_TPOFF32	Support/ELF.h	/^  R_ARM_TLS_TPOFF32           = 0x13,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_V4BX	Support/ELF.h	/^  R_ARM_V4BX                  = 0x28,$/;"	e	enum:llvm::ELF::__anon94
R_ARM_XPC25	Support/ELF.h	/^  R_ARM_XPC25                 = 0x0f,$/;"	e	enum:llvm::ELF::__anon94
R_HEX_10_X	Support/ELF.h	/^  R_HEX_10_X              =  26,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_11_X	Support/ELF.h	/^  R_HEX_11_X              =  25,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_12_X	Support/ELF.h	/^  R_HEX_12_X              =  24,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_16	Support/ELF.h	/^  R_HEX_16                =  7,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_16_X	Support/ELF.h	/^  R_HEX_16_X              =  23,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_32	Support/ELF.h	/^  R_HEX_32                =  6,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_32_6_X	Support/ELF.h	/^  R_HEX_32_6_X            =  17,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_32_PCREL	Support/ELF.h	/^  R_HEX_32_PCREL          =  31,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_6_PCREL_X	Support/ELF.h	/^  R_HEX_6_PCREL_X         =  65,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_6_X	Support/ELF.h	/^  R_HEX_6_X               =  30,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_7_X	Support/ELF.h	/^  R_HEX_7_X               =  29,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_8	Support/ELF.h	/^  R_HEX_8                 =  8,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_8_X	Support/ELF.h	/^  R_HEX_8_X               =  28,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_9_X	Support/ELF.h	/^  R_HEX_9_X               =  27,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B13_PCREL	Support/ELF.h	/^  R_HEX_B13_PCREL         =  14,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B13_PCREL_X	Support/ELF.h	/^  R_HEX_B13_PCREL_X       =  20,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B15_PCREL	Support/ELF.h	/^  R_HEX_B15_PCREL         =  2,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B15_PCREL_X	Support/ELF.h	/^  R_HEX_B15_PCREL_X       =  19,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B22_PCREL	Support/ELF.h	/^  R_HEX_B22_PCREL         =  1,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B22_PCREL_X	Support/ELF.h	/^  R_HEX_B22_PCREL_X       =  18,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B32_PCREL_X	Support/ELF.h	/^  R_HEX_B32_PCREL_X       =  16,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B7_PCREL	Support/ELF.h	/^  R_HEX_B7_PCREL          =  3,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B7_PCREL_X	Support/ELF.h	/^  R_HEX_B7_PCREL_X        =  22,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B9_PCREL	Support/ELF.h	/^  R_HEX_B9_PCREL          =  15,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_B9_PCREL_X	Support/ELF.h	/^  R_HEX_B9_PCREL_X        =  21,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_COPY	Support/ELF.h	/^  R_HEX_COPY              =  32,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_DTPMOD_32	Support/ELF.h	/^  R_HEX_DTPMOD_32         =  44,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_DTPREL_11_X	Support/ELF.h	/^  R_HEX_DTPREL_11_X       =  74,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_DTPREL_16	Support/ELF.h	/^  R_HEX_DTPREL_16         =  48,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_DTPREL_16_X	Support/ELF.h	/^  R_HEX_DTPREL_16_X       =  73,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_DTPREL_32	Support/ELF.h	/^  R_HEX_DTPREL_32         =  47,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_DTPREL_32_6_X	Support/ELF.h	/^  R_HEX_DTPREL_32_6_X     =  72,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_DTPREL_HI16	Support/ELF.h	/^  R_HEX_DTPREL_HI16       =  46,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_DTPREL_LO16	Support/ELF.h	/^  R_HEX_DTPREL_LO16       =  45,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GD_GOT_11_X	Support/ELF.h	/^  R_HEX_GD_GOT_11_X       =  77,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GD_GOT_16	Support/ELF.h	/^  R_HEX_GD_GOT_16         =  53,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GD_GOT_16_X	Support/ELF.h	/^  R_HEX_GD_GOT_16_X       =  76,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GD_GOT_32	Support/ELF.h	/^  R_HEX_GD_GOT_32         =  52,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GD_GOT_32_6_X	Support/ELF.h	/^  R_HEX_GD_GOT_32_6_X     =  75,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GD_GOT_HI16	Support/ELF.h	/^  R_HEX_GD_GOT_HI16       =  51,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GD_GOT_LO16	Support/ELF.h	/^  R_HEX_GD_GOT_LO16       =  50,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GD_PLT_B22_PCREL	Support/ELF.h	/^  R_HEX_GD_PLT_B22_PCREL  =  49,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GLOB_DAT	Support/ELF.h	/^  R_HEX_GLOB_DAT          =  33,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOTREL_11_X	Support/ELF.h	/^  R_HEX_GOTREL_11_X       =  68,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOTREL_16_X	Support/ELF.h	/^  R_HEX_GOTREL_16_X       =  67,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOTREL_32	Support/ELF.h	/^  R_HEX_GOTREL_32         =  39,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOTREL_32_6_X	Support/ELF.h	/^  R_HEX_GOTREL_32_6_X     =  66,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOTREL_HI16	Support/ELF.h	/^  R_HEX_GOTREL_HI16       =  38,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOTREL_LO16	Support/ELF.h	/^  R_HEX_GOTREL_LO16       =  37,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOT_11_X	Support/ELF.h	/^  R_HEX_GOT_11_X          =  71,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOT_16	Support/ELF.h	/^  R_HEX_GOT_16            =  43,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOT_16_X	Support/ELF.h	/^  R_HEX_GOT_16_X          =  70,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOT_32	Support/ELF.h	/^  R_HEX_GOT_32            =  42,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOT_32_6_X	Support/ELF.h	/^  R_HEX_GOT_32_6_X        =  69,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOT_HI16	Support/ELF.h	/^  R_HEX_GOT_HI16          =  41,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GOT_LO16	Support/ELF.h	/^  R_HEX_GOT_LO16          =  40,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GPREL16_0	Support/ELF.h	/^  R_HEX_GPREL16_0         =  9,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GPREL16_1	Support/ELF.h	/^  R_HEX_GPREL16_1         =  10,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GPREL16_2	Support/ELF.h	/^  R_HEX_GPREL16_2         =  11,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_GPREL16_3	Support/ELF.h	/^  R_HEX_GPREL16_3         =  12,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_HI16	Support/ELF.h	/^  R_HEX_HI16              =  5,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_HL16	Support/ELF.h	/^  R_HEX_HL16              =  13,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_16_X	Support/ELF.h	/^  R_HEX_IE_16_X           =  79,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_32	Support/ELF.h	/^  R_HEX_IE_32             =  56,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_32_6_X	Support/ELF.h	/^  R_HEX_IE_32_6_X         =  78,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_GOT_11_X	Support/ELF.h	/^  R_HEX_IE_GOT_11_X       =  82,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_GOT_16	Support/ELF.h	/^  R_HEX_IE_GOT_16         =  60,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_GOT_16_X	Support/ELF.h	/^  R_HEX_IE_GOT_16_X       =  81,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_GOT_32	Support/ELF.h	/^  R_HEX_IE_GOT_32         =  59,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_GOT_32_6_X	Support/ELF.h	/^  R_HEX_IE_GOT_32_6_X     =  80,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_GOT_HI16	Support/ELF.h	/^  R_HEX_IE_GOT_HI16       =  58,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_GOT_LO16	Support/ELF.h	/^  R_HEX_IE_GOT_LO16       =  57,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_HI16	Support/ELF.h	/^  R_HEX_IE_HI16           =  55,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_IE_LO16	Support/ELF.h	/^  R_HEX_IE_LO16           =  54,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_JMP_SLOT	Support/ELF.h	/^  R_HEX_JMP_SLOT          =  34,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_LO16	Support/ELF.h	/^  R_HEX_LO16              =  4,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_NONE	Support/ELF.h	/^  R_HEX_NONE              =  0,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_PLT_B22_PCREL	Support/ELF.h	/^  R_HEX_PLT_B22_PCREL     =  36,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_RELATIVE	Support/ELF.h	/^  R_HEX_RELATIVE          =  35,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_TPREL_11_X	Support/ELF.h	/^  R_HEX_TPREL_11_X        =  85$/;"	e	enum:llvm::ELF::__anon97
R_HEX_TPREL_16	Support/ELF.h	/^  R_HEX_TPREL_16          =  64,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_TPREL_16_X	Support/ELF.h	/^  R_HEX_TPREL_16_X        =  84,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_TPREL_32	Support/ELF.h	/^  R_HEX_TPREL_32          =  63,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_TPREL_32_6_X	Support/ELF.h	/^  R_HEX_TPREL_32_6_X      =  83,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_TPREL_HI16	Support/ELF.h	/^  R_HEX_TPREL_HI16        =  62,$/;"	e	enum:llvm::ELF::__anon97
R_HEX_TPREL_LO16	Support/ELF.h	/^  R_HEX_TPREL_LO16        =  61,$/;"	e	enum:llvm::ELF::__anon97
R_MICROBLAZE_32	Support/ELF.h	/^  R_MICROBLAZE_32             = 1,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_32_LO	Support/ELF.h	/^  R_MICROBLAZE_32_LO          = 6,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_32_PCREL	Support/ELF.h	/^  R_MICROBLAZE_32_PCREL       = 2,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_32_PCREL_LO	Support/ELF.h	/^  R_MICROBLAZE_32_PCREL_LO    = 4,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_32_SYM_OP_SYM	Support/ELF.h	/^  R_MICROBLAZE_32_SYM_OP_SYM  = 10,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_64	Support/ELF.h	/^  R_MICROBLAZE_64             = 5,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_64_NONE	Support/ELF.h	/^  R_MICROBLAZE_64_NONE        = 9,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_64_PCREL	Support/ELF.h	/^  R_MICROBLAZE_64_PCREL       = 3,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_COPY	Support/ELF.h	/^  R_MICROBLAZE_COPY           = 21$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_GLOB_DAT	Support/ELF.h	/^  R_MICROBLAZE_GLOB_DAT       = 18,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_GNU_VTENTRY	Support/ELF.h	/^  R_MICROBLAZE_GNU_VTENTRY    = 12,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_GNU_VTINHERIT	Support/ELF.h	/^  R_MICROBLAZE_GNU_VTINHERIT  = 11,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_GOTOFF_32	Support/ELF.h	/^  R_MICROBLAZE_GOTOFF_32      = 20,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_GOTOFF_64	Support/ELF.h	/^  R_MICROBLAZE_GOTOFF_64      = 19,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_GOTPC_64	Support/ELF.h	/^  R_MICROBLAZE_GOTPC_64       = 13,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_GOT_64	Support/ELF.h	/^  R_MICROBLAZE_GOT_64         = 14,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_JUMP_SLOT	Support/ELF.h	/^  R_MICROBLAZE_JUMP_SLOT      = 17,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_NONE	Support/ELF.h	/^  R_MICROBLAZE_NONE           = 0,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_PLT_64	Support/ELF.h	/^  R_MICROBLAZE_PLT_64         = 15,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_REL	Support/ELF.h	/^  R_MICROBLAZE_REL            = 16,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_SRO32	Support/ELF.h	/^  R_MICROBLAZE_SRO32          = 7,$/;"	e	enum:llvm::ELF::__anon90
R_MICROBLAZE_SRW32	Support/ELF.h	/^  R_MICROBLAZE_SRW32          = 8,$/;"	e	enum:llvm::ELF::__anon90
R_MIPS_16	Support/ELF.h	/^  R_MIPS_16                =  1,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_26	Support/ELF.h	/^  R_MIPS_26                =  4,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_32	Support/ELF.h	/^  R_MIPS_32                =  2,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_64	Support/ELF.h	/^  R_MIPS_64                = 18,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_ADD_IMMEDIATE	Support/ELF.h	/^  R_MIPS_ADD_IMMEDIATE     = 34,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_CALL16	Support/ELF.h	/^  R_MIPS_CALL16            = 11,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_CALL_HI16	Support/ELF.h	/^  R_MIPS_CALL_HI16         = 30,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_CALL_LO16	Support/ELF.h	/^  R_MIPS_CALL_LO16         = 31,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_COPY	Support/ELF.h	/^  R_MIPS_COPY              = 126,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_DELETE	Support/ELF.h	/^  R_MIPS_DELETE            = 27,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GLOB_DAT	Support/ELF.h	/^  R_MIPS_GLOB_DAT          = 51,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GOT	Support/ELF.h	/^  R_MIPS_GOT               =  9,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GOT16	Support/ELF.h	/^  R_MIPS_GOT16             =  9,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GOT_DISP	Support/ELF.h	/^  R_MIPS_GOT_DISP          = 19,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GOT_HI16	Support/ELF.h	/^  R_MIPS_GOT_HI16          = 22,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GOT_LO16	Support/ELF.h	/^  R_MIPS_GOT_LO16          = 23,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GOT_OFST	Support/ELF.h	/^  R_MIPS_GOT_OFST          = 21,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GOT_PAGE	Support/ELF.h	/^  R_MIPS_GOT_PAGE          = 20,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GPREL16	Support/ELF.h	/^  R_MIPS_GPREL16           =  7,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_GPREL32	Support/ELF.h	/^  R_MIPS_GPREL32           = 12,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_HI16	Support/ELF.h	/^  R_MIPS_HI16              =  5,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_HIGHER	Support/ELF.h	/^  R_MIPS_HIGHER            = 28,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_HIGHEST	Support/ELF.h	/^  R_MIPS_HIGHEST           = 29,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_INSERT_A	Support/ELF.h	/^  R_MIPS_INSERT_A          = 25,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_INSERT_B	Support/ELF.h	/^  R_MIPS_INSERT_B          = 26,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_JALR	Support/ELF.h	/^  R_MIPS_JALR              = 37,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_JUMP_SLOT	Support/ELF.h	/^  R_MIPS_JUMP_SLOT         = 127,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_LITERAL	Support/ELF.h	/^  R_MIPS_LITERAL           =  8,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_LO16	Support/ELF.h	/^  R_MIPS_LO16              =  6,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_NONE	Support/ELF.h	/^  R_MIPS_NONE              =  0,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_NUM	Support/ELF.h	/^  R_MIPS_NUM               = 218$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_PC16	Support/ELF.h	/^  R_MIPS_PC16              = 10,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_PJUMP	Support/ELF.h	/^  R_MIPS_PJUMP             = 35,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_REL16	Support/ELF.h	/^  R_MIPS_REL16             = 33,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_REL32	Support/ELF.h	/^  R_MIPS_REL32             =  3,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_RELGOT	Support/ELF.h	/^  R_MIPS_RELGOT            = 36,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_SCN_DISP	Support/ELF.h	/^  R_MIPS_SCN_DISP          = 32,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_SHIFT5	Support/ELF.h	/^  R_MIPS_SHIFT5            = 16,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_SHIFT6	Support/ELF.h	/^  R_MIPS_SHIFT6            = 17,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_SUB	Support/ELF.h	/^  R_MIPS_SUB               = 24,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_DTPMOD32	Support/ELF.h	/^  R_MIPS_TLS_DTPMOD32      = 38,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_DTPMOD64	Support/ELF.h	/^  R_MIPS_TLS_DTPMOD64      = 40,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_DTPREL32	Support/ELF.h	/^  R_MIPS_TLS_DTPREL32      = 39,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_DTPREL64	Support/ELF.h	/^  R_MIPS_TLS_DTPREL64      = 41,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_DTPREL_HI16	Support/ELF.h	/^  R_MIPS_TLS_DTPREL_HI16   = 44,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_DTPREL_LO16	Support/ELF.h	/^  R_MIPS_TLS_DTPREL_LO16   = 45,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_GD	Support/ELF.h	/^  R_MIPS_TLS_GD            = 42,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_GOTTPREL	Support/ELF.h	/^  R_MIPS_TLS_GOTTPREL      = 46,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_LDM	Support/ELF.h	/^  R_MIPS_TLS_LDM           = 43,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_TPREL32	Support/ELF.h	/^  R_MIPS_TLS_TPREL32       = 47,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_TPREL64	Support/ELF.h	/^  R_MIPS_TLS_TPREL64       = 48,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_TPREL_HI16	Support/ELF.h	/^  R_MIPS_TLS_TPREL_HI16    = 49,$/;"	e	enum:llvm::ELF::__anon96
R_MIPS_TLS_TPREL_LO16	Support/ELF.h	/^  R_MIPS_TLS_TPREL_LO16    = 50,$/;"	e	enum:llvm::ELF::__anon96
R_OPENED	Support/IntegersSubsetMapping.h	/^    R_OPENED,$/;"	e	enum:llvm::IntegersSubsetMapping::DiffProcessState
R_PPC64_ADDR14	Support/ELF.h	/^  R_PPC64_ADDR14              = 7,$/;"	e	enum:llvm::ELF::__anon92
R_PPC64_ADDR16_HI	Support/ELF.h	/^  R_PPC64_ADDR16_HI           = 5,$/;"	e	enum:llvm::ELF::__anon92
R_PPC64_ADDR16_HIGHER	Support/ELF.h	/^  R_PPC64_ADDR16_HIGHER       = 39,$/;"	e	enum:llvm::ELF::__anon92
R_PPC64_ADDR16_HIGHEST	Support/ELF.h	/^  R_PPC64_ADDR16_HIGHEST      = 41,$/;"	e	enum:llvm::ELF::__anon92
R_PPC64_ADDR16_LO	Support/ELF.h	/^  R_PPC64_ADDR16_LO           = 4,$/;"	e	enum:llvm::ELF::__anon92
R_PPC64_ADDR64	Support/ELF.h	/^  R_PPC64_ADDR64              = 38,$/;"	e	enum:llvm::ELF::__anon92
R_PPC64_REL24	Support/ELF.h	/^  R_PPC64_REL24               = 10,$/;"	e	enum:llvm::ELF::__anon92
R_PPC64_TOC	Support/ELF.h	/^  R_PPC64_TOC                 = 51,$/;"	e	enum:llvm::ELF::__anon92
R_PPC64_TOC16	Support/ELF.h	/^  R_PPC64_TOC16               = 47,$/;"	e	enum:llvm::ELF::__anon92
R_PPC64_TOC16_DS	Support/ELF.h	/^  R_PPC64_TOC16_DS            = 63$/;"	e	enum:llvm::ELF::__anon92
R_PPC_ADDR14	Support/ELF.h	/^  R_PPC_ADDR14                = 7,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_ADDR14_BRNTAKEN	Support/ELF.h	/^  R_PPC_ADDR14_BRNTAKEN       = 9,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_ADDR14_BRTAKEN	Support/ELF.h	/^  R_PPC_ADDR14_BRTAKEN        = 8,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_ADDR16	Support/ELF.h	/^  R_PPC_ADDR16                = 3,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_ADDR16_HA	Support/ELF.h	/^  R_PPC_ADDR16_HA             = 6,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_ADDR16_HI	Support/ELF.h	/^  R_PPC_ADDR16_HI             = 5,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_ADDR16_LO	Support/ELF.h	/^  R_PPC_ADDR16_LO             = 4,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_ADDR24	Support/ELF.h	/^  R_PPC_ADDR24                = 2,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_ADDR32	Support/ELF.h	/^  R_PPC_ADDR32                = 1,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_NONE	Support/ELF.h	/^  R_PPC_NONE                  = 0,      \/* No relocation. *\/$/;"	e	enum:llvm::ELF::__anon91
R_PPC_REL14	Support/ELF.h	/^  R_PPC_REL14                 = 11,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_REL14_BRNTAKEN	Support/ELF.h	/^  R_PPC_REL14_BRNTAKEN        = 13,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_REL14_BRTAKEN	Support/ELF.h	/^  R_PPC_REL14_BRTAKEN         = 12,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_REL24	Support/ELF.h	/^  R_PPC_REL24                 = 10,$/;"	e	enum:llvm::ELF::__anon91
R_PPC_REL32	Support/ELF.h	/^  R_PPC_REL32                 = 26$/;"	e	enum:llvm::ELF::__anon91
R_SSYM_MASK	MC/MCELFObjectWriter.h	112;"	d
R_SSYM_SHIFT	MC/MCELFObjectWriter.h	111;"	d
R_TYPE2_MASK	MC/MCELFObjectWriter.h	108;"	d
R_TYPE2_SHIFT	MC/MCELFObjectWriter.h	107;"	d
R_TYPE3_MASK	MC/MCELFObjectWriter.h	110;"	d
R_TYPE3_SHIFT	MC/MCELFObjectWriter.h	109;"	d
R_TYPE_MASK	MC/MCELFObjectWriter.h	106;"	d
R_TYPE_SHIFT	MC/MCELFObjectWriter.h	105;"	d
R_X86_64_16	Support/ELF.h	/^  R_X86_64_16         = 12,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_32	Support/ELF.h	/^  R_X86_64_32         = 10,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_32S	Support/ELF.h	/^  R_X86_64_32S        = 11,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_64	Support/ELF.h	/^  R_X86_64_64         = 1,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_8	Support/ELF.h	/^  R_X86_64_8          = 14,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_COPY	Support/ELF.h	/^  R_X86_64_COPY       = 5,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_DTPMOD64	Support/ELF.h	/^  R_X86_64_DTPMOD64   = 16,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_DTPOFF32	Support/ELF.h	/^  R_X86_64_DTPOFF32   = 21,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_DTPOFF64	Support/ELF.h	/^  R_X86_64_DTPOFF64   = 17,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GLOB_DAT	Support/ELF.h	/^  R_X86_64_GLOB_DAT   = 6,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOT32	Support/ELF.h	/^  R_X86_64_GOT32      = 3,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOT64	Support/ELF.h	/^  R_X86_64_GOT64      = 27,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOTOFF64	Support/ELF.h	/^  R_X86_64_GOTOFF64   = 25,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOTPC32	Support/ELF.h	/^  R_X86_64_GOTPC32    = 26,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOTPC32_TLSDESC	Support/ELF.h	/^  R_X86_64_GOTPC32_TLSDESC = 34,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOTPC64	Support/ELF.h	/^  R_X86_64_GOTPC64    = 29,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOTPCREL	Support/ELF.h	/^  R_X86_64_GOTPCREL   = 9,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOTPCREL64	Support/ELF.h	/^  R_X86_64_GOTPCREL64 = 28,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOTPLT64	Support/ELF.h	/^  R_X86_64_GOTPLT64   = 30,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_GOTTPOFF	Support/ELF.h	/^  R_X86_64_GOTTPOFF   = 22,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_JUMP_SLOT	Support/ELF.h	/^  R_X86_64_JUMP_SLOT  = 7,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_NONE	Support/ELF.h	/^  R_X86_64_NONE       = 0,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_PC16	Support/ELF.h	/^  R_X86_64_PC16       = 13,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_PC32	Support/ELF.h	/^  R_X86_64_PC32       = 2,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_PC64	Support/ELF.h	/^  R_X86_64_PC64       = 24,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_PC8	Support/ELF.h	/^  R_X86_64_PC8        = 15,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_PLT32	Support/ELF.h	/^  R_X86_64_PLT32      = 4,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_PLTOFF64	Support/ELF.h	/^  R_X86_64_PLTOFF64   = 31,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_RELATIVE	Support/ELF.h	/^  R_X86_64_RELATIVE   = 8,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_SIZE32	Support/ELF.h	/^  R_X86_64_SIZE32     = 32,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_SIZE64	Support/ELF.h	/^  R_X86_64_SIZE64     = 33,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_TLSDESC	Support/ELF.h	/^  R_X86_64_TLSDESC    = 36$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_TLSDESC_CALL	Support/ELF.h	/^  R_X86_64_TLSDESC_CALL    = 35,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_TLSGD	Support/ELF.h	/^  R_X86_64_TLSGD      = 19,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_TLSLD	Support/ELF.h	/^  R_X86_64_TLSLD      = 20,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_TPOFF32	Support/ELF.h	/^  R_X86_64_TPOFF32    = 23,$/;"	e	enum:llvm::ELF::__anon88
R_X86_64_TPOFF64	Support/ELF.h	/^  R_X86_64_TPOFF64    = 18,$/;"	e	enum:llvm::ELF::__anon88
Range	Support/IntegersSubset.h	/^  typedef IntRange<IntTy> Range;$/;"	t	class:llvm::IntegersSubsetGeneric
RangeEx	Support/IntegersSubsetMapping.h	/^    RangeEx() : Weight(1) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	Support/IntegersSubsetMapping.h	/^    RangeEx(const IntTy &C) : RangeTy(C), Weight(1) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	Support/IntegersSubsetMapping.h	/^    RangeEx(const IntTy &L, const IntTy &H) : RangeTy(L, H), Weight(1) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	Support/IntegersSubsetMapping.h	/^    RangeEx(const IntTy &L, const IntTy &H, unsigned W) :$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	Support/IntegersSubsetMapping.h	/^    RangeEx(const RangeTy &R) : RangeTy(R), Weight(1) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	Support/IntegersSubsetMapping.h	/^    RangeEx(const RangeTy &R, unsigned W) : RangeTy(R), Weight(W) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	Support/IntegersSubsetMapping.h	/^  struct RangeEx : public RangeTy {$/;"	s	class:llvm::IntegersSubsetMapping
RangeIterator	Support/IntegersSubsetMapping.h	/^  typedef CaseItemIt RangeIterator;$/;"	t	class:llvm::IntegersSubsetMapping
RangeLinkTy	Support/IntegersSubset.h	/^  typedef std::pair<IntTy*, IntTy*> RangeLinkTy;$/;"	t	class:llvm::IntegersSubsetGeneric
RangeLinks	Support/IntegersSubset.h	/^  RangeLinksTy RangeLinks;$/;"	m	class:llvm::IntegersSubsetGeneric
RangeLinksConstIt	Support/IntegersSubset.h	/^  typedef typename RangeLinksTy::const_iterator RangeLinksConstIt;$/;"	t	class:llvm::IntegersSubsetGeneric
RangeLinksTy	Support/IntegersSubset.h	/^  typedef std::vector<RangeLinkTy> RangeLinksTy;$/;"	t	class:llvm::IntegersSubsetGeneric
RangeTy	Support/IntegersSubsetMapping.h	/^  typedef IntRange<IntTy> RangeTy;$/;"	t	class:llvm::IntegersSubsetMapping
Ranges	CodeGen/LexicalScopes.h	/^  SmallVector<InsnRange, 4> Ranges;$/;"	m	class:llvm::LexicalScope
Ranges	CodeGen/LiveInterval.h	/^    typedef SmallVector<LiveRange,4> Ranges;$/;"	t	class:llvm::LiveInterval
Ranges	CodeGen/MachineMemOperand.h	/^  const MDNode *Ranges;$/;"	m	class:llvm::MachineMemOperand
Ranges	Support/SourceMgr.h	/^  std::vector<std::pair<unsigned, unsigned> > Ranges;$/;"	m	class:llvm::SMDiagnostic
RangesCollection	Support/IntegersSubsetMapping.h	/^  typedef std::list<RangeTy> RangesCollection;$/;"	t	class:llvm::IntegersSubsetMapping
RangesCollectionConstIt	Support/IntegersSubsetMapping.h	/^  typedef typename RangesCollection::const_iterator RangesCollectionConstIt;$/;"	t	class:llvm::IntegersSubsetMapping
RangesCollectionIt	Support/IntegersSubsetMapping.h	/^  typedef typename RangesCollection::iterator RangesCollectionIt;$/;"	t	class:llvm::IntegersSubsetMapping
Raw	Attributes.h	/^  uint64_t Raw() const { return Bits; }$/;"	f	class:llvm::AttrBuilder
Read	Bitcode/BitstreamReader.h	/^  uint32_t Read(unsigned NumBits) {$/;"	f	class:llvm::BitstreamCursor
Read64	Bitcode/BitstreamReader.h	/^  uint64_t Read64(unsigned NumBits) {$/;"	f	class:llvm::BitstreamCursor
ReadAbbrevRecord	Bitcode/BitstreamReader.h	/^  void ReadAbbrevRecord() {$/;"	f	class:llvm::BitstreamCursor
ReadAbbreviatedField	Bitcode/BitstreamReader.h	/^  void ReadAbbreviatedField(const BitCodeAbbrevOp &Op,$/;"	f	class:llvm::BitstreamCursor
ReadAbbreviatedLiteral	Bitcode/BitstreamReader.h	/^  void ReadAbbreviatedLiteral(const BitCodeAbbrevOp &Op,$/;"	f	class:llvm::BitstreamCursor
ReadAdvanceIdx	MC/MCSchedule.h	/^  unsigned ReadAdvanceIdx; \/\/ First index into ReadAdvanceTable.$/;"	m	struct:llvm::MCSchedClassDesc
ReadAdvanceTable	MC/MCSubtargetInfo.h	/^  const MCReadAdvanceEntry *ReadAdvanceTable;$/;"	m	class:llvm::MCSubtargetInfo
ReadBlockEnd	Bitcode/BitstreamReader.h	/^  bool ReadBlockEnd() {$/;"	f	class:llvm::BitstreamCursor
ReadBlockInfoBlock	Bitcode/BitstreamReader.h	/^  bool ReadBlockInfoBlock() {$/;"	f	class:llvm::BitstreamCursor
ReadCode	Bitcode/BitstreamReader.h	/^  unsigned ReadCode() {$/;"	f	class:llvm::BitstreamCursor
ReadNone	Attributes.h	/^    ReadNone        = 18,  \/\/\/< Function does not access memory$/;"	e	enum:llvm::Attributes::AttrVal
ReadOnly	Attributes.h	/^    ReadOnly        = 19,  \/\/\/< Function only reads from memory$/;"	e	enum:llvm::Attributes::AttrVal
ReadOnly	MC/SectionKind.h	/^    ReadOnly,$/;"	e	enum:llvm::SectionKind::Kind
ReadOnlySection	MC/MCObjectFileInfo.h	/^  const MCSection *ReadOnlySection;$/;"	m	class:llvm::MCObjectFileInfo
ReadOnlyWithRel	MC/SectionKind.h	/^           ReadOnlyWithRel,$/;"	e	enum:llvm::SectionKind::Kind
ReadOnlyWithRelLocal	MC/SectionKind.h	/^               ReadOnlyWithRelLocal$/;"	e	enum:llvm::SectionKind::Kind
ReadRecord	Bitcode/BitstreamReader.h	/^  unsigned ReadRecord(unsigned AbbrevID, SmallVectorImpl<uint64_t> &Vals,$/;"	f	class:llvm::BitstreamCursor
ReadSubBlockID	Bitcode/BitstreamReader.h	/^  unsigned ReadSubBlockID() {$/;"	f	class:llvm::BitstreamCursor
ReadVBR	Bitcode/BitstreamReader.h	/^  uint32_t ReadVBR(unsigned NumBits) {$/;"	f	class:llvm::BitstreamCursor
ReadVBR64	Bitcode/BitstreamReader.h	/^  uint64_t ReadVBR64(unsigned NumBits) {$/;"	f	class:llvm::BitstreamCursor
Reads	CodeGen/MachineInstrBundle.h	/^    bool Reads;$/;"	m	struct:llvm::MachineOperandIteratorBase::PhysRegInfo
Reads	CodeGen/MachineInstrBundle.h	/^    bool Reads;$/;"	m	struct:llvm::MachineOperandIteratorBase::VirtRegInfo
ReadsOverlap	CodeGen/MachineInstrBundle.h	/^    bool ReadsOverlap;$/;"	m	struct:llvm::MachineOperandIteratorBase::PhysRegInfo
ReadyQueue	CodeGen/MachineScheduler.h	/^  ReadyQueue(unsigned id, const Twine &name): ID(id), Name(name.str()) {}$/;"	f	class:llvm::ReadyQueue
ReadyQueue	CodeGen/MachineScheduler.h	/^class ReadyQueue {$/;"	c	namespace:llvm
Real	MC/MCParser/MCAsmLexer.h	/^    Real,$/;"	e	enum:llvm::AsmToken::TokenKind
ReallyHidden	Support/CommandLine.h	/^  ReallyHidden    = 0x02       \/\/ Neither -help nor -help-hidden show this arg$/;"	e	enum:llvm::cl::OptionHidden
RebaseImmediateMask	Support/MachO.h	/^      RebaseImmediateMask                       = 0x0Fu, \/\/ REBASE_IMMEDIATE_MASK$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeAddAddressImmediateScaled	Support/MachO.h	/^      RebaseOpcodeAddAddressImmediateScaled     = 0x40u, \/\/ REBASE_OPCODE_ADD_ADDR_IMM_SCALED$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeAddAddressULEB	Support/MachO.h	/^      RebaseOpcodeAddAddressULEB                = 0x30u, \/\/ REBASE_OPCODE_ADD_ADDR_ULEB$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeDoRebaseAddAddressULEB	Support/MachO.h	/^      RebaseOpcodeDoRebaseAddAddressULEB        = 0x70u, \/\/ REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeDoRebaseImmediateTimes	Support/MachO.h	/^      RebaseOpcodeDoRebaseImmediateTimes        = 0x50u, \/\/ REBASE_OPCODE_DO_REBASE_IMM_TIMES$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeDoRebaseULEBTimes	Support/MachO.h	/^      RebaseOpcodeDoRebaseULEBTimes             = 0x60u, \/\/ REBASE_OPCODE_DO_REBASE_ULEB_TIMES$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeDoRebaseULEBTimesSkippingULEB	Support/MachO.h	/^      RebaseOpcodeDoRebaseULEBTimesSkippingULEB = 0x80u, \/\/ REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeDone	Support/MachO.h	/^      RebaseOpcodeDone                          = 0x00u, \/\/ REBASE_OPCODE_DONE$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeMask	Support/MachO.h	/^      RebaseOpcodeMask                          = 0xF0u, \/\/ REBASE_OPCODE_MASK$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeSetSegmentAndOffsetULEB	Support/MachO.h	/^      RebaseOpcodeSetSegmentAndOffsetULEB       = 0x20u, \/\/ REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB$/;"	e	enum:llvm::MachO::__anon126
RebaseOpcodeSetTypeImmediate	Support/MachO.h	/^      RebaseOpcodeSetTypeImmediate              = 0x10u, \/\/ REBASE_OPCODE_SET_TYPE_IMM$/;"	e	enum:llvm::MachO::__anon126
RebaseTypePointer	Support/MachO.h	/^      RebaseTypePointer                     = 1u, \/\/ REBASE_TYPE_POINTER$/;"	e	enum:llvm::MachO::__anon126
RebaseTypeTextAbsolute32	Support/MachO.h	/^      RebaseTypeTextAbsolute32              = 2u, \/\/ REBASE_TYPE_TEXT_ABSOLUTE32$/;"	e	enum:llvm::MachO::__anon126
RebaseTypeTextPCRelative32	Support/MachO.h	/^      RebaseTypeTextPCRelative32            = 3u, \/\/ REBASE_TYPE_TEXT_PCREL32$/;"	e	enum:llvm::MachO::__anon126
Rec	TableGen/Record.h	/^  Init *Rec;                \/\/ Record we are referring to$/;"	m	class:llvm::FieldInit
Rec	TableGen/Record.h	/^  Record *Rec;$/;"	m	class:llvm::RecordRecTy
Rec	TableGen/Record.h	/^  Record Rec;  \/\/ Placeholder for template args and Name.$/;"	m	struct:llvm::MultiClass
RecDirIterState	Support/FileSystem.h	/^    RecDirIterState()$/;"	f	struct:llvm::sys::fs::detail::RecDirIterState
RecDirIterState	Support/FileSystem.h	/^  struct RecDirIterState : public RefCountedBase<RecDirIterState> {$/;"	s	namespace:llvm::sys::fs::detail
RecTy	TableGen/Record.h	/^  RecTy(RecTyKind K) : Kind(K), ListTy(0) {}$/;"	f	class:llvm::RecTy
RecTy	TableGen/Record.h	/^class RecTy {$/;"	c	namespace:llvm
RecTyKind	TableGen/Record.h	/^  enum RecTyKind {$/;"	g	class:llvm::RecTy
RecedeCycle	CodeGen/ScheduleHazardRecognizer.h	/^  virtual void RecedeCycle() {}$/;"	f	class:llvm::ScheduleHazardRecognizer
Record	TableGen/Record.h	/^  Record(const Record &O) :$/;"	f	class:llvm::Record
Record	TableGen/Record.h	/^  explicit Record(Init *N, ArrayRef<SMLoc> locs, RecordKeeper &records) :$/;"	f	class:llvm::Record
Record	TableGen/Record.h	/^  explicit Record(const std::string &N, ArrayRef<SMLoc> locs,$/;"	f	class:llvm::Record
Record	TableGen/Record.h	/^class Record {$/;"	c	namespace:llvm
RecordKeeper	TableGen/Record.h	/^class RecordKeeper {$/;"	c	namespace:llvm
RecordMatchingPHIs	Transforms/Utils/SSAUpdaterImpl.h	/^  void RecordMatchingPHIs(BlockListTy *BlockList) {$/;"	f	class:llvm::SSAUpdaterImpl
RecordNames	Bitcode/BitstreamReader.h	/^    std::vector<std::pair<unsigned, std::string> > RecordNames;$/;"	m	struct:llvm::BitstreamReader::BlockInfo
RecordRecTy	TableGen/Record.h	/^  explicit RecordRecTy(Record *R) : RecTy(RecordRecTyKind), Rec(R) {}$/;"	f	class:llvm::RecordRecTy
RecordRecTy	TableGen/Record.h	/^class RecordRecTy : public RecTy {$/;"	c	namespace:llvm
RecordRecTyKind	TableGen/Record.h	/^    RecordRecTyKind$/;"	e	enum:llvm::RecTy::RecTyKind
RecordVal	TableGen/Record.h	/^class RecordVal {$/;"	c	namespace:llvm
RecordVector	TableGen/Record.h	/^  typedef std::vector<Record*> RecordVector;$/;"	t	struct:llvm::MultiClass
Recycler	Support/Recycler.h	/^class Recycler {$/;"	c	namespace:llvm
RecyclerStruct	Support/Recycler.h	/^struct RecyclerStruct {$/;"	s	namespace:llvm
RecyclingAllocator	Support/RecyclingAllocator.h	/^class RecyclingAllocator {$/;"	c	namespace:llvm
Ref	Analysis/AliasAnalysis.h	/^  enum ModRefResult { NoModRef = 0, Ref = 1, Mod = 2, ModRef = 3 };$/;"	e	enum:llvm::AliasAnalysis::ModRefResult
RefCount	Bitcode/BitCodes.h	/^  unsigned char RefCount; \/\/ Number of things using this.$/;"	m	class:llvm::BitCodeAbbrev
RefCountedBase	ADT/IntrusiveRefCntPtr.h	/^    RefCountedBase() : ref_cnt(0) {}$/;"	f	class:llvm::RefCountedBase
RefCountedBase	ADT/IntrusiveRefCntPtr.h	/^    RefCountedBase(const RefCountedBase &) : ref_cnt(0) {}$/;"	f	class:llvm::RefCountedBase
RefCountedBase	ADT/IntrusiveRefCntPtr.h	/^  class RefCountedBase {$/;"	c	namespace:llvm
RefCountedBaseVPTR	ADT/IntrusiveRefCntPtr.h	/^    RefCountedBaseVPTR() : ref_cnt(0) {}$/;"	f	class:llvm::RefCountedBaseVPTR
RefCountedBaseVPTR	ADT/IntrusiveRefCntPtr.h	/^    RefCountedBaseVPTR(const RefCountedBaseVPTR &) : ref_cnt(0) {}$/;"	f	class:llvm::RefCountedBaseVPTR
RefCountedBaseVPTR	ADT/IntrusiveRefCntPtr.h	/^  class RefCountedBaseVPTR {$/;"	c	namespace:llvm
Refcount	Support/StringPool.h	/^      unsigned Refcount; \/\/\/< Number of referencing PooledStringPtrs.$/;"	m	struct:llvm::StringPool::PooledString
ReferenceAdder	Support/Allocator.h	/^template <typename T> struct ReferenceAdder { typedef T& result; };$/;"	s	namespace:llvm
ReferenceAdder	Support/Allocator.h	/^template <typename T> struct ReferenceAdder<T&> { typedef T result; };$/;"	s	namespace:llvm
ReferenceSymbolTableOffset	Object/MachOFormat.h	/^    uint32_t ReferenceSymbolTableOffset;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
Refs	Analysis/AliasSetTracker.h	/^    NoModRef = 0, Refs = 1,         \/\/ Ref = bit 1$/;"	e	enum:llvm::AliasSet::AccessType
Reg	CodeGen/MachineFrameInfo.h	/^  unsigned Reg;$/;"	m	class:llvm::CalleeSavedInfo
Reg	CodeGen/MachineOperand.h	/^    } Reg;$/;"	m	union:llvm::MachineOperand::__anon36	typeref:struct:llvm::MachineOperand::__anon36::__anon37
Reg	CodeGen/ScheduleDAG.h	/^      unsigned Reg;$/;"	m	union:llvm::SDep::__anon41
Reg	CodeGen/SelectionDAGNodes.h	/^  unsigned Reg;$/;"	m	class:llvm::RegisterSDNode
Reg	Target/TargetFrameLowering.h	/^    unsigned Reg;$/;"	m	struct:llvm::TargetFrameLowering::SpillSlot
Reg	Target/TargetRegisterInfo.h	/^  unsigned Reg;$/;"	m	class:llvm::PrintReg
Reg0	MC/MCRegisterInfo.h	/^  uint16_t Reg0;$/;"	m	class:llvm::MCRegUnitRootIterator
Reg1	MC/MCRegisterInfo.h	/^  uint16_t Reg1;$/;"	m	class:llvm::MCRegUnitRootIterator
Reg2SUnitsMap	CodeGen/ScheduleDAGInstrs.h	/^  class Reg2SUnitsMap {$/;"	c	namespace:llvm
RegAllocHints	CodeGen/MachineRegisterInfo.h	/^  IndexedMap<std::pair<unsigned, unsigned>, VirtReg2IndexFunctor> RegAllocHints;$/;"	m	class:llvm::MachineRegisterInfo
RegClass	CodeGen/RegisterClassInfo.h	/^  OwningArrayPtr<RCInfo> RegClass;$/;"	m	class:llvm::RegisterClassInfo
RegClass	MC/MCInstrDesc.h	/^  int16_t RegClass;$/;"	m	class:llvm::MCOperandInfo
RegClassBegin	Target/TargetRegisterInfo.h	/^  regclass_iterator RegClassBegin, RegClassEnd;   \/\/ List of regclasses$/;"	m	class:llvm::TargetRegisterInfo
RegClassEnd	Target/TargetRegisterInfo.h	/^  regclass_iterator RegClassBegin, RegClassEnd;   \/\/ List of regclasses$/;"	m	class:llvm::TargetRegisterInfo
RegClassForVT	Target/TargetLowering.h	/^  const TargetRegisterClass *RegClassForVT[MVT::LAST_VALUETYPE];$/;"	m	class:llvm::TargetLowering
RegClassInfo	CodeGen/MachineScheduler.h	/^  RegisterClassInfo *RegClassInfo;$/;"	m	class:llvm::ScheduleDAGMI
RegClassInfo	CodeGen/MachineScheduler.h	/^  RegisterClassInfo *RegClassInfo;$/;"	m	struct:llvm::MachineSchedContext
RegClassVector	Target/TargetSubtargetInfo.h	/^  typedef SmallVectorImpl<const TargetRegisterClass*> RegClassVector;$/;"	t	class:llvm::TargetSubtargetInfo
RegClassWeight	Target/TargetRegisterInfo.h	/^struct RegClassWeight {$/;"	s	namespace:llvm
RegEncodingTable	MC/MCRegisterInfo.h	/^  const uint16_t *RegEncodingTable;           \/\/ Pointer to array of register$/;"	m	class:llvm::MCRegisterInfo
RegFixups	CodeGen/FunctionLoweringInfo.h	/^  DenseMap<unsigned, unsigned> RegFixups;$/;"	m	class:llvm::FunctionLoweringInfo
RegInfo	CodeGen/FunctionLoweringInfo.h	/^  MachineRegisterInfo *RegInfo;$/;"	m	class:llvm::FunctionLoweringInfo
RegInfo	CodeGen/MachineFunction.h	/^  MachineRegisterInfo *RegInfo;$/;"	m	class:llvm::MachineFunction
RegInfo	CodeGen/SelectionDAGISel.h	/^  MachineRegisterInfo *RegInfo;$/;"	m	class:llvm::SelectionDAGISel
RegLimit	CodeGen/ResourcePriorityQueue.h	/^    std::vector<unsigned> RegLimit;$/;"	m	class:llvm::ResourcePriorityQueue
RegMask	CodeGen/MachineOperand.h	/^    const uint32_t *RegMask;  \/\/ For MO_RegisterMask.$/;"	m	union:llvm::MachineOperand::__anon36
RegMask	CodeGen/SelectionDAGNodes.h	/^  const uint32_t *RegMask;$/;"	m	class:llvm::RegisterMaskSDNode
RegMaskBits	CodeGen/LiveIntervalAnalysis.h	/^    SmallVector<const uint32_t*, 8> RegMaskBits;$/;"	m	class:llvm::LiveIntervals
RegMaskBlocks	CodeGen/LiveIntervalAnalysis.h	/^    SmallVector<std::pair<unsigned, unsigned>, 8> RegMaskBlocks;$/;"	m	class:llvm::LiveIntervals
RegMaskSlots	CodeGen/LiveIntervalAnalysis.h	/^    SmallVector<SlotIndex, 8> RegMaskSlots;$/;"	m	class:llvm::LiveIntervals
RegNo	CodeGen/MachineOperand.h	/^    unsigned RegNo;           \/\/ For MO_Register.$/;"	m	union:llvm::MachineOperand::__anon35
RegPressure	CodeGen/MachineScheduler.h	/^  IntervalPressure RegPressure;$/;"	m	class:llvm::ScheduleDAGMI
RegPressure	CodeGen/ResourcePriorityQueue.h	/^    std::vector<unsigned> RegPressure;$/;"	m	class:llvm::ResourcePriorityQueue
RegPressure	Target/TargetLowering.h	/^      RegPressure,      \/\/ Scheduling for lowest register pressure.$/;"	e	enum:llvm::Sched::Preference
RegPressureDelta	CodeGen/RegisterPressure.h	/^  RegPressureDelta() {}$/;"	f	struct:llvm::RegPressureDelta
RegPressureDelta	CodeGen/RegisterPressure.h	/^struct RegPressureDelta {$/;"	s	namespace:llvm
RegPressureTracker	CodeGen/RegisterPressure.h	/^  RegPressureTracker(IntervalPressure &rp) :$/;"	f	class:llvm::RegPressureTracker
RegPressureTracker	CodeGen/RegisterPressure.h	/^  RegPressureTracker(RegionPressure &rp) :$/;"	f	class:llvm::RegPressureTracker
RegPressureTracker	CodeGen/RegisterPressure.h	/^class RegPressureTracker {$/;"	c	namespace:llvm
RegScavenger	CodeGen/RegisterScavenging.h	/^  RegScavenger()$/;"	f	class:llvm::RegScavenger
RegScavenger	CodeGen/RegisterScavenging.h	/^class RegScavenger {$/;"	c	namespace:llvm
RegSet	CodeGen/RegAllocPBQP.h	/^    typedef std::set<unsigned> RegSet;$/;"	t	class:llvm::PBQPBuilder
RegSet	MC/MCRegisterInfo.h	/^  const uint8_t *const RegSet;$/;"	m	class:llvm::MCRegisterClass
RegSetSize	MC/MCRegisterInfo.h	/^  const uint16_t RegSetSize;$/;"	m	class:llvm::MCRegisterClass
RegSize	MC/MCRegisterInfo.h	/^  const uint16_t RegSize, Alignment; \/\/ Size & Alignment of register in bytes$/;"	m	class:llvm::MCRegisterClass
RegState	CodeGen/MachineInstrBuilder.h	/^namespace RegState {$/;"	n	namespace:llvm
RegStrings	MC/MCRegisterInfo.h	/^  const char *RegStrings;                     \/\/ Pointer to the string table.$/;"	m	class:llvm::MCRegisterInfo
RegUnitIntervals	CodeGen/LiveIntervalAnalysis.h	/^    SmallVector<LiveInterval*, 0> RegUnitIntervals;$/;"	m	class:llvm::LiveIntervals
RegUnitRoots	MC/MCRegisterInfo.h	/^  const uint16_t (*RegUnitRoots)[2];          \/\/ Pointer to regunit root table.$/;"	m	class:llvm::MCRegisterInfo
RegUnits	MC/MCRegisterInfo.h	/^  uint32_t RegUnits;$/;"	m	struct:llvm::MCRegisterDesc
RegVal	MC/MCInst.h	/^    unsigned RegVal;$/;"	m	union:llvm::MCOperand::__anon67
RegWeight	Target/TargetRegisterInfo.h	/^  unsigned RegWeight;$/;"	m	struct:llvm::RegClassWeight
Regex	Support/Regex.h	/^  class Regex {$/;"	c	namespace:llvm
Region	Analysis/RegionInfo.h	/^class Region : public RegionNode {$/;"	c	namespace:llvm
RegionBegin	CodeGen/ScheduleDAGInstrs.h	/^    MachineBasicBlock::iterator RegionBegin;$/;"	m	class:llvm::ScheduleDAGInstrs
RegionCriticalPSets	CodeGen/MachineScheduler.h	/^  std::vector<PressureElement> RegionCriticalPSets;$/;"	m	class:llvm::ScheduleDAGMI
RegionEnd	CodeGen/ScheduleDAGInstrs.h	/^    MachineBasicBlock::iterator RegionEnd;$/;"	m	class:llvm::ScheduleDAGInstrs
RegionGraphTraits	Analysis/RegionIterator.h	289;"	d
RegionInfo	Analysis/RegionInfo.h	/^class RegionInfo : public FunctionPass {$/;"	c	namespace:llvm
RegionNode	Analysis/RegionInfo.h	/^  inline RegionNode(Region* Parent, BasicBlock* Entry, bool isSubRegion = 0)$/;"	f	class:llvm::RegionNode
RegionNode	Analysis/RegionInfo.h	/^class RegionNode {$/;"	c	namespace:llvm
RegionNodeGraphTraits	Analysis/RegionIterator.h	265;"	d
RegionPass	Analysis/RegionPass.h	/^  explicit RegionPass(char &pid) : Pass(PT_Region, pid) {}$/;"	f	class:llvm::RegionPass
RegionPass	Analysis/RegionPass.h	/^class RegionPass : public Pass {$/;"	c	namespace:llvm
RegionPressure	CodeGen/RegisterPressure.h	/^struct RegionPressure : RegisterPressure {$/;"	s	namespace:llvm
RegionSet	Analysis/RegionInfo.h	/^  typedef SmallPtrSet<Region*, 4> RegionSet;$/;"	t	class:llvm::RegionInfo
RegionSet	Analysis/RegionInfo.h	/^  typedef std::vector<Region*> RegionSet;$/;"	t	class:llvm::Region
Register	CodeGen/ISDOpcodes.h	/^    BasicBlock, VALUETYPE, CONDCODE, Register, RegisterMask,$/;"	e	enum:llvm::ISD::NodeType
Register	MC/MCParser/MCAsmLexer.h	/^    Register,$/;"	e	enum:llvm::AsmToken::TokenKind
Register	MC/MCWin64EH.h	/^    unsigned Register;$/;"	m	class:llvm::MCWin64EHInstruction
Register	MC/MachineLocation.h	/^  unsigned Register;                    \/\/ gcc\/gdb register number.$/;"	m	class:llvm::MachineLocation
RegisterAGBase	PassSupport.h	/^class RegisterAGBase : public PassInfo {$/;"	c	namespace:llvm
RegisterAnalysisGroup	PassSupport.h	/^  explicit RegisterAnalysisGroup(PassInfo &RPB)$/;"	f	struct:llvm::RegisterAnalysisGroup
RegisterAnalysisGroup	PassSupport.h	/^  explicit RegisterAnalysisGroup(const char *Name)$/;"	f	struct:llvm::RegisterAnalysisGroup
RegisterAnalysisGroup	PassSupport.h	/^struct RegisterAnalysisGroup : public RegisterAGBase {$/;"	s	namespace:llvm
RegisterAsmPrinter	Support/TargetRegistry.h	/^    RegisterAsmPrinter(Target &T) {$/;"	f	struct:llvm::RegisterAsmPrinter
RegisterAsmPrinter	Support/TargetRegistry.h	/^    static void RegisterAsmPrinter(Target &T, Target::AsmPrinterCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterAsmPrinter	Support/TargetRegistry.h	/^  struct RegisterAsmPrinter {$/;"	s	namespace:llvm
RegisterAsmStreamer	Support/TargetRegistry.h	/^    static void RegisterAsmStreamer(Target &T, Target::AsmStreamerCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterClassInfo	CodeGen/RegisterClassInfo.h	/^class RegisterClassInfo {$/;"	c	namespace:llvm
RegisterDefaultPasses	DefaultPasses.h	/^  static void (*RegisterDefaultPasses)(void);$/;"	m	class:llvm::StandardPass
RegisterJITEventListener	ExecutionEngine/ExecutionEngine.h	/^  virtual void RegisterJITEventListener(JITEventListener *) {}$/;"	f	class:llvm::ExecutionEngine
RegisterMCAsmBackend	Support/TargetRegistry.h	/^    RegisterMCAsmBackend(Target &T) {$/;"	f	struct:llvm::RegisterMCAsmBackend
RegisterMCAsmBackend	Support/TargetRegistry.h	/^    static void RegisterMCAsmBackend(Target &T, Target::MCAsmBackendCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCAsmBackend	Support/TargetRegistry.h	/^  struct RegisterMCAsmBackend {$/;"	s	namespace:llvm
RegisterMCAsmInfo	Support/TargetRegistry.h	/^    RegisterMCAsmInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCAsmInfo
RegisterMCAsmInfo	Support/TargetRegistry.h	/^    static void RegisterMCAsmInfo(Target &T, Target::MCAsmInfoCtorFnTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCAsmInfo	Support/TargetRegistry.h	/^  struct RegisterMCAsmInfo {$/;"	s	namespace:llvm
RegisterMCAsmInfoFn	Support/TargetRegistry.h	/^    RegisterMCAsmInfoFn(Target &T, Target::MCAsmInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCAsmInfoFn
RegisterMCAsmInfoFn	Support/TargetRegistry.h	/^  struct RegisterMCAsmInfoFn {$/;"	s	namespace:llvm
RegisterMCAsmLexer	Support/TargetRegistry.h	/^    RegisterMCAsmLexer(Target &T) {$/;"	f	struct:llvm::RegisterMCAsmLexer
RegisterMCAsmLexer	Support/TargetRegistry.h	/^    static void RegisterMCAsmLexer(Target &T, Target::MCAsmLexerCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCAsmLexer	Support/TargetRegistry.h	/^  struct RegisterMCAsmLexer {$/;"	s	namespace:llvm
RegisterMCAsmParser	Support/TargetRegistry.h	/^    RegisterMCAsmParser(Target &T) {$/;"	f	struct:llvm::RegisterMCAsmParser
RegisterMCAsmParser	Support/TargetRegistry.h	/^    static void RegisterMCAsmParser(Target &T, Target::MCAsmParserCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCAsmParser	Support/TargetRegistry.h	/^  struct RegisterMCAsmParser {$/;"	s	namespace:llvm
RegisterMCCodeEmitter	Support/TargetRegistry.h	/^    RegisterMCCodeEmitter(Target &T) {$/;"	f	struct:llvm::RegisterMCCodeEmitter
RegisterMCCodeEmitter	Support/TargetRegistry.h	/^    static void RegisterMCCodeEmitter(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCCodeEmitter	Support/TargetRegistry.h	/^  struct RegisterMCCodeEmitter {$/;"	s	namespace:llvm
RegisterMCCodeGenInfo	Support/TargetRegistry.h	/^    RegisterMCCodeGenInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCCodeGenInfo
RegisterMCCodeGenInfo	Support/TargetRegistry.h	/^    static void RegisterMCCodeGenInfo(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCCodeGenInfo	Support/TargetRegistry.h	/^  struct RegisterMCCodeGenInfo {$/;"	s	namespace:llvm
RegisterMCCodeGenInfoFn	Support/TargetRegistry.h	/^    RegisterMCCodeGenInfoFn(Target &T, Target::MCCodeGenInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCCodeGenInfoFn
RegisterMCCodeGenInfoFn	Support/TargetRegistry.h	/^  struct RegisterMCCodeGenInfoFn {$/;"	s	namespace:llvm
RegisterMCDisassembler	Support/TargetRegistry.h	/^    static void RegisterMCDisassembler(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCInstPrinter	Support/TargetRegistry.h	/^    static void RegisterMCInstPrinter(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCInstrAnalysis	Support/TargetRegistry.h	/^    RegisterMCInstrAnalysis(Target &T) {$/;"	f	struct:llvm::RegisterMCInstrAnalysis
RegisterMCInstrAnalysis	Support/TargetRegistry.h	/^    static void RegisterMCInstrAnalysis(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCInstrAnalysis	Support/TargetRegistry.h	/^  struct RegisterMCInstrAnalysis {$/;"	s	namespace:llvm
RegisterMCInstrAnalysisFn	Support/TargetRegistry.h	/^    RegisterMCInstrAnalysisFn(Target &T, Target::MCInstrAnalysisCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCInstrAnalysisFn
RegisterMCInstrAnalysisFn	Support/TargetRegistry.h	/^  struct RegisterMCInstrAnalysisFn {$/;"	s	namespace:llvm
RegisterMCInstrInfo	Support/TargetRegistry.h	/^    RegisterMCInstrInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCInstrInfo
RegisterMCInstrInfo	Support/TargetRegistry.h	/^    static void RegisterMCInstrInfo(Target &T, Target::MCInstrInfoCtorFnTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCInstrInfo	Support/TargetRegistry.h	/^  struct RegisterMCInstrInfo {$/;"	s	namespace:llvm
RegisterMCInstrInfoFn	Support/TargetRegistry.h	/^    RegisterMCInstrInfoFn(Target &T, Target::MCInstrInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCInstrInfoFn
RegisterMCInstrInfoFn	Support/TargetRegistry.h	/^  struct RegisterMCInstrInfoFn {$/;"	s	namespace:llvm
RegisterMCObjectStreamer	Support/TargetRegistry.h	/^    static void RegisterMCObjectStreamer(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCRegInfo	Support/TargetRegistry.h	/^    RegisterMCRegInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCRegInfo
RegisterMCRegInfo	Support/TargetRegistry.h	/^    static void RegisterMCRegInfo(Target &T, Target::MCRegInfoCtorFnTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCRegInfo	Support/TargetRegistry.h	/^  struct RegisterMCRegInfo {$/;"	s	namespace:llvm
RegisterMCRegInfoFn	Support/TargetRegistry.h	/^    RegisterMCRegInfoFn(Target &T, Target::MCRegInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCRegInfoFn
RegisterMCRegInfoFn	Support/TargetRegistry.h	/^  struct RegisterMCRegInfoFn {$/;"	s	namespace:llvm
RegisterMCSubtargetInfo	Support/TargetRegistry.h	/^    RegisterMCSubtargetInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCSubtargetInfo
RegisterMCSubtargetInfo	Support/TargetRegistry.h	/^    static void RegisterMCSubtargetInfo(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCSubtargetInfo	Support/TargetRegistry.h	/^  struct RegisterMCSubtargetInfo {$/;"	s	namespace:llvm
RegisterMCSubtargetInfoFn	Support/TargetRegistry.h	/^    RegisterMCSubtargetInfoFn(Target &T, Target::MCSubtargetInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCSubtargetInfoFn
RegisterMCSubtargetInfoFn	Support/TargetRegistry.h	/^  struct RegisterMCSubtargetInfoFn {$/;"	s	namespace:llvm
RegisterMask	CodeGen/ISDOpcodes.h	/^    BasicBlock, VALUETYPE, CONDCODE, Register, RegisterMask,$/;"	e	enum:llvm::ISD::NodeType
RegisterMaskSDNode	CodeGen/SelectionDAGNodes.h	/^  RegisterMaskSDNode(const uint32_t *mask)$/;"	f	class:llvm::RegisterMaskSDNode
RegisterMaskSDNode	CodeGen/SelectionDAGNodes.h	/^class RegisterMaskSDNode : public SDNode {$/;"	c	namespace:llvm
RegisterPass	PassSupport.h	/^  RegisterPass(const char *PassArg, const char *Name, bool CFGOnly = false,$/;"	f	struct:llvm::RegisterPass
RegisterPass	PassSupport.h	/^struct RegisterPass : public PassInfo {$/;"	s	namespace:llvm
RegisterPassParser	CodeGen/MachinePassRegistry.h	/^  RegisterPassParser() {}$/;"	f	class:llvm::RegisterPassParser
RegisterPassParser	CodeGen/MachinePassRegistry.h	/^class RegisterPassParser : public MachinePassRegistryListener,$/;"	c	namespace:llvm
RegisterPressure	CodeGen/RegisterPressure.h	/^struct RegisterPressure {$/;"	s	namespace:llvm
RegisterRegAlloc	CodeGen/RegAllocRegistry.h	/^  RegisterRegAlloc(const char *N, const char *D, FunctionPassCtor C)$/;"	f	class:llvm::RegisterRegAlloc
RegisterRegAlloc	CodeGen/RegAllocRegistry.h	/^class RegisterRegAlloc : public MachinePassRegistryNode {$/;"	c	namespace:llvm
RegisterSDNode	CodeGen/SelectionDAGNodes.h	/^  RegisterSDNode(unsigned reg, EVT VT)$/;"	f	class:llvm::RegisterSDNode
RegisterSDNode	CodeGen/SelectionDAGNodes.h	/^class RegisterSDNode : public SDNode {$/;"	c	namespace:llvm
RegisterScheduler	CodeGen/SchedulerRegistry.h	/^  RegisterScheduler(const char *N, const char *D, FunctionPassCtor C)$/;"	f	class:llvm::RegisterScheduler
RegisterScheduler	CodeGen/SchedulerRegistry.h	/^class RegisterScheduler : public MachinePassRegistryNode {$/;"	c	namespace:llvm
RegisterStandardPass	DefaultPasses.h	/^    RegisterStandardPass(StandardSet set, unsigned char *runBefore=0,$/;"	f	class:llvm::StandardPass::RegisterStandardPass
RegisterStandardPass	DefaultPasses.h	/^  class RegisterStandardPass {$/;"	c	class:llvm::StandardPass
RegisterStandardPasses	Transforms/IPO/PassManagerBuilder.h	/^  RegisterStandardPasses(PassManagerBuilder::ExtensionPointTy Ty,$/;"	f	struct:llvm::RegisterStandardPasses
RegisterStandardPasses	Transforms/IPO/PassManagerBuilder.h	/^struct RegisterStandardPasses {$/;"	s	namespace:llvm
RegisterTable	ExecutionEngine/ExecutionEngine.h	/^  void RegisterTable(const Function *fn, void* res) {$/;"	f	class:llvm::ExecutionEngine
RegisterTarget	Support/TargetRegistry.h	/^    RegisterTarget(Target &T, const char *Name, const char *Desc) {$/;"	f	struct:llvm::RegisterTarget
RegisterTarget	Support/TargetRegistry.h	/^  struct RegisterTarget {$/;"	s	namespace:llvm
RegisterTargetMachine	Support/TargetRegistry.h	/^    RegisterTargetMachine(Target &T) {$/;"	f	struct:llvm::RegisterTargetMachine
RegisterTargetMachine	Support/TargetRegistry.h	/^    static void RegisterTargetMachine(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterTargetMachine	Support/TargetRegistry.h	/^  struct RegisterTargetMachine {$/;"	s	namespace:llvm
RegisterTypeForVT	Target/TargetLowering.h	/^  EVT RegisterTypeForVT[MVT::LAST_VALUETYPE];$/;"	m	class:llvm::TargetLowering
RegisteredStringTable	Object/MachO.h	/^  mutable uint32_t RegisteredStringTable;$/;"	m	class:llvm::object::MachOObjectFile
Registry	CodeGen/MachineScheduler.h	/^  static MachinePassRegistry Registry;$/;"	m	class:llvm::MachineSchedRegistry
Registry	CodeGen/RegAllocRegistry.h	/^  static MachinePassRegistry Registry;$/;"	m	class:llvm::RegisterRegAlloc
Registry	CodeGen/SchedulerRegistry.h	/^  static MachinePassRegistry Registry;$/;"	m	class:llvm::RegisterScheduler
Registry	Support/Registry.h	/^  class Registry {$/;"	c	namespace:llvm
RegistryParser	Support/RegistryParser.h	/^  class RegistryParser :$/;"	c	namespace:llvm
RegistryTraits	Support/Registry.h	/^  class RegistryTraits {$/;"	c	namespace:llvm
RegsAvailable	CodeGen/RegisterScavenging.h	/^  BitVector RegsAvailable;$/;"	m	class:llvm::RegScavenger
RegsBegin	MC/MCRegisterInfo.h	/^  const iterator RegsBegin;$/;"	m	class:llvm::MCRegisterClass
RegsSize	MC/MCRegisterInfo.h	/^  const uint16_t RegsSize;$/;"	m	class:llvm::MCRegisterClass
RelMove	MC/MCDwarf.h	/^    enum OpType { SameValue, RememberState, RestoreState, Move, RelMove, Escape,$/;"	e	enum:llvm::MCCFIInstruction::OpType
RelativeVirtualAddress	Support/COFF.h	/^    uint32_t RelativeVirtualAddress;$/;"	m	struct:llvm::COFF::DataDirectory
Release	ADT/IntrusiveRefCntPtr.h	/^    void Release() const {$/;"	f	class:llvm::RefCountedBase
Release	ADT/IntrusiveRefCntPtr.h	/^    void Release() const {$/;"	f	class:llvm::RefCountedBaseVPTR
Release	Instructions.h	/^  Release = 5,$/;"	e	enum:llvm::AtomicOrdering
RelevantLoops	Analysis/ScalarEvolutionExpander.h	/^    DenseMap<const SCEV *, const Loop *> RelevantLoops;$/;"	m	class:llvm::SCEVExpander
ReloadReuse	CodeGen/MachineInstr.h	/^    ReloadReuse = 0x1$/;"	e	enum:llvm::MachineInstr::CommentFlag
Reloc	Support/CodeGen.h	/^  namespace Reloc {$/;"	n	namespace:llvm
RelocM	MC/MCObjectFileInfo.h	/^  Reloc::Model RelocM;$/;"	m	class:llvm::MCObjectFileInfo
RelocMap_t	Object/ELF.h	/^  typedef DenseMap<const Elf_Shdr*, SmallVector<uint32_t, 1> > RelocMap_t;$/;"	t	class:llvm::object::ELFObjectFile
RelocModel	ExecutionEngine/ExecutionEngine.h	/^  Reloc::Model RelocModel;$/;"	m	class:llvm::EngineBuilder
RelocationEntry	Object/MachOFormat.h	/^  struct RelocationEntry {$/;"	s	namespace:llvm::object::macho
RelocationFlags	Object/MachOFormat.h	/^  enum RelocationFlags {$/;"	g	namespace:llvm::object::macho
RelocationInfoSize	Object/MachOFormat.h	/^    RelocationInfoSize = 8,$/;"	e	enum:llvm::object::macho::StructureSizes
RelocationInfoType	Object/MachOFormat.h	/^  enum RelocationInfoType {$/;"	g	namespace:llvm::object::macho
RelocationInfoTypeARM	Object/MachOFormat.h	/^  enum RelocationInfoTypeARM {$/;"	g	namespace:llvm::object::macho
RelocationInfoTypeX86_64	Object/MachOFormat.h	/^  enum RelocationInfoTypeX86_64 {$/;"	g	namespace:llvm::object::macho
RelocationInfoType_Generic	Object/MachOFormat.h	/^  enum RelocationInfoType_Generic {$/;"	g	namespace:llvm::object::macho
RelocationModel	MC/MCCodeGenInfo.h	/^    Reloc::Model RelocationModel;$/;"	m	class:llvm::MCCodeGenInfo
RelocationPimpl	Object/ObjectFile.h	/^  DataRefImpl RelocationPimpl;$/;"	m	class:llvm::object::RelocationRef
RelocationRef	Object/ObjectFile.h	/^  RelocationRef() : OwningObject(NULL) { }$/;"	f	class:llvm::object::RelocationRef
RelocationRef	Object/ObjectFile.h	/^class RelocationRef {$/;"	c	namespace:llvm::object
RelocationRef	Object/ObjectFile.h	/^inline RelocationRef::RelocationRef(DataRefImpl RelocationP,$/;"	f	class:llvm::object::RelocationRef
RelocationSize	Support/COFF.h	/^    RelocationSize = 10$/;"	e	enum:llvm::COFF::__anon80
RelocationTableOffset	Object/MachOFormat.h	/^    uint32_t RelocationTableOffset;$/;"	m	struct:llvm::object::macho::Section
RelocationTableOffset	Object/MachOFormat.h	/^    uint32_t RelocationTableOffset;$/;"	m	struct:llvm::object::macho::Section64
RelocationType	CodeGen/MachineRelocation.h	/^  enum RelocationType {$/;"	g	class:llvm::MachineRelocation
RelocationTypeX86	Support/COFF.h	/^  enum RelocationTypeX86 {$/;"	g	namespace:llvm::COFF
RelocationTypesARM	Support/COFF.h	/^  enum RelocationTypesARM {$/;"	g	namespace:llvm::COFF
Relocations	MC/MCMachObjectWriter.h	/^                 std::vector<object::macho::RelocationEntry> > Relocations;$/;"	m	class:llvm::MachObjectWriter
RemapFlags	Transforms/Utils/ValueMapper.h	/^  enum RemapFlags {$/;"	g	namespace:llvm
Remat	CodeGen/LiveRangeEdit.h	/^    explicit Remat(VNInfo *ParentVNI) : ParentVNI(ParentVNI), OrigMI(0) {}$/;"	f	struct:llvm::LiveRangeEdit::Remat
Remat	CodeGen/LiveRangeEdit.h	/^  struct Remat {$/;"	s	class:llvm::LiveRangeEdit
Rematerializable	MC/MCInstrDesc.h	/^    Rematerializable,$/;"	e	enum:llvm::MCID::__anon69
Remattable	CodeGen/LiveRangeEdit.h	/^  SmallPtrSet<const VNInfo*,4> Remattable;$/;"	m	class:llvm::LiveRangeEdit
Rematted	CodeGen/LiveRangeEdit.h	/^  SmallPtrSet<const VNInfo*,4> Rematted;$/;"	m	class:llvm::LiveRangeEdit
RememberState	MC/MCDwarf.h	/^    enum OpType { SameValue, RememberState, RestoreState, Move, RelMove, Escape,$/;"	e	enum:llvm::MCCFIInstruction::OpType
RemoveBranch	Target/TargetInstrInfo.h	/^  virtual unsigned RemoveBranch(MachineBasicBlock &MBB) const {$/;"	f	class:llvm::TargetInstrInfo
RemoveFromVector	Analysis/LoopInfo.h	/^inline void RemoveFromVector(std::vector<T*> &V, T *N) {$/;"	f	namespace:llvm
RemoveJumpTable	CodeGen/MachineJumpTableInfo.h	/^  void RemoveJumpTable(unsigned Idx) {$/;"	f	class:llvm::MachineJumpTableInfo
RemoveMachineInstrFromMaps	CodeGen/LiveIntervalAnalysis.h	/^    void RemoveMachineInstrFromMaps(MachineInstr *MI) {$/;"	f	class:llvm::LiveIntervals
RemoveStackObject	CodeGen/MachineFrameInfo.h	/^  void RemoveStackObject(int ObjectIdx) {$/;"	f	class:llvm::MachineFrameInfo
RepRegClassCostForVT	Target/TargetLowering.h	/^  uint8_t RepRegClassCostForVT[MVT::LAST_VALUETYPE];$/;"	m	class:llvm::TargetLowering
RepRegClassForVT	Target/TargetLowering.h	/^  const TargetRegisterClass *RepRegClassForVT[MVT::LAST_VALUETYPE];$/;"	m	class:llvm::TargetLowering
ReplaceMachineInstrInMaps	CodeGen/LiveIntervalAnalysis.h	/^    void ReplaceMachineInstrInMaps(MachineInstr *MI, MachineInstr *NewMI) {$/;"	f	class:llvm::LiveIntervals
ReplaceNode	ADT/SCCIterator.h	/^  void ReplaceNode(NodeType *Old, NodeType *New) {$/;"	f	class:llvm::scc_iterator
ReplaceNodeResults	Target/TargetLowering.h	/^  virtual void ReplaceNodeResults(SDNode * \/*N*\/,$/;"	f	class:llvm::TargetLowering
ReplaceUses	CodeGen/SelectionDAGISel.h	/^  void ReplaceUses(SDNode *F, SDNode *T) {$/;"	f	class:llvm::SelectionDAGISel
ReplaceUses	CodeGen/SelectionDAGISel.h	/^  void ReplaceUses(SDValue F, SDValue T) {$/;"	f	class:llvm::SelectionDAGISel
ReplaceUses	CodeGen/SelectionDAGISel.h	/^  void ReplaceUses(const SDValue *F, const SDValue *T, unsigned Num) {$/;"	f	class:llvm::SelectionDAGISel
RepositionNode	CodeGen/SelectionDAG.h	/^  void RepositionNode(allnodes_iterator Position, SDNode *N) {$/;"	f	class:llvm::SelectionDAG
ReqChainDepth	Transforms/Vectorize.h	/^  unsigned ReqChainDepth;$/;"	m	struct:llvm::VectorizeConfig
Require	Module.h	/^  enum ModFlagBehavior { Error = 1, Warning  = 2, Require = 3, Override = 4 };$/;"	e	enum:llvm::Module::ModFlagBehavior
RequireIntervals	CodeGen/RegisterPressure.h	/^  bool RequireIntervals;$/;"	m	class:llvm::RegPressureTracker
Required	MC/MCInstrItineraries.h	/^    Required = 0,$/;"	e	enum:llvm::InstrStage::ReservationKinds
Required	PassAnalysisSupport.h	/^  VectorType Required, RequiredTransitive, Preserved;$/;"	m	class:llvm::AnalysisUsage
Required	Support/CommandLine.h	/^  Required        = 0x02,      \/\/ One occurrence required$/;"	e	enum:llvm::cl::NumOccurrencesFlag
RequiredFlagMask	DefaultPasses.h	/^    RequiredFlagMask=0xff00,$/;"	e	enum:llvm::StandardPass::OptimizationFlagComponents
RequiredFlagShift	DefaultPasses.h	/^    RequiredFlagShift=8,$/;"	e	enum:llvm::StandardPass::OptimizationFlagComponents
RequiredFlags	DefaultPasses.h	/^  static unsigned RequiredFlags(unsigned flags) {$/;"	f	class:llvm::StandardPass
RequiredScoreboard	CodeGen/ScoreboardHazardRecognizer.h	/^  Scoreboard RequiredScoreboard;$/;"	m	class:llvm::ScoreboardHazardRecognizer
RequiredTransitive	PassAnalysisSupport.h	/^  VectorType Required, RequiredTransitive, Preserved;$/;"	m	class:llvm::AnalysisUsage
Res	Support/PatternMatch.h	/^  const APInt *&Res;$/;"	m	struct:llvm::PatternMatch::api_pred_ty
Res	Support/PatternMatch.h	/^  const APInt *&Res;$/;"	m	struct:llvm::PatternMatch::apint_match
ResNo	CodeGen/SelectionDAGNodes.h	/^  unsigned ResNo;     \/\/ Which return value of the node we are using.$/;"	m	class:llvm::SDValue
ReservationKinds	MC/MCInstrItineraries.h	/^  enum ReservationKinds {$/;"	g	struct:llvm::InstrStage
Reserved	CodeGen/RegisterClassInfo.h	/^  BitVector Reserved;$/;"	m	class:llvm::RegisterClassInfo
Reserved	MC/MCInstrItineraries.h	/^    Reserved = 1$/;"	e	enum:llvm::InstrStage::ReservationKinds
Reserved	Object/MachOFormat.h	/^    uint32_t Reserved;$/;"	m	struct:llvm::object::macho::Header64Ext
Reserved	Support/COFF.h	/^    uint16_t Reserved[4];$/;"	m	struct:llvm::COFF::DOSHeader
Reserved1	Object/MachOFormat.h	/^    uint32_t Reserved1;$/;"	m	struct:llvm::object::macho::Section
Reserved1	Object/MachOFormat.h	/^    uint32_t Reserved1;$/;"	m	struct:llvm::object::macho::Section64
Reserved2	MC/MCSectionMachO.h	/^  unsigned Reserved2;$/;"	m	class:llvm::MCSectionMachO
Reserved2	Object/MachOFormat.h	/^    uint32_t Reserved2;$/;"	m	struct:llvm::object::macho::Section
Reserved2	Object/MachOFormat.h	/^    uint32_t Reserved2;$/;"	m	struct:llvm::object::macho::Section64
Reserved2	Support/COFF.h	/^    uint16_t Reserved2[10];$/;"	m	struct:llvm::COFF::DOSHeader
Reserved3	Object/MachOFormat.h	/^    uint32_t Reserved3;$/;"	m	struct:llvm::object::macho::Section64
ReservedRegs	CodeGen/MachineRegisterInfo.h	/^  BitVector ReservedRegs;$/;"	m	class:llvm::MachineRegisterInfo
ReservedScoreboard	CodeGen/ScoreboardHazardRecognizer.h	/^  Scoreboard ReservedScoreboard;$/;"	m	class:llvm::ScoreboardHazardRecognizer
ReservedSpace	Instructions.h	/^  unsigned ReservedSpace;$/;"	m	class:llvm::IndirectBrInst
ReservedSpace	Instructions.h	/^  unsigned ReservedSpace;$/;"	m	class:llvm::LandingPadInst
ReservedSpace	Instructions.h	/^  unsigned ReservedSpace;$/;"	m	class:llvm::PHINode
ReservedSpace	Instructions.h	/^  unsigned ReservedSpace;$/;"	m	class:llvm::SwitchInst
Reset	CodeGen/ScheduleHazardRecognizer.h	/^  virtual void Reset() {}$/;"	f	class:llvm::ScheduleHazardRecognizer
Reset	Support/Allocator.h	/^  void Reset() {}$/;"	f	class:llvm::MallocAllocator
ResolveRegAllocHint	Target/TargetRegisterInfo.h	/^  virtual unsigned ResolveRegAllocHint(unsigned Type, unsigned Reg,$/;"	f	class:llvm::TargetRegisterInfo
Resolver	Pass.h	/^  AnalysisResolver *Resolver;  \/\/ Used to resolve analysis$/;"	m	class:llvm::Pass
ResourcePriorityQueue	CodeGen/ResourcePriorityQueue.h	/^  class ResourcePriorityQueue : public SchedulingPriorityQueue {$/;"	c	namespace:llvm
ResourceTracker	CodeGen/DFAPacketizer.h	/^  DFAPacketizer *ResourceTracker;$/;"	m	class:llvm::VLIWPacketizerList
ResourcesModel	CodeGen/ResourcePriorityQueue.h	/^    DFAPacketizer *ResourcesModel;$/;"	m	class:llvm::ResourcePriorityQueue
Restore	MC/MCDwarf.h	/^                  Restore};$/;"	e	enum:llvm::MCCFIInstruction::OpType
RestoreState	MC/MCDwarf.h	/^    enum OpType { SameValue, RememberState, RestoreState, Move, RelMove, Escape,$/;"	e	enum:llvm::MCCFIInstruction::OpType
Result	ADT/StringSwitch.h	/^  const T *Result;$/;"	m	class:llvm::StringSwitch
Result	Analysis/LoopDependenceAnalysis.h	/^    DependenceResult Result;$/;"	m	struct:llvm::LoopDependenceAnalysis::DependencePair
Result	Analysis/MemoryDependenceAnalysis.h	/^    MemDepResult Result;$/;"	m	class:llvm::NonLocalDepEntry
Result	CodeGen/MachineRelocation.h	/^    void *Result;           \/\/ If this has been resolved to a resolved pointer$/;"	m	union:llvm::MachineRelocation::__anon48
ResumeInst	Instructions.h	/^class ResumeInst : public TerminatorInst {$/;"	c	namespace:llvm
RetSExt	Target/TargetLowering.h	/^    bool RetSExt           : 1;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
RetTy	Target/TargetLowering.h	/^    Type *RetTy;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
RetTy	Transforms/Utils/CodeExtractor.h	/^    Type *RetTy;$/;"	m	class:llvm::CodeExtractor
RetZExt	Target/TargetLowering.h	/^    bool RetZExt           : 1;$/;"	m	struct:llvm::TargetLowering::CallLoweringInfo
Retain	ADT/IntrusiveRefCntPtr.h	/^    void Retain() const { ++ref_cnt; }$/;"	f	class:llvm::RefCountedBase
Retain	ADT/IntrusiveRefCntPtr.h	/^    void Retain() const { ++ref_cnt; }$/;"	f	class:llvm::RefCountedBaseVPTR
Return	ADT/PointerUnion.h	/^        Return;$/;"	t	struct:llvm::PointerUnionTypeSelectorReturn
Return	ADT/PointerUnion.h	/^    typedef T Return;$/;"	t	struct:llvm::PointerUnionTypeSelectorReturn
Return	ADT/PointerUnion.h	/^    typedef typename PointerUnionTypeSelectorReturn<RET_EQ>::Return Return;$/;"	t	struct:llvm::PointerUnionTypeSelector
Return	ADT/PointerUnion.h	/^    typedef typename PointerUnionTypeSelectorReturn<RET_NE>::Return Return;$/;"	t	struct:llvm::PointerUnionTypeSelector
Return	CodeGen/GCMetadata.h	/^      Return,  \/\/\/< Instr is a return instruction.$/;"	e	enum:llvm::GC::PointKind
Return	MC/MCInstrDesc.h	/^    Return,$/;"	e	enum:llvm::MCID::__anon69
ReturnAddressTaken	CodeGen/MachineFrameInfo.h	/^  bool ReturnAddressTaken;$/;"	m	class:llvm::MachineFrameInfo
ReturnBlock	Transforms/Utils/UnifyFunctionExitNodes.h	/^  BasicBlock *ReturnBlock, *UnwindBlock, *UnreachableBlock;$/;"	m	struct:llvm::UnifyFunctionExitNodes
ReturnIndex	Attributes.h	/^    ReturnIndex = 0U,$/;"	e	enum:llvm::AttrListPtr::AttrIndex
ReturnInst	Instructions.h	/^class ReturnInst : public TerminatorInst {$/;"	c	namespace:llvm
ReturnStatusAction	Analysis/Verifier.h	/^  ReturnStatusAction    \/\/\/< verifyModule will just return true$/;"	e	enum:llvm::VerifierFailureAction
ReturnsTwice	Attributes.h	/^    ReturnsTwice    = 20,  \/\/\/< Function can return twice$/;"	e	enum:llvm::Attributes::AttrVal
ReverseBranchCondition	Target/TargetInstrInfo.h	/^  bool ReverseBranchCondition(SmallVectorImpl<MachineOperand> &Cond) const {$/;"	f	class:llvm::TargetInstrInfo
ReverseDepMapType	Analysis/MemoryDependenceAnalysis.h	/^                     SmallPtrSet<Instruction*, 4> > ReverseDepMapType;$/;"	t	class:llvm::MemoryDependenceAnalysis
ReverseLocalDeps	Analysis/MemoryDependenceAnalysis.h	/^    ReverseDepMapType ReverseLocalDeps;$/;"	m	class:llvm::MemoryDependenceAnalysis
ReverseNonLocalDeps	Analysis/MemoryDependenceAnalysis.h	/^    ReverseDepMapType ReverseNonLocalDeps;$/;"	m	class:llvm::MemoryDependenceAnalysis
ReverseNonLocalPtrDepTy	Analysis/MemoryDependenceAnalysis.h	/^                     SmallPtrSet<ValueIsLoadPair, 4> > ReverseNonLocalPtrDepTy;$/;"	t	class:llvm::MemoryDependenceAnalysis
ReverseNonLocalPtrDeps	Analysis/MemoryDependenceAnalysis.h	/^    ReverseNonLocalPtrDepTy ReverseNonLocalPtrDeps;$/;"	m	class:llvm::MemoryDependenceAnalysis
ReversePostOrderTraversal	ADT/PostOrderIterator.h	/^  inline ReversePostOrderTraversal(GraphT G) {$/;"	f	class:llvm::ReversePostOrderTraversal
ReversePostOrderTraversal	ADT/PostOrderIterator.h	/^class ReversePostOrderTraversal {$/;"	c	namespace:llvm
RightMapping	Support/IntegersSubsetMapping.h	/^    self *RightMapping;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Root	ADT/ImmutableMap.h	/^  TreeTy *Root;$/;"	m	class:llvm::ImmutableMapRef
Root	ADT/ImmutableMap.h	/^  TreeTy* Root;$/;"	m	class:llvm::ImmutableMap
Root	ADT/ImmutableSet.h	/^  TreeTy *Root;$/;"	m	class:llvm::ImmutableSet
Root	ADT/ImmutableSet.h	/^  TreeTy *Root;$/;"	m	class:llvm::ImmutableSetRef
Root	CodeGen/SelectionDAG.h	/^  SDValue Root;$/;"	m	class:llvm::SelectionDAG
Root	Support/YAMLParser.h	/^  Node *Root;$/;"	m	class:llvm::yaml::Document
RootBranch	ADT/IntervalMap.h	/^    RootBranch;$/;"	t	class:llvm::IntervalMap
RootBranchCap	ADT/IntervalMap.h	/^    RootBranchCap = DesiredRootBranchCap ? DesiredRootBranchCap : 1$/;"	e	enum:llvm::IntervalMap::__anon23
RootBranchData	ADT/IntervalMap.h	/^  struct RootBranchData {$/;"	s	class:llvm::IntervalMap
RootDataSize	ADT/IntervalMap.h	/^    RootDataSize = sizeof(RootBranchData) > sizeof(RootLeaf) ?$/;"	e	enum:llvm::IntervalMap::__anon24
RootInterval	Analysis/IntervalPartition.h	/^  Interval *RootInterval;$/;"	m	class:llvm::IntervalPartition
RootLeaf	ADT/IntervalMap.h	/^  typedef IntervalMapImpl::LeafNode<KeyT, ValT, N, Traits> RootLeaf;$/;"	t	class:llvm::IntervalMap
RootNode	Analysis/Dominators.h	/^  DomTreeNodeBase<NodeT> *RootNode;$/;"	m	class:llvm::DominatorTreeBase
Roots	Analysis/DominanceFrontier.h	/^  std::vector<BasicBlock*> Roots;$/;"	m	class:llvm::DominanceFrontierBase
Roots	Analysis/Dominators.h	/^  std::vector<NodeT*> Roots;$/;"	m	class:llvm::DominatorBase
Roots	CodeGen/GCMetadata.h	/^    std::vector<GCRoot> Roots;$/;"	m	class:llvm::GCFunctionInfo
RoundAPIntToDouble	ADT/APInt.h	/^inline double RoundAPIntToDouble(const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
RoundAPIntToFloat	ADT/APInt.h	/^inline float RoundAPIntToFloat(const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
RoundFloatToAPInt	ADT/APInt.h	/^inline APInt RoundFloatToAPInt(float Float, unsigned width) {$/;"	f	namespace:llvm::APIntOps
RoundSignedAPIntToDouble	ADT/APInt.h	/^inline double RoundSignedAPIntToDouble(const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
RoundSignedAPIntToFloat	ADT/APInt.h	/^inline float RoundSignedAPIntToFloat(const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
RoundToAlign	Analysis/MemoryBuiltins.h	/^  bool RoundToAlign;$/;"	m	class:llvm::ObjectSizeOffsetVisitor
RoundUpAlignment	DataLayout.h	/^  static UIntTy RoundUpAlignment(UIntTy Val, unsigned Alignment) {$/;"	f	class:llvm::DataLayout
RoundUpToAlignment	Support/MathExtras.h	/^inline uint64_t RoundUpToAlignment(uint64_t Value, uint64_t Align) {$/;"	f	namespace:llvm
RoundUpToPowerOfTwo	ADT/SmallPtrSet.h	/^struct RoundUpToPowerOfTwo {$/;"	s	namespace:llvm
RoundUpToPowerOfTwoH	ADT/SmallPtrSet.h	/^struct RoundUpToPowerOfTwoH {$/;"	s	namespace:llvm
RoundUpToPowerOfTwoH	ADT/SmallPtrSet.h	/^struct RoundUpToPowerOfTwoH<N, false> {$/;"	s	namespace:llvm
RunInliner	DefaultPasses.h	/^    RunInliner = 1<<5$/;"	e	enum:llvm::StandardPass::OptimizationFlags
RunSDNodeXForm	CodeGen/SelectionDAGISel.h	/^  virtual SDValue RunSDNodeXForm(SDValue V, unsigned XFormNo) {$/;"	f	class:llvm::SelectionDAGISel
RuntimeDyld	ExecutionEngine/RuntimeDyld.h	/^class RuntimeDyld {$/;"	c	namespace:llvm
RuntimeFunction	Support/Win64EH.h	/^struct RuntimeFunction {$/;"	s	namespace:llvm::Win64EH
S	CodeGen/GCMetadata.h	/^    GCStrategy &S;$/;"	m	class:llvm::GCFunctionInfo
S	CodeGen/GCMetadataPrinter.h	/^    GCStrategy *S;$/;"	m	class:llvm::GCMetadataPrinter
S	PassManagers.h	/^  std::vector<PMDataManager *> S;$/;"	m	class:llvm::PMStack
S	Support/StringPool.h	/^    entry_t *S;$/;"	m	class:llvm::PooledStringPtr
S2IMap	CodeGen/LiveStackAnalysis.h	/^    SS2IntervalMap S2IMap;$/;"	m	class:llvm::LiveStacks
S2RCMap	CodeGen/LiveStackAnalysis.h	/^    std::map<int, const TargetRegisterClass*> S2RCMap;$/;"	m	class:llvm::LiveStacks
SADDO	CodeGen/ISDOpcodes.h	/^    SADDO, UADDO,$/;"	e	enum:llvm::ISD::NodeType
SAVEDCOLOR	Support/raw_ostream.h	/^    SAVEDCOLOR$/;"	e	enum:llvm::raw_ostream::Colors
SCALAR_TO_VECTOR	CodeGen/ISDOpcodes.h	/^    SCALAR_TO_VECTOR,$/;"	e	enum:llvm::ISD::NodeType
SCCNodeStack	ADT/SCCIterator.h	/^  std::vector<NodeType *> SCCNodeStack;$/;"	m	class:llvm::scc_iterator
SCDB_HasBody	DerivedTypes.h	/^    SCDB_HasBody = 1,$/;"	e	enum:llvm::StructType::__anon51
SCDB_IsLiteral	DerivedTypes.h	/^    SCDB_IsLiteral = 4,$/;"	e	enum:llvm::StructType::__anon51
SCDB_IsSized	DerivedTypes.h	/^    SCDB_IsSized = 8$/;"	e	enum:llvm::StructType::__anon51
SCDB_Packed	DerivedTypes.h	/^    SCDB_Packed = 2,$/;"	e	enum:llvm::StructType::__anon51
SCEI	ADT/Triple.h	/^    SCEI,$/;"	e	enum:llvm::Triple::VendorType
SCEV	Analysis/ScalarEvolution.h	/^    explicit SCEV(const FoldingSetNodeIDRef ID, unsigned SCEVTy) :$/;"	f	class:llvm::SCEV
SCEV	Analysis/ScalarEvolution.h	/^  class SCEV : public FoldingSetNode {$/;"	c	namespace:llvm
SCEVAddExpr	Analysis/ScalarEvolutionExpressions.h	/^    SCEVAddExpr(const FoldingSetNodeIDRef ID,$/;"	f	class:llvm::SCEVAddExpr
SCEVAddExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVAddExpr : public SCEVCommutativeExpr {$/;"	c	namespace:llvm
SCEVAddRecExpr	Analysis/ScalarEvolutionExpressions.h	/^    SCEVAddRecExpr(const FoldingSetNodeIDRef ID,$/;"	f	class:llvm::SCEVAddRecExpr
SCEVAddRecExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVAddRecExpr : public SCEVNAryExpr {$/;"	c	namespace:llvm
SCEVAllocator	Analysis/ScalarEvolution.h	/^    BumpPtrAllocator SCEVAllocator;$/;"	m	class:llvm::ScalarEvolution
SCEVCallbackVH	Analysis/ScalarEvolution.h	/^    class SCEVCallbackVH : public CallbackVH {$/;"	c	class:llvm::ScalarEvolution
SCEVCastExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVCastExpr : public SCEV {$/;"	c	namespace:llvm
SCEVCommutativeExpr	Analysis/ScalarEvolutionExpressions.h	/^    SCEVCommutativeExpr(const FoldingSetNodeIDRef ID,$/;"	f	class:llvm::SCEVCommutativeExpr
SCEVCommutativeExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVCommutativeExpr : public SCEVNAryExpr {$/;"	c	namespace:llvm
SCEVConstant	Analysis/ScalarEvolutionExpressions.h	/^    SCEVConstant(const FoldingSetNodeIDRef ID, ConstantInt *v) :$/;"	f	class:llvm::SCEVConstant
SCEVConstant	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVConstant : public SCEV {$/;"	c	namespace:llvm
SCEVCouldNotCompute	Analysis/ScalarEvolution.h	/^  struct SCEVCouldNotCompute : public SCEV {$/;"	s	namespace:llvm
SCEVExpander	Analysis/ScalarEvolutionExpander.h	/^    explicit SCEVExpander(ScalarEvolution &se, const char *name)$/;"	f	class:llvm::SCEVExpander
SCEVExpander	Analysis/ScalarEvolutionExpander.h	/^  class SCEVExpander : public SCEVVisitor<SCEVExpander, Value*> {$/;"	c	namespace:llvm
SCEVMulExpr	Analysis/ScalarEvolutionExpressions.h	/^    SCEVMulExpr(const FoldingSetNodeIDRef ID,$/;"	f	class:llvm::SCEVMulExpr
SCEVMulExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVMulExpr : public SCEVCommutativeExpr {$/;"	c	namespace:llvm
SCEVNAryExpr	Analysis/ScalarEvolutionExpressions.h	/^    SCEVNAryExpr(const FoldingSetNodeIDRef ID,$/;"	f	class:llvm::SCEVNAryExpr
SCEVNAryExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVNAryExpr : public SCEV {$/;"	c	namespace:llvm
SCEVSMaxExpr	Analysis/ScalarEvolutionExpressions.h	/^    SCEVSMaxExpr(const FoldingSetNodeIDRef ID,$/;"	f	class:llvm::SCEVSMaxExpr
SCEVSMaxExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVSMaxExpr : public SCEVCommutativeExpr {$/;"	c	namespace:llvm
SCEVSignExtendExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVSignExtendExpr : public SCEVCastExpr {$/;"	c	namespace:llvm
SCEVTraversal	Analysis/ScalarEvolutionExpressions.h	/^    SCEVTraversal(SV& V): Visitor(V) {}$/;"	f	class:llvm::SCEVTraversal
SCEVTraversal	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVTraversal {$/;"	c	namespace:llvm
SCEVTruncateExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVTruncateExpr : public SCEVCastExpr {$/;"	c	namespace:llvm
SCEVType	Analysis/ScalarEvolution.h	/^    const unsigned short SCEVType;$/;"	m	class:llvm::SCEV
SCEVTypes	Analysis/ScalarEvolutionExpressions.h	/^  enum SCEVTypes {$/;"	g	namespace:llvm
SCEVUDivExpr	Analysis/ScalarEvolutionExpressions.h	/^    SCEVUDivExpr(const FoldingSetNodeIDRef ID, const SCEV *lhs, const SCEV *rhs)$/;"	f	class:llvm::SCEVUDivExpr
SCEVUDivExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVUDivExpr : public SCEV {$/;"	c	namespace:llvm
SCEVUMaxExpr	Analysis/ScalarEvolutionExpressions.h	/^    SCEVUMaxExpr(const FoldingSetNodeIDRef ID,$/;"	f	class:llvm::SCEVUMaxExpr
SCEVUMaxExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVUMaxExpr : public SCEVCommutativeExpr {$/;"	c	namespace:llvm
SCEVUnknown	Analysis/ScalarEvolutionExpressions.h	/^    SCEVUnknown(const FoldingSetNodeIDRef ID, Value *V,$/;"	f	class:llvm::SCEVUnknown
SCEVUnknown	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVUnknown : public SCEV, private CallbackVH {$/;"	c	namespace:llvm
SCEVVisitor	Analysis/ScalarEvolutionExpressions.h	/^  struct SCEVVisitor {$/;"	s	namespace:llvm
SCEVZeroExtendExpr	Analysis/ScalarEvolutionExpressions.h	/^  class SCEVZeroExtendExpr : public SCEVCastExpr {$/;"	c	namespace:llvm
SCHEDULEDAGINSTRS_H	CodeGen/ScheduleDAGInstrs.h	16;"	d
SCT_COMPLEX_TYPE_SHIFT	Support/COFF.h	/^    SCT_COMPLEX_TYPE_SHIFT   = 4$/;"	e	enum:llvm::COFF::SymbolComplexType
SC_Invalid	Support/COFF.h	/^    SC_Invalid = 0xffffffff,$/;"	e	enum:llvm::COFF::SectionCharacteristics
SDB	CodeGen/SelectionDAGISel.h	/^  SelectionDAGBuilder *SDB;$/;"	m	class:llvm::SelectionDAGISel
SDDbgInfo	CodeGen/SelectionDAG.h	/^  SDDbgInfo() {}$/;"	f	class:llvm::SDDbgInfo
SDDbgInfo	CodeGen/SelectionDAG.h	/^class SDDbgInfo {$/;"	c	namespace:llvm
SDIV	CodeGen/ISDOpcodes.h	/^    ADD, SUB, MUL, SDIV, UDIV, SREM, UREM,$/;"	e	enum:llvm::ISD::NodeType
SDIVREM	CodeGen/ISDOpcodes.h	/^    SDIVREM, UDIVREM,$/;"	e	enum:llvm::ISD::NodeType
SDIVREM_I128	CodeGen/RuntimeLibcalls.h	/^    SDIVREM_I128,$/;"	e	enum:llvm::RTLIB::Libcall
SDIVREM_I16	CodeGen/RuntimeLibcalls.h	/^    SDIVREM_I16,$/;"	e	enum:llvm::RTLIB::Libcall
SDIVREM_I32	CodeGen/RuntimeLibcalls.h	/^    SDIVREM_I32,$/;"	e	enum:llvm::RTLIB::Libcall
SDIVREM_I64	CodeGen/RuntimeLibcalls.h	/^    SDIVREM_I64,$/;"	e	enum:llvm::RTLIB::Libcall
SDIVREM_I8	CodeGen/RuntimeLibcalls.h	/^    SDIVREM_I8,$/;"	e	enum:llvm::RTLIB::Libcall
SDIV_I128	CodeGen/RuntimeLibcalls.h	/^    SDIV_I128,$/;"	e	enum:llvm::RTLIB::Libcall
SDIV_I16	CodeGen/RuntimeLibcalls.h	/^    SDIV_I16,$/;"	e	enum:llvm::RTLIB::Libcall
SDIV_I32	CodeGen/RuntimeLibcalls.h	/^    SDIV_I32,$/;"	e	enum:llvm::RTLIB::Libcall
SDIV_I64	CodeGen/RuntimeLibcalls.h	/^    SDIV_I64,$/;"	e	enum:llvm::RTLIB::Libcall
SDIV_I8	CodeGen/RuntimeLibcalls.h	/^    SDIV_I8,$/;"	e	enum:llvm::RTLIB::Libcall
SDNode	CodeGen/SelectionDAGNodes.h	/^  SDNode(unsigned Opc, const DebugLoc dl, SDVTList VTs)$/;"	f	class:llvm::SDNode
SDNode	CodeGen/SelectionDAGNodes.h	/^  SDNode(unsigned Opc, const DebugLoc dl, SDVTList VTs, const SDValue *Ops,$/;"	f	class:llvm::SDNode
SDNode	CodeGen/SelectionDAGNodes.h	/^class SDNode : public FoldingSetNode, public ilist_node<SDNode> {$/;"	c	namespace:llvm
SDNodeIterator	CodeGen/SelectionDAGNodes.h	/^  SDNodeIterator(const SDNode *N, unsigned Op) : Node(N), Operand(Op) {}$/;"	f	class:llvm::SDNodeIterator
SDNodeIterator	CodeGen/SelectionDAGNodes.h	/^class SDNodeIterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
SDUse	CodeGen/SelectionDAGNodes.h	/^  SDUse() : Val(), User(NULL), Prev(NULL), Next(NULL) {}$/;"	f	class:llvm::SDUse
SDUse	CodeGen/SelectionDAGNodes.h	/^class SDUse {$/;"	c	namespace:llvm
SDVTList	CodeGen/SelectionDAGNodes.h	/^struct SDVTList {$/;"	s	namespace:llvm
SDValue	CodeGen/SelectionDAGNodes.h	/^  SDValue() : Node(0), ResNo(0) {}$/;"	f	class:llvm::SDValue
SDValue	CodeGen/SelectionDAGNodes.h	/^  SDValue(SDNode *node, unsigned resno) : Node(node), ResNo(resno) {}$/;"	f	class:llvm::SDValue
SDValue	CodeGen/SelectionDAGNodes.h	/^class SDValue {$/;"	c	namespace:llvm
SDep	CodeGen/ScheduleDAG.h	/^    SDep() : Dep(0, Data) {}$/;"	f	class:llvm::SDep
SDep	CodeGen/ScheduleDAG.h	/^    SDep(SUnit *S, Kind kind, unsigned latency = 1, unsigned Reg = 0,$/;"	f	class:llvm::SDep
SDep	CodeGen/ScheduleDAG.h	/^  class SDep {$/;"	c	namespace:llvm
SDivOperator	Operator.h	/^class SDivOperator$/;"	c	namespace:llvm
SE	Analysis/DependenceAnalysis.h	/^      ScalarEvolution *SE;$/;"	m	class:llvm::DependenceAnalysis::Constraint
SE	Analysis/DependenceAnalysis.h	/^    ScalarEvolution *SE;$/;"	m	class:llvm::DependenceAnalysis
SE	Analysis/IVUsers.h	/^  ScalarEvolution *SE;$/;"	m	class:llvm::IVUsers
SE	Analysis/LoopDependenceAnalysis.h	/^  ScalarEvolution *SE;$/;"	m	class:llvm::LoopDependenceAnalysis
SE	Analysis/ScalarEvolution.h	/^      ScalarEvolution *SE;$/;"	m	class:llvm::ScalarEvolution::SCEVCallbackVH
SE	Analysis/ScalarEvolutionExpander.h	/^    ScalarEvolution &SE;$/;"	m	class:llvm::SCEVExpander
SE	Analysis/ScalarEvolutionExpressions.h	/^    ScalarEvolution *SE;$/;"	m	class:llvm::SCEVUnknown
SECTION_ATTRIBUTES	MC/MCSectionMachO.h	/^    SECTION_ATTRIBUTES = 0xFFFFFF00U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
SECTION_TYPE	MC/MCSectionMachO.h	/^    SECTION_TYPE       = 0x000000FFU,$/;"	e	enum:llvm::MCSectionMachO::__anon66
SELECT	CodeGen/ISDOpcodes.h	/^    SELECT,$/;"	e	enum:llvm::ISD::NodeType
SELECT_CC	CodeGen/ISDOpcodes.h	/^    SELECT_CC,$/;"	e	enum:llvm::ISD::NodeType
SETCC	CodeGen/ISDOpcodes.h	/^    SETCC,$/;"	e	enum:llvm::ISD::NodeType
SETCC_INVALID	CodeGen/ISDOpcodes.h	/^    SETCC_INVALID       \/\/ Marker value.$/;"	e	enum:llvm::ISD::CondCode
SETEQ	CodeGen/ISDOpcodes.h	/^    SETEQ,         \/\/  1 X 0 0 1       True if equal$/;"	e	enum:llvm::ISD::CondCode
SETFALSE	CodeGen/ISDOpcodes.h	/^    SETFALSE,      \/\/    0 0 0 0       Always false (always folded)$/;"	e	enum:llvm::ISD::CondCode
SETFALSE2	CodeGen/ISDOpcodes.h	/^    SETFALSE2,     \/\/  1 X 0 0 0       Always false (always folded)$/;"	e	enum:llvm::ISD::CondCode
SETGE	CodeGen/ISDOpcodes.h	/^    SETGE,         \/\/  1 X 0 1 1       True if greater than or equal$/;"	e	enum:llvm::ISD::CondCode
SETGT	CodeGen/ISDOpcodes.h	/^    SETGT,         \/\/  1 X 0 1 0       True if greater than$/;"	e	enum:llvm::ISD::CondCode
SETLE	CodeGen/ISDOpcodes.h	/^    SETLE,         \/\/  1 X 1 0 1       True if less than or equal$/;"	e	enum:llvm::ISD::CondCode
SETLT	CodeGen/ISDOpcodes.h	/^    SETLT,         \/\/  1 X 1 0 0       True if less than$/;"	e	enum:llvm::ISD::CondCode
SETNE	CodeGen/ISDOpcodes.h	/^    SETNE,         \/\/  1 X 1 1 0       True if not equal$/;"	e	enum:llvm::ISD::CondCode
SETO	CodeGen/ISDOpcodes.h	/^    SETO,          \/\/    0 1 1 1       True if ordered (no nans)$/;"	e	enum:llvm::ISD::CondCode
SETOEQ	CodeGen/ISDOpcodes.h	/^    SETOEQ,        \/\/    0 0 0 1       True if ordered and equal$/;"	e	enum:llvm::ISD::CondCode
SETOGE	CodeGen/ISDOpcodes.h	/^    SETOGE,        \/\/    0 0 1 1       True if ordered and greater than or equal$/;"	e	enum:llvm::ISD::CondCode
SETOGT	CodeGen/ISDOpcodes.h	/^    SETOGT,        \/\/    0 0 1 0       True if ordered and greater than$/;"	e	enum:llvm::ISD::CondCode
SETOLE	CodeGen/ISDOpcodes.h	/^    SETOLE,        \/\/    0 1 0 1       True if ordered and less than or equal$/;"	e	enum:llvm::ISD::CondCode
SETOLT	CodeGen/ISDOpcodes.h	/^    SETOLT,        \/\/    0 1 0 0       True if ordered and less than$/;"	e	enum:llvm::ISD::CondCode
SETONE	CodeGen/ISDOpcodes.h	/^    SETONE,        \/\/    0 1 1 0       True if ordered and operands are unequal$/;"	e	enum:llvm::ISD::CondCode
SETTRUE	CodeGen/ISDOpcodes.h	/^    SETTRUE,       \/\/    1 1 1 1       Always true (always folded)$/;"	e	enum:llvm::ISD::CondCode
SETTRUE2	CodeGen/ISDOpcodes.h	/^    SETTRUE2,      \/\/  1 X 1 1 1       Always true (always folded)$/;"	e	enum:llvm::ISD::CondCode
SETUEQ	CodeGen/ISDOpcodes.h	/^    SETUEQ,        \/\/    1 0 0 1       True if unordered or equal$/;"	e	enum:llvm::ISD::CondCode
SETUGE	CodeGen/ISDOpcodes.h	/^    SETUGE,        \/\/    1 0 1 1       True if unordered, greater than, or equal$/;"	e	enum:llvm::ISD::CondCode
SETUGT	CodeGen/ISDOpcodes.h	/^    SETUGT,        \/\/    1 0 1 0       True if unordered or greater than$/;"	e	enum:llvm::ISD::CondCode
SETULE	CodeGen/ISDOpcodes.h	/^    SETULE,        \/\/    1 1 0 1       True if unordered, less than, or equal$/;"	e	enum:llvm::ISD::CondCode
SETULT	CodeGen/ISDOpcodes.h	/^    SETULT,        \/\/    1 1 0 0       True if unordered or less than$/;"	e	enum:llvm::ISD::CondCode
SETUNE	CodeGen/ISDOpcodes.h	/^    SETUNE,        \/\/    1 1 1 0       True if unordered or not equal$/;"	e	enum:llvm::ISD::CondCode
SETUO	CodeGen/ISDOpcodes.h	/^    SETUO,         \/\/    1 0 0 0       True if unordered: isnan(X) | isnan(Y)$/;"	e	enum:llvm::ISD::CondCode
SET_COMM_ALIGN	Support/MachO.h	/^    static inline void SET_COMM_ALIGN (uint16_t &n_desc, uint8_t align)$/;"	f	namespace:llvm::MachO
SET_LIBRARY_ORDINAL	Support/MachO.h	/^    static inline void SET_LIBRARY_ORDINAL(uint16_t &n_desc, uint8_t ordinal)$/;"	f	namespace:llvm::MachO
SEXTLOAD	CodeGen/ISDOpcodes.h	/^    SEXTLOAD,$/;"	e	enum:llvm::ISD::LoadExtType
SExt	Attributes.h	/^    SExt            = 21,  \/\/\/< Sign extended before\/after call$/;"	e	enum:llvm::Attributes::AttrVal
SExt	CodeGen/CallingConvLower.h	/^    SExt,   \/\/ The value is sign extended in the location.$/;"	e	enum:llvm::CCValAssign::LocInfo
SExt	Target/TargetCallingConv.h	/^    static const uint64_t SExt           = 1ULL<<1;  \/\/\/< Sign extended$/;"	m	struct:llvm::ISD::ArgFlagsTy
SExtInst	Instructions.h	/^class SExtInst : public CastInst {$/;"	c	namespace:llvm
SExtOffs	Target/TargetCallingConv.h	/^    static const uint64_t SExtOffs       = 1;$/;"	m	struct:llvm::ISD::ArgFlagsTy
SF_Absolute	Object/ObjectFile.h	/^    SF_Absolute        = 1U << 3,  \/\/ Absolute symbol$/;"	e	enum:llvm::object::SymbolRef::Flags
SF_ClassMask	Support/COFF.h	/^    SF_ClassMask = 0x00FF0000,$/;"	e	enum:llvm::COFF::SymbolFlags
SF_ClassShift	Support/COFF.h	/^    SF_ClassShift = 16,$/;"	e	enum:llvm::COFF::SymbolFlags
SF_Common	Object/ObjectFile.h	/^    SF_Common          = 1U << 5,  \/\/ Symbol has common linkage$/;"	e	enum:llvm::object::SymbolRef::Flags
SF_DescFlagsMask	MC/MCMachOSymbolFlags.h	/^    SF_DescFlagsMask                        = 0xFFFF,$/;"	e	enum:llvm::SymbolFlags
SF_FormatSpecific	Object/ObjectFile.h	/^    SF_FormatSpecific  = 1U << 31  \/\/ Specific to the object file format$/;"	e	enum:llvm::object::SymbolRef::Flags
SF_Global	Object/ObjectFile.h	/^    SF_Global          = 1U << 1,  \/\/ Global symbol$/;"	e	enum:llvm::object::SymbolRef::Flags
SF_NoDeadStrip	MC/MCMachOSymbolFlags.h	/^    SF_NoDeadStrip                          = 0x0020,$/;"	e	enum:llvm::SymbolFlags
SF_None	Object/ObjectFile.h	/^    SF_None            = 0,$/;"	e	enum:llvm::object::SymbolRef::Flags
SF_ReferenceTypeDefined	MC/MCMachOSymbolFlags.h	/^    SF_ReferenceTypeDefined                 = 0x0002,$/;"	e	enum:llvm::SymbolFlags
SF_ReferenceTypeMask	MC/MCMachOSymbolFlags.h	/^    SF_ReferenceTypeMask                    = 0x0007,$/;"	e	enum:llvm::SymbolFlags
SF_ReferenceTypePrivateDefined	MC/MCMachOSymbolFlags.h	/^    SF_ReferenceTypePrivateDefined          = 0x0003,$/;"	e	enum:llvm::SymbolFlags
SF_ReferenceTypePrivateUndefinedLazy	MC/MCMachOSymbolFlags.h	/^    SF_ReferenceTypePrivateUndefinedLazy    = 0x0005,$/;"	e	enum:llvm::SymbolFlags
SF_ReferenceTypePrivateUndefinedNonLazy	MC/MCMachOSymbolFlags.h	/^    SF_ReferenceTypePrivateUndefinedNonLazy = 0x0004,$/;"	e	enum:llvm::SymbolFlags
SF_ReferenceTypeUndefinedLazy	MC/MCMachOSymbolFlags.h	/^    SF_ReferenceTypeUndefinedLazy           = 0x0001,$/;"	e	enum:llvm::SymbolFlags
SF_ReferenceTypeUndefinedNonLazy	MC/MCMachOSymbolFlags.h	/^    SF_ReferenceTypeUndefinedNonLazy        = 0x0000,$/;"	e	enum:llvm::SymbolFlags
SF_SymbolResolver	MC/MCMachOSymbolFlags.h	/^    SF_SymbolResolver                       = 0x0100$/;"	e	enum:llvm::SymbolFlags
SF_ThreadLocal	Object/ObjectFile.h	/^    SF_ThreadLocal     = 1U << 4,  \/\/ Thread local symbol$/;"	e	enum:llvm::object::SymbolRef::Flags
SF_ThumbFunc	MC/MCMachOSymbolFlags.h	/^    SF_ThumbFunc                            = 0x0008,$/;"	e	enum:llvm::SymbolFlags
SF_TypeMask	Support/COFF.h	/^    SF_TypeMask = 0x0000FFFF,$/;"	e	enum:llvm::COFF::SymbolFlags
SF_TypeShift	Support/COFF.h	/^    SF_TypeShift = 0,$/;"	e	enum:llvm::COFF::SymbolFlags
SF_Undefined	Object/ObjectFile.h	/^    SF_Undefined       = 1U << 0,  \/\/ Symbol is defined in another object file$/;"	e	enum:llvm::object::SymbolRef::Flags
SF_Weak	Object/ObjectFile.h	/^    SF_Weak            = 1U << 2,  \/\/ Weak symbol$/;"	e	enum:llvm::object::SymbolRef::Flags
SF_WeakDefinition	MC/MCMachOSymbolFlags.h	/^    SF_WeakDefinition                       = 0x0080,$/;"	e	enum:llvm::SymbolFlags
SF_WeakExternal	Support/COFF.h	/^    SF_WeakExternal = 0x01000000$/;"	e	enum:llvm::COFF::SymbolFlags
SF_WeakReference	MC/MCMachOSymbolFlags.h	/^    SF_WeakReference                        = 0x0040,$/;"	e	enum:llvm::SymbolFlags
SHF_ALLOC	Support/ELF.h	/^  SHF_ALLOC = 0x2,$/;"	e	enum:llvm::ELF::__anon100
SHF_EXECINSTR	Support/ELF.h	/^  SHF_EXECINSTR = 0x4,$/;"	e	enum:llvm::ELF::__anon100
SHF_GROUP	Support/ELF.h	/^  SHF_GROUP = 0x200U,$/;"	e	enum:llvm::ELF::__anon100
SHF_INFO_LINK	Support/ELF.h	/^  SHF_INFO_LINK = 0x40U,$/;"	e	enum:llvm::ELF::__anon100
SHF_LINK_ORDER	Support/ELF.h	/^  SHF_LINK_ORDER = 0x80U,$/;"	e	enum:llvm::ELF::__anon100
SHF_MASKOS	Support/ELF.h	/^  SHF_MASKOS   = 0x0ff00000,$/;"	e	enum:llvm::ELF::__anon100
SHF_MASKPROC	Support/ELF.h	/^  SHF_MASKPROC = 0xf0000000,$/;"	e	enum:llvm::ELF::__anon100
SHF_MERGE	Support/ELF.h	/^  SHF_MERGE = 0x10,$/;"	e	enum:llvm::ELF::__anon100
SHF_OS_NONCONFORMING	Support/ELF.h	/^  SHF_OS_NONCONFORMING = 0x100U,$/;"	e	enum:llvm::ELF::__anon100
SHF_STRINGS	Support/ELF.h	/^  SHF_STRINGS = 0x20,$/;"	e	enum:llvm::ELF::__anon100
SHF_TLS	Support/ELF.h	/^  SHF_TLS = 0x400U,$/;"	e	enum:llvm::ELF::__anon100
SHF_WRITE	Support/ELF.h	/^  SHF_WRITE = 0x1,$/;"	e	enum:llvm::ELF::__anon100
SHF_X86_64_LARGE	Support/ELF.h	/^  SHF_X86_64_LARGE = 0x10000000$/;"	e	enum:llvm::ELF::__anon100
SHL	CodeGen/ISDOpcodes.h	/^    SHL, SRA, SRL, ROTL, ROTR,$/;"	e	enum:llvm::ISD::NodeType
SHL	TableGen/Record.h	/^  enum BinaryOp { SHL, SRA, SRL, STRCONCAT, CONCAT, EQ };$/;"	e	enum:llvm::BinOpInit::BinaryOp
SHL_I128	CodeGen/RuntimeLibcalls.h	/^    SHL_I128,$/;"	e	enum:llvm::RTLIB::Libcall
SHL_I16	CodeGen/RuntimeLibcalls.h	/^    SHL_I16,$/;"	e	enum:llvm::RTLIB::Libcall
SHL_I32	CodeGen/RuntimeLibcalls.h	/^    SHL_I32,$/;"	e	enum:llvm::RTLIB::Libcall
SHL_I64	CodeGen/RuntimeLibcalls.h	/^    SHL_I64,$/;"	e	enum:llvm::RTLIB::Libcall
SHL_PARTS	CodeGen/ISDOpcodes.h	/^    SHL_PARTS, SRA_PARTS, SRL_PARTS,$/;"	e	enum:llvm::ISD::NodeType
SHN_ABS	Support/ELF.h	/^  SHN_ABS       = 0xfff1, \/\/ Symbol has absolute value; does not need relocation$/;"	e	enum:llvm::ELF::__anon98
SHN_COMMON	Support/ELF.h	/^  SHN_COMMON    = 0xfff2, \/\/ FORTRAN COMMON or C external global variables$/;"	e	enum:llvm::ELF::__anon98
SHN_HIOS	Support/ELF.h	/^  SHN_HIOS      = 0xff3f, \/\/ Highest operating system-specific index$/;"	e	enum:llvm::ELF::__anon98
SHN_HIPROC	Support/ELF.h	/^  SHN_HIPROC    = 0xff1f, \/\/ Highest processor-specific index$/;"	e	enum:llvm::ELF::__anon98
SHN_HIRESERVE	Support/ELF.h	/^  SHN_HIRESERVE = 0xffff  \/\/ Highest reserved index$/;"	e	enum:llvm::ELF::__anon98
SHN_LOOS	Support/ELF.h	/^  SHN_LOOS      = 0xff20, \/\/ Lowest operating system-specific index$/;"	e	enum:llvm::ELF::__anon98
SHN_LOPROC	Support/ELF.h	/^  SHN_LOPROC    = 0xff00, \/\/ Lowest processor-specific index$/;"	e	enum:llvm::ELF::__anon98
SHN_LORESERVE	Support/ELF.h	/^  SHN_LORESERVE = 0xff00, \/\/ Lowest reserved index$/;"	e	enum:llvm::ELF::__anon98
SHN_UNDEF	Support/ELF.h	/^  SHN_UNDEF     = 0,      \/\/ Undefined, missing, irrelevant, or meaningless$/;"	e	enum:llvm::ELF::__anon98
SHN_XINDEX	Support/ELF.h	/^  SHN_XINDEX    = 0xffff, \/\/ Mark that the index is >= SHN_LORESERVE$/;"	e	enum:llvm::ELF::__anon98
SHT_ARM_ATTRIBUTES	Support/ELF.h	/^  SHT_ARM_ATTRIBUTES      = 0x70000003U,$/;"	e	enum:llvm::ELF::__anon99
SHT_ARM_DEBUGOVERLAY	Support/ELF.h	/^  SHT_ARM_DEBUGOVERLAY    = 0x70000004U,$/;"	e	enum:llvm::ELF::__anon99
SHT_ARM_EXIDX	Support/ELF.h	/^  SHT_ARM_EXIDX           = 0x70000001U,$/;"	e	enum:llvm::ELF::__anon99
SHT_ARM_OVERLAYSECTION	Support/ELF.h	/^  SHT_ARM_OVERLAYSECTION  = 0x70000005U,$/;"	e	enum:llvm::ELF::__anon99
SHT_ARM_PREEMPTMAP	Support/ELF.h	/^  SHT_ARM_PREEMPTMAP      = 0x70000002U,$/;"	e	enum:llvm::ELF::__anon99
SHT_DYNAMIC	Support/ELF.h	/^  SHT_DYNAMIC       = 6,  \/\/ Information for dynamic linking.$/;"	e	enum:llvm::ELF::__anon99
SHT_DYNSYM	Support/ELF.h	/^  SHT_DYNSYM        = 11, \/\/ Symbol table.$/;"	e	enum:llvm::ELF::__anon99
SHT_FINI_ARRAY	Support/ELF.h	/^  SHT_FINI_ARRAY    = 15, \/\/ Pointers to termination functions.$/;"	e	enum:llvm::ELF::__anon99
SHT_GNU_ATTRIBUTES	Support/ELF.h	/^  SHT_GNU_ATTRIBUTES= 0x6ffffff5, \/\/ Object attributes.$/;"	e	enum:llvm::ELF::__anon99
SHT_GNU_HASH	Support/ELF.h	/^  SHT_GNU_HASH      = 0x6ffffff6, \/\/ GNU-style hash table.$/;"	e	enum:llvm::ELF::__anon99
SHT_GNU_verdef	Support/ELF.h	/^  SHT_GNU_verdef    = 0x6ffffffd, \/\/ GNU version definitions.$/;"	e	enum:llvm::ELF::__anon99
SHT_GNU_verneed	Support/ELF.h	/^  SHT_GNU_verneed   = 0x6ffffffe, \/\/ GNU version references.$/;"	e	enum:llvm::ELF::__anon99
SHT_GNU_versym	Support/ELF.h	/^  SHT_GNU_versym    = 0x6fffffff, \/\/ GNU symbol versions table.$/;"	e	enum:llvm::ELF::__anon99
SHT_GROUP	Support/ELF.h	/^  SHT_GROUP         = 17, \/\/ Section group.$/;"	e	enum:llvm::ELF::__anon99
SHT_HASH	Support/ELF.h	/^  SHT_HASH          = 5,  \/\/ Symbol hash table.$/;"	e	enum:llvm::ELF::__anon99
SHT_HIOS	Support/ELF.h	/^  SHT_HIOS          = 0x6fffffff, \/\/ Highest operating system-specific type.$/;"	e	enum:llvm::ELF::__anon99
SHT_HIPROC	Support/ELF.h	/^  SHT_HIPROC        = 0x7fffffff, \/\/ Highest processor architecture-specific type.$/;"	e	enum:llvm::ELF::__anon99
SHT_HIUSER	Support/ELF.h	/^  SHT_HIUSER        = 0xffffffff  \/\/ Highest type reserved for applications.$/;"	e	enum:llvm::ELF::__anon99
SHT_INIT_ARRAY	Support/ELF.h	/^  SHT_INIT_ARRAY    = 14, \/\/ Pointers to initialization functions.$/;"	e	enum:llvm::ELF::__anon99
SHT_LOOS	Support/ELF.h	/^  SHT_LOOS          = 0x60000000, \/\/ Lowest operating system-specific type.$/;"	e	enum:llvm::ELF::__anon99
SHT_LOPROC	Support/ELF.h	/^  SHT_LOPROC        = 0x70000000, \/\/ Lowest processor architecture-specific type.$/;"	e	enum:llvm::ELF::__anon99
SHT_LOUSER	Support/ELF.h	/^  SHT_LOUSER        = 0x80000000, \/\/ Lowest type reserved for applications.$/;"	e	enum:llvm::ELF::__anon99
SHT_NOBITS	Support/ELF.h	/^  SHT_NOBITS        = 8,  \/\/ Data occupies no space in the file.$/;"	e	enum:llvm::ELF::__anon99
SHT_NOTE	Support/ELF.h	/^  SHT_NOTE          = 7,  \/\/ Information about the file.$/;"	e	enum:llvm::ELF::__anon99
SHT_NULL	Support/ELF.h	/^  SHT_NULL          = 0,  \/\/ No associated section (inactive entry).$/;"	e	enum:llvm::ELF::__anon99
SHT_PREINIT_ARRAY	Support/ELF.h	/^  SHT_PREINIT_ARRAY = 16, \/\/ Pointers to pre-init functions.$/;"	e	enum:llvm::ELF::__anon99
SHT_PROGBITS	Support/ELF.h	/^  SHT_PROGBITS      = 1,  \/\/ Program-defined contents.$/;"	e	enum:llvm::ELF::__anon99
SHT_REL	Support/ELF.h	/^  SHT_REL           = 9,  \/\/ Relocation entries; no explicit addends.$/;"	e	enum:llvm::ELF::__anon99
SHT_RELA	Support/ELF.h	/^  SHT_RELA          = 4,  \/\/ Relocation entries; explicit addends.$/;"	e	enum:llvm::ELF::__anon99
SHT_SHLIB	Support/ELF.h	/^  SHT_SHLIB         = 10, \/\/ Reserved.$/;"	e	enum:llvm::ELF::__anon99
SHT_STRTAB	Support/ELF.h	/^  SHT_STRTAB        = 3,  \/\/ String table.$/;"	e	enum:llvm::ELF::__anon99
SHT_SYMTAB	Support/ELF.h	/^  SHT_SYMTAB        = 2,  \/\/ Symbol table.$/;"	e	enum:llvm::ELF::__anon99
SHT_SYMTAB_SHNDX	Support/ELF.h	/^  SHT_SYMTAB_SHNDX  = 18, \/\/ Indices for SHN_XINDEX entries.$/;"	e	enum:llvm::ELF::__anon99
SHT_X86_64_UNWIND	Support/ELF.h	/^  SHT_X86_64_UNWIND       = 0x70000001, \/\/ Unwind information$/;"	e	enum:llvm::ELF::__anon99
SI	Instructions.h	/^    SwitchInstTy *SI;$/;"	m	class:llvm::SwitchInst::CaseIteratorT
SIGN_EXTEND	CodeGen/ISDOpcodes.h	/^    SIGN_EXTEND,$/;"	e	enum:llvm::ISD::NodeType
SIGN_EXTEND_INREG	CodeGen/ISDOpcodes.h	/^    SIGN_EXTEND_INREG,$/;"	e	enum:llvm::ISD::NodeType
SINTTOFP_I128_F32	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I128_F32,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I128_F64	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I128_F64,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I128_F80	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I128_F80,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I128_PPCF128	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I128_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I32_F32	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I32_F32,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I32_F64	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I32_F64,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I32_F80	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I32_F80,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I32_PPCF128	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I32_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I64_F32	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I64_F32,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I64_F64	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I64_F64,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I64_F80	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I64_F80,$/;"	e	enum:llvm::RTLIB::Libcall
SINTTOFP_I64_PPCF128	CodeGen/RuntimeLibcalls.h	/^    SINTTOFP_I64_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
SINT_TO_FP	CodeGen/ISDOpcodes.h	/^    SINT_TO_FP,$/;"	e	enum:llvm::ISD::NodeType
SIN_F32	CodeGen/RuntimeLibcalls.h	/^    SIN_F32,$/;"	e	enum:llvm::RTLIB::Libcall
SIN_F64	CodeGen/RuntimeLibcalls.h	/^    SIN_F64,$/;"	e	enum:llvm::RTLIB::Libcall
SIN_F80	CodeGen/RuntimeLibcalls.h	/^    SIN_F80,$/;"	e	enum:llvm::RTLIB::Libcall
SIN_PPCF128	CodeGen/RuntimeLibcalls.h	/^    SIN_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
SIToFPInst	Instructions.h	/^class SIToFPInst : public CastInst {$/;"	c	namespace:llvm
SIV	Analysis/DependenceAnalysis.h	/^      enum ClassificationKind { ZIV, SIV, RDIV, MIV, NonLinear } Classification;$/;"	e	enum:llvm::DependenceAnalysis::Subscript::ClassificationKind
SM	Support/SourceMgr.h	/^  const SourceMgr *SM;$/;"	m	class:llvm::SMDiagnostic
SMDiagnostic	Support/SourceMgr.h	/^  SMDiagnostic()$/;"	f	class:llvm::SMDiagnostic
SMDiagnostic	Support/SourceMgr.h	/^  SMDiagnostic(const std::string &filename, SourceMgr::DiagKind Knd,$/;"	f	class:llvm::SMDiagnostic
SMDiagnostic	Support/SourceMgr.h	/^class SMDiagnostic {$/;"	c	namespace:llvm
SMLoc	Support/SMLoc.h	/^  SMLoc() : Ptr(0) {}$/;"	f	class:llvm::SMLoc
SMLoc	Support/SMLoc.h	/^class SMLoc {$/;"	c	namespace:llvm
SMRange	Support/SMLoc.h	/^  SMRange() {}$/;"	f	class:llvm::SMRange
SMRange	Support/SMLoc.h	/^  SMRange(SMLoc St, SMLoc En) : Start(St), End(En) {$/;"	f	class:llvm::SMRange
SMRange	Support/SMLoc.h	/^class SMRange {$/;"	c	namespace:llvm
SMULO	CodeGen/ISDOpcodes.h	/^    SMULO, UMULO,$/;"	e	enum:llvm::ISD::NodeType
SMUL_LOHI	CodeGen/ISDOpcodes.h	/^    SMUL_LOHI, UMUL_LOHI,$/;"	e	enum:llvm::ISD::NodeType
SPIR_FUNC	CallingConv.h	/^    SPIR_FUNC = 75,$/;"	e	enum:llvm::CallingConv::ID
SPIR_KERNEL	CallingConv.h	/^    SPIR_KERNEL = 76$/;"	e	enum:llvm::CallingConv::ID
SPLITEDGE	Analysis/PathNumbering.h	/^  enum EdgeType { NORMAL, BACKEDGE, SPLITEDGE,$/;"	e	enum:llvm::BallLarusEdge::EdgeType
SPLITEDGE_PHONY	Analysis/PathNumbering.h	/^    BACKEDGE_PHONY, SPLITEDGE_PHONY, CALLEDGE_PHONY };$/;"	e	enum:llvm::BallLarusEdge::EdgeType
SPOffset	CodeGen/MachineFrameInfo.h	/^    int64_t SPOffset;$/;"	m	struct:llvm::MachineFrameInfo::StackObject
SPs	DebugInfo.h	/^    SmallVector<MDNode *, 8> SPs;  \/\/ Subprograms$/;"	m	class:llvm::DebugInfoFinder
SQRT_F32	CodeGen/RuntimeLibcalls.h	/^    SQRT_F32,$/;"	e	enum:llvm::RTLIB::Libcall
SQRT_F64	CodeGen/RuntimeLibcalls.h	/^    SQRT_F64,$/;"	e	enum:llvm::RTLIB::Libcall
SQRT_F80	CodeGen/RuntimeLibcalls.h	/^    SQRT_F80,$/;"	e	enum:llvm::RTLIB::Libcall
SQRT_PPCF128	CodeGen/RuntimeLibcalls.h	/^    SQRT_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
SRA	CodeGen/ISDOpcodes.h	/^    SHL, SRA, SRL, ROTL, ROTR,$/;"	e	enum:llvm::ISD::NodeType
SRA	TableGen/Record.h	/^  enum BinaryOp { SHL, SRA, SRL, STRCONCAT, CONCAT, EQ };$/;"	e	enum:llvm::BinOpInit::BinaryOp
SRA_I128	CodeGen/RuntimeLibcalls.h	/^    SRA_I128,$/;"	e	enum:llvm::RTLIB::Libcall
SRA_I16	CodeGen/RuntimeLibcalls.h	/^    SRA_I16,$/;"	e	enum:llvm::RTLIB::Libcall
SRA_I32	CodeGen/RuntimeLibcalls.h	/^    SRA_I32,$/;"	e	enum:llvm::RTLIB::Libcall
SRA_I64	CodeGen/RuntimeLibcalls.h	/^    SRA_I64,$/;"	e	enum:llvm::RTLIB::Libcall
SRA_PARTS	CodeGen/ISDOpcodes.h	/^    SHL_PARTS, SRA_PARTS, SRL_PARTS,$/;"	e	enum:llvm::ISD::NodeType
SRCVALUE	CodeGen/ISDOpcodes.h	/^    SRCVALUE,$/;"	e	enum:llvm::ISD::NodeType
SREM	CodeGen/ISDOpcodes.h	/^    ADD, SUB, MUL, SDIV, UDIV, SREM, UREM,$/;"	e	enum:llvm::ISD::NodeType
SREM_I128	CodeGen/RuntimeLibcalls.h	/^    SREM_I128,$/;"	e	enum:llvm::RTLIB::Libcall
SREM_I16	CodeGen/RuntimeLibcalls.h	/^    SREM_I16,$/;"	e	enum:llvm::RTLIB::Libcall
SREM_I32	CodeGen/RuntimeLibcalls.h	/^    SREM_I32,$/;"	e	enum:llvm::RTLIB::Libcall
SREM_I64	CodeGen/RuntimeLibcalls.h	/^    SREM_I64,$/;"	e	enum:llvm::RTLIB::Libcall
SREM_I8	CodeGen/RuntimeLibcalls.h	/^    SREM_I8,$/;"	e	enum:llvm::RTLIB::Libcall
SRL	CodeGen/ISDOpcodes.h	/^    SHL, SRA, SRL, ROTL, ROTR,$/;"	e	enum:llvm::ISD::NodeType
SRL	TableGen/Record.h	/^  enum BinaryOp { SHL, SRA, SRL, STRCONCAT, CONCAT, EQ };$/;"	e	enum:llvm::BinOpInit::BinaryOp
SRL_I128	CodeGen/RuntimeLibcalls.h	/^    SRL_I128,$/;"	e	enum:llvm::RTLIB::Libcall
SRL_I16	CodeGen/RuntimeLibcalls.h	/^    SRL_I16,$/;"	e	enum:llvm::RTLIB::Libcall
SRL_I32	CodeGen/RuntimeLibcalls.h	/^    SRL_I32,$/;"	e	enum:llvm::RTLIB::Libcall
SRL_I64	CodeGen/RuntimeLibcalls.h	/^    SRL_I64,$/;"	e	enum:llvm::RTLIB::Libcall
SRL_PARTS	CodeGen/ISDOpcodes.h	/^    SHL_PARTS, SRA_PARTS, SRL_PARTS,$/;"	e	enum:llvm::ISD::NodeType
SRet	Target/TargetCallingConv.h	/^    static const uint64_t SRet           = 1ULL<<3;  \/\/\/< Hidden struct-ret ptr$/;"	m	struct:llvm::ISD::ArgFlagsTy
SRetOffs	Target/TargetCallingConv.h	/^    static const uint64_t SRetOffs       = 3;$/;"	m	struct:llvm::ISD::ArgFlagsTy
SS	Support/Solaris.h	25;"	d
SS2IntervalMap	CodeGen/LiveStackAnalysis.h	/^    typedef std::map<int, LiveInterval> SS2IntervalMap;$/;"	t	class:llvm::LiveStacks
SSA	Transforms/Utils/SSAUpdater.h	/^  SSAUpdater &SSA;$/;"	m	class:llvm::LoadAndStorePromoter
SSAUpdater	Transforms/Utils/SSAUpdater.h	/^class SSAUpdater {$/;"	c	namespace:llvm
SSAUpdaterImpl	Transforms/Utils/SSAUpdaterImpl.h	/^  explicit SSAUpdaterImpl(UpdaterT *U, AvailableValsTy *A,$/;"	f	class:llvm::SSAUpdaterImpl
SSAUpdaterImpl	Transforms/Utils/SSAUpdaterImpl.h	/^class SSAUpdaterImpl {$/;"	c	namespace:llvm
SSC_Invalid	Support/COFF.h	/^    SSC_Invalid = 0xff,$/;"	e	enum:llvm::COFF::SymbolStorageClass
SSPBufferSize	Target/TargetOptions.h	/^    unsigned SSPBufferSize;$/;"	m	class:llvm::TargetOptions
SSUBO	CodeGen/ISDOpcodes.h	/^    SSUBO, USUBO,$/;"	e	enum:llvm::ISD::NodeType
STACKRESTORE	CodeGen/ISDOpcodes.h	/^    STACKRESTORE,$/;"	e	enum:llvm::ISD::NodeType
STACKSAVE	CodeGen/ISDOpcodes.h	/^    STACKSAVE,$/;"	e	enum:llvm::ISD::NodeType
STACK_ALIGN	DataLayout.h	/^  STACK_ALIGN = 's'                  \/\/\/< Stack objects alignment$/;"	e	enum:llvm::AlignTypeEnum
STATISTIC	ADT/Statistic.h	122;"	d
STB_GLOBAL	Support/ELF.h	/^  STB_GLOBAL = 1,  \/\/ Global symbol, visible to all object files being combined$/;"	e	enum:llvm::ELF::__anon103
STB_HIOS	Support/ELF.h	/^  STB_HIOS   = 12, \/\/ Highest operating system-specific binding type$/;"	e	enum:llvm::ELF::__anon103
STB_HIPROC	Support/ELF.h	/^  STB_HIPROC = 15  \/\/ Highest processor-specific binding type$/;"	e	enum:llvm::ELF::__anon103
STB_LOCAL	Support/ELF.h	/^  STB_LOCAL = 0,   \/\/ Local symbol, not visible outside obj file containing def$/;"	e	enum:llvm::ELF::__anon103
STB_LOOS	Support/ELF.h	/^  STB_LOOS   = 10, \/\/ Lowest operating system-specific binding type$/;"	e	enum:llvm::ELF::__anon103
STB_LOPROC	Support/ELF.h	/^  STB_LOPROC = 13, \/\/ Lowest processor-specific binding type$/;"	e	enum:llvm::ELF::__anon103
STB_WEAK	Support/ELF.h	/^  STB_WEAK = 2,    \/\/ Weak symbol, like global but lower-precedence$/;"	e	enum:llvm::ELF::__anon103
STF_External	Object/MachOFormat.h	/^    STF_External       = 0x01,$/;"	e	enum:llvm::object::macho::SymbolTypeFlags
STF_PrivateExtern	Object/MachOFormat.h	/^    STF_PrivateExtern  = 0x10$/;"	e	enum:llvm::object::macho::SymbolTypeFlags
STF_StabsEntryMask	Object/MachOFormat.h	/^    STF_StabsEntryMask = 0xe0,$/;"	e	enum:llvm::object::macho::SymbolTypeFlags
STF_TypeMask	Object/MachOFormat.h	/^    STF_TypeMask       = 0x0e,$/;"	e	enum:llvm::object::macho::SymbolTypeFlags
STI	CodeGen/TargetSchedule.h	/^  const TargetSubtargetInfo *STI;$/;"	m	class:llvm::TargetSchedModel
STI	MC/MCDisassembler.h	/^  const MCSubtargetInfo &STI;$/;"	m	class:llvm::MCDisassembler
STORE	CodeGen/ISDOpcodes.h	/^    LOAD, STORE,$/;"	e	enum:llvm::ISD::NodeType
STORE	CodeGen/LiveInterval.h	/^        STORE = 3,$/;"	e	enum:llvm::LiveInterval::InstrSlots::__anon40
STRCONCAT	TableGen/Record.h	/^  enum BinaryOp { SHL, SRA, SRL, STRCONCAT, CONCAT, EQ };$/;"	e	enum:llvm::BinOpInit::BinaryOp
STREAMABLEMEMORYOBJECT_H_	Support/StreamableMemoryObject.h	12;"	d
STRINGMATCHER_H	TableGen/StringMatcher.h	15;"	d
STTI	TargetTransformInfo.h	/^  const ScalarTargetTransformInfo *STTI;$/;"	m	class:llvm::TargetTransformInfo
STT_Absolute	Object/MachOFormat.h	/^    STT_Absolute  = 0x02,$/;"	e	enum:llvm::object::macho::SymbolTypeType
STT_COMMON	Support/ELF.h	/^  STT_COMMON  = 5,   \/\/ An uninitialized common block$/;"	e	enum:llvm::ELF::__anon104
STT_FILE	Support/ELF.h	/^  STT_FILE    = 4,   \/\/ Local, absolute symbol that refers to a file$/;"	e	enum:llvm::ELF::__anon104
STT_FUNC	Support/ELF.h	/^  STT_FUNC    = 2,   \/\/ Symbol is executable code (function, etc.)$/;"	e	enum:llvm::ELF::__anon104
STT_GNU_IFUNC	Support/ELF.h	/^  STT_GNU_IFUNC = 10, \/\/ GNU indirect function$/;"	e	enum:llvm::ELF::__anon104
STT_HIOS	Support/ELF.h	/^  STT_HIOS    = 8,   \/\/ Highest operating system-specific symbol type$/;"	e	enum:llvm::ELF::__anon104
STT_HIPROC	Support/ELF.h	/^  STT_HIPROC  = 15   \/\/ Highest processor-specific symbol type$/;"	e	enum:llvm::ELF::__anon104
STT_LOOS	Support/ELF.h	/^  STT_LOOS    = 7,   \/\/ Lowest operating system-specific symbol type$/;"	e	enum:llvm::ELF::__anon104
STT_LOPROC	Support/ELF.h	/^  STT_LOPROC  = 13,  \/\/ Lowest processor-specific symbol type$/;"	e	enum:llvm::ELF::__anon104
STT_NOTYPE	Support/ELF.h	/^  STT_NOTYPE  = 0,   \/\/ Symbol's type is not specified$/;"	e	enum:llvm::ELF::__anon104
STT_OBJECT	Support/ELF.h	/^  STT_OBJECT  = 1,   \/\/ Symbol is a data object (variable, array, etc.)$/;"	e	enum:llvm::ELF::__anon104
STT_SECTION	Support/ELF.h	/^  STT_SECTION = 3,   \/\/ Symbol refers to a section$/;"	e	enum:llvm::ELF::__anon104
STT_Section	Object/MachOFormat.h	/^    STT_Section   = 0x0e$/;"	e	enum:llvm::object::macho::SymbolTypeType
STT_TLS	Support/ELF.h	/^  STT_TLS     = 6,   \/\/ Thread local data object$/;"	e	enum:llvm::ELF::__anon104
STT_Undefined	Object/MachOFormat.h	/^    STT_Undefined = 0x00,$/;"	e	enum:llvm::object::macho::SymbolTypeType
STV_DEFAULT	Support/ELF.h	/^  STV_DEFAULT   = 0,  \/\/ Visibility is specified by binding type$/;"	e	enum:llvm::ELF::__anon105
STV_HIDDEN	Support/ELF.h	/^  STV_HIDDEN    = 2,  \/\/ Not visible to other components$/;"	e	enum:llvm::ELF::__anon105
STV_INTERNAL	Support/ELF.h	/^  STV_INTERNAL  = 1,  \/\/ Defined by processor supplements$/;"	e	enum:llvm::ELF::__anon105
STV_PROTECTED	Support/ELF.h	/^  STV_PROTECTED = 3   \/\/ Visible in other components but not preemptable$/;"	e	enum:llvm::ELF::__anon105
ST_Block	Support/YAMLParser.h	/^    ST_Block,$/;"	e	enum:llvm::yaml::SequenceNode::SequenceType
ST_Data	Object/ObjectFile.h	/^    ST_Data,$/;"	e	enum:llvm::object::SymbolRef::Type
ST_Debug	Object/ObjectFile.h	/^    ST_Debug,$/;"	e	enum:llvm::object::SymbolRef::Type
ST_File	Object/ObjectFile.h	/^    ST_File,$/;"	e	enum:llvm::object::SymbolRef::Type
ST_Flow	Support/YAMLParser.h	/^    ST_Flow,$/;"	e	enum:llvm::yaml::SequenceNode::SequenceType
ST_Function	Object/ObjectFile.h	/^    ST_Function,$/;"	e	enum:llvm::object::SymbolRef::Type
ST_Indentless	Support/YAMLParser.h	/^    ST_Indentless$/;"	e	enum:llvm::yaml::SequenceNode::SequenceType
ST_Other	Object/ObjectFile.h	/^    ST_Other$/;"	e	enum:llvm::object::SymbolRef::Type
ST_Unknown	Object/ObjectFile.h	/^    ST_Unknown, \/\/ Type not specified$/;"	e	enum:llvm::object::SymbolRef::Type
SU	CodeGen/ScheduleDAGInstrs.h	/^    SUnit *SU;$/;"	m	struct:llvm::PhysRegSUOper
SU	CodeGen/ScheduleDAGInstrs.h	/^    SUnit *SU;$/;"	m	struct:llvm::VReg2SUnit
SUB	CodeGen/ISDOpcodes.h	/^    ADD, SUB, MUL, SDIV, UDIV, SREM, UREM,$/;"	e	enum:llvm::ISD::NodeType
SUBC	CodeGen/ISDOpcodes.h	/^    ADDC, SUBC,$/;"	e	enum:llvm::ISD::NodeType
SUBE	CodeGen/ISDOpcodes.h	/^    ADDE, SUBE,$/;"	e	enum:llvm::ISD::NodeType
SUBREG_TO_REG	Target/TargetOpcodes.h	/^    SUBREG_TO_REG = 9,$/;"	e	enum:llvm::TargetOpcode::__anon139
SUBST	TableGen/Record.h	/^  enum TernaryOp { SUBST, FOREACH, IF };$/;"	e	enum:llvm::TernOpInit::TernaryOp
SUB_F32	CodeGen/RuntimeLibcalls.h	/^    SUB_F32,$/;"	e	enum:llvm::RTLIB::Libcall
SUB_F64	CodeGen/RuntimeLibcalls.h	/^    SUB_F64,$/;"	e	enum:llvm::RTLIB::Libcall
SUB_F80	CodeGen/RuntimeLibcalls.h	/^    SUB_F80,$/;"	e	enum:llvm::RTLIB::Libcall
SUB_PPCF128	CodeGen/RuntimeLibcalls.h	/^    SUB_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
SUPPORT_SMLOC_H	Support/SMLoc.h	16;"	d
SUPPORT_SOURCEMGR_H	Support/SourceMgr.h	17;"	d
SUnit	CodeGen/ScheduleDAG.h	/^    SUnit()$/;"	f	class:llvm::SUnit
SUnit	CodeGen/ScheduleDAG.h	/^    SUnit(MachineInstr *instr, unsigned nodenum)$/;"	f	class:llvm::SUnit
SUnit	CodeGen/ScheduleDAG.h	/^    SUnit(SDNode *node, unsigned nodenum)$/;"	f	class:llvm::SUnit
SUnit	CodeGen/ScheduleDAG.h	/^  class SUnit {$/;"	c	namespace:llvm
SUnitIterator	CodeGen/ScheduleDAG.h	/^    SUnitIterator(SUnit *N, unsigned Op) : Node(N), Operand(Op) {}$/;"	f	class:llvm::SUnitIterator
SUnitIterator	CodeGen/ScheduleDAG.h	/^  class SUnitIterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
SUnits	CodeGen/LatencyPriorityQueue.h	/^    std::vector<SUnit> *SUnits;$/;"	m	class:llvm::LatencyPriorityQueue
SUnits	CodeGen/ResourcePriorityQueue.h	/^    std::vector<SUnit> *SUnits;$/;"	m	class:llvm::ResourcePriorityQueue
SUnits	CodeGen/ScheduleDAG.h	/^    std::vector<SUnit> &SUnits;$/;"	m	class:llvm::ScheduleDAGTopologicalSort
SUnits	CodeGen/ScheduleDAG.h	/^    std::vector<SUnit> SUnits;            \/\/ The scheduling units.$/;"	m	class:llvm::ScheduleDAG
SUnits	CodeGen/ScheduleDAGInstrs.h	/^    std::vector<std::vector<PhysRegSUOper> > SUnits;$/;"	m	class:llvm::Reg2SUnitsMap
SV	ExecutionEngine/ObjectBuffer.h	/^  SmallVector<char, 4096> SV; \/\/ Working buffer into which we JIT.$/;"	m	class:llvm::ObjectBufferStream
SVR4SymbolTableFlag	Bitcode/Archive.h	/^      SVR4SymbolTableFlag = 1,     \/\/\/< Member is a SVR4 symbol table$/;"	e	enum:llvm::ArchiveMember::Flags
SV_COFF	MC/MCSection.h	/^      SV_COFF = 0,$/;"	e	enum:llvm::MCSection::SectionVariant
SV_ELF	MC/MCSection.h	/^      SV_ELF,$/;"	e	enum:llvm::MCSection::SectionVariant
SV_MachO	MC/MCSection.h	/^      SV_MachO$/;"	e	enum:llvm::MCSection::SectionVariant
SYMENTRY_SIZE32	Support/ELF.h	/^  SYMENTRY_SIZE32 = 16, \/\/ 32-bit symbol entry size$/;"	e	enum:llvm::ELF::__anon102
SYMENTRY_SIZE64	Support/ELF.h	/^  SYMENTRY_SIZE64 = 24  \/\/ 64-bit symbol entry size.$/;"	e	enum:llvm::ELF::__anon102
SYNCHSCOPE_CROSSTHREAD	Bitcode/LLVMBitCodes.h	/^    SYNCHSCOPE_CROSSTHREAD = 1$/;"	e	enum:llvm::bitc::AtomicSynchScopeCodes
SYNCHSCOPE_SINGLETHREAD	Bitcode/LLVMBitCodes.h	/^    SYNCHSCOPE_SINGLETHREAD = 0,$/;"	e	enum:llvm::bitc::AtomicSynchScopeCodes
SYNC_FETCH_AND_ADD_1	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_ADD_1,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_ADD_2	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_ADD_2,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_ADD_4	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_ADD_4,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_ADD_8	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_ADD_8,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_AND_1	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_AND_1,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_AND_2	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_AND_2,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_AND_4	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_AND_4,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_AND_8	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_AND_8,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_NAND_1	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_NAND_1,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_NAND_2	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_NAND_2,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_NAND_4	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_NAND_4,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_NAND_8	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_NAND_8,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_OR_1	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_OR_1,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_OR_2	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_OR_2,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_OR_4	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_OR_4,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_OR_8	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_OR_8,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_SUB_1	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_SUB_1,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_SUB_2	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_SUB_2,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_SUB_4	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_SUB_4,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_SUB_8	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_SUB_8,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_XOR_1	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_XOR_1,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_XOR_2	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_XOR_2,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_XOR_4	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_XOR_4,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_FETCH_AND_XOR_8	CodeGen/RuntimeLibcalls.h	/^    SYNC_FETCH_AND_XOR_8,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_LOCK_TEST_AND_SET_1	CodeGen/RuntimeLibcalls.h	/^    SYNC_LOCK_TEST_AND_SET_1,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_LOCK_TEST_AND_SET_2	CodeGen/RuntimeLibcalls.h	/^    SYNC_LOCK_TEST_AND_SET_2,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_LOCK_TEST_AND_SET_4	CodeGen/RuntimeLibcalls.h	/^    SYNC_LOCK_TEST_AND_SET_4,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_LOCK_TEST_AND_SET_8	CodeGen/RuntimeLibcalls.h	/^    SYNC_LOCK_TEST_AND_SET_8,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_VAL_COMPARE_AND_SWAP_1	CodeGen/RuntimeLibcalls.h	/^    SYNC_VAL_COMPARE_AND_SWAP_1,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_VAL_COMPARE_AND_SWAP_2	CodeGen/RuntimeLibcalls.h	/^    SYNC_VAL_COMPARE_AND_SWAP_2,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_VAL_COMPARE_AND_SWAP_4	CodeGen/RuntimeLibcalls.h	/^    SYNC_VAL_COMPARE_AND_SWAP_4,$/;"	e	enum:llvm::RTLIB::Libcall
SYNC_VAL_COMPARE_AND_SWAP_8	CodeGen/RuntimeLibcalls.h	/^    SYNC_VAL_COMPARE_AND_SWAP_8,$/;"	e	enum:llvm::RTLIB::Libcall
S_16BYTE_LITERALS	MC/MCSectionMachO.h	/^    S_16BYTE_LITERALS            = 0x0EU,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_4BYTE_LITERALS	MC/MCSectionMachO.h	/^    S_4BYTE_LITERALS             = 0x03U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_8BYTE_LITERALS	MC/MCSectionMachO.h	/^    S_8BYTE_LITERALS             = 0x04U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_DEBUG	MC/MCSectionMachO.h	/^    S_ATTR_DEBUG               = 1U << 25,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_EXT_RELOC	MC/MCSectionMachO.h	/^    S_ATTR_EXT_RELOC           = 1U << 9,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_LIVE_SUPPORT	MC/MCSectionMachO.h	/^    S_ATTR_LIVE_SUPPORT        = 1U << 27,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_LOC_RELOC	MC/MCSectionMachO.h	/^    S_ATTR_LOC_RELOC           = 1U << 8$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_NO_DEAD_STRIP	MC/MCSectionMachO.h	/^    S_ATTR_NO_DEAD_STRIP       = 1U << 28,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_NO_TOC	MC/MCSectionMachO.h	/^    S_ATTR_NO_TOC              = 1U << 30,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_PURE_INSTRUCTIONS	MC/MCSectionMachO.h	/^    S_ATTR_PURE_INSTRUCTIONS   = 1U << 31,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_SELF_MODIFYING_CODE	MC/MCSectionMachO.h	/^    S_ATTR_SELF_MODIFYING_CODE = 1U << 26,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_SOME_INSTRUCTIONS	MC/MCSectionMachO.h	/^    S_ATTR_SOME_INSTRUCTIONS   = 1U << 10,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ATTR_STRIP_STATIC_SYMS	MC/MCSectionMachO.h	/^    S_ATTR_STRIP_STATIC_SYMS   = 1U << 29,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_COALESCED	MC/MCSectionMachO.h	/^    S_COALESCED                  = 0x0BU,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_CSTRING_LITERALS	MC/MCSectionMachO.h	/^    S_CSTRING_LITERALS           = 0x02U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_DTRACE_DOF	MC/MCSectionMachO.h	/^    S_DTRACE_DOF                 = 0x0FU,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_GB_ZEROFILL	MC/MCSectionMachO.h	/^    S_GB_ZEROFILL                = 0x0CU,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_INTERPOSING	MC/MCSectionMachO.h	/^    S_INTERPOSING                = 0x0DU,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_LAZY_DYLIB_SYMBOL_POINTERS	MC/MCSectionMachO.h	/^    S_LAZY_DYLIB_SYMBOL_POINTERS = 0x10U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_LAZY_SYMBOL_POINTERS	MC/MCSectionMachO.h	/^    S_LAZY_SYMBOL_POINTERS       = 0x07U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_LITERAL_POINTERS	MC/MCSectionMachO.h	/^    S_LITERAL_POINTERS           = 0x05U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_MOD_INIT_FUNC_POINTERS	MC/MCSectionMachO.h	/^    S_MOD_INIT_FUNC_POINTERS     = 0x09U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_MOD_TERM_FUNC_POINTERS	MC/MCSectionMachO.h	/^    S_MOD_TERM_FUNC_POINTERS     = 0x0AU,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_NON_LAZY_SYMBOL_POINTERS	MC/MCSectionMachO.h	/^    S_NON_LAZY_SYMBOL_POINTERS   = 0x06U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_REGULAR	MC/MCSectionMachO.h	/^    S_REGULAR                    = 0x00U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_SYMBOL_STUBS	MC/MCSectionMachO.h	/^    S_SYMBOL_STUBS               = 0x08U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_THREAD_LOCAL_INIT_FUNCTION_POINTERS	MC/MCSectionMachO.h	/^    S_THREAD_LOCAL_INIT_FUNCTION_POINTERS = 0x15U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_THREAD_LOCAL_REGULAR	MC/MCSectionMachO.h	/^    S_THREAD_LOCAL_REGULAR = 0x11U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_THREAD_LOCAL_VARIABLES	MC/MCSectionMachO.h	/^    S_THREAD_LOCAL_VARIABLES = 0x13U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_THREAD_LOCAL_VARIABLE_POINTERS	MC/MCSectionMachO.h	/^    S_THREAD_LOCAL_VARIABLE_POINTERS = 0x14U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_THREAD_LOCAL_ZEROFILL	MC/MCSectionMachO.h	/^    S_THREAD_LOCAL_ZEROFILL = 0x12U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
S_ZEROFILL	MC/MCSectionMachO.h	/^    S_ZEROFILL                   = 0x01U,$/;"	e	enum:llvm::MCSectionMachO::__anon66
SafePoints	CodeGen/GCMetadata.h	/^    std::vector<GCPoint> SafePoints;$/;"	m	class:llvm::GCFunctionInfo
SameValue	MC/MCDwarf.h	/^    enum OpType { SameValue, RememberState, RestoreState, Move, RelMove, Escape,$/;"	e	enum:llvm::MCCFIInstruction::OpType
SaveAndRestore	Support/SaveAndRestore.h	/^  SaveAndRestore(T& x) : X(x), old_value(x) {}$/;"	f	struct:llvm::SaveAndRestore
SaveAndRestore	Support/SaveAndRestore.h	/^  SaveAndRestore(T& x, const T &new_value) : X(x), old_value(x) {$/;"	f	struct:llvm::SaveAndRestore
SaveAndRestore	Support/SaveAndRestore.h	/^struct SaveAndRestore {$/;"	s	namespace:llvm
SaveOr	Support/SaveAndRestore.h	/^  SaveOr(bool& x) : X(x), old_value(x) { x = false; }$/;"	f	struct:llvm::SaveOr
SaveOr	Support/SaveAndRestore.h	/^struct SaveOr {$/;"	s	namespace:llvm
SavePoint	CodeGen/FastISel.h	/^  struct SavePoint {$/;"	s	class:llvm::FastISel
Scalar	Analysis/DependenceAnalysis.h	/^      bool Scalar    : 1; \/\/ Init to true.$/;"	m	struct:llvm::Dependence::DVEntry
ScalarCondVectorVal	Target/TargetLowering.h	/^    ScalarCondVectorVal,  \/\/ The target supports selects with a scalar condition$/;"	e	enum:llvm::TargetLowering::SelectSupportKind
ScalarEvolution	Analysis/ScalarEvolution.h	/^  class ScalarEvolution : public FunctionPass {$/;"	c	namespace:llvm
ScalarNode	Support/YAMLParser.h	/^  ScalarNode(OwningPtr<Document> &D, StringRef Anchor, StringRef Val)$/;"	f	class:llvm::yaml::ScalarNode
ScalarNode	Support/YAMLParser.h	/^class ScalarNode : public Node {$/;"	c	namespace:llvm::yaml
ScalarTargetTransformImpl	Target/TargetTransformImpl.h	/^  explicit ScalarTargetTransformImpl(const TargetLowering *TL) : TLI(TL) {}$/;"	f	class:llvm::ScalarTargetTransformImpl
ScalarTargetTransformImpl	Target/TargetTransformImpl.h	/^class ScalarTargetTransformImpl : public ScalarTargetTransformInfo {$/;"	c	namespace:llvm
ScalarTargetTransformInfo	TargetTransformInfo.h	/^class ScalarTargetTransformInfo {$/;"	c	namespace:llvm
ScalarValSelect	Target/TargetLowering.h	/^    ScalarValSelect,      \/\/ The target supports scalar selects (ex: cmov).$/;"	e	enum:llvm::TargetLowering::SelectSupportKind
Scale	AddressingMode.h	/^  int64_t      Scale;$/;"	m	struct:llvm::AddrMode
ScaledReg	Transforms/Utils/AddrModeMatcher.h	/^  Value *ScaledReg;$/;"	m	struct:llvm::ExtAddrMode
Scanned	Support/FormattedStream.h	/^    const char *Scanned;$/;"	m	class:llvm::formatted_raw_ostream
ScannedRemattable	CodeGen/LiveRangeEdit.h	/^  bool ScannedRemattable;$/;"	m	class:llvm::LiveRangeEdit
ScavengeRestore	CodeGen/RegisterScavenging.h	/^  const MachineInstr *ScavengeRestore;$/;"	m	class:llvm::RegScavenger
ScavengedRC	CodeGen/RegisterScavenging.h	/^  const TargetRegisterClass *ScavengedRC;$/;"	m	class:llvm::RegScavenger
ScavengedReg	CodeGen/RegisterScavenging.h	/^  unsigned ScavengedReg;$/;"	m	class:llvm::RegScavenger
ScavengingFrameIndex	CodeGen/RegisterScavenging.h	/^  int ScavengingFrameIndex;$/;"	m	class:llvm::RegScavenger
SccTy	ADT/SCCIterator.h	/^  typedef std::vector<NodeType*> SccTy;$/;"	t	class:llvm::scc_iterator
Sched	Target/TargetLowering.h	/^  namespace Sched {$/;"	n	namespace:llvm
SchedClass	MC/MCInstrDesc.h	/^  unsigned short  SchedClass;    \/\/ enum identifying instr sched class$/;"	m	class:llvm::MCInstrDesc
SchedClassTable	MC/MCSchedule.h	/^  const MCSchedClassDesc *SchedClassTable;$/;"	m	class:llvm::MCSchedModel
SchedImpl	CodeGen/MachineScheduler.h	/^  MachineSchedStrategy *SchedImpl;$/;"	m	class:llvm::ScheduleDAGMI
SchedModel	CodeGen/ScheduleDAGInstrs.h	/^    TargetSchedModel SchedModel;$/;"	m	class:llvm::ScheduleDAGInstrs
SchedModel	CodeGen/TargetSchedule.h	/^  MCSchedModel SchedModel;$/;"	m	class:llvm::TargetSchedModel
SchedModel	MC/MCInstrItineraries.h	/^  const MCSchedModel   *SchedModel;     \/\/\/< Basic machine properties.$/;"	m	class:llvm::InstrItineraryData
SchedPreferenceInfo	Target/TargetLowering.h	/^  Sched::Preference SchedPreferenceInfo;$/;"	m	class:llvm::TargetLowering
ScheduleDAG	CodeGen/ScheduleDAG.h	/^  class ScheduleDAG {$/;"	c	namespace:llvm
ScheduleDAGCtor	CodeGen/MachineScheduler.h	/^  typedef ScheduleDAGInstrs *(*ScheduleDAGCtor)(MachineSchedContext *);$/;"	t	class:llvm::MachineSchedRegistry
ScheduleDAGILP	CodeGen/ScheduleDAGILP.h	/^  ScheduleDAGILP(bool IsBU): IsBottomUp(IsBU) {}$/;"	f	class:llvm::ScheduleDAGILP
ScheduleDAGILP	CodeGen/ScheduleDAGILP.h	/^class ScheduleDAGILP {$/;"	c	namespace:llvm
ScheduleDAGInstrs	CodeGen/ScheduleDAGInstrs.h	/^  class ScheduleDAGInstrs : public ScheduleDAG {$/;"	c	namespace:llvm
ScheduleDAGMI	CodeGen/MachineScheduler.h	/^  ScheduleDAGMI(MachineSchedContext *C, MachineSchedStrategy *S):$/;"	f	class:llvm::ScheduleDAGMI
ScheduleDAGMI	CodeGen/MachineScheduler.h	/^class ScheduleDAGMI : public ScheduleDAGInstrs {$/;"	c	namespace:llvm
ScheduleDAGMutation	CodeGen/MachineScheduler.h	/^class ScheduleDAGMutation {$/;"	c	namespace:llvm
ScheduleDAGTopologicalSort	CodeGen/ScheduleDAG.h	/^  class ScheduleDAGTopologicalSort {$/;"	c	namespace:llvm
ScheduleHazardRecognizer	CodeGen/ScheduleHazardRecognizer.h	/^  ScheduleHazardRecognizer(): MaxLookAhead(0) {}$/;"	f	class:llvm::ScheduleHazardRecognizer
ScheduleHazardRecognizer	CodeGen/ScheduleHazardRecognizer.h	/^class ScheduleHazardRecognizer {$/;"	c	namespace:llvm
SchedulingPref	CodeGen/ScheduleDAG.h	/^    Sched::Preference SchedulingPref;   \/\/ Scheduling preference.$/;"	m	class:llvm::SUnit
SchedulingPriorityQueue	CodeGen/ScheduleDAG.h	/^    SchedulingPriorityQueue(bool rf = false):$/;"	f	class:llvm::SchedulingPriorityQueue
SchedulingPriorityQueue	CodeGen/ScheduleDAG.h	/^  class SchedulingPriorityQueue {$/;"	c	namespace:llvm
ScopeIdx	Support/DebugLoc.h	/^    int ScopeIdx;$/;"	m	class:llvm::DebugLoc
ScopeTy	ADT/ScopedHashTable.h	/^  typedef ScopedHashTableScope<K, V, KInfo, AllocatorTy> ScopeTy;$/;"	t	class:llvm::ScopedHashTable
ScopedFatalErrorHandler	Support/ErrorHandling.h	/^    explicit ScopedFatalErrorHandler(fatal_error_handler_t handler,$/;"	f	struct:llvm::ScopedFatalErrorHandler
ScopedFatalErrorHandler	Support/ErrorHandling.h	/^  struct ScopedFatalErrorHandler {$/;"	s	namespace:llvm
ScopedHashTable	ADT/ScopedHashTable.h	/^  ScopedHashTable() : CurScope(0) {}$/;"	f	class:llvm::ScopedHashTable
ScopedHashTable	ADT/ScopedHashTable.h	/^  ScopedHashTable(AllocatorTy A) : CurScope(0), Allocator(A) {}$/;"	f	class:llvm::ScopedHashTable
ScopedHashTable	ADT/ScopedHashTable.h	/^class ScopedHashTable {$/;"	c	namespace:llvm
ScopedHashTableIterator	ADT/ScopedHashTable.h	/^  ScopedHashTableIterator(ScopedHashTableVal<K, V> *node) : Node(node) {}$/;"	f	class:llvm::ScopedHashTableIterator
ScopedHashTableIterator	ADT/ScopedHashTable.h	/^class ScopedHashTableIterator {$/;"	c	namespace:llvm
ScopedHashTableScope	ADT/ScopedHashTable.h	/^  ScopedHashTableScope(ScopedHashTable<K, V, KInfo, Allocator> &ht) : HT(ht) {$/;"	f	class:llvm::ScopedHashTableScope
ScopedHashTableScope	ADT/ScopedHashTable.h	/^class ScopedHashTableScope {$/;"	c	namespace:llvm
ScopedHashTableVal	ADT/ScopedHashTable.h	/^  ScopedHashTableVal(const K &key, const V &val) : Key(key), Val(val) {}$/;"	f	class:llvm::ScopedHashTableVal
ScopedHashTableVal	ADT/ScopedHashTable.h	/^class ScopedHashTableVal {$/;"	c	namespace:llvm
ScopedLock	Support/Mutex.h	/^    typedef SmartScopedLock<false> ScopedLock;$/;"	t	namespace:llvm::sys
ScopedReader	Support/RWMutex.h	/^    typedef SmartScopedReader<false> ScopedReader;$/;"	t	namespace:llvm::sys
ScopedWriter	Support/RWMutex.h	/^    typedef SmartScopedWriter<false> ScopedWriter;$/;"	t	namespace:llvm::sys
Scoreboard	CodeGen/ScoreboardHazardRecognizer.h	/^    Scoreboard():Data(NULL), Depth(0), Head(0) { }$/;"	f	class:llvm::ScoreboardHazardRecognizer::Scoreboard
Scoreboard	CodeGen/ScoreboardHazardRecognizer.h	/^  class Scoreboard {$/;"	c	class:llvm::ScoreboardHazardRecognizer
ScoreboardHazardRecognizer	CodeGen/ScoreboardHazardRecognizer.h	/^class ScoreboardHazardRecognizer : public ScheduleHazardRecognizer {$/;"	c	namespace:llvm
SearchForAddressOfSymbol	Support/DynamicLibrary.h	/^    static void *SearchForAddressOfSymbol(const std::string &symbolName) {$/;"	f	class:llvm::sys::DynamicLibrary
SearchLimit	Transforms/Vectorize.h	/^  unsigned SearchLimit;$/;"	m	struct:llvm::VectorizeConfig
SecondInfo	ADT/DenseMapInfo.h	/^  typedef DenseMapInfo<U> SecondInfo;$/;"	t	struct:llvm::DenseMapInfo
SecondsType	Support/TimeValue.h	/^    typedef int64_t SecondsType;    \/\/\/< Type used for representing seconds.$/;"	t	class:llvm::sys::TimeValue
Section	GlobalValue.h	/^  std::string Section;        \/\/ Section to emit this into, empty mean default$/;"	m	class:llvm::GlobalValue
Section	MC/MCAssembler.h	/^  const MCSection *Section;$/;"	m	class:llvm::MCSectionData
Section	MC/MCSymbol.h	/^    const MCSection *Section;$/;"	m	class:llvm::MCSymbol
Section	Object/ELF.h	/^    const Elf_Shdr *Section;$/;"	m	class:llvm::object::ELFObjectFile::ELFRelocationIterator
Section	Object/MachOFormat.h	/^  struct Section {$/;"	s	namespace:llvm::object::macho
Section32Size	Object/MachOFormat.h	/^    Section32Size = 68,$/;"	e	enum:llvm::object::macho::StructureSizes
Section64	Object/MachOFormat.h	/^  struct Section64 {$/;"	s	namespace:llvm::object::macho
Section64Size	Object/MachOFormat.h	/^    Section64Size = 80,$/;"	e	enum:llvm::object::macho::StructureSizes
SectionAddrMap	MC/MCExpr.h	/^typedef DenseMap<const MCSectionData*, uint64_t> SectionAddrMap;$/;"	t	namespace:llvm
SectionAddress	MC/MCMachObjectWriter.h	/^  SectionAddrMap SectionAddress;$/;"	m	class:llvm::MachObjectWriter
SectionAlignment	Support/COFF.h	/^    uint32_t SectionAlignment;$/;"	m	struct:llvm::COFF::PEHeader
SectionAttrSytemHasExternalRelocations	Support/MachO.h	/^      SectionAttrSytemHasExternalRelocations= 0x00000200u, \/\/ S_ATTR_EXT_RELOC$/;"	e	enum:llvm::MachO::__anon126
SectionAttrSytemHasLocalRelocations	Support/MachO.h	/^      SectionAttrSytemHasLocalRelocations   = 0x00000100u, \/\/ S_ATTR_LOC_RELOC$/;"	e	enum:llvm::MachO::__anon126
SectionAttrSytemSomeInstructions	Support/MachO.h	/^      SectionAttrSytemSomeInstructions      = 0x00000400u, \/\/ S_ATTR_SOME_INSTRUCTIONS$/;"	e	enum:llvm::MachO::__anon126
SectionAttrUserCanStripStaticSymbols	Support/MachO.h	/^      SectionAttrUserCanStripStaticSymbols  = 0x20000000u, \/\/ S_ATTR_STRIP_STATIC_SYMS$/;"	e	enum:llvm::MachO::__anon126
SectionAttrUserDebug	Support/MachO.h	/^      SectionAttrUserDebug                  = 0x02000000u, \/\/ S_ATTR_DEBUG$/;"	e	enum:llvm::MachO::__anon126
SectionAttrUserLiveSupport	Support/MachO.h	/^      SectionAttrUserLiveSupport            = 0x08000000u, \/\/ S_ATTR_LIVE_SUPPORT$/;"	e	enum:llvm::MachO::__anon126
SectionAttrUserNoDeadStrip	Support/MachO.h	/^      SectionAttrUserNoDeadStrip            = 0x10000000u, \/\/ S_ATTR_NO_DEAD_STRIP$/;"	e	enum:llvm::MachO::__anon126
SectionAttrUserNoTableOfContents	Support/MachO.h	/^      SectionAttrUserNoTableOfContents      = 0x40000000u, \/\/ S_ATTR_NO_TOC$/;"	e	enum:llvm::MachO::__anon126
SectionAttrUserPureInstructions	Support/MachO.h	/^      SectionAttrUserPureInstructions       = 0x80000000u, \/\/ S_ATTR_PURE_INSTRUCTIONS$/;"	e	enum:llvm::MachO::__anon126
SectionAttrUserSelfModifyingCode	Support/MachO.h	/^      SectionAttrUserSelfModifyingCode      = 0x04000000u, \/\/ S_ATTR_SELF_MODIFYING_CODE$/;"	e	enum:llvm::MachO::__anon126
SectionCharacteristics	Support/COFF.h	/^  enum SectionCharacteristics {$/;"	g	namespace:llvm::COFF
SectionData	MC/MCAssembler.h	/^  MCSectionData *SectionData;$/;"	m	struct:llvm::IndirectSymbolData
SectionDataListType	MC/MCAssembler.h	/^  typedef iplist<MCSectionData> SectionDataListType;$/;"	t	class:llvm::MCAssembler
SectionDefinition	Support/COFF.h	/^    AuxiliarySectionDefinition  SectionDefinition;$/;"	m	union:llvm::COFF::Auxiliary
SectionFlagMaskAllAttributes	Support/MachO.h	/^      SectionFlagMaskAllAttributes    = 0xffffff00u, \/\/ SECTION_ATTRIBUTES$/;"	e	enum:llvm::MachO::__anon126
SectionFlagMaskSectionType	Support/MachO.h	/^      SectionFlagMaskSectionType      = 0x000000ffu, \/\/ SECTION_TYPE$/;"	e	enum:llvm::MachO::__anon126
SectionFlagMaskSystemAttributes	Support/MachO.h	/^      SectionFlagMaskSystemAttributes = 0x00ffff00u, \/\/ SECTION_ATTRIBUTES_SYS$/;"	e	enum:llvm::MachO::__anon126
SectionFlagMaskUserAttributes	Support/MachO.h	/^      SectionFlagMaskUserAttributes   = 0xff000000u, \/\/ SECTION_ATTRIBUTES_USR$/;"	e	enum:llvm::MachO::__anon126
SectionForGlobal	Target/TargetLoweringObjectFile.h	/^  const MCSection *SectionForGlobal(const GlobalValue *GV,$/;"	f	class:llvm::TargetLoweringObjectFile
SectionHeaderTable	Object/ELF.h	/^  const Elf_Shdr *SectionHeaderTable;$/;"	m	class:llvm::object::ELFObjectFile
SectionIndex	MC/MCMachObjectWriter.h	/^    uint8_t SectionIndex;$/;"	m	struct:llvm::MachObjectWriter::MachSymbolData
SectionIndex	Object/MachOFormat.h	/^    uint8_t SectionIndex;$/;"	m	struct:llvm::object::macho::Symbol64TableEntry
SectionIndex	Object/MachOFormat.h	/^    uint8_t SectionIndex;$/;"	m	struct:llvm::object::macho::SymbolTableEntry
SectionKind	MC/SectionKind.h	/^class SectionKind {$/;"	c	namespace:llvm
SectionList	Object/MachO.h	/^  typedef SmallVector<DataRefImpl, 1> SectionList;$/;"	t	class:llvm::object::MachOObjectFile
SectionMap	MC/MCAssembler.h	/^  DenseMap<const MCSection*, MCSectionData*> SectionMap;$/;"	m	class:llvm::MCAssembler
SectionName	MC/MCSectionCOFF.h	/^    StringRef SectionName;$/;"	m	class:llvm::MCSectionCOFF
SectionName	MC/MCSectionELF.h	/^  StringRef SectionName;$/;"	m	class:llvm::MCSectionELF
SectionName	MC/MCSectionMachO.h	/^  char SectionName[16];  \/\/ Not necessarily null terminated!$/;"	m	class:llvm::MCSectionMachO
SectionNumber	Object/COFF.h	/^  support::little16_t SectionNumber;$/;"	m	struct:llvm::object::coff_symbol
SectionNumber	Support/COFF.h	/^    uint16_t SectionNumber;$/;"	m	struct:llvm::COFF::symbol
SectionOrder	MC/MCAsmLayout.h	/^  llvm::SmallVector<MCSectionData*, 16> SectionOrder;$/;"	m	class:llvm::MCAsmLayout
SectionPimpl	Object/ObjectFile.h	/^  DataRefImpl SectionPimpl;$/;"	m	class:llvm::object::SectionRef
SectionRef	Object/ObjectFile.h	/^  SectionRef() : OwningObject(NULL) { }$/;"	f	class:llvm::object::SectionRef
SectionRef	Object/ObjectFile.h	/^class SectionRef {$/;"	c	namespace:llvm::object
SectionRef	Object/ObjectFile.h	/^inline SectionRef::SectionRef(DataRefImpl SectionP,$/;"	f	class:llvm::object::SectionRef
SectionRelocMap	Object/ELF.h	/^  RelocMap_t SectionRelocMap;$/;"	m	class:llvm::object::ELFObjectFile
SectionSize	Support/COFF.h	/^    SectionSize    = 40,$/;"	e	enum:llvm::COFF::__anon80
SectionStack	MC/MCStreamer.h	/^                const MCSection *>, 4> SectionStack;$/;"	m	class:llvm::MCStreamer
SectionTable	Object/COFF.h	/^  const coff_section     *SectionTable;$/;"	m	class:llvm::object::COFFObjectFile
SectionType16ByteLiterals	Support/MachO.h	/^      SectionType16ByteLiterals             = 0x0eu, \/\/ S_16BYTE_LITERALS$/;"	e	enum:llvm::MachO::__anon126
SectionType4ByteLiterals	Support/MachO.h	/^      SectionType4ByteLiterals              = 0x03u, \/\/ S_4BYTE_LITERALS$/;"	e	enum:llvm::MachO::__anon126
SectionType8ByteLiterals	Support/MachO.h	/^      SectionType8ByteLiterals              = 0x04u, \/\/ S_8BYTE_LITERALS$/;"	e	enum:llvm::MachO::__anon126
SectionTypeCStringLiterals	Support/MachO.h	/^      SectionTypeCStringLiterals            = 0x02u, \/\/ S_CSTRING_LITERALS$/;"	e	enum:llvm::MachO::__anon126
SectionTypeCoalesced	Support/MachO.h	/^      SectionTypeCoalesced                  = 0x0bu, \/\/ S_COALESCED$/;"	e	enum:llvm::MachO::__anon126
SectionTypeDTraceObjectFormat	Support/MachO.h	/^      SectionTypeDTraceObjectFormat         = 0x0fu, \/\/ S_DTRACE_DOF$/;"	e	enum:llvm::MachO::__anon126
SectionTypeInterposing	Support/MachO.h	/^      SectionTypeInterposing                = 0x0du, \/\/ S_INTERPOSING$/;"	e	enum:llvm::MachO::__anon126
SectionTypeLazyDylibSymbolPointers	Support/MachO.h	/^      SectionTypeLazyDylibSymbolPointers    = 0x10u, \/\/ S_LAZY_DYLIB_SYMBOL_POINTERS$/;"	e	enum:llvm::MachO::__anon126
SectionTypeLazySymbolPointers	Support/MachO.h	/^      SectionTypeLazySymbolPointers         = 0x07u, \/\/ S_LAZY_SYMBOL_POINTERS$/;"	e	enum:llvm::MachO::__anon126
SectionTypeLiteralPointers	Support/MachO.h	/^      SectionTypeLiteralPointers            = 0x05u, \/\/ S_LITERAL_POINTERS$/;"	e	enum:llvm::MachO::__anon126
SectionTypeModuleInitFunctionPointers	Support/MachO.h	/^      SectionTypeModuleInitFunctionPointers = 0x09u, \/\/ S_MOD_INIT_FUNC_POINTERS$/;"	e	enum:llvm::MachO::__anon126
SectionTypeModuleTermFunctionPointers	Support/MachO.h	/^      SectionTypeModuleTermFunctionPointers = 0x0au, \/\/ S_MOD_TERM_FUNC_POINTERS$/;"	e	enum:llvm::MachO::__anon126
SectionTypeNonLazySymbolPointers	Support/MachO.h	/^      SectionTypeNonLazySymbolPointers      = 0x06u, \/\/ S_NON_LAZY_SYMBOL_POINTERS$/;"	e	enum:llvm::MachO::__anon126
SectionTypeRegular	Support/MachO.h	/^      SectionTypeRegular                    = 0x00u, \/\/ S_REGULAR$/;"	e	enum:llvm::MachO::__anon126
SectionTypeSymbolStubs	Support/MachO.h	/^      SectionTypeSymbolStubs                = 0x08u, \/\/ S_SYMBOL_STUBS$/;"	e	enum:llvm::MachO::__anon126
SectionTypeZeroFill	Support/MachO.h	/^      SectionTypeZeroFill                   = 0x01u, \/\/ S_ZEROFILL$/;"	e	enum:llvm::MachO::__anon126
SectionTypeZeroFillLarge	Support/MachO.h	/^      SectionTypeZeroFillLarge              = 0x0cu, \/\/ S_GB_ZEROFILL$/;"	e	enum:llvm::MachO::__anon126
SectionVariant	MC/MCSection.h	/^    enum SectionVariant {$/;"	g	class:llvm::MCSection
Sections	MC/MCAssembler.h	/^  iplist<MCSectionData> Sections;$/;"	m	class:llvm::MCAssembler
Sections	Object/MachO.h	/^  SectionList Sections;$/;"	m	class:llvm::object::MachOObjectFile
Sections_t	Object/ELF.h	/^  typedef SmallVector<const Elf_Shdr*, 1> Sections_t;$/;"	t	class:llvm::object::ELFObjectFile
SecureLog	MC/MCContext.h	/^    raw_ostream *SecureLog;$/;"	m	class:llvm::MCContext
SecureLogFile	MC/MCContext.h	/^    char *SecureLogFile;$/;"	m	class:llvm::MCContext
SecureLogUsed	MC/MCContext.h	/^    bool SecureLogUsed;$/;"	m	class:llvm::MCContext
SeenInsts	Analysis/MemoryBuiltins.h	/^  SmallPtrSet<Instruction *, 8> SeenInsts;$/;"	m	class:llvm::ObjectSizeOffsetVisitor
SeenVals	Analysis/MemoryBuiltins.h	/^  PtrSetTy SeenVals;$/;"	m	class:llvm::ObjectSizeOffsetEvaluator
Segment64LoadCommand	Object/MachOFormat.h	/^  struct Segment64LoadCommand {$/;"	s	namespace:llvm::object::macho
SegmentCommandFlagBitFixedVMLibrary	Support/MachO.h	/^      SegmentCommandFlagBitFixedVMLibrary     = 0x2u, \/\/ SG_FVMLIB$/;"	e	enum:llvm::MachO::__anon126
SegmentCommandFlagBitHighVM	Support/MachO.h	/^      SegmentCommandFlagBitHighVM             = 0x1u, \/\/ SG_HIGHVM$/;"	e	enum:llvm::MachO::__anon126
SegmentCommandFlagBitNoRelocations	Support/MachO.h	/^      SegmentCommandFlagBitNoRelocations      = 0x4u, \/\/ SG_NORELOC$/;"	e	enum:llvm::MachO::__anon126
SegmentCommandFlagBitProtectedVersion1	Support/MachO.h	/^      SegmentCommandFlagBitProtectedVersion1  = 0x8u, \/\/ SG_PROTECTED_VERSION_1$/;"	e	enum:llvm::MachO::__anon126
SegmentLoadCommand	Object/MachOFormat.h	/^  struct SegmentLoadCommand {$/;"	s	namespace:llvm::object::macho
SegmentLoadCommand32Size	Object/MachOFormat.h	/^    SegmentLoadCommand32Size = 56,$/;"	e	enum:llvm::object::macho::StructureSizes
SegmentLoadCommand64Size	Object/MachOFormat.h	/^    SegmentLoadCommand64Size = 72,$/;"	e	enum:llvm::object::macho::StructureSizes
SegmentName	MC/MCSectionMachO.h	/^  char SegmentName[16];  \/\/ Not necessarily null terminated!$/;"	m	class:llvm::MCSectionMachO
SegmentName	Object/MachOFormat.h	/^    char SegmentName[16];$/;"	m	struct:llvm::object::macho::Section
SegmentName	Object/MachOFormat.h	/^    char SegmentName[16];$/;"	m	struct:llvm::object::macho::Section64
Select	MC/MCInstrDesc.h	/^    Select,$/;"	e	enum:llvm::MCID::__anon69
SelectClass_match	Support/PatternMatch.h	/^  SelectClass_match(const Cond_t &Cond, const LHS_t &LHS,$/;"	f	struct:llvm::PatternMatch::SelectClass_match
SelectClass_match	Support/PatternMatch.h	/^struct SelectClass_match {$/;"	s	namespace:llvm::PatternMatch
SelectInlineAsmMemoryOperand	CodeGen/SelectionDAGISel.h	/^  virtual bool SelectInlineAsmMemoryOperand(const SDValue &Op,$/;"	f	class:llvm::SelectionDAGISel
SelectInst	Instructions.h	/^  SelectInst(Value *C, Value *S1, Value *S2, const Twine &NameStr,$/;"	f	class:llvm::SelectInst
SelectInst	Instructions.h	/^class SelectInst : public Instruction {$/;"	c	namespace:llvm
SelectIsExpensive	Target/TargetLowering.h	/^  bool SelectIsExpensive;$/;"	m	class:llvm::TargetLowering
SelectSupportKind	Target/TargetLowering.h	/^  enum SelectSupportKind {$/;"	g	class:llvm::TargetLowering
Selection	MC/MCSectionCOFF.h	/^    int Selection;$/;"	m	class:llvm::MCSectionCOFF
Selection	Object/COFF.h	/^  support::ulittle8_t Selection;$/;"	m	struct:llvm::object::coff_aux_section_definition
Selection	Support/COFF.h	/^    uint8_t  Selection;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
SelectionDAG	CodeGen/SelectionDAG.h	/^class SelectionDAG {$/;"	c	namespace:llvm
SelectionDAGISel	CodeGen/SelectionDAGISel.h	/^class SelectionDAGISel : public MachineFunctionPass {$/;"	c	namespace:llvm
SelectionsMap	CodeGen/PBQP/Solution.h	/^                     NodeItrComparator> SelectionsMap;$/;"	t	class:PBQP::Solution
Self	Analysis/RegionInfo.h	/^    typedef block_iterator_wrapper<IsConst> Self;$/;"	t	class:llvm::Region::block_iterator_wrapper
Self	Analysis/RegionIterator.h	/^  typedef RNSuccIterator<FlatIt<NodeType> > Self;$/;"	t	class:llvm::RNSuccIterator
Self	Analysis/RegionIterator.h	/^  typedef RNSuccIterator<NodeType> Self;$/;"	t	class:llvm::RNSuccIterator
Self	Instructions.h	/^                          SubsetsItTy, BasicBlockTy> Self;$/;"	t	class:llvm::SwitchInst::CaseIteratorT
Self	Support/CFG.h	/^  typedef PredIterator<Ptr, USE_iterator> Self;$/;"	t	class:llvm::PredIterator
Self	Support/CFG.h	/^  typedef SuccIterator<Term_, BB_> Self;$/;"	t	class:llvm::SuccIterator
SelfT	ADT/FoldingSet.h	/^  typedef FoldingSetVectorIterator<T, VectorIteratorT> SelfT;$/;"	t	class:llvm::FoldingSetVectorIterator
SemaCallback	MC/MCTargetAsmParser.h	/^  MCAsmParserSemaCallback *SemaCallback;$/;"	m	class:llvm::MCTargetAsmParser
Semi	Analysis/Dominators.h	/^    unsigned Semi;$/;"	m	struct:llvm::DominatorTreeBase::InfoRec
Sentinel	ADT/SparseBitVector.h	/^  mutable ilist_half_node<Element> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	Analysis/IVUsers.h	/^  mutable ilist_node<IVStrideUse> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	BasicBlock.h	/^  mutable ilist_half_node<Instruction> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	CodeGen/MachineBasicBlock.h	/^  mutable ilist_half_node<MachineInstr> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	CodeGen/MachineFunction.h	/^  mutable ilist_half_node<MachineBasicBlock> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	CodeGen/SelectionDAG.h	/^  mutable ilist_half_node<SDNode> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	CodeGen/SlotIndexes.h	/^    mutable ilist_half_node<IndexListEntry> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	Function.h	/^  mutable ilist_half_node<Argument> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	Function.h	/^  mutable ilist_half_node<BasicBlock> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	Module.h	/^  mutable ilist_node<Function> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	Module.h	/^  mutable ilist_node<GlobalAlias> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	Module.h	/^  mutable ilist_node<GlobalVariable> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	Module.h	/^  mutable ilist_node<NamedMDNode> Sentinel;$/;"	m	struct:llvm::ilist_traits
Sentinel	Support/Recycler.h	/^  mutable RecyclerStruct Sentinel;$/;"	m	struct:llvm::ilist_traits
SentinelValues	Analysis/InlineCost.h	/^    enum SentinelValues {$/;"	g	class:llvm::InlineCost
SeparatorString	MC/MCAsmInfo.h	/^    const char *SeparatorString;             \/\/ Defaults to ';'$/;"	m	class:llvm::MCAsmInfo
SeqType	Support/YAMLParser.h	/^  SequenceType SeqType;$/;"	m	class:llvm::yaml::SequenceNode
SequenceNode	Support/YAMLParser.h	/^  SequenceNode(OwningPtr<Document> &D, StringRef Anchor, SequenceType ST)$/;"	f	class:llvm::yaml::SequenceNode
SequenceNode	Support/YAMLParser.h	/^class SequenceNode : public Node {$/;"	c	namespace:llvm::yaml
SequenceType	Support/YAMLParser.h	/^  enum SequenceType {$/;"	g	class:llvm::yaml::SequenceNode
SequentialType	DerivedTypes.h	/^  SequentialType(TypeID TID, Type *ElType)$/;"	f	class:llvm::SequentialType
SequentialType	DerivedTypes.h	/^class SequentialType : public CompositeType {$/;"	c	namespace:llvm
SequentiallyConsistent	Instructions.h	/^  SequentiallyConsistent = 7$/;"	e	enum:llvm::AtomicOrdering
Set	ADT/FoldingSet.h	/^  FoldingSet<T> Set;$/;"	m	class:llvm::FoldingSetVector
Set	ADT/SmallSet.h	/^  std::set<T, C> Set;$/;"	m	class:llvm::SmallSet
SetBuffer	Support/raw_ostream.h	/^  void SetBuffer(char *BufferStart, size_t Size) {$/;"	f	class:llvm::raw_ostream
SetBufferSize	Support/raw_ostream.h	/^  void SetBufferSize(size_t Size) {$/;"	f	class:llvm::raw_ostream
SetCounter	CodeGen/AsmPrinter.h	/^    mutable unsigned SetCounter;$/;"	m	class:llvm::AsmPrinter
SetCurrentDebugLocation	IRBuilder.h	/^  void SetCurrentDebugLocation(const DebugLoc &L) {$/;"	f	class:llvm::IRBuilderBase
SetDefaultFPMathTag	IRBuilder.h	/^  void SetDefaultFPMathTag(MDNode *FPMathTag) { DefaultFPMathTag = FPMathTag; }$/;"	f	class:llvm::IRBuilder
SetError	MC/MCParser/MCAsmLexer.h	/^  void SetError(const SMLoc &errLoc, const std::string &err) {$/;"	f	class:llvm::MCAsmLexer
SetError	MC/MCTargetAsmLexer.h	/^  void SetError(const SMLoc &errLoc, const std::string &err) {$/;"	f	class:llvm::MCTargetAsmLexer
SetInsertPoint	IRBuilder.h	/^  void SetInsertPoint(BasicBlock *TheBB) {$/;"	f	class:llvm::IRBuilderBase
SetInsertPoint	IRBuilder.h	/^  void SetInsertPoint(BasicBlock *TheBB, BasicBlock::iterator IP) {$/;"	f	class:llvm::IRBuilderBase
SetInsertPoint	IRBuilder.h	/^  void SetInsertPoint(Instruction *I) {$/;"	f	class:llvm::IRBuilderBase
SetInsertPoint	IRBuilder.h	/^  void SetInsertPoint(Use &U) {$/;"	f	class:llvm::IRBuilderBase
SetInstDebugLocation	IRBuilder.h	/^  void SetInstDebugLocation(Instruction *I) const {$/;"	f	class:llvm::IRBuilderBase
SetNextInBucket	ADT/FoldingSet.h	/^    void SetNextInBucket(void *N) { NextInFoldingSetBucket = N; }$/;"	f	class:llvm::FoldingSetImpl::Node
SetUnbuffered	Support/raw_ostream.h	/^  void SetUnbuffered() {$/;"	f	class:llvm::raw_ostream
SetUseAtomicWrites	Support/raw_ostream.h	/^  void SetUseAtomicWrites(bool Value) {$/;"	f	class:llvm::raw_fd_ostream
SetVector	ADT/SetVector.h	/^  SetVector() {}$/;"	f	class:llvm::SetVector
SetVector	ADT/SetVector.h	/^  SetVector(It Start, It End) {$/;"	f	class:llvm::SetVector
SetVector	ADT/SetVector.h	/^class SetVector {$/;"	c	namespace:llvm
Shared	TableGen/Record.h	/^  static BitRecTy Shared;$/;"	m	class:llvm::BitRecTy
Shared	TableGen/Record.h	/^  static DagRecTy Shared;$/;"	m	class:llvm::DagRecTy
Shared	TableGen/Record.h	/^  static IntRecTy Shared;$/;"	m	class:llvm::IntRecTy
Shared	TableGen/Record.h	/^  static StringRecTy Shared;$/;"	m	class:llvm::StringRecTy
ShiftedIntMask	ADT/PointerIntPair.h	/^    ShiftedIntMask = (uintptr_t)(IntMask << IntShift)$/;"	e	enum:llvm::PointerIntPair::__anon11
Shl	MC/MCExpr.h	/^    Shl,  \/\/\/< Shift left.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
ShlOperator	Operator.h	/^class ShlOperator$/;"	c	namespace:llvm
ShortDesc	Support/TargetRegistry.h	/^    const char *ShortDesc;$/;"	m	class:llvm::Target
ShortName	Object/COFF.h	/^    char ShortName[8];$/;"	m	union:llvm::object::coff_symbol::__anon71
ShouldClose	Support/raw_ostream.h	/^  bool ShouldClose;$/;"	m	class:llvm::raw_fd_ostream
ShouldFoldAtomicFences	Target/TargetLowering.h	/^  bool ShouldFoldAtomicFences;$/;"	m	class:llvm::TargetLowering
ShouldShrinkFPConstant	Target/TargetLowering.h	/^  virtual bool ShouldShrinkFPConstant(EVT) const { return true; }$/;"	f	class:llvm::TargetLowering
Shr	MC/MCExpr.h	/^    Shr,  \/\/\/< Shift right (arithmetic or logical, depending on target)$/;"	e	enum:llvm::MCBinaryExpr::Opcode
ShuffleVectorInst	Instructions.h	/^class ShuffleVectorInst : public Instruction {$/;"	c	namespace:llvm
ShuffleVectorSDNode	CodeGen/SelectionDAGNodes.h	/^  ShuffleVectorSDNode(EVT VT, DebugLoc dl, SDValue N1, SDValue N2, $/;"	f	class:llvm::ShuffleVectorSDNode
ShuffleVectorSDNode	CodeGen/SelectionDAGNodes.h	/^class ShuffleVectorSDNode : public SDNode {$/;"	c	namespace:llvm
Sig1	Support/COFF.h	/^    uint16_t Sig1; \/\/\/< Must be IMAGE_FILE_MACHINE_UNKNOWN (0).$/;"	m	struct:llvm::COFF::ImportHeader
Sig2	Support/COFF.h	/^    uint16_t Sig2; \/\/\/< Must be 0xFFFF.$/;"	m	struct:llvm::COFF::ImportHeader
SignExtend32	Support/MathExtras.h	/^inline int32_t SignExtend32(uint32_t X, unsigned B) {$/;"	f	namespace:llvm
SignExtend32	Support/MathExtras.h	/^template <unsigned B> inline int32_t SignExtend32(uint32_t x) {$/;"	f	namespace:llvm
SignExtend64	Support/MathExtras.h	/^inline int64_t SignExtend64(uint64_t X, unsigned B) {$/;"	f	namespace:llvm
SignExtend64	Support/MathExtras.h	/^template <unsigned B> inline int64_t SignExtend64(uint64_t x) {$/;"	f	namespace:llvm
Signature	Support/COFF.h	/^    uint32_t Signature;$/;"	m	struct:llvm::COFF::PEHeader
SignedRanges	Analysis/ScalarEvolution.h	/^    DenseMap<const SCEV *, ConstantRange> SignedRanges;$/;"	m	class:llvm::ScalarEvolution
Significand	ADT/APFloat.h	/^    union Significand$/;"	u	class:llvm::APFloat
SimpleRegistryEntry	Support/Registry.h	/^    SimpleRegistryEntry(const char *N, const char *D, T *(*C)())$/;"	f	class:llvm::SimpleRegistryEntry
SimpleRegistryEntry	Support/Registry.h	/^  class SimpleRegistryEntry {$/;"	c	namespace:llvm
SimpleTy	CodeGen/ValueTypes.h	/^    SimpleValueType SimpleTy;$/;"	m	class:llvm::MVT
SimpleType	ADT/IntrusiveRefCntPtr.h	/^    typedef T* SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	ADT/Optional.h	/^  typedef const T* SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	ADT/ilist.h	/^  typedef NodeTy* SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	CodeGen/SelectionDAGNodes.h	/^  typedef SDNode* SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	Support/Casting.h	/^  typedef       From SimpleType;        \/\/ The real type this represents...$/;"	t	struct:llvm::simplify_type
SimpleType	Support/Casting.h	/^  typedef const From SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	Support/ValueHandle.h	/^  typedef Value* SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	Use.h	/^  typedef Value* SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	User.h	/^  typedef Value* SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleValueType	CodeGen/ValueTypes.h	/^    enum SimpleValueType {$/;"	g	class:llvm::MVT
SimplifyFortifiedLibCalls	Transforms/Utils/BuildLibCalls.h	/^  class SimplifyFortifiedLibCalls {$/;"	c	namespace:llvm
SimplifyLibCalls	DefaultPasses.h	/^    SimplifyLibCalls = 1<<3,$/;"	e	enum:llvm::StandardPass::OptimizationFlags
SingleThread	Instructions.h	/^  SingleThread = 0,$/;"	e	enum:llvm::SynchronizationScope
Sink	Support/CommandLine.h	/^  Sink               = 0x04   \/\/ Should this cl::list eat all unknown options?$/;"	e	enum:llvm::cl::MiscFlags
SixteenByteConstantSection	MC/MCObjectFileInfo.h	/^  const MCSection *SixteenByteConstantSection;$/;"	m	class:llvm::MCObjectFileInfo
Size	ADT/BitVector.h	/^  unsigned Size;         \/\/ Size of bitvector in bits.$/;"	m	class:llvm::BitVector
Size	ADT/FoldingSet.h	/^  size_t Size;$/;"	m	class:llvm::FoldingSetNodeIDRef
Size	Analysis/AliasAnalysis.h	/^    uint64_t Size;$/;"	m	struct:llvm::AliasAnalysis::Location
Size	Analysis/AliasSetTracker.h	/^    uint64_t Size;$/;"	m	class:llvm::AliasSet::PointerRec
Size	Analysis/MemoryDependenceAnalysis.h	/^      uint64_t Size;$/;"	m	struct:llvm::MemoryDependenceAnalysis::NonLocalPointerInfo
Size	CodeGen/MachineCodeInfo.h	/^  size_t Size;   \/\/ Number of bytes in memory used$/;"	m	class:llvm::MachineCodeInfo
Size	CodeGen/MachineFrameInfo.h	/^    uint64_t Size;$/;"	m	struct:llvm::MachineFrameInfo::StackObject
Size	CodeGen/MachineMemOperand.h	/^  uint64_t Size;$/;"	m	class:llvm::MachineMemOperand
Size	MC/MCAssembler.h	/^  uint64_t Size;$/;"	m	class:llvm::MCFillFragment
Size	MC/MCInstrDesc.h	/^  unsigned short  Size;          \/\/ Number of bytes in encoding.$/;"	m	class:llvm::MCInstrDesc
Size	MDBuilder.h	/^      uint64_t Size;$/;"	m	struct:llvm::MDBuilder::TBAAStructField
Size	Object/MachOFormat.h	/^    uint32_t Size;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
Size	Object/MachOFormat.h	/^    uint32_t Size;$/;"	m	struct:llvm::object::macho::LinkeditDataLoadCommand
Size	Object/MachOFormat.h	/^    uint32_t Size;$/;"	m	struct:llvm::object::macho::LoadCommand
Size	Object/MachOFormat.h	/^    uint32_t Size;$/;"	m	struct:llvm::object::macho::Section
Size	Object/MachOFormat.h	/^    uint32_t Size;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
Size	Object/MachOFormat.h	/^    uint32_t Size;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
Size	Object/MachOFormat.h	/^    uint32_t Size;$/;"	m	struct:llvm::object::macho::SymtabLoadCommand
Size	Object/MachOFormat.h	/^    uint64_t Size;$/;"	m	struct:llvm::object::macho::Section64
Size	Support/Allocator.h	/^  size_t Size;$/;"	m	class:llvm::MemSlab
Size	Support/COFF.h	/^    uint32_t Size;$/;"	m	struct:llvm::COFF::DataDirectory
Size	Support/FileSystem.h	/^  uint64_t Size;$/;"	m	class:llvm::sys::fs::mapped_file_region
Size	Support/Memory.h	/^    size_t Size;      \/\/\/< Size, in bytes of the memory area$/;"	m	class:llvm::sys::MemoryBlock
Size	TableGen/Record.h	/^  unsigned Size;$/;"	m	class:llvm::BitsRecTy
Size	Target/TargetJITInfo.h	/^      size_t Size;$/;"	m	struct:llvm::TargetJITInfo::StubLayout
SizeLevel	Transforms/IPO/PassManagerBuilder.h	/^  unsigned SizeLevel;$/;"	m	class:llvm::PassManagerBuilder
SizeOfCode	Support/COFF.h	/^    uint32_t SizeOfCode;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfData	Support/COFF.h	/^    uint32_t SizeOfData;$/;"	m	struct:llvm::COFF::ImportHeader
SizeOfHeaders	Support/COFF.h	/^    uint32_t SizeOfHeaders;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfHeapCommit	Support/COFF.h	/^    uint64_t SizeOfHeapCommit;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfHeapReserve	Support/COFF.h	/^    uint64_t SizeOfHeapReserve;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfImage	Support/COFF.h	/^    uint32_t SizeOfImage;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfInitializedData	Support/COFF.h	/^    uint32_t SizeOfInitializedData;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfLoadCommands	Object/MachOFormat.h	/^    uint32_t SizeOfLoadCommands;$/;"	m	struct:llvm::object::macho::Header
SizeOfOptionalHeader	Object/COFF.h	/^  support::ulittle16_t SizeOfOptionalHeader;$/;"	m	struct:llvm::object::coff_file_header
SizeOfOptionalHeader	Support/COFF.h	/^    uint16_t SizeOfOptionalHeader;$/;"	m	struct:llvm::COFF::header
SizeOfRawData	Object/COFF.h	/^  support::ulittle32_t SizeOfRawData;$/;"	m	struct:llvm::object::coff_section
SizeOfRawData	Support/COFF.h	/^    uint32_t SizeOfRawData;$/;"	m	struct:llvm::COFF::section
SizeOfStackCommit	Support/COFF.h	/^    uint64_t SizeOfStackCommit;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfStackReserve	Support/COFF.h	/^    uint64_t SizeOfStackReserve;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfUninitializedData	Support/COFF.h	/^    uint32_t SizeOfUninitializedData;$/;"	m	struct:llvm::COFF::PEHeader
SizeOffsetEvalType	Analysis/MemoryBuiltins.h	/^typedef std::pair<Value*, Value*> SizeOffsetEvalType;$/;"	t	namespace:llvm
SizeOffsetType	Analysis/MemoryBuiltins.h	/^typedef std::pair<APInt, APInt> SizeOffsetType;$/;"	t	namespace:llvm
SizeThreshold	Support/Allocator.h	/^  size_t SizeThreshold;$/;"	m	class:llvm::BumpPtrAllocator
SizeType	ADT/MapVector.h	/^  typedef typename VectorType::size_type SizeType;$/;"	t	class:llvm::MapVector
Sizer	ADT/IntervalMap.h	/^  typedef IntervalMapImpl::NodeSizer<KeyT, ValT> Sizer;$/;"	t	class:llvm::IntervalMap
SizerImpl	Support/AlignOf.h	/^  union SizerImpl {$/;"	u	union:llvm::AlignedCharArrayUnion
SjLj	MC/MCAsmInfo.h	/^    enum ExceptionsType { None, DwarfCFI, SjLj, ARM, Win64 };$/;"	e	enum:llvm::ExceptionHandling::ExceptionsType
SkipBitcodeWrapperHeader	Bitcode/ReaderWriter.h	/^  inline bool SkipBitcodeWrapperHeader(const unsigned char *&BufPtr,$/;"	f	namespace:llvm
SkipBlock	Bitcode/BitstreamReader.h	/^  bool SkipBlock() {$/;"	f	class:llvm::BitstreamCursor
SkipSpace	MC/MCParser/MCAsmLexer.h	/^  bool SkipSpace;$/;"	m	class:llvm::MCAsmLexer
SkipToWord	Bitcode/BitstreamReader.h	/^  void SkipToWord() {$/;"	f	class:llvm::BitstreamCursor
SlabAllocator	Support/Allocator.h	/^class SlabAllocator {$/;"	c	namespace:llvm
SlabSize	Support/Allocator.h	/^  size_t SlabSize;$/;"	m	class:llvm::BumpPtrAllocator
Slash	MC/MCParser/MCAsmLexer.h	/^    Slash,    \/\/ '\/'$/;"	e	enum:llvm::AsmToken::TokenKind
Slot	CodeGen/SlotIndexes.h	/^    enum Slot {$/;"	g	class:llvm::SlotIndex
SlotIndex	CodeGen/SlotIndexes.h	/^    SlotIndex() : lie(0, 0) {}$/;"	f	class:llvm::SlotIndex
SlotIndex	CodeGen/SlotIndexes.h	/^    SlotIndex(IndexListEntry *entry, unsigned slot)$/;"	f	class:llvm::SlotIndex
SlotIndex	CodeGen/SlotIndexes.h	/^    SlotIndex(const SlotIndex &li, Slot s) : lie(li.listEntry(), unsigned(s)) {$/;"	f	class:llvm::SlotIndex
SlotIndex	CodeGen/SlotIndexes.h	/^  class SlotIndex {$/;"	c	namespace:llvm
SlotIndexes	CodeGen/SlotIndexes.h	/^    SlotIndexes() : MachineFunctionPass(ID) {$/;"	f	class:llvm::SlotIndexes
SlotIndexes	CodeGen/SlotIndexes.h	/^  class SlotIndexes : public MachineFunctionPass {$/;"	c	namespace:llvm
Slot_Block	CodeGen/SlotIndexes.h	/^      Slot_Block,$/;"	e	enum:llvm::SlotIndex::Slot
Slot_Count	CodeGen/SlotIndexes.h	/^      Slot_Count$/;"	e	enum:llvm::SlotIndex::Slot
Slot_Dead	CodeGen/SlotIndexes.h	/^      Slot_Dead,$/;"	e	enum:llvm::SlotIndex::Slot
Slot_EarlyClobber	CodeGen/SlotIndexes.h	/^      Slot_EarlyClobber,$/;"	e	enum:llvm::SlotIndex::Slot
Slot_Register	CodeGen/SlotIndexes.h	/^      Slot_Register,$/;"	e	enum:llvm::SlotIndex::Slot
SlowQueries	Analysis/Dominators.h	/^  unsigned int SlowQueries;$/;"	m	class:llvm::DominatorTreeBase
Small	Support/CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
SmallArray	ADT/SmallPtrSet.h	/^  const void **SmallArray;$/;"	m	class:llvm::SmallPtrSetImpl
SmallBitVector	ADT/SmallBitVector.h	/^  SmallBitVector() : X(1) {}$/;"	f	class:llvm::SmallBitVector
SmallBitVector	ADT/SmallBitVector.h	/^  SmallBitVector(SmallBitVector &&RHS) : X(RHS.X) {$/;"	f	class:llvm::SmallBitVector
SmallBitVector	ADT/SmallBitVector.h	/^  SmallBitVector(const SmallBitVector &RHS) {$/;"	f	class:llvm::SmallBitVector
SmallBitVector	ADT/SmallBitVector.h	/^  explicit SmallBitVector(unsigned s, bool t = false) {$/;"	f	class:llvm::SmallBitVector
SmallBitVector	ADT/SmallBitVector.h	/^class SmallBitVector {$/;"	c	namespace:llvm
SmallContents	CodeGen/MachineOperand.h	/^  } SmallContents;$/;"	m	class:llvm::MachineOperand	typeref:union:llvm::MachineOperand::__anon35
SmallDenseMap	ADT/DenseMap.h	/^  SmallDenseMap(SmallDenseMap &&other) {$/;"	f	class:llvm::SmallDenseMap
SmallDenseMap	ADT/DenseMap.h	/^  SmallDenseMap(const InputIt &I, const InputIt &E) {$/;"	f	class:llvm::SmallDenseMap
SmallDenseMap	ADT/DenseMap.h	/^  SmallDenseMap(const SmallDenseMap &other) {$/;"	f	class:llvm::SmallDenseMap
SmallDenseMap	ADT/DenseMap.h	/^  explicit SmallDenseMap(unsigned NumInitBuckets = 0) {$/;"	f	class:llvm::SmallDenseMap
SmallDenseMap	ADT/DenseMap.h	/^class SmallDenseMap$/;"	c	namespace:llvm
SmallNumDataBits	ADT/SmallBitVector.h	/^    SmallNumDataBits = SmallNumRawBits - SmallNumSizeBits$/;"	e	enum:llvm::SmallBitVector::__anon5
SmallNumRawBits	ADT/SmallBitVector.h	/^    SmallNumRawBits = NumBaseBits - 1,$/;"	e	enum:llvm::SmallBitVector::__anon5
SmallNumSizeBits	ADT/SmallBitVector.h	/^    SmallNumSizeBits = (NumBaseBits == 32 ? 5 :$/;"	e	enum:llvm::SmallBitVector::__anon5
SmallPtrSet	ADT/SmallPtrSet.h	/^  SmallPtrSet() : SmallPtrSetImpl(SmallStorage, SmallSizePowTwo) {}$/;"	f	class:llvm::SmallPtrSet
SmallPtrSet	ADT/SmallPtrSet.h	/^  SmallPtrSet(It I, It E) : SmallPtrSetImpl(SmallStorage, SmallSizePowTwo) {$/;"	f	class:llvm::SmallPtrSet
SmallPtrSet	ADT/SmallPtrSet.h	/^  SmallPtrSet(const SmallPtrSet &that) : SmallPtrSetImpl(SmallStorage, that) {}$/;"	f	class:llvm::SmallPtrSet
SmallPtrSet	ADT/SmallPtrSet.h	/^class SmallPtrSet : public SmallPtrSetImpl {$/;"	c	namespace:llvm
SmallPtrSetImpl	ADT/SmallPtrSet.h	/^  explicit SmallPtrSetImpl(const void **SmallStorage, unsigned SmallSize) :$/;"	f	class:llvm::SmallPtrSetImpl
SmallPtrSetImpl	ADT/SmallPtrSet.h	/^class SmallPtrSetImpl {$/;"	c	namespace:llvm
SmallPtrSetIterator	ADT/SmallPtrSet.h	/^  explicit SmallPtrSetIterator(const void *const *BP)$/;"	f	class:llvm::SmallPtrSetIterator
SmallPtrSetIterator	ADT/SmallPtrSet.h	/^class SmallPtrSetIterator : public SmallPtrSetIteratorImpl {$/;"	c	namespace:llvm
SmallPtrSetIteratorImpl	ADT/SmallPtrSet.h	/^  explicit SmallPtrSetIteratorImpl(const void *const *BP) : Bucket(BP) {$/;"	f	class:llvm::SmallPtrSetIteratorImpl
SmallPtrSetIteratorImpl	ADT/SmallPtrSet.h	/^class SmallPtrSetIteratorImpl {$/;"	c	namespace:llvm
SmallSet	ADT/SmallSet.h	/^  SmallSet() {}$/;"	f	class:llvm::SmallSet
SmallSet	ADT/SmallSet.h	/^class SmallSet {$/;"	c	namespace:llvm
SmallSet	ADT/SmallSet.h	/^class SmallSet<PointeeType*, N> : public SmallPtrSet<PointeeType*, N> {};$/;"	c	namespace:llvm
SmallSetVector	ADT/SetVector.h	/^  SmallSetVector() {}$/;"	f	class:llvm::SmallSetVector
SmallSetVector	ADT/SetVector.h	/^  SmallSetVector(It Start, It End) {$/;"	f	class:llvm::SmallSetVector
SmallSetVector	ADT/SetVector.h	/^class SmallSetVector : public SetVector<T, SmallVector<T, N>, SmallSet<T, N> > {$/;"	c	namespace:llvm
SmallSizePowTwo	ADT/SmallPtrSet.h	/^  enum { SmallSizePowTwo = RoundUpToPowerOfTwo<SmallSize>::Val };$/;"	e	enum:llvm::SmallPtrSet::__anon16
SmallStorage	ADT/SmallPtrSet.h	/^  const void *SmallStorage[SmallSizePowTwo+1];$/;"	m	class:llvm::SmallPtrSet
SmallString	ADT/SmallString.h	/^  SmallString() {}$/;"	f	class:llvm::SmallString
SmallString	ADT/SmallString.h	/^  SmallString(ItTy S, ItTy E) : SmallVector<char, InternalLen>(S, E) {}$/;"	f	class:llvm::SmallString
SmallString	ADT/SmallString.h	/^  SmallString(StringRef S) : SmallVector<char, InternalLen>(S.begin(), S.end()) {}$/;"	f	class:llvm::SmallString
SmallString	ADT/SmallString.h	/^  SmallString(const SmallString &RHS) : SmallVector<char, InternalLen>(RHS) {}$/;"	f	class:llvm::SmallString
SmallString	ADT/SmallString.h	/^class SmallString : public SmallVector<char, InternalLen> {$/;"	c	namespace:llvm
SmallVector	ADT/SmallVector.h	/^  SmallVector() : SmallVectorImpl<T>(N) {$/;"	f	class:llvm::SmallVector
SmallVector	ADT/SmallVector.h	/^  SmallVector(ItTy S, ItTy E) : SmallVectorImpl<T>(N) {$/;"	f	class:llvm::SmallVector
SmallVector	ADT/SmallVector.h	/^  SmallVector(SmallVector &&RHS) : SmallVectorImpl<T>(N) {$/;"	f	class:llvm::SmallVector
SmallVector	ADT/SmallVector.h	/^  SmallVector(const SmallVector &RHS) : SmallVectorImpl<T>(N) {$/;"	f	class:llvm::SmallVector
SmallVector	ADT/SmallVector.h	/^  explicit SmallVector(unsigned Size, const T &Value = T())$/;"	f	class:llvm::SmallVector
SmallVector	ADT/SmallVector.h	/^class SmallVector : public SmallVectorImpl<T> {$/;"	c	namespace:llvm
SmallVectorBase	ADT/SmallVector.h	/^  SmallVectorBase(void *FirstEl, size_t Size)$/;"	f	class:llvm::SmallVectorBase
SmallVectorBase	ADT/SmallVector.h	/^class SmallVectorBase {$/;"	c	namespace:llvm
SmallVectorImpl	ADT/SmallVector.h	/^  explicit SmallVectorImpl(unsigned N)$/;"	f	class:llvm::SmallVectorImpl
SmallVectorImpl	ADT/SmallVector.h	/^class SmallVectorImpl : public SmallVectorTemplateBase<T, isPodLike<T>::value> {$/;"	c	namespace:llvm
SmallVectorStorage	ADT/SmallVector.h	/^struct SmallVectorStorage {$/;"	s	namespace:llvm
SmallVectorStorage	ADT/SmallVector.h	/^template <typename T> struct SmallVectorStorage<T, 0> {};$/;"	s	namespace:llvm
SmallVectorStorage	ADT/SmallVector.h	/^template <typename T> struct SmallVectorStorage<T, 1> {};$/;"	s	namespace:llvm
SmallVectorTemplateBase	ADT/SmallVector.h	/^  SmallVectorTemplateBase(size_t Size) : SmallVectorTemplateCommon<T>(Size) {}$/;"	f	class:llvm::SmallVectorTemplateBase
SmallVectorTemplateBase	ADT/SmallVector.h	/^class SmallVectorTemplateBase : public SmallVectorTemplateCommon<T> {$/;"	c	namespace:llvm
SmallVectorTemplateBase	ADT/SmallVector.h	/^class SmallVectorTemplateBase<T, true> : public SmallVectorTemplateCommon<T> {$/;"	c	namespace:llvm
SmallVectorTemplateCommon	ADT/SmallVector.h	/^  SmallVectorTemplateCommon(size_t Size) : SmallVectorBase(&FirstEl, Size) {}$/;"	f	class:llvm::SmallVectorTemplateCommon
SmallVectorTemplateCommon	ADT/SmallVector.h	/^class SmallVectorTemplateCommon : public SmallVectorBase {$/;"	c	namespace:llvm
SmartMutex	Support/Mutex.h	/^      explicit SmartMutex(bool rec = true) :$/;"	f	class:llvm::sys::SmartMutex
SmartMutex	Support/Mutex.h	/^    class SmartMutex : public MutexImpl {$/;"	c	namespace:llvm::sys
SmartRWMutex	Support/RWMutex.h	/^      explicit SmartRWMutex() : RWMutexImpl(), readers(0), writers(0) { }$/;"	f	class:llvm::sys::SmartRWMutex
SmartRWMutex	Support/RWMutex.h	/^    class SmartRWMutex : public RWMutexImpl {$/;"	c	namespace:llvm::sys
SmartScopedLock	Support/Mutex.h	/^      SmartScopedLock(SmartMutex<mt_only>& m) : mtx(m) {$/;"	f	class:llvm::sys::SmartScopedLock
SmartScopedLock	Support/Mutex.h	/^    class SmartScopedLock  {$/;"	c	namespace:llvm::sys
SmartScopedReader	Support/RWMutex.h	/^      explicit SmartScopedReader(SmartRWMutex<mt_only>& m) : mutex(m) {$/;"	f	struct:llvm::sys::SmartScopedReader
SmartScopedReader	Support/RWMutex.h	/^    struct SmartScopedReader {$/;"	s	namespace:llvm::sys
SmartScopedWriter	Support/RWMutex.h	/^      explicit SmartScopedWriter(SmartRWMutex<mt_only>& m) : mutex(m) {$/;"	f	struct:llvm::sys::SmartScopedWriter
SmartScopedWriter	Support/RWMutex.h	/^    struct SmartScopedWriter {$/;"	s	namespace:llvm::sys
Soft	Target/TargetOptions.h	/^      Soft, \/\/ Soft float.$/;"	e	enum:llvm::FloatABI::ABIType
SoftFail	MC/MCDisassembler.h	/^    SoftFail = 1,$/;"	e	enum:llvm::MCDisassembler::DecodeStatus
Solaris	ADT/Triple.h	/^    Solaris,$/;"	e	enum:llvm::Triple::OSType
Solution	CodeGen/PBQP/Solution.h	/^    Solution()$/;"	f	class:PBQP::Solution
Solution	CodeGen/PBQP/Solution.h	/^  class Solution {$/;"	c	namespace:PBQP
SolverEdgeItr	CodeGen/PBQP/HeuristicSolver.h	/^    typedef SolverEdges::iterator SolverEdgeItr;$/;"	t	class:PBQP::HeuristicSolverImpl
SolverEdges	CodeGen/PBQP/HeuristicSolver.h	/^    typedef std::list<Graph::EdgeItr> SolverEdges;$/;"	t	class:PBQP::HeuristicSolverImpl
Sorted	Support/IntegersSubsetMapping.h	/^  bool Sorted;$/;"	m	class:llvm::IntegersSubsetMapping
Source	MC/MCDwarf.h	/^    MachineLocation Source;$/;"	m	class:llvm::MCCFIInstruction
Source	MC/MachineLocation.h	/^  MachineLocation Destination, Source;$/;"	m	class:llvm::MachineMove
Source	Target/TargetLowering.h	/^      Source,           \/\/ Follow source order.$/;"	e	enum:llvm::Sched::Preference
SourceMgr	Support/SourceMgr.h	/^  SourceMgr() : LineNoCache(0), DiagHandler(0), DiagContext(0) {}$/;"	f	class:llvm::SourceMgr
SourceMgr	Support/SourceMgr.h	/^class SourceMgr {$/;"	c	namespace:llvm
SourceRange	Support/YAMLParser.h	/^  SMRange SourceRange;$/;"	m	class:llvm::yaml::Node
Space	MC/MCParser/MCAsmLexer.h	/^    Space,$/;"	e	enum:llvm::AsmToken::TokenKind
Sparse	ADT/SparseSet.h	/^  SparseT *Sparse;$/;"	m	class:llvm::SparseSet
SparseBitVector	ADT/SparseBitVector.h	/^  SparseBitVector () {$/;"	f	class:llvm::SparseBitVector
SparseBitVector	ADT/SparseBitVector.h	/^  SparseBitVector(const SparseBitVector &RHS) {$/;"	f	class:llvm::SparseBitVector
SparseBitVector	ADT/SparseBitVector.h	/^class SparseBitVector {$/;"	c	namespace:llvm
SparseBitVectorElement	ADT/SparseBitVector.h	/^  SparseBitVectorElement() {$/;"	f	struct:llvm::SparseBitVectorElement
SparseBitVectorElement	ADT/SparseBitVector.h	/^  explicit SparseBitVectorElement(unsigned Idx) {$/;"	f	struct:llvm::SparseBitVectorElement
SparseBitVectorElement	ADT/SparseBitVector.h	/^struct SparseBitVectorElement$/;"	s	namespace:llvm
SparseBitVectorIterator	ADT/SparseBitVector.h	/^    SparseBitVectorIterator(): BitVector(NULL) {$/;"	f	class:llvm::SparseBitVector::SparseBitVectorIterator
SparseBitVectorIterator	ADT/SparseBitVector.h	/^    SparseBitVectorIterator(const SparseBitVector<ElementSize> *RHS,$/;"	f	class:llvm::SparseBitVector::SparseBitVectorIterator
SparseBitVectorIterator	ADT/SparseBitVector.h	/^  class SparseBitVectorIterator {$/;"	c	class:llvm::SparseBitVector
SparseSet	ADT/SparseSet.h	/^  SparseSet() : Sparse(0), Universe(0) {}$/;"	f	class:llvm::SparseSet
SparseSet	ADT/SparseSet.h	/^class SparseSet {$/;"	c	namespace:llvm
SparseSetValFunctor	ADT/SparseSet.h	/^struct SparseSetValFunctor {$/;"	s	namespace:llvm
SparseSetValFunctor	ADT/SparseSet.h	/^struct SparseSetValFunctor<KeyT, KeyT, KeyFunctorT> {$/;"	s	namespace:llvm
SparseSetValTraits	ADT/SparseSet.h	/^struct SparseSetValTraits {$/;"	s	namespace:llvm
SparseSolver	Analysis/SparsePropagation.h	/^  explicit SparseSolver(AbstractLatticeFunction *Lattice)$/;"	f	class:llvm::SparseSolver
SparseSolver	Analysis/SparsePropagation.h	/^class SparseSolver {$/;"	c	namespace:llvm
SpecificBumpPtrAllocator	Support/Allocator.h	/^  SpecificBumpPtrAllocator(size_t size = 4096, size_t threshold = 4096,$/;"	f	class:llvm::SpecificBumpPtrAllocator
SpecificBumpPtrAllocator	Support/Allocator.h	/^class SpecificBumpPtrAllocator {$/;"	c	namespace:llvm
Specification	DebugInfo/DIContext.h	/^  enum Specification {$/;"	g	class:llvm::DILineInfoSpecifier
SpillCostComparator	CodeGen/PBQP/Heuristics/Briggs.h	/^        SpillCostComparator(HeuristicSolverImpl<Briggs> &s)$/;"	f	class:PBQP::Heuristics::Briggs::SpillCostComparator
SpillCostComparator	CodeGen/PBQP/Heuristics/Briggs.h	/^      class SpillCostComparator {$/;"	c	class:PBQP::Heuristics::Briggs
SpillSlot	Target/TargetFrameLowering.h	/^  struct SpillSlot {$/;"	s	class:llvm::TargetFrameLowering
SplatBreaksChain	Transforms/Vectorize.h	/^  bool SplatBreaksChain;$/;"	m	struct:llvm::VectorizeConfig
Split	Analysis/Dominators.h	/^  void Split(DominatorTreeBase<typename GraphT::NodeType>& DT,$/;"	f	class:llvm::DominatorTreeBase
Split	Target/TargetCallingConv.h	/^    static const uint64_t Split          = 1ULL << 10;$/;"	m	struct:llvm::ISD::ArgFlagsTy
SplitCriticalEdge	Transforms/Utils/BasicBlockUtils.h	/^inline BasicBlock *SplitCriticalEdge(BasicBlock *BB, succ_iterator SI,$/;"	f	namespace:llvm
SplitCriticalEdge	Transforms/Utils/BasicBlockUtils.h	/^inline BasicBlock *SplitCriticalEdge(BasicBlock *Src, BasicBlock *Dst,$/;"	f	namespace:llvm
SplitCriticalEdge	Transforms/Utils/BasicBlockUtils.h	/^inline bool SplitCriticalEdge(BasicBlock *Succ, pred_iterator PI, Pass *P = 0) {$/;"	f	namespace:llvm
SplitOffs	Target/TargetCallingConv.h	/^    static const uint64_t SplitOffs      = 10;$/;"	m	struct:llvm::ISD::ArgFlagsTy
Splitable	Analysis/DependenceAnalysis.h	/^      bool Splitable : 1; \/\/ Splitting the loop will break dependence.$/;"	m	struct:llvm::Dependence::DVEntry
Src	Analysis/DependenceAnalysis.h	/^      const SCEV *Src;$/;"	m	struct:llvm::DependenceAnalysis::Subscript
Src	Analysis/DependenceAnalysis.h	/^    const Instruction *Src, *Dst;$/;"	m	class:llvm::Dependence
SrcBuffer	Support/SourceMgr.h	/^  struct SrcBuffer {$/;"	s	class:llvm::SourceMgr
SrcLevels	Analysis/DependenceAnalysis.h	/^    unsigned CommonLevels, SrcLevels, MaxLevels;$/;"	m	class:llvm::DependenceAnalysis
SrcMgr	MC/MCContext.h	/^    const SourceMgr *SrcMgr;$/;"	m	class:llvm::MCContext
SrcValueSDNode	CodeGen/SelectionDAGNodes.h	/^  explicit SrcValueSDNode(const Value *v)$/;"	f	class:llvm::SrcValueSDNode
SrcValueSDNode	CodeGen/SelectionDAGNodes.h	/^class SrcValueSDNode : public SDNode {$/;"	c	namespace:llvm
StabAlternateEntry	Support/MachO.h	/^      StabAlternateEntry        = 0xA4u,  \/\/ N_ENTRY$/;"	e	enum:llvm::MachO::__anon126
StabBeginCommon	Support/MachO.h	/^      StabBeginCommon           = 0xE2u,  \/\/ N_BCOMM$/;"	e	enum:llvm::MachO::__anon126
StabBeginIncludeFileName	Support/MachO.h	/^      StabBeginIncludeFileName  = 0x82u,  \/\/ N_BINCL$/;"	e	enum:llvm::MachO::__anon126
StabBeginSymbol	Support/MachO.h	/^      StabBeginSymbol           = 0x2Eu,  \/\/ N_BNSYM$/;"	e	enum:llvm::MachO::__anon126
StabCompilerOptLevel	Support/MachO.h	/^      StabCompilerOptLevel      = 0x8Au,  \/\/ N_OLEVEL$/;"	e	enum:llvm::MachO::__anon126
StabCompilerParameters	Support/MachO.h	/^      StabCompilerParameters    = 0x86u,  \/\/ N_PARAMS$/;"	e	enum:llvm::MachO::__anon126
StabCompilerVersion	Support/MachO.h	/^      StabCompilerVersion       = 0x88u,  \/\/ N_VERSION$/;"	e	enum:llvm::MachO::__anon126
StabDeletedIncludeFile	Support/MachO.h	/^      StabDeletedIncludeFile    = 0xC2u,  \/\/ N_EXCL$/;"	e	enum:llvm::MachO::__anon126
StabEndCommon	Support/MachO.h	/^      StabEndCommon             = 0xE4u,  \/\/ N_ECOMM$/;"	e	enum:llvm::MachO::__anon126
StabEndCommonLocal	Support/MachO.h	/^      StabEndCommonLocal        = 0xE8u,  \/\/ N_ECOML$/;"	e	enum:llvm::MachO::__anon126
StabEndIncludeFile	Support/MachO.h	/^      StabEndIncludeFile        = 0xA2u,  \/\/ N_EINCL$/;"	e	enum:llvm::MachO::__anon126
StabEndSymbol	Support/MachO.h	/^      StabEndSymbol             = 0x4Eu,  \/\/ N_ENSYM$/;"	e	enum:llvm::MachO::__anon126
StabFunction	Support/MachO.h	/^      StabFunction              = 0x24u,  \/\/ N_FUN$/;"	e	enum:llvm::MachO::__anon126
StabFunctionName	Support/MachO.h	/^      StabFunctionName          = 0x22u,  \/\/ N_FNAME$/;"	e	enum:llvm::MachO::__anon126
StabGlobalSymbol	Support/MachO.h	/^      StabGlobalSymbol          = 0x20u,  \/\/ N_GSYM$/;"	e	enum:llvm::MachO::__anon126
StabIncludeFileName	Support/MachO.h	/^      StabIncludeFileName       = 0x84u,  \/\/ N_SOL$/;"	e	enum:llvm::MachO::__anon126
StabLeftBracket	Support/MachO.h	/^      StabLeftBracket           = 0xC0u,  \/\/ N_LBRAC$/;"	e	enum:llvm::MachO::__anon126
StabLength	Support/MachO.h	/^      StabLength                = 0xFEu   \/\/ N_LENG$/;"	e	enum:llvm::MachO::__anon126
StabLocalCommon	Support/MachO.h	/^      StabLocalCommon           = 0x28u,  \/\/ N_LCSYM$/;"	e	enum:llvm::MachO::__anon126
StabLocalSymbol	Support/MachO.h	/^      StabLocalSymbol           = 0x80u,  \/\/ N_LSYM$/;"	e	enum:llvm::MachO::__anon126
StabObjectFileName	Support/MachO.h	/^      StabObjectFileName        = 0x66u,  \/\/ N_OSO$/;"	e	enum:llvm::MachO::__anon126
StabParameter	Support/MachO.h	/^      StabParameter             = 0xA0u,  \/\/ N_PSYM$/;"	e	enum:llvm::MachO::__anon126
StabRegisterSymbol	Support/MachO.h	/^      StabRegisterSymbol        = 0x40u,  \/\/ N_RSYM$/;"	e	enum:llvm::MachO::__anon126
StabRightBracket	Support/MachO.h	/^      StabRightBracket          = 0xE0u,  \/\/ N_RBRAC$/;"	e	enum:llvm::MachO::__anon126
StabSourceFileName	Support/MachO.h	/^      StabSourceFileName        = 0x64u,  \/\/ N_SO$/;"	e	enum:llvm::MachO::__anon126
StabSourceFileOptions	Support/MachO.h	/^      StabSourceFileOptions     = 0x3Cu,  \/\/ N_OPT$/;"	e	enum:llvm::MachO::__anon126
StabSourceLine	Support/MachO.h	/^      StabSourceLine            = 0x44u,  \/\/ N_SLINE$/;"	e	enum:llvm::MachO::__anon126
StabStaticSymbol	Support/MachO.h	/^      StabStaticSymbol          = 0x26u,  \/\/ N_STSYM$/;"	e	enum:llvm::MachO::__anon126
StabStructureType	Support/MachO.h	/^      StabStructureType         = 0x60u,  \/\/ N_SSYM$/;"	e	enum:llvm::MachO::__anon126
Stack	Support/FileSystem.h	/^    std::stack<directory_iterator, std::vector<directory_iterator> > Stack;$/;"	m	struct:llvm::sys::fs::detail::RecDirIterState
StackAlignment	Attributes.h	/^    StackAlignment  = 22,  \/\/\/< Alignment of stack for function (3 bits)$/;"	e	enum:llvm::Attributes::AttrVal
StackAlignment	Target/TargetFrameLowering.h	/^  unsigned StackAlignment;$/;"	m	class:llvm::TargetFrameLowering
StackAlignmentOverride	Target/TargetOptions.h	/^    unsigned StackAlignmentOverride;$/;"	m	class:llvm::TargetOptions
StackDir	Target/TargetFrameLowering.h	/^  StackDirection StackDir;$/;"	m	class:llvm::TargetFrameLowering
StackDirection	Target/TargetFrameLowering.h	/^  enum StackDirection {$/;"	g	class:llvm::TargetFrameLowering
StackGrowsDown	Target/TargetFrameLowering.h	/^    StackGrowsDown       \/\/ Adding to the stack decreases the stack address$/;"	e	enum:llvm::TargetFrameLowering::StackDirection
StackGrowsUp	MC/MCAsmInfo.h	/^    bool StackGrowsUp;$/;"	m	class:llvm::MCAsmInfo
StackGrowsUp	Target/TargetFrameLowering.h	/^    StackGrowsUp,        \/\/ Adding to the stack increases the stack address$/;"	e	enum:llvm::TargetFrameLowering::StackDirection
StackNaturalAlign	DataLayout.h	/^  unsigned      StackNaturalAlign;     \/\/\/< Stack natural alignment$/;"	m	class:llvm::DataLayout
StackObject	CodeGen/MachineFrameInfo.h	/^    StackObject(uint64_t Sz, unsigned Al, int64_t SP, bool IM,$/;"	f	struct:llvm::MachineFrameInfo::StackObject
StackObject	CodeGen/MachineFrameInfo.h	/^  struct StackObject {$/;"	s	class:llvm::MachineFrameInfo
StackOffset	CodeGen/CallingConvLower.h	/^  unsigned StackOffset;$/;"	m	class:llvm::CCState
StackOffset	CodeGen/GCMetadata.h	/^    int StackOffset;    \/\/\/< Offset from the stack pointer.$/;"	m	struct:llvm::GCRoot
StackPointerRegisterToSaveRestore	Target/TargetLowering.h	/^  unsigned StackPointerRegisterToSaveRestore;$/;"	m	class:llvm::TargetLowering
StackProtect	Attributes.h	/^    StackProtect    = 23,  \/\/\/< Stack protection.$/;"	e	enum:llvm::Attributes::AttrVal
StackProtectReq	Attributes.h	/^    StackProtectReq = 24,  \/\/\/< Stack protection required.$/;"	e	enum:llvm::Attributes::AttrVal
StackProtectorIdx	CodeGen/MachineFrameInfo.h	/^  int StackProtectorIdx;$/;"	m	class:llvm::MachineFrameInfo
StackSize	CodeGen/MachineFrameInfo.h	/^  uint64_t StackSize;$/;"	m	class:llvm::MachineFrameInfo
Stages	MC/MCInstrItineraries.h	/^  const InstrStage     *Stages;         \/\/\/< Array of stages selected$/;"	m	class:llvm::InstrItineraryData
Stages	MC/MCSubtargetInfo.h	/^  const InstrStage *Stages;            \/\/ Instruction itinerary stages$/;"	m	class:llvm::MCSubtargetInfo
Standard	Target/TargetOptions.h	/^      Standard, \/\/ Only allow fusion of 'blessed' ops (currently just fmuladd).$/;"	e	enum:llvm::FPOpFusion::FPOpFusionMode
StandardBlockIDs	Bitcode/BitCodes.h	/^  enum StandardBlockIDs {$/;"	g	namespace:llvm::bitc
StandardName	Target/TargetLibraryInfo.h	/^    StandardName = 3, \/\/ (memset to all ones)$/;"	e	enum:llvm::TargetLibraryInfo::AvailabilityState
StandardNames	Target/TargetLibraryInfo.h	/^  static const char* StandardNames[LibFunc::NumLibFuncs];$/;"	m	class:llvm::TargetLibraryInfo
StandardPass	DefaultPasses.h	/^class StandardPass {$/;"	c	namespace:llvm
StandardSet	DefaultPasses.h	/^  enum StandardSet {$/;"	g	class:llvm::StandardPass
StandardWidths	Bitcode/BitCodes.h	/^  enum StandardWidths {$/;"	g	namespace:llvm::bitc
Star	MC/MCParser/MCAsmLexer.h	/^    Star, Dot, Comma, Dollar, Equal, EqualEqual,$/;"	e	enum:llvm::AsmToken::TokenKind
Start	ADT/ImmutableIntervalMap.h	/^  int64_t Start;$/;"	m	class:llvm::Interval
Start	Analysis/Dominators.h	/^  const BasicBlock *Start;$/;"	m	class:llvm::BasicBlockEdge
Start	MC/MCAssembler.h	/^  MCSymbol *Start;$/;"	m	struct:llvm::DataRegionData
Start	Support/SMLoc.h	/^  SMLoc Start, End;$/;"	m	class:llvm::SMRange
StartAfter	CodeGen/Passes.h	/^  AnalysisID StartAfter;$/;"	m	class:llvm::TargetPassConfig
StartSizeWord	Bitcode/BitstreamWriter.h	/^    unsigned StartSizeWord;$/;"	m	struct:llvm::BitstreamWriter::Block
Started	CodeGen/Passes.h	/^  bool Started;$/;"	m	class:llvm::TargetPassConfig
Started	Support/Timer.h	/^  bool Started;          \/\/ Has this time variable ever been started?$/;"	m	class:llvm::Timer
StartsWith	ADT/StringSwitch.h	/^  StringSwitch& StartsWith(const char (&S)[N], const T &Value) {$/;"	f	class:llvm::StringSwitch
State	Support/FileSystem.h	/^  IntrusiveRefCntPtr<detail::DirIterState> State;$/;"	m	class:llvm::sys::fs::directory_iterator
State	Support/FileSystem.h	/^  IntrusiveRefCntPtr<detail::RecDirIterState> State;$/;"	m	class:llvm::sys::fs::recursive_directory_iterator
State	Support/IntegersSubsetMapping.h	/^    DiffProcessState State;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Static	Support/CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	e	enum:llvm::Reloc::Model
StaticAllocaMap	CodeGen/FunctionLoweringInfo.h	/^  DenseMap<const AllocaInst*, int> StaticAllocaMap;$/;"	m	class:llvm::FunctionLoweringInfo
StaticAllocas	Transforms/Utils/Cloning.h	/^  SmallVector<AllocaInst*, 4> StaticAllocas;$/;"	m	class:llvm::InlineFunctionInfo
StaticCtorSection	MC/MCObjectFileInfo.h	/^  const MCSection *StaticCtorSection;$/;"	m	class:llvm::MCObjectFileInfo
StaticDtorSection	MC/MCObjectFileInfo.h	/^  const MCSection *StaticDtorSection;$/;"	m	class:llvm::MCObjectFileInfo
Statistic	ADT/Statistic.h	/^class Statistic {$/;"	c	namespace:llvm
Status	Support/FileSystem.h	/^  mutable file_status Status;$/;"	m	class:llvm::sys::fs::directory_entry
StdStringKind	ADT/Twine.h	/^      StdStringKind,$/;"	e	enum:llvm::Twine::NodeKind
StopAfter	CodeGen/Passes.h	/^  AnalysisID StopAfter;$/;"	m	class:llvm::TargetPassConfig
Stopped	CodeGen/Passes.h	/^  bool Stopped;$/;"	m	class:llvm::TargetPassConfig
Storage	ADT/SmallVector.h	/^  SmallVectorStorage<T, N> Storage;$/;"	m	class:llvm::SmallVector
StorageClass	Object/COFF.h	/^  support::ulittle8_t  StorageClass;$/;"	m	struct:llvm::object::coff_symbol
StorageClass	Support/COFF.h	/^    uint8_t  StorageClass;$/;"	m	struct:llvm::COFF::symbol
StorageT	ADT/IndexedMap.h	/^    typedef std::vector<T> StorageT;$/;"	t	class:llvm::IndexedMap
StoreInst	Instructions.h	/^class StoreInst : public Instruction {$/;"	c	namespace:llvm
StoreSDNode	CodeGen/SelectionDAGNodes.h	/^  StoreSDNode(SDValue *ChainValuePtrOff, DebugLoc dl, SDVTList VTs,$/;"	f	class:llvm::StoreSDNode
StoreSDNode	CodeGen/SelectionDAGNodes.h	/^class StoreSDNode : public LSBaseSDNode {$/;"	c	namespace:llvm
Str	ADT/StringSwitch.h	/^  StringRef Str;$/;"	m	class:llvm::StringSwitch
Str	MC/MCParser/MCAsmLexer.h	/^  StringRef Str;$/;"	m	class:llvm::AsmToken
Str	Support/PrettyStackTrace.h	/^    const char *Str;$/;"	m	class:llvm::PrettyStackTraceString
StrLen	ADT/StringMap.h	/^  unsigned StrLen;$/;"	m	class:llvm::StringMapEntryBase
StrVariableName	TableGen/StringMatcher.h	/^  StringRef StrVariableName;$/;"	m	class:llvm::StringMatcher
StrategyList	CodeGen/GCMetadata.h	/^    list_type StrategyList;$/;"	m	class:llvm::GCModuleInfo
StrategyMap	CodeGen/GCMetadata.h	/^    strategy_map_type StrategyMap;$/;"	m	class:llvm::GCModuleInfo
Stream	Support/YAMLParser.h	/^class Stream {$/;"	c	namespace:llvm::yaml
StreamableMemoryObject	Support/StreamableMemoryObject.h	/^class StreamableMemoryObject : public MemoryObject {$/;"	c	namespace:llvm
Streamer	Support/StreamableMemoryObject.h	/^  OwningPtr<DataStreamer> Streamer;$/;"	m	class:llvm::StreamingMemoryObject
StreamingMemoryObject	Support/StreamableMemoryObject.h	/^class StreamingMemoryObject : public StreamableMemoryObject {$/;"	c	namespace:llvm
StressSched	CodeGen/ScheduleDAG.h	/^    bool StressSched;$/;"	m	class:llvm::ScheduleDAG
StressSched	CodeGen/ScheduleDAG.h	/^    static const bool StressSched = false;$/;"	m	class:llvm::ScheduleDAG
Strict	Target/TargetOptions.h	/^      Strict    \/\/ Never fuse FP-ops.$/;"	e	enum:llvm::FPOpFusion::FPOpFusionMode
String	MC/MCParser/MCAsmLexer.h	/^    String,$/;"	e	enum:llvm::AsmToken::TokenKind
StringIndex	MC/MCMachObjectWriter.h	/^    uint64_t StringIndex;$/;"	m	struct:llvm::MachObjectWriter::MachSymbolData
StringIndex	Object/Archive.h	/^    uint32_t StringIndex; \/\/ Extra index to the string.$/;"	m	class:llvm::object::Archive::Symbol
StringIndex	Object/MachOFormat.h	/^    uint32_t StringIndex;$/;"	m	struct:llvm::object::macho::Symbol64TableEntry
StringIndex	Object/MachOFormat.h	/^    uint32_t StringIndex;$/;"	m	struct:llvm::object::macho::SymbolTableEntry
StringInit	TableGen/Record.h	/^  explicit StringInit(const std::string &V)$/;"	f	class:llvm::StringInit
StringInit	TableGen/Record.h	/^class StringInit : public TypedInit {$/;"	c	namespace:llvm
StringMap	ADT/StringMap.h	/^  StringMap() : StringMapImpl(static_cast<unsigned>(sizeof(MapEntryTy))) {}$/;"	f	class:llvm::StringMap
StringMap	ADT/StringMap.h	/^  StringMap(const StringMap &RHS)$/;"	f	class:llvm::StringMap
StringMap	ADT/StringMap.h	/^  explicit StringMap(AllocatorTy A)$/;"	f	class:llvm::StringMap
StringMap	ADT/StringMap.h	/^  explicit StringMap(unsigned InitialSize)$/;"	f	class:llvm::StringMap
StringMap	ADT/StringMap.h	/^class StringMap : public StringMapImpl {$/;"	c	namespace:llvm
StringMapConstIterator	ADT/StringMap.h	/^  explicit StringMapConstIterator(StringMapEntryBase **Bucket,$/;"	f	class:llvm::StringMapConstIterator
StringMapConstIterator	ADT/StringMap.h	/^class StringMapConstIterator {$/;"	c	namespace:llvm
StringMapEntry	ADT/StringMap.h	/^  StringMapEntry(unsigned strLen, const ValueTy &V)$/;"	f	class:llvm::StringMapEntry
StringMapEntry	ADT/StringMap.h	/^  explicit StringMapEntry(unsigned strLen)$/;"	f	class:llvm::StringMapEntry
StringMapEntry	ADT/StringMap.h	/^class StringMapEntry : public StringMapEntryBase {$/;"	c	namespace:llvm
StringMapEntryBase	ADT/StringMap.h	/^  explicit StringMapEntryBase(unsigned Len) : StrLen(Len) {}$/;"	f	class:llvm::StringMapEntryBase
StringMapEntryBase	ADT/StringMap.h	/^class StringMapEntryBase {$/;"	c	namespace:llvm
StringMapEntryInitializer	ADT/StringMap.h	/^class StringMapEntryInitializer {$/;"	c	namespace:llvm
StringMapImpl	ADT/StringMap.h	/^  explicit StringMapImpl(unsigned itemSize) : ItemSize(itemSize) {$/;"	f	class:llvm::StringMapImpl
StringMapImpl	ADT/StringMap.h	/^class StringMapImpl {$/;"	c	namespace:llvm
StringMapIterator	ADT/StringMap.h	/^  explicit StringMapIterator(StringMapEntryBase **Bucket,$/;"	f	class:llvm::StringMapIterator
StringMapIterator	ADT/StringMap.h	/^class StringMapIterator : public StringMapConstIterator<ValueTy> {$/;"	c	namespace:llvm
StringMatcher	TableGen/StringMatcher.h	/^  StringMatcher(StringRef strVariableName, $/;"	f	class:llvm::StringMatcher
StringMatcher	TableGen/StringMatcher.h	/^class StringMatcher {$/;"	c	namespace:llvm
StringPair	TableGen/StringMatcher.h	/^  typedef std::pair<std::string, std::string> StringPair;$/;"	t	class:llvm::StringMatcher
StringPool	Support/StringPool.h	/^  class StringPool {$/;"	c	namespace:llvm
StringRecTy	TableGen/Record.h	/^  StringRecTy() : RecTy(StringRecTyKind) {}$/;"	f	class:llvm::StringRecTy
StringRecTy	TableGen/Record.h	/^class StringRecTy : public RecTy {$/;"	c	namespace:llvm
StringRecTyKind	TableGen/Record.h	/^    StringRecTyKind,$/;"	e	enum:llvm::RecTy::RecTyKind
StringRef	ADT/StringRef.h	/^    \/*implicit*\/ StringRef() : Data(0), Length(0) {}$/;"	f	class:llvm::StringRef
StringRef	ADT/StringRef.h	/^    \/*implicit*\/ StringRef(const char *Str)$/;"	f	class:llvm::StringRef
StringRef	ADT/StringRef.h	/^    \/*implicit*\/ StringRef(const char *data, size_t length)$/;"	f	class:llvm::StringRef
StringRef	ADT/StringRef.h	/^    \/*implicit*\/ StringRef(const std::string &Str)$/;"	f	class:llvm::StringRef
StringRef	ADT/StringRef.h	/^  class StringRef {$/;"	c	namespace:llvm
StringRefKind	ADT/Twine.h	/^      StringRefKind,$/;"	e	enum:llvm::Twine::NodeKind
StringSet	ADT/StringSet.h	/^  class StringSet : public llvm::StringMap<char, AllocatorTy> {$/;"	c	namespace:llvm
StringSwitch	ADT/StringSwitch.h	/^  explicit StringSwitch(StringRef S)$/;"	f	class:llvm::StringSwitch
StringSwitch	ADT/StringSwitch.h	/^class StringSwitch {$/;"	c	namespace:llvm
StringTable	MC/MCMachObjectWriter.h	/^  SmallString<256> StringTable;$/;"	m	class:llvm::MachObjectWriter
StringTable	Object/Archive.h	/^  child_iterator StringTable;$/;"	m	class:llvm::object::Archive
StringTable	Object/COFF.h	/^  const char             *StringTable;$/;"	m	class:llvm::object::COFFObjectFile
StringTable	Object/MachOObject.h	/^  StringRef StringTable;$/;"	m	class:llvm::object::MachOObject
StringTableFlag	Bitcode/Archive.h	/^      StringTableFlag = 64         \/\/\/< Member is an ar(1) format string table$/;"	e	enum:llvm::ArchiveMember::Flags
StringTableOffset	Object/COFF.h	/^  struct StringTableOffset {$/;"	s	struct:llvm::object::coff_symbol
StringTableOffset	Object/MachOFormat.h	/^    uint32_t StringTableOffset;$/;"	m	struct:llvm::object::macho::SymtabLoadCommand
StringTableSize	Object/COFF.h	/^        uint32_t          StringTableSize;$/;"	m	class:llvm::object::COFFObjectFile
StringTableSize	Object/MachOFormat.h	/^    uint32_t StringTableSize;$/;"	m	struct:llvm::object::macho::SymtabLoadCommand
Struct	Intrinsics.h	/^      Integer, Vector, Pointer, Struct,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
StructAlignment	DataLayout.h	/^  unsigned StructAlignment;$/;"	m	class:llvm::StructLayout
StructLayout	DataLayout.h	/^class StructLayout {$/;"	c	namespace:llvm
StructRet	Attributes.h	/^    StructRet       = 25,  \/\/\/< Hidden pointer to structure to return$/;"	e	enum:llvm::Attributes::AttrVal
StructSize	DataLayout.h	/^  uint64_t StructSize;$/;"	m	class:llvm::StructLayout
StructTyID	Type.h	/^    StructTyID,      \/\/\/< 12: Structures$/;"	e	enum:llvm::Type::TypeID
StructType	DerivedTypes.h	/^  StructType(LLVMContext &C)$/;"	f	class:llvm::StructType
StructType	DerivedTypes.h	/^class StructType : public CompositeType {$/;"	c	namespace:llvm
StructTypes	TypeFinder.h	/^  std::vector<StructType*> StructTypes;$/;"	m	class:llvm::TypeFinder
Struct_NumElements	Intrinsics.h	/^      unsigned Struct_NumElements;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon60
StructureSizes	Object/MachOFormat.h	/^  enum StructureSizes {$/;"	g	namespace:llvm::object::macho
StubLayout	Target/TargetJITInfo.h	/^    struct StubLayout {$/;"	s	class:llvm::TargetJITInfo
StubValueTy	CodeGen/MachineModuleInfo.h	/^  typedef PointerIntPair<MCSymbol*, 1, bool> StubValueTy;$/;"	t	class:llvm::MachineModuleInfoImpl
Sub	Instructions.h	/^    Sub,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
Sub	MC/MCExpr.h	/^    Sub,  \/\/\/< Subtraction.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
SubClassMask	Target/TargetRegisterInfo.h	/^  const uint32_t *SubClassMask;$/;"	m	class:llvm::TargetRegisterClass
SubConstraintInfo	InlineAsm.h	/^    SubConstraintInfo() : MatchingInput(-1) {}$/;"	f	struct:llvm::InlineAsm::SubConstraintInfo
SubConstraintInfo	InlineAsm.h	/^  struct SubConstraintInfo {$/;"	s	class:llvm::InlineAsm
SubConstraintInfoVector	InlineAsm.h	/^  typedef std::vector<SubConstraintInfo> SubConstraintInfoVector;$/;"	t	class:llvm::InlineAsm
SubIdx	Target/TargetRegisterInfo.h	/^  unsigned SubIdx;$/;"	m	class:llvm::PrintReg
SubLoops	Analysis/LoopInfo.h	/^  std::vector<LoopT *> SubLoops;$/;"	m	class:llvm::LoopBase
SubOperator	Operator.h	/^class SubOperator$/;"	c	namespace:llvm
SubPattern	Support/PatternMatch.h	/^  SubPattern_t SubPattern;$/;"	m	struct:llvm::PatternMatch::Exact_match
SubPattern	Support/PatternMatch.h	/^  SubPattern_t SubPattern;$/;"	m	struct:llvm::PatternMatch::OneUse_match
SubReg	CodeGen/MachineOperand.h	/^    unsigned char SubReg;$/;"	m	union:llvm::MachineOperand::__anon34
SubReg	Target/TargetRegisterInfo.h	/^  unsigned SubReg;$/;"	m	class:llvm::SuperRegClassIterator
SubRegIndexLaneMasks	Target/TargetRegisterInfo.h	/^  const unsigned *SubRegIndexLaneMasks;$/;"	m	class:llvm::TargetRegisterInfo
SubRegIndexNames	Target/TargetRegisterInfo.h	/^  const char *const *SubRegIndexNames;        \/\/ Names of subreg indexes.$/;"	m	class:llvm::TargetRegisterInfo
SubRegIndices	MC/MCRegisterInfo.h	/^  const uint16_t *SubRegIndices;              \/\/ Pointer to the subreg lookup$/;"	m	class:llvm::MCRegisterInfo
SubRegIndices	MC/MCRegisterInfo.h	/^  uint32_t SubRegIndices;$/;"	m	struct:llvm::MCRegisterDesc
SubRegs	MC/MCRegisterInfo.h	/^  uint32_t SubRegs;   \/\/ Sub-register set, described above$/;"	m	struct:llvm::MCRegisterDesc
SubRes	Support/IntegersSubset.h	/^    typedef std::pair<self, self> SubRes;$/;"	t	class:llvm::IntRange
SubclassData	Analysis/ScalarEvolution.h	/^    unsigned short SubclassData;$/;"	m	class:llvm::SCEV
SubclassData	Value.h	/^  unsigned short SubclassData;$/;"	m	class:llvm::Value
SubclassID	Value.h	/^  const unsigned char SubclassID;   \/\/ Subclass identifier (for isa\/dyn_cast)$/;"	m	class:llvm::Value
Subscript	Analysis/DependenceAnalysis.h	/^    struct Subscript {$/;"	s	class:llvm::DependenceAnalysis
Subscript	Analysis/LoopDependenceAnalysis.h	/^  struct Subscript {$/;"	s	class:llvm::LoopDependenceAnalysis
Subscripts	Analysis/LoopDependenceAnalysis.h	/^    SmallVector<Subscript, 4> Subscripts;$/;"	m	struct:llvm::LoopDependenceAnalysis::DependencePair
SubsetIt	Instructions.h	/^    SubsetsItTy SubsetIt;$/;"	m	class:llvm::SwitchInst::CaseIteratorT
Subsets	Instructions.h	/^  typedef std::list<IntegersSubset> Subsets;$/;"	t	class:llvm::SwitchInst
SubsetsConstIt	Instructions.h	/^  typedef Subsets::const_iterator SubsetsConstIt;$/;"	t	class:llvm::SwitchInst
SubsetsIt	Instructions.h	/^  typedef Subsets::iterator SubsetsIt;$/;"	t	class:llvm::SwitchInst
SubsumesPredicate	Target/TargetInstrInfo.h	/^  bool SubsumesPredicate(const SmallVectorImpl<MachineOperand> &Pred1,$/;"	f	class:llvm::TargetInstrInfo
Subsystem	Support/COFF.h	/^    uint16_t Subsystem;$/;"	m	struct:llvm::COFF::PEHeader
SubtargetFeatureKV	MC/SubtargetFeature.h	/^struct SubtargetFeatureKV {$/;"	s	namespace:llvm
SubtargetFeatures	MC/SubtargetFeature.h	/^class SubtargetFeatures {$/;"	c	namespace:llvm
SubtargetInfoKV	MC/SubtargetFeature.h	/^struct SubtargetInfoKV {$/;"	s	namespace:llvm
SuccIterTy	Analysis/LoopInfoImpl.h	/^  typedef typename BlockTraits::ChildIteratorType SuccIterTy;$/;"	t	class:llvm::__anon30::PopulateLoopsDFS
SuccIterator	Support/CFG.h	/^  explicit inline SuccIterator(Term_ T) : Term(T), idx(0) {\/\/ begin iterator$/;"	f	class:llvm::SuccIterator
SuccIterator	Support/CFG.h	/^  inline SuccIterator(Term_ T, bool)                       \/\/ end iterator$/;"	f	class:llvm::SuccIterator
SuccIterator	Support/CFG.h	/^class SuccIterator : public std::iterator<std::bidirectional_iterator_tag,$/;"	c	namespace:llvm
Success	MC/MCDisassembler.h	/^    Success = 3$/;"	e	enum:llvm::MCDisassembler::DecodeStatus
Successors	Analysis/Interval.h	/^  std::vector<BasicBlock*> Successors;$/;"	m	class:llvm::Interval
Successors	CodeGen/MachineBasicBlock.h	/^  std::vector<MachineBasicBlock *> Successors;$/;"	m	class:llvm::MachineBasicBlock
Succs	CodeGen/ScheduleDAG.h	/^    SmallVector<SDep, 4> Succs;  \/\/ All sunit successors.$/;"	m	class:llvm::SUnit
SunStyleELFSectionSwitchSyntax	MC/MCAsmInfo.h	/^    bool SunStyleELFSectionSwitchSyntax;     \/\/ Defaults to false.$/;"	m	class:llvm::MCAsmInfo
SuperClass	ADT/SmallVector.h	/^  typedef SmallVectorTemplateBase<T, isPodLike<T>::value > SuperClass;$/;"	t	class:llvm::SmallVectorImpl
SuperClasses	TableGen/Record.h	/^  std::vector<Record*> SuperClasses;$/;"	m	class:llvm::Record
SuperClasses	Target/TargetRegisterInfo.h	/^  const sc_iterator SuperClasses;$/;"	m	class:llvm::TargetRegisterClass
SuperIdx	MC/MCSchedule.h	/^  unsigned SuperIdx; \/\/ Index of the resources kind that contains this kind.$/;"	m	struct:llvm::MCProcResourceDesc
SuperRegClassIterator	Target/TargetRegisterInfo.h	/^  SuperRegClassIterator(const TargetRegisterClass *RC,$/;"	f	class:llvm::SuperRegClassIterator
SuperRegClassIterator	Target/TargetRegisterInfo.h	/^class SuperRegClassIterator {$/;"	c	namespace:llvm
SuperRegIndices	Target/TargetRegisterInfo.h	/^  const uint16_t *SuperRegIndices;$/;"	m	class:llvm::TargetRegisterClass
SuperRegs	MC/MCRegisterInfo.h	/^  uint32_t SuperRegs; \/\/ Super-register set, described above$/;"	m	struct:llvm::MCRegisterDesc
SupportJumpTables	Target/TargetLowering.h	/^  bool SupportJumpTables;$/;"	m	class:llvm::TargetLowering
SupportsDebugInformation	MC/MCAsmInfo.h	/^    bool SupportsDebugInformation;           \/\/ Defaults to false.$/;"	m	class:llvm::MCAsmInfo
SupportsWeakOmittedEHFrame	MC/MCObjectFileInfo.h	/^  bool SupportsWeakOmittedEHFrame;$/;"	m	class:llvm::MCObjectFileInfo
SwapByteOrder	Support/SwapByteOrder.h	/^inline          char  SwapByteOrder(char C) { return C; }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline   signed char  SwapByteOrder(signed char C) { return C; }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline   signed int   SwapByteOrder(  signed int   C) { return SwapByteOrder_32(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline   signed long  SwapByteOrder(  signed long  C) { return SwapByteOrder_32(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline   signed long  SwapByteOrder(  signed long  C) { return SwapByteOrder_64(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline   signed short SwapByteOrder(  signed short C) { return SwapByteOrder_16(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline signed long long SwapByteOrder(signed long long C) {$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline unsigned char  SwapByteOrder(unsigned char C) { return C; }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline unsigned int   SwapByteOrder(unsigned int   C) { return SwapByteOrder_32(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline unsigned long  SwapByteOrder(unsigned long  C) { return SwapByteOrder_32(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline unsigned long  SwapByteOrder(unsigned long  C) { return SwapByteOrder_64(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline unsigned long long SwapByteOrder(unsigned long long C) {$/;"	f	namespace:llvm::sys
SwapByteOrder	Support/SwapByteOrder.h	/^inline unsigned short SwapByteOrder(unsigned short C) { return SwapByteOrder_16(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder_16	Support/SwapByteOrder.h	/^inline uint16_t SwapByteOrder_16(uint16_t value) {$/;"	f	namespace:llvm::sys
SwapByteOrder_32	Support/SwapByteOrder.h	/^inline uint32_t SwapByteOrder_32(uint32_t value) {$/;"	f	namespace:llvm::sys
SwapByteOrder_64	Support/SwapByteOrder.h	/^inline uint64_t SwapByteOrder_64(uint64_t value) {$/;"	f	namespace:llvm::sys
SwitchInst	Instructions.h	/^class SwitchInst : public TerminatorInst {$/;"	c	namespace:llvm
SwitchSection	MC/MCStreamer.h	/^    void SwitchSection(const MCSection *Section) {$/;"	f	class:llvm::MCStreamer
SwitchSectionNoChange	MC/MCStreamer.h	/^    void SwitchSectionNoChange(const MCSection *Section) {$/;"	f	class:llvm::MCStreamer
SwitchToBlockID	Bitcode/BitstreamWriter.h	/^  void SwitchToBlockID(unsigned BlockID) {$/;"	f	class:llvm::BitstreamWriter
Sym	CodeGen/MachineOperand.h	/^    MCSymbol *Sym;            \/\/ For MO_MCSymbol$/;"	m	union:llvm::MachineOperand::__anon36
SymA	MC/MCValue.h	/^  const MCSymbolRefExpr *SymA, *SymB;$/;"	m	class:llvm::MCValue
SymB	MC/MCValue.h	/^  const MCSymbolRefExpr *SymA, *SymB;$/;"	m	class:llvm::MCValue
SymTab	Function.h	/^  ValueSymbolTable *SymTab;               \/\/\/< Symbol table of args\/instructions$/;"	m	class:llvm::Function
SymTabType	Bitcode/Archive.h	/^    typedef std::map<std::string,unsigned> SymTabType;$/;"	t	class:llvm::Archive
Symbol	CodeGen/SelectionDAGNodes.h	/^  const char *Symbol;$/;"	m	class:llvm::ExternalSymbolSDNode
Symbol	MC/MCAssembler.h	/^  MCSymbol *Symbol;$/;"	m	struct:llvm::IndirectSymbolData
Symbol	MC/MCAssembler.h	/^  const MCSymbol *Symbol;$/;"	m	class:llvm::MCSymbolData
Symbol	MC/MCELFObjectWriter.h	/^  const MCSymbol *Symbol;$/;"	m	struct:llvm::ELFRelocationEntry
Symbol	MC/MCExpr.h	/^  const MCSymbol *Symbol;$/;"	m	class:llvm::MCSymbolRefExpr
Symbol	MC/MCWin64EH.h	/^    MCSymbol *Symbol;$/;"	m	struct:llvm::MCWin64EHUnwindInfo
Symbol	Object/Archive.h	/^    Symbol(const Archive *p, uint32_t symi, uint32_t stri)$/;"	f	class:llvm::object::Archive::Symbol
Symbol	Object/Archive.h	/^  class Symbol {$/;"	c	class:llvm::object::Archive
Symbol64TableEntry	Object/MachOFormat.h	/^  struct Symbol64TableEntry {$/;"	s	namespace:llvm::object::macho
SymbolBaseType	Support/COFF.h	/^  enum SymbolBaseType {$/;"	g	namespace:llvm::COFF
SymbolComplexType	Support/COFF.h	/^  enum SymbolComplexType {$/;"	g	namespace:llvm::COFF
SymbolData	MC/MCMachObjectWriter.h	/^    MCSymbolData *SymbolData;$/;"	m	struct:llvm::MachObjectWriter::MachSymbolData
SymbolDataListType	MC/MCAssembler.h	/^  typedef iplist<MCSymbolData> SymbolDataListType;$/;"	t	class:llvm::MCAssembler
SymbolFlags	MC/MCELFSymbolFlags.h	/^  enum SymbolFlags {$/;"	g	namespace:llvm
SymbolFlags	MC/MCMachOSymbolFlags.h	/^  enum SymbolFlags { \/\/ See <mach-o\/nlist.h>.$/;"	g	namespace:llvm
SymbolFlags	Support/COFF.h	/^  enum SymbolFlags {$/;"	g	namespace:llvm::COFF
SymbolIndex	Object/Archive.h	/^    uint32_t SymbolIndex;$/;"	m	class:llvm::object::Archive::Symbol
SymbolListTy	CodeGen/MachineModuleInfo.h	/^  typedef std::vector<std::pair<MCSymbol*, StubValueTy> > SymbolListTy;$/;"	t	class:llvm::MachineModuleInfoImpl
SymbolLookUp	MC/MCDisassembler.h	/^  LLVMSymbolLookupCallback SymbolLookUp;$/;"	m	class:llvm::MCDisassembler
SymbolMap	MC/MCAssembler.h	/^  DenseMap<const MCSymbol*, MCSymbolData*> SymbolMap;$/;"	m	class:llvm::MCAssembler
SymbolName	CodeGen/MachineOperand.h	/^        const char *SymbolName;   \/\/ For MO_ExternalSymbol.$/;"	m	union:llvm::MachineOperand::__anon36::__anon38::__anon39
SymbolPimpl	Object/ObjectFile.h	/^  DataRefImpl SymbolPimpl;$/;"	m	class:llvm::object::SymbolRef
SymbolRef	MC/MCExpr.h	/^    SymbolRef, \/\/\/< References to labels and assigned expressions.$/;"	e	enum:llvm::MCExpr::ExprKind
SymbolRef	Object/ObjectFile.h	/^  SymbolRef() : OwningObject(NULL) { }$/;"	f	class:llvm::object::SymbolRef
SymbolRef	Object/ObjectFile.h	/^class SymbolRef {$/;"	c	namespace:llvm::object
SymbolRef	Object/ObjectFile.h	/^inline SymbolRef::SymbolRef(DataRefImpl SymbolP, const ObjectFile *Owner)$/;"	f	class:llvm::object::SymbolRef
SymbolSearchingDisabled	ExecutionEngine/ExecutionEngine.h	/^  bool SymbolSearchingDisabled;$/;"	m	class:llvm::ExecutionEngine
SymbolSectionNumber	Support/COFF.h	/^  enum SymbolSectionNumber {$/;"	g	namespace:llvm::COFF
SymbolSize	MC/MCAssembler.h	/^  const MCExpr *SymbolSize;$/;"	m	class:llvm::MCSymbolData
SymbolSize	Support/COFF.h	/^    SymbolSize     = 18,$/;"	e	enum:llvm::COFF::__anon80
SymbolStorageClass	Support/COFF.h	/^  enum SymbolStorageClass {$/;"	g	namespace:llvm::COFF
SymbolTable	MC/MCContext.h	/^    typedef StringMap<MCSymbol*, BumpPtrAllocator&> SymbolTable;$/;"	t	class:llvm::MCContext
SymbolTable	Object/Archive.h	/^  child_iterator SymbolTable;$/;"	m	class:llvm::object::Archive
SymbolTable	Object/COFF.h	/^  const coff_symbol      *SymbolTable;$/;"	m	class:llvm::object::COFFObjectFile
SymbolTableEntry	DerivedTypes.h	/^  void *SymbolTableEntry;$/;"	m	class:llvm::StructType
SymbolTableEntry	Object/MachOFormat.h	/^  struct SymbolTableEntry {$/;"	s	namespace:llvm::object::macho
SymbolTableIndex	Object/COFF.h	/^  support::ulittle32_t SymbolTableIndex;$/;"	m	struct:llvm::object::coff_relocation
SymbolTableIndex	Support/COFF.h	/^    uint32_t SymbolTableIndex;$/;"	m	struct:llvm::COFF::relocation
SymbolTableListTraits	SymbolTableListTraits.h	/^  SymbolTableListTraits() {}$/;"	f	class:llvm::SymbolTableListTraits
SymbolTableListTraits	SymbolTableListTraits.h	/^class SymbolTableListTraits : public ilist_default_traits<ValueSubClass> {$/;"	c	namespace:llvm
SymbolTableOffset	Object/MachOFormat.h	/^    uint32_t SymbolTableOffset;$/;"	m	struct:llvm::object::macho::SymtabLoadCommand
SymbolTableSections	Object/ELF.h	/^  Sections_t SymbolTableSections;$/;"	m	class:llvm::object::ELFObjectFile
SymbolTableSectionsIndexMap	Object/ELF.h	/^  IndexMap_t SymbolTableSectionsIndexMap;$/;"	m	class:llvm::object::ELFObjectFile
SymbolTypeFlags	Object/MachOFormat.h	/^  enum SymbolTypeFlags {$/;"	g	namespace:llvm::object::macho
SymbolTypeType	Object/MachOFormat.h	/^  enum SymbolTypeType {$/;"	g	namespace:llvm::object::macho
Symbols	MC/MCAssembler.h	/^  iplist<MCSymbolData> Symbols;$/;"	m	class:llvm::MCAssembler
Symbols	MC/MCContext.h	/^    SymbolTable Symbols;$/;"	m	class:llvm::MCContext
SymtabLoadCommand	Object/MachOFormat.h	/^  struct SymtabLoadCommand {$/;"	s	namespace:llvm::object::macho
SymtabLoadCommandSize	Object/MachOFormat.h	/^    SymtabLoadCommandSize = 24,$/;"	e	enum:llvm::object::macho::StructureSizes
SynchronizationScope	Instructions.h	/^enum SynchronizationScope {$/;"	g	namespace:llvm
SystemTime	Support/Timer.h	/^  double SystemTime;     \/\/ System time elapsed$/;"	m	class:llvm::TimeRecord
T	Support/PatternMatch.h	/^  BasicBlock *&T, *&F;$/;"	m	struct:llvm::PatternMatch::brc_match
T	Support/Timer.h	/^  Timer *T;$/;"	m	class:llvm::TimeRegion
TAIL	TableGen/Record.h	/^  enum UnaryOp { CAST, HEAD, TAIL, EMPTY };$/;"	e	enum:llvm::UnOpInit::UnaryOp
TAKE_OWNERSHIP	Support/circular_raw_ostream.h	/^    static const bool TAKE_OWNERSHIP = true;$/;"	m	class:llvm::circular_raw_ostream
TBAA	MDBuilder.h	/^      MDNode *TBAA;$/;"	m	struct:llvm::MDBuilder::TBAAStructField
TBAAInfo	Analysis/AliasSetTracker.h	/^    const MDNode *TBAAInfo;$/;"	m	class:llvm::AliasSet::PointerRec
TBAAInfo	CodeGen/MachineMemOperand.h	/^  const MDNode *TBAAInfo;$/;"	m	class:llvm::MachineMemOperand
TBAAStructField	MDBuilder.h	/^      TBAAStructField(uint64_t Offset, uint64_t Size, MDNode *TBAA) :$/;"	f	struct:llvm::MDBuilder::TBAAStructField
TBAAStructField	MDBuilder.h	/^    struct TBAAStructField {$/;"	s	class:llvm::MDBuilder
TBAATag	Analysis/AliasAnalysis.h	/^    const MDNode *TBAATag;$/;"	m	struct:llvm::AliasAnalysis::Location
TBAATag	Analysis/MemoryDependenceAnalysis.h	/^      const MDNode *TBAATag;$/;"	m	struct:llvm::MemoryDependenceAnalysis::NonLocalPointerInfo
TD	Analysis/AliasAnalysis.h	/^  const DataLayout *TD;$/;"	m	class:llvm::AliasAnalysis
TD	Analysis/IVUsers.h	/^  DataLayout *TD;$/;"	m	class:llvm::IVUsers
TD	Analysis/InlineCost.h	/^    const DataLayout *TD;$/;"	m	class:llvm::InlineCostAnalyzer
TD	Analysis/LazyValueInfo.h	/^  class DataLayout *TD;$/;"	m	class:llvm::LazyValueInfo	typeref:class:llvm::LazyValueInfo::DataLayout
TD	Analysis/MemoryBuiltins.h	/^  const DataLayout *TD;$/;"	m	class:llvm::ObjectSizeOffsetEvaluator
TD	Analysis/MemoryBuiltins.h	/^  const DataLayout *TD;$/;"	m	class:llvm::ObjectSizeOffsetVisitor
TD	Analysis/MemoryDependenceAnalysis.h	/^    DataLayout *TD;$/;"	m	class:llvm::MemoryDependenceAnalysis
TD	Analysis/PHITransAddr.h	/^  const DataLayout *TD;$/;"	m	class:llvm::PHITransAddr
TD	Analysis/ScalarEvolution.h	/^    DataLayout *TD;$/;"	m	class:llvm::ScalarEvolution
TD	CodeGen/FastISel.h	/^  const DataLayout &TD;$/;"	m	class:llvm::FastISel
TD	CodeGen/IntrinsicLowering.h	/^    const DataLayout& TD;$/;"	m	class:llvm::IntrinsicLowering
TD	CodeGen/MachineConstantPool.h	/^  const DataLayout *TD;   \/\/\/< The machine's DataLayout.$/;"	m	class:llvm::MachineConstantPool
TD	ExecutionEngine/ExecutionEngine.h	/^  const DataLayout *TD;$/;"	m	class:llvm::ExecutionEngine
TD	Support/TargetFolder.h	/^  const DataLayout *TD;$/;"	m	class:llvm::TargetFolder
TD	Target/Mangler.h	/^  const DataLayout &TD;$/;"	m	class:llvm::Mangler
TD	Target/TargetLowering.h	/^  const DataLayout *TD;$/;"	m	class:llvm::TargetLowering
TD	Target/TargetSelectionDAGInfo.h	/^  const DataLayout *TD;$/;"	m	class:llvm::TargetSelectionDAGInfo
TD	Transforms/Utils/Cloning.h	/^  const DataLayout *TD;$/;"	m	class:llvm::InlineFunctionInfo
TEMPLATE_INSTANTIATION	Support/Compiler.h	140;"	d
TEMPLATE_INSTANTIATION	Support/Compiler.h	143;"	d
TFI	CodeGen/MachineFrameInfo.h	/^  const TargetFrameLowering &TFI;$/;"	m	class:llvm::MachineFrameInfo
TG	Support/Timer.h	/^  TimerGroup *TG;        \/\/ The TimerGroup this Timer is in.$/;"	m	class:llvm::Timer
TGError	TableGen/Error.h	/^  TGError(ArrayRef<SMLoc> locs, const std::string &message)$/;"	f	class:llvm::TGError
TGError	TableGen/Error.h	/^class TGError {$/;"	c	namespace:llvm
TI	TableGen/Record.h	/^  TypedInit *TI;$/;"	m	class:llvm::VarBitInit
TI	TableGen/Record.h	/^  TypedInit *TI;$/;"	m	class:llvm::VarListElementInit
TIED_TO	MC/MCInstrDesc.h	/^    TIED_TO = 0,    \/\/ Must be allocated the same register as.$/;"	e	enum:llvm::MCOI::OperandConstraint
TII	CodeGen/DFAPacketizer.h	/^  const TargetInstrInfo *TII;$/;"	m	class:llvm::VLIWPacketizerList
TII	CodeGen/FastISel.h	/^  const TargetInstrInfo &TII;$/;"	m	class:llvm::FastISel
TII	CodeGen/LiveIntervalAnalysis.h	/^    const TargetInstrInfo* TII;$/;"	m	class:llvm::LiveIntervals
TII	CodeGen/LiveRangeEdit.h	/^  const TargetInstrInfo &TII;$/;"	m	class:llvm::LiveRangeEdit
TII	CodeGen/MachineSSAUpdater.h	/^  const TargetInstrInfo *TII;$/;"	m	class:llvm::MachineSSAUpdater
TII	CodeGen/RegisterScavenging.h	/^  const TargetInstrInfo *TII;$/;"	m	class:llvm::RegScavenger
TII	CodeGen/ResourcePriorityQueue.h	/^    const TargetInstrInfo *TII;$/;"	m	class:llvm::ResourcePriorityQueue
TII	CodeGen/ScheduleDAG.h	/^    const TargetInstrInfo *TII;           \/\/ Target instruction information$/;"	m	class:llvm::ScheduleDAG
TII	CodeGen/TargetSchedule.h	/^  const TargetInstrInfo *TII;$/;"	m	class:llvm::TargetSchedModel
TLI	Analysis/AliasAnalysis.h	/^  const TargetLibraryInfo *TLI;$/;"	m	class:llvm::AliasAnalysis
TLI	Analysis/LazyValueInfo.h	/^  class TargetLibraryInfo *TLI;$/;"	m	class:llvm::LazyValueInfo	typeref:class:llvm::LazyValueInfo::TargetLibraryInfo
TLI	Analysis/MemoryBuiltins.h	/^  const TargetLibraryInfo *TLI;$/;"	m	class:llvm::ObjectSizeOffsetEvaluator
TLI	Analysis/MemoryBuiltins.h	/^  const TargetLibraryInfo *TLI;$/;"	m	class:llvm::ObjectSizeOffsetVisitor
TLI	Analysis/PHITransAddr.h	/^  const TargetLibraryInfo *TLI;$/;"	m	class:llvm::PHITransAddr
TLI	Analysis/ScalarEvolution.h	/^    TargetLibraryInfo *TLI;$/;"	m	class:llvm::ScalarEvolution
TLI	CodeGen/FastISel.h	/^  const TargetLowering &TLI;$/;"	m	class:llvm::FastISel
TLI	CodeGen/FunctionLoweringInfo.h	/^  const TargetLowering &TLI;$/;"	m	class:llvm::FunctionLoweringInfo
TLI	CodeGen/ResourcePriorityQueue.h	/^    const TargetLowering *TLI;$/;"	m	class:llvm::ResourcePriorityQueue
TLI	CodeGen/SelectionDAG.h	/^  const TargetLowering &TLI;$/;"	m	class:llvm::SelectionDAG
TLI	CodeGen/SelectionDAGISel.h	/^  const TargetLowering &TLI;$/;"	m	class:llvm::SelectionDAGISel
TLI	Target/TargetTransformImpl.h	/^  const TargetLowering *TLI;$/;"	m	class:llvm::ScalarTargetTransformImpl
TLI	Transforms/Utils/AddrModeMatcher.h	/^  const TargetLowering &TLI;$/;"	m	class:llvm::AddressingModeMatcher
TLOF	Target/TargetLowering.h	/^  const TargetLoweringObjectFile &TLOF;$/;"	m	class:llvm::TargetLowering
TLSBSSSection	MC/MCObjectFileInfo.h	/^  const MCSection *TLSBSSSection;         \/\/ Defaults to ".tbss".$/;"	m	class:llvm::MCObjectFileInfo
TLSDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *TLSDataSection;        \/\/ Defaults to ".tdata".$/;"	m	class:llvm::MCObjectFileInfo
TLSExtraDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *TLSExtraDataSection;$/;"	m	class:llvm::MCObjectFileInfo
TLSModel	Support/CodeGen.h	/^  namespace TLSModel {$/;"	n	namespace:llvm
TLSTLVSection	MC/MCObjectFileInfo.h	/^  const MCSection *TLSTLVSection;         \/\/ Defaults to ".tlv".$/;"	m	class:llvm::MCObjectFileInfo
TLSThreadInitSection	MC/MCObjectFileInfo.h	/^  const MCSection *TLSThreadInitSection;  \/\/ Defaults to ".thread_init_func".$/;"	m	class:llvm::MCObjectFileInfo
TM	CodeGen/AsmPrinter.h	/^    TargetMachine &TM;$/;"	m	class:llvm::AsmPrinter
TM	CodeGen/CallingConvLower.h	/^  const TargetMachine &TM;$/;"	m	class:llvm::CCState
TM	CodeGen/DFAPacketizer.h	/^  const TargetMachine &TM;$/;"	m	class:llvm::VLIWPacketizerList
TM	CodeGen/FastISel.h	/^  const TargetMachine &TM;$/;"	m	class:llvm::FastISel
TM	CodeGen/LiveIntervalAnalysis.h	/^    const TargetMachine* TM;$/;"	m	class:llvm::LiveIntervals
TM	CodeGen/MachineFunctionAnalysis.h	/^  const TargetMachine &TM;$/;"	m	struct:llvm::MachineFunctionAnalysis
TM	CodeGen/Passes.h	/^  TargetMachine *TM;$/;"	m	class:llvm::TargetPassConfig
TM	CodeGen/ScheduleDAG.h	/^    const TargetMachine &TM;              \/\/ Target processor$/;"	m	class:llvm::ScheduleDAG
TM	CodeGen/SelectionDAG.h	/^  const TargetMachine &TM;$/;"	m	class:llvm::SelectionDAG
TM	CodeGen/SelectionDAGISel.h	/^  const TargetMachine &TM;$/;"	m	class:llvm::SelectionDAGISel
TM	Target/TargetLowering.h	/^  const TargetMachine &TM;$/;"	m	class:llvm::TargetLowering
TOCOffset	Object/MachOFormat.h	/^    uint32_t TOCOffset;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
TPM	PassManagers.h	/^  PMTopLevelManager *TPM;$/;"	m	class:llvm::PMDataManager
TRANSFORMS_UTILS_BUILDLIBCALLS_H	Transforms/Utils/BuildLibCalls.h	16;"	d
TRANSFORMS_UTILS_BYPASSSLOWDIVISION_H	Transforms/Utils/BypassSlowDivision.h	19;"	d
TRANSFORMS_UTILS_INTEGERDIVISION_H	Transforms/Utils/IntegerDivision.h	18;"	d
TRANSFORMS_UTILS_PROMOTEMEMTOREG_H	Transforms/Utils/PromoteMemToReg.h	16;"	d
TRAP	CodeGen/ISDOpcodes.h	/^    TRAP,$/;"	e	enum:llvm::ISD::NodeType
TRAPNO	Support/Solaris.h	38;"	d
TRI	CodeGen/CallingConvLower.h	/^  const TargetRegisterInfo &TRI;$/;"	m	class:llvm::CCState
TRI	CodeGen/FastISel.h	/^  const TargetRegisterInfo &TRI;$/;"	m	class:llvm::FastISel
TRI	CodeGen/LiveIntervalAnalysis.h	/^    const TargetRegisterInfo* TRI;$/;"	m	class:llvm::LiveIntervals
TRI	CodeGen/LiveStackAnalysis.h	/^    const TargetRegisterInfo *TRI;$/;"	m	class:llvm::LiveStacks
TRI	CodeGen/LiveVariables.h	/^  const TargetRegisterInfo *TRI;$/;"	m	class:llvm::LiveVariables
TRI	CodeGen/MachineRegisterInfo.h	/^  const TargetRegisterInfo *const TRI;$/;"	m	class:llvm::MachineRegisterInfo
TRI	CodeGen/RegisterClassInfo.h	/^  const TargetRegisterInfo *TRI;$/;"	m	class:llvm::RegisterClassInfo
TRI	CodeGen/RegisterPressure.h	/^  const TargetRegisterInfo  *TRI;$/;"	m	class:llvm::RegPressureTracker
TRI	CodeGen/RegisterScavenging.h	/^  const TargetRegisterInfo *TRI;$/;"	m	class:llvm::RegScavenger
TRI	CodeGen/ResourcePriorityQueue.h	/^    const TargetRegisterInfo *TRI;$/;"	m	class:llvm::ResourcePriorityQueue
TRI	CodeGen/ScheduleDAG.h	/^    const TargetRegisterInfo *TRI;        \/\/ Target processor register info$/;"	m	class:llvm::ScheduleDAG
TRI	Target/TargetRegisterInfo.h	/^  const TargetRegisterInfo *TRI;$/;"	m	class:llvm::PrintReg
TRI	Target/TargetRegisterInfo.h	/^  const TargetRegisterInfo *TRI;$/;"	m	class:llvm::PrintRegUnit
TRUNCATE	CodeGen/ISDOpcodes.h	/^    TRUNCATE,$/;"	e	enum:llvm::ISD::NodeType
TRUNC_F32	CodeGen/RuntimeLibcalls.h	/^    TRUNC_F32,$/;"	e	enum:llvm::RTLIB::Libcall
TRUNC_F64	CodeGen/RuntimeLibcalls.h	/^    TRUNC_F64,$/;"	e	enum:llvm::RTLIB::Libcall
TRUNC_F80	CodeGen/RuntimeLibcalls.h	/^    TRUNC_F80,$/;"	e	enum:llvm::RTLIB::Libcall
TRUNC_PPCF128	CodeGen/RuntimeLibcalls.h	/^    TRUNC_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
TSFlags	MC/MCInstrDesc.h	/^  uint64_t        TSFlags;       \/\/ Target Specific Flag values$/;"	m	class:llvm::MCInstrDesc
TSI	CodeGen/SelectionDAG.h	/^  const TargetSelectionDAGInfo &TSI;$/;"	m	class:llvm::SelectionDAG
TST_CODE_ENTRY	Bitcode/LLVMBitCodes.h	/^    TST_CODE_ENTRY = 1     \/\/ TST_ENTRY: [typeid, namechar x N]$/;"	e	enum:llvm::bitc::TypeSymtabCodes
TTypeEncoding	MC/MCObjectFileInfo.h	/^  unsigned TTypeEncoding;$/;"	m	class:llvm::MCObjectFileInfo
TWOPI	Support/GraphWriter.h	/^      TWOPI,$/;"	e	enum:llvm::GraphProgram::Name
TYPE_BLOCK_ID_NEW	Bitcode/LLVMBitCodes.h	/^    TYPE_BLOCK_ID_NEW,$/;"	e	enum:llvm::bitc::BlockIDs
TYPE_CODE_ARRAY	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_ARRAY    = 11,    \/\/ ARRAY: [numelts, eltty]$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_DOUBLE	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_DOUBLE   =  4,    \/\/ DOUBLE$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_FLOAT	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_FLOAT    =  3,    \/\/ FLOAT$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_FP128	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_FP128    = 14,    \/\/ LONG DOUBLE (112 bit mantissa)$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_FUNCTION	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_FUNCTION = 21     \/\/ FUNCTION: [vararg, retty, paramty x N]$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_FUNCTION_OLD	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_FUNCTION_OLD = 9, \/\/ FUNCTION: [vararg, attrid, retty,$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_HALF	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_HALF     =  10,   \/\/ HALF$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_INTEGER	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_INTEGER  =  7,    \/\/ INTEGER: [width]$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_LABEL	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_LABEL    =  5,    \/\/ LABEL$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_METADATA	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_METADATA = 16,    \/\/ METADATA$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_NUMENTRY	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_NUMENTRY =  1,    \/\/ NUMENTRY: [numentries]$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_OPAQUE	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_OPAQUE   =  6,    \/\/ OPAQUE$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_POINTER	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_POINTER  =  8,    \/\/ POINTER: [pointee type]$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_PPC_FP128	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_PPC_FP128= 15,    \/\/ PPC LONG DOUBLE (2 doubles)$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_STRUCT_ANON	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_STRUCT_ANON = 18, \/\/ STRUCT_ANON: [ispacked, eltty x N]$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_STRUCT_NAME	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_STRUCT_NAME = 19, \/\/ STRUCT_NAME: [strchr x N]$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_STRUCT_NAMED	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_STRUCT_NAMED = 20,\/\/ STRUCT_NAMED: [ispacked, eltty x N]$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_VECTOR	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_VECTOR   = 12,    \/\/ VECTOR: [numelts, eltty]$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_VOID	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_VOID     =  2,    \/\/ VOID$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_X86_FP80	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_X86_FP80 = 13,    \/\/ X86 LONG DOUBLE$/;"	e	enum:llvm::bitc::TypeCodes
TYPE_CODE_X86_MMX	Bitcode/LLVMBitCodes.h	/^    TYPE_CODE_X86_MMX = 17,     \/\/ X86 MMX$/;"	e	enum:llvm::bitc::TypeCodes
TYs	DebugInfo.h	/^    SmallVector<MDNode *, 8> TYs;  \/\/ Types$/;"	m	class:llvm::DebugInfoFinder
TableGenMainFn	TableGen/Main.h	/^typedef bool TableGenMainFn(raw_ostream &OS, RecordKeeper &Records);$/;"	t	namespace:llvm
Tag	CodeGen/RegisterClassInfo.h	/^    unsigned Tag;$/;"	m	struct:llvm::RegisterClassInfo::RCInfo
Tag	CodeGen/RegisterClassInfo.h	/^  unsigned Tag;$/;"	m	class:llvm::RegisterClassInfo
TagIndex	Support/COFF.h	/^    uint32_t TagIndex;$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
TagIndex	Support/COFF.h	/^    uint32_t TagIndex;$/;"	m	struct:llvm::COFF::AuxiliaryWeakExternal
Tail	ADT/ImmutableList.h	/^  const ImmutableListImpl* Tail;$/;"	m	class:llvm::ImmutableListImpl
Tail	Support/Registry.h	/^    static node *Head, *Tail;$/;"	m	class:llvm::Registry
Tail	Support/Registry.h	/^  typename Registry<T,U>::node *Registry<T,U>::Tail;$/;"	m	class:llvm::Registry
Target	ADT/InMemoryStruct.h	/^  value_type *Target;$/;"	m	class:llvm::InMemoryStruct
Target	CodeGen/MachineFunction.h	/^  const TargetMachine &Target;$/;"	m	class:llvm::MachineFunction
Target	CodeGen/MachineRelocation.h	/^  } Target;$/;"	m	class:llvm::MachineRelocation	typeref:union:llvm::MachineRelocation::__anon48
Target	MC/MCExpr.h	/^    Target     \/\/\/< Target specific expression.$/;"	e	enum:llvm::MCExpr::ExprKind
Target	Support/TargetRegistry.h	/^    Target() : AsmStreamerCtorFn(llvm::createAsmStreamer) {}$/;"	f	class:llvm::Target
Target	Support/TargetRegistry.h	/^  class Target {$/;"	c	namespace:llvm
TargetBlockAddress	CodeGen/ISDOpcodes.h	/^    TargetBlockAddress,$/;"	e	enum:llvm::ISD::NodeType
TargetCPU	Target/TargetMachine.h	/^  std::string TargetCPU;$/;"	m	class:llvm::TargetMachine
TargetConstant	CodeGen/ISDOpcodes.h	/^    TargetConstant,$/;"	e	enum:llvm::ISD::NodeType
TargetConstantFP	CodeGen/ISDOpcodes.h	/^    TargetConstantFP,$/;"	e	enum:llvm::ISD::NodeType
TargetConstantPool	CodeGen/ISDOpcodes.h	/^    TargetConstantPool,$/;"	e	enum:llvm::ISD::NodeType
TargetDAGCombineArray	Target/TargetLowering.h	/^  TargetDAGCombineArray[(ISD::BUILTIN_OP_END+CHAR_BIT-1)\/CHAR_BIT];$/;"	m	class:llvm::TargetLowering
TargetELFWriterInfo	Target/TargetELFWriterInfo.h	/^  class TargetELFWriterInfo {$/;"	c	namespace:llvm
TargetExternalSymbol	CodeGen/ISDOpcodes.h	/^    TargetExternalSymbol,$/;"	e	enum:llvm::ISD::NodeType
TargetExternalSymbols	CodeGen/SelectionDAG.h	/^  std::map<std::pair<std::string, unsigned char>,SDNode*> TargetExternalSymbols;$/;"	m	class:llvm::SelectionDAG
TargetFS	Target/TargetMachine.h	/^  std::string TargetFS;$/;"	m	class:llvm::TargetMachine
TargetFlags	CodeGen/MachineOperand.h	/^    unsigned char TargetFlags;$/;"	m	union:llvm::MachineOperand::__anon34
TargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char TargetFlags;$/;"	m	class:llvm::BlockAddressSDNode
TargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char TargetFlags;$/;"	m	class:llvm::ConstantPoolSDNode
TargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char TargetFlags;$/;"	m	class:llvm::ExternalSymbolSDNode
TargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char TargetFlags;$/;"	m	class:llvm::GlobalAddressSDNode
TargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char TargetFlags;$/;"	m	class:llvm::JumpTableSDNode
TargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char TargetFlags;$/;"	m	class:llvm::TargetIndexSDNode
TargetFolder	Support/TargetFolder.h	/^  explicit TargetFolder(const DataLayout *TheTD) : TD(TheTD) {}$/;"	f	class:llvm::TargetFolder
TargetFolder	Support/TargetFolder.h	/^class TargetFolder {$/;"	c	namespace:llvm
TargetFrameIndex	CodeGen/ISDOpcodes.h	/^    TargetFrameIndex,$/;"	e	enum:llvm::ISD::NodeType
TargetFrameLowering	Target/TargetFrameLowering.h	/^  TargetFrameLowering(StackDirection D, unsigned StackAl, int LAO,$/;"	f	class:llvm::TargetFrameLowering
TargetFrameLowering	Target/TargetFrameLowering.h	/^class TargetFrameLowering {$/;"	c	namespace:llvm
TargetGlobalAddress	CodeGen/ISDOpcodes.h	/^    TargetGlobalAddress,$/;"	e	enum:llvm::ISD::NodeType
TargetGlobalTLSAddress	CodeGen/ISDOpcodes.h	/^    TargetGlobalTLSAddress,$/;"	e	enum:llvm::ISD::NodeType
TargetIndex	CodeGen/ISDOpcodes.h	/^    TargetIndex,$/;"	e	enum:llvm::ISD::NodeType
TargetIndexSDNode	CodeGen/SelectionDAGNodes.h	/^  TargetIndexSDNode(int Idx, EVT VT, int64_t Ofs, unsigned char TF)$/;"	f	class:llvm::TargetIndexSDNode
TargetIndexSDNode	CodeGen/SelectionDAGNodes.h	/^class TargetIndexSDNode : public SDNode {$/;"	c	namespace:llvm
TargetInstrInfo	Target/TargetInstrInfo.h	/^  TargetInstrInfo(int CFSetupOpcode = -1, int CFDestroyOpcode = -1)$/;"	f	class:llvm::TargetInstrInfo
TargetInstrInfo	Target/TargetInstrInfo.h	/^class TargetInstrInfo : public MCInstrInfo {$/;"	c	namespace:llvm
TargetInstrInfoImpl	Target/TargetInstrInfo.h	/^  TargetInstrInfoImpl(int CallFrameSetupOpcode = -1,$/;"	f	class:llvm::TargetInstrInfoImpl
TargetInstrInfoImpl	Target/TargetInstrInfo.h	/^class TargetInstrInfoImpl : public TargetInstrInfo {$/;"	c	namespace:llvm
TargetIntrinsicInfo	Target/TargetIntrinsicInfo.h	/^class TargetIntrinsicInfo {$/;"	c	namespace:llvm
TargetJITInfo	Target/TargetJITInfo.h	/^  class TargetJITInfo {$/;"	c	namespace:llvm
TargetJumpTable	CodeGen/ISDOpcodes.h	/^    TargetJumpTable,$/;"	e	enum:llvm::ISD::NodeType
TargetLibraryInfo	Target/TargetLibraryInfo.h	/^class TargetLibraryInfo : public ImmutablePass {$/;"	c	namespace:llvm
TargetLowering	Target/TargetLowering.h	/^class TargetLowering {$/;"	c	namespace:llvm
TargetLoweringObjectFile	Target/TargetLoweringObjectFile.h	/^  TargetLoweringObjectFile() : MCObjectFileInfo(), Ctx(0) {}$/;"	f	class:llvm::TargetLoweringObjectFile
TargetLoweringObjectFile	Target/TargetLoweringObjectFile.h	/^class TargetLoweringObjectFile : public MCObjectFileInfo {$/;"	c	namespace:llvm
TargetLoweringObjectFileCOFF	CodeGen/TargetLoweringObjectFileImpl.h	/^class TargetLoweringObjectFileCOFF : public TargetLoweringObjectFile {$/;"	c	namespace:llvm
TargetLoweringObjectFileELF	CodeGen/TargetLoweringObjectFileImpl.h	/^class TargetLoweringObjectFileELF : public TargetLoweringObjectFile {$/;"	c	namespace:llvm
TargetLoweringObjectFileMachO	CodeGen/TargetLoweringObjectFileImpl.h	/^class TargetLoweringObjectFileMachO : public TargetLoweringObjectFile {$/;"	c	namespace:llvm
TargetLoweringOpt	Target/TargetLowering.h	/^    explicit TargetLoweringOpt(SelectionDAG &InDAG,$/;"	f	struct:llvm::TargetLowering::TargetLoweringOpt
TargetLoweringOpt	Target/TargetLowering.h	/^  struct TargetLoweringOpt {$/;"	s	class:llvm::TargetLowering
TargetMachine	Target/TargetMachine.h	/^class TargetMachine {$/;"	c	namespace:llvm
TargetMachineCtorFn	Support/TargetRegistry.h	/^    TargetMachineCtorTy TargetMachineCtorFn;$/;"	m	class:llvm::Target
TargetMachineCtorTy	Support/TargetRegistry.h	/^    typedef TargetMachine *(*TargetMachineCtorTy)(const Target &T,$/;"	t	class:llvm::Target
TargetMaterializeAlloca	CodeGen/FastISel.h	/^  virtual unsigned TargetMaterializeAlloca(const AllocaInst* C) {$/;"	f	class:llvm::FastISel
TargetMaterializeConstant	CodeGen/FastISel.h	/^  virtual unsigned TargetMaterializeConstant(const Constant* C) {$/;"	f	class:llvm::FastISel
TargetMaterializeFloatZero	CodeGen/FastISel.h	/^  virtual unsigned TargetMaterializeFloatZero(const ConstantFP* CF) {$/;"	f	class:llvm::FastISel
TargetObjectWriter	MC/MCMachObjectWriter.h	/^  llvm::OwningPtr<MCMachObjectTargetWriter> TargetObjectWriter;$/;"	m	class:llvm::MachObjectWriter
TargetOffset	MC/MCFixupKindInfo.h	/^  unsigned TargetOffset;$/;"	m	struct:llvm::MCFixupKindInfo
TargetOpcode	Target/TargetOpcodes.h	/^namespace TargetOpcode {$/;"	n	namespace:llvm
TargetOptions	Target/TargetOptions.h	/^    TargetOptions()$/;"	f	class:llvm::TargetOptions
TargetOptions	Target/TargetOptions.h	/^  class TargetOptions {$/;"	c	namespace:llvm
TargetParser	MC/MCParser/MCAsmParser.h	/^  MCTargetAsmParser *TargetParser;$/;"	m	class:llvm::MCAsmParser
TargetPassConfig	CodeGen/Passes.h	/^class TargetPassConfig : public ImmutablePass {$/;"	c	namespace:llvm
TargetRegisterClass	Target/TargetRegisterInfo.h	/^class TargetRegisterClass {$/;"	c	namespace:llvm
TargetRegisterInfo	Target/TargetRegisterInfo.h	/^class TargetRegisterInfo : public MCRegisterInfo {$/;"	c	namespace:llvm
TargetRegisterInfoDesc	Target/TargetRegisterInfo.h	/^struct TargetRegisterInfoDesc {$/;"	s	namespace:llvm
TargetRegistry	Support/TargetRegistry.h	/^  struct TargetRegistry {$/;"	s	namespace:llvm
TargetSchedModel	CodeGen/TargetSchedule.h	/^  TargetSchedModel(): STI(0), TII(0) {}$/;"	f	class:llvm::TargetSchedModel
TargetSchedModel	CodeGen/TargetSchedule.h	/^class TargetSchedModel {$/;"	c	namespace:llvm
TargetSelectionDAGInfo	Target/TargetSelectionDAGInfo.h	/^class TargetSelectionDAGInfo {$/;"	c	namespace:llvm
TargetSize	MC/MCFixupKindInfo.h	/^  unsigned TargetSize;$/;"	m	struct:llvm::MCFixupKindInfo
TargetSubtargetInfo	Target/TargetSubtargetInfo.h	/^class TargetSubtargetInfo : public MCSubtargetInfo {$/;"	c	namespace:llvm
TargetTransformInfo	TargetTransformInfo.h	/^  TargetTransformInfo(const TargetTransformInfo &T) :$/;"	f	class:llvm::TargetTransformInfo
TargetTransformInfo	TargetTransformInfo.h	/^  explicit TargetTransformInfo(const ScalarTargetTransformInfo* S,$/;"	f	class:llvm::TargetTransformInfo
TargetTransformInfo	TargetTransformInfo.h	/^class TargetTransformInfo : public ImmutablePass {$/;"	c	namespace:llvm
TargetTriple	MC/MCSubtargetInfo.h	/^  std::string TargetTriple;            \/\/ Target triple$/;"	m	class:llvm::MCSubtargetInfo
TargetTriple	Module.h	/^  std::string TargetTriple;       \/\/\/< Platform target triple Module compiled on$/;"	m	class:llvm::Module
TargetTriple	Target/TargetMachine.h	/^  std::string TargetTriple;$/;"	m	class:llvm::TargetMachine
TempEnumTypes	DIBuilder.h	/^    MDNode *TempEnumTypes;$/;"	m	class:llvm::DIBuilder
TempGVs	DIBuilder.h	/^    MDNode *TempGVs;$/;"	m	class:llvm::DIBuilder
TempPath	Support/FileOutputBuffer.h	/^  SmallString<128>    TempPath;$/;"	m	class:llvm::FileOutputBuffer
TempRetainTypes	DIBuilder.h	/^    MDNode *TempRetainTypes;$/;"	m	class:llvm::DIBuilder
TempSubprograms	DIBuilder.h	/^    MDNode *TempSubprograms;$/;"	m	class:llvm::DIBuilder
TemplateArgs	TableGen/Record.h	/^  std::vector<Init *> TemplateArgs;$/;"	m	class:llvm::Record
Term	Support/CFG.h	/^  const Term_ Term;$/;"	m	class:llvm::SuccIterator
TermOps	Instruction.h	/^  enum TermOps {       \/\/ These terminate basic blocks$/;"	g	class:llvm::Instruction
Terminator	MC/MCInstrDesc.h	/^    Terminator,$/;"	e	enum:llvm::MCID::__anon69
TerminatorInst	InstrTypes.h	/^  TerminatorInst(Type *Ty, Instruction::TermOps iType,$/;"	f	class:llvm::TerminatorInst
TerminatorInst	InstrTypes.h	/^class TerminatorInst : public Instruction {$/;"	c	namespace:llvm
TernOpInit	TableGen/Record.h	/^  TernOpInit(TernaryOp opc, Init *lhs, Init *mhs, Init *rhs,$/;"	f	class:llvm::TernOpInit
TernOpInit	TableGen/Record.h	/^class TernOpInit : public OpInit {$/;"	c	namespace:llvm
TernaryOp	TableGen/Record.h	/^  enum TernaryOp { SUBST, FOREACH, IF };$/;"	g	class:llvm::TernOpInit
TernarySDNode	CodeGen/SelectionDAGNodes.h	/^  TernarySDNode(unsigned Opc, DebugLoc dl, SDVTList VTs, SDValue X, SDValue Y,$/;"	f	class:llvm::TernarySDNode
TernarySDNode	CodeGen/SelectionDAGNodes.h	/^class TernarySDNode : public SDNode {$/;"	c	namespace:llvm
TestAndEraseFromSet	ADT/SetVector.h	/^    TestAndEraseFromSet(UnaryPredicate P, set_type &set_) : P(P), set_(set_) {}$/;"	f	class:llvm::SetVector::TestAndEraseFromSet
TestAndEraseFromSet	ADT/SetVector.h	/^  class TestAndEraseFromSet {$/;"	c	class:llvm::SetVector
Text	MC/MCAtom.h	/^  std::vector<std::pair<uint64_t, MCInst> > Text;$/;"	m	class:llvm::MCAtom
Text	MC/SectionKind.h	/^    Text,$/;"	e	enum:llvm::SectionKind::Kind
TextAlignFillValue	MC/MCAsmInfo.h	/^    unsigned TextAlignFillValue;             \/\/ Defaults to 0$/;"	m	class:llvm::MCAsmInfo
TextAtom	MC/MCAtom.h	/^  typedef enum { TextAtom, DataAtom } AtomType;$/;"	e	enum:llvm::MCAtom::__anon64
TextCoalSection	MC/MCObjectFileInfo.h	/^  const MCSection *TextCoalSection;$/;"	m	class:llvm::MCObjectFileInfo
TextSection	MC/MCObjectFileInfo.h	/^  const MCSection *TextSection;$/;"	m	class:llvm::MCObjectFileInfo
TheBB	Analysis/Dominators.h	/^  NodeT *TheBB;$/;"	m	class:llvm::DomTreeNodeBase
TheCU	DIBuilder.h	/^    MDNode *TheCU;$/;"	m	class:llvm::DIBuilder
TheCond	MC/MCParser/AsmCond.h	/^  ConditionalAssemblyType TheCond;$/;"	m	class:llvm::AsmCond
TheDelegate	CodeGen/LiveRangeEdit.h	/^  Delegate *const TheDelegate;$/;"	m	class:llvm::LiveRangeEdit
TheGlobal	CodeGen/SelectionDAGNodes.h	/^  const GlobalValue *TheGlobal;$/;"	m	class:llvm::GlobalAddressSDNode
TheInit	TableGen/Record.h	/^  DefInit *TheInit;$/;"	m	class:llvm::Record
TheMap	ADT/DenseSet.h	/^  MapTy TheMap;$/;"	m	class:llvm::DenseSet
TheMapping	ADT/EquivalenceClasses.h	/^  std::set<ECValue> TheMapping;$/;"	m	class:llvm::EquivalenceClasses
TheModule	CodeGen/MachineModuleInfo.h	/^  const Module *TheModule;$/;"	m	class:llvm::MachineModuleInfo
TheStream	Support/FormattedStream.h	/^    raw_ostream *TheStream;$/;"	m	class:llvm::formatted_raw_ostream
TheStream	Support/circular_raw_ostream.h	/^    raw_ostream *TheStream;$/;"	m	class:llvm::circular_raw_ostream
TheSubsets	Instructions.h	/^  Subsets TheSubsets;$/;"	m	class:llvm::SwitchInst
TheTable	ADT/StringMap.h	/^  StringMapEntryBase **TheTable;$/;"	m	class:llvm::StringMapImpl
TheTarget	MC/MCTargetAsmLexer.h	/^  const Target &TheTarget;$/;"	m	class:llvm::MCTargetAsmLexer
TheTarget	Target/TargetMachine.h	/^  const Target &TheTarget;$/;"	m	class:llvm::TargetMachine
TheVector	ADT/SmallBitVector.h	/^    SmallBitVector &TheVector;$/;"	m	class:llvm::SmallBitVector::reference
ThreadBSS	MC/SectionKind.h	/^           ThreadBSS,$/;"	e	enum:llvm::SectionKind::Kind
ThreadData	MC/SectionKind.h	/^           ThreadData,$/;"	e	enum:llvm::SectionKind::Kind
ThreadLocal	Support/ThreadLocal.h	/^      ThreadLocal() : ThreadLocalImpl() { }$/;"	f	class:llvm::sys::ThreadLocal
ThreadLocal	Support/ThreadLocal.h	/^    class ThreadLocal : public ThreadLocalImpl {$/;"	c	namespace:llvm::sys
ThreadLocalDataTy	Support/ThreadLocal.h	/^      typedef uint64_t ThreadLocalDataTy;$/;"	t	class:llvm::sys::ThreadLocalImpl
ThreadLocalImpl	Support/ThreadLocal.h	/^    class ThreadLocalImpl {$/;"	c	namespace:llvm::sys
ThreadLocalMode	GlobalVariable.h	/^  enum ThreadLocalMode {$/;"	g	class:llvm::GlobalVariable
Threshold	Analysis/InlineCost.h	/^    const int Threshold;$/;"	m	class:llvm::InlineCost
ThumbFuncs	MC/MCAssembler.h	/^  SmallPtrSet<const MCSymbol*, 64> ThumbFuncs;$/;"	m	class:llvm::MCAssembler
Tied	CodeGen/MachineInstrBundle.h	/^    bool Tied;$/;"	m	struct:llvm::MachineOperandIteratorBase::VirtRegInfo
Tilde	MC/MCParser/MCAsmLexer.h	/^    Plus, Minus, Tilde,$/;"	e	enum:llvm::AsmToken::TokenKind
Time	Support/Timer.h	/^  TimeRecord Time;$/;"	m	class:llvm::Timer
TimeConversions	Support/TimeValue.h	/^    enum TimeConversions {$/;"	g	class:llvm::sys::TimeValue
TimeDateStamp	Object/COFF.h	/^  support::ulittle32_t TimeDateStamp;$/;"	m	struct:llvm::object::coff_file_header
TimeDateStamp	Support/COFF.h	/^    uint32_t TimeDateStamp;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
TimeDateStamp	Support/COFF.h	/^    uint32_t TimeDateStamp;$/;"	m	struct:llvm::COFF::ImportHeader
TimeDateStamp	Support/COFF.h	/^    uint32_t TimeDateStamp;$/;"	m	struct:llvm::COFF::header
TimeRecord	Support/Timer.h	/^  TimeRecord() : WallTime(0), UserTime(0), SystemTime(0), MemUsed(0) {}$/;"	f	class:llvm::TimeRecord
TimeRecord	Support/Timer.h	/^class TimeRecord {$/;"	c	namespace:llvm
TimeRegion	Support/Timer.h	/^  explicit TimeRegion(Timer &t) : T(&t) {$/;"	f	class:llvm::TimeRegion
TimeRegion	Support/Timer.h	/^  explicit TimeRegion(Timer *t) : T(t) {$/;"	f	class:llvm::TimeRegion
TimeRegion	Support/Timer.h	/^class TimeRegion {$/;"	c	namespace:llvm
TimeValue	Support/TimeValue.h	/^    explicit TimeValue (SecondsType seconds, NanoSecondsType nanos = 0)$/;"	f	class:llvm::sys::TimeValue
TimeValue	Support/TimeValue.h	/^    explicit TimeValue( double new_time )$/;"	f	class:llvm::sys::TimeValue
TimeValue	Support/TimeValue.h	/^  class TimeValue {$/;"	c	namespace:llvm::sys
Timer	Support/Timer.h	/^  Timer(StringRef N, TimerGroup &tg) : TG(0) { init(N, tg); }$/;"	f	class:llvm::Timer
Timer	Support/Timer.h	/^  Timer(const Timer &RHS) : TG(0) {$/;"	f	class:llvm::Timer
Timer	Support/Timer.h	/^  explicit Timer() : TG(0) {}$/;"	f	class:llvm::Timer
Timer	Support/Timer.h	/^  explicit Timer(StringRef N) : TG(0) { init(N); }$/;"	f	class:llvm::Timer
Timer	Support/Timer.h	/^class Timer {$/;"	c	namespace:llvm
TimerGroup	Support/Timer.h	/^class TimerGroup {$/;"	c	namespace:llvm
TimersToPrint	Support/Timer.h	/^  std::vector<std::pair<TimeRecord, std::string> > TimersToPrint;$/;"	m	class:llvm::TimerGroup
TinyPtrVector	ADT/TinyPtrVector.h	/^  TinyPtrVector() {}$/;"	f	class:llvm::TinyPtrVector
TinyPtrVector	ADT/TinyPtrVector.h	/^  TinyPtrVector(TinyPtrVector &&RHS) : Val(RHS.Val) {$/;"	f	class:llvm::TinyPtrVector
TinyPtrVector	ADT/TinyPtrVector.h	/^  TinyPtrVector(const TinyPtrVector &RHS) : Val(RHS.Val) {$/;"	f	class:llvm::TinyPtrVector
TinyPtrVector	ADT/TinyPtrVector.h	/^class TinyPtrVector {$/;"	c	namespace:llvm
ToReg	MC/MCRegisterInfo.h	/^    unsigned ToReg;$/;"	m	struct:llvm::MCRegisterInfo::DwarfLLVMRegPair
TokError	MC/MCParser/MCAsmParserExtension.h	/^  bool TokError(const Twine &Msg) {$/;"	f	class:llvm::MCAsmParserExtension
TokStart	MC/MCParser/MCAsmLexer.h	/^  const char *TokStart;$/;"	m	class:llvm::MCAsmLexer
TokenFactor	CodeGen/ISDOpcodes.h	/^    TokenFactor,$/;"	e	enum:llvm::ISD::NodeType
TokenKind	MC/MCParser/MCAsmLexer.h	/^  enum TokenKind {$/;"	g	class:llvm::AsmToken
TopIdx	CodeGen/RegisterPressure.h	/^  SlotIndex TopIdx;$/;"	m	struct:llvm::IntervalPressure
TopLevelLoops	Analysis/LoopInfo.h	/^  std::vector<LoopT *> TopLevelLoops;$/;"	m	class:llvm::LoopInfoBase
TopLevelMap	ADT/ScopedHashTable.h	/^  DenseMap<K, ValTy*, KInfo> TopLevelMap;$/;"	m	class:llvm::ScopedHashTable
TopLevelRegion	Analysis/RegionInfo.h	/^  Region *TopLevelRegion;$/;"	m	class:llvm::RegionInfo
TopPos	CodeGen/RegisterPressure.h	/^  MachineBasicBlock::const_iterator TopPos;$/;"	m	struct:llvm::RegionPressure
TopPressure	CodeGen/MachineScheduler.h	/^  IntervalPressure TopPressure;$/;"	m	class:llvm::ScheduleDAGMI
TopRPTracker	CodeGen/MachineScheduler.h	/^  RegPressureTracker TopRPTracker;$/;"	m	class:llvm::ScheduleDAGMI
TopReadyCycle	CodeGen/ScheduleDAG.h	/^    unsigned TopReadyCycle; \/\/ Cycle relative to start when node is ready.$/;"	m	class:llvm::SUnit
TotalAllocaSizeRecursiveCaller	Analysis/InlineCost.h	/^    const unsigned TotalAllocaSizeRecursiveCaller = 1024;$/;"	m	namespace:llvm::InlineConstants
TotalSize	Support/COFF.h	/^    uint32_t TotalSize;$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
Trace	Analysis/Trace.h	/^  Trace(const std::vector<BasicBlock *> &vBB) : BasicBlocks (vBB) {}$/;"	f	class:llvm::Trace
Trace	Analysis/Trace.h	/^class Trace {$/;"	c	namespace:llvm
TrackedRecords	TableGen/Record.h	/^  RecordKeeper &TrackedRecords;$/;"	m	class:llvm::Record
Tracking	CodeGen/RegisterScavenging.h	/^  bool Tracking;$/;"	m	class:llvm::RegScavenger
Tracking	Support/ValueHandle.h	/^    Tracking,$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
TrackingVH	Support/ValueHandle.h	/^  TrackingVH() : ValueHandleBase(Tracking) {}$/;"	f	class:llvm::TrackingVH
TrackingVH	Support/ValueHandle.h	/^  TrackingVH(ValueTy *P) : ValueHandleBase(Tracking, GetAsValue(P)) {}$/;"	f	class:llvm::TrackingVH
TrackingVH	Support/ValueHandle.h	/^  TrackingVH(const TrackingVH &RHS) : ValueHandleBase(Tracking, RHS) {}$/;"	f	class:llvm::TrackingVH
TrackingVH	Support/ValueHandle.h	/^class TrackingVH : public ValueHandleBase {$/;"	c	namespace:llvm
TracksLiveness	CodeGen/MachineRegisterInfo.h	/^  bool TracksLiveness;$/;"	m	class:llvm::MachineRegisterInfo
Traits	ADT/IntervalMap.h	/^  typedef typename MapA::KeyTraits Traits;$/;"	t	class:llvm::IntervalMapOverlaps
Traits	ADT/ilist.h	/^  typedef ilist_traits<NodeTy> Traits;$/;"	t	class:llvm::ilist_iterator
Traits	Transforms/Utils/SSAUpdaterImpl.h	/^  typedef SSAUpdaterTraits<UpdaterT> Traits;$/;"	t	class:llvm::SSAUpdaterImpl
TraitsClass	SymbolTableListTraits.h	/^  typedef ilist_traits<ValueSubClass> TraitsClass;$/;"	t	class:llvm::SymbolTableListTraits
TransformKind	Analysis/ScalarEvolutionNormalization.h	/^enum TransformKind {$/;"	g	namespace:llvm
TransformToType	Target/TargetLowering.h	/^  EVT TransformToType[MVT::LAST_VALUETYPE];$/;"	m	class:llvm::TargetLowering
TransientStackAlignment	Target/TargetFrameLowering.h	/^  unsigned TransientStackAlignment;$/;"	m	class:llvm::TargetFrameLowering
TrapFuncName	Target/TargetOptions.h	/^    std::string TrapFuncName;$/;"	m	class:llvm::TargetOptions
TreeTy	ADT/ImmutableIntervalMap.h	/^  typedef ImutAVLTree<ImutInfo> TreeTy;$/;"	t	class:llvm::ImutIntervalAVLFactory
TreeTy	ADT/ImmutableIntervalMap.h	/^  typedef ImutAVLTree<ImutIntervalInfo<ValT> > TreeTy;$/;"	t	class:llvm::ImmutableIntervalMap
TreeTy	ADT/ImmutableMap.h	/^  typedef ImutAVLTree<ValInfo>              TreeTy;$/;"	t	class:llvm::ImmutableMap
TreeTy	ADT/ImmutableMap.h	/^  typedef ImutAVLTree<ValInfo>              TreeTy;$/;"	t	class:llvm::ImmutableMapRef
TreeTy	ADT/ImmutableSet.h	/^  typedef ImutAVLTree<ImutInfo> TreeTy;$/;"	t	class:llvm::ImutAVLFactory
TreeTy	ADT/ImmutableSet.h	/^  typedef ImutAVLTree<ImutInfo> TreeTy;$/;"	t	class:llvm::ImutAVLTreeGenericIterator
TreeTy	ADT/ImmutableSet.h	/^  typedef ImutAVLTree<ImutInfo> TreeTy;$/;"	t	class:llvm::ImutAVLTreeInOrderIterator
TreeTy	ADT/ImmutableSet.h	/^  typedef ImutAVLTree<ValInfo> TreeTy;$/;"	t	class:llvm::ImmutableSet
TreeTy	ADT/ImmutableSet.h	/^  typedef ImutAVLTree<ValInfo> TreeTy;$/;"	t	class:llvm::ImmutableSetRef
Triple	ADT/Triple.h	/^  Triple() : Data(), Arch(), Vendor(), OS(), Environment() {}$/;"	f	class:llvm::Triple
Triple	ADT/Triple.h	/^class Triple {$/;"	c	namespace:llvm
TripleMatchQualityFn	Support/TargetRegistry.h	/^    TripleMatchQualityFnTy TripleMatchQualityFn;$/;"	m	class:llvm::Target
TripleMatchQualityFnTy	Support/TargetRegistry.h	/^    typedef unsigned (*TripleMatchQualityFnTy)(const std::string &TT);$/;"	t	class:llvm::Target
Tristate	Analysis/LazyValueInfo.h	/^  enum Tristate {$/;"	g	class:llvm::LazyValueInfo
True	Analysis/LazyValueInfo.h	/^    Unknown = -1, False = 0, True = 1$/;"	e	enum:llvm::LazyValueInfo::Tristate
TruncInst	Instructions.h	/^class TruncInst : public CastInst {$/;"	c	namespace:llvm
TruncStoreActions	Target/TargetLowering.h	/^  uint8_t TruncStoreActions[MVT::LAST_VALUETYPE][MVT::LAST_VALUETYPE];$/;"	m	class:llvm::TargetLowering
TruncVecArgument	Intrinsics.h	/^      Argument, ExtendVecArgument, TruncVecArgument$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
TryToFoldLoad	CodeGen/FastISel.h	/^  virtual bool TryToFoldLoad(MachineInstr * \/*MI*\/, unsigned \/*OpNo*\/,$/;"	f	class:llvm::FastISel
TsanHappensAfter	Support/Valgrind.h	56;"	d
TsanHappensAfter	Support/Valgrind.h	68;"	d
TsanHappensBefore	Support/Valgrind.h	52;"	d
TsanHappensBefore	Support/Valgrind.h	67;"	d
TsanIgnoreWritesBegin	Support/Valgrind.h	60;"	d
TsanIgnoreWritesBegin	Support/Valgrind.h	69;"	d
TsanIgnoreWritesEnd	Support/Valgrind.h	64;"	d
TsanIgnoreWritesEnd	Support/Valgrind.h	70;"	d
Twine	ADT/Twine.h	/^    \/*implicit*\/ Twine() : LHSKind(EmptyKind), RHSKind(EmptyKind) {$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    \/*implicit*\/ Twine(const StringRef &Str)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    \/*implicit*\/ Twine(const StringRef &_LHS, const char *_RHS)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    \/*implicit*\/ Twine(const char *Str)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    \/*implicit*\/ Twine(const char *_LHS, const StringRef &_RHS)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    \/*implicit*\/ Twine(const std::string &Str)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(Child _LHS, NodeKind _LHSKind,$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(NodeKind Kind)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(char Val)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(const Twine &_LHS, const Twine &_RHS)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(const long &Val)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(const long long &Val)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(const unsigned long &Val)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(const unsigned long long &Val)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(int Val)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(signed char Val)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(unsigned Val)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^    explicit Twine(unsigned char Val)$/;"	f	class:llvm::Twine
Twine	ADT/Twine.h	/^  class Twine {$/;"	c	namespace:llvm
TwineKind	ADT/Twine.h	/^      TwineKind,$/;"	e	enum:llvm::Twine::NodeKind
Ty	ADT/PointerIntPair.h	/^  typedef PointerIntPair<PointerTy, IntBits, IntType> Ty;$/;"	t	struct:llvm::DenseMapInfo
Ty	Analysis/ScalarEvolutionExpressions.h	/^    Type *Ty;$/;"	m	class:llvm::SCEVCastExpr
Ty	CodeGen/MachineConstantPool.h	/^  Type *Ty;$/;"	m	class:llvm::MachineConstantPoolValue
Ty	TableGen/Record.h	/^  RecTy *Ty;$/;"	m	class:llvm::ListRecTy
Ty	TableGen/Record.h	/^  RecTy *Ty;$/;"	m	class:llvm::RecordVal
Ty	TableGen/Record.h	/^  RecTy *Ty;$/;"	m	class:llvm::TypedInit
Ty	Target/TargetLowering.h	/^    Type* Ty;$/;"	m	struct:llvm::TargetLowering::ArgListEntry
Type	InlineAsm.h	/^    ConstraintPrefix Type;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
Type	MC/MCAtom.h	/^  AtomType Type;$/;"	m	class:llvm::MCAtom
Type	MC/MCELFObjectWriter.h	/^  unsigned Type;$/;"	m	struct:llvm::ELFRelocationEntry
Type	MC/MCSectionELF.h	/^  unsigned Type;$/;"	m	class:llvm::MCSectionELF
Type	Object/COFF.h	/^  support::ulittle16_t Type;$/;"	m	struct:llvm::object::coff_relocation
Type	Object/COFF.h	/^  support::ulittle16_t Type;$/;"	m	struct:llvm::object::coff_symbol
Type	Object/MachOFormat.h	/^    uint32_t Type;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
Type	Object/MachOFormat.h	/^    uint32_t Type;$/;"	m	struct:llvm::object::macho::LinkeditDataLoadCommand
Type	Object/MachOFormat.h	/^    uint32_t Type;$/;"	m	struct:llvm::object::macho::LoadCommand
Type	Object/MachOFormat.h	/^    uint32_t Type;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
Type	Object/MachOFormat.h	/^    uint32_t Type;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
Type	Object/MachOFormat.h	/^    uint32_t Type;$/;"	m	struct:llvm::object::macho::SymtabLoadCommand
Type	Object/MachOFormat.h	/^    uint8_t Type;$/;"	m	struct:llvm::object::macho::Symbol64TableEntry
Type	Object/MachOFormat.h	/^    uint8_t Type;$/;"	m	struct:llvm::object::macho::SymbolTableEntry
Type	Object/ObjectFile.h	/^  enum Type {$/;"	g	class:llvm::object::SymbolRef
Type	Support/COFF.h	/^    uint16_t Type;$/;"	m	struct:llvm::COFF::relocation
Type	Support/COFF.h	/^    uint16_t Type;$/;"	m	struct:llvm::COFF::symbol
Type	Support/FileSystem.h	/^  file_type Type;$/;"	m	class:llvm::sys::fs::file_status
Type	Support/YAMLParser.h	/^  MappingType Type;$/;"	m	class:llvm::yaml::MappingNode
Type	Type.h	/^  explicit Type(LLVMContext &C, TypeID tid)$/;"	f	class:llvm::Type
Type	Type.h	/^class Type {$/;"	c	namespace:llvm
TypeAndAttributes	MC/MCSectionMachO.h	/^  unsigned TypeAndAttributes;$/;"	m	class:llvm::MCSectionMachO
TypeBitWidth	DataLayout.h	/^  uint32_t            TypeBitWidth;   \/\/\/< Type bit width$/;"	m	struct:llvm::PointerAlignElem
TypeBitWidth	DataLayout.h	/^  unsigned TypeBitWidth : 24; \/\/\/< Type bit width$/;"	m	struct:llvm::LayoutAlignElem
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<R(A1, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<R(A1, A2), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<R(A1, A2, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, A4), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, A4, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, A4, A5), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<R(A1, A2, A3, A4, A5, ...), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^class TypeBuilder<types::i<num_bits>, cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<> class TypeBuilder<const void*, false>$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<> class TypeBuilder<const volatile void*, false>$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<> class TypeBuilder<double, false> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<> class TypeBuilder<double, true> {};$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<> class TypeBuilder<float, false> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<> class TypeBuilder<float, true> {};$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<> class TypeBuilder<void*, false>$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<> class TypeBuilder<volatile void*, false>$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::fp128, cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::ieee_double, cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::ieee_float, cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::ppc_fp128, cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::x86_fp80, cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<bool cross> class TypeBuilder<types::x86_mmx, cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<bool cross> class TypeBuilder<void, cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename R, bool cross> class TypeBuilder<R(), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename R, bool cross> class TypeBuilder<R(...), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename R, typename A1, bool cross> class TypeBuilder<R(A1), cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<T&, cross> {};$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<T*, cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<T[], cross> {$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<const T, cross>$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<const volatile T, cross>$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename T, bool cross> class TypeBuilder<volatile T, cross>$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename T, bool cross_compilable> class TypeBuilder {};$/;"	c	namespace:llvm
TypeBuilder	TypeBuilder.h	/^template<typename T, size_t N, bool cross> class TypeBuilder<T[N], cross> {$/;"	c	namespace:llvm
TypeCodes	Bitcode/LLVMBitCodes.h	/^  enum TypeCodes {$/;"	g	namespace:llvm::bitc
TypeExpandFloat	Target/TargetLowering.h	/^    TypeExpandFloat,     \/\/ Split this float into two of half the size.$/;"	e	enum:llvm::TargetLowering::LegalizeTypeAction
TypeExpandInteger	Target/TargetLowering.h	/^    TypeExpandInteger,   \/\/ Split this integer into two of half the size.$/;"	e	enum:llvm::TargetLowering::LegalizeTypeAction
TypeFinder	TypeFinder.h	/^  TypeFinder() : OnlyNamed(false) {}$/;"	f	class:llvm::TypeFinder
TypeFinder	TypeFinder.h	/^class TypeFinder {$/;"	c	namespace:llvm
TypeID	Object/Binary.h	/^  unsigned int TypeID;$/;"	m	class:llvm::object::Binary
TypeID	Support/YAMLParser.h	/^  unsigned int TypeID;$/;"	m	class:llvm::yaml::Node
TypeID	Type.h	/^  enum TypeID {$/;"	g	class:llvm::Type
TypeIds	CodeGen/MachineModuleInfo.h	/^  std::vector<int> TypeIds;              \/\/ List of type ids (filters negative)$/;"	m	struct:llvm::LandingPadInfo
TypeInfo	Support/COFF.h	/^    uint16_t TypeInfo;$/;"	m	struct:llvm::COFF::ImportHeader
TypeInfos	CodeGen/MachineModuleInfo.h	/^  std::vector<const GlobalVariable *> TypeInfos;$/;"	m	class:llvm::MachineModuleInfo
TypeLegal	Target/TargetLowering.h	/^    TypeLegal,           \/\/ The target natively supports this type.$/;"	e	enum:llvm::TargetLowering::LegalizeTypeAction
TypePromoteInteger	Target/TargetLowering.h	/^    TypePromoteInteger,  \/\/ Replace this integer with a larger one.$/;"	e	enum:llvm::TargetLowering::LegalizeTypeAction
TypeScalarizeVector	Target/TargetLowering.h	/^    TypeScalarizeVector, \/\/ Replace this one-element vector with its element.$/;"	e	enum:llvm::TargetLowering::LegalizeTypeAction
TypeSoftenFloat	Target/TargetLowering.h	/^    TypeSoftenFloat,     \/\/ Convert this float to a same size integer type.$/;"	e	enum:llvm::TargetLowering::LegalizeTypeAction
TypeSplitVector	Target/TargetLowering.h	/^    TypeSplitVector,     \/\/ Split this vector into two of half the size.$/;"	e	enum:llvm::TargetLowering::LegalizeTypeAction
TypeSymtabCodes	Bitcode/LLVMBitCodes.h	/^  enum TypeSymtabCodes {$/;"	g	namespace:llvm::bitc
TypeWidenVector	Target/TargetLowering.h	/^    TypeWidenVector      \/\/ This vector should be widened into a larger vector.$/;"	e	enum:llvm::TargetLowering::LegalizeTypeAction
TypedInit	TableGen/Record.h	/^  explicit TypedInit(InitKind K, RecTy *T) : Init(K), Ty(T) {}$/;"	f	class:llvm::TypedInit
TypedInit	TableGen/Record.h	/^class TypedInit : public Init {$/;"	c	namespace:llvm
U	ADT/SmallVector.h	/^  typedef llvm::AlignedCharArrayUnion<T> U;$/;"	t	class:llvm::SmallVectorTemplateCommon
U	Use.h	/^  Use *U;$/;"	m	class:llvm::value_use_iterator
UADDO	CodeGen/ISDOpcodes.h	/^    SADDO, UADDO,$/;"	e	enum:llvm::ISD::NodeType
UDIV	CodeGen/ISDOpcodes.h	/^    ADD, SUB, MUL, SDIV, UDIV, SREM, UREM,$/;"	e	enum:llvm::ISD::NodeType
UDIVREM	CodeGen/ISDOpcodes.h	/^    SDIVREM, UDIVREM,$/;"	e	enum:llvm::ISD::NodeType
UDIVREM_I128	CodeGen/RuntimeLibcalls.h	/^    UDIVREM_I128,$/;"	e	enum:llvm::RTLIB::Libcall
UDIVREM_I16	CodeGen/RuntimeLibcalls.h	/^    UDIVREM_I16,$/;"	e	enum:llvm::RTLIB::Libcall
UDIVREM_I32	CodeGen/RuntimeLibcalls.h	/^    UDIVREM_I32,$/;"	e	enum:llvm::RTLIB::Libcall
UDIVREM_I64	CodeGen/RuntimeLibcalls.h	/^    UDIVREM_I64,$/;"	e	enum:llvm::RTLIB::Libcall
UDIVREM_I8	CodeGen/RuntimeLibcalls.h	/^    UDIVREM_I8,$/;"	e	enum:llvm::RTLIB::Libcall
UDIV_I128	CodeGen/RuntimeLibcalls.h	/^    UDIV_I128,$/;"	e	enum:llvm::RTLIB::Libcall
UDIV_I16	CodeGen/RuntimeLibcalls.h	/^    UDIV_I16,$/;"	e	enum:llvm::RTLIB::Libcall
UDIV_I32	CodeGen/RuntimeLibcalls.h	/^    UDIV_I32,$/;"	e	enum:llvm::RTLIB::Libcall
UDIV_I64	CodeGen/RuntimeLibcalls.h	/^    UDIV_I64,$/;"	e	enum:llvm::RTLIB::Libcall
UDIV_I8	CodeGen/RuntimeLibcalls.h	/^    UDIV_I8,$/;"	e	enum:llvm::RTLIB::Libcall
UDivOperator	Operator.h	/^class UDivOperator$/;"	c	namespace:llvm
UESP	Support/Solaris.h	35;"	d
UHexKind	ADT/Twine.h	/^      UHexKind$/;"	e	enum:llvm::Twine::NodeKind
UINTTOFP_I128_F32	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I128_F32,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I128_F64	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I128_F64,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I128_F80	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I128_F80,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I128_PPCF128	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I128_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I32_F32	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I32_F32,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I32_F64	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I32_F64,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I32_F80	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I32_F80,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I32_PPCF128	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I32_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I64_F32	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I64_F32,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I64_F64	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I64_F64,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I64_F80	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I64_F80,$/;"	e	enum:llvm::RTLIB::Libcall
UINTTOFP_I64_PPCF128	CodeGen/RuntimeLibcalls.h	/^    UINTTOFP_I64_PPCF128,$/;"	e	enum:llvm::RTLIB::Libcall
UINT_TO_FP	CodeGen/ISDOpcodes.h	/^    UINT_TO_FP,$/;"	e	enum:llvm::ISD::NodeType
UIToFPInst	Instructions.h	/^class UIToFPInst : public CastInst {$/;"	c	namespace:llvm
UIntPairVal	ExecutionEngine/GenericValue.h	/^    struct { unsigned int first; unsigned int second; } UIntPairVal;$/;"	m	union:llvm::GenericValue::__anon52	typeref:struct:llvm::GenericValue::__anon52::__anon53
UMULO	CodeGen/ISDOpcodes.h	/^    SMULO, UMULO,$/;"	e	enum:llvm::ISD::NodeType
UMUL_LOHI	CodeGen/ISDOpcodes.h	/^    SMUL_LOHI, UMUL_LOHI,$/;"	e	enum:llvm::ISD::NodeType
UMax	Instructions.h	/^    UMax,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
UMin	Instructions.h	/^    UMin,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
UNABBREV_RECORD	Bitcode/BitCodes.h	/^    UNABBREV_RECORD = 3,$/;"	e	enum:llvm::bitc::FixedAbbrevIDs
UNDEF	CodeGen/ISDOpcodes.h	/^    UNDEF,$/;"	e	enum:llvm::ISD::NodeType
UNE_F32	CodeGen/RuntimeLibcalls.h	/^    UNE_F32,$/;"	e	enum:llvm::RTLIB::Libcall
UNE_F64	CodeGen/RuntimeLibcalls.h	/^    UNE_F64,$/;"	e	enum:llvm::RTLIB::Libcall
UNINDEXED	CodeGen/ISDOpcodes.h	/^    UNINDEXED = 0,$/;"	e	enum:llvm::ISD::MemIndexedMode
UNKNOWN_LIBCALL	CodeGen/RuntimeLibcalls.h	/^    UNKNOWN_LIBCALL$/;"	e	enum:llvm::RTLIB::Libcall
UNUSED_ID1	Bitcode/LLVMBitCodes.h	/^    UNUSED_ID1,$/;"	e	enum:llvm::bitc::BlockIDs
UNUSED_ID2	Bitcode/LLVMBitCodes.h	/^    UNUSED_ID2,$/;"	e	enum:llvm::bitc::BlockIDs
UNWIND_RESUME	CodeGen/RuntimeLibcalls.h	/^    UNWIND_RESUME,$/;"	e	enum:llvm::RTLIB::Libcall
UNW_ChainInfo	Support/Win64EH.h	/^  UNW_ChainInfo = 0x04$/;"	e	enum:llvm::Win64EH::__anon138
UNW_ExceptionHandler	Support/Win64EH.h	/^  UNW_ExceptionHandler = 0x01,$/;"	e	enum:llvm::Win64EH::__anon138
UNW_TerminateHandler	Support/Win64EH.h	/^  UNW_TerminateHandler = 0x02,$/;"	e	enum:llvm::Win64EH::__anon138
UOP_AllocLarge	Support/Win64EH.h	/^  UOP_AllocLarge,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_AllocSmall	Support/Win64EH.h	/^  UOP_AllocSmall,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_PushMachFrame	Support/Win64EH.h	/^  UOP_PushMachFrame$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_PushNonVol	Support/Win64EH.h	/^  UOP_PushNonVol = 0,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SaveNonVol	Support/Win64EH.h	/^  UOP_SaveNonVol,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SaveNonVolBig	Support/Win64EH.h	/^  UOP_SaveNonVolBig,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SaveXMM128	Support/Win64EH.h	/^  UOP_SaveXMM128 = 8,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SaveXMM128Big	Support/Win64EH.h	/^  UOP_SaveXMM128Big,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SetFPReg	Support/Win64EH.h	/^  UOP_SetFPReg,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UO_F32	CodeGen/RuntimeLibcalls.h	/^    UO_F32,$/;"	e	enum:llvm::RTLIB::Libcall
UO_F64	CodeGen/RuntimeLibcalls.h	/^    UO_F64,$/;"	e	enum:llvm::RTLIB::Libcall
UREM	CodeGen/ISDOpcodes.h	/^    ADD, SUB, MUL, SDIV, UDIV, SREM, UREM,$/;"	e	enum:llvm::ISD::NodeType
UREM_I128	CodeGen/RuntimeLibcalls.h	/^    UREM_I128,$/;"	e	enum:llvm::RTLIB::Libcall
UREM_I16	CodeGen/RuntimeLibcalls.h	/^    UREM_I16,$/;"	e	enum:llvm::RTLIB::Libcall
UREM_I32	CodeGen/RuntimeLibcalls.h	/^    UREM_I32,$/;"	e	enum:llvm::RTLIB::Libcall
UREM_I64	CodeGen/RuntimeLibcalls.h	/^    UREM_I64,$/;"	e	enum:llvm::RTLIB::Libcall
UREM_I8	CodeGen/RuntimeLibcalls.h	/^    UREM_I8,$/;"	e	enum:llvm::RTLIB::Libcall
USE	CodeGen/LiveInterval.h	/^        USE   = 1,$/;"	e	enum:llvm::LiveInterval::InstrSlots::__anon40
USELIST_BLOCK_ID	Bitcode/LLVMBitCodes.h	/^    USELIST_BLOCK_ID$/;"	e	enum:llvm::bitc::BlockIDs
USELIST_CODE_ENTRY	Bitcode/LLVMBitCodes.h	/^    USELIST_CODE_ENTRY = 1   \/\/ USELIST_CODE_ENTRY: TBD.$/;"	e	enum:llvm::bitc::UseListCodes
USUBO	CodeGen/ISDOpcodes.h	/^    SSUBO, USUBO,$/;"	e	enum:llvm::ISD::NodeType
UStringSection	MC/MCObjectFileInfo.h	/^  const MCSection *UStringSection;$/;"	m	class:llvm::MCObjectFileInfo
UWTable	Attributes.h	/^    UWTable         = 26,  \/\/\/< Function must be in a unwind table$/;"	e	enum:llvm::Attributes::AttrVal
UnOpInit	TableGen/Record.h	/^  UnOpInit(UnaryOp opc, Init *lhs, RecTy *Type)$/;"	f	class:llvm::UnOpInit
UnOpInit	TableGen/Record.h	/^class UnOpInit : public OpInit {$/;"	c	namespace:llvm
Unary	MC/MCExpr.h	/^    Unary,     \/\/\/< Unary expressions.$/;"	e	enum:llvm::MCExpr::ExprKind
UnaryInstruction	InstrTypes.h	/^  UnaryInstruction(Type *Ty, unsigned iType, Value *V, BasicBlock *IAE)$/;"	f	class:llvm::UnaryInstruction
UnaryInstruction	InstrTypes.h	/^  UnaryInstruction(Type *Ty, unsigned iType, Value *V,$/;"	f	class:llvm::UnaryInstruction
UnaryInstruction	InstrTypes.h	/^class UnaryInstruction : public Instruction {$/;"	c	namespace:llvm
UnaryOp	TableGen/Record.h	/^  enum UnaryOp { CAST, HEAD, TAIL, EMPTY };$/;"	g	class:llvm::UnOpInit
UnarySDNode	CodeGen/SelectionDAGNodes.h	/^  UnarySDNode(unsigned Opc, DebugLoc dl, SDVTList VTs, SDValue X)$/;"	f	class:llvm::UnarySDNode
UnarySDNode	CodeGen/SelectionDAGNodes.h	/^class UnarySDNode : public SDNode {$/;"	c	namespace:llvm
Unavailable	Target/TargetLibraryInfo.h	/^    Unavailable = 0  \/\/ (memset to all zeros)$/;"	e	enum:llvm::TargetLibraryInfo::AvailabilityState
Unbuffered	Support/raw_ostream.h	/^    Unbuffered = 0,$/;"	e	enum:llvm::raw_ostream::BufferKind
Uncounted	Analysis/ProfileDataLoader.h	/^  static const unsigned Uncounted;$/;"	m	class:llvm::ProfileDataLoader
Uncounted	Analysis/ProfileInfoLoader.h	/^  static const unsigned Uncounted;$/;"	m	class:llvm::ProfileInfoLoader
Undef	CodeGen/MachineInstrBuilder.h	/^    Undef          = 0x20,$/;"	e	enum:llvm::RegState::__anon32
UndefVal	Analysis/SparsePropagation.h	/^  LatticeVal UndefVal, OverdefinedVal, UntrackedVal;$/;"	m	class:llvm::AbstractLatticeFunction
UndefValue	Constants.h	/^  explicit UndefValue(Type *T) : Constant(T, UndefValueVal, 0, 0) {}$/;"	f	class:llvm::UndefValue
UndefValue	Constants.h	/^class UndefValue : public Constant {$/;"	c	namespace:llvm
UndefValueVal	Value.h	/^    UndefValueVal,            \/\/ This is an instance of UndefValue$/;"	e	enum:llvm::Value::ValueTy
UndefinedBooleanContent	Target/TargetLowering.h	/^    UndefinedBooleanContent,    \/\/ Only bit 0 counts, the rest can hold garbage.$/;"	e	enum:llvm::TargetLowering::BooleanContent
UndefinedSymbolData	MC/MCMachObjectWriter.h	/^  std::vector<MachSymbolData> UndefinedSymbolData;$/;"	m	class:llvm::MachObjectWriter
UndefinedSymbolsIndex	Object/MachOFormat.h	/^    uint32_t UndefinedSymbolsIndex;$/;"	m	struct:llvm::object::macho::DysymtabLoadCommand
UnderlyingT	Support/type_traits.h	/^  typedef typename remove_reference<T>::type UnderlyingT;$/;"	t	class:llvm::is_integral_or_enum
UnifyFunctionExitNodes	Transforms/Utils/UnifyFunctionExitNodes.h	/^  UnifyFunctionExitNodes() : FunctionPass(ID),$/;"	f	struct:llvm::UnifyFunctionExitNodes
UnifyFunctionExitNodes	Transforms/Utils/UnifyFunctionExitNodes.h	/^struct UnifyFunctionExitNodes : public FunctionPass {$/;"	s	namespace:llvm
UniqueLockFileName	Support/LockFileManager.h	/^  SmallString<128> UniqueLockFileName;$/;"	m	class:llvm::LockFileManager
UniqueSCEVs	Analysis/ScalarEvolution.h	/^    FoldingSet<SCEV> UniqueSCEVs;$/;"	m	class:llvm::ScalarEvolution
UniqueVector	ADT/UniqueVector.h	/^template<class T> class UniqueVector {$/;"	c	namespace:llvm
Unit	Target/TargetRegisterInfo.h	/^  unsigned Unit;$/;"	m	class:llvm::PrintRegUnit
UnitAtATime	DefaultPasses.h	/^    UnitAtATime = 1<<1,$/;"	e	enum:llvm::StandardPass::OptimizationFlags
UnitIncrease	CodeGen/RegisterPressure.h	/^  int UnitIncrease;$/;"	m	struct:llvm::PressureElement
UnitLatencies	CodeGen/ScheduleDAGInstrs.h	/^    bool UnitLatencies;$/;"	m	class:llvm::ScheduleDAGInstrs
Units_	MC/MCInstrItineraries.h	/^  unsigned Units_;   \/\/\/< Choice of functional units$/;"	m	struct:llvm::InstrStage
UniversalBehavior	Analysis/LibCallSemantics.h	/^    AliasAnalysis::ModRefResult UniversalBehavior;$/;"	m	struct:llvm::LibCallFunctionInfo
UniversalMagic	Support/MachO.h	/^      UniversalMagic        = 0xCAFEBABEu, \/\/ FAT_MAGIC$/;"	e	enum:llvm::MachO::__anon126
UniversalMagicSwapped	Support/MachO.h	/^      UniversalMagicSwapped = 0xBEBAFECAu, \/\/ FAT_CIGAM$/;"	e	enum:llvm::MachO::__anon126
Universe	ADT/SparseSet.h	/^  unsigned Universe;$/;"	m	class:llvm::SparseSet
Unknown	Analysis/LazyValueInfo.h	/^    Unknown = -1, False = 0, True = 1$/;"	e	enum:llvm::LazyValueInfo::Tristate
Unknown	Analysis/LibCallSemantics.h	/^      Yes, No, Unknown$/;"	e	enum:llvm::LibCallLocationInfo::LocResult
Unknown	Analysis/LoopDependenceAnalysis.h	/^  enum DependenceResult { Independent = 0, Dependent = 1, Unknown = 2 };$/;"	e	enum:llvm::LoopDependenceAnalysis::DependenceResult
Unknown	Analysis/MemoryDependenceAnalysis.h	/^      Unknown = 0xc$/;"	e	enum:llvm::MemDepResult::OtherType
Unknown	CodeGen/CallingConvLower.h	/^typedef enum { Unknown, Prologue, Call } ParmContext;$/;"	e	enum:llvm::__anon47
UnknownAddressOrSize	Object/ObjectFile.h	/^const uint64_t UnknownAddressOrSize = ~0ULL;$/;"	m	namespace:llvm::object
UnknownArch	ADT/Triple.h	/^    UnknownArch,$/;"	e	enum:llvm::Triple::ArchType
UnknownEnvironment	ADT/Triple.h	/^    UnknownEnvironment,$/;"	e	enum:llvm::Triple::EnvironmentType
UnknownInsts	Analysis/AliasSetTracker.h	/^  std::vector<AssertingVH<Instruction> > UnknownInsts;$/;"	m	class:llvm::AliasSet
UnknownModRefBehavior	Analysis/AliasAnalysis.h	/^    UnknownModRefBehavior = Anywhere | ModRef$/;"	e	enum:llvm::AliasAnalysis::ModRefBehavior
UnknownOS	ADT/Triple.h	/^    UnknownOS,$/;"	e	enum:llvm::Triple::OSType
UnknownSize	Analysis/AliasAnalysis.h	/^  static uint64_t const UnknownSize = ~UINT64_C(0);$/;"	m	class:llvm::AliasAnalysis
UnknownVendor	ADT/Triple.h	/^    UnknownVendor,$/;"	e	enum:llvm::Triple::VendorType
Unknown_FileType	Support/PathV1.h	/^    Unknown_FileType = 0,              \/\/\/< Unrecognized file$/;"	e	enum:llvm::sys::LLVMFileType
UnloadNativeCodeFunc	ExecutionEngine/OProfileWrapper.h	/^  op_unload_native_code_ptr_t     UnloadNativeCodeFunc;$/;"	m	class:llvm::OProfileWrapper
UnmodeledSideEffects	MC/MCInstrDesc.h	/^    UnmodeledSideEffects,$/;"	e	enum:llvm::MCID::__anon69
Unordered	Instructions.h	/^  Unordered = 1,$/;"	e	enum:llvm::AtomicOrdering
UnreachableBlock	Transforms/Utils/UnifyFunctionExitNodes.h	/^  BasicBlock *ReturnBlock, *UnwindBlock, *UnreachableBlock;$/;"	m	struct:llvm::UnifyFunctionExitNodes
UnreachableInst	Instructions.h	/^class UnreachableInst : public TerminatorInst {$/;"	c	namespace:llvm
UnregisterJITEventListener	ExecutionEngine/ExecutionEngine.h	/^  virtual void UnregisterJITEventListener(JITEventListener *) {}$/;"	f	class:llvm::ExecutionEngine
UnrollLoops	DefaultPasses.h	/^    UnrollLoops = 1<<2,$/;"	e	enum:llvm::StandardPass::OptimizationFlags
UnsafeArray	CodeGen/PBQP/Heuristics/Briggs.h	/^        typedef std::vector<unsigned> UnsafeArray;$/;"	t	struct:PBQP::Heuristics::Briggs::EdgeData
UnsafeDegreesArray	CodeGen/PBQP/Heuristics/Briggs.h	/^        typedef std::vector<unsigned> UnsafeDegreesArray;$/;"	t	struct:PBQP::Heuristics::Briggs::NodeData
UnsetInit	TableGen/Record.h	/^  UnsetInit() : Init(IK_UnsetInit) {}$/;"	f	class:llvm::UnsetInit
UnsetInit	TableGen/Record.h	/^class UnsetInit : public Init {$/;"	c	namespace:llvm
UnsignPair	CodeGen/DFAPacketizer.h	/^  typedef std::pair<unsigned, unsigned> UnsignPair;$/;"	t	class:llvm::DFAPacketizer
UnsignedDebugLocPair	CodeGen/MachineModuleInfo.h	/^  typedef std::pair<unsigned, DebugLoc> UnsignedDebugLocPair;$/;"	t	class:llvm::MachineModuleInfo
UnsignedRanges	Analysis/ScalarEvolution.h	/^    DenseMap<const SCEV *, ConstantRange> UnsignedRanges;$/;"	m	class:llvm::ScalarEvolution
UntrackedVal	Analysis/SparsePropagation.h	/^  LatticeVal UndefVal, OverdefinedVal, UntrackedVal;$/;"	m	class:llvm::AbstractLatticeFunction
Untyped	CodeGen/ValueTypes.h	/^      Untyped        =  46,   \/\/ This value takes a register, but has$/;"	e	enum:llvm::MVT::SimpleValueType
Untyped	ExecutionEngine/GenericValue.h	/^    unsigned char   Untyped[8];$/;"	m	union:llvm::GenericValue::__anon52
Unused	Object/COFF.h	/^  char Unused[3];$/;"	m	struct:llvm::object::coff_aux_section_definition
UnwindBlock	Transforms/Utils/UnifyFunctionExitNodes.h	/^  BasicBlock *ReturnBlock, *UnwindBlock, *UnreachableBlock;$/;"	m	struct:llvm::UnifyFunctionExitNodes
UnwindCode	Support/Win64EH.h	/^union UnwindCode {$/;"	u	namespace:llvm::Win64EH
UnwindInfo	Support/Win64EH.h	/^struct UnwindInfo {$/;"	s	namespace:llvm::Win64EH
UnwindOpcodes	Support/Win64EH.h	/^enum UnwindOpcodes {$/;"	g	namespace:llvm::Win64EH
Unwrap	ADT/ValueMap.h	/^  KeyT Unwrap() const { return cast_or_null<KeySansPointerT>(getValPtr()); }$/;"	f	class:llvm::ValueMapCallbackVH
UpdateListeners	CodeGen/SelectionDAG.h	/^  DAGUpdateListener *UpdateListeners;$/;"	m	class:llvm::SelectionDAG
UpdateRegAllocHint	Target/TargetRegisterInfo.h	/^  virtual void UpdateRegAllocHint(unsigned Reg, unsigned NewReg,$/;"	f	class:llvm::TargetRegisterInfo
UpdatedSearchState	ADT/DAGDeltaAlgorithm.h	/^  virtual void UpdatedSearchState(const changeset_ty &Changes,$/;"	f	class:llvm::DAGDeltaAlgorithm
UpdatedSearchState	ADT/DeltaAlgorithm.h	/^  virtual void UpdatedSearchState(const changeset_ty &Changes,$/;"	f	class:llvm::DeltaAlgorithm
Updater	Transforms/Utils/SSAUpdaterImpl.h	/^  UpdaterT *Updater;$/;"	m	class:llvm::SSAUpdaterImpl
Upper	Analysis/DependenceAnalysis.h	/^      const SCEV *Upper[8];$/;"	m	struct:llvm::DependenceAnalysis::BoundInfo
Upper	Support/ConstantRange.h	/^  APInt Lower, Upper;$/;"	m	class:llvm::ConstantRange
Use	Use.h	/^  Use(PrevPtrTag tag) : Val(0) {$/;"	f	class:llvm::Use
Use	Use.h	/^class Use {$/;"	c	namespace:llvm
UseAtomicWrites	Support/raw_ostream.h	/^  bool UseAtomicWrites;$/;"	m	class:llvm::raw_fd_ostream
UseDataRegionDirectives	MC/MCAsmInfo.h	/^    bool UseDataRegionDirectives;$/;"	m	class:llvm::MCAsmInfo
UseIdx	MC/MCSchedule.h	/^  unsigned UseIdx;$/;"	m	struct:llvm::MCReadAdvanceEntry
UseInitArray	CodeGen/TargetLoweringObjectFileImpl.h	/^  bool UseInitArray;$/;"	m	class:llvm::TargetLoweringObjectFileELF
UseList	CodeGen/SelectionDAGNodes.h	/^  SDUse *UseList;$/;"	m	class:llvm::SDNode
UseList	Value.h	/^  Use *UseList;$/;"	m	class:llvm::Value
UseListCodes	Bitcode/LLVMBitCodes.h	/^  enum UseListCodes {$/;"	g	namespace:llvm::bitc
UseLocalStackAllocationBlock	CodeGen/MachineFrameInfo.h	/^  bool UseLocalStackAllocationBlock;$/;"	m	class:llvm::MachineFrameInfo
UseMCJIT	ExecutionEngine/ExecutionEngine.h	/^  bool UseMCJIT;$/;"	m	class:llvm::EngineBuilder
UseUnderscoreLongJmp	Target/TargetLowering.h	/^  bool UseUnderscoreLongJmp;$/;"	m	class:llvm::TargetLowering
UseUnderscoreSetJmp	Target/TargetLowering.h	/^  bool UseUnderscoreSetJmp;$/;"	m	class:llvm::TargetLowering
Used	Target/TargetCallingConv.h	/^    bool Used;$/;"	m	struct:llvm::ISD::InputArg
UsedBytesInTheLastPage	Support/COFF.h	/^    uint16_t UsedBytesInTheLastPage;$/;"	m	struct:llvm::COFF::DOSHeader
UsedFunctions	CodeGen/MachineModuleInfo.h	/^  SmallPtrSet<const Function *, 32> UsedFunctions;$/;"	m	class:llvm::MachineModuleInfo
UsedNames	MC/MCContext.h	/^    StringMap<bool, BumpPtrAllocator&> UsedNames;$/;"	m	class:llvm::MCContext
UsedPhysRegMask	CodeGen/MachineRegisterInfo.h	/^  BitVector UsedPhysRegMask;$/;"	m	class:llvm::MachineRegisterInfo
UsedRegUnits	CodeGen/MachineRegisterInfo.h	/^  BitVector UsedRegUnits;$/;"	m	class:llvm::MachineRegisterInfo
UsedRegs	CodeGen/CallingConvLower.h	/^  SmallVector<uint32_t, 16> UsedRegs;$/;"	m	class:llvm::CCState
UsedTypes	Analysis/FindUsedTypes.h	/^  SetVector<Type *> UsedTypes;$/;"	m	class:llvm::FindUsedTypes
User	CodeGen/SelectionDAGNodes.h	/^  SDNode *User;$/;"	m	class:llvm::SDUse
User	User.h	/^  User(Type *ty, unsigned vty, Use *OpList, unsigned NumOps)$/;"	f	class:llvm::User
User	User.h	/^class User : public Value {$/;"	c	namespace:llvm
UserRef	Use.h	/^  typedef PointerIntPair<User*, 1, unsigned> UserRef;$/;"	t	class:llvm::Use
UserTime	Support/Timer.h	/^  double UserTime;       \/\/ User time elapsed$/;"	m	class:llvm::TimeRecord
Uses	CodeGen/ScheduleDAGInstrs.h	/^    Reg2SUnitsMap Uses;$/;"	m	class:llvm::ScheduleDAGInstrs
UsesCustomInserter	MC/MCInstrDesc.h	/^    UsesCustomInserter,$/;"	e	enum:llvm::MCID::__anon69
UsesELFSectionDirectiveForBSS	MC/MCAsmInfo.h	/^    bool UsesELFSectionDirectiveForBSS;      \/\/ Defaults to false.$/;"	m	class:llvm::MCAsmInfo
UsesMetadata	CodeGen/GCStrategy.h	/^    bool UsesMetadata;         \/\/\/< If set, backend must emit metadata tables.$/;"	m	class:llvm::GCStrategy
UsesVAFloatArgument	CodeGen/MachineModuleInfo.h	/^  bool UsesVAFloatArgument;$/;"	m	class:llvm::MachineModuleInfo
V	Analysis/ScalarEvolutionExpressions.h	/^    ConstantInt *V;$/;"	m	class:llvm::SCEVConstant
V	CodeGen/MachineMemOperand.h	/^  const Value *V;$/;"	m	struct:llvm::MachinePointerInfo
V	CodeGen/SelectionDAGNodes.h	/^  const Value *V;$/;"	m	class:llvm::SrcValueSDNode
V	CodeGen/ValueTypes.h	/^    MVT V;$/;"	m	struct:llvm::EVT
V	PassManagers.h	/^  Value *V;$/;"	m	class:llvm::PassManagerPrettyStackEntry
V	Support/CommandLine.h	/^    OptionValue<DataType> V;$/;"	m	class:llvm::cl::parser::OptionInfo
VAARG	CodeGen/ISDOpcodes.h	/^    VAARG,$/;"	e	enum:llvm::ISD::NodeType
VAArgInst	Instructions.h	/^  VAArgInst(Value *List, Type *Ty, const Twine &NameStr = "",$/;"	f	class:llvm::VAArgInst
VAArgInst	Instructions.h	/^  VAArgInst(Value *List, Type *Ty, const Twine &NameStr,$/;"	f	class:llvm::VAArgInst
VAArgInst	Instructions.h	/^class VAArgInst : public UnaryInstruction {$/;"	c	namespace:llvm
VACOPY	CodeGen/ISDOpcodes.h	/^    VACOPY,$/;"	e	enum:llvm::ISD::NodeType
VAEND	CodeGen/ISDOpcodes.h	/^    VAEND, VASTART,$/;"	e	enum:llvm::ISD::NodeType
VAL	ADT/APInt.h	/^    uint64_t VAL;    \/\/\/< Used to store the <= 64 bits integer value.$/;"	m	union:llvm::APInt::__anon7
VALUETYPE	CodeGen/ISDOpcodes.h	/^    BasicBlock, VALUETYPE, CONDCODE, Register, RegisterMask,$/;"	e	enum:llvm::ISD::NodeType
VALUE_SYMTAB_BLOCK_ID	Bitcode/LLVMBitCodes.h	/^    VALUE_SYMTAB_BLOCK_ID,$/;"	e	enum:llvm::bitc::BlockIDs
VANILLA	CodeGen/MachineRelocation.h	/^    VANILLA$/;"	e	enum:llvm::MachineRelocation::RelocationType
VASTART	CodeGen/ISDOpcodes.h	/^    VAEND, VASTART,$/;"	e	enum:llvm::ISD::NodeType
VBR	Bitcode/BitCodes.h	/^    VBR   = 2,  \/\/ A VBR field where Val specifies the width of each chunk.$/;"	e	enum:llvm::BitCodeAbbrevOp::Encoding
VECTOR_ALIGN	DataLayout.h	/^  VECTOR_ALIGN = 'v',                \/\/\/< Vector type alignment$/;"	e	enum:llvm::AlignTypeEnum
VECTOR_SHUFFLE	CodeGen/ISDOpcodes.h	/^    VECTOR_SHUFFLE,$/;"	e	enum:llvm::ISD::NodeType
VERSYM_HIDDEN	Support/ELF.h	/^  VERSYM_HIDDEN  = 0x8000  \/\/ Hidden bit (non-default version)$/;"	e	enum:llvm::ELF::__anon115
VERSYM_VERSION	Support/ELF.h	/^  VERSYM_VERSION = 0x7fff, \/\/ Version Index mask$/;"	e	enum:llvm::ELF::__anon115
VER_DEF_CURRENT	Support/ELF.h	/^  VER_DEF_CURRENT = 1$/;"	e	enum:llvm::ELF::__anon113
VER_DEF_NONE	Support/ELF.h	/^  VER_DEF_NONE    = 0,$/;"	e	enum:llvm::ELF::__anon113
VER_FLG_BASE	Support/ELF.h	/^  VER_FLG_BASE = 0x1,$/;"	e	enum:llvm::ELF::__anon114
VER_FLG_INFO	Support/ELF.h	/^  VER_FLG_INFO = 0x4$/;"	e	enum:llvm::ELF::__anon114
VER_FLG_WEAK	Support/ELF.h	/^  VER_FLG_WEAK = 0x2,$/;"	e	enum:llvm::ELF::__anon114
VER_NDX_GLOBAL	Support/ELF.h	/^  VER_NDX_GLOBAL = 1,      \/\/ Unversioned global symbol$/;"	e	enum:llvm::ELF::__anon115
VER_NDX_LOCAL	Support/ELF.h	/^  VER_NDX_LOCAL  = 0,      \/\/ Unversioned local symbol$/;"	e	enum:llvm::ELF::__anon115
VER_NEED_CURRENT	Support/ELF.h	/^  VER_NEED_CURRENT = 1$/;"	e	enum:llvm::ELF::__anon116
VER_NEED_NONE	Support/ELF.h	/^  VER_NEED_NONE = 0,$/;"	e	enum:llvm::ELF::__anon116
VExt	CodeGen/CallingConvLower.h	/^    VExt,   \/\/ The value is vector-widened in the location.$/;"	e	enum:llvm::CCValAssign::LocInfo
VH	ADT/ValueMap.h	/^  typedef ValueMapCallbackVH<KeyT, ValueT, Config> VH;$/;"	t	struct:llvm::DenseMapInfo
VIterator	ADT/SmallSet.h	/^  typedef typename SmallVector<T, N>::const_iterator VIterator;$/;"	t	class:llvm::SmallSet
VK_ARM_GOT	MC/MCExpr.h	/^    VK_ARM_GOT,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_ARM_GOTOFF	MC/MCExpr.h	/^    VK_ARM_GOTOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_ARM_GOTTPOFF	MC/MCExpr.h	/^    VK_ARM_GOTTPOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_ARM_PLT	MC/MCExpr.h	/^    VK_ARM_PLT,   \/\/ ARM-style PLT references. i.e., (PLT) instead of @PLT$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_ARM_TARGET1	MC/MCExpr.h	/^    VK_ARM_TARGET1,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_ARM_TLSGD	MC/MCExpr.h	/^    VK_ARM_TLSGD, \/\/   ditto for TLSGD, GOT, GOTOFF, TPOFF and GOTTPOFF$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_ARM_TPOFF	MC/MCExpr.h	/^    VK_ARM_TPOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_DTPOFF	MC/MCExpr.h	/^    VK_DTPOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_GOT	MC/MCExpr.h	/^    VK_GOT,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_GOTNTPOFF	MC/MCExpr.h	/^    VK_GOTNTPOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_GOTOFF	MC/MCExpr.h	/^    VK_GOTOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_GOTPCREL	MC/MCExpr.h	/^    VK_GOTPCREL,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_GOTTPOFF	MC/MCExpr.h	/^    VK_GOTTPOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_INDNTPOFF	MC/MCExpr.h	/^    VK_INDNTPOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Invalid	MC/MCExpr.h	/^    VK_Invalid,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_ABS_HI	MC/MCExpr.h	/^    VK_Mips_ABS_HI,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_ABS_LO	MC/MCExpr.h	/^    VK_Mips_ABS_LO,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_DTPREL_HI	MC/MCExpr.h	/^    VK_Mips_DTPREL_HI,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_DTPREL_LO	MC/MCExpr.h	/^    VK_Mips_DTPREL_LO,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GOT	MC/MCExpr.h	/^    VK_Mips_GOT,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GOT16	MC/MCExpr.h	/^    VK_Mips_GOT16,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GOTTPREL	MC/MCExpr.h	/^    VK_Mips_GOTTPREL,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GOT_CALL	MC/MCExpr.h	/^    VK_Mips_GOT_CALL,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GOT_DISP	MC/MCExpr.h	/^    VK_Mips_GOT_DISP,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GOT_OFST	MC/MCExpr.h	/^    VK_Mips_GOT_OFST,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GOT_PAGE	MC/MCExpr.h	/^    VK_Mips_GOT_PAGE,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GPOFF_HI	MC/MCExpr.h	/^    VK_Mips_GPOFF_HI,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GPOFF_LO	MC/MCExpr.h	/^    VK_Mips_GPOFF_LO,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_GPREL	MC/MCExpr.h	/^    VK_Mips_GPREL,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_HIGHER	MC/MCExpr.h	/^    VK_Mips_HIGHER,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_HIGHEST	MC/MCExpr.h	/^    VK_Mips_HIGHEST$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_TLSGD	MC/MCExpr.h	/^    VK_Mips_TLSGD,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_TLSLDM	MC/MCExpr.h	/^    VK_Mips_TLSLDM,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_TPREL_HI	MC/MCExpr.h	/^    VK_Mips_TPREL_HI,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_Mips_TPREL_LO	MC/MCExpr.h	/^    VK_Mips_TPREL_LO,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_NTPOFF	MC/MCExpr.h	/^    VK_NTPOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_None	MC/MCExpr.h	/^    VK_None,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_PLT	MC/MCExpr.h	/^    VK_PLT,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_PPC_DARWIN_HA16	MC/MCExpr.h	/^    VK_PPC_DARWIN_HA16,  \/\/ ha16(symbol)$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_PPC_DARWIN_LO16	MC/MCExpr.h	/^    VK_PPC_DARWIN_LO16,  \/\/ lo16(symbol)$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_PPC_GAS_HA16	MC/MCExpr.h	/^    VK_PPC_GAS_HA16,     \/\/ symbol@ha$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_PPC_GAS_LO16	MC/MCExpr.h	/^    VK_PPC_GAS_LO16,      \/\/ symbol@l$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_PPC_TOC	MC/MCExpr.h	/^    VK_PPC_TOC,          \/\/ TOC base$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_PPC_TOC_ENTRY	MC/MCExpr.h	/^    VK_PPC_TOC_ENTRY,    \/\/ TOC entry$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_PPC_TPREL16_HA	MC/MCExpr.h	/^    VK_PPC_TPREL16_HA,   \/\/ symbol@tprel@ha$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_PPC_TPREL16_LO	MC/MCExpr.h	/^    VK_PPC_TPREL16_LO,   \/\/ symbol@tprel@l$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_SECREL	MC/MCExpr.h	/^    VK_SECREL,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_TLSGD	MC/MCExpr.h	/^    VK_TLSGD,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_TLSLD	MC/MCExpr.h	/^    VK_TLSLD,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_TLSLDM	MC/MCExpr.h	/^    VK_TLSLDM,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_TLVP	MC/MCExpr.h	/^    VK_TLVP,      \/\/ Mach-O thread local variable relocation$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VK_TPOFF	MC/MCExpr.h	/^    VK_TPOFF,$/;"	e	enum:llvm::MCSymbolRefExpr::VariantKind
VLIW	Target/TargetLowering.h	/^      VLIW              \/\/ Scheduling for VLIW targets.$/;"	e	enum:llvm::Sched::Preference
VLIWPacketizerList	CodeGen/DFAPacketizer.h	/^class VLIWPacketizerList {$/;"	c	namespace:llvm
VLIWScheduler	CodeGen/DFAPacketizer.h	/^  DefaultVLIWScheduler *VLIWScheduler;$/;"	m	class:llvm::VLIWPacketizerList
VMAddress	Object/MachOFormat.h	/^    uint32_t VMAddress;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
VMAddress	Object/MachOFormat.h	/^    uint64_t VMAddress;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
VMContext	DIBuilder.h	/^    LLVMContext & VMContext;$/;"	m	class:llvm::DIBuilder
VMSize	Object/MachOFormat.h	/^    uint32_t VMSize;$/;"	m	struct:llvm::object::macho::SegmentLoadCommand
VMSize	Object/MachOFormat.h	/^    uint64_t VMSize;$/;"	m	struct:llvm::object::macho::Segment64LoadCommand
VNInfo	CodeGen/LiveInterval.h	/^    VNInfo(unsigned i, SlotIndex d)$/;"	f	class:llvm::VNInfo
VNInfo	CodeGen/LiveInterval.h	/^    VNInfo(unsigned i, const VNInfo &orig)$/;"	f	class:llvm::VNInfo
VNInfo	CodeGen/LiveInterval.h	/^  class VNInfo {$/;"	c	namespace:llvm
VNInfoAllocator	CodeGen/LiveIntervalAnalysis.h	/^    VNInfo::Allocator VNInfoAllocator;$/;"	m	class:llvm::LiveIntervals
VNInfoAllocator	CodeGen/LiveStackAnalysis.h	/^    VNInfo::Allocator VNInfoAllocator;$/;"	m	class:llvm::LiveStacks
VNInfoList	CodeGen/LiveInterval.h	/^    typedef SmallVector<VNInfo*,4> VNInfoList;$/;"	t	class:llvm::LiveInterval
VP	Support/ValueHandle.h	/^  PointerIntPair<Value*, 2> VP;$/;"	m	class:llvm::ValueHandleBase
VR	CodeGen/MachineSSAUpdater.h	/^  unsigned VR;$/;"	m	class:llvm::MachineSSAUpdater
VR	Support/PatternMatch.h	/^  Class *&VR;$/;"	m	struct:llvm::PatternMatch::bind_ty
VR	Support/PatternMatch.h	/^  uint64_t &VR;$/;"	m	struct:llvm::PatternMatch::bind_const_intval_ty
VRC	CodeGen/MachineSSAUpdater.h	/^  const TargetRegisterClass *VRC;$/;"	m	class:llvm::MachineSSAUpdater
VRM	CodeGen/LiveRangeEdit.h	/^  VirtRegMap *VRM;$/;"	m	class:llvm::LiveRangeEdit
VReg2Node	CodeGen/RegAllocPBQP.h	/^    typedef DenseMap<unsigned, PBQP::Graph::NodeItr> VReg2Node;$/;"	t	class:llvm::PBQPRAProblem
VReg2SUnit	CodeGen/ScheduleDAGInstrs.h	/^    VReg2SUnit(unsigned reg, SUnit *su): VirtReg(reg), SU(su) {}$/;"	f	struct:llvm::VReg2SUnit
VReg2SUnit	CodeGen/ScheduleDAGInstrs.h	/^  struct VReg2SUnit {$/;"	s	namespace:llvm
VReg2SUnitMap	CodeGen/ScheduleDAGInstrs.h	/^  typedef SparseSet<VReg2SUnit, VirtReg2IndexFunctor> VReg2SUnitMap;$/;"	t	namespace:llvm
VRegDefs	CodeGen/ScheduleDAGInstrs.h	/^    VReg2SUnitMap VRegDefs;$/;"	m	class:llvm::ScheduleDAGInstrs
VRegInfo	CodeGen/MachineRegisterInfo.h	/^             VirtReg2IndexFunctor> VRegInfo;$/;"	m	class:llvm::MachineRegisterInfo
VSELECT	CodeGen/ISDOpcodes.h	/^    VSELECT,$/;"	e	enum:llvm::ISD::NodeType
VST_CODE_BBENTRY	Bitcode/LLVMBitCodes.h	/^    VST_CODE_BBENTRY = 2   \/\/ VST_BBENTRY: [bbid, namechar x N]$/;"	e	enum:llvm::bitc::ValueSymtabCodes
VST_CODE_ENTRY	Bitcode/LLVMBitCodes.h	/^    VST_CODE_ENTRY   = 1,  \/\/ VST_ENTRY: [valid, namechar x N]$/;"	e	enum:llvm::bitc::ValueSymtabCodes
VT	Target/TargetCallingConv.h	/^    MVT VT;$/;"	m	struct:llvm::ISD::InputArg
VT	Target/TargetCallingConv.h	/^    MVT VT;$/;"	m	struct:llvm::ISD::OutputArg
VTList	CodeGen/SelectionDAG.h	/^  std::vector<SDVTList> VTList;$/;"	m	class:llvm::SelectionDAG
VTSDNode	CodeGen/SelectionDAGNodes.h	/^  explicit VTSDNode(EVT VT)$/;"	f	class:llvm::VTSDNode
VTSDNode	CodeGen/SelectionDAGNodes.h	/^class VTSDNode : public SDNode {$/;"	c	namespace:llvm
VTTI	TargetTransformInfo.h	/^  const VectorTargetTransformInfo *VTTI;$/;"	m	class:llvm::TargetTransformInfo
VTs	CodeGen/SelectionDAGNodes.h	/^  const EVT *VTs;$/;"	m	struct:llvm::SDVTList
VTs	Target/TargetRegisterInfo.h	/^  const vt_iterator VTs;$/;"	m	class:llvm::TargetRegisterClass
VTy	Value.h	/^  Type *VTy;$/;"	m	class:llvm::Value
Val	ADT/PointerUnion.h	/^      ValTy Val;$/;"	m	struct:llvm::PointerUnion3::IsInnerUnion
Val	ADT/PointerUnion.h	/^      ValTy Val;$/;"	m	struct:llvm::PointerUnion3::IsPT3
Val	ADT/PointerUnion.h	/^    ValTy Val;$/;"	m	class:llvm::PointerUnion3
Val	ADT/PointerUnion.h	/^    ValTy Val;$/;"	m	class:llvm::PointerUnion4
Val	ADT/ScopedHashTable.h	/^  V Val;$/;"	m	class:llvm::ScopedHashTableVal
Val	ADT/SmallPtrSet.h	/^    Val = RoundUpToPowerOfTwo<(N|(N-1)) + 1>::Val$/;"	e	enum:llvm::RoundUpToPowerOfTwoH::__anon14
Val	ADT/SmallPtrSet.h	/^  enum { Val = N };$/;"	e	enum:llvm::RoundUpToPowerOfTwoH::__anon13
Val	ADT/SmallPtrSet.h	/^  enum { Val = RoundUpToPowerOfTwoH<N, (N&(N-1)) == 0>::Val };$/;"	e	enum:llvm::RoundUpToPowerOfTwo::__anon15
Val	ADT/TinyPtrVector.h	/^  llvm::PointerUnion<EltTy, VecTy*> Val;$/;"	m	class:llvm::TinyPtrVector
Val	Analysis/AliasSetTracker.h	/^    Value *Val;  \/\/ The pointer this record corresponds to.$/;"	m	class:llvm::AliasSet::PointerRec
Val	Bitcode/BitCodes.h	/^  uint64_t Val;           \/\/ A literal value or data for an encoding.$/;"	m	class:llvm::BitCodeAbbrevOp
Val	CodeGen/MachineConstantPool.h	/^  } Val;$/;"	m	class:llvm::MachineConstantPoolEntry	typeref:union:llvm::MachineConstantPoolEntry::__anon44
Val	CodeGen/MachineOperand.h	/^      } Val;$/;"	m	struct:llvm::MachineOperand::__anon36::__anon38	typeref:union:llvm::MachineOperand::__anon36::__anon38::__anon39
Val	CodeGen/SelectionDAGNodes.h	/^  SDValue Val;$/;"	m	class:llvm::SDUse
Val	CodeGen/SelectionDAGNodes.h	/^  } Val;$/;"	m	class:llvm::ConstantPoolSDNode	typeref:union:llvm::ConstantPoolSDNode::__anon31
Val	Constants.h	/^  APFloat Val;$/;"	m	class:llvm::ConstantFP
Val	Constants.h	/^  APInt Val;$/;"	m	class:llvm::ConstantInt
Val	MC/MCRegisterInfo.h	/^    uint16_t Val;$/;"	m	class:llvm::MCRegisterInfo::DiffListIterator
Val	Module.h	/^    Value *Val;$/;"	m	struct:llvm::Module::ModuleFlagEntry
Val	Support/Format.h	/^  T Val;$/;"	m	class:llvm::format_object1
Val	Support/PatternMatch.h	/^  const Value *Val;$/;"	m	struct:llvm::PatternMatch::specificval_ty
Val	Support/Registry.h	/^      const entry& Val;$/;"	m	class:llvm::Registry::node
Val	TableGen/Record.h	/^  Init *Val;$/;"	m	class:llvm::DagInit
Val	Use.h	/^  Value *Val;$/;"	m	class:llvm::Use
Val1	Support/Format.h	/^  T1 Val1;$/;"	m	class:llvm::format_object2
Val1	Support/Format.h	/^  T1 Val1;$/;"	m	class:llvm::format_object3
Val1	Support/Format.h	/^  T1 Val1;$/;"	m	class:llvm::format_object4
Val1	Support/Format.h	/^  T1 Val1;$/;"	m	class:llvm::format_object5
Val2	Support/Format.h	/^  T2 Val2;$/;"	m	class:llvm::format_object2
Val2	Support/Format.h	/^  T2 Val2;$/;"	m	class:llvm::format_object3
Val2	Support/Format.h	/^  T2 Val2;$/;"	m	class:llvm::format_object4
Val2	Support/Format.h	/^  T2 Val2;$/;"	m	class:llvm::format_object5
Val3	Support/Format.h	/^  T3 Val3;$/;"	m	class:llvm::format_object3
Val3	Support/Format.h	/^  T3 Val3;$/;"	m	class:llvm::format_object4
Val3	Support/Format.h	/^  T3 Val3;$/;"	m	class:llvm::format_object5
Val4	Support/Format.h	/^  T4 Val4;$/;"	m	class:llvm::format_object4
Val4	Support/Format.h	/^  T4 Val4;$/;"	m	class:llvm::format_object5
Val5	Support/Format.h	/^  T5 Val5;$/;"	m	class:llvm::format_object5
ValIndexOf	ADT/SparseSet.h	/^  SparseSetValFunctor<KeyT, ValueT, KeyFunctorT> ValIndexOf;$/;"	m	class:llvm::SparseSet
ValLessThan	Support/PassNameParser.h	/^  static int ValLessThan(const void *VT1, const void *VT2) {$/;"	f	class:llvm::PassNameParser
ValName	TableGen/Record.h	/^  std::string ValName;$/;"	m	class:llvm::DagInit
ValNo	CodeGen/CallingConvLower.h	/^  unsigned ValNo;$/;"	m	class:llvm::CCValAssign
ValSymTab	Module.h	/^  ValueSymbolTable *ValSymTab;    \/\/\/< Symbol table for values$/;"	m	class:llvm::Module
ValT	Transforms/Utils/SSAUpdaterImpl.h	/^  typedef typename Traits::ValT ValT;$/;"	t	class:llvm::SSAUpdaterImpl
ValTy	ADT/PointerUnion.h	/^    typedef PointerUnion<InnerUnion, PT3> ValTy;$/;"	t	class:llvm::PointerUnion3
ValTy	ADT/PointerUnion.h	/^    typedef PointerUnion<InnerUnion1, InnerUnion2> ValTy;$/;"	t	class:llvm::PointerUnion4
ValTy	ADT/ScopedHashTable.h	/^  typedef ScopedHashTableVal<K, V> ValTy;$/;"	t	class:llvm::ScopedHashTable
ValVT	CodeGen/CallingConvLower.h	/^  MVT ValVT;$/;"	m	class:llvm::CCValAssign
Valid	Support/CommandLine.h	/^  bool Valid;$/;"	m	class:llvm::cl::OptionValueCopy
Value	ADT/PointerIntPair.h	/^  intptr_t Value;$/;"	m	class:llvm::PointerIntPair
Value	ADT/Statistic.h	/^  volatile llvm::sys::cas_flag Value;$/;"	m	class:llvm::Statistic
Value	Analysis/MemoryDependenceAnalysis.h	/^    PairTy Value;$/;"	m	class:llvm::MemDepResult
Value	CodeGen/SelectionDAGNodes.h	/^  const ConstantFP *Value;$/;"	m	class:llvm::ConstantFPSDNode
Value	CodeGen/SelectionDAGNodes.h	/^  const ConstantInt *Value;$/;"	m	class:llvm::ConstantSDNode
Value	MC/MCAssembler.h	/^  const MCExpr *Value;$/;"	m	class:llvm::MCLEBFragment
Value	MC/MCAssembler.h	/^  int64_t Value;$/;"	m	class:llvm::MCAlignFragment
Value	MC/MCAssembler.h	/^  int64_t Value;$/;"	m	class:llvm::MCFillFragment
Value	MC/MCAssembler.h	/^  int8_t Value;$/;"	m	class:llvm::MCOrgFragment
Value	MC/MCExpr.h	/^  int64_t Value;$/;"	m	class:llvm::MCConstantExpr
Value	MC/MCFixup.h	/^  const MCExpr *Value;$/;"	m	class:llvm::MCFixup
Value	MC/MCSymbol.h	/^    const MCExpr *Value;$/;"	m	class:llvm::MCSymbol
Value	MC/SubtargetFeature.h	/^  const void *Value;                    \/\/ K-V pointer value$/;"	m	struct:llvm::SubtargetInfoKV
Value	MC/SubtargetFeature.h	/^  uint64_t Value;                       \/\/ K-V integer value$/;"	m	struct:llvm::SubtargetFeatureKV
Value	Object/COFF.h	/^  support::ulittle32_t Value;$/;"	m	struct:llvm::object::coff_symbol
Value	Object/MachOFormat.h	/^    uint32_t Value;$/;"	m	struct:llvm::object::macho::SymbolTableEntry
Value	Object/MachOFormat.h	/^    uint64_t Value;$/;"	m	struct:llvm::object::macho::Symbol64TableEntry
Value	Support/COFF.h	/^    uint32_t Value;$/;"	m	struct:llvm::COFF::symbol
Value	Support/CommandLine.h	/^  DataType Value;$/;"	m	class:llvm::cl::OptionValueCopy
Value	Support/CommandLine.h	/^  DataType Value;$/;"	m	class:llvm::cl::opt_storage
Value	Support/Endian.h	/^  uint8_t Value[sizeof(value_type)];$/;"	m	class:llvm::support::detail::packed_endian_specific_integral
Value	Support/Endian.h	/^  value_type Value;$/;"	m	class:llvm::support::detail::packed_endian_specific_integral
Value	Support/YAMLParser.h	/^  Node *Value;$/;"	m	class:llvm::yaml::KeyValueNode
Value	Support/YAMLParser.h	/^  StringRef Value;$/;"	m	class:llvm::yaml::ScalarNode
Value	TableGen/Record.h	/^  Init *Value;$/;"	m	class:llvm::RecordVal
Value	TableGen/Record.h	/^  bool Value;$/;"	m	class:llvm::BitInit
Value	TableGen/Record.h	/^  int64_t Value;$/;"	m	class:llvm::IntInit
Value	TableGen/Record.h	/^  std::string Value;$/;"	m	class:llvm::StringInit
Value	Value.h	/^class Value {$/;"	c	namespace:llvm
ValueDisallowed	Support/CommandLine.h	/^  ValueDisallowed = 0x03       \/\/ A value may not be specified (for flags)$/;"	e	enum:llvm::cl::ValueExpected
ValueExpected	Support/CommandLine.h	/^enum ValueExpected {           \/\/ Is a value required for the option?$/;"	g	namespace:llvm::cl
ValueExprMap	Analysis/ScalarEvolution.h	/^    ValueExprMapType ValueExprMap;$/;"	m	class:llvm::ScalarEvolution
ValueExprMapType	Analysis/ScalarEvolution.h	/^      ValueExprMapType;$/;"	t	class:llvm::ScalarEvolution
ValueFn	DIBuilder.h	/^    Function *ValueFn;       \/\/ llvm.dbg.value$/;"	m	class:llvm::DIBuilder
ValueHandleBase	Support/ValueHandle.h	/^  ValueHandleBase(HandleBaseKind Kind, Value *V)$/;"	f	class:llvm::ValueHandleBase
ValueHandleBase	Support/ValueHandle.h	/^  ValueHandleBase(HandleBaseKind Kind, const ValueHandleBase &RHS)$/;"	f	class:llvm::ValueHandleBase
ValueHandleBase	Support/ValueHandle.h	/^  explicit ValueHandleBase(HandleBaseKind Kind)$/;"	f	class:llvm::ValueHandleBase
ValueHandleBase	Support/ValueHandle.h	/^class ValueHandleBase {$/;"	c	namespace:llvm
ValueIsLoadPair	Analysis/MemoryDependenceAnalysis.h	/^    typedef PointerIntPair<const Value*, 1, bool> ValueIsLoadPair;$/;"	t	class:llvm::MemoryDependenceAnalysis
ValueList	CodeGen/SelectionDAGNodes.h	/^  const EVT *ValueList;$/;"	m	class:llvm::SDNode
ValueMap	ADT/ValueMap.h	/^  explicit ValueMap(const ExtraData &Data, unsigned NumInitBuckets = 64)$/;"	f	class:llvm::ValueMap
ValueMap	ADT/ValueMap.h	/^  explicit ValueMap(unsigned NumInitBuckets = 64)$/;"	f	class:llvm::ValueMap
ValueMap	ADT/ValueMap.h	/^class ValueMap {$/;"	c	namespace:llvm
ValueMap	CodeGen/FunctionLoweringInfo.h	/^  DenseMap<const Value*, unsigned> ValueMap;$/;"	m	class:llvm::FunctionLoweringInfo
ValueMap	ValueSymbolTable.h	/^  typedef StringMap<Value*> ValueMap;$/;"	t	class:llvm::ValueSymbolTable
ValueMapCVH	ADT/ValueMap.h	/^  typedef ValueMapCallbackVH<KeyT, ValueT, Config> ValueMapCVH;$/;"	t	class:llvm::ValueMap
ValueMapCallbackVH	ADT/ValueMap.h	/^  ValueMapCallbackVH(KeyT Key, ValueMapT *Map)$/;"	f	class:llvm::ValueMapCallbackVH
ValueMapCallbackVH	ADT/ValueMap.h	/^class ValueMapCallbackVH : public CallbackVH {$/;"	c	namespace:llvm
ValueMapConfig	ADT/ValueMap.h	/^struct ValueMapConfig {$/;"	s	namespace:llvm
ValueMapConstIterator	ADT/ValueMap.h	/^  ValueMapConstIterator() : I() {}$/;"	f	class:llvm::ValueMapConstIterator
ValueMapConstIterator	ADT/ValueMap.h	/^  ValueMapConstIterator(BaseT I) : I(I) {}$/;"	f	class:llvm::ValueMapConstIterator
ValueMapConstIterator	ADT/ValueMap.h	/^  ValueMapConstIterator(ValueMapIterator<DenseMapT, KeyT> Other)$/;"	f	class:llvm::ValueMapConstIterator
ValueMapConstIterator	ADT/ValueMap.h	/^class ValueMapConstIterator :$/;"	c	namespace:llvm
ValueMapIterator	ADT/ValueMap.h	/^  ValueMapIterator() : I() {}$/;"	f	class:llvm::ValueMapIterator
ValueMapIterator	ADT/ValueMap.h	/^  ValueMapIterator(BaseT I) : I(I) {}$/;"	f	class:llvm::ValueMapIterator
ValueMapIterator	ADT/ValueMap.h	/^class ValueMapIterator :$/;"	c	namespace:llvm
ValueMapT	ADT/ValueMap.h	/^  typedef ValueMap<KeyT, ValueT, Config> ValueMapT;$/;"	t	class:llvm::ValueMapCallbackVH
ValueMapTypeRemapper	Transforms/Utils/ValueMapper.h	/^  class ValueMapTypeRemapper {$/;"	c	namespace:llvm
ValueName	Value.h	/^typedef StringMapEntry<Value*> ValueName;$/;"	t	namespace:llvm
ValueOptional	Support/CommandLine.h	/^  ValueOptional   = 0x01,      \/\/ The value can appear... or not$/;"	e	enum:llvm::cl::ValueExpected
ValueRequired	Support/CommandLine.h	/^  ValueRequired   = 0x02,      \/\/ The value is required to appear!$/;"	e	enum:llvm::cl::ValueExpected
ValueSet	Transforms/Utils/CodeExtractor.h	/^    typedef SetVector<Value *> ValueSet;$/;"	t	class:llvm::CodeExtractor
ValueSize	MC/MCAssembler.h	/^  unsigned ValueSize;$/;"	m	class:llvm::MCAlignFragment
ValueSize	MC/MCAssembler.h	/^  unsigned ValueSize;$/;"	m	class:llvm::MCFillFragment
ValueState	Analysis/SparsePropagation.h	/^  DenseMap<Value*, LatticeVal> ValueState;  \/\/ The state each value is in.$/;"	m	class:llvm::SparseSolver
ValueStr	Support/CommandLine.h	/^  const char *ValueStr;   \/\/ String describing what the value of this option is$/;"	m	class:llvm::cl::Option
ValueSymbolTable	ValueSymbolTable.h	/^  ValueSymbolTable() : vmap(0), LastUnique(0) {}$/;"	f	class:llvm::ValueSymbolTable
ValueSymbolTable	ValueSymbolTable.h	/^class ValueSymbolTable {$/;"	c	namespace:llvm
ValueSymtabCodes	Bitcode/LLVMBitCodes.h	/^  enum ValueSymtabCodes {$/;"	g	namespace:llvm::bitc
ValueT	ADT/ValueMap.h	/^  typedef typename DenseMapT::mapped_type ValueT;$/;"	t	class:llvm::ValueMapConstIterator
ValueT	ADT/ValueMap.h	/^  typedef typename DenseMapT::mapped_type ValueT;$/;"	t	class:llvm::ValueMapIterator
ValueToValueMapTy	Transforms/Utils/ValueMapper.h	/^  typedef ValueMap<const Value *, WeakVH> ValueToValueMapTy;$/;"	t	namespace:llvm
ValueTy	Value.h	/^  enum ValueTy {$/;"	g	class:llvm::Value
ValueType	ADT/IntervalMap.h	/^  typedef ValT ValueType;$/;"	t	class:llvm::IntervalMap
ValueType	CodeGen/SelectionDAGNodes.h	/^  EVT ValueType;$/;"	m	class:llvm::VTSDNode
ValueTypeActionImpl	Target/TargetLowering.h	/^    ValueTypeActionImpl() {$/;"	f	class:llvm::TargetLowering::ValueTypeActionImpl
ValueTypeActionImpl	Target/TargetLowering.h	/^  class ValueTypeActionImpl {$/;"	c	class:llvm::TargetLowering
ValueTypeActions	Target/TargetLowering.h	/^    uint8_t ValueTypeActions[MVT::LAST_VALUETYPE];$/;"	m	class:llvm::TargetLowering::ValueTypeActionImpl
ValueTypeActions	Target/TargetLowering.h	/^  ValueTypeActionImpl ValueTypeActions;$/;"	m	class:llvm::TargetLowering
ValueTypeNodes	CodeGen/SelectionDAG.h	/^  std::vector<SDNode*> ValueTypeNodes;$/;"	m	class:llvm::SelectionDAG
ValueTypeProxy	ADT/ValueMap.h	/^  struct ValueTypeProxy {$/;"	s	class:llvm::ValueMapConstIterator
ValueTypeProxy	ADT/ValueMap.h	/^  struct ValueTypeProxy {$/;"	s	class:llvm::ValueMapIterator
Values	MC/MCDwarf.h	/^    std::vector<char> Values;$/;"	m	class:llvm::MCCFIInstruction
Values	Support/CommandLine.h	/^  SmallVector<OptionInfo, 8> Values;$/;"	m	class:llvm::cl::parser
Values	Support/CommandLine.h	/^  SmallVector<std::pair<const char *, std::pair<int, const char *> >,4> Values;$/;"	m	class:llvm::cl::ValuesClass
Values	TableGen/Record.h	/^  std::vector<Init*> Values;$/;"	m	class:llvm::ListInit
Values	TableGen/Record.h	/^  std::vector<RecordVal> Values;$/;"	m	class:llvm::Record
ValuesAtScopes	Analysis/ScalarEvolution.h	/^             std::map<const Loop *, const SCEV *> > ValuesAtScopes;$/;"	m	class:llvm::ScalarEvolution
ValuesClass	Support/CommandLine.h	/^  ValuesClass(const char *EnumName, DataType Val, const char *Desc,$/;"	f	class:llvm::cl::ValuesClass
ValuesClass	Support/CommandLine.h	/^class ValuesClass {$/;"	c	namespace:llvm::cl
VarBitInit	TableGen/Record.h	/^  VarBitInit(TypedInit *T, unsigned B) : Init(IK_VarBitInit), TI(T), Bit(B) {$/;"	f	class:llvm::VarBitInit
VarBitInit	TableGen/Record.h	/^class VarBitInit : public Init {$/;"	c	namespace:llvm
VarInfo	CodeGen/LiveVariables.h	/^  struct VarInfo {$/;"	s	class:llvm::LiveVariables
VarInit	TableGen/Record.h	/^  explicit VarInit(Init *VN, RecTy *T)$/;"	f	class:llvm::VarInit
VarInit	TableGen/Record.h	/^  explicit VarInit(const std::string &VN, RecTy *T)$/;"	f	class:llvm::VarInit
VarInit	TableGen/Record.h	/^class VarInit : public TypedInit {$/;"	c	namespace:llvm
VarListElementInit	TableGen/Record.h	/^  VarListElementInit(TypedInit *T, unsigned E)$/;"	f	class:llvm::VarListElementInit
VarListElementInit	TableGen/Record.h	/^class VarListElementInit : public TypedInit {$/;"	c	namespace:llvm
VarName	TableGen/Record.h	/^  Init *VarName;$/;"	m	class:llvm::VarInit
VariableDbgInfo	CodeGen/MachineModuleInfo.h	/^  VariableDbgInfoMapTy VariableDbgInfo;$/;"	m	class:llvm::MachineModuleInfo
VariableDbgInfoMapTy	CodeGen/MachineModuleInfo.h	/^    VariableDbgInfoMapTy;$/;"	t	class:llvm::MachineModuleInfo
Variadic	MC/MCInstrDesc.h	/^    Variadic = 0,$/;"	e	enum:llvm::MCID::__anon69
VariadicFunction	ADT/VariadicFunction.h	/^struct VariadicFunction {$/;"	s	namespace:llvm
VariadicFunction1	ADT/VariadicFunction.h	/^struct VariadicFunction1 {$/;"	s	namespace:llvm
VariadicFunction2	ADT/VariadicFunction.h	/^struct VariadicFunction2 {$/;"	s	namespace:llvm
VariadicFunction3	ADT/VariadicFunction.h	/^struct VariadicFunction3 {$/;"	s	namespace:llvm
VariadicOperandTraits	OperandTraits.h	/^struct VariadicOperandTraits {$/;"	s	namespace:llvm
Variant	MC/MCSection.h	/^    SectionVariant Variant;$/;"	m	class:llvm::MCSection
VariantKind	MC/MCExpr.h	/^  enum VariantKind {$/;"	g	class:llvm::MCSymbolRefExpr
VariantNumMicroOps	MC/MCSchedule.h	/^  static const unsigned short VariantNumMicroOps = UINT16_MAX - 1;$/;"	m	struct:llvm::MCSchedClassDesc
Vec	ADT/PackedVector.h	/^    PackedVector &Vec;$/;"	m	class:llvm::PackedVector::reference
VecTy	ADT/TinyPtrVector.h	/^  typedef llvm::SmallVector<EltTy, 4> VecTy;$/;"	t	class:llvm::TinyPtrVector
Vector	ADT/FoldingSet.h	/^  VectorT Vector;$/;"	m	class:llvm::FoldingSetVector
Vector	ADT/MapVector.h	/^  VectorType Vector;$/;"	m	class:llvm::MapVector
Vector	ADT/SmallSet.h	/^  SmallVector<T, N> Vector;$/;"	m	class:llvm::SmallSet
Vector	ADT/UniqueVector.h	/^  std::vector<T> Vector;$/;"	m	class:llvm::UniqueVector
Vector	CodeGen/PBQP/Math.h	/^    Vector(const Vector &v) :$/;"	f	class:PBQP::Vector
Vector	CodeGen/PBQP/Math.h	/^    Vector(unsigned length, PBQPNum initVal) :$/;"	f	class:PBQP::Vector
Vector	CodeGen/PBQP/Math.h	/^    explicit Vector(unsigned length) :$/;"	f	class:PBQP::Vector
Vector	CodeGen/PBQP/Math.h	/^class Vector {$/;"	c	namespace:PBQP
Vector	Intrinsics.h	/^      Integer, Vector, Pointer, Struct,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
VectorBits	Transforms/Vectorize.h	/^  unsigned VectorBits;$/;"	m	struct:llvm::VectorizeConfig
VectorMaskSelect	Target/TargetLowering.h	/^    VectorMaskSelect      \/\/ The target supports vector selects with a vector$/;"	e	enum:llvm::TargetLowering::SelectSupportKind
VectorTargetTransformImpl	Target/TargetTransformImpl.h	/^class VectorTargetTransformImpl : public VectorTargetTransformInfo { };$/;"	c	namespace:llvm
VectorTargetTransformInfo	TargetTransformInfo.h	/^class VectorTargetTransformInfo {$/;"	c	namespace:llvm
VectorTyID	Type.h	/^    VectorTyID,      \/\/\/< 15: SIMD 'packed' format, or other vector type$/;"	e	enum:llvm::Type::TypeID
VectorType	DerivedTypes.h	/^class VectorType : public SequentialType {$/;"	c	namespace:llvm
VectorType	PassAnalysisSupport.h	/^  typedef SmallVector<AnalysisID, 32> VectorType;$/;"	t	class:llvm::AnalysisUsage
Vector_Width	Intrinsics.h	/^      unsigned Vector_Width;$/;"	m	union:llvm::Intrinsic::IITDescriptor::__anon60
Vectorize	Transforms/IPO/PassManagerBuilder.h	/^  bool Vectorize;$/;"	m	class:llvm::PassManagerBuilder
VectorizeBools	Transforms/Vectorize.h	/^  bool VectorizeBools;$/;"	m	struct:llvm::VectorizeConfig
VectorizeCasts	Transforms/Vectorize.h	/^  bool VectorizeCasts;$/;"	m	struct:llvm::VectorizeConfig
VectorizeCmp	Transforms/Vectorize.h	/^  bool VectorizeCmp;$/;"	m	struct:llvm::VectorizeConfig
VectorizeConfig	Transforms/Vectorize.h	/^struct VectorizeConfig {$/;"	s	namespace:llvm
VectorizeFMA	Transforms/Vectorize.h	/^  bool VectorizeFMA;$/;"	m	struct:llvm::VectorizeConfig
VectorizeFloats	Transforms/Vectorize.h	/^  bool VectorizeFloats;$/;"	m	struct:llvm::VectorizeConfig
VectorizeGEP	Transforms/Vectorize.h	/^  bool VectorizeGEP;$/;"	m	struct:llvm::VectorizeConfig
VectorizeInts	Transforms/Vectorize.h	/^  bool VectorizeInts;$/;"	m	struct:llvm::VectorizeConfig
VectorizeMath	Transforms/Vectorize.h	/^  bool VectorizeMath;$/;"	m	struct:llvm::VectorizeConfig
VectorizeMemOps	Transforms/Vectorize.h	/^  bool VectorizeMemOps;$/;"	m	struct:llvm::VectorizeConfig
VectorizePointers	Transforms/Vectorize.h	/^  bool VectorizePointers;$/;"	m	struct:llvm::VectorizeConfig
VectorizeSelect	Transforms/Vectorize.h	/^  bool VectorizeSelect;$/;"	m	struct:llvm::VectorizeConfig
Vendor	ADT/Triple.h	/^  VendorType Vendor;$/;"	m	class:llvm::Triple
VendorType	ADT/Triple.h	/^  enum VendorType {$/;"	g	class:llvm::Triple
Verbose	Linker.h	/^      Verbose       = 1, \/\/\/< Print to stderr what steps the linker is taking$/;"	e	enum:llvm::Linker::ControlFlags
VerboseAsm	CodeGen/AsmPrinter.h	/^    bool VerboseAsm;$/;"	m	class:llvm::AsmPrinter
VerifierFailureAction	Analysis/Verifier.h	/^enum VerifierFailureAction {$/;"	g	namespace:llvm
Verify	DebugInfo.h	/^    bool Verify() const { return DbgNode != 0; }$/;"	f	class:llvm::DIDescriptor
VerifyStrTab	Object/ELF.h	/^                  ::VerifyStrTab(const Elf_Shdr *sh) const {$/;"	f	class:llvm::object::ELFObjectFile
Version	Support/COFF.h	/^    uint16_t Version;$/;"	m	struct:llvm::COFF::ImportHeader
VersionMap	Object/ELF.h	/^  mutable SmallVector<VersionMapEntry, 16> VersionMap;$/;"	m	class:llvm::object::ELFObjectFile
VersionMapEntry	Object/ELF.h	/^    VersionMapEntry() : PointerIntPair<const void*, 1>(NULL, 0) { }$/;"	f	class:llvm::object::ELFObjectFile::VersionMapEntry
VersionMapEntry	Object/ELF.h	/^    VersionMapEntry(const Elf_Verdef *verdef)$/;"	f	class:llvm::object::ELFObjectFile::VersionMapEntry
VersionMapEntry	Object/ELF.h	/^    VersionMapEntry(const Elf_Vernaux *vernaux)$/;"	f	class:llvm::object::ELFObjectFile::VersionMapEntry
VersionMapEntry	Object/ELF.h	/^  class VersionMapEntry : public PointerIntPair<const void*, 1> {$/;"	c	class:llvm::object::ELFObjectFile
Vertex	Analysis/Dominators.h	/^  std::vector<NodeT*> Vertex;$/;"	m	class:llvm::DominatorTreeBase
ViewGraph	Support/GraphWriter.h	/^void ViewGraph(const GraphType &G, const Twine &Name,$/;"	f	namespace:llvm
VirtReg	CodeGen/ScheduleDAGInstrs.h	/^    unsigned VirtReg;$/;"	m	struct:llvm::VReg2SUnit
VirtReg2IndexFunctor	Target/TargetRegisterInfo.h	/^struct VirtReg2IndexFunctor : public std::unary_function<unsigned, unsigned> {$/;"	s	namespace:llvm
VirtRegAuxInfo	CodeGen/CalcSpillWeights.h	/^    VirtRegAuxInfo(MachineFunction &mf, LiveIntervals &lis,$/;"	f	class:llvm::VirtRegAuxInfo
VirtRegAuxInfo	CodeGen/CalcSpillWeights.h	/^  class VirtRegAuxInfo {$/;"	c	namespace:llvm
VirtRegInfo	CodeGen/LiveVariables.h	/^  IndexedMap<VarInfo, VirtReg2IndexFunctor> VirtRegInfo;$/;"	m	class:llvm::LiveVariables
VirtRegInfo	CodeGen/MachineInstrBundle.h	/^  struct VirtRegInfo {$/;"	s	class:llvm::MachineOperandIteratorBase
VirtRegIntervals	CodeGen/LiveIntervalAnalysis.h	/^    IndexedMap<LiveInterval*, VirtReg2IndexFunctor> VirtRegIntervals;$/;"	m	class:llvm::LiveIntervals
VirtualAddress	Object/COFF.h	/^  support::ulittle32_t VirtualAddress;$/;"	m	struct:llvm::object::coff_relocation
VirtualAddress	Object/COFF.h	/^  support::ulittle32_t VirtualAddress;$/;"	m	struct:llvm::object::coff_section
VirtualAddress	Support/COFF.h	/^    uint32_t VirtualAddress;$/;"	m	struct:llvm::COFF::relocation
VirtualAddress	Support/COFF.h	/^    uint32_t VirtualAddress;$/;"	m	struct:llvm::COFF::section
VirtualFP	MC/MachineLocation.h	/^    VirtualFP = ~0U$/;"	e	enum:llvm::MachineLocation::__anon68
VirtualSize	Object/COFF.h	/^  support::ulittle32_t VirtualSize;$/;"	m	struct:llvm::object::coff_section
VirtualSize	Support/COFF.h	/^    uint32_t VirtualSize;$/;"	m	struct:llvm::COFF::section
VisibilityTypes	GlobalValue.h	/^  enum VisibilityTypes {$/;"	g	class:llvm::GlobalValue
VisitFlag	ADT/ImmutableSet.h	/^  enum VisitFlag { VisitedNone=0x0, VisitedLeft=0x1, VisitedRight=0x3,$/;"	g	class:llvm::ImutAVLTreeGenericIterator
VisitStack	ADT/DepthFirstIterator.h	/^  std::vector<std::pair<PointerIntTy, ChildItTy> > VisitStack;$/;"	m	class:llvm::df_iterator
VisitStack	ADT/PostOrderIterator.h	/^  std::vector<std::pair<NodeType *, ChildItTy> > VisitStack;$/;"	m	class:llvm::po_iterator
VisitStack	ADT/SCCIterator.h	/^  std::vector<std::pair<NodeType *, ChildItTy> > VisitStack;$/;"	m	class:llvm::scc_iterator
Visited	ADT/DepthFirstIterator.h	/^  SetType &Visited;$/;"	m	class:llvm::df_iterator_storage
Visited	ADT/DepthFirstIterator.h	/^  SetType Visited;$/;"	m	class:llvm::df_iterator_storage
Visited	ADT/PostOrderIterator.h	/^  SetType &Visited;$/;"	m	class:llvm::po_iterator_storage
Visited	ADT/PostOrderIterator.h	/^  SetType Visited;$/;"	m	class:llvm::po_iterator_storage
Visited	Analysis/IntervalIterator.h	/^  std::set<BasicBlock*> Visited;$/;"	m	class:llvm::IntervalIterator
Visited	Analysis/ScalarEvolutionExpressions.h	/^    SmallPtrSet<const SCEV *, 8> Visited;$/;"	m	class:llvm::SCEVTraversal
Visited	CodeGen/ScheduleDAG.h	/^    BitVector Visited;$/;"	m	class:llvm::ScheduleDAGTopologicalSort
VisitedBBs	CodeGen/FunctionLoweringInfo.h	/^  SmallPtrSet<const BasicBlock*, 4> VisitedBBs;$/;"	m	class:llvm::FunctionLoweringInfo
VisitedBlocks	Analysis/LoopInfoImpl.h	/^  DenseSet<const BlockT *> VisitedBlocks;$/;"	m	class:llvm::__anon30::PopulateLoopsDFS
VisitedConstants	TypeFinder.h	/^  DenseSet<const Value*> VisitedConstants;$/;"	m	class:llvm::TypeFinder
VisitedLeft	ADT/ImmutableSet.h	/^  enum VisitFlag { VisitedNone=0x0, VisitedLeft=0x1, VisitedRight=0x3,$/;"	e	enum:llvm::ImutAVLTreeGenericIterator::VisitFlag
VisitedNone	ADT/ImmutableSet.h	/^  enum VisitFlag { VisitedNone=0x0, VisitedLeft=0x1, VisitedRight=0x3,$/;"	e	enum:llvm::ImutAVLTreeGenericIterator::VisitFlag
VisitedRight	ADT/ImmutableSet.h	/^  enum VisitFlag { VisitedNone=0x0, VisitedLeft=0x1, VisitedRight=0x3,$/;"	e	enum:llvm::ImutAVLTreeGenericIterator::VisitFlag
VisitedTypes	TypeFinder.h	/^  DenseSet<Type*> VisitedTypes;$/;"	m	class:llvm::TypeFinder
Visitor	Analysis/ScalarEvolutionExpressions.h	/^    SV &Visitor;$/;"	m	class:llvm::SCEVTraversal
Void	Intrinsics.h	/^      Void, MMX, Metadata, Float, Double,$/;"	e	enum:llvm::Intrinsic::IITDescriptor::IITDescriptorKind
VoidTyID	Type.h	/^    VoidTyID = 0,    \/\/\/<  0: type with no size$/;"	e	enum:llvm::Type::TypeID
W64UnwindInfos	MC/MCStreamer.h	/^    std::vector<MCWin64EHUnwindInfo *> W64UnwindInfos;$/;"	m	class:llvm::MCStreamer
WHITE	Analysis/PathNumbering.h	/^  enum NodeColor { WHITE, GRAY, BLACK };$/;"	e	enum:llvm::BallLarusNode::NodeColor
WHITE	Support/raw_ostream.h	/^    WHITE,$/;"	e	enum:llvm::raw_ostream::Colors
WallTime	Support/Timer.h	/^  double WallTime;       \/\/ Wall clock time elapsed in seconds$/;"	m	class:llvm::TimeRecord
Warned	CodeGen/IntrinsicLowering.h	/^    bool Warned;$/;"	m	class:llvm::IntrinsicLowering
Warning	MC/MCParser/MCAsmParserExtension.h	/^  bool Warning(SMLoc L, const Twine &Msg) {$/;"	f	class:llvm::MCAsmParserExtension
Warning	Module.h	/^  enum ModFlagBehavior { Error = 1, Warning  = 2, Require = 3, Override = 4 };$/;"	e	enum:llvm::Module::ModFlagBehavior
WasPreviousTokenFlowEntry	Support/YAMLParser.h	/^  bool WasPreviousTokenFlowEntry;$/;"	m	class:llvm::yaml::SequenceNode
Weak	Support/ValueHandle.h	/^    Weak$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
WeakAnyLinkage	GlobalValue.h	/^    WeakAnyLinkage,     \/\/\/< Keep one copy of named function when linking (weak)$/;"	e	enum:llvm::GlobalValue::LinkageTypes
WeakDefDirective	MC/MCAsmInfo.h	/^    const char *WeakDefDirective;            \/\/ Defaults to NULL.$/;"	m	class:llvm::MCAsmInfo
WeakEvalType	Analysis/MemoryBuiltins.h	/^  typedef std::pair<WeakVH, WeakVH> WeakEvalType;$/;"	t	class:llvm::ObjectSizeOffsetEvaluator
WeakExternal	Support/COFF.h	/^    AuxiliaryWeakExternal       WeakExternal;$/;"	m	union:llvm::COFF::Auxiliary
WeakExternalCharacteristics	Support/COFF.h	/^  enum WeakExternalCharacteristics {$/;"	g	namespace:llvm::COFF
WeakODRLinkage	GlobalValue.h	/^    WeakODRLinkage,     \/\/\/< Same, but only replaced by something equivalent.$/;"	e	enum:llvm::GlobalValue::LinkageTypes
WeakRefDirective	MC/MCAsmInfo.h	/^    const char *WeakRefDirective;            \/\/ Defaults to NULL.$/;"	m	class:llvm::MCAsmInfo
WeakVH	Support/ValueHandle.h	/^  WeakVH() : ValueHandleBase(Weak) {}$/;"	f	class:llvm::WeakVH
WeakVH	Support/ValueHandle.h	/^  WeakVH(Value *P) : ValueHandleBase(Weak, P) {}$/;"	f	class:llvm::WeakVH
WeakVH	Support/ValueHandle.h	/^  WeakVH(const WeakVH &RHS)$/;"	f	class:llvm::WeakVH
WeakVH	Support/ValueHandle.h	/^class WeakVH : public ValueHandleBase {$/;"	c	namespace:llvm
Weight	Support/IntegersSubsetMapping.h	/^    unsigned Weight;$/;"	m	struct:llvm::IntegersSubsetMapping::RangeEx
WeightLimit	Target/TargetRegisterInfo.h	/^  unsigned WeightLimit;$/;"	m	struct:llvm::RegClassWeight
Weights	Analysis/BranchProbabilityInfo.h	/^  DenseMap<Edge, uint32_t> Weights;$/;"	m	class:llvm::BranchProbabilityInfo
Weights	CodeGen/MachineBasicBlock.h	/^  std::vector<uint32_t> Weights;$/;"	m	class:llvm::MachineBasicBlock
WhichEngine	ExecutionEngine/ExecutionEngine.h	/^  EngineKind::Kind WhichEngine;$/;"	m	class:llvm::EngineBuilder
Win32	ADT/Triple.h	/^    Win32,$/;"	e	enum:llvm::Triple::OSType
Win32VersionValue	Support/COFF.h	/^    uint32_t Win32VersionValue;$/;"	m	struct:llvm::COFF::PEHeader
Win32ZeroTime	Support/TimeValue.h	/^    static const TimeValue Win32ZeroTime;$/;"	m	class:llvm::sys::TimeValue
Win64	MC/MCAsmInfo.h	/^    enum ExceptionsType { None, DwarfCFI, SjLj, ARM, Win64 };$/;"	e	enum:llvm::ExceptionHandling::ExceptionsType
Win64EH	Support/Win64EH.h	/^namespace Win64EH {$/;"	n	namespace:llvm
WindowsSubsystem	Support/COFF.h	/^  enum WindowsSubsystem {$/;"	g	namespace:llvm::COFF
Word0	Object/MachOFormat.h	/^    uint32_t Word0;$/;"	m	struct:llvm::object::macho::RelocationEntry
Word1	Object/MachOFormat.h	/^    uint32_t Word1;$/;"	m	struct:llvm::object::macho::RelocationEntry
WordNumber	ADT/SparseBitVector.h	/^    unsigned WordNumber;$/;"	m	class:llvm::SparseBitVector::SparseBitVectorIterator
WordRef	ADT/BitVector.h	/^    BitWord *WordRef;$/;"	m	class:llvm::BitVector::reference
Worklist	Analysis/ScalarEvolutionExpressions.h	/^    SmallVector<const SCEV *, 8> Worklist;$/;"	m	class:llvm::SCEVTraversal
Wrap	ADT/ValueMap.h	/^  ValueMapCVH Wrap(KeyT key) const {$/;"	f	class:llvm::ValueMap
WrapperType	Support/CommandLine.h	/^  typedef DataType WrapperType;$/;"	t	struct:llvm::cl::OptionValueBase
WrapperType	Support/CommandLine.h	/^  typedef OptionValue<DataType> WrapperType;$/;"	t	struct:llvm::cl::OptionValueBase
WrapperType	Support/CommandLine.h	/^  typedef StringRef WrapperType;$/;"	t	struct:llvm::cl::OptionValue
WrapperType	Support/CommandLine.h	/^  typedef cl::boolOrDefault WrapperType;$/;"	t	struct:llvm::cl::OptionValue
Write16	MC/MCObjectWriter.h	/^  void Write16(uint16_t Value) {$/;"	f	class:llvm::MCObjectWriter
Write32	MC/MCObjectWriter.h	/^  void Write32(uint32_t Value) {$/;"	f	class:llvm::MCObjectWriter
Write64	MC/MCObjectWriter.h	/^  void Write64(uint64_t Value) {$/;"	f	class:llvm::MCObjectWriter
Write8	MC/MCObjectWriter.h	/^  void Write8(uint8_t Value) {$/;"	f	class:llvm::MCObjectWriter
WriteBE16	MC/MCObjectWriter.h	/^  void WriteBE16(uint16_t Value) {$/;"	f	class:llvm::MCObjectWriter
WriteBE32	MC/MCObjectWriter.h	/^  void WriteBE32(uint32_t Value) {$/;"	f	class:llvm::MCObjectWriter
WriteBE64	MC/MCObjectWriter.h	/^  void WriteBE64(uint64_t Value) {$/;"	f	class:llvm::MCObjectWriter
WriteByte	Bitcode/BitstreamWriter.h	/^  void WriteByte(unsigned char Value) {$/;"	f	class:llvm::BitstreamWriter
WriteBytes	MC/MCObjectWriter.h	/^  void WriteBytes(StringRef Str, unsigned ZeroFillSize = 0) {$/;"	f	class:llvm::MCObjectWriter
WriteDebugLineInfoFunc	ExecutionEngine/OProfileWrapper.h	/^  op_write_debug_line_info_ptr_t  WriteDebugLineInfoFunc;$/;"	m	class:llvm::OProfileWrapper
WriteGraph	Support/GraphWriter.h	/^raw_ostream &WriteGraph(raw_ostream &O, const GraphType &G,$/;"	f	namespace:llvm
WriteGraph	Support/GraphWriter.h	/^sys::Path WriteGraph(const GraphType &G, const Twine &Name,$/;"	f	namespace:llvm
WriteLE16	MC/MCObjectWriter.h	/^  void WriteLE16(uint16_t Value) {$/;"	f	class:llvm::MCObjectWriter
WriteLE32	MC/MCObjectWriter.h	/^  void WriteLE32(uint32_t Value) {$/;"	f	class:llvm::MCObjectWriter
WriteLE64	MC/MCObjectWriter.h	/^  void WriteLE64(uint64_t Value) {$/;"	f	class:llvm::MCObjectWriter
WriteLatencyIdx	MC/MCSchedule.h	/^  unsigned WriteLatencyIdx; \/\/ First index into WriteLatencyTable.$/;"	m	struct:llvm::MCSchedClassDesc
WriteLatencyTable	MC/MCSubtargetInfo.h	/^  const MCWriteLatencyEntry *WriteLatencyTable;$/;"	m	class:llvm::MCSubtargetInfo
WriteNativeCodeFunc	ExecutionEngine/OProfileWrapper.h	/^  op_write_native_code_ptr_t      WriteNativeCodeFunc;$/;"	m	class:llvm::OProfileWrapper
WriteProcResIdx	MC/MCSchedule.h	/^  unsigned WriteProcResIdx; \/\/ First index into WriteProcResTable.$/;"	m	struct:llvm::MCSchedClassDesc
WriteProcResTable	MC/MCSubtargetInfo.h	/^  const MCWriteProcResEntry *WriteProcResTable;$/;"	m	class:llvm::MCSubtargetInfo
WriteResourceID	MC/MCSchedule.h	/^  unsigned WriteResourceID;$/;"	m	struct:llvm::MCReadAdvanceEntry
WriteResourceID	MC/MCSchedule.h	/^  unsigned WriteResourceID;$/;"	m	struct:llvm::MCWriteLatencyEntry
WriteWord	Bitcode/BitstreamWriter.h	/^  void WriteWord(unsigned Value) {$/;"	f	class:llvm::BitstreamWriter
WriteZeros	MC/MCObjectWriter.h	/^  void WriteZeros(unsigned N) {$/;"	f	class:llvm::MCObjectWriter
Writer	MC/MCAssembler.h	/^  MCObjectWriter &Writer;$/;"	m	class:llvm::MCAssembler
Writes	CodeGen/MachineInstrBundle.h	/^    bool Writes;$/;"	m	struct:llvm::MachineOperandIteratorBase::VirtRegInfo
X	ADT/ImmutableList.h	/^  const ImmutableListImpl<T>* X;$/;"	m	class:llvm::ImmutableList
X	ADT/SmallBitVector.h	/^  uintptr_t X;$/;"	m	class:llvm::SmallBitVector
X	Support/SaveAndRestore.h	/^  T& X;$/;"	m	struct:llvm::SaveAndRestore
X	Support/SaveAndRestore.h	/^  bool& X;$/;"	m	struct:llvm::SaveOr
X86_FP80TyID	Type.h	/^    X86_FP80TyID,    \/\/\/<  4: 80-bit floating point type (X87)$/;"	e	enum:llvm::Type::TypeID
X86_FastCall	CallingConv.h	/^    X86_FastCall = 65,$/;"	e	enum:llvm::CallingConv::ID
X86_MMXTyID	Type.h	/^    X86_MMXTyID,     \/\/\/<  9: MMX vectors (64 bits, X86 specific)$/;"	e	enum:llvm::Type::TypeID
X86_StdCall	CallingConv.h	/^    X86_StdCall = 64,$/;"	e	enum:llvm::CallingConv::ID
X86_ThisCall	CallingConv.h	/^    X86_ThisCall = 70,$/;"	e	enum:llvm::CallingConv::ID
XCORE_SHF_CP_SECTION	Support/ELF.h	/^  XCORE_SHF_CP_SECTION = 0x800U,$/;"	e	enum:llvm::ELF::__anon100
XCORE_SHF_DP_SECTION	Support/ELF.h	/^  XCORE_SHF_DP_SECTION = 0x1000U,$/;"	e	enum:llvm::ELF::__anon100
XDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *XDataSection;$/;"	m	class:llvm::MCObjectFileInfo
XOR	CodeGen/ISDOpcodes.h	/^    AND, OR, XOR,$/;"	e	enum:llvm::ISD::NodeType
Xchg	Instructions.h	/^    Xchg,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
Xor	ADT/APInt.h	/^  APInt Xor(const APInt& RHS) const {$/;"	f	class:llvm::APInt
Xor	ADT/APInt.h	/^inline APInt Xor(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
Xor	ADT/APSInt.h	/^  APSInt Xor(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
Xor	Instructions.h	/^    Xor,$/;"	e	enum:llvm::AtomicRMWInst::BinOp
Xor	MC/MCExpr.h	/^    Xor   \/\/\/< Bitwise exclusive or.$/;"	e	enum:llvm::MCBinaryExpr::Opcode
YELLOW	Support/raw_ostream.h	/^    YELLOW,$/;"	e	enum:llvm::raw_ostream::Colors
Yes	Analysis/LibCallSemantics.h	/^      Yes, No, Unknown$/;"	e	enum:llvm::LibCallLocationInfo::LocResult
ZERO_EXTEND	CodeGen/ISDOpcodes.h	/^    ZERO_EXTEND,$/;"	e	enum:llvm::ISD::NodeType
ZEXTLOAD	CodeGen/ISDOpcodes.h	/^    ZEXTLOAD,$/;"	e	enum:llvm::ISD::LoadExtType
ZExt	Attributes.h	/^    ZExt            = 27   \/\/\/< Zero extended before\/after call$/;"	e	enum:llvm::Attributes::AttrVal
ZExt	CodeGen/CallingConvLower.h	/^    ZExt,   \/\/ The value is zero extended in the location.$/;"	e	enum:llvm::CCValAssign::LocInfo
ZExt	Target/TargetCallingConv.h	/^    static const uint64_t ZExt           = 1ULL<<0;  \/\/\/< Zero extended$/;"	m	struct:llvm::ISD::ArgFlagsTy
ZExtInst	Instructions.h	/^class ZExtInst : public CastInst {$/;"	c	namespace:llvm
ZExtOffs	Target/TargetCallingConv.h	/^    static const uint64_t ZExtOffs       = 0;$/;"	m	struct:llvm::ISD::ArgFlagsTy
ZIV	Analysis/DependenceAnalysis.h	/^      enum ClassificationKind { ZIV, SIV, RDIV, MIV, NonLinear } Classification;$/;"	e	enum:llvm::DependenceAnalysis::Subscript::ClassificationKind
ZdaPv	Target/TargetLibraryInfo.h	/^      ZdaPv,$/;"	e	enum:llvm::LibFunc::Func
ZdlPv	Target/TargetLibraryInfo.h	/^      ZdlPv,$/;"	e	enum:llvm::LibFunc::Func
Zero	Analysis/MemoryBuiltins.h	/^  APInt Zero;$/;"	m	class:llvm::ObjectSizeOffsetVisitor
Zero	Analysis/MemoryBuiltins.h	/^  Value *Zero;$/;"	m	class:llvm::ObjectSizeOffsetEvaluator
ZeroDirective	MC/MCAsmInfo.h	/^    const char *ZeroDirective;               \/\/ Defaults to "\\t.zero\\t"$/;"	m	class:llvm::MCAsmInfo
ZeroOrMore	Support/CommandLine.h	/^  ZeroOrMore      = 0x01,      \/\/ Zero or more occurrences allowed$/;"	e	enum:llvm::cl::NumOccurrencesFlag
ZeroOrNegativeOneBooleanContent	Target/TargetLowering.h	/^    ZeroOrNegativeOneBooleanContent \/\/ All bits equal to bit 0.$/;"	e	enum:llvm::TargetLowering::BooleanContent
ZeroOrOneBooleanContent	Target/TargetLowering.h	/^    ZeroOrOneBooleanContent,        \/\/ All bits zero except for bit 0.$/;"	e	enum:llvm::TargetLowering::BooleanContent
ZeroTime	Support/TimeValue.h	/^    static const TimeValue ZeroTime;$/;"	m	class:llvm::sys::TimeValue
Zeroes	Object/COFF.h	/^    support::ulittle32_t Zeroes;$/;"	m	struct:llvm::object::coff_symbol::StringTableOffset
Znaj	Target/TargetLibraryInfo.h	/^      Znaj,$/;"	e	enum:llvm::LibFunc::Func
ZnajRKSt9nothrow_t	Target/TargetLibraryInfo.h	/^      ZnajRKSt9nothrow_t,$/;"	e	enum:llvm::LibFunc::Func
Znam	Target/TargetLibraryInfo.h	/^      Znam,$/;"	e	enum:llvm::LibFunc::Func
ZnamRKSt9nothrow_t	Target/TargetLibraryInfo.h	/^      ZnamRKSt9nothrow_t,$/;"	e	enum:llvm::LibFunc::Func
Znwj	Target/TargetLibraryInfo.h	/^      Znwj,$/;"	e	enum:llvm::LibFunc::Func
ZnwjRKSt9nothrow_t	Target/TargetLibraryInfo.h	/^      ZnwjRKSt9nothrow_t,$/;"	e	enum:llvm::LibFunc::Func
Znwm	Target/TargetLibraryInfo.h	/^      Znwm,$/;"	e	enum:llvm::LibFunc::Func
ZnwmRKSt9nothrow_t	Target/TargetLibraryInfo.h	/^      ZnwmRKSt9nothrow_t,$/;"	e	enum:llvm::LibFunc::Func
_	Object/Error.h	/^enum _ {$/;"	g	struct:llvm::object::object_error
_	Support/FileSystem.h	/^  enum _ {$/;"	g	struct:llvm::sys::fs::copy_option
_	Support/FileSystem.h	/^  enum _ {$/;"	g	struct:llvm::sys::fs::file_magic
_	Support/FileSystem.h	/^  enum _ {$/;"	g	struct:llvm::sys::fs::file_type
_	Support/system_error.h	/^enum _ {$/;"	g	struct:llvm::errc
_	Support/system_error.h	/^enum _ {$/;"	g	struct:llvm::windows_error
_Self	ADT/DepthFirstIterator.h	/^  typedef df_iterator<GraphT, SetType, ExtStorage, GT> _Self;$/;"	t	class:llvm::df_iterator
_Self	ADT/ImmutableSet.h	/^  typedef ImutAVLTreeGenericIterator<ImutInfo> _Self;$/;"	t	class:llvm::ImutAVLTreeGenericIterator
_Self	ADT/ImmutableSet.h	/^  typedef ImutAVLTreeInOrderIterator<ImutInfo> _Self;$/;"	t	class:llvm::ImutAVLTreeInOrderIterator
_Self	ADT/PostOrderIterator.h	/^  typedef po_iterator<GraphT, SetType, ExtStorage, GT> _Self;$/;"	t	class:llvm::po_iterator
_Self	ADT/SCCIterator.h	/^  typedef scc_iterator<GraphT, GT> _Self;$/;"	t	class:llvm::scc_iterator
_Self	ADT/STLExtras.h	/^  typedef mapped_iterator<RootIt, UnaryFunc> _Self;$/;"	t	class:llvm::mapped_iterator
_Self	Analysis/ConstantsScanner.h	/^  typedef constant_iterator _Self;$/;"	t	class:llvm::constant_iterator
_Self	Analysis/IntervalIterator.h	/^  typedef IntervalIterator<NodeTy, OrigContainer_t> _Self;$/;"	t	class:llvm::IntervalIterator
_Self	Use.h	/^  typedef value_use_iterator<UserTy> _Self;$/;"	t	class:llvm::value_use_iterator
__LDDPROFILINGCOMMON_H	LDDProfilingCommon.h	3;"	d
__has_feature	ADT/Hashing.h	62;"	d
__has_feature	Support/Compiler.h	19;"	d
__has_feature	Support/type_traits.h	217;"	d
__has_feature	Support/type_traits.h	26;"	d
_backEdges	Analysis/PathNumbering.h	/^  BLEdgeVector _backEdges;$/;"	m	class:llvm::BallLarusDag
_basicBlock	Analysis/PathNumbering.h	/^  BasicBlock* _basicBlock;$/;"	m	class:llvm::BallLarusNode
_cat_	Support/system_error.h	/^  const error_category* _cat_;$/;"	m	class:llvm::error_code
_cat_	Support/system_error.h	/^  const error_category* _cat_;$/;"	m	class:llvm::error_condition
_color	Analysis/PathNumbering.h	/^  NodeColor _color;$/;"	m	class:llvm::BallLarusNode
_count	Analysis/PathProfileInfo.h	/^  unsigned int _count;$/;"	m	class:llvm::ProfilePath
_countStdDev	Analysis/PathProfileInfo.h	/^  double _countStdDev;$/;"	m	class:llvm::ProfilePath
_currentDag	Analysis/PathProfileInfo.h	/^  BallLarusDag* _currentDag;$/;"	m	class:llvm::PathProfileInfo
_currentFunction	Analysis/PathProfileInfo.h	/^  Function* _currentFunction;$/;"	m	class:llvm::PathProfileInfo
_do_message	Support/system_error.h	/^class _do_message : public error_category$/;"	c	namespace:llvm
_duplicateNumber	Analysis/PathNumbering.h	/^  unsigned _duplicateNumber;$/;"	m	class:llvm::BallLarusEdge
_duplicateNumber	Analysis/PathProfileInfo.h	/^  unsigned _duplicateNumber;$/;"	m	class:llvm::ProfilePathEdge
_edgeType	Analysis/PathNumbering.h	/^  EdgeType _edgeType;$/;"	m	class:llvm::BallLarusEdge
_edges	Analysis/PathNumbering.h	/^  BLEdgeVector _edges;$/;"	m	class:llvm::BallLarusDag
_exit	Analysis/PathNumbering.h	/^  BallLarusNode* _exit;$/;"	m	class:llvm::BallLarusDag
_function	Analysis/PathNumbering.h	/^  Function& _function;$/;"	m	class:llvm::BallLarusDag
_functionPathCounts	Analysis/PathProfileInfo.h	/^  FunctionPathCountMap _functionPathCounts;$/;"	m	class:llvm::PathProfileInfo
_functionPaths	Analysis/PathProfileInfo.h	/^  FunctionPathMap _functionPaths;$/;"	m	class:llvm::PathProfileInfo
_nodes	Analysis/PathNumbering.h	/^  BLNodeVector _nodes;$/;"	m	class:llvm::BallLarusDag
_number	Analysis/PathProfileInfo.h	/^  unsigned int _number;$/;"	m	class:llvm::ProfilePath
_numberPaths	Analysis/PathNumbering.h	/^  unsigned _numberPaths;$/;"	m	class:llvm::BallLarusNode
_phonyExit	Analysis/PathNumbering.h	/^  BallLarusEdge* _phonyExit;$/;"	m	class:llvm::BallLarusEdge
_phonyRoot	Analysis/PathNumbering.h	/^  BallLarusEdge* _phonyRoot;$/;"	m	class:llvm::BallLarusEdge
_ppi	Analysis/PathProfileInfo.h	/^  PathProfileInfo* _ppi;$/;"	m	class:llvm::ProfilePath
_predEdges	Analysis/PathNumbering.h	/^  BLEdgeVector _predEdges;$/;"	m	class:llvm::BallLarusNode
_realEdge	Analysis/PathNumbering.h	/^  BallLarusEdge* _realEdge;$/;"	m	class:llvm::BallLarusEdge
_root	Analysis/PathNumbering.h	/^  BallLarusNode* _root;$/;"	m	class:llvm::BallLarusDag
_source	Analysis/PathNumbering.h	/^  BallLarusNode* _source;$/;"	m	class:llvm::BallLarusEdge
_source	Analysis/PathProfileInfo.h	/^  BasicBlock* _source;$/;"	m	class:llvm::ProfilePathEdge
_succEdges	Analysis/PathNumbering.h	/^  BLEdgeVector _succEdges;$/;"	m	class:llvm::BallLarusNode
_target	Analysis/PathNumbering.h	/^  BallLarusNode* _target;$/;"	m	class:llvm::BallLarusEdge
_target	Analysis/PathProfileInfo.h	/^  BasicBlock* _target;$/;"	m	class:llvm::ProfilePathEdge
_uid	Analysis/PathNumbering.h	/^  unsigned _uid;$/;"	m	class:llvm::BallLarusNode
_val_	Support/system_error.h	/^  int _val_;$/;"	m	class:llvm::error_code
_val_	Support/system_error.h	/^  int _val_;$/;"	m	class:llvm::error_condition
_weight	Analysis/PathNumbering.h	/^  unsigned _weight;$/;"	m	class:llvm::BallLarusEdge
a	ADT/APInt.h	/^  bool a;      \/\/\/< add indicator$/;"	m	struct:llvm::APInt::mu
a	ADT/IntervalMap.h	/^  const typename MapA::const_iterator &a() const { return posA; }$/;"	f	class:llvm::IntervalMapOverlaps
a	Object/ObjectFile.h	/^    uint16_t a, b;$/;"	m	struct:llvm::object::DataRefImpl::__anon75
a	Object/ObjectFile.h	/^    uint32_t a, b;$/;"	m	struct:llvm::object::DataRefImpl::__anon76
abs	ADT/APInt.h	/^  APInt abs() const {$/;"	f	class:llvm::APInt
abs64	Support/MathExtras.h	/^inline int64_t abs64(int64_t x) {$/;"	f	namespace:llvm
access_denied	Support/system_error.h	/^  access_denied           = 5, \/\/ ERROR_ACCESS_DENIED,$/;"	e	enum:llvm::windows_error::_
acos	Target/TargetLibraryInfo.h	/^      acos,$/;"	e	enum:llvm::LibFunc::Func
acosf	Target/TargetLibraryInfo.h	/^      acosf,$/;"	e	enum:llvm::LibFunc::Func
acosh	Target/TargetLibraryInfo.h	/^      acosh,$/;"	e	enum:llvm::LibFunc::Func
acoshf	Target/TargetLibraryInfo.h	/^      acoshf,$/;"	e	enum:llvm::LibFunc::Func
acoshl	Target/TargetLibraryInfo.h	/^      acoshl,$/;"	e	enum:llvm::LibFunc::Func
acosl	Target/TargetLibraryInfo.h	/^      acosl,$/;"	e	enum:llvm::LibFunc::Func
acquire	Support/Mutex.h	/^      bool acquire() {$/;"	f	class:llvm::sys::SmartMutex
acquired	Support/Mutex.h	/^      unsigned acquired;$/;"	m	class:llvm::sys::SmartMutex
activeStack	PassManagers.h	/^  PMStack activeStack;$/;"	m	class:llvm::PMTopLevelManager
add	ADT/APInt.h	/^inline APInt add(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
add	ADT/ImmutableIntervalMap.h	/^    ImmutableIntervalMap add(ImmutableIntervalMap Old, $/;"	f	class:llvm::ImmutableIntervalMap::Factory
add	ADT/ImmutableList.h	/^  ImmutableList<T> add(const T& D, ImmutableList<T> L) {$/;"	f	class:llvm::ImmutableListFactory
add	ADT/ImmutableMap.h	/^    ImmutableMap add(ImmutableMap Old, key_type_ref K, data_type_ref D) {$/;"	f	class:llvm::ImmutableMap::Factory
add	ADT/ImmutableMap.h	/^  ImmutableMapRef add(key_type_ref K, data_type_ref D) {$/;"	f	class:llvm::ImmutableMapRef
add	ADT/ImmutableSet.h	/^    ImmutableSet add(ImmutableSet Old, value_type_ref V) {$/;"	f	class:llvm::ImmutableSet::Factory
add	ADT/ImmutableSet.h	/^  ImmutableSetRef add(value_type_ref V) {$/;"	f	class:llvm::ImmutableSetRef
add	ADT/ImmutableSet.h	/^  TreeTy* add(TreeTy* T, value_type_ref V) {$/;"	f	class:llvm::ImutAVLFactory
add	CodeGen/SelectionDAG.h	/^  void add(SDDbgValue *V, const SDNode *Node, bool isParameter) {$/;"	f	class:llvm::SDDbgInfo
add	Support/GCOV.h	/^  void add(uint32_t N) { Lines.push_back(N); }$/;"	f	class:llvm::GCOVLines
add	Support/IntegersSubsetMapping.h	/^  void add(const IntTy &C, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	Support/IntegersSubsetMapping.h	/^  void add(const IntTy &Low, const IntTy &High, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	Support/IntegersSubsetMapping.h	/^  void add(const IntegersSubsetTy &CRS, SuccessorClass *S = 0,$/;"	f	class:llvm::IntegersSubsetMapping
add	Support/IntegersSubsetMapping.h	/^  void add(const RangeEx &R, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	Support/IntegersSubsetMapping.h	/^  void add(const RangeTy &R, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	Support/IntegersSubsetMapping.h	/^  void add(const RangesCollection& RHS, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	Support/IntegersSubsetMapping.h	/^  void add(self& RHS) {$/;"	f	class:llvm::IntegersSubsetMapping
add	Support/IntegersSubsetMapping.h	/^  void add(self& RHS, SuccessorClass *S) {$/;"	f	class:llvm::IntegersSubsetMapping
addAnalysisImplsPair	PassAnalysisSupport.h	/^  void addAnalysisImplsPair(AnalysisID PI, Pass *P) {$/;"	f	class:llvm::AnalysisResolver
addBasicBlock	Analysis/DominanceFrontier.h	/^  iterator addBasicBlock(BasicBlock *BB, const DomSetType &frontier) {$/;"	f	class:llvm::DominanceFrontierBase
addBasicBlockToLoop	Analysis/LoopInfoImpl.h	/^addBasicBlockToLoop(BlockT *NewBB, LoopInfoBase<BlockT, LoopT> &LIB) {$/;"	f	class:llvm::LoopBase
addBlockEntry	Analysis/LoopInfo.h	/^  void addBlockEntry(BlockT *BB) {$/;"	f	class:llvm::LoopBase
addBranchWeights	IRBuilder.h	/^  InstTy *addBranchWeights(InstTy *I, MDNode *Weights) {$/;"	f	class:llvm::IRBuilder
addBypassSlowDiv	Target/TargetLowering.h	/^  void addBypassSlowDiv(unsigned int SlowBitWidth, unsigned int FastBitWidth) {$/;"	f	class:llvm::TargetLowering
addCImm	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addCImm(const ConstantInt *Val) const {$/;"	f	class:llvm::MachineInstrBuilder
addCalledFunction	Analysis/CallGraph.h	/^  void addCalledFunction(CallSite CS, CallGraphNode *M) {$/;"	f	class:llvm::CallGraphNode
addChild	Analysis/Dominators.h	/^  DomTreeNodeBase<NodeT> *addChild(DomTreeNodeBase<NodeT> *C) {$/;"	f	class:llvm::DomTreeNodeBase
addChild	CodeGen/LexicalScopes.h	/^  void addChild(LexicalScope *S) { Children.push_back(S); }$/;"	f	class:llvm::LexicalScope
addChildLoop	Analysis/LoopInfo.h	/^  void addChildLoop(LoopT *NewChild) {$/;"	f	class:llvm::LoopBase
addClass	TableGen/Record.h	/^  void addClass(Record *R) {$/;"	f	class:llvm::RecordKeeper
addCodeEmitter	Target/TargetMachine.h	/^  virtual bool addCodeEmitter(PassManagerBase &,$/;"	f	class:llvm::LLVMTargetMachine
addConstantPoolIndex	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addConstantPoolIndex(unsigned Idx,$/;"	f	class:llvm::MachineInstrBuilder
addConstructedEdge	CodeGen/PBQP/Graph.h	/^    EdgeItr addConstructedEdge(const EdgeEntry &e) {$/;"	f	class:PBQP::Graph
addConstructedNode	CodeGen/PBQP/Graph.h	/^    NodeItr addConstructedNode(const NodeEntry &n) {$/;"	f	class:PBQP::Graph
addCount	Support/GCOV.h	/^  void addCount(uint64_t N) { Counter = N; }$/;"	f	class:llvm::GCOVBlock
addCustomGraphFeatures	CodeGen/ScheduleDAG.h	/^    virtual void addCustomGraphFeatures(GraphWriter<ScheduleDAG*> &) const {}$/;"	f	class:llvm::ScheduleDAG
addCustomGraphFeatures	Support/DOTGraphTraits.h	/^  static void addCustomGraphFeatures(const GraphType &, GraphWriter &) {}$/;"	f	struct:llvm::DefaultDOTGraphTraits
addDef	TableGen/Record.h	/^  void addDef(Record *R) {$/;"	f	class:llvm::RecordKeeper
addDisp	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addDisp(const MachineOperand &Disp, int64_t off,$/;"	f	class:llvm::MachineInstrBuilder
addEdge	CodeGen/PBQP/Graph.h	/^      AdjEdgeItr addEdge(EdgeItr e) {$/;"	f	class:PBQP::Graph::NodeEntry
addEdge	CodeGen/PBQP/Graph.h	/^    EdgeItr addEdge(Graph::NodeItr n1Itr, Graph::NodeItr n2Itr,$/;"	f	class:PBQP::Graph
addEdge	Support/GCOV.h	/^  void addEdge(uint32_t N) { Edges.push_back(N); }$/;"	f	class:llvm::GCOVBlock
addEdgeContributions	CodeGen/PBQP/Heuristics/Briggs.h	/^      void addEdgeContributions(Graph::EdgeItr eItr, Graph::NodeItr nItr) {$/;"	f	class:PBQP::Heuristics::Briggs
addEdgeWeight	Analysis/ProfileDataLoader.h	/^  void addEdgeWeight(Edge e, unsigned weight) {$/;"	f	class:llvm::ProfileDataT
addExternalSymbol	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addExternalSymbol(const char *FnName,$/;"	f	class:llvm::MachineInstrBuilder
addFPImm	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addFPImm(const ConstantFP *Val) const {$/;"	f	class:llvm::MachineInstrBuilder
addFinalizeRegAlloc	CodeGen/Passes.h	/^  virtual bool addFinalizeRegAlloc() {$/;"	f	class:llvm::TargetPassConfig
addFixup	MC/MCAssembler.h	/^  void addFixup(MCFixup Fixup) {$/;"	f	class:llvm::MCDataFragment
addFnAttr	Function.h	/^  void addFnAttr(Attributes::AttrVal N) { $/;"	f	class:llvm::Function
addFrame	DebugInfo/DIContext.h	/^  void addFrame(const DILineInfo &Frame) {$/;"	f	class:llvm::DIInliningInfo
addFrameIndex	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addFrameIndex(int Idx) const {$/;"	f	class:llvm::MachineInstrBuilder
addGarbageObject	Support/LeakDetector.h	/^  static void addGarbageObject(const Value *Object) {$/;"	f	struct:llvm::LeakDetector
addGarbageObject	Support/LeakDetector.h	/^  static void addGarbageObject(void *Object) {$/;"	f	struct:llvm::LeakDetector
addGlobalAddress	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addGlobalAddress(const GlobalValue *GV,$/;"	f	class:llvm::MachineInstrBuilder
addImm	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addImm(int64_t Val) const {$/;"	f	class:llvm::MachineInstrBuilder
addImmutablePass	PassManagers.h	/^  inline void addImmutablePass(ImmutablePass *P) {$/;"	f	class:llvm::PMTopLevelManager
addIncoming	Instructions.h	/^  void addIncoming(Value *V, BasicBlock *BB) {$/;"	f	class:llvm::PHINode
addIndirectPassManager	PassManagers.h	/^  inline void addIndirectPassManager(PMDataManager *Manager) {$/;"	f	class:llvm::PMTopLevelManager
addInitialFrameState	MC/MCAsmInfo.h	/^    void addInitialFrameState(MCSymbol *label, const MachineLocation &D,$/;"	f	class:llvm::MCAsmInfo
addInstSelector	CodeGen/Passes.h	/^  virtual bool addInstSelector() {$/;"	f	class:llvm::TargetPassConfig
addInterfaceImplemented	PassSupport.h	/^  void addInterfaceImplemented(const PassInfo *ItfPI) {$/;"	f	class:llvm::PassInfo
addJumpTableIndex	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addJumpTableIndex(unsigned Idx,$/;"	f	class:llvm::MachineInstrBuilder
addLineEntry	MC/MCDwarf.h	/^    void addLineEntry(const MCLineEntry &LineEntry) {$/;"	f	class:llvm::MCLineSection
addLiteralOption	Support/CommandLine.h	/^  void addLiteralOption(const char *Name, const DT &V, const char *HelpStr) {$/;"	f	class:llvm::cl::parser
addLiveIn	CodeGen/MachineBasicBlock.h	/^  void addLiveIn(unsigned Reg)  { LiveIns.push_back(Reg); }$/;"	f	class:llvm::MachineBasicBlock
addLiveIn	CodeGen/MachineRegisterInfo.h	/^  void addLiveIn(unsigned Reg, unsigned vreg = 0) {$/;"	f	class:llvm::MachineRegisterInfo
addLiveOut	CodeGen/MachineRegisterInfo.h	/^  void addLiveOut(unsigned Reg) { LiveOuts.push_back(Reg); }$/;"	f	class:llvm::MachineRegisterInfo
addLoc	CodeGen/CallingConvLower.h	/^  void addLoc(const CCValAssign &V) {$/;"	f	class:llvm::CCState
addMBB	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addMBB(MachineBasicBlock *MBB,$/;"	f	class:llvm::MachineInstrBuilder
addMCGenDwarfLabelEntry	MC/MCContext.h	/^    void addMCGenDwarfLabelEntry(const MCGenDwarfLabelEntry *E) {$/;"	f	class:llvm::MCContext
addMCLineSection	MC/MCContext.h	/^    void addMCLineSection(const MCSection *Sec, MCLineSection *Line) {$/;"	f	class:llvm::MCContext
addMemOperand	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addMemOperand(MachineMemOperand *MMO) const {$/;"	f	class:llvm::MachineInstrBuilder
addMetadata	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addMetadata(const MDNode *MD) const {$/;"	f	class:llvm::MachineInstrBuilder
addModule	ExecutionEngine/ExecutionEngine.h	/^  virtual void addModule(Module *M) {$/;"	f	class:llvm::ExecutionEngine
addMutation	CodeGen/MachineScheduler.h	/^  void addMutation(ScheduleDAGMutation *Mutation) {$/;"	f	class:llvm::ScheduleDAGMI
addNewBlock	Analysis/Dominators.h	/^  DomTreeNodeBase<NodeT> *addNewBlock(NodeT *BB, NodeT *DomBB) {$/;"	f	class:llvm::DominatorTreeBase
addNewBlock	Analysis/Dominators.h	/^  inline DomTreeNode *addNewBlock(BasicBlock *BB, BasicBlock *DomBB) {$/;"	f	class:llvm::DominatorTree
addNewBlock	CodeGen/MachineDominators.h	/^  inline MachineDomTreeNode *addNewBlock(MachineBasicBlock *BB,$/;"	f	class:llvm::MachineDominatorTree
addNode	CodeGen/LatencyPriorityQueue.h	/^    void addNode(const SUnit *SU) {$/;"	f	class:llvm::LatencyPriorityQueue
addNode	CodeGen/PBQP/Graph.h	/^    NodeItr addNode(const Vector &costs) {$/;"	f	class:PBQP::Graph
addNode	CodeGen/ResourcePriorityQueue.h	/^    void addNode(const SUnit *SU) {$/;"	f	class:llvm::ResourcePriorityQueue
addNodeToInterval	Analysis/IntervalIterator.h	/^inline void addNodeToInterval(Interval *Int, BasicBlock *BB) {$/;"	f	namespace:llvm
addNodeToInterval	Analysis/IntervalIterator.h	/^inline void addNodeToInterval(Interval *Int, Interval *I) {$/;"	f	namespace:llvm
addNodeToList	ADT/ilist.h	/^  void addNodeToList(NodeTy *) {}$/;"	f	struct:llvm::ilist_node_traits
addNodeToList	Module.h	/^  void addNodeToList(NamedMDNode *) {}$/;"	f	struct:llvm::ilist_traits
addOperand	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addOperand(const MachineOperand &MO) const {$/;"	f	class:llvm::MachineInstrBuilder
addOperand	MC/MCInst.h	/^  void addOperand(const MCOperand &Op) {$/;"	f	class:llvm::MCInst
addPassManager	PassManagers.h	/^  void addPassManager(PMDataManager *Manager) {$/;"	f	class:llvm::PMTopLevelManager
addPassesToEmitFile	Target/TargetMachine.h	/^  virtual bool addPassesToEmitFile(PassManagerBase &,$/;"	f	class:llvm::TargetMachine
addPassesToEmitMC	Target/TargetMachine.h	/^  virtual bool addPassesToEmitMC(PassManagerBase &,$/;"	f	class:llvm::TargetMachine
addPassesToEmitMachineCode	Target/TargetMachine.h	/^  virtual bool addPassesToEmitMachineCode(PassManagerBase &,$/;"	f	class:llvm::TargetMachine
addPhysRegsUsedFromRegMask	CodeGen/MachineRegisterInfo.h	/^  void addPhysRegsUsedFromRegMask(const uint32_t *RegMask) {$/;"	f	class:llvm::MachineRegisterInfo
addPointer	Analysis/AliasSetTracker.h	/^  AliasSet &addPointer(Value *P, uint64_t Size, const MDNode *TBAAInfo,$/;"	f	class:llvm::AliasSetTracker
addPostRegAlloc	CodeGen/Passes.h	/^  virtual bool addPostRegAlloc() {$/;"	f	class:llvm::TargetPassConfig
addPreEmitPass	CodeGen/Passes.h	/^  virtual bool addPreEmitPass() {$/;"	f	class:llvm::TargetPassConfig
addPreISel	CodeGen/Passes.h	/^  virtual bool addPreISel() {$/;"	f	class:llvm::TargetPassConfig
addPreRegAlloc	CodeGen/Passes.h	/^  virtual bool addPreRegAlloc() {$/;"	f	class:llvm::TargetPassConfig
addPreRewrite	CodeGen/Passes.h	/^  virtual bool addPreRewrite() {$/;"	f	class:llvm::TargetPassConfig
addPreSched2	CodeGen/Passes.h	/^  virtual bool addPreSched2() {$/;"	f	class:llvm::TargetPassConfig
addPreserved	PassAnalysisSupport.h	/^  AnalysisUsage &addPreserved() {$/;"	f	class:llvm::AnalysisUsage
addPreservedID	PassAnalysisSupport.h	/^  AnalysisUsage &addPreservedID(char &ID) {$/;"	f	class:llvm::AnalysisUsage
addPreservedID	PassAnalysisSupport.h	/^  AnalysisUsage &addPreservedID(const void *ID) {$/;"	f	class:llvm::AnalysisUsage
addRange	CodeGen/LiveInterval.h	/^    void addRange(LiveRange LR) {$/;"	f	class:llvm::LiveInterval
addRef	Analysis/AliasSetTracker.h	/^  void addRef() { ++RefCount; }$/;"	f	class:llvm::AliasSet
addRef	Bitcode/BitCodes.h	/^  void addRef() { ++RefCount; }$/;"	f	class:llvm::BitCodeAbbrev
addReg	CodeGen/MachineInstrBuilder.h	/^  MachineInstrBuilder &addReg(unsigned RegNo, unsigned flags = 0,$/;"	f	class:llvm::MachineInstrBuilder
addRegMask	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addRegMask(const uint32_t *Mask) const {$/;"	f	class:llvm::MachineInstrBuilder
addRegisterClass	Target/TargetLowering.h	/^  void addRegisterClass(EVT VT, const TargetRegisterClass *RC) {$/;"	f	class:llvm::TargetLowering
addRelocation	MC/MCMachObjectWriter.h	/^  void addRelocation(const MCSectionData *SD,$/;"	f	class:llvm::MachObjectWriter
addRequired	PassAnalysisSupport.h	/^  AnalysisUsage &addRequired() {$/;"	f	class:llvm::AnalysisUsage
addRequiredTransitive	PassAnalysisSupport.h	/^  AnalysisUsage &addRequiredTransitive() {$/;"	f	class:llvm::AnalysisUsage
addRoot	Analysis/Dominators.h	/^  inline void addRoot(NodeT* BB) {$/;"	f	class:llvm::DominatorTreeBase
addRoot	CodeGen/MachineDominators.h	/^inline void DominatorTreeBase<MachineBasicBlock>::addRoot(MachineBasicBlock* MBB) {$/;"	f	class:llvm::DominatorTreeBase
addSafePoint	CodeGen/GCMetadata.h	/^    void addSafePoint(GC::PointKind Kind, MCSymbol *Label, DebugLoc DL) {$/;"	f	class:llvm::GCFunctionInfo
addSolverEdge	CodeGen/PBQP/HeuristicSolver.h	/^      SolverEdgeItr addSolverEdge(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::HeuristicSolverImpl::NodeData
addSolverEdge	CodeGen/PBQP/HeuristicSolver.h	/^    void addSolverEdge(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
addStackRoot	CodeGen/GCMetadata.h	/^    void addStackRoot(int Num, const Constant *Metadata) {$/;"	f	class:llvm::GCFunctionInfo
addSuperClass	TableGen/Record.h	/^  void addSuperClass(Record *R) {$/;"	f	class:llvm::Record
addSym	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addSym(MCSymbol *Sym) const {$/;"	f	class:llvm::MachineInstrBuilder
addTargetFlag	CodeGen/MachineOperand.h	/^  void addTargetFlag(unsigned char F) {$/;"	f	class:llvm::MachineOperand
addTargetIndex	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &addTargetIndex(unsigned Idx, int64_t Offset = 0,$/;"	f	class:llvm::MachineInstrBuilder
addTemplateArg	TableGen/Record.h	/^  void addTemplateArg(Init *Name) {$/;"	f	class:llvm::Record
addTemplateArg	TableGen/Record.h	/^  void addTemplateArg(StringRef Name) {$/;"	f	class:llvm::Record
addToFrontier	Analysis/DominanceFrontier.h	/^  void addToFrontier(iterator I, BasicBlock *Node) {$/;"	f	class:llvm::DominanceFrontierBase
addToHeuristicList	CodeGen/PBQP/HeuristicBase.h	/^    void addToHeuristicList(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicBase
addToHeuristicReduceList	CodeGen/PBQP/Heuristics/Briggs.h	/^      void addToHeuristicReduceList(Graph::NodeItr nItr) {$/;"	f	class:PBQP::Heuristics::Briggs
addToList	CodeGen/SelectionDAGNodes.h	/^  void addToList(SDUse **List) {$/;"	f	class:llvm::SDUse
addToList	Use.h	/^  void addToList(Use **List) {$/;"	f	class:llvm::Use
addToMBBNumbering	CodeGen/MachineFunction.h	/^  unsigned addToMBBNumbering(MachineBasicBlock *MBB) {$/;"	f	class:llvm::MachineFunction
addToOptimalReduceList	CodeGen/PBQP/HeuristicBase.h	/^    void addToOptimalReduceList(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicBase
addToOptimalReductionList	CodeGen/PBQP/HeuristicBase.h	/^    void addToOptimalReductionList(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicBase
addToPacket	CodeGen/DFAPacketizer.h	/^  virtual MachineBasicBlock::iterator addToPacket(MachineInstr *MI) {$/;"	f	class:llvm::VLIWPacketizerList
addTopLevelLoop	Analysis/LoopInfo.h	/^  inline void addTopLevelLoop(Loop *New) {$/;"	f	class:llvm::LoopInfo
addTopLevelLoop	Analysis/LoopInfo.h	/^  void addTopLevelLoop(LoopT *New) {$/;"	f	class:llvm::LoopInfoBase
addTopLevelLoop	CodeGen/MachineLoopInfo.h	/^  inline void addTopLevelLoop(MachineLoop *New) {$/;"	f	class:llvm::MachineLoopInfo
addUse	CodeGen/SelectionDAGNodes.h	/^  void addUse(SDUse &U) { U.addToList(&UseList); }$/;"	f	class:llvm::SDNode
addUse	Value.h	/^  void addUse(Use &U) { U.addToList(&UseList); }$/;"	f	class:llvm::Value
addValue	Support/CommandLine.h	/^  void addValue(const T &V) { std::vector<DataType>::push_back(V); }$/;"	f	class:llvm::cl::list_storage
addValue	Support/CommandLine.h	/^  void addValue(const T &V) {$/;"	f	class:llvm::cl::bits_storage
addValue	Support/CommandLine.h	/^  void addValue(const T &V) {$/;"	f	class:llvm::cl::list_storage
addValue	TableGen/Record.h	/^  void addValue(const RecordVal &RV) {$/;"	f	class:llvm::Record
addVirtualRegisterDead	CodeGen/LiveVariables.h	/^  void addVirtualRegisterDead(unsigned IncomingReg, MachineInstr *MI,$/;"	f	class:llvm::LiveVariables
addVirtualRegisterKilled	CodeGen/LiveVariables.h	/^  void addVirtualRegisterKilled(unsigned IncomingReg, MachineInstr *MI,$/;"	f	class:llvm::LiveVariables
add_internal	ADT/ImmutableIntervalMap.h	/^  TreeTy *add_internal(value_type_ref V, TreeTy *T) {$/;"	f	class:llvm::ImutIntervalAVLFactory
add_internal	ADT/ImmutableSet.h	/^  TreeTy* add_internal(value_type_ref V, TreeTy* T) {$/;"	f	class:llvm::ImutAVLFactory
add_perms	Support/FileSystem.h	/^  add_perms       = 0x1000,$/;"	e	enum:llvm::sys::fs::perms
addr	LDDProfilingCommon.h	/^    long addr;$/;"	m	struct:memRW
addr	Support/MachO.h	/^      uint32_t addr;$/;"	m	struct:llvm::MachO::section
addr	Support/MachO.h	/^      uint64_t addr;$/;"	m	struct:llvm::MachO::section_64
address	CodeGen/MachineCodeInfo.h	/^  void *address() const {$/;"	f	class:llvm::MachineCodeInfo
address_family_not_supported	Support/system_error.h	/^  address_family_not_supported        = EAFNOSUPPORT,$/;"	e	enum:llvm::errc::_
address_in_use	Support/system_error.h	/^  address_in_use                      = EADDRINUSE,$/;"	e	enum:llvm::errc::_
address_not_available	Support/system_error.h	/^  address_not_available               = EADDRNOTAVAIL,$/;"	e	enum:llvm::errc::_
adjEdges	CodeGen/PBQP/Graph.h	/^      AdjEdgeList adjEdges;$/;"	m	class:PBQP::Graph::NodeEntry
adjEdgesBegin	CodeGen/PBQP/Graph.h	/^    AdjEdgeItr adjEdgesBegin(NodeItr nItr) {$/;"	f	class:PBQP::Graph
adjEdgesEnd	CodeGen/PBQP/Graph.h	/^    AdjEdgeItr adjEdgesEnd(NodeItr nItr) {$/;"	f	class:PBQP::Graph
adjacent	ADT/IntervalMap.h	/^  static inline bool adjacent(const T &a, const T &b) {$/;"	f	struct:llvm::IntervalMapInfo
adjacent	CodeGen/SlotIndexes.h	/^    static inline bool adjacent(const SlotIndex &a, const SlotIndex &b) {$/;"	f	struct:llvm::IntervalMapInfo
adjustForSegmentedStacks	Target/TargetFrameLowering.h	/^  virtual void adjustForSegmentedStacks(MachineFunction &MF) const { }$/;"	f	class:llvm::TargetFrameLowering
adjustFromLeftSib	ADT/IntervalMap.h	/^  int adjustFromLeftSib(unsigned Size, NodeBase &Sib, unsigned SSize, int Add) {$/;"	f	class:llvm::IntervalMapImpl::NodeBase
adjustSchedDependency	Target/TargetSubtargetInfo.h	/^  virtual void adjustSchedDependency(SUnit *def, SUnit *use,$/;"	f	class:llvm::TargetSubtargetInfo
adjustSiblingSizes	ADT/IntervalMap.h	/^void adjustSiblingSizes(NodeT *Node[], unsigned Nodes,$/;"	f	namespace:llvm::IntervalMapImpl
adjustsStack	CodeGen/MachineFrameInfo.h	/^  bool adjustsStack() const { return AdjustsStack; }$/;"	f	class:llvm::MachineFrameInfo
advance	ADT/FoldingSet.h	/^  void advance() {$/;"	f	class:llvm::FoldingSetBucketIteratorImpl
advance	ADT/IntervalMap.h	/^  void advance() {$/;"	f	class:llvm::IntervalMapOverlaps
advance	CodeGen/MachineInstrBundle.h	/^  void advance() {$/;"	f	class:llvm::MachineOperandIteratorBase
advance	CodeGen/ScoreboardHazardRecognizer.h	/^    void advance() {$/;"	f	class:llvm::ScoreboardHazardRecognizer::Scoreboard
advance	MC/MCRegisterInfo.h	/^    unsigned advance() {$/;"	f	class:llvm::MCRegisterInfo::DiffListIterator
advancePastNonTerminators	Support/CFG.h	/^  inline void advancePastNonTerminators() {$/;"	f	class:llvm::PredIterator
advanceRegionSucc	Analysis/RegionIterator.h	/^  void advanceRegionSucc() {$/;"	f	class:llvm::RNSuccIterator
advanceTo	ADT/IntervalMap.h	/^  void advanceTo(KeyT x) {$/;"	f	class:llvm::IntervalMap::const_iterator
advanceTo	ADT/IntervalMap.h	/^  void advanceTo(KeyType x) {$/;"	f	class:llvm::IntervalMapOverlaps
advanceTo	CodeGen/LiveInterval.h	/^    iterator advanceTo(iterator I, SlotIndex Pos) {$/;"	f	class:llvm::LiveInterval
advanceToNextBB	Support/InstIterator.h	/^  inline void advanceToNextBB() {$/;"	f	class:llvm::InstIterator
alias	Analysis/AliasAnalysis.h	/^  AliasResult alias(const Value *V1, const Value *V2) {$/;"	f	class:llvm::AliasAnalysis
alias	Analysis/AliasAnalysis.h	/^  AliasResult alias(const Value *V1, uint64_t V1Size,$/;"	f	class:llvm::AliasAnalysis
alias	Support/CommandLine.h	/^  alias(const M0t &M0, const M1t &M1) : Option(Optional, Hidden), AliasFor(0) {$/;"	f	class:llvm::cl::alias
alias	Support/CommandLine.h	/^  alias(const M0t &M0, const M1t &M1, const M2t &M2)$/;"	f	class:llvm::cl::alias
alias	Support/CommandLine.h	/^  alias(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3)$/;"	f	class:llvm::cl::alias
alias	Support/CommandLine.h	/^  explicit alias(const M0t &M0) : Option(Optional, Hidden), AliasFor(0) {$/;"	f	class:llvm::cl::alias
alias	Support/CommandLine.h	/^class alias : public Option {$/;"	c	namespace:llvm::cl
alias_begin	Module.h	/^  alias_iterator       alias_begin()            { return AliasList.begin(); }$/;"	f	class:llvm::Module
alias_begin	Module.h	/^  const_alias_iterator alias_begin() const      { return AliasList.begin(); }$/;"	f	class:llvm::Module
alias_empty	Module.h	/^  bool                 alias_empty() const      { return AliasList.empty(); }$/;"	f	class:llvm::Module
alias_end	Module.h	/^  alias_iterator       alias_end  ()            { return AliasList.end();   }$/;"	f	class:llvm::Module
alias_end	Module.h	/^  const_alias_iterator alias_end  () const      { return AliasList.end();   }$/;"	f	class:llvm::Module
alias_iterator	Module.h	/^  typedef AliasListType::iterator                        alias_iterator;$/;"	t	class:llvm::Module
alias_size	Module.h	/^  size_t               alias_size () const      { return AliasList.size();  }$/;"	f	class:llvm::Module
aliasopt	Support/CommandLine.h	/^  explicit aliasopt(Option &O) : Opt(O) {}$/;"	f	struct:llvm::cl::aliasopt
aliasopt	Support/CommandLine.h	/^struct aliasopt {$/;"	s	namespace:llvm::cl
align	Support/MachO.h	/^      uint32_t align;$/;"	m	struct:llvm::MachO::fat_arch
align	Support/MachO.h	/^      uint32_t align;$/;"	m	struct:llvm::MachO::section
align	Support/MachO.h	/^      uint32_t align;$/;"	m	struct:llvm::MachO::section_64
align	Support/OutputBuffer.h	/^    void align(unsigned Boundary) {$/;"	f	class:llvm::OutputBuffer
align	Target/TargetLowering.h	/^    unsigned     align;       \/\/ alignment$/;"	m	struct:llvm::TargetLowering::IntrinsicInfo
alignOf	Support/AlignOf.h	/^inline unsigned alignOf() { return AlignOf<T>::Alignment; }$/;"	f	namespace:llvm
align_data	Support/ThreadLocal.h	/^        ThreadLocalDataTy align_data;$/;"	m	union:llvm::sys::ThreadLocalImpl::__anon135
aligned	Support/AlignOf.h	/^template <> struct AlignedCharArrayImpl<1> { char aligned; };$/;"	m	struct:llvm::AlignedCharArrayImpl
aligned	Support/AlignOf.h	/^template <> struct AlignedCharArrayImpl<2> { short aligned; };$/;"	m	struct:llvm::AlignedCharArrayImpl
aligned	Support/AlignOf.h	/^template <> struct AlignedCharArrayImpl<4> { int aligned; };$/;"	m	struct:llvm::AlignedCharArrayImpl
aligned	Support/AlignOf.h	/^template <> struct AlignedCharArrayImpl<8> { double aligned; };$/;"	m	struct:llvm::AlignedCharArrayImpl
aligned	Support/Endian.h	/^enum alignment {unaligned, aligned};$/;"	e	enum:llvm::support::alignment
aligned_big16_t	Support/Endian.h	/^                     <int16_t, big, aligned>    aligned_big16_t;$/;"	t	namespace:llvm::support
aligned_big32_t	Support/Endian.h	/^                     <int32_t, big, aligned>    aligned_big32_t;$/;"	t	namespace:llvm::support
aligned_big64_t	Support/Endian.h	/^                     <int64_t, big, aligned>    aligned_big64_t;$/;"	t	namespace:llvm::support
aligned_big8_t	Support/Endian.h	/^                     <int8_t, big, aligned>     aligned_big8_t;$/;"	t	namespace:llvm::support
aligned_little16_t	Support/Endian.h	/^                     <int16_t, little, aligned> aligned_little16_t;$/;"	t	namespace:llvm::support
aligned_little32_t	Support/Endian.h	/^                     <int32_t, little, aligned> aligned_little32_t;$/;"	t	namespace:llvm::support
aligned_little64_t	Support/Endian.h	/^                     <int64_t, little, aligned> aligned_little64_t;$/;"	t	namespace:llvm::support
aligned_little8_t	Support/Endian.h	/^                     <int8_t, little, aligned>  aligned_little8_t;$/;"	t	namespace:llvm::support
aligned_ubig16_t	Support/Endian.h	/^                    <uint16_t, big, aligned>    aligned_ubig16_t;$/;"	t	namespace:llvm::support
aligned_ubig32_t	Support/Endian.h	/^                    <uint32_t, big, aligned>    aligned_ubig32_t;$/;"	t	namespace:llvm::support
aligned_ubig64_t	Support/Endian.h	/^                    <uint64_t, big, aligned>    aligned_ubig64_t;$/;"	t	namespace:llvm::support
aligned_ubig8_t	Support/Endian.h	/^                    <uint8_t, big, aligned>     aligned_ubig8_t;$/;"	t	namespace:llvm::support
aligned_ulittle16_t	Support/Endian.h	/^                    <uint16_t, little, aligned> aligned_ulittle16_t;$/;"	t	namespace:llvm::support
aligned_ulittle32_t	Support/Endian.h	/^                    <uint32_t, little, aligned> aligned_ulittle32_t;$/;"	t	namespace:llvm::support
aligned_ulittle64_t	Support/Endian.h	/^                    <uint64_t, little, aligned> aligned_ulittle64_t;$/;"	t	namespace:llvm::support
aligned_ulittle8_t	Support/Endian.h	/^                    <uint8_t, little, aligned>  aligned_ulittle8_t;$/;"	t	namespace:llvm::support
alignment	Support/Endian.h	/^enum alignment {unaligned, aligned};$/;"	g	namespace:llvm::support
alignment_access_helper	Support/Endian.h	/^struct alignment_access_helper<value_type, aligned>$/;"	s	namespace:llvm::support::detail
alignment_access_helper	Support/Endian.h	/^struct alignment_access_helper<value_type, unaligned>$/;"	s	namespace:llvm::support::detail
all	ADT/BitVector.h	/^  bool all() const {$/;"	f	class:llvm::BitVector
all	ADT/SmallBitVector.h	/^  bool all() const {$/;"	f	class:llvm::SmallBitVector
allInComplete	TableGen/Record.h	/^  bool allInComplete() const {$/;"	f	class:llvm::BitsInit
allReferencesDropped	Analysis/CallGraph.h	/^  void allReferencesDropped() {$/;"	f	class:llvm::CallGraphNode
allUsesReplacedWith	ADT/ValueMap.h	/^  virtual void allUsesReplacedWith(Value *new_key) {$/;"	f	class:llvm::ValueMapCallbackVH
all_all	Support/FileSystem.h	/^  all_all      = owner_all | group_all | others_all,$/;"	e	enum:llvm::sys::fs::perms
allnodes_begin	CodeGen/SelectionDAG.h	/^  allnodes_const_iterator allnodes_begin() const { return AllNodes.begin(); }$/;"	f	class:llvm::SelectionDAG
allnodes_begin	CodeGen/SelectionDAG.h	/^  allnodes_iterator allnodes_begin() { return AllNodes.begin(); }$/;"	f	class:llvm::SelectionDAG
allnodes_const_iterator	CodeGen/SelectionDAG.h	/^  typedef ilist<SDNode>::const_iterator allnodes_const_iterator;$/;"	t	class:llvm::SelectionDAG
allnodes_end	CodeGen/SelectionDAG.h	/^  allnodes_const_iterator allnodes_end() const { return AllNodes.end(); }$/;"	f	class:llvm::SelectionDAG
allnodes_end	CodeGen/SelectionDAG.h	/^  allnodes_iterator allnodes_end() { return AllNodes.end(); }$/;"	f	class:llvm::SelectionDAG
allnodes_iterator	CodeGen/SelectionDAG.h	/^  typedef ilist<SDNode>::iterator allnodes_iterator;$/;"	t	class:llvm::SelectionDAG
allnodes_size	CodeGen/SelectionDAG.h	/^  ilist<SDNode>::size_type allnodes_size() const {$/;"	f	class:llvm::SelectionDAG
allocateBuckets	ADT/DenseMap.h	/^  LargeRep allocateBuckets(unsigned Num) {$/;"	f	class:llvm::SmallDenseMap
allocateBuckets	ADT/DenseMap.h	/^  bool allocateBuckets(unsigned Num) {$/;"	f	class:llvm::DenseMap
allocateSeparateGVMemory	Target/TargetJITInfo.h	/^    virtual bool allocateSeparateGVMemory() const { return false; }$/;"	f	class:llvm::TargetJITInfo
allocateSpace	CodeGen/JITCodeEmitter.h	/^  virtual void *allocateSpace(uintptr_t Size, unsigned Alignment) {$/;"	f	class:llvm::JITCodeEmitter
allocateSpace	CodeGen/MachineCodeEmitter.h	/^  virtual void *allocateSpace(uintptr_t Size, unsigned Alignment) {$/;"	f	class:llvm::MachineCodeEmitter
allocateThreadLocalMemory	Target/TargetJITInfo.h	/^    virtual char* allocateThreadLocalMemory(size_t size) {$/;"	f	class:llvm::TargetJITInfo
allocator	ADT/IntervalMap.h	/^  Allocator &allocator;$/;"	m	class:llvm::IntervalMap
allowedSets	CodeGen/RegAllocPBQP.h	/^    AllowedSetMap allowedSets;$/;"	m	class:llvm::PBQPRAProblem
allowsUnalignedMemoryAccesses	Target/TargetLowering.h	/^  virtual bool allowsUnalignedMemoryAccesses(EVT) const {$/;"	f	class:llvm::TargetLowering
already_connected	Support/system_error.h	/^  already_connected                   = EISCONN,$/;"	e	enum:llvm::errc::_
already_exists	Support/system_error.h	/^  already_exists          = 183  \/\/ ERROR_ALREADY_EXISTS$/;"	e	enum:llvm::windows_error::_
amdil	ADT/Triple.h	/^    amdil,   \/\/ amdil: amd IL$/;"	e	enum:llvm::Triple::ArchType
analyzeCompare	Target/TargetInstrInfo.h	/^  virtual bool analyzeCompare(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
analyzeSelect	Target/TargetInstrInfo.h	/^  virtual bool analyzeSelect(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
antiDep	LDDProfilingCommon.h	/^    size_t antiDep;$/;"	m	struct:dInfo
any	ADT/BitVector.h	/^  bool any() const {$/;"	f	class:llvm::BitVector
any	ADT/SmallBitVector.h	/^  bool any() const {$/;"	f	class:llvm::SmallBitVector
anyCommon	ADT/BitVector.h	/^  bool anyCommon(const BitVector &RHS) const {$/;"	f	class:llvm::BitVector
anyCommon	ADT/SmallBitVector.h	/^  bool anyCommon(const SmallBitVector &RHS) const {$/;"	f	class:llvm::SmallBitVector
anyKnown	Analysis/MemoryBuiltins.h	/^  bool anyKnown(SizeOffsetEvalType SizeOffset) {$/;"	f	class:llvm::ObjectSizeOffsetEvaluator
api_pred_ty	Support/PatternMatch.h	/^  api_pred_ty(const APInt *&R) : Res(R) {}$/;"	f	struct:llvm::PatternMatch::api_pred_ty
api_pred_ty	Support/PatternMatch.h	/^struct api_pred_ty : public Predicate {$/;"	s	namespace:llvm::PatternMatch
apint_match	Support/PatternMatch.h	/^  apint_match(const APInt *&R) : Res(R) {}$/;"	f	struct:llvm::PatternMatch::apint_match
apint_match	Support/PatternMatch.h	/^struct apint_match {$/;"	s	namespace:llvm::PatternMatch
append	ADT/SmallString.h	/^  void append(StringRef RHS) {$/;"	f	class:llvm::SmallString
append	ADT/SmallString.h	/^  void append(const SmallVectorImpl<char> &RHS) {$/;"	f	class:llvm::SmallString
append	ADT/SmallString.h	/^  void append(in_iter S, in_iter E) {$/;"	f	class:llvm::SmallString
append	ADT/SmallString.h	/^  void append(size_t NumInputs, char Elt) {$/;"	f	class:llvm::SmallString
append	ADT/SmallVector.h	/^  void append(in_iter in_start, in_iter in_end) {$/;"	f	class:llvm::SmallVectorImpl
append	ADT/SmallVector.h	/^  void append(size_type NumInputs, const T &Elt) {$/;"	f	class:llvm::SmallVectorImpl
appendModuleInlineAsm	Module.h	/^  void appendModuleInlineAsm(StringRef Asm) {$/;"	f	class:llvm::Module
applicator	Support/CommandLine.h	/^template<> struct applicator<FormattingFlags> {$/;"	s	namespace:llvm::cl
applicator	Support/CommandLine.h	/^template<> struct applicator<MiscFlags> {$/;"	s	namespace:llvm::cl
applicator	Support/CommandLine.h	/^template<> struct applicator<NumOccurrencesFlag> {$/;"	s	namespace:llvm::cl
applicator	Support/CommandLine.h	/^template<> struct applicator<OptionHidden> {$/;"	s	namespace:llvm::cl
applicator	Support/CommandLine.h	/^template<> struct applicator<ValueExpected> {$/;"	s	namespace:llvm::cl
applicator	Support/CommandLine.h	/^template<> struct applicator<const char*> {$/;"	s	namespace:llvm::cl
applicator	Support/CommandLine.h	/^template<class Mod> struct applicator {$/;"	s	namespace:llvm::cl
applicator	Support/CommandLine.h	/^template<unsigned n> struct applicator<char[n]> {$/;"	s	namespace:llvm::cl
applicator	Support/CommandLine.h	/^template<unsigned n> struct applicator<const char[n]> {$/;"	s	namespace:llvm::cl
apply	Support/CommandLine.h	/^  void apply(Opt &O) const { O.setInitialValue(Init); }$/;"	f	struct:llvm::cl::initializer
apply	Support/CommandLine.h	/^  void apply(Opt &O) const { O.setLocation(O, Loc); }$/;"	f	struct:llvm::cl::LocationClass
apply	Support/CommandLine.h	/^  void apply(Opt &O) const {$/;"	f	class:llvm::cl::ValuesClass
apply	Support/CommandLine.h	/^  void apply(Option &O) const { O.setDescription(Desc); }$/;"	f	struct:llvm::cl::desc
apply	Support/CommandLine.h	/^  void apply(Option &O) const { O.setValueStr(Desc); }$/;"	f	struct:llvm::cl::value_desc
apply	Support/CommandLine.h	/^  void apply(alias &A) const { A.setAliasFor(Opt); }$/;"	f	struct:llvm::cl::aliasopt
apply	Support/CommandLine.h	/^  void apply(list<D, S, P> &L) const { L.setNumAdditionalVals(AdditionalVals); }$/;"	f	struct:llvm::cl::multi_val
apply	Support/CommandLine.h	/^void apply(const Mod &M, Opt *O) {$/;"	f	namespace:llvm::cl
applyMask	ADT/BitVector.h	/^  void applyMask(const uint32_t *Mask, unsigned MaskWords) {$/;"	f	class:llvm::BitVector
applyMask	ADT/SmallBitVector.h	/^  void applyMask(const uint32_t *Mask, unsigned MaskWords) {$/;"	f	class:llvm::SmallBitVector
applyR0	CodeGen/PBQP/HeuristicSolver.h	/^    void applyR0(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
applyR1	CodeGen/PBQP/HeuristicSolver.h	/^    void applyR1(Graph::NodeItr xnItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
applyR2	CodeGen/PBQP/HeuristicSolver.h	/^    void applyR2(Graph::NodeItr xnItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
archPath	Bitcode/Archive.h	/^    sys::Path archPath;       \/\/\/< Path to the archive file we read\/write$/;"	m	class:llvm::Archive
archive	Support/FileSystem.h	/^    archive,                  \/\/\/< ar style archive file$/;"	e	enum:llvm::sys::fs::file_magic::_
areLoadsFromSameBasePtr	Target/TargetInstrInfo.h	/^  virtual bool areLoadsFromSameBasePtr(SDNode *Load1, SDNode *Load2,$/;"	f	class:llvm::TargetInstrInfo
arena_trashed	Support/system_error.h	/^  arena_trashed           = 7, \/\/ ERROR_ARENA_TRASHED,$/;"	e	enum:llvm::windows_error::_
argList	Analysis/PathProfileInfo.h	/^  std::string argList;$/;"	m	class:llvm::PathProfileInfo
arg_begin	Function.h	/^  arg_iterator arg_begin() {$/;"	f	class:llvm::Function
arg_begin	Function.h	/^  const_arg_iterator arg_begin() const {$/;"	f	class:llvm::Function
arg_begin	Support/CallSite.h	/^  IterTy arg_begin() const {$/;"	f	class:llvm::CallSiteBase
arg_begin	TableGen/Record.h	/^  inline const_arg_iterator  arg_begin() const { return Args.begin(); }$/;"	f	class:llvm::DagInit
arg_empty	Support/CallSite.h	/^  bool arg_empty() const { return arg_end() == arg_begin(); }$/;"	f	class:llvm::CallSiteBase
arg_empty	TableGen/Record.h	/^  inline bool                arg_empty() const { return Args.empty(); }$/;"	f	class:llvm::DagInit
arg_end	Function.h	/^  arg_iterator arg_end() {$/;"	f	class:llvm::Function
arg_end	Function.h	/^  const_arg_iterator arg_end() const {$/;"	f	class:llvm::Function
arg_end	Support/CallSite.h	/^  IterTy arg_end() const { return (*this)->op_end() - getArgumentEndOffset(); }$/;"	f	class:llvm::CallSiteBase
arg_end	TableGen/Record.h	/^  inline const_arg_iterator  arg_end  () const { return Args.end();   }$/;"	f	class:llvm::DagInit
arg_iterator	Function.h	/^  typedef ArgumentListType::iterator arg_iterator;$/;"	t	class:llvm::Function
arg_iterator	Support/CallSite.h	/^  typedef IterTy arg_iterator;$/;"	t	class:llvm::CallSiteBase
arg_size	Support/CallSite.h	/^  unsigned arg_size() const { return unsigned(arg_end() - arg_begin()); }$/;"	f	class:llvm::CallSiteBase
arg_size	TableGen/Record.h	/^  inline size_t              arg_size () const { return Args.size();  }$/;"	f	class:llvm::DagInit
argument_list_too_long	Support/system_error.h	/^  argument_list_too_long              = E2BIG,$/;"	e	enum:llvm::errc::_
argument_out_of_domain	Support/system_error.h	/^  argument_out_of_domain              = EDOM,$/;"	e	enum:llvm::errc::_
argument_type	ADT/SetVector.h	/^    typedef typename UnaryPredicate::argument_type argument_type;$/;"	t	class:llvm::SetVector::TestAndEraseFromSet
arm	ADT/Triple.h	/^    arm,     \/\/ ARM; arm, armv.*, xscale$/;"	e	enum:llvm::Triple::ArchType
arr1	Support/AlignOf.h	/^    char arr1[sizeof(T1)], arr2[sizeof(T2)], arr3[sizeof(T3)], arr4[sizeof(T4)];$/;"	m	union:llvm::AlignedCharArrayUnion::SizerImpl
arr2	Support/AlignOf.h	/^    char arr1[sizeof(T1)], arr2[sizeof(T2)], arr3[sizeof(T3)], arr4[sizeof(T4)];$/;"	m	union:llvm::AlignedCharArrayUnion::SizerImpl
arr3	Support/AlignOf.h	/^    char arr1[sizeof(T1)], arr2[sizeof(T2)], arr3[sizeof(T3)], arr4[sizeof(T4)];$/;"	m	union:llvm::AlignedCharArrayUnion::SizerImpl
arr4	Support/AlignOf.h	/^    char arr1[sizeof(T1)], arr2[sizeof(T2)], arr3[sizeof(T3)], arr4[sizeof(T4)];$/;"	m	union:llvm::AlignedCharArrayUnion::SizerImpl
array_pod_sort	ADT/STLExtras.h	/^inline void array_pod_sort(IteratorTy Start, IteratorTy End) {$/;"	f	namespace:llvm
array_pod_sort	ADT/STLExtras.h	/^inline void array_pod_sort(IteratorTy Start, IteratorTy End,$/;"	f	namespace:llvm
array_pod_sort_comparator	ADT/STLExtras.h	/^inline int array_pod_sort_comparator(const void *P1, const void *P2) {$/;"	f	namespace:llvm
asImmutableMap	ADT/ImmutableMap.h	/^  ImmutableMap<KeyT, ValT> asImmutableMap() const {$/;"	f	class:llvm::ImmutableMapRef
asImmutableSet	ADT/ImmutableSet.h	/^  ImmutableSet<ValT> asImmutableSet(bool canonicalize = true) const {$/;"	f	class:llvm::ImmutableSetRef
ashr	ADT/APInt.h	/^inline APInt ashr(const APInt& LHS, unsigned shiftAmt) {$/;"	f	namespace:llvm::APIntOps
asin	Target/TargetLibraryInfo.h	/^      asin,$/;"	e	enum:llvm::LibFunc::Func
asinf	Target/TargetLibraryInfo.h	/^      asinf,$/;"	e	enum:llvm::LibFunc::Func
asinh	Target/TargetLibraryInfo.h	/^      asinh,$/;"	e	enum:llvm::LibFunc::Func
asinhf	Target/TargetLibraryInfo.h	/^      asinhf,$/;"	e	enum:llvm::LibFunc::Func
asinhl	Target/TargetLibraryInfo.h	/^      asinhl,$/;"	e	enum:llvm::LibFunc::Func
asinl	Target/TargetLibraryInfo.h	/^      asinl,$/;"	e	enum:llvm::LibFunc::Func
assign	ADT/SmallString.h	/^  void assign(StringRef RHS) {$/;"	f	class:llvm::SmallString
assign	ADT/SmallString.h	/^  void assign(const SmallVectorImpl<char> &RHS) {$/;"	f	class:llvm::SmallString
assign	ADT/SmallString.h	/^  void assign(in_iter S, in_iter E) {$/;"	f	class:llvm::SmallString
assign	ADT/SmallString.h	/^  void assign(size_t NumElts, char Elt) {$/;"	f	class:llvm::SmallString
assign	ADT/SmallVector.h	/^  void assign(unsigned NumElts, const T &Elt) {$/;"	f	class:llvm::SmallVectorImpl
assign	ADT/ilist.h	/^  template<class InIt> void assign(InIt first1, InIt last1) {$/;"	f	struct:llvm::ilist
assign	ADT/ilist.h	/^  void assign(size_type count, const NodeTy &val) {$/;"	f	struct:llvm::ilist
assign	Support/FileSystem.h	/^  void assign(const Twine &path, file_status st = file_status()) {$/;"	f	class:llvm::sys::fs::directory_entry
assign	Support/system_error.h	/^  void assign(int _val, const error_category& _cat) {$/;"	f	class:llvm::error_code
assign	Support/system_error.h	/^  void assign(int _val, const error_category& _cat) {$/;"	f	class:llvm::error_condition
assignPassManager	Pass.h	/^  virtual void assignPassManager(PMStack &,$/;"	f	class:llvm::Pass
atBegin	ADT/IntervalMap.h	/^  bool atBegin() const { return path.atBegin(); }$/;"	f	class:llvm::IntervalMap::const_iterator
atBegin	ADT/IntervalMap.h	/^  bool atBegin() const {$/;"	f	class:llvm::IntervalMapImpl::Path
atBeginning	ADT/ImmutableSet.h	/^  bool atBeginning() const {$/;"	f	class:llvm::ImutAVLTreeGenericIterator
atEnd	ADT/ImmutableSet.h	/^  bool atEnd() const { return stack.empty(); }$/;"	f	class:llvm::ImutAVLTreeGenericIterator
atEnd	Analysis/ConstantsScanner.h	/^  inline bool atEnd() const { return InstI.atEnd(); }$/;"	f	class:llvm::constant_iterator
atEnd	CodeGen/MachineRegisterInfo.h	/^    bool atEnd() const { return Op == 0; }$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
atEnd	CodeGen/SelectionDAGNodes.h	/^    bool atEnd() const { return Op == 0; }$/;"	f	class:llvm::SDNode::use_iterator
atEnd	Support/InstIterator.h	/^  inline bool atEnd() const { return BB == BBs->end(); }$/;"	f	class:llvm::InstIterator
atEnd	Use.h	/^  bool atEnd() const { return U == 0; }$/;"	f	class:llvm::value_use_iterator
atIssueLimit	CodeGen/ScheduleHazardRecognizer.h	/^  virtual bool atIssueLimit() const { return false; }$/;"	f	class:llvm::ScheduleHazardRecognizer
atLastEntry	ADT/IntervalMap.h	/^  bool atLastEntry(unsigned Level) const {$/;"	f	class:llvm::IntervalMapImpl::Path
atan	Target/TargetLibraryInfo.h	/^      atan,$/;"	e	enum:llvm::LibFunc::Func
atan2	Target/TargetLibraryInfo.h	/^      atan2,$/;"	e	enum:llvm::LibFunc::Func
atan2f	Target/TargetLibraryInfo.h	/^      atan2f,$/;"	e	enum:llvm::LibFunc::Func
atan2l	Target/TargetLibraryInfo.h	/^      atan2l,$/;"	e	enum:llvm::LibFunc::Func
atanf	Target/TargetLibraryInfo.h	/^      atanf,$/;"	e	enum:llvm::LibFunc::Func
atanh	Target/TargetLibraryInfo.h	/^      atanh,$/;"	e	enum:llvm::LibFunc::Func
atanhf	Target/TargetLibraryInfo.h	/^      atanhf,$/;"	e	enum:llvm::LibFunc::Func
atanhl	Target/TargetLibraryInfo.h	/^      atanhl,$/;"	e	enum:llvm::LibFunc::Func
atanl	Target/TargetLibraryInfo.h	/^      atanl,$/;"	e	enum:llvm::LibFunc::Func
available	Support/FileSystem.h	/^  uint64_t available;$/;"	m	struct:llvm::sys::fs::space_info
avoidWriteAfterWrite	Target/TargetRegisterInfo.h	/^  virtual bool avoidWriteAfterWrite(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::TargetRegisterInfo
b	ADT/IntervalMap.h	/^  const typename MapB::const_iterator &b() const { return posB; }$/;"	f	class:llvm::IntervalMapOverlaps
b	Object/ObjectFile.h	/^    uint16_t a, b;$/;"	m	struct:llvm::object::DataRefImpl::__anon75
b	Object/ObjectFile.h	/^    uint32_t a, b;$/;"	m	struct:llvm::object::DataRefImpl::__anon76
back	ADT/ArrayRef.h	/^    T &back() const {$/;"	f	class:llvm::MutableArrayRef
back	ADT/ArrayRef.h	/^    const T &back() const {$/;"	f	class:llvm::ArrayRef
back	ADT/SetVector.h	/^  const T &back() const {$/;"	f	class:llvm::SetVector
back	ADT/SmallVector.h	/^  const_reference back() const {$/;"	f	class:llvm::SmallVectorTemplateCommon
back	ADT/SmallVector.h	/^  reference back() {$/;"	f	class:llvm::SmallVectorTemplateCommon
back	ADT/StringRef.h	/^    char back() const {$/;"	f	class:llvm::StringRef
back	ADT/TinyPtrVector.h	/^  EltTy back() const {$/;"	f	class:llvm::TinyPtrVector
back	ADT/ilist.h	/^  const_reference back() const {$/;"	f	class:llvm::iplist
back	ADT/ilist.h	/^  reference back() {$/;"	f	class:llvm::iplist
back	BasicBlock.h	/^  inline       Instruction       &back()       { return InstList.back();  }$/;"	f	class:llvm::BasicBlock
back	BasicBlock.h	/^  inline const Instruction       &back() const { return InstList.back();  }$/;"	f	class:llvm::BasicBlock
back	Bitcode/Archive.h	/^    inline       ArchiveMember&   back()         { return members.back();   }$/;"	f	class:llvm::Archive
back	Bitcode/Archive.h	/^    inline const ArchiveMember&   back()   const { return members.back();   }$/;"	f	class:llvm::Archive
back	CodeGen/MachineBasicBlock.h	/^  MachineInstr& back()  { return Insts.back(); }$/;"	f	class:llvm::MachineBasicBlock
back	CodeGen/MachineBasicBlock.h	/^  const MachineInstr& back()  const { return Insts.back(); }$/;"	f	class:llvm::MachineBasicBlock
back	CodeGen/MachineFunction.h	/^        MachineBasicBlock & back()       { return BasicBlocks.back(); }$/;"	f	class:llvm::MachineFunction
back	CodeGen/MachineFunction.h	/^  const MachineBasicBlock & back() const { return BasicBlocks.back(); }$/;"	f	class:llvm::MachineFunction
back	Function.h	/^        BasicBlock        &back()       { return BasicBlocks.back();  }$/;"	f	class:llvm::Function
back	Function.h	/^  const BasicBlock        &back() const { return BasicBlocks.back();  }$/;"	f	class:llvm::Function
backpropagate	CodeGen/PBQP/HeuristicSolver.h	/^    void backpropagate() {$/;"	f	class:PBQP::HeuristicSolverImpl
bad_address	Support/system_error.h	/^  bad_address                         = EFAULT,$/;"	e	enum:llvm::errc::_
bad_command	Support/system_error.h	/^  bad_command             = 22, \/\/ ERROR_BAD_COMMAND,$/;"	e	enum:llvm::windows_error::_
bad_environment	Support/system_error.h	/^  bad_environment         = 10, \/\/ ERROR_BAD_ENVIRONMENT,$/;"	e	enum:llvm::windows_error::_
bad_file_descriptor	Support/system_error.h	/^  bad_file_descriptor                 = EBADF,$/;"	e	enum:llvm::errc::_
bad_format	Support/system_error.h	/^  bad_format              = 11, \/\/ ERROR_BAD_FORMAT,$/;"	e	enum:llvm::windows_error::_
bad_length	Support/system_error.h	/^  bad_length              = 24, \/\/ ERROR_BAD_LENGTH,$/;"	e	enum:llvm::windows_error::_
bad_message	Support/system_error.h	/^  bad_message                         = EBADMSG,$/;"	e	enum:llvm::errc::_
bad_net_path	Support/system_error.h	/^  bad_net_path            = 53, \/\/ ERROR_BAD_NETPATH,$/;"	e	enum:llvm::windows_error::_
bad_unit	Support/system_error.h	/^  bad_unit                = 20, \/\/ ERROR_BAD_UNIT,$/;"	e	enum:llvm::windows_error::_
balanceTree	ADT/ImmutableSet.h	/^  TreeTy* balanceTree(TreeTy* L, value_type_ref V, TreeTy* R) {$/;"	f	class:llvm::ImutAVLFactory
base	ADT/PackedVector.h	/^                           std::numeric_limits<T>::is_signed> base;$/;"	t	class:llvm::PackedVector
base	ADT/StringSet.h	/^    typedef llvm::StringMap<char, AllocatorTy> base;$/;"	t	class:llvm::StringSet
base	ADT/ValueMap.h	/^  BaseT base() const { return I; }$/;"	f	class:llvm::ValueMapConstIterator
base	ADT/ValueMap.h	/^  BaseT base() const { return I; }$/;"	f	class:llvm::ValueMapIterator
base	Bitcode/Archive.h	/^    const char* base;         \/\/\/< Base of the memory mapped file data$/;"	m	class:llvm::Archive
base	Object/ObjectFile.h	/^  const uint8_t *base() const {$/;"	f	class:llvm::object::ObjectFile
base	Support/Memory.h	/^    void *base() const { return Address; }$/;"	f	class:llvm::sys::MemoryBlock
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitRecTy    *RHS) const { return Size == 1; }$/;"	f	class:llvm::BitsRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitRecTy    *RHS) const { return false; }$/;"	f	class:llvm::DagRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitRecTy    *RHS) const { return false; }$/;"	f	class:llvm::ListRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitRecTy    *RHS) const { return false; }$/;"	f	class:llvm::RecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitRecTy    *RHS) const { return false; }$/;"	f	class:llvm::RecordRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitRecTy    *RHS) const { return false; }$/;"	f	class:llvm::StringRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitRecTy    *RHS) const { return true; }$/;"	f	class:llvm::BitRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitRecTy    *RHS) const { return true; }$/;"	f	class:llvm::IntRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitsRecTy   *RHS) const { return false; }$/;"	f	class:llvm::DagRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitsRecTy   *RHS) const { return false; }$/;"	f	class:llvm::ListRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitsRecTy   *RHS) const { return false; }$/;"	f	class:llvm::RecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitsRecTy   *RHS) const { return false; }$/;"	f	class:llvm::RecordRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitsRecTy   *RHS) const { return false; }$/;"	f	class:llvm::StringRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitsRecTy   *RHS) const { return true; }$/;"	f	class:llvm::IntRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const BitsRecTy   *RHS) const {$/;"	f	class:llvm::BitsRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const DagRecTy    *RHS) const { return false; }$/;"	f	class:llvm::BitRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const DagRecTy    *RHS) const { return false; }$/;"	f	class:llvm::BitsRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const DagRecTy    *RHS) const { return false; }$/;"	f	class:llvm::IntRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const DagRecTy    *RHS) const { return false; }$/;"	f	class:llvm::ListRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const DagRecTy    *RHS) const { return false; }$/;"	f	class:llvm::RecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const DagRecTy    *RHS) const { return false; }$/;"	f	class:llvm::RecordRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const DagRecTy    *RHS) const { return false; }$/;"	f	class:llvm::StringRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const DagRecTy    *RHS) const { return true; }$/;"	f	class:llvm::DagRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const IntRecTy    *RHS) const { return false; }$/;"	f	class:llvm::DagRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const IntRecTy    *RHS) const { return false; }$/;"	f	class:llvm::ListRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const IntRecTy    *RHS) const { return false; }$/;"	f	class:llvm::RecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const IntRecTy    *RHS) const { return false; }$/;"	f	class:llvm::RecordRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const IntRecTy    *RHS) const { return false; }$/;"	f	class:llvm::StringRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const IntRecTy    *RHS) const { return true; }$/;"	f	class:llvm::BitRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const IntRecTy    *RHS) const { return true; }$/;"	f	class:llvm::BitsRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const IntRecTy    *RHS) const { return true; }$/;"	f	class:llvm::IntRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const ListRecTy   *RHS) const { return false; }$/;"	f	class:llvm::BitRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const ListRecTy   *RHS) const { return false; }$/;"	f	class:llvm::BitsRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const ListRecTy   *RHS) const { return false; }$/;"	f	class:llvm::DagRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const ListRecTy   *RHS) const { return false; }$/;"	f	class:llvm::IntRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const ListRecTy   *RHS) const { return false; }$/;"	f	class:llvm::RecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const ListRecTy   *RHS) const { return false; }$/;"	f	class:llvm::RecordRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const ListRecTy   *RHS) const { return false; }$/;"	f	class:llvm::StringRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const ListRecTy   *RHS) const {$/;"	f	class:llvm::ListRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const RecordRecTy *RHS) const { return false; }$/;"	f	class:llvm::BitRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const RecordRecTy *RHS) const { return false; }$/;"	f	class:llvm::BitsRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const RecordRecTy *RHS) const { return false; }$/;"	f	class:llvm::DagRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const RecordRecTy *RHS) const { return false; }$/;"	f	class:llvm::IntRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const RecordRecTy *RHS) const { return false; }$/;"	f	class:llvm::ListRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const RecordRecTy *RHS) const { return false; }$/;"	f	class:llvm::RecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const RecordRecTy *RHS) const { return false; }$/;"	f	class:llvm::StringRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const StringRecTy *RHS) const { return false; }$/;"	f	class:llvm::BitRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const StringRecTy *RHS) const { return false; }$/;"	f	class:llvm::BitsRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const StringRecTy *RHS) const { return false; }$/;"	f	class:llvm::DagRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const StringRecTy *RHS) const { return false; }$/;"	f	class:llvm::IntRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const StringRecTy *RHS) const { return false; }$/;"	f	class:llvm::ListRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const StringRecTy *RHS) const { return false; }$/;"	f	class:llvm::RecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const StringRecTy *RHS) const { return false; }$/;"	f	class:llvm::RecordRecTy
baseClassOf	TableGen/Record.h	/^  virtual bool baseClassOf(const StringRecTy *RHS) const { return true; }$/;"	f	class:llvm::StringRecTy
basic_collection_iterator	Support/YAMLParser.h	/^  basic_collection_iterator() : Base(0) {}$/;"	f	class:llvm::yaml::basic_collection_iterator
basic_collection_iterator	Support/YAMLParser.h	/^  basic_collection_iterator(BaseT *B) : Base(B) {}$/;"	f	class:llvm::yaml::basic_collection_iterator
basic_collection_iterator	Support/YAMLParser.h	/^class basic_collection_iterator$/;"	c	namespace:llvm::yaml
basic_parser	Support/CommandLine.h	/^class basic_parser : public basic_parser_impl {$/;"	c	namespace:llvm::cl
basic_parser_impl	Support/CommandLine.h	/^class basic_parser_impl {  \/\/ non-template implementation of basic_parser<t>$/;"	c	namespace:llvm::cl
begin	ADT/ArrayRef.h	/^    iterator begin() const { return Data; }$/;"	f	class:llvm::ArrayRef
begin	ADT/ArrayRef.h	/^    iterator begin() const { return data(); }$/;"	f	class:llvm::MutableArrayRef
begin	ADT/DenseMap.h	/^  inline const_iterator begin() const {$/;"	f	class:llvm::DenseMapBase
begin	ADT/DenseMap.h	/^  inline iterator begin() {$/;"	f	class:llvm::DenseMapBase
begin	ADT/DenseSet.h	/^  const_iterator begin() const { return ConstIterator(TheMap.begin()); }$/;"	f	class:llvm::DenseSet
begin	ADT/DenseSet.h	/^  iterator begin() { return Iterator(TheMap.begin()); }$/;"	f	class:llvm::DenseSet
begin	ADT/DepthFirstIterator.h	/^  static inline _Self begin(const GraphT& G) {$/;"	f	class:llvm::df_iterator
begin	ADT/DepthFirstIterator.h	/^  static inline _Self begin(const GraphT& G, SetType &S) {$/;"	f	class:llvm::df_iterator
begin	ADT/EquivalenceClasses.h	/^  iterator begin() const { return TheMapping.begin(); }$/;"	f	class:llvm::EquivalenceClasses
begin	ADT/FoldingSet.h	/^  const_iterator begin() const { return Vector.begin(); }$/;"	f	class:llvm::FoldingSetVector
begin	ADT/FoldingSet.h	/^  const_iterator begin() const { return const_iterator(Buckets); }$/;"	f	class:llvm::ContextualFoldingSet
begin	ADT/FoldingSet.h	/^  const_iterator begin() const { return const_iterator(Buckets); }$/;"	f	class:llvm::FoldingSet
begin	ADT/FoldingSet.h	/^  iterator begin() { return Vector.begin(); }$/;"	f	class:llvm::FoldingSetVector
begin	ADT/FoldingSet.h	/^  iterator begin() { return iterator(Buckets); }$/;"	f	class:llvm::ContextualFoldingSet
begin	ADT/FoldingSet.h	/^  iterator begin() { return iterator(Buckets); }$/;"	f	class:llvm::FoldingSet
begin	ADT/ImmutableList.h	/^  iterator begin() const { return iterator(X); }$/;"	f	class:llvm::ImmutableList
begin	ADT/ImmutableMap.h	/^  iterator begin() const { return iterator(Root); }$/;"	f	class:llvm::ImmutableMap
begin	ADT/ImmutableMap.h	/^  iterator begin() const { return iterator(Root); }$/;"	f	class:llvm::ImmutableMapRef
begin	ADT/ImmutableSet.h	/^  iterator begin() const { return iterator(Root); }$/;"	f	class:llvm::ImmutableSet
begin	ADT/ImmutableSet.h	/^  iterator begin() const { return iterator(Root); }$/;"	f	class:llvm::ImmutableSetRef
begin	ADT/ImmutableSet.h	/^  iterator begin() const { return iterator(this); }$/;"	f	class:llvm::ImutAVLTree
begin	ADT/IntervalMap.h	/^  const_iterator begin() const {$/;"	f	class:llvm::IntervalMap
begin	ADT/IntervalMap.h	/^  iterator begin() {$/;"	f	class:llvm::IntervalMap
begin	ADT/MapVector.h	/^  const_iterator begin() const {$/;"	f	class:llvm::MapVector
begin	ADT/MapVector.h	/^  iterator begin() {$/;"	f	class:llvm::MapVector
begin	ADT/PostOrderIterator.h	/^  inline rpo_iterator begin() { return Blocks.rbegin(); }$/;"	f	class:llvm::ReversePostOrderTraversal
begin	ADT/PostOrderIterator.h	/^  static inline _Self begin(GraphT G) { return _Self(GT::getEntryNode(G)); }$/;"	f	class:llvm::po_iterator
begin	ADT/PostOrderIterator.h	/^  static inline _Self begin(GraphT G, SetType &S) {$/;"	f	class:llvm::po_iterator
begin	ADT/SCCIterator.h	/^  static inline _Self begin(const GraphT &G){return _Self(GT::getEntryNode(G));}$/;"	f	class:llvm::scc_iterator
begin	ADT/ScopedHashTable.h	/^  iterator begin(const K &Key) {$/;"	f	class:llvm::ScopedHashTable
begin	ADT/SetVector.h	/^  const_iterator begin() const {$/;"	f	class:llvm::SetVector
begin	ADT/SetVector.h	/^  iterator begin() {$/;"	f	class:llvm::SetVector
begin	ADT/SmallPtrSet.h	/^  inline iterator begin() const {$/;"	f	class:llvm::SmallPtrSet
begin	ADT/SmallVector.h	/^  const_iterator begin() const { return (const_iterator)this->BeginX; }$/;"	f	class:llvm::SmallVectorTemplateCommon
begin	ADT/SmallVector.h	/^  iterator begin() { return (iterator)this->BeginX; }$/;"	f	class:llvm::SmallVectorTemplateCommon
begin	ADT/SparseBitVector.h	/^  iterator begin() const {$/;"	f	class:llvm::SparseBitVector
begin	ADT/SparseSet.h	/^  const_iterator begin() const { return Dense.begin(); }$/;"	f	class:llvm::SparseSet
begin	ADT/SparseSet.h	/^  iterator begin() { return Dense.begin(); }$/;"	f	class:llvm::SparseSet
begin	ADT/StringMap.h	/^  const_iterator begin() const {$/;"	f	class:llvm::StringMap
begin	ADT/StringMap.h	/^  iterator begin() {$/;"	f	class:llvm::StringMap
begin	ADT/StringRef.h	/^    iterator begin() const { return Data; }$/;"	f	class:llvm::StringRef
begin	ADT/TinyPtrVector.h	/^  const_iterator begin() const {$/;"	f	class:llvm::TinyPtrVector
begin	ADT/TinyPtrVector.h	/^  iterator begin() {$/;"	f	class:llvm::TinyPtrVector
begin	ADT/ValueMap.h	/^  inline const_iterator begin() const { return const_iterator(Map.begin()); }$/;"	f	class:llvm::ValueMap
begin	ADT/ValueMap.h	/^  inline iterator begin() { return iterator(Map.begin()); }$/;"	f	class:llvm::ValueMap
begin	ADT/ilist.h	/^  const_iterator begin() const {$/;"	f	class:llvm::iplist
begin	ADT/ilist.h	/^  iterator begin() {$/;"	f	class:llvm::iplist
begin	Analysis/AliasSetTracker.h	/^  const_iterator begin() const { return AliasSets.begin(); }$/;"	f	class:llvm::AliasSetTracker
begin	Analysis/AliasSetTracker.h	/^  iterator begin() const { return iterator(PtrList); }$/;"	f	class:llvm::AliasSet
begin	Analysis/AliasSetTracker.h	/^  iterator begin() { return AliasSets.begin(); }$/;"	f	class:llvm::AliasSetTracker
begin	Analysis/CallGraph.h	/^  inline       iterator begin()       { return FunctionMap.begin(); }$/;"	f	class:llvm::CallGraph
begin	Analysis/CallGraph.h	/^  inline const_iterator begin() const { return CalledFunctions.begin(); }$/;"	f	class:llvm::CallGraphNode
begin	Analysis/CallGraph.h	/^  inline const_iterator begin() const { return FunctionMap.begin(); }$/;"	f	class:llvm::CallGraph
begin	Analysis/CallGraph.h	/^  inline iterator begin() { return CalledFunctions.begin(); }$/;"	f	class:llvm::CallGraphNode
begin	Analysis/DominanceFrontier.h	/^  const_iterator begin() const { return Frontiers.begin(); }$/;"	f	class:llvm::DominanceFrontierBase
begin	Analysis/DominanceFrontier.h	/^  iterator       begin()       { return Frontiers.begin(); }$/;"	f	class:llvm::DominanceFrontierBase
begin	Analysis/Dominators.h	/^  const_iterator begin() const { return Children.begin(); }$/;"	f	class:llvm::DomTreeNodeBase
begin	Analysis/Dominators.h	/^  iterator begin()             { return Children.begin(); }$/;"	f	class:llvm::DomTreeNodeBase
begin	Analysis/IVUsers.h	/^  const_iterator begin() const { return IVUses.begin(); }$/;"	f	class:llvm::IVUsers
begin	Analysis/IVUsers.h	/^  iterator begin() { return IVUses.begin(); }$/;"	f	class:llvm::IVUsers
begin	Analysis/LoopInfo.h	/^  inline iterator begin() const { return LI.begin(); }$/;"	f	class:llvm::LoopInfo
begin	Analysis/LoopInfo.h	/^  iterator begin() const { return SubLoops.begin(); }$/;"	f	class:llvm::LoopBase
begin	Analysis/LoopInfo.h	/^  iterator begin() const { return TopLevelLoops.begin(); }$/;"	f	class:llvm::LoopInfoBase
begin	Analysis/LoopIterator.h	/^  POTIterator begin() {$/;"	f	class:llvm::LoopBlocksTraversal
begin	Analysis/RegionInfo.h	/^  const_iterator begin() const { return children.begin(); }$/;"	f	class:llvm::Region
begin	Analysis/RegionInfo.h	/^  iterator begin() { return children.begin(); }$/;"	f	class:llvm::Region
begin	Analysis/Trace.h	/^  const_iterator          begin() const { return BasicBlocks.begin(); }$/;"	f	class:llvm::Trace
begin	Analysis/Trace.h	/^  iterator                begin()       { return BasicBlocks.begin(); }$/;"	f	class:llvm::Trace
begin	BasicBlock.h	/^  inline const_iterator          begin() const { return InstList.begin(); }$/;"	f	class:llvm::BasicBlock
begin	BasicBlock.h	/^  inline iterator                begin()       { return InstList.begin(); }$/;"	f	class:llvm::BasicBlock
begin	Bitcode/Archive.h	/^    inline const_iterator         begin()  const { return members.begin();  }$/;"	f	class:llvm::Archive
begin	Bitcode/Archive.h	/^    inline iterator               begin()        { return members.begin();  }$/;"	f	class:llvm::Archive
begin	CallGraphSCCPass.h	/^  iterator begin() const { return Nodes.begin(); }$/;"	f	class:llvm::CallGraphSCC
begin	CodeGen/GCMetadata.h	/^    iterator begin() const { return StrategyList.begin(); }$/;"	f	class:llvm::GCModuleInfo
begin	CodeGen/GCMetadata.h	/^    iterator begin() { return SafePoints.begin(); }$/;"	f	class:llvm::GCFunctionInfo
begin	CodeGen/GCMetadataPrinter.h	/^    iterator begin() { return S->begin(); }$/;"	f	class:llvm::GCMetadataPrinter
begin	CodeGen/GCStrategy.h	/^    iterator begin() { return Functions.begin(); }$/;"	f	class:llvm::GCStrategy
begin	CodeGen/LiveInterval.h	/^    const_iterator begin() const { return ranges.begin(); }$/;"	f	class:llvm::LiveInterval
begin	CodeGen/LiveInterval.h	/^    iterator begin() { return ranges.begin(); }$/;"	f	class:llvm::LiveInterval
begin	CodeGen/LiveRangeEdit.h	/^  iterator begin() const { return NewRegs.begin()+FirstNew; }$/;"	f	class:llvm::LiveRangeEdit
begin	CodeGen/LiveStackAnalysis.h	/^    const_iterator begin() const { return S2IMap.begin(); }$/;"	f	class:llvm::LiveStacks
begin	CodeGen/LiveStackAnalysis.h	/^    iterator begin() { return S2IMap.begin(); }$/;"	f	class:llvm::LiveStacks
begin	CodeGen/MachineBasicBlock.h	/^  const_iterator          begin() const { return instr_begin();  }$/;"	f	class:llvm::MachineBasicBlock
begin	CodeGen/MachineBasicBlock.h	/^  iterator                begin()       { return instr_begin();  }$/;"	f	class:llvm::MachineBasicBlock
begin	CodeGen/MachineFunction.h	/^  const_iterator           begin() const { return BasicBlocks.begin(); }$/;"	f	class:llvm::MachineFunction
begin	CodeGen/MachineFunction.h	/^  iterator                 begin()       { return BasicBlocks.begin(); }$/;"	f	class:llvm::MachineFunction
begin	CodeGen/MachineLoopInfo.h	/^  inline iterator begin() const { return LI.begin(); }$/;"	f	class:llvm::MachineLoopInfo
begin	CodeGen/MachineScheduler.h	/^  iterator begin() { return Queue.begin(); }$/;"	f	class:llvm::ReadyQueue
begin	CodeGen/ScheduleDAG.h	/^    const_iterator begin() const { return Index2Node.begin(); }$/;"	f	class:llvm::ScheduleDAGTopologicalSort
begin	CodeGen/ScheduleDAG.h	/^    iterator begin() { return Index2Node.begin(); }$/;"	f	class:llvm::ScheduleDAGTopologicalSort
begin	CodeGen/ScheduleDAG.h	/^    static SUnitIterator begin(SUnit *N) { return SUnitIterator(N, 0); }$/;"	f	class:llvm::SUnitIterator
begin	CodeGen/ScheduleDAGInstrs.h	/^    MachineBasicBlock::iterator begin() const { return RegionBegin; }$/;"	f	class:llvm::ScheduleDAGInstrs
begin	CodeGen/SelectionDAGNodes.h	/^  static SDNodeIterator begin(const SDNode *N) { return SDNodeIterator(N, 0); }$/;"	f	class:llvm::SDNodeIterator
begin	Function.h	/^  const_iterator          begin() const { return BasicBlocks.begin(); }$/;"	f	class:llvm::Function
begin	Function.h	/^  iterator                begin()       { return BasicBlocks.begin(); }$/;"	f	class:llvm::Function
begin	MC/MCAssembler.h	/^  const_iterator begin() const { return Fragments.begin(); }$/;"	f	class:llvm::MCSectionData
begin	MC/MCAssembler.h	/^  const_iterator begin() const { return Sections.begin(); }$/;"	f	class:llvm::MCAssembler
begin	MC/MCAssembler.h	/^  iterator begin() { return Fragments.begin(); }$/;"	f	class:llvm::MCSectionData
begin	MC/MCAssembler.h	/^  iterator begin() { return Sections.begin(); }$/;"	f	class:llvm::MCAssembler
begin	MC/MCInst.h	/^  iterator begin() { return Operands.begin(); }$/;"	f	class:llvm::MCInst
begin	MC/MCRegisterInfo.h	/^  iterator       begin() const { return RegsBegin; }$/;"	f	class:llvm::MCRegisterClass
begin	Metadata.h	/^  iterator begin() const { return getName().begin(); }$/;"	f	class:llvm::MDString
begin	Module.h	/^  const_iterator          begin() const { return FunctionList.begin(); }$/;"	f	class:llvm::Module
begin	Module.h	/^  iterator                begin()       { return FunctionList.begin(); }$/;"	f	class:llvm::Module
begin	PassManagers.h	/^  iterator begin() const { return S.rbegin(); }$/;"	f	class:llvm::PMStack
begin	Support/GetElementPtrTypeIterator.h	/^    static generic_gep_type_iterator begin(Type *Ty, ItTy It) {$/;"	f	class:llvm::generic_gep_type_iterator
begin	Support/IntegersSubsetMapping.h	/^  RangeIterator begin() { return Items.begin(); }$/;"	f	class:llvm::IntegersSubsetMapping
begin	Support/Registry.h	/^    static iterator begin() { return iterator(Head); }$/;"	f	class:llvm::Registry
begin	Support/StringPool.h	/^    inline const char *begin() const {$/;"	f	class:llvm::PooledStringPtr
begin	Support/YAMLParser.h	/^  iterator begin() {$/;"	f	class:llvm::yaml::MappingNode
begin	Support/YAMLParser.h	/^  iterator begin() {$/;"	f	class:llvm::yaml::SequenceNode
begin	Support/YAMLParser.h	/^typename CollectionType::iterator begin(CollectionType &C) {$/;"	f	namespace:llvm::yaml
begin	TableGen/Record.h	/^  inline const_iterator begin() const { return Values.begin(); }$/;"	f	class:llvm::ListInit
begin	Target/TargetRegisterInfo.h	/^  iterator       begin() const { return MC->begin(); }$/;"	f	class:llvm::TargetRegisterClass
begin	TypeFinder.h	/^  const_iterator begin() const { return StructTypes.begin(); }$/;"	f	class:llvm::TypeFinder
begin	TypeFinder.h	/^  iterator begin() { return StructTypes.begin(); }$/;"	f	class:llvm::TypeFinder
begin	ValueSymbolTable.h	/^  inline const_iterator begin() const { return vmap.begin(); }$/;"	f	class:llvm::ValueSymbolTable
begin	ValueSymbolTable.h	/^  inline iterator begin() { return vmap.begin(); }$/;"	f	class:llvm::ValueSymbolTable
beginELFRel	Object/ELF.h	/^  virtual Elf_Rel_Iter beginELFRel(const Elf_Shdr *sec) const {$/;"	f	class:llvm::object::ELFObjectFile
beginELFRela	Object/ELF.h	/^  virtual Elf_Rela_Iter beginELFRela(const Elf_Shdr *sec) const {$/;"	f	class:llvm::object::ELFObjectFile
beginIndex	CodeGen/LiveInterval.h	/^    SlotIndex beginIndex() const {$/;"	f	class:llvm::LiveInterval
beginPostorder	Analysis/LoopIterator.h	/^  POIterator beginPostorder() const {$/;"	f	class:llvm::LoopBlocksDFS
beginRPO	Analysis/LoopIterator.h	/^  RPOIterator beginRPO() const {$/;"	f	class:llvm::LoopBlocksDFS
beginStage	MC/MCInstrItineraries.h	/^  const InstrStage *beginStage(unsigned ItinClassIndx) const {$/;"	f	class:llvm::InstrItineraryData
begin_dynamic_symbols	Object/ELF.h	/^                             ::begin_dynamic_symbols() const {$/;"	f	class:llvm::object::ELFObjectFile
begin_dynamic_table	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::begin_dynamic_table() const {$/;"	f	class:llvm::object::ELFObjectFile
begin_libraries_needed	Object/ELF.h	/^                             ::begin_libraries_needed() const {$/;"	f	class:llvm::object::ELFObjectFile
begin_relocations	Object/ObjectFile.h	/^inline relocation_iterator SectionRef::begin_relocations() const {$/;"	f	class:llvm::object::SectionRef
begin_sections	Object/ELF.h	/^                              ::begin_sections() const {$/;"	f	class:llvm::object::ELFObjectFile
begin_symbols	Object/ELF.h	/^                             ::begin_symbols() const {$/;"	f	class:llvm::object::ELFObjectFile
benefitFromCodePlacementOpt	Target/TargetLowering.h	/^  bool benefitFromCodePlacementOpt;$/;"	m	class:llvm::TargetLowering
bfAndefSymbol	Support/COFF.h	/^    AuxiliarybfAndefSymbol      bfAndefSymbol;$/;"	m	union:llvm::COFF::Auxiliary
big	Support/Endian.h	/^enum endianness {big, little};$/;"	e	enum:llvm::support::endianness
big16_t	Support/Endian.h	/^                   <int16_t, big, unaligned>    big16_t;$/;"	t	namespace:llvm::support
big32_t	Support/Endian.h	/^                   <int32_t, big, unaligned>    big32_t;$/;"	t	namespace:llvm::support
big64_t	Support/Endian.h	/^                   <int64_t, big, unaligned>    big64_t;$/;"	t	namespace:llvm::support
big8_t	Support/Endian.h	/^                   <int8_t, big, unaligned>     big8_t;$/;"	t	namespace:llvm::support
bind_const_intval_ty	Support/PatternMatch.h	/^  bind_const_intval_ty(uint64_t &V) : VR(V) {}$/;"	f	struct:llvm::PatternMatch::bind_const_intval_ty
bind_const_intval_ty	Support/PatternMatch.h	/^struct bind_const_intval_ty {$/;"	s	namespace:llvm::PatternMatch
bind_off	Support/MachO.h	/^      uint32_t bind_off;$/;"	m	struct:llvm::MachO::dyld_info_command
bind_size	Support/MachO.h	/^      uint32_t bind_size;$/;"	m	struct:llvm::MachO::dyld_info_command
bind_ty	Support/PatternMatch.h	/^  bind_ty(Class *&V) : VR(V) {}$/;"	f	struct:llvm::PatternMatch::bind_ty
bind_ty	Support/PatternMatch.h	/^struct bind_ty {$/;"	s	namespace:llvm::PatternMatch
bitc	Bitcode/BitCodes.h	/^namespace bitc {$/;"	n	namespace:llvm
bitc	Bitcode/LLVMBitCodes.h	/^namespace bitc {$/;"	n	namespace:llvm
bitcode	Support/FileSystem.h	/^    bitcode,                  \/\/\/< Bitcode file$/;"	e	enum:llvm::sys::fs::file_magic::_
bits	Support/CommandLine.h	/^  bits(const M0t &M0, const M1t &M1) : Option(ZeroOrMore, NotHidden) {$/;"	f	class:llvm::cl::bits
bits	Support/CommandLine.h	/^  bits(const M0t &M0, const M1t &M1, const M2t &M2)$/;"	f	class:llvm::cl::bits
bits	Support/CommandLine.h	/^  bits(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3)$/;"	f	class:llvm::cl::bits
bits	Support/CommandLine.h	/^  bits(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3,$/;"	f	class:llvm::cl::bits
bits	Support/CommandLine.h	/^  explicit bits(const M0t &M0) : Option(ZeroOrMore, NotHidden) {$/;"	f	class:llvm::cl::bits
bits	Support/CommandLine.h	/^class bits : public Option, public bits_storage<DataType, Storage> {$/;"	c	namespace:llvm::cl
bitsEq	CodeGen/ValueTypes.h	/^    bool bitsEq(EVT VT) const {$/;"	f	struct:llvm::EVT
bitsGE	CodeGen/ValueTypes.h	/^    bool bitsGE(EVT VT) const {$/;"	f	struct:llvm::EVT
bitsGT	CodeGen/ValueTypes.h	/^    bool bitsGT(EVT VT) const {$/;"	f	struct:llvm::EVT
bitsLE	CodeGen/ValueTypes.h	/^    bool bitsLE(EVT VT) const {$/;"	f	struct:llvm::EVT
bitsLT	CodeGen/ValueTypes.h	/^    bool bitsLT(EVT VT) const {$/;"	f	struct:llvm::EVT
bitsToDouble	ADT/APInt.h	/^  double bitsToDouble() const {$/;"	f	class:llvm::APInt
bitsToFloat	ADT/APInt.h	/^  float bitsToFloat() const {$/;"	f	class:llvm::APInt
bits_storage	Support/CommandLine.h	/^  bits_storage() : Location(0) {}$/;"	f	class:llvm::cl::bits_storage
bits_storage	Support/CommandLine.h	/^class bits_storage {$/;"	c	namespace:llvm::cl
bits_storage	Support/CommandLine.h	/^class bits_storage<DataType, bool> {$/;"	c	namespace:llvm::cl
block_begin	Analysis/LoopInfo.h	/^  block_iterator block_begin() const { return Blocks.begin(); }$/;"	f	class:llvm::LoopBase
block_begin	Analysis/RegionInfo.h	/^  block_iterator block_begin() {$/;"	f	class:llvm::Region
block_begin	Analysis/RegionInfo.h	/^  const_block_iterator block_begin() const {$/;"	f	class:llvm::Region
block_begin	Instructions.h	/^  block_iterator block_begin() {$/;"	f	class:llvm::PHINode
block_begin	Instructions.h	/^  const_block_iterator block_begin() const {$/;"	f	class:llvm::PHINode
block_end	Analysis/LoopInfo.h	/^  block_iterator block_end() const { return Blocks.end(); }$/;"	f	class:llvm::LoopBase
block_end	Analysis/RegionInfo.h	/^  block_iterator block_end() {$/;"	f	class:llvm::Region
block_end	Analysis/RegionInfo.h	/^  const_block_iterator block_end() const {$/;"	f	class:llvm::Region
block_end	Instructions.h	/^  block_iterator block_end() {$/;"	f	class:llvm::PHINode
block_end	Instructions.h	/^  const_block_iterator block_end() const {$/;"	f	class:llvm::PHINode
block_file	Support/FileSystem.h	/^    block_file,$/;"	e	enum:llvm::sys::fs::file_type::_
block_iterator	Analysis/LoopInfo.h	/^  typedef typename std::vector<BlockT*>::const_iterator block_iterator;$/;"	t	class:llvm::LoopBase
block_iterator	Analysis/RegionInfo.h	/^  typedef block_iterator_wrapper<false> block_iterator;$/;"	t	class:llvm::Region
block_iterator	Instructions.h	/^  typedef BasicBlock **block_iterator;$/;"	t	class:llvm::PHINode
block_iterator_wrapper	Analysis/RegionInfo.h	/^    \/*implicit*\/ block_iterator_wrapper(super I) : super(I) {}$/;"	f	class:llvm::Region::block_iterator_wrapper
block_iterator_wrapper	Analysis/RegionInfo.h	/^    block_iterator_wrapper() : super(df_end<pointer>((BasicBlock *)0)) {}$/;"	f	class:llvm::Region::block_iterator_wrapper
block_iterator_wrapper	Analysis/RegionInfo.h	/^    block_iterator_wrapper(pointer Entry, pointer Exit) : super(df_begin(Entry))$/;"	f	class:llvm::Region::block_iterator_wrapper
block_iterator_wrapper	Analysis/RegionInfo.h	/^  class block_iterator_wrapper$/;"	c	class:llvm::Region
boolOrDefault	Support/CommandLine.h	/^enum boolOrDefault { BOU_UNSET, BOU_TRUE, BOU_FALSE };$/;"	g	namespace:llvm::cl
bothKnown	Analysis/MemoryBuiltins.h	/^  bool bothKnown(SizeOffsetEvalType SizeOffset) {$/;"	f	class:llvm::ObjectSizeOffsetEvaluator
bothKnown	Analysis/MemoryBuiltins.h	/^  bool bothKnown(SizeOffsetType &SizeOffset) {$/;"	f	class:llvm::ObjectSizeOffsetVisitor
bottom	CodeGen/MachineScheduler.h	/^  MachineBasicBlock::iterator bottom() const { return CurrentBottom; }$/;"	f	class:llvm::ScheduleDAGMI
branchRoot	ADT/IntervalMap.h	/^branchRoot(unsigned Position) {$/;"	f	class:llvm::IntervalMap
branched	ADT/IntervalMap.h	/^  bool branched() const { return height > 0; }$/;"	f	class:llvm::IntervalMap
branched	ADT/IntervalMap.h	/^  bool branched() const {$/;"	f	class:llvm::IntervalMap::const_iterator
brc_match	Support/PatternMatch.h	/^  brc_match(const Cond_t &C, BasicBlock *&t, BasicBlock *&f)$/;"	f	struct:llvm::PatternMatch::brc_match
brc_match	Support/PatternMatch.h	/^struct brc_match {$/;"	s	namespace:llvm::PatternMatch
breakPartialRegDependency	Target/TargetInstrInfo.h	/^  breakPartialRegDependency(MachineBasicBlock::iterator MI, unsigned OpNum,$/;"	f	class:llvm::TargetInstrInfo
broken_pipe	Support/system_error.h	/^  broken_pipe                         = EPIPE,$/;"	e	enum:llvm::errc::_
broken_pipe	Support/system_error.h	/^  broken_pipe             = 109, \/\/ ERROR_BROKEN_PIPE,$/;"	e	enum:llvm::windows_error::_
bucket_begin	ADT/FoldingSet.h	/^  bucket_iterator bucket_begin(unsigned hash) {$/;"	f	class:llvm::ContextualFoldingSet
bucket_begin	ADT/FoldingSet.h	/^  bucket_iterator bucket_begin(unsigned hash) {$/;"	f	class:llvm::FoldingSet
bucket_end	ADT/FoldingSet.h	/^  bucket_iterator bucket_end(unsigned hash) {$/;"	f	class:llvm::ContextualFoldingSet
bucket_end	ADT/FoldingSet.h	/^  bucket_iterator bucket_end(unsigned hash) {$/;"	f	class:llvm::FoldingSet
bucket_iterator	ADT/FoldingSet.h	/^  typedef FoldingSetBucketIterator<T> bucket_iterator;$/;"	t	class:llvm::ContextualFoldingSet
bucket_iterator	ADT/FoldingSet.h	/^  typedef FoldingSetBucketIterator<T> bucket_iterator;$/;"	t	class:llvm::FoldingSet
buffer	ADT/Hashing.h	/^  char buffer[64];$/;"	m	struct:llvm::hashing::detail::hash_combine_recursive_helper
buffer	Support/AlignOf.h	/^  char buffer[sizeof(SizerImpl)];$/;"	m	union:llvm::AlignedCharArrayUnion
buffer_overflow	Support/system_error.h	/^  buffer_overflow         = 111, \/\/ ERROR_BUFFER_OVERFLOW,$/;"	e	enum:llvm::windows_error::_
bundle_iterator	CodeGen/MachineBasicBlock.h	/^    bundle_iterator() : MII(0) {}$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
bundle_iterator	CodeGen/MachineBasicBlock.h	/^    bundle_iterator(IterTy mii) : MII(mii) {}$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
bundle_iterator	CodeGen/MachineBasicBlock.h	/^    bundle_iterator(Ty &mi) : MII(mi) {$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
bundle_iterator	CodeGen/MachineBasicBlock.h	/^    bundle_iterator(Ty *mi) : MII(mi) {$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
bundle_iterator	CodeGen/MachineBasicBlock.h	/^    bundle_iterator(const bundle_iterator<OtherTy, OtherIterTy> &I)$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
bundle_iterator	CodeGen/MachineBasicBlock.h	/^  class bundle_iterator$/;"	c	class:llvm::MachineBasicBlock
busy	Support/system_error.h	/^  busy                    = 170, \/\/ ERROR_BUSY,$/;"	e	enum:llvm::windows_error::_
byteSwap	ADT/APInt.h	/^inline APInt byteSwap(const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
c	Object/ObjectFile.h	/^    uint32_t c;$/;"	m	struct:llvm::object::DataRefImpl::__anon75
cString	ADT/Twine.h	/^      const char *cString;$/;"	m	union:llvm::Twine::Child
c_str	ADT/SmallString.h	/^  const char* c_str() {$/;"	f	class:llvm::SmallString
c_str	Support/PathV1.h	/^      const char *c_str() const { return path.c_str(); }$/;"	f	class:llvm::sys::Path
call	Support/ManagedStatic.h	/^  static void call(void * Ptr) { delete (T*)Ptr; }$/;"	f	struct:llvm::object_deleter
call	Support/ManagedStatic.h	/^  static void call(void * Ptr) { delete[] (T*)Ptr; }$/;"	f	struct:llvm::object_deleter
callCapturesBefore	Analysis/AliasAnalysis.h	/^  ModRefResult callCapturesBefore(const Instruction *I, const Value *P,$/;"	f	class:llvm::AliasAnalysis
callDefaultCtor	PassSupport.h	/^Pass *callDefaultCtor() { return new PassName(); }$/;"	f	namespace:llvm
calloc	Target/TargetLibraryInfo.h	/^      calloc,$/;"	e	enum:llvm::LibFunc::Func
callsEHReturn	CodeGen/MachineModuleInfo.h	/^  bool callsEHReturn() const { return CallsEHReturn; }$/;"	f	class:llvm::MachineModuleInfo
callsUnwindInit	CodeGen/MachineModuleInfo.h	/^  bool callsUnwindInit() const { return CallsUnwindInit; }$/;"	f	class:llvm::MachineModuleInfo
canBasicBlockModify	Analysis/AliasAnalysis.h	/^  bool canBasicBlockModify(const BasicBlock &BB, const Value *P, uint64_t Size){$/;"	f	class:llvm::AliasAnalysis
canCoalesceLeft	ADT/IntervalMap.h	/^iterator::canCoalesceLeft(KeyT Start, ValT Value) {$/;"	f	class:llvm::IntervalMap::iterator
canCoalesceRight	ADT/IntervalMap.h	/^iterator::canCoalesceRight(KeyT Stop, ValT Value) {$/;"	f	class:llvm::IntervalMap::iterator
canCombineSubRegIndices	Target/TargetRegisterInfo.h	/^  virtual bool canCombineSubRegIndices(const TargetRegisterClass *RC,$/;"	f	class:llvm::TargetRegisterInfo
canFoldAsLoad	CodeGen/MachineInstr.h	/^  bool canFoldAsLoad(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
canFoldAsLoad	MC/MCInstrDesc.h	/^  bool canFoldAsLoad() const {$/;"	f	class:llvm::MCInstrDesc
canInsertSelect	Target/TargetInstrInfo.h	/^  virtual bool canInsertSelect(const MachineBasicBlock &MBB,$/;"	f	class:llvm::TargetInstrInfo
canInstructionRangeModify	Analysis/AliasAnalysis.h	/^  bool canInstructionRangeModify(const Instruction &I1, const Instruction &I2,$/;"	f	class:llvm::AliasAnalysis
canReserveReg	CodeGen/MachineRegisterInfo.h	/^  bool canReserveReg(unsigned PhysReg) const {$/;"	f	class:llvm::MachineRegisterInfo
canReturnTwice	Instructions.h	/^  bool canReturnTwice() const {$/;"	f	class:llvm::CallInst
canSimplifyCallFramePseudos	Target/TargetFrameLowering.h	/^  virtual bool canSimplifyCallFramePseudos(const MachineFunction &MF) const {$/;"	f	class:llvm::TargetFrameLowering
canSkipToPos	Bitcode/BitstreamReader.h	/^  bool canSkipToPos(size_t pos) const {$/;"	f	class:llvm::BitstreamCursor
cancel_violation	Support/system_error.h	/^  cancel_violation        = 173, \/\/ ERROR_CANCEL_VIOLATION,$/;"	e	enum:llvm::windows_error::_
cannot_make	Support/system_error.h	/^  cannot_make             = 82, \/\/ ERROR_CANNOT_MAKE,$/;"	e	enum:llvm::windows_error::_
capacity	ADT/SmallVector.h	/^  size_t capacity() const { return capacity_ptr() - begin(); }$/;"	f	class:llvm::SmallVectorTemplateCommon
capacity	Support/FileSystem.h	/^  uint64_t capacity;$/;"	m	struct:llvm::sys::fs::space_info
capacity_in_bytes	ADT/DenseMap.h	/^capacity_in_bytes(const DenseMap<KeyT, ValueT, KeyInfoT> &X) {$/;"	f	namespace:llvm
capacity_in_bytes	ADT/SmallVector.h	/^  size_t capacity_in_bytes() const {$/;"	f	class:llvm::SmallVectorBase
capacity_in_bytes	ADT/SmallVector.h	/^static inline size_t capacity_in_bytes(const SmallVector<T, N> &X) {$/;"	f	namespace:llvm
capacity_in_bytes	Support/Capacity.h	/^static inline size_t capacity_in_bytes(const T &x) {$/;"	f	namespace:llvm
capacity_ptr	ADT/SmallVector.h	/^  const_iterator capacity_ptr() const { return (const_iterator)this->CapacityX;}$/;"	f	class:llvm::SmallVectorTemplateCommon
capacity_ptr	ADT/SmallVector.h	/^  iterator capacity_ptr() { return (iterator)this->CapacityX; }$/;"	f	class:llvm::SmallVectorTemplateCommon
cas_flag	Support/Atomic.h	/^    typedef long cas_flag;$/;"	t	namespace:llvm::sys
cas_flag	Support/Atomic.h	/^    typedef uint32_t cas_flag;$/;"	t	namespace:llvm::sys
case_begin	Instructions.h	/^  CaseIt case_begin() {$/;"	f	class:llvm::SwitchInst
case_begin	Instructions.h	/^  ConstCaseIt case_begin() const {$/;"	f	class:llvm::SwitchInst
case_default	Instructions.h	/^  CaseIt case_default() {$/;"	f	class:llvm::SwitchInst
case_default	Instructions.h	/^  ConstCaseIt case_default() const {$/;"	f	class:llvm::SwitchInst
case_end	Instructions.h	/^  CaseIt case_end() {$/;"	f	class:llvm::SwitchInst
case_end	Instructions.h	/^  ConstCaseIt case_end() const {$/;"	f	class:llvm::SwitchInst
cast	Support/Casting.h	/^inline typename cast_retty<X, Y>::ret_type cast(const Y &Val) {$/;"	f	namespace:llvm
cast_convert_val	Support/Casting.h	/^template<class To, class From, class SimpleFrom> struct cast_convert_val {$/;"	s	namespace:llvm
cast_convert_val	Support/Casting.h	/^template<class To, class FromTy> struct cast_convert_val<To,FromTy,FromTy> {$/;"	s	namespace:llvm
cast_or_null	Support/Casting.h	/^inline typename cast_retty<X, Y*>::ret_type cast_or_null(Y *Val) {$/;"	f	namespace:llvm
cast_retty	Support/Casting.h	/^struct cast_retty {$/;"	s	namespace:llvm
cast_retty_impl	Support/Casting.h	/^template<class To, class From> struct cast_retty_impl {$/;"	s	namespace:llvm
cast_retty_impl	Support/Casting.h	/^template<class To, class From> struct cast_retty_impl<To, From*> {$/;"	s	namespace:llvm
cast_retty_impl	Support/Casting.h	/^template<class To, class From> struct cast_retty_impl<To, const From*> {$/;"	s	namespace:llvm
cast_retty_impl	Support/Casting.h	/^template<class To, class From> struct cast_retty_impl<To, const From*const> {$/;"	s	namespace:llvm
cast_retty_impl	Support/Casting.h	/^template<class To, class From> struct cast_retty_impl<To, const From> {$/;"	s	namespace:llvm
cast_retty_wrap	Support/Casting.h	/^struct cast_retty_wrap {$/;"	s	namespace:llvm
cast_retty_wrap	Support/Casting.h	/^struct cast_retty_wrap<To, FromTy, FromTy> {$/;"	s	namespace:llvm
category	Support/system_error.h	/^  const error_category& category() const {return *_cat_;}$/;"	f	class:llvm::error_code
category	Support/system_error.h	/^  const error_category& category() const {return *_cat_;}$/;"	f	class:llvm::error_condition
cbrt	Target/TargetLibraryInfo.h	/^      cbrt,$/;"	e	enum:llvm::LibFunc::Func
cbrtf	Target/TargetLibraryInfo.h	/^      cbrtf,$/;"	e	enum:llvm::LibFunc::Func
cbrtl	Target/TargetLibraryInfo.h	/^      cbrtl,$/;"	e	enum:llvm::LibFunc::Func
ceil	Target/TargetLibraryInfo.h	/^      ceil,$/;"	e	enum:llvm::LibFunc::Func
ceilLogBase2	ADT/APInt.h	/^  unsigned ceilLogBase2() const {$/;"	f	class:llvm::APInt
ceilf	Target/TargetLibraryInfo.h	/^      ceilf,$/;"	e	enum:llvm::LibFunc::Func
ceill	Target/TargetLibraryInfo.h	/^      ceill,$/;"	e	enum:llvm::LibFunc::Func
cellspu	ADT/Triple.h	/^    cellspu, \/\/ CellSPU: spu, cellspu$/;"	e	enum:llvm::Triple::ArchType
changeColor	Support/raw_ostream.h	/^  virtual raw_ostream &changeColor(enum Colors Color,$/;"	f	class:llvm::raw_ostream
changeImmediateDominator	Analysis/Dominators.h	/^  inline void changeImmediateDominator(BasicBlock *N, BasicBlock* NewIDom) {$/;"	f	class:llvm::DominatorTree
changeImmediateDominator	Analysis/Dominators.h	/^  inline void changeImmediateDominator(DomTreeNode *N, DomTreeNode* NewIDom) {$/;"	f	class:llvm::DominatorTree
changeImmediateDominator	Analysis/Dominators.h	/^  void changeImmediateDominator(DomTreeNodeBase<NodeT> *N,$/;"	f	class:llvm::DominatorTreeBase
changeImmediateDominator	Analysis/Dominators.h	/^  void changeImmediateDominator(NodeT *BB, NodeT *NewBB) {$/;"	f	class:llvm::DominatorTreeBase
changeImmediateDominator	CodeGen/MachineDominators.h	/^  inline void changeImmediateDominator(MachineBasicBlock *N,$/;"	f	class:llvm::MachineDominatorTree
changeImmediateDominator	CodeGen/MachineDominators.h	/^  inline void changeImmediateDominator(MachineDomTreeNode *N,$/;"	f	class:llvm::MachineDominatorTree
changeLoopFor	Analysis/LoopInfo.h	/^  inline void changeLoopFor(BasicBlock *BB, Loop *L) {$/;"	f	class:llvm::LoopInfo
changeLoopFor	Analysis/LoopInfo.h	/^  void changeLoopFor(BlockT *BB, LoopT *L) {$/;"	f	class:llvm::LoopInfoBase
changeLoopFor	CodeGen/MachineLoopInfo.h	/^  inline void changeLoopFor(MachineBasicBlock *BB, MachineLoop *L) {$/;"	f	class:llvm::MachineLoopInfo
changeTopLevelLoop	Analysis/LoopInfo.h	/^  inline void changeTopLevelLoop(Loop *OldLoop, Loop *NewLoop) {$/;"	f	class:llvm::LoopInfo
changeTopLevelLoop	Analysis/LoopInfo.h	/^  void changeTopLevelLoop(LoopT *OldLoop,$/;"	f	class:llvm::LoopInfoBase
changeTopLevelLoop	CodeGen/MachineLoopInfo.h	/^  inline void changeTopLevelLoop(MachineLoop *OldLoop, MachineLoop *NewLoop) {$/;"	f	class:llvm::MachineLoopInfo
changeVectorElementTypeToInteger	CodeGen/ValueTypes.h	/^    EVT changeVectorElementTypeToInteger() const {$/;"	f	struct:llvm::EVT
change_ty	ADT/DAGDeltaAlgorithm.h	/^  typedef unsigned change_ty;$/;"	t	class:llvm::DAGDeltaAlgorithm
change_ty	ADT/DeltaAlgorithm.h	/^  typedef unsigned change_ty;$/;"	t	class:llvm::DeltaAlgorithm
changeset_ty	ADT/DAGDeltaAlgorithm.h	/^  typedef std::set<change_ty> changeset_ty;$/;"	t	class:llvm::DAGDeltaAlgorithm
changeset_ty	ADT/DeltaAlgorithm.h	/^  typedef std::set<change_ty> changeset_ty;$/;"	t	class:llvm::DeltaAlgorithm
changesetlist_ty	ADT/DAGDeltaAlgorithm.h	/^  typedef std::vector<changeset_ty> changesetlist_ty;$/;"	t	class:llvm::DAGDeltaAlgorithm
changesetlist_ty	ADT/DeltaAlgorithm.h	/^  typedef std::vector<changeset_ty> changesetlist_ty;$/;"	t	class:llvm::DeltaAlgorithm
char_type	Support/FileSystem.h	/^  typedef char char_type;$/;"	t	class:llvm::sys::fs::mapped_file_region
character	ADT/Twine.h	/^      char character;$/;"	m	union:llvm::Twine::Child
character_file	Support/FileSystem.h	/^    character_file,$/;"	e	enum:llvm::sys::fs::file_type::_
check	Support/CommandLine.h	/^  void check() const {$/;"	f	class:llvm::cl::opt_storage
checkForGarbage	Support/LeakDetector.h	/^  static void checkForGarbage(LLVMContext &C, const std::string &Message) {$/;"	f	struct:llvm::LeakDetector
checkGEPType	Instructions.h	/^inline Type *checkGEPType(Type *Ty) {$/;"	f	namespace:llvm
checkMagic	Object/ELF.h	/^  bool checkMagic() const {$/;"	f	struct:llvm::object::Elf_Ehdr_Impl
checkMagic	Support/ELF.h	/^  bool checkMagic() const {$/;"	f	struct:llvm::ELF::Elf32_Ehdr
checkMagic	Support/ELF.h	/^  bool checkMagic() const {$/;"	f	struct:llvm::ELF::Elf64_Ehdr
checkTargetMatchPredicate	MC/MCTargetAsmParser.h	/^  virtual unsigned checkTargetMatchPredicate(MCInst &Inst) {$/;"	f	class:llvm::MCTargetAsmParser
child	Object/Archive.h	/^    Child child;$/;"	m	class:llvm::object::Archive::child_iterator
child_begin	ADT/GraphTraits.h	/^  static ChildIteratorType child_begin(NodeType* N) {$/;"	f	struct:llvm::GraphTraits
child_begin	Analysis/CallGraph.h	/^  static inline ChildIteratorType child_begin(NodeType *N) { return N->begin();}$/;"	f	struct:llvm::GraphTraits
child_begin	Analysis/CallGraph.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	Analysis/Dominators.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	Analysis/Interval.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	Analysis/LoopInfo.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	CodeGen/MachineBasicBlock.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	CodeGen/MachineDominators.h	/^  static inline ChildIteratorType child_begin(NodeType* N) {$/;"	f	struct:llvm::GraphTraits
child_begin	CodeGen/MachineLoopInfo.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	CodeGen/ScheduleDAG.h	/^    static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	CodeGen/SelectionDAGNodes.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	Support/CFG.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	Support/DataFlow.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	Type.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	ADT/GraphTraits.h	/^  static ChildIteratorType child_end(NodeType* N) {$/;"	f	struct:llvm::GraphTraits
child_end	Analysis/CallGraph.h	/^  static inline ChildIteratorType child_end  (NodeType *N) { return N->end(); }$/;"	f	struct:llvm::GraphTraits
child_end	Analysis/CallGraph.h	/^  static inline ChildIteratorType child_end  (NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	Analysis/Dominators.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	Analysis/Interval.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	Analysis/LoopInfo.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	CodeGen/MachineBasicBlock.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	CodeGen/MachineDominators.h	/^  static inline ChildIteratorType child_end(NodeType* N) {$/;"	f	struct:llvm::GraphTraits
child_end	CodeGen/MachineLoopInfo.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	CodeGen/ScheduleDAG.h	/^    static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	CodeGen/SelectionDAGNodes.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	Support/CFG.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	Support/DataFlow.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	Type.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_iterator	Object/Archive.h	/^    child_iterator() : child(Child(0, StringRef())) {}$/;"	f	class:llvm::object::Archive::child_iterator
child_iterator	Object/Archive.h	/^    child_iterator(const Child &c) : child(c) {}$/;"	f	class:llvm::object::Archive::child_iterator
child_iterator	Object/Archive.h	/^  class child_iterator {$/;"	c	class:llvm::object::Archive
child_iterator	Support/GraphWriter.h	/^  typedef typename GTraits::ChildIteratorType child_iterator;$/;"	t	class:llvm::GraphWriter
children	Analysis/RegionInfo.h	/^  RegionSet children;$/;"	m	class:llvm::Region
circular_raw_ostream	Support/circular_raw_ostream.h	/^    circular_raw_ostream(raw_ostream &Stream, const char *Header,$/;"	f	class:llvm::circular_raw_ostream
circular_raw_ostream	Support/circular_raw_ostream.h	/^    explicit circular_raw_ostream()$/;"	f	class:llvm::circular_raw_ostream
circular_raw_ostream	Support/circular_raw_ostream.h	/^  class circular_raw_ostream : public raw_ostream {$/;"	c	namespace:llvm
cksum	Support/MachO.h	/^      uint32_t cksum;$/;"	m	struct:llvm::MachO::prebind_cksum_command
cl	Support/CommandLine.h	/^namespace cl {$/;"	n	namespace:llvm
clEnumVal	Support/CommandLine.h	439;"	d
clEnumValEnd	Support/CommandLine.h	441;"	d
clEnumValN	Support/CommandLine.h	440;"	d
class_match	Support/PatternMatch.h	/^struct class_match {$/;"	s	namespace:llvm::PatternMatch
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVAddExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVAddRecExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVCastExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVCommutativeExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVConstant
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVMulExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVNAryExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVSMaxExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVSignExtendExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVTruncateExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVUDivExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVUMaxExpr
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVUnknown
classof	Analysis/ScalarEvolutionExpressions.h	/^    static inline bool classof(const SCEV *S) {$/;"	f	class:llvm::SCEVZeroExtendExpr
classof	Argument.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Argument
classof	BasicBlock.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BasicBlock
classof	CodeGen/PseudoSourceValue.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::FixedStackPseudoSourceValue
classof	CodeGen/PseudoSourceValue.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::PseudoSourceValue
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::AtomicSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::BasicBlockSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::BlockAddressSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::CondCodeSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::ConstantFPSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::ConstantPoolSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::ConstantSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::CvtRndSatSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::EHLabelSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::ExternalSymbolSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::FrameIndexSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::GlobalAddressSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::JumpTableSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::LSBaseSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::LoadSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::MDNodeSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::MachineSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::MemIntrinsicSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::MemSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::RegisterMaskSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::RegisterSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::ShuffleVectorSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::SrcValueSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::StoreSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::TargetIndexSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static bool classof(const SDNode *N) {$/;"	f	class:llvm::VTSDNode
classof	CodeGen/SelectionDAGNodes.h	/^  static inline bool classof(const SDNode *N) {$/;"	f	class:llvm::BuildVectorSDNode
classof	Constant.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Constant
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantAggregateZero
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantArray
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantDataArray
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantDataSequential
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantDataVector
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantFP
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantInt
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantPointerNull
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantStruct
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::ConstantVector
classof	Constants.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::UndefValue
classof	Constants.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BlockAddress
classof	Constants.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ConstantExpr
classof	DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::ArrayType
classof	DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::CompositeType
classof	DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::FunctionType
classof	DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::IntegerType
classof	DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::PointerType
classof	DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::SequentialType
classof	DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::StructType
classof	DerivedTypes.h	/^  static inline bool classof(const Type *T) {$/;"	f	class:llvm::VectorType
classof	Function.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Function
classof	GlobalAlias.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::GlobalAlias
classof	GlobalValue.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::GlobalValue
classof	GlobalVariable.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::GlobalVariable
classof	InlineAsm.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::InlineAsm
classof	InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::BinaryOperator
classof	InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::CastInst
classof	InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::CmpInst
classof	InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::TerminatorInst
classof	InstrTypes.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::UnaryInstruction
classof	InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BinaryOperator
classof	InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::CastInst
classof	InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::CmpInst
classof	InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::TerminatorInst
classof	InstrTypes.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::UnaryInstruction
classof	Instruction.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Instruction
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::AllocaInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::AtomicCmpXchgInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::AtomicRMWInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::BitCastInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::BranchInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::CallInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ExtractElementInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ExtractValueInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FCmpInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPExtInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPToSIInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPToUIInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPTruncInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FenceInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::GetElementPtrInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ICmpInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::IndirectBrInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::InsertElementInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::InsertValueInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::IntToPtrInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::InvokeInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::LandingPadInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::LoadInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::PHINode
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::PtrToIntInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ResumeInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ReturnInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::SExtInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::SIToFPInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::SelectInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ShuffleVectorInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::StoreInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::SwitchInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::TruncInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::UIToFPInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::UnreachableInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::VAArgInst
classof	Instructions.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ZExtInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::AllocaInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::AtomicCmpXchgInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::AtomicRMWInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BitCastInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::BranchInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::CallInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ExtractElementInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ExtractValueInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FCmpInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPExtInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPToSIInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPToUIInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPTruncInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FenceInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::GetElementPtrInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ICmpInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::IndirectBrInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::InsertElementInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::InsertValueInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::IntToPtrInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::InvokeInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::LandingPadInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::LoadInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::PHINode
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::PtrToIntInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ResumeInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ReturnInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::SExtInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::SIToFPInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::SelectInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ShuffleVectorInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::StoreInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::SwitchInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::TruncInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::UIToFPInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::UnreachableInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::VAArgInst
classof	Instructions.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ZExtInst
classof	IntrinsicInst.h	/^    static inline bool classof(const CallInst *I) {$/;"	f	class:llvm::IntrinsicInst
classof	IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::DbgDeclareInst
classof	IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::DbgInfoIntrinsic
classof	IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::DbgValueInst
classof	IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemCpyInst
classof	IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemIntrinsic
classof	IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemMoveInst
classof	IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemSetInst
classof	IntrinsicInst.h	/^    static inline bool classof(const IntrinsicInst *I) {$/;"	f	class:llvm::MemTransferInst
classof	IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::DbgDeclareInst
classof	IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::DbgInfoIntrinsic
classof	IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::DbgValueInst
classof	IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::IntrinsicInst
classof	IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemCpyInst
classof	IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemIntrinsic
classof	IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemMoveInst
classof	IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemSetInst
classof	IntrinsicInst.h	/^    static inline bool classof(const Value *V) {$/;"	f	class:llvm::MemTransferInst
classof	MC/MCAssembler.h	/^  static bool classof(const MCFragment *F) {$/;"	f	class:llvm::MCAlignFragment
classof	MC/MCAssembler.h	/^  static bool classof(const MCFragment *F) {$/;"	f	class:llvm::MCDataFragment
classof	MC/MCAssembler.h	/^  static bool classof(const MCFragment *F) {$/;"	f	class:llvm::MCDwarfCallFrameFragment
classof	MC/MCAssembler.h	/^  static bool classof(const MCFragment *F) {$/;"	f	class:llvm::MCDwarfLineAddrFragment
classof	MC/MCAssembler.h	/^  static bool classof(const MCFragment *F) {$/;"	f	class:llvm::MCFillFragment
classof	MC/MCAssembler.h	/^  static bool classof(const MCFragment *F) {$/;"	f	class:llvm::MCInstFragment
classof	MC/MCAssembler.h	/^  static bool classof(const MCFragment *F) {$/;"	f	class:llvm::MCLEBFragment
classof	MC/MCAssembler.h	/^  static bool classof(const MCFragment *F) {$/;"	f	class:llvm::MCOrgFragment
classof	MC/MCExpr.h	/^  static bool classof(const MCExpr *E) {$/;"	f	class:llvm::MCBinaryExpr
classof	MC/MCExpr.h	/^  static bool classof(const MCExpr *E) {$/;"	f	class:llvm::MCConstantExpr
classof	MC/MCExpr.h	/^  static bool classof(const MCExpr *E) {$/;"	f	class:llvm::MCSymbolRefExpr
classof	MC/MCExpr.h	/^  static bool classof(const MCExpr *E) {$/;"	f	class:llvm::MCTargetExpr
classof	MC/MCExpr.h	/^  static bool classof(const MCExpr *E) {$/;"	f	class:llvm::MCUnaryExpr
classof	MC/MCSectionCOFF.h	/^    static bool classof(const MCSection *S) {$/;"	f	class:llvm::MCSectionCOFF
classof	MC/MCSectionELF.h	/^  static bool classof(const MCSection *S) {$/;"	f	class:llvm::MCSectionELF
classof	MC/MCSectionMachO.h	/^  static bool classof(const MCSection *S) {$/;"	f	class:llvm::MCSectionMachO
classof	Metadata.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::MDNode
classof	Metadata.h	/^  static bool classof(const Value *V) {$/;"	f	class:llvm::MDString
classof	Object/Archive.h	/^  static inline bool classof(Binary const *v) {$/;"	f	class:llvm::object::Archive
classof	Object/COFF.h	/^  static inline bool classof(const Binary *v) {$/;"	f	class:llvm::object::COFFObjectFile
classof	Object/ELF.h	/^  static inline bool classof(const Binary *v) {$/;"	f	class:llvm::object::ELFObjectFile
classof	Object/MachO.h	/^  static inline bool classof(const Binary *v) {$/;"	f	class:llvm::object::MachOObjectFile
classof	Object/ObjectFile.h	/^  static inline bool classof(const Binary *v) {$/;"	f	class:llvm::object::ObjectFile
classof	Operator.h	/^  static inline bool classof(const ConstantExpr *) { return true; }$/;"	f	class:llvm::Operator
classof	Operator.h	/^  static inline bool classof(const ConstantExpr *CE) {$/;"	f	class:llvm::ConcreteOperator
classof	Operator.h	/^  static inline bool classof(const ConstantExpr *CE) {$/;"	f	class:llvm::OverflowingBinaryOperator
classof	Operator.h	/^  static inline bool classof(const ConstantExpr *CE) {$/;"	f	class:llvm::PossiblyExactOperator
classof	Operator.h	/^  static inline bool classof(const Instruction *) { return true; }$/;"	f	class:llvm::Operator
classof	Operator.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::ConcreteOperator
classof	Operator.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::FPMathOperator
classof	Operator.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::OverflowingBinaryOperator
classof	Operator.h	/^  static inline bool classof(const Instruction *I) {$/;"	f	class:llvm::PossiblyExactOperator
classof	Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::ConcreteOperator
classof	Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::FPMathOperator
classof	Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::Operator
classof	Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::OverflowingBinaryOperator
classof	Operator.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::PossiblyExactOperator
classof	Support/YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::AliasNode
classof	Support/YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::KeyValueNode
classof	Support/YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::MappingNode
classof	Support/YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::NullNode
classof	Support/YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::ScalarNode
classof	Support/YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::SequenceNode
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::BinOpInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::BitInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::BitsInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::DagInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::DefInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::FieldInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::IntInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::ListInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::OpInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::StringInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::TernOpInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::TypedInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::UnOpInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::UnsetInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::VarBitInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::VarInit
classof	TableGen/Record.h	/^  static bool classof(const Init *I) {$/;"	f	class:llvm::VarListElementInit
classof	TableGen/Record.h	/^  static bool classof(const RecTy *RT) {$/;"	f	class:llvm::BitRecTy
classof	TableGen/Record.h	/^  static bool classof(const RecTy *RT) {$/;"	f	class:llvm::BitsRecTy
classof	TableGen/Record.h	/^  static bool classof(const RecTy *RT) {$/;"	f	class:llvm::DagRecTy
classof	TableGen/Record.h	/^  static bool classof(const RecTy *RT) {$/;"	f	class:llvm::IntRecTy
classof	TableGen/Record.h	/^  static bool classof(const RecTy *RT) {$/;"	f	class:llvm::ListRecTy
classof	TableGen/Record.h	/^  static bool classof(const RecTy *RT) {$/;"	f	class:llvm::RecordRecTy
classof	TableGen/Record.h	/^  static bool classof(const RecTy *RT) {$/;"	f	class:llvm::StringRecTy
classof	User.h	/^  static inline bool classof(const Value *V) {$/;"	f	class:llvm::User
cleanup	CodeGen/PBQP/HeuristicBase.h	/^    void cleanup() {$/;"	f	class:PBQP::HeuristicBase
cleanup	CodeGen/PBQP/HeuristicSolver.h	/^    void cleanup() {$/;"	f	class:PBQP::HeuristicSolverImpl
cleanup	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup *cleanup;$/;"	m	class:llvm::CrashRecoveryContextCleanupRegistrar
cleanupFired	Support/CrashRecoveryContext.h	/^  bool cleanupFired;$/;"	m	class:llvm::CrashRecoveryContextCleanup
clear	ADT/BitVector.h	/^  void clear() {$/;"	f	class:llvm::BitVector
clear	ADT/DenseMap.h	/^  void clear() {$/;"	f	class:llvm::DenseMapBase
clear	ADT/DenseSet.h	/^  void clear() {$/;"	f	class:llvm::DenseSet
clear	ADT/FoldingSet.h	/^  inline void clear() { Bits.clear(); }$/;"	f	class:llvm::FoldingSetNodeID
clear	ADT/FoldingSet.h	/^  void clear() { Set.clear(); Vector.clear(); }$/;"	f	class:llvm::FoldingSetVector
clear	ADT/IndexedMap.h	/^    void clear() {$/;"	f	class:llvm::IndexedMap
clear	ADT/IntEqClasses.h	/^  void clear() {$/;"	f	class:llvm::IntEqClasses
clear	ADT/IntervalMap.h	/^clear() {$/;"	f	class:llvm::IntervalMap
clear	ADT/MapVector.h	/^  void clear() {$/;"	f	class:llvm::MapVector
clear	ADT/PackedVector.h	/^  void clear() { Bits.clear(); }$/;"	f	class:llvm::PackedVector
clear	ADT/PriorityQueue.h	/^  void clear() {$/;"	f	class:llvm::PriorityQueue
clear	ADT/SetVector.h	/^  void clear() {$/;"	f	class:llvm::SetVector
clear	ADT/SmallBitVector.h	/^  void clear() {$/;"	f	class:llvm::SmallBitVector
clear	ADT/SmallPtrSet.h	/^  void clear() {$/;"	f	class:llvm::SmallPtrSetImpl
clear	ADT/SmallSet.h	/^  void clear() {$/;"	f	class:llvm::SmallSet
clear	ADT/SmallVector.h	/^  void clear() {$/;"	f	class:llvm::SmallVectorImpl
clear	ADT/SparseBitVector.h	/^  void clear() {$/;"	f	class:llvm::SparseBitVector
clear	ADT/SparseSet.h	/^  void clear() {$/;"	f	class:llvm::SparseSet
clear	ADT/StringMap.h	/^  void clear() {$/;"	f	class:llvm::StringMap
clear	ADT/TinyPtrVector.h	/^  void clear() {$/;"	f	class:llvm::TinyPtrVector
clear	ADT/ValueMap.h	/^  void clear() { Map.clear(); }$/;"	f	class:llvm::ValueMap
clear	ADT/ilist.h	/^  void clear() { if (Head) erase(begin(), end()); }$/;"	f	class:llvm::iplist
clear	Analysis/LoopIterator.h	/^  void clear() {$/;"	f	class:llvm::LoopBlocksDFS
clear	Analysis/ScalarEvolutionExpander.h	/^    void clear() {$/;"	f	class:llvm::SCEVExpander
clear	Attributes.h	/^  void clear() { Bits = 0; }$/;"	f	class:llvm::AttrBuilder
clear	CodeGen/LiveInterval.h	/^    void clear() {$/;"	f	class:llvm::LiveInterval
clear	CodeGen/MachineBasicBlock.h	/^  void clear() {$/;"	f	class:llvm::MachineBasicBlock
clear	CodeGen/PBQP/Graph.h	/^    void clear() {$/;"	f	class:PBQP::Graph
clear	CodeGen/SelectionDAG.h	/^  void clear() {$/;"	f	class:llvm::SDDbgInfo
clear	MC/MCInst.h	/^  void clear() { Operands.clear(); }$/;"	f	class:llvm::MCInst
clear	Support/IntegersSubsetMapping.h	/^  void clear() {$/;"	f	class:llvm::IntegersSubsetMapping
clear	Support/PathV1.h	/^      void clear() { path.clear(); }$/;"	f	class:llvm::sys::Path
clear	Support/PredIteratorCache.h	/^    void clear() {$/;"	f	class:llvm::PredIteratorCache
clear	Support/Recycler.h	/^  void clear(AllocatorType &Allocator) {$/;"	f	class:llvm::Recycler
clear	Support/StringPool.h	/^    void clear() {$/;"	f	class:llvm::PooledStringPtr
clear	Support/system_error.h	/^  void clear() {$/;"	f	class:llvm::error_code
clear	Support/system_error.h	/^  void clear() {$/;"	f	class:llvm::error_condition
clearAllBits	ADT/APInt.h	/^  void clearAllBits() {$/;"	f	class:llvm::APInt
clearAllChildren	Analysis/Dominators.h	/^  void clearAllChildren() {$/;"	f	class:llvm::DomTreeNodeBase
clearAnalysisImpls	PassAnalysisSupport.h	/^  void clearAnalysisImpls() {$/;"	f	class:llvm::AnalysisResolver
clearAsmPrinterFlag	CodeGen/MachineInstr.h	/^  void clearAsmPrinterFlag(CommentFlag Flag) {$/;"	f	class:llvm::MachineInstr
clearAsmPrinterFlags	CodeGen/MachineInstr.h	/^  void clearAsmPrinterFlags() { AsmPrinterFlags = 0; }$/;"	f	class:llvm::MachineInstr
clearBitsInMask	ADT/BitVector.h	/^  void clearBitsInMask(const uint32_t *Mask, unsigned MaskWords = ~0u) {$/;"	f	class:llvm::BitVector
clearBitsInMask	ADT/SmallBitVector.h	/^  void clearBitsInMask(const uint32_t *Mask, unsigned MaskWords = ~0u) {$/;"	f	class:llvm::SmallBitVector
clearBitsNotInMask	ADT/BitVector.h	/^  void clearBitsNotInMask(const uint32_t *Mask, unsigned MaskWords = ~0u) {$/;"	f	class:llvm::BitVector
clearBitsNotInMask	ADT/SmallBitVector.h	/^  void clearBitsNotInMask(const uint32_t *Mask, unsigned MaskWords = ~0u) {$/;"	f	class:llvm::SmallBitVector
clearFirstByValReg	CodeGen/CallingConvLower.h	/^  void clearFirstByValReg() { FirstByValReg = 0; FirstByValRegValid = false; }$/;"	f	class:llvm::CCState
clearFlag	CodeGen/MachineInstr.h	/^  void clearFlag(MIFlag Flag) {$/;"	f	class:llvm::MachineInstr
clearFlags	Analysis/ScalarEvolution.h	/^    static SCEV::NoWrapFlags clearFlags(SCEV::NoWrapFlags Flags,$/;"	f	class:llvm::ScalarEvolution
clearInsertPoint	Analysis/ScalarEvolutionExpander.h	/^    void clearInsertPoint() {$/;"	f	class:llvm::SCEVExpander
clearNodeCache	Analysis/RegionInfo.h	/^  void clearNodeCache() {$/;"	f	class:llvm::RegionInfo
clearParent	CodeGen/MachineOperand.h	/^  void clearParent() { ParentMI = 0; }$/;"	f	class:llvm::MachineOperand
clearPostInc	Analysis/ScalarEvolutionExpander.h	/^    void clearPostInc() {$/;"	f	class:llvm::SCEVExpander
clearResources	CodeGen/DFAPacketizer.h	/^  void clearResources() {$/;"	f	class:llvm::DFAPacketizer
clearSolverEdges	CodeGen/PBQP/HeuristicSolver.h	/^      void clearSolverEdges() {$/;"	f	class:PBQP::HeuristicSolverImpl::NodeData
clearSubclassOptionalData	Value.h	/^  void clearSubclassOptionalData() {$/;"	f	class:llvm::Value
clearUnusedBits	ADT/APInt.h	/^  APInt& clearUnusedBits() {$/;"	f	class:llvm::APInt
clear_error	Support/raw_ostream.h	/^  void clear_error() {$/;"	f	class:llvm::raw_fd_ostream
clear_unused_bits	ADT/BitVector.h	/^  void clear_unused_bits() {$/;"	f	class:llvm::BitVector
client	Support/MachO.h	/^      uint32_t client;$/;"	m	struct:llvm::MachO::sub_client_command
clobbersPhysReg	CodeGen/MachineOperand.h	/^  bool clobbersPhysReg(unsigned PhysReg) const {$/;"	f	class:llvm::MachineOperand
clobbersPhysReg	CodeGen/MachineOperand.h	/^  static bool clobbersPhysReg(const uint32_t *RegMask, unsigned PhysReg) {$/;"	f	class:llvm::MachineOperand
clone	TableGen/Record.h	/^  virtual OpInit *clone(std::vector<Init *> &Operands) const {$/;"	f	class:llvm::BinOpInit
clone	TableGen/Record.h	/^  virtual OpInit *clone(std::vector<Init *> &Operands) const {$/;"	f	class:llvm::TernOpInit
clone	TableGen/Record.h	/^  virtual OpInit *clone(std::vector<Init *> &Operands) const {$/;"	f	class:llvm::UnOpInit
cloneBasicBlockAnalysis	Analysis/LoopPass.h	/^  virtual void cloneBasicBlockAnalysis(BasicBlock *F, BasicBlock *T, Loop *L) {}$/;"	f	class:llvm::LoopPass
closeInsnRange	CodeGen/LexicalScopes.h	/^  void closeInsnRange(LexicalScope *NewScope = NULL) {$/;"	f	class:llvm::LexicalScope
cmd	Support/MachO.h	/^      uint32_t  cmd;$/;"	m	struct:llvm::MachO::fvmlib_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::dyld_info_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::dylib_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::dylinker_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::dysymtab_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::encryption_info_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::fvmfile_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::ident_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::linkedit_data_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::load_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::prebind_cksum_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::prebound_dylib_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::routines_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::routines_command_64
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::rpath_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::segment_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::segment_command_64
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::sub_client_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::sub_framework_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::sub_library_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::sub_umbrella_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::symseg_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::symtab_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::thread_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::twolevel_hints_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::uuid_command
cmd	Support/MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::version_min_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::dyld_info_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::dylib_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::dylinker_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::dysymtab_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::encryption_info_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::fvmfile_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::fvmlib_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::ident_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::linkedit_data_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::load_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::prebind_cksum_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::prebound_dylib_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::routines_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::routines_command_64
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::rpath_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::segment_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::segment_command_64
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::sub_client_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::sub_framework_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::sub_library_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::sub_umbrella_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::symseg_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::symtab_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::thread_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::twolevel_hints_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::uuid_command
cmdsize	Support/MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::version_min_command
cmpEqual	ADT/APFloat.h	/^      cmpEqual,$/;"	e	enum:llvm::APFloat::cmpResult
cmpGreaterThan	ADT/APFloat.h	/^      cmpGreaterThan,$/;"	e	enum:llvm::APFloat::cmpResult
cmpLessThan	ADT/APFloat.h	/^      cmpLessThan,$/;"	e	enum:llvm::APFloat::cmpResult
cmpResult	ADT/APFloat.h	/^    enum cmpResult {$/;"	g	class:llvm::APFloat
cmpUnordered	ADT/APFloat.h	/^      cmpUnordered$/;"	e	enum:llvm::APFloat::cmpResult
codeOffset	Support/Win64EH.h	/^    uint8_t codeOffset;$/;"	m	struct:llvm::Win64EH::UnwindCode::__anon137
coff_aux_section_definition	Object/COFF.h	/^struct coff_aux_section_definition {$/;"	s	namespace:llvm::object
coff_file_header	Object/COFF.h	/^struct coff_file_header {$/;"	s	namespace:llvm::object
coff_object	Support/FileSystem.h	/^    coff_object,              \/\/\/< COFF object file$/;"	e	enum:llvm::sys::fs::file_magic::_
coff_relocation	Object/COFF.h	/^struct coff_relocation {$/;"	s	namespace:llvm::object
coff_section	Object/COFF.h	/^struct coff_section {$/;"	s	namespace:llvm::object
coff_symbol	Object/COFF.h	/^struct coff_symbol {$/;"	s	namespace:llvm::object
cols	CodeGen/PBQP/Math.h	/^    unsigned rows, cols;$/;"	m	class:PBQP::Matrix
combine	ADT/Hashing.h	/^  hash_code combine(size_t length, char *buffer_ptr, char *buffer_end) {$/;"	f	struct:llvm::hashing::detail::hash_combine_recursive_helper
combine	ADT/Hashing.h	/^  hash_code combine(size_t length, char *buffer_ptr, char *buffer_end,$/;"	f	struct:llvm::hashing::detail::hash_combine_recursive_helper
combineTrees	ADT/ImmutableSet.h	/^  TreeTy* combineTrees(TreeTy* L, TreeTy* R) {$/;"	f	class:llvm::ImutAVLFactory
combine_data	ADT/Hashing.h	/^  char *combine_data(size_t &length, char *buffer_ptr, char *buffer_end, T data) {$/;"	f	struct:llvm::hashing::detail::hash_combine_recursive_helper
compare	ADT/SmallString.h	/^  int compare(StringRef RHS) const {$/;"	f	class:llvm::SmallString
compare	ADT/StringRef.h	/^    int compare(StringRef RHS) const {$/;"	f	class:llvm::StringRef
compare	Analysis/DominanceFrontier.h	/^  bool compare(DominanceFrontierBase &Other) const {$/;"	f	class:llvm::DominanceFrontierBase
compare	Analysis/Dominators.h	/^  bool compare(DomTreeNodeBase<NodeT> *Other) {$/;"	f	class:llvm::DomTreeNodeBase
compare	Analysis/Dominators.h	/^  bool compare(DominatorTreeBase &Other) const {$/;"	f	class:llvm::DominatorTreeBase
compare	Analysis/Dominators.h	/^  inline bool compare(DominatorTree &Other) const {$/;"	f	class:llvm::DominatorTree
compare	Support/CommandLine.h	/^  bool compare(const DataType &V) const {$/;"	f	class:llvm::cl::OptionValueCopy
compare	Support/CommandLine.h	/^  bool compare(const DataType &\/*V*\/) const { return false; }$/;"	f	struct:llvm::cl::OptionValueBase
compare	Support/CommandLine.h	/^  virtual bool compare(const GenericOptionValue &V) const {$/;"	f	class:llvm::cl::OptionValueCopy
compare	Support/CommandLine.h	/^  virtual bool compare(const GenericOptionValue& \/*V*\/) const { return false; }$/;"	f	struct:llvm::cl::OptionValueBase
compareDomSet	Analysis/DominanceFrontier.h	/^  bool compareDomSet(DomSetType &DS1, const DomSetType &DS2) const {$/;"	f	class:llvm::DominanceFrontierBase
compareMemory	ADT/StringRef.h	/^    static int compareMemory(const char *Lhs, const char *Rhs, size_t Length) {$/;"	f	class:llvm::StringRef
compareRawBits	CodeGen/ValueTypes.h	/^    struct compareRawBits {$/;"	s	struct:llvm::EVT
compareTreeWithSection	ADT/ImmutableSet.h	/^  static bool compareTreeWithSection(TreeTy* T,$/;"	f	class:llvm::ImutAVLFactory
compare_lower	ADT/SmallString.h	/^  int compare_lower(StringRef RHS) const {$/;"	f	class:llvm::SmallString
compare_numeric	ADT/SmallString.h	/^  int compare_numeric(StringRef RHS) const {$/;"	f	class:llvm::SmallString
compatibility_version	Support/MachO.h	/^      uint32_t compatibility_version;$/;"	m	struct:llvm::MachO::dylib
compile_unit_begin	DebugInfo.h	/^    iterator compile_unit_begin()    const { return CUs.begin(); }$/;"	f	class:llvm::DebugInfoFinder
compile_unit_count	DebugInfo.h	/^    unsigned compile_unit_count()    const { return CUs.size(); }$/;"	f	class:llvm::DebugInfoFinder
compile_unit_end	DebugInfo.h	/^    iterator compile_unit_end()      const { return CUs.end(); }$/;"	f	class:llvm::DebugInfoFinder
composeSubRegIndices	Target/TargetRegisterInfo.h	/^  virtual unsigned composeSubRegIndices(unsigned a, unsigned b) const {$/;"	f	class:llvm::TargetRegisterInfo
computeDigest	ADT/ImmutableSet.h	/^  inline uint32_t computeDigest() {$/;"	f	class:llvm::ImutAVLTree
computeDigest	ADT/ImmutableSet.h	/^  uint32_t computeDigest(ImutAVLTree* L, ImutAVLTree* R, value_type_ref V) {$/;"	f	class:llvm::ImutAVLTree
computeEdgeContributions	CodeGen/PBQP/Heuristics/Briggs.h	/^      void computeEdgeContributions(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::Heuristics::Briggs
computeSolution	CodeGen/PBQP/HeuristicSolver.h	/^    Solution computeSolution() {$/;"	f	class:PBQP::HeuristicSolverImpl
computeSolution	CodeGen/PBQP/HeuristicSolver.h	/^    void computeSolution(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
concat	ADT/ImmutableList.h	/^  ImmutableList<T> concat(const T& Head, ImmutableList<T> Tail) {$/;"	f	class:llvm::ImmutableListFactory
concat	ADT/Twine.h	/^  inline Twine Twine::concat(const Twine &Suffix) const {$/;"	f	class:llvm::Twine
conditional	Support/type_traits.h	/^struct conditional { typedef T type; };$/;"	s	namespace:llvm
conditional	Support/type_traits.h	/^struct conditional<false, T, F> { typedef F type; };$/;"	s	namespace:llvm
connection_aborted	Support/system_error.h	/^  connection_aborted                  = ECONNABORTED,$/;"	e	enum:llvm::errc::_
connection_already_in_progress	Support/system_error.h	/^  connection_already_in_progress      = EALREADY,$/;"	e	enum:llvm::errc::_
connection_refused	Support/system_error.h	/^  connection_refused                  = ECONNREFUSED,$/;"	e	enum:llvm::errc::_
connection_reset	Support/system_error.h	/^  connection_reset                    = ECONNRESET,$/;"	e	enum:llvm::errc::_
const_alias_iterator	Module.h	/^  typedef AliasListType::const_iterator            const_alias_iterator;$/;"	t	class:llvm::Module
const_arg_iterator	Function.h	/^  typedef ArgumentListType::const_iterator const_arg_iterator;$/;"	t	class:llvm::Function
const_arg_iterator	TableGen/Record.h	/^  typedef std::vector<Init*>::const_iterator       const_arg_iterator;$/;"	t	class:llvm::DagInit
const_block_iterator	Analysis/RegionInfo.h	/^  typedef block_iterator_wrapper<true>  const_block_iterator;$/;"	t	class:llvm::Region
const_block_iterator	Instructions.h	/^  typedef BasicBlock * const *const_block_iterator;$/;"	t	class:llvm::PHINode
const_data_region_iterator	MC/MCAssembler.h	/^    const_data_region_iterator;$/;"	t	class:llvm::MCAssembler
const_element_iterator	Analysis/RegionInfo.h	/^            const_element_iterator;$/;"	t	class:llvm::Region
const_fixup_iterator	MC/MCAssembler.h	/^  typedef SmallVectorImpl<MCFixup>::const_iterator const_fixup_iterator;$/;"	t	class:llvm::MCInstFragment
const_fixup_iterator	MC/MCAssembler.h	/^  typedef std::vector<MCFixup>::const_iterator const_fixup_iterator;$/;"	t	class:llvm::MCDataFragment
const_global_iterator	Module.h	/^  typedef GlobalListType::const_iterator          const_global_iterator;$/;"	t	class:llvm::Module
const_indirect_symbol_iterator	MC/MCAssembler.h	/^    const_indirect_symbol_iterator;$/;"	t	class:llvm::MCAssembler
const_inst_iterator	Support/InstIterator.h	/^                     const Instruction> const_inst_iterator;$/;"	t	namespace:llvm
const_instr_iterator	CodeGen/MachineBasicBlock.h	/^  typedef Instructions::const_iterator                     const_instr_iterator;$/;"	t	class:llvm::MachineBasicBlock
const_iterator	ADT/ArrayRef.h	/^    typedef const T *const_iterator;$/;"	t	class:llvm::ArrayRef
const_iterator	ADT/DenseMap.h	/^                           KeyInfoT, true> const_iterator;$/;"	t	class:llvm::DenseMapBase
const_iterator	ADT/DenseSet.h	/^  typedef ConstIterator const_iterator;$/;"	t	class:llvm::DenseSet
const_iterator	ADT/FoldingSet.h	/^    const_iterator;$/;"	t	class:llvm::FoldingSetVector
const_iterator	ADT/FoldingSet.h	/^  typedef FoldingSetIterator<const T> const_iterator;$/;"	t	class:llvm::ContextualFoldingSet
const_iterator	ADT/FoldingSet.h	/^  typedef FoldingSetIterator<const T> const_iterator;$/;"	t	class:llvm::FoldingSet
const_iterator	ADT/IntervalMap.h	/^  const_iterator() : map(0) {}$/;"	f	class:llvm::IntervalMap::const_iterator
const_iterator	ADT/IntervalMap.h	/^  explicit const_iterator(const IntervalMap &map) :$/;"	f	class:llvm::IntervalMap::const_iterator
const_iterator	ADT/IntervalMap.h	/^class IntervalMap<KeyT, ValT, N, Traits>::const_iterator :$/;"	c	class:llvm::IntervalMap
const_iterator	ADT/MapVector.h	/^  typedef typename VectorType::const_iterator const_iterator;$/;"	t	class:llvm::MapVector
const_iterator	ADT/SetVector.h	/^  typedef typename vector_type::const_iterator const_iterator;$/;"	t	class:llvm::SetVector
const_iterator	ADT/SmallPtrSet.h	/^  typedef SmallPtrSetIterator<PtrType> const_iterator;$/;"	t	class:llvm::SmallPtrSet
const_iterator	ADT/SmallVector.h	/^  typedef const T *const_iterator;$/;"	t	class:llvm::SmallVectorTemplateCommon
const_iterator	ADT/SparseSet.h	/^  typedef typename DenseT::const_iterator const_iterator;$/;"	t	class:llvm::SparseSet
const_iterator	ADT/StringMap.h	/^  typedef StringMapConstIterator<ValueTy> const_iterator;$/;"	t	class:llvm::StringMap
const_iterator	ADT/StringRef.h	/^    typedef const char *const_iterator;$/;"	t	class:llvm::StringRef
const_iterator	ADT/TinyPtrVector.h	/^  typedef const EltTy *const_iterator;$/;"	t	class:llvm::TinyPtrVector
const_iterator	ADT/ValueMap.h	/^  typedef ValueMapConstIterator<MapT, KeyT> const_iterator;$/;"	t	class:llvm::ValueMap
const_iterator	ADT/ilist.h	/^  typedef ilist_iterator<const NodeTy> const_iterator;$/;"	t	class:llvm::iplist
const_iterator	Analysis/AliasSetTracker.h	/^  typedef ilist<AliasSet>::const_iterator const_iterator;$/;"	t	class:llvm::AliasSetTracker
const_iterator	Analysis/CallGraph.h	/^  typedef FunctionMapTy::const_iterator const_iterator;$/;"	t	class:llvm::CallGraph
const_iterator	Analysis/CallGraph.h	/^  typedef std::vector<CallRecord>::const_iterator const_iterator;$/;"	t	class:llvm::CallGraphNode
const_iterator	Analysis/DominanceFrontier.h	/^  typedef DomSetMapType::const_iterator const_iterator;$/;"	t	class:llvm::DominanceFrontierBase
const_iterator	Analysis/Dominators.h	/^                   const_iterator;$/;"	t	class:llvm::DomTreeNodeBase
const_iterator	Analysis/IVUsers.h	/^  typedef ilist<IVStrideUse>::const_iterator const_iterator;$/;"	t	class:llvm::IVUsers
const_iterator	Analysis/RegionInfo.h	/^  typedef RegionSet::const_iterator const_iterator;$/;"	t	class:llvm::Region
const_iterator	Analysis/Trace.h	/^  typedef BasicBlockListType::const_iterator const_iterator;$/;"	t	class:llvm::Trace
const_iterator	BasicBlock.h	/^  typedef InstListType::const_iterator                  const_iterator;$/;"	t	class:llvm::BasicBlock
const_iterator	Bitcode/Archive.h	/^    typedef MembersList::const_iterator const_iterator;$/;"	t	class:llvm::Archive
const_iterator	CodeGen/LiveInterval.h	/^    typedef Ranges::const_iterator const_iterator;$/;"	t	class:llvm::LiveInterval
const_iterator	CodeGen/LiveStackAnalysis.h	/^    typedef SS2IntervalMap::const_iterator const_iterator;$/;"	t	class:llvm::LiveStacks
const_iterator	CodeGen/MachineBasicBlock.h	/^  bundle_iterator<const MachineInstr,const_instr_iterator>       const_iterator;$/;"	t	class:llvm::MachineBasicBlock
const_iterator	CodeGen/MachineFunction.h	/^  typedef BasicBlockListType::const_iterator const_iterator;$/;"	t	class:llvm::MachineFunction
const_iterator	CodeGen/ScheduleDAG.h	/^    typedef std::vector<int>::const_iterator const_iterator;$/;"	t	class:llvm::ScheduleDAGTopologicalSort
const_iterator	CodeGen/ScheduleDAGInstrs.h	/^    typedef SparseSet<unsigned>::const_iterator const_iterator;$/;"	t	class:llvm::Reg2SUnitsMap
const_iterator	Function.h	/^  typedef BasicBlockListType::const_iterator const_iterator;$/;"	t	class:llvm::Function
const_iterator	MC/MCAsmLayout.h	/^  typedef llvm::SmallVectorImpl<MCSectionData*>::const_iterator const_iterator;$/;"	t	class:llvm::MCAsmLayout
const_iterator	MC/MCAssembler.h	/^  typedef FragmentListType::const_iterator const_iterator;$/;"	t	class:llvm::MCSectionData
const_iterator	MC/MCAssembler.h	/^  typedef SectionDataListType::const_iterator const_iterator;$/;"	t	class:llvm::MCAssembler
const_iterator	MC/MCDwarf.h	/^    typedef MCLineEntryCollection::const_iterator const_iterator;$/;"	t	class:llvm::MCLineSection
const_iterator	MC/MCRegisterInfo.h	/^  typedef const uint16_t* const_iterator;$/;"	t	class:llvm::MCRegisterClass
const_iterator	Module.h	/^  typedef FunctionListType::const_iterator               const_iterator;$/;"	t	class:llvm::Module
const_iterator	Support/PathV2.h	/^class const_iterator {$/;"	c	namespace:llvm::sys::path
const_iterator	TableGen/Record.h	/^  typedef std::vector<Init*>::const_iterator const_iterator;$/;"	t	class:llvm::ListInit
const_iterator	Target/TargetRegisterInfo.h	/^  typedef const uint16_t* const_iterator;$/;"	t	class:llvm::TargetRegisterClass
const_iterator	TypeFinder.h	/^  typedef std::vector<StructType*>::const_iterator const_iterator;$/;"	t	class:llvm::TypeFinder
const_iterator	ValueSymbolTable.h	/^  typedef ValueMap::const_iterator const_iterator;$/;"	t	class:llvm::ValueSymbolTable
const_mop_iterator	CodeGen/MachineInstr.h	/^  typedef std::vector<MachineOperand>::const_iterator const_mop_iterator;$/;"	t	class:llvm::MachineInstr
const_name_iterator	TableGen/Record.h	/^  typedef std::vector<std::string>::const_iterator const_name_iterator;$/;"	t	class:llvm::DagInit
const_named_metadata_iterator	Module.h	/^  typedef NamedMDListType::const_iterator const_named_metadata_iterator;$/;"	t	class:llvm::Module
const_op_iterator	User.h	/^  typedef const Use* const_op_iterator;$/;"	t	class:llvm::User
const_pointer	ADT/InMemoryStruct.h	/^  typedef const value_type *const_pointer;$/;"	t	class:llvm::InMemoryStruct
const_pointer	ADT/SmallVector.h	/^  typedef const T *const_pointer;$/;"	t	class:llvm::SmallVectorTemplateCommon
const_pointer	ADT/SparseSet.h	/^  typedef const ValueT *const_pointer;$/;"	t	class:llvm::SparseSet
const_pointer	ADT/ilist.h	/^  typedef const NodeTy *const_pointer;$/;"	t	class:llvm::iplist
const_pred_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::vector<MachineBasicBlock *>::const_iterator const_pred_iterator;$/;"	t	class:llvm::MachineBasicBlock
const_pred_iterator	CodeGen/ScheduleDAG.h	/^    typedef SmallVector<SDep, 4>::const_iterator const_pred_iterator;$/;"	t	class:llvm::SUnit
const_pred_iterator	Support/CFG.h	/^                     Value::const_use_iterator> const_pred_iterator;$/;"	t	namespace:llvm
const_pred_reverse_iterator	CodeGen/MachineBasicBlock.h	/^                                                   const_pred_reverse_iterator;$/;"	t	class:llvm::MachineBasicBlock
const_reference	ADT/InMemoryStruct.h	/^  typedef const value_type &const_reference;$/;"	t	class:llvm::InMemoryStruct
const_reference	ADT/SetVector.h	/^  typedef const T& const_reference;$/;"	t	class:llvm::SetVector
const_reference	ADT/SmallVector.h	/^  typedef const T &const_reference;$/;"	t	class:llvm::SmallVectorTemplateCommon
const_reference	ADT/SparseSet.h	/^  typedef const ValueT &const_reference;$/;"	t	class:llvm::SparseSet
const_reference	ADT/ilist.h	/^  typedef const NodeTy &const_reference;$/;"	t	class:llvm::iplist
const_reverse_instr_iterator	CodeGen/MachineBasicBlock.h	/^  std::reverse_iterator<const_instr_iterator>      const_reverse_instr_iterator;$/;"	t	class:llvm::MachineBasicBlock
const_reverse_iterator	ADT/SmallVector.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:llvm::SmallVectorTemplateCommon
const_reverse_iterator	ADT/ilist.h	/^  typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:llvm::iplist
const_reverse_iterator	Analysis/Trace.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:llvm::Trace
const_reverse_iterator	Bitcode/Archive.h	/^    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:llvm::Archive
const_reverse_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::reverse_iterator<const_iterator>          const_reverse_iterator;$/;"	t	class:llvm::MachineBasicBlock
const_reverse_iterator	CodeGen/MachineFunction.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:llvm::MachineFunction
const_reverse_iterator	CodeGen/ScheduleDAG.h	/^    typedef std::vector<int>::const_reverse_iterator const_reverse_iterator;$/;"	t	class:llvm::ScheduleDAGTopologicalSort
const_reverse_iterator	MC/MCAssembler.h	/^  typedef FragmentListType::const_reverse_iterator const_reverse_iterator;$/;"	t	class:llvm::MCSectionData
const_succ_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::vector<MachineBasicBlock *>::const_iterator const_succ_iterator;$/;"	t	class:llvm::MachineBasicBlock
const_succ_iterator	CodeGen/ScheduleDAG.h	/^    typedef SmallVector<SDep, 4>::const_iterator const_succ_iterator;$/;"	t	class:llvm::SUnit
const_succ_reverse_iterator	CodeGen/MachineBasicBlock.h	/^                                                   const_succ_reverse_iterator;$/;"	t	class:llvm::MachineBasicBlock
const_symbol_iterator	MC/MCAssembler.h	/^  typedef SymbolDataListType::const_iterator const_symbol_iterator;$/;"	t	class:llvm::MCAssembler
const_use_iterator	Value.h	/^  typedef value_use_iterator<const User> const_use_iterator;$/;"	t	class:llvm::Value
const_vni_iterator	CodeGen/LiveInterval.h	/^    typedef VNInfoList::const_iterator const_vni_iterator;$/;"	t	class:llvm::LiveInterval
const_weight_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::vector<uint32_t>::const_iterator const_weight_iterator;$/;"	t	class:llvm::MachineBasicBlock
constant_begin	Analysis/ConstantsScanner.h	/^inline constant_iterator constant_begin(const Function *F) {$/;"	f	namespace:llvm
constant_end	Analysis/ConstantsScanner.h	/^inline constant_iterator constant_end(const Function *F) {$/;"	f	namespace:llvm
constant_iterator	Analysis/ConstantsScanner.h	/^  inline constant_iterator(const Function *F) : InstI(inst_begin(F)), OpIdx(0) {$/;"	f	class:llvm::constant_iterator
constant_iterator	Analysis/ConstantsScanner.h	/^  inline constant_iterator(const Function *F, bool)   \/\/ end ctor$/;"	f	class:llvm::constant_iterator
constant_iterator	Analysis/ConstantsScanner.h	/^class constant_iterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
constantint_match	Support/PatternMatch.h	/^struct constantint_match {$/;"	s	namespace:llvm::PatternMatch
construct	ADT/Statistic.h	/^  void construct(const char *name, const char *desc) {$/;"	f	class:llvm::Statistic
contains	ADT/ImmutableList.h	/^  bool contains(const T& V) const {$/;"	f	class:llvm::ImmutableList
contains	ADT/ImmutableMap.h	/^  bool contains(key_type_ref K) const {$/;"	f	class:llvm::ImmutableMap
contains	ADT/ImmutableMap.h	/^  bool contains(key_type_ref K) const {$/;"	f	class:llvm::ImmutableMapRef
contains	ADT/ImmutableSet.h	/^  bool contains(key_type_ref K) { return (bool) find(K); }$/;"	f	class:llvm::ImutAVLTree
contains	ADT/ImmutableSet.h	/^  bool contains(value_type_ref V) const {$/;"	f	class:llvm::ImmutableSet
contains	ADT/ImmutableSet.h	/^  bool contains(value_type_ref V) const {$/;"	f	class:llvm::ImmutableSetRef
contains	ADT/SparseBitVector.h	/^  bool contains(const SparseBitVector<ElementSize> &RHS) const {$/;"	f	class:llvm::SparseBitVector
contains	Analysis/Interval.h	/^  inline bool contains(BasicBlock *BB) const {$/;"	f	class:llvm::Interval
contains	Analysis/LoopInfo.h	/^  bool contains(const BlockT *BB) const {$/;"	f	class:llvm::LoopBase
contains	Analysis/LoopInfo.h	/^  bool contains(const InstT *Inst) const {$/;"	f	class:llvm::LoopBase
contains	Analysis/LoopInfo.h	/^  bool contains(const LoopT *L) const {$/;"	f	class:llvm::LoopBase
contains	Analysis/RegionInfo.h	/^  bool contains(const Instruction *Inst) const {$/;"	f	class:llvm::Region
contains	Analysis/RegionInfo.h	/^  bool contains(const Region *SubRegion) const {$/;"	f	class:llvm::Region
contains	Analysis/Trace.h	/^  bool contains(const BasicBlock *X) const {$/;"	f	class:llvm::Trace
contains	CodeGen/LiveInterval.h	/^    bool contains(SlotIndex I) const {$/;"	f	struct:llvm::LiveRange
contains	CodeGen/ScheduleDAGInstrs.h	/^    bool contains(unsigned Reg) const { return PhysRegSet.count(Reg); }$/;"	f	class:llvm::Reg2SUnitsMap
contains	MC/MCRegisterInfo.h	/^  bool contains(unsigned Reg) const {$/;"	f	class:llvm::MCRegisterClass
contains	MC/MCRegisterInfo.h	/^  bool contains(unsigned Reg1, unsigned Reg2) const {$/;"	f	class:llvm::MCRegisterClass
contains	Target/TargetRegisterInfo.h	/^  bool contains(unsigned Reg) const {$/;"	f	class:llvm::TargetRegisterClass
contains	Target/TargetRegisterInfo.h	/^  bool contains(unsigned Reg1, unsigned Reg2) const {$/;"	f	class:llvm::TargetRegisterClass
containsIndirectBr	Analysis/CodeMetrics.h	/^    bool containsIndirectBr;$/;"	m	struct:llvm::CodeMetrics
containsOneValue	CodeGen/LiveInterval.h	/^    bool containsOneValue() const { return valnos.size() == 1; }$/;"	f	class:llvm::LiveInterval
containsRange	CodeGen/LiveInterval.h	/^    bool containsRange(SlotIndex S, SlotIndex E) const {$/;"	f	struct:llvm::LiveRange
containsSymbol	Object/ObjectFile.h	/^inline error_code SectionRef::containsSymbol(SymbolRef S, bool &Result) const {$/;"	f	class:llvm::object::SectionRef
containsValue	CodeGen/LiveInterval.h	/^    bool containsValue(const VNInfo *VNI) const {$/;"	f	class:llvm::LiveInterval
content_iterator	Object/ObjectFile.h	/^  content_iterator(content_type symb)$/;"	f	class:llvm::object::content_iterator
content_iterator	Object/ObjectFile.h	/^class content_iterator {$/;"	c	namespace:llvm::object
context	Support/CrashRecoveryContext.h	/^  CrashRecoveryContext *context;$/;"	m	class:llvm::CrashRecoveryContextCleanup
convertInitListSlice	TableGen/Record.h	/^  convertInitListSlice(const std::vector<unsigned> &Elements) const {$/;"	f	class:llvm::Init
convertInitializerBitRange	TableGen/Record.h	/^  convertInitializerBitRange(const std::vector<unsigned> &Bits) const {$/;"	f	class:llvm::Init
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::BitInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::BitsInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::DagInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::DefInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::FieldInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::IntInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::ListInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::OpInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::StringInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::UnsetInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::VarBitInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::VarInit
convertInitializerTo	TableGen/Record.h	/^  virtual Init *convertInitializerTo(RecTy *Ty) const {$/;"	f	class:llvm::VarListElementInit
convertToThreeAddress	Target/TargetInstrInfo.h	/^  convertToThreeAddress(MachineFunction::iterator &MFI,$/;"	f	class:llvm::TargetInstrInfo
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   BitInit *BI) { return (Init*)BI; }$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   BitInit *BI) { return 0; }$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   BitInit *BI) { return 0; }$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   BitInit *BI) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   BitInit *BI) { return 0; }$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   BitInit *BI) { return 0; }$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DagInit *CI) { return (Init*)CI; }$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DagInit *DI) { return 0; }$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DagInit *DI) { return 0; }$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DagInit *DI) { return 0; }$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DagInit *DI) { return 0; }$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DagInit *DI) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DagInit *DI) { return 0; }$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DagInit *DI) { return 0; }$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DefInit *DI) { return 0; }$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DefInit *DI) { return 0; }$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DefInit *DI) { return 0; }$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DefInit *DI) { return 0; }$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DefInit *DI) { return 0; }$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DefInit *DI) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   DefInit *DI) { return 0; }$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   IntInit *II) { return (Init*)II; }$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   IntInit *II) { return 0; }$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   IntInit *II) { return 0; }$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   IntInit *II) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   IntInit *II) { return 0; }$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   IntInit *II) { return 0; }$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   VarInit *VI) { return RecTy::convertValue(VI);}$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   VarInit *VI) { return RecTy::convertValue(VI);}$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   VarInit *VI) { return RecTy::convertValue(VI);}$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   VarInit *VI) { return RecTy::convertValue(VI);}$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   VarInit *VI) { return RecTy::convertValue(VI);}$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   VarInit *VI) { return RecTy::convertValue(VI);}$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   VarInit *VI) { return RecTy::convertValue(VI);}$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(   VarInit *VI) {$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  BitsInit *BI) { return 0; }$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  BitsInit *BI) { return 0; }$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  BitsInit *BI) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  BitsInit *BI) { return 0; }$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  BitsInit *BI) { return 0; }$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  ListInit *LI) { return 0; }$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  ListInit *LI) { return 0; }$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  ListInit *LI) { return 0; }$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  ListInit *LI) { return 0; }$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  ListInit *LI) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  ListInit *LI) { return 0; }$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(  ListInit *LI) { return 0; }$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( BinOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( BinOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( BinOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( BinOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( BinOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( BinOpInit *UI) {$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( FieldInit *FI) { return RecTy::convertValue(FI);}$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( FieldInit *FI) { return RecTy::convertValue(FI);}$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( FieldInit *FI) { return RecTy::convertValue(FI);}$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( FieldInit *FI) { return RecTy::convertValue(FI);}$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( FieldInit *FI) { return RecTy::convertValue(FI);}$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( FieldInit *FI) { return RecTy::convertValue(FI);}$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( FieldInit *FI) { return RecTy::convertValue(FI);}$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( FieldInit *FI) {$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( TernOpInit *BO) { return RecTy::convertValue(BO);}$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( TernOpInit *BO) { return RecTy::convertValue(BO);}$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( TernOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( TernOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( TernOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( TernOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( TernOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( TernOpInit *UI) {$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( TypedInit *TI) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnOpInit *UI) { return RecTy::convertValue(UI);}$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnOpInit *UI) {$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnsetInit *UI) { return (Init*)UI; }$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnsetInit *UI) { return (Init*)UI; }$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnsetInit *UI) { return (Init*)UI; }$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnsetInit *UI) { return (Init*)UI; }$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnsetInit *UI) { return (Init*)UI; }$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnsetInit *UI) { return (Init*)UI; }$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue( UnsetInit *UI) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(StringInit *SI) { return (Init*)SI; }$/;"	f	class:llvm::StringRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(StringInit *SI) { return 0; }$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(StringInit *SI) { return 0; }$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(StringInit *SI) { return 0; }$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(StringInit *SI) { return 0; }$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(StringInit *SI) { return 0; }$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(StringInit *SI) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(StringInit *SI) { return 0; }$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(VarBitInit *VB) { return (Init*)VB; }$/;"	f	class:llvm::BitRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(VarBitInit *VB) { return 0; }$/;"	f	class:llvm::BitsRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(VarBitInit *VB) { return 0; }$/;"	f	class:llvm::DagRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(VarBitInit *VB) { return 0; }$/;"	f	class:llvm::IntRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(VarBitInit *VB) { return 0; }$/;"	f	class:llvm::ListRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(VarBitInit *VB) { return 0; }$/;"	f	class:llvm::RecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(VarBitInit *VB) { return 0; }$/;"	f	class:llvm::RecordRecTy
convertValue	TableGen/Record.h	/^  virtual Init *convertValue(VarBitInit *VB) { return 0; }$/;"	f	class:llvm::StringRecTy
copy	ADT/IntervalMap.h	/^  void copy(const NodeBase<T1, T2, M> &Other, unsigned i,$/;"	f	class:llvm::IntervalMapImpl::NodeBase
copyFrom	ADT/DenseMap.h	/^  void copyFrom(const DenseMap& other) {$/;"	f	class:llvm::DenseMap
copyFrom	ADT/DenseMap.h	/^  void copyFrom(const DenseMapBase<OtherBaseT, KeyT, ValueT, KeyInfoT>& other) {$/;"	f	class:llvm::DenseMapBase
copyFrom	ADT/DenseMap.h	/^  void copyFrom(const SmallDenseMap& other) {$/;"	f	class:llvm::SmallDenseMap
copyFrom	CodeGen/LiveInterval.h	/^    void copyFrom(VNInfo &src) {$/;"	f	class:llvm::VNInfo
copyFrom	CodeGen/PBQP/Graph.h	/^  void Graph::copyFrom(const Graph &other) {$/;"	f	class:PBQP::Graph
copyPhysReg	Target/TargetInstrInfo.h	/^  virtual void copyPhysReg(MachineBasicBlock &MBB,$/;"	f	class:llvm::TargetInstrInfo
copy_option	Support/FileSystem.h	/^  copy_option(_ v) : v_(v) {}$/;"	f	struct:llvm::sys::fs::copy_option
copy_option	Support/FileSystem.h	/^  explicit copy_option(int v) : v_(_(v)) {}$/;"	f	struct:llvm::sys::fs::copy_option
copy_option	Support/FileSystem.h	/^struct copy_option {$/;"	s	namespace:llvm::sys::fs
copysign	Target/TargetLibraryInfo.h	/^      copysign,$/;"	e	enum:llvm::LibFunc::Func
copysignf	Target/TargetLibraryInfo.h	/^      copysignf,$/;"	e	enum:llvm::LibFunc::Func
copysignl	Target/TargetLibraryInfo.h	/^      copysignl,$/;"	e	enum:llvm::LibFunc::Func
cos	Target/TargetLibraryInfo.h	/^      cos,$/;"	e	enum:llvm::LibFunc::Func
cosf	Target/TargetLibraryInfo.h	/^      cosf,$/;"	e	enum:llvm::LibFunc::Func
cosh	Target/TargetLibraryInfo.h	/^      cosh,$/;"	e	enum:llvm::LibFunc::Func
coshf	Target/TargetLibraryInfo.h	/^      coshf,$/;"	e	enum:llvm::LibFunc::Func
coshl	Target/TargetLibraryInfo.h	/^      coshl,$/;"	e	enum:llvm::LibFunc::Func
cosl	Target/TargetLibraryInfo.h	/^      cosl,$/;"	e	enum:llvm::LibFunc::Func
costs	CodeGen/PBQP/Graph.h	/^      Matrix costs;$/;"	m	class:PBQP::Graph::EdgeEntry
costs	CodeGen/PBQP/Graph.h	/^      Vector costs;      $/;"	m	class:PBQP::Graph::NodeEntry
count	ADT/BitVector.h	/^  unsigned count() const {$/;"	f	class:llvm::BitVector
count	ADT/DenseMap.h	/^  bool count(const KeyT &Val) const {$/;"	f	class:llvm::DenseMapBase
count	ADT/DenseSet.h	/^  bool count(const ValueT &V) const {$/;"	f	class:llvm::DenseSet
count	ADT/MapVector.h	/^  unsigned count(const KeyT &Key) const {$/;"	f	class:llvm::MapVector
count	ADT/ScopedHashTable.h	/^  bool count(const K &Key) const {$/;"	f	class:llvm::ScopedHashTable
count	ADT/SetVector.h	/^  size_type count(const key_type &key) const {$/;"	f	class:llvm::SetVector
count	ADT/SmallBitVector.h	/^  unsigned count() const {$/;"	f	class:llvm::SmallBitVector
count	ADT/SmallPtrSet.h	/^  bool count(PtrType Ptr) const {$/;"	f	class:llvm::SmallPtrSet
count	ADT/SmallSet.h	/^  bool count(const T &V) const {$/;"	f	class:llvm::SmallSet
count	ADT/SmallString.h	/^  size_t count(StringRef Str) const {$/;"	f	class:llvm::SmallString
count	ADT/SmallString.h	/^  size_t count(char C) const {$/;"	f	class:llvm::SmallString
count	ADT/SparseBitVector.h	/^  unsigned count() const {$/;"	f	class:llvm::SparseBitVector
count	ADT/SparseBitVector.h	/^  unsigned count() const {$/;"	f	struct:llvm::SparseBitVectorElement
count	ADT/SparseSet.h	/^  bool count(const KeyT &Key) const {$/;"	f	class:llvm::SparseSet
count	ADT/StringMap.h	/^  size_type count(StringRef Key) const {$/;"	f	class:llvm::StringMap
count	ADT/StringRef.h	/^    size_t count(char C) const {$/;"	f	class:llvm::StringRef
count	ADT/ValueMap.h	/^  bool count(const KeyT &Val) const {$/;"	f	class:llvm::ValueMap
countLeadingZeros	ADT/APInt.h	/^  unsigned countLeadingZeros() const {$/;"	f	class:llvm::APInt
countPopulation	ADT/APInt.h	/^  unsigned countPopulation() const {$/;"	f	class:llvm::APInt
countTrailingOnes	ADT/APInt.h	/^  unsigned countTrailingOnes() const {$/;"	f	class:llvm::APInt
count_imp	ADT/SmallPtrSet.h	/^  bool count_imp(const void * Ptr) const {$/;"	f	class:llvm::SmallPtrSetImpl
cpusubtype	Support/MachO.h	/^      uint32_t cpusubtype;$/;"	m	struct:llvm::MachO::fat_arch
cpusubtype	Support/MachO.h	/^      uint32_t cpusubtype;$/;"	m	struct:llvm::MachO::mach_header
cpusubtype	Support/MachO.h	/^      uint32_t cpusubtype;$/;"	m	struct:llvm::MachO::mach_header_64
cputype	Support/MachO.h	/^      uint32_t cputype;$/;"	m	struct:llvm::MachO::fat_arch
cputype	Support/MachO.h	/^      uint32_t cputype;$/;"	m	struct:llvm::MachO::mach_header
cputype	Support/MachO.h	/^      uint32_t cputype;$/;"	m	struct:llvm::MachO::mach_header_64
crc	Support/system_error.h	/^  crc                     = 23, \/\/ ERROR_CRC,$/;"	e	enum:llvm::windows_error::_
create	ADT/Hashing.h	/^  static hash_state create(const char *s, uint64_t seed) {$/;"	f	struct:llvm::hashing::detail::hash_state
create	ADT/ImmutableList.h	/^  ImmutableList<T> create(const T& X) {$/;"	f	class:llvm::ImmutableListFactory
create	ADT/Optional.h	/^  static inline Optional create(const T* y) {$/;"	f	class:llvm::Optional
create	CodeGen/LiveRangeEdit.h	/^  LiveInterval &create() {$/;"	f	class:llvm::LiveRangeEdit
create	ExecutionEngine/ExecutionEngine.h	/^  ExecutionEngine *create() {$/;"	f	class:llvm::EngineBuilder
create	Support/CrashRecoveryContext.h	/^  static DERIVED *create(T *x) {$/;"	f	class:llvm::CrashRecoveryContextCleanupBase
createAnonymousTBAARoot	MDBuilder.h	/^    MDNode *createAnonymousTBAARoot() {$/;"	f	class:llvm::MDBuilder
createAsmPrinter	Support/TargetRegistry.h	/^    AsmPrinter *createAsmPrinter(TargetMachine &TM, MCStreamer &Streamer) const{$/;"	f	class:llvm::Target
createAsmStreamer	Support/TargetRegistry.h	/^    MCStreamer *createAsmStreamer(MCContext &Ctx,$/;"	f	class:llvm::Target
createBranchWeights	MDBuilder.h	/^    MDNode *createBranchWeights(ArrayRef<uint32_t> Weights) {$/;"	f	class:llvm::MDBuilder
createBranchWeights	MDBuilder.h	/^    MDNode *createBranchWeights(uint32_t TrueWeight, uint32_t FalseWeight) {$/;"	f	class:llvm::MDBuilder
createELFObjectTargetWriter	MC/MCAsmBackend.h	/^  virtual  MCELFObjectTargetWriter *createELFObjectTargetWriter() const {$/;"	f	class:llvm::MCAsmBackend
createEntry	CodeGen/SlotIndexes.h	/^    IndexListEntry* createEntry(MachineInstr *mi, unsigned index) {$/;"	f	class:llvm::SlotIndexes
createFPMath	MDBuilder.h	/^    MDNode *createFPMath(float Accuracy) {$/;"	f	class:llvm::MDBuilder
createFastISel	Target/TargetLowering.h	/^  virtual FastISel *createFastISel(FunctionLoweringInfo &,$/;"	f	class:llvm::TargetLowering
createIntelJITEventListener	ExecutionEngine/JITEventListener.h	/^  static JITEventListener *createIntelJITEventListener($/;"	f	class:llvm::JITEventListener
createIntelJITEventListener	ExecutionEngine/JITEventListener.h	/^  static JITEventListener *createIntelJITEventListener() { return 0; }$/;"	f	class:llvm::JITEventListener
createMCAsmBackend	Support/TargetRegistry.h	/^    MCAsmBackend *createMCAsmBackend(StringRef Triple, StringRef CPU) const {$/;"	f	class:llvm::Target
createMCAsmInfo	Support/TargetRegistry.h	/^    MCAsmInfo *createMCAsmInfo(StringRef Triple) const {$/;"	f	class:llvm::Target
createMCAsmLexer	Support/TargetRegistry.h	/^    MCTargetAsmLexer *createMCAsmLexer(const MCRegisterInfo &MRI,$/;"	f	class:llvm::Target
createMCAsmParser	Support/TargetRegistry.h	/^    MCTargetAsmParser *createMCAsmParser(MCSubtargetInfo &STI,$/;"	f	class:llvm::Target
createMCCodeEmitter	Support/TargetRegistry.h	/^    MCCodeEmitter *createMCCodeEmitter(const MCInstrInfo &II,$/;"	f	class:llvm::Target
createMCCodeGenInfo	Support/TargetRegistry.h	/^    MCCodeGenInfo *createMCCodeGenInfo(StringRef Triple, Reloc::Model RM,$/;"	f	class:llvm::Target
createMCDisassembler	Support/TargetRegistry.h	/^    MCDisassembler *createMCDisassembler(const MCSubtargetInfo &STI) const {$/;"	f	class:llvm::Target
createMCInstPrinter	Support/TargetRegistry.h	/^    MCInstPrinter *createMCInstPrinter(unsigned SyntaxVariant,$/;"	f	class:llvm::Target
createMCInstrAnalysis	Support/TargetRegistry.h	/^    MCInstrAnalysis *createMCInstrAnalysis(const MCInstrInfo *Info) const {$/;"	f	class:llvm::Target
createMCInstrInfo	Support/TargetRegistry.h	/^    MCInstrInfo *createMCInstrInfo() const {$/;"	f	class:llvm::Target
createMCObjectStreamer	Support/TargetRegistry.h	/^    MCStreamer *createMCObjectStreamer(StringRef TT, MCContext &Ctx,$/;"	f	class:llvm::Target
createMCRegInfo	Support/TargetRegistry.h	/^    MCRegisterInfo *createMCRegInfo(StringRef Triple) const {$/;"	f	class:llvm::Target
createMCSubtargetInfo	Support/TargetRegistry.h	/^    MCSubtargetInfo *createMCSubtargetInfo(StringRef Triple, StringRef CPU,$/;"	f	class:llvm::Target
createNode	ADT/ImmutableSet.h	/^  TreeTy* createNode(TreeTy* L, value_type_ref V, TreeTy* R) {$/;"	f	class:llvm::ImutAVLFactory
createNode	ADT/ImmutableSet.h	/^  TreeTy* createNode(TreeTy* newLeft, TreeTy* oldTree, TreeTy* newRight) {$/;"	f	class:llvm::ImutAVLFactory
createNode	ADT/ilist.h	/^  static NodeTy *createNode(const NodeTy &V) { return new NodeTy(V); }$/;"	f	struct:llvm::ilist_node_traits
createNull	ADT/Twine.h	/^    static Twine createNull() {$/;"	f	class:llvm::Twine
createOProfileJITEventListener	ExecutionEngine/JITEventListener.h	/^  static JITEventListener *createOProfileJITEventListener($/;"	f	class:llvm::JITEventListener
createOProfileJITEventListener	ExecutionEngine/JITEventListener.h	/^  static JITEventListener *createOProfileJITEventListener() { return 0; }$/;"	f	class:llvm::JITEventListener
createRange	MDBuilder.h	/^    MDNode *createRange(const APInt &Lo, const APInt &Hi) {$/;"	f	class:llvm::MDBuilder
createSentinel	ADT/SparseBitVector.h	/^  Element *createSentinel() const { return static_cast<Element *>(&Sentinel); }$/;"	f	struct:llvm::ilist_traits
createSentinel	ADT/ilist.h	/^  static NodeTy *createSentinel() { return new NodeTy(); }$/;"	f	struct:llvm::ilist_sentinel_traits
createSentinel	Analysis/IVUsers.h	/^  IVStrideUse *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	BasicBlock.h	/^  Instruction *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	CodeGen/MachineBasicBlock.h	/^  MachineInstr *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	CodeGen/MachineFunction.h	/^  MachineBasicBlock *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	CodeGen/SelectionDAG.h	/^  SDNode *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	CodeGen/SlotIndexes.h	/^    IndexListEntry *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	Function.h	/^  Argument *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	Function.h	/^  BasicBlock *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	Module.h	/^  Function *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	Module.h	/^  GlobalAlias *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	Module.h	/^  GlobalVariable *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	Module.h	/^  NamedMDNode *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createSentinel	Support/Recycler.h	/^  RecyclerStruct *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createString	MDBuilder.h	/^    MDString *createString(StringRef Str) {$/;"	f	class:llvm::MDBuilder
createTBAANode	MDBuilder.h	/^    MDNode *createTBAANode(StringRef Name, MDNode *Parent,$/;"	f	class:llvm::MDBuilder
createTBAARoot	MDBuilder.h	/^    MDNode *createTBAARoot(StringRef Name) {$/;"	f	class:llvm::MDBuilder
createTBAAStructNode	MDBuilder.h	/^    MDNode *createTBAAStructNode(ArrayRef<TBAAStructField> Fields) {$/;"	f	class:llvm::MDBuilder
createTargetMachine	Support/TargetRegistry.h	/^    TargetMachine *createTargetMachine(StringRef Triple, StringRef CPU,$/;"	f	class:llvm::Target
createValueCopy	CodeGen/LiveInterval.h	/^    VNInfo *createValueCopy(const VNInfo *orig,$/;"	f	class:llvm::LiveInterval
createdNodes	ADT/ImmutableSet.h	/^  std::vector<TreeTy*> createdNodes;$/;"	m	class:llvm::ImutAVLFactory
cross_device_link	Support/system_error.h	/^  cross_device_link                   = EXDEV,$/;"	e	enum:llvm::errc::_
cryptid	Support/MachO.h	/^      uint32_t cryptid;$/;"	m	struct:llvm::MachO::encryption_info_command
cryptoff	Support/MachO.h	/^      uint32_t cryptoff;$/;"	m	struct:llvm::MachO::encryption_info_command
cryptsize	Support/MachO.h	/^      uint32_t cryptsize;$/;"	m	struct:llvm::MachO::encryption_info_command
cst_pred_ty	Support/PatternMatch.h	/^struct cst_pred_ty : public Predicate {$/;"	s	namespace:llvm::PatternMatch
curTrueDep	LDDProfilingCommon.h	/^    size_t curTrueDep;$/;"	m	struct:dInfo
current	ADT/STLExtras.h	/^  RootIt current;$/;"	m	class:llvm::mapped_iterator
currentAlternativeIndex	InlineAsm.h	/^    unsigned currentAlternativeIndex;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
current_directory	Support/system_error.h	/^  current_directory       = 16, \/\/ ERROR_CURRENT_DIRECTORY,$/;"	e	enum:llvm::windows_error::_
current_version	Support/MachO.h	/^      uint32_t current_version;$/;"	m	struct:llvm::MachO::dylib
customReadBarrier	CodeGen/GCStrategy.h	/^    bool customReadBarrier() const { return CustomReadBarriers; }$/;"	f	class:llvm::GCStrategy
customRoots	CodeGen/GCStrategy.h	/^    bool customRoots() const { return CustomRoots; }$/;"	f	class:llvm::GCStrategy
customSafePoints	CodeGen/GCStrategy.h	/^    bool customSafePoints() const { return CustomSafePoints; }$/;"	f	class:llvm::GCStrategy
customWriteBarrier	CodeGen/GCStrategy.h	/^    bool customWriteBarrier() const { return CustomWriteBarriers; }$/;"	f	class:llvm::GCStrategy
cxa_atexit	Target/TargetLibraryInfo.h	/^      cxa_atexit,$/;"	e	enum:llvm::LibFunc::Func
cxa_guard_abort	Target/TargetLibraryInfo.h	/^      cxa_guard_abort,      $/;"	e	enum:llvm::LibFunc::Func
cxa_guard_acquire	Target/TargetLibraryInfo.h	/^      cxa_guard_acquire,$/;"	e	enum:llvm::LibFunc::Func
cxa_guard_release	Target/TargetLibraryInfo.h	/^      cxa_guard_release,$/;"	e	enum:llvm::LibFunc::Func
d	Object/ObjectFile.h	/^  } d;$/;"	m	union:llvm::object::DataRefImpl	typeref:struct:llvm::object::DataRefImpl::__anon76
dInfo	LDDProfilingCommon.h	/^  typedef struct dInfo{$/;"	s
d_ptr	Object/ELF.h	/^    Elf_Addr d_ptr;$/;"	m	union:llvm::object::Elf_Dyn_Base::__anon73
d_ptr	Object/ELF.h	/^    Elf_Addr d_ptr;$/;"	m	union:llvm::object::Elf_Dyn_Base::__anon74
d_ptr	Support/ELF.h	/^      Elf32_Addr d_ptr;         \/\/ Pointer value of entry.$/;"	m	union:llvm::ELF::Elf32_Dyn::__anon108
d_ptr	Support/ELF.h	/^      Elf64_Addr  d_ptr;        \/\/ Pointer value of entry.$/;"	m	union:llvm::ELF::Elf64_Dyn::__anon109
d_tag	Object/ELF.h	/^  Elf_Sword d_tag;$/;"	m	struct:llvm::object::Elf_Dyn_Base
d_tag	Object/ELF.h	/^  Elf_Sxword d_tag;$/;"	m	struct:llvm::object::Elf_Dyn_Base
d_tag	Support/ELF.h	/^  Elf32_Sword d_tag;            \/\/ Type of dynamic table entry.$/;"	m	struct:llvm::ELF::Elf32_Dyn
d_tag	Support/ELF.h	/^  Elf64_Sxword d_tag;           \/\/ Type of dynamic table entry.$/;"	m	struct:llvm::ELF::Elf64_Dyn
d_un	Object/ELF.h	/^  } d_un;$/;"	m	struct:llvm::object::Elf_Dyn_Base	typeref:union:llvm::object::Elf_Dyn_Base::__anon73
d_un	Object/ELF.h	/^  } d_un;$/;"	m	struct:llvm::object::Elf_Dyn_Base	typeref:union:llvm::object::Elf_Dyn_Base::__anon74
d_un	Support/ELF.h	/^  } d_un;$/;"	m	struct:llvm::ELF::Elf32_Dyn	typeref:union:llvm::ELF::Elf32_Dyn::__anon108
d_un	Support/ELF.h	/^  } d_un;$/;"	m	struct:llvm::ELF::Elf64_Dyn	typeref:union:llvm::ELF::Elf64_Dyn::__anon109
d_val	Object/ELF.h	/^    Elf_Word d_val;$/;"	m	union:llvm::object::Elf_Dyn_Base::__anon73
d_val	Object/ELF.h	/^    Elf_Xword d_val;$/;"	m	union:llvm::object::Elf_Dyn_Base::__anon74
d_val	Support/ELF.h	/^      Elf32_Word d_val;         \/\/ Integer value of entry.$/;"	m	union:llvm::ELF::Elf32_Dyn::__anon108
d_val	Support/ELF.h	/^      Elf64_Xword d_val;        \/\/ Integer value of entry.$/;"	m	union:llvm::ELF::Elf64_Dyn::__anon109
data	ADT/ArrayRef.h	/^    T *data() const { return const_cast<T*>(ArrayRef<T>::data()); }$/;"	f	class:llvm::MutableArrayRef
data	ADT/ArrayRef.h	/^    const T *data() const { return Data; }$/;"	f	class:llvm::ArrayRef
data	ADT/FoldingSet.h	/^  T data;$/;"	m	class:llvm::FoldingSetNodeWrapper
data	ADT/IntervalMap.h	/^  char data[RootDataSize];$/;"	m	class:llvm::IntervalMap
data	ADT/SmallVector.h	/^  const_pointer data() const { return const_pointer(begin()); }$/;"	f	class:llvm::SmallVectorTemplateCommon
data	ADT/SmallVector.h	/^  pointer data() { return pointer(begin()); }$/;"	f	class:llvm::SmallVectorTemplateCommon
data	ADT/StringRef.h	/^    const char *data() const { return Data; }$/;"	f	class:llvm::StringRef
data	Bitcode/Archive.h	/^    const char*         data;     \/\/\/< Data for the member$/;"	m	class:llvm::ArchiveMember
data	CodeGen/PBQP/Graph.h	/^      void *data;$/;"	m	class:PBQP::Graph::EdgeEntry
data	CodeGen/PBQP/Graph.h	/^      void *data;$/;"	m	class:PBQP::Graph::NodeEntry
data	CodeGen/PBQP/Math.h	/^    PBQPNum *data;$/;"	m	class:PBQP::Matrix
data	CodeGen/PBQP/Math.h	/^    PBQPNum *data;$/;"	m	class:PBQP::Vector
data	Support/COFF.h	/^    uint32_t data;$/;"	m	struct:llvm::COFF::ImportLookupTableEntry32
data	Support/ThreadLocal.h	/^        char data[sizeof(ThreadLocalDataTy)];$/;"	m	union:llvm::sys::ThreadLocalImpl::__anon135
dataAs	ADT/IntervalMap.h	/^  T &dataAs() const {$/;"	f	class:llvm::IntervalMap
data_	Support/Mutex.h	/^      void* data_; \/\/\/< We don't know what the data will be$/;"	m	class:llvm::sys::MutexImpl
data_	Support/RWMutex.h	/^      void* data_; \/\/\/< We don't know what the data will be$/;"	m	class:llvm::sys::RWMutexImpl
data_region_begin	MC/MCAssembler.h	/^  const_data_region_iterator data_region_begin() const {$/;"	f	class:llvm::MCAssembler
data_region_begin	MC/MCAssembler.h	/^  data_region_iterator data_region_begin() {$/;"	f	class:llvm::MCAssembler
data_region_end	MC/MCAssembler.h	/^  const_data_region_iterator data_region_end() const {$/;"	f	class:llvm::MCAssembler
data_region_end	MC/MCAssembler.h	/^  data_region_iterator data_region_end() {$/;"	f	class:llvm::MCAssembler
data_region_iterator	MC/MCAssembler.h	/^  typedef std::vector<DataRegionData>::iterator data_region_iterator;$/;"	t	class:llvm::MCAssembler
data_region_size	MC/MCAssembler.h	/^  size_t data_region_size() const { return DataRegions.size(); }$/;"	f	class:llvm::MCAssembler
data_type	ADT/ImmutableIntervalMap.h	/^  typedef const T data_type;$/;"	t	struct:llvm::ImutIntervalInfo
data_type	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutInfo::data_type      data_type;$/;"	t	class:llvm::ImutIntervalAVLFactory
data_type	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutIntervalInfo<ValT>::data_type       data_type;$/;"	t	class:llvm::ImmutableIntervalMap
data_type	ADT/ImmutableMap.h	/^  typedef const S   data_type;$/;"	t	struct:llvm::ImutKeyValueInfo
data_type	ADT/ImmutableMap.h	/^  typedef typename ValInfo::data_type       data_type;$/;"	t	class:llvm::ImmutableMap
data_type	ADT/ImmutableMap.h	/^  typedef typename ValInfo::data_type       data_type;$/;"	t	class:llvm::ImmutableMapRef
data_type	ADT/ImmutableSet.h	/^  typedef bool            data_type;$/;"	t	struct:llvm::ImutContainerInfo
data_type_ref	ADT/ImmutableIntervalMap.h	/^  typedef const T &data_type_ref;$/;"	t	struct:llvm::ImutIntervalInfo
data_type_ref	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutInfo::data_type_ref  data_type_ref;$/;"	t	class:llvm::ImutIntervalAVLFactory
data_type_ref	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutIntervalInfo<ValT>::data_type_ref   data_type_ref;$/;"	t	class:llvm::ImmutableIntervalMap
data_type_ref	ADT/ImmutableMap.h	/^  typedef const S&  data_type_ref;$/;"	t	struct:llvm::ImutKeyValueInfo
data_type_ref	ADT/ImmutableMap.h	/^  typedef typename ValInfo::data_type_ref   data_type_ref;$/;"	t	class:llvm::ImmutableMap
data_type_ref	ADT/ImmutableMap.h	/^  typedef typename ValInfo::data_type_ref   data_type_ref;$/;"	t	class:llvm::ImmutableMapRef
data_type_ref	ADT/ImmutableSet.h	/^  typedef bool            data_type_ref;$/;"	t	struct:llvm::ImutContainerInfo
dataoff	Support/MachO.h	/^      uint32_t dataoff;$/;"	m	struct:llvm::MachO::linkedit_data_command
datasize	Support/MachO.h	/^      uint32_t datasize;$/;"	m	struct:llvm::MachO::linkedit_data_command
deallocateBuckets	ADT/DenseMap.h	/^  void deallocateBuckets() {$/;"	f	class:llvm::SmallDenseMap
debugLoc	CodeGen/MachineInstr.h	/^  DebugLoc debugLoc;                    \/\/ Source line information.$/;"	m	class:llvm::MachineInstr
debugLoc	CodeGen/SelectionDAGNodes.h	/^  DebugLoc debugLoc;$/;"	m	class:llvm::SDNode
decI	ADT/Twine.h	/^      int decI;$/;"	m	union:llvm::Twine::Child
decL	ADT/Twine.h	/^      const long *decL;$/;"	m	union:llvm::Twine::Child
decLL	ADT/Twine.h	/^      const long long *decLL;$/;"	m	union:llvm::Twine::Child
decUI	ADT/Twine.h	/^      unsigned int decUI;$/;"	m	union:llvm::Twine::Child
decUL	ADT/Twine.h	/^      const unsigned long *decUL;$/;"	m	union:llvm::Twine::Child
decULL	ADT/Twine.h	/^      const unsigned long long *decULL;$/;"	m	union:llvm::Twine::Child
decodeULEB128	Support/LEB128.h	/^static inline uint64_t decodeULEB128(const uint8_t *p, unsigned *n = 0) {$/;"	f	namespace:llvm
decrementNumEntries	ADT/DenseMap.h	/^  void decrementNumEntries() {$/;"	f	class:llvm::DenseMapBase
decrementNumTombstones	ADT/DenseMap.h	/^  void decrementNumTombstones() {$/;"	f	class:llvm::DenseMapBase
def	CodeGen/LiveInterval.h	/^    SlotIndex def;$/;"	m	class:llvm::VNInfo
def_begin	CodeGen/MachineRegisterInfo.h	/^  def_iterator def_begin(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
def_empty	CodeGen/MachineRegisterInfo.h	/^  bool def_empty(unsigned RegNo) const { return def_begin(RegNo) == def_end(); }$/;"	f	class:llvm::MachineRegisterInfo
def_end	CodeGen/MachineRegisterInfo.h	/^  static def_iterator def_end() { return def_iterator(0); }$/;"	f	class:llvm::MachineRegisterInfo
def_iterator	CodeGen/MachineRegisterInfo.h	/^  typedef defusechain_iterator<false,true,false> def_iterator;$/;"	t	class:llvm::MachineRegisterInfo
default_error_condition	Support/system_error.h	/^  error_condition default_error_condition() const$/;"	f	class:llvm::error_code
definesRegister	CodeGen/MachineInstr.h	/^  bool definesRegister(unsigned Reg, const TargetRegisterInfo *TRI=NULL) const {$/;"	f	class:llvm::MachineInstr
defusechain_iterator	CodeGen/MachineRegisterInfo.h	/^    defusechain_iterator() : Op(0) {}$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
defusechain_iterator	CodeGen/MachineRegisterInfo.h	/^    defusechain_iterator(const defusechain_iterator &I) : Op(I.Op) {}$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
defusechain_iterator	CodeGen/MachineRegisterInfo.h	/^    explicit defusechain_iterator(MachineOperand *op) : Op(op) {$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
defusechain_iterator	CodeGen/MachineRegisterInfo.h	/^  class defusechain_iterator$/;"	c	class:llvm::MachineRegisterInfo
degree	CodeGen/PBQP/Graph.h	/^      unsigned degree;$/;"	m	class:PBQP::Graph::NodeEntry
delegateCallInst	Support/InstVisitor.h	/^  RetTy delegateCallInst(CallInst &I) {$/;"	f	class:llvm::InstVisitor
delegateCallInst	Support/InstVisitor.h	/^  RetTy delegateCallInst(Instruction &I) {$/;"	f	class:llvm::InstVisitor
deleteAnalysisValue	Analysis/LoopPass.h	/^  virtual void deleteAnalysisValue(Value *V, Loop *L) {}$/;"	f	class:llvm::LoopPass
deleteBody	Function.h	/^  void deleteBody() {$/;"	f	class:llvm::Function
deleteNode	ADT/IntervalMap.h	/^  template <typename NodeT> void deleteNode(NodeT *P) {$/;"	f	class:llvm::IntervalMap
deleteNode	ADT/IntervalMap.h	/^deleteNode(IntervalMapImpl::NodeRef Node, unsigned Level) {$/;"	f	class:llvm::IntervalMap
deleteNode	ADT/ilist.h	/^  static void deleteNode(NodeTy *V) { delete V; }$/;"	f	struct:llvm::ilist_node_traits
deleteNode	CodeGen/SelectionDAG.h	/^  static void deleteNode(SDNode *) {$/;"	f	struct:llvm::ilist_traits
deleteNode	CodeGen/SlotIndexes.h	/^    void deleteNode(IndexListEntry *N) {}$/;"	f	struct:llvm::ilist_traits
deleteNode	Support/Recycler.h	/^  static void deleteNode(RecyclerStruct *) {$/;"	f	struct:llvm::ilist_traits
deleted	ADT/ValueMap.h	/^  virtual void deleted() {$/;"	f	class:llvm::ValueMapCallbackVH
deleter	ADT/STLExtras.h	/^inline void deleter(T *Ptr) {$/;"	f	namespace:llvm
dep	LDDProfilingCommon.h	/^  typedef struct dep{$/;"	s
depInfo	LDDProfilingCommon.h	/^  }depInfo;$/;"	t	typeref:struct:dInfo
depInfoPtr	LDDProfilingCommon.h	/^    depInfo *depInfoPtr;$/;"	m	struct:memRW
depNode	LDDProfilingCommon.h	/^  }depNode;$/;"	t	typeref:struct:dep
depType	LDDProfilingCommon.h	/^    bool depType; \/\/ 0-Anti, 1-Output, 2-Flow $/;"	m	struct:dep
deref	CodeGen/MachineInstrBundle.h	/^  MachineOperand &deref() const { return *OpI; }$/;"	f	class:llvm::MachineOperandIteratorBase
desc	Support/CommandLine.h	/^  desc(const char *Str) : Desc(Str) {}$/;"	f	struct:llvm::cl::desc
desc	Support/CommandLine.h	/^struct desc {$/;"	s	namespace:llvm::cl
descof	Support/Registry.h	/^    static const char *descof(const entry &Entry) { return Entry.getDesc(); }$/;"	f	class:llvm::RegistryTraits
destination_address_required	Support/system_error.h	/^  destination_address_required        = EDESTADDRREQ,$/;"	e	enum:llvm::errc::_
destroy	ADT/ImmutableSet.h	/^  void destroy() {$/;"	f	class:llvm::ImutAVLTree
destroyAll	ADT/DenseMap.h	/^  void destroyAll() {$/;"	f	class:llvm::DenseMapBase
destroyConstant	Constant.h	/^  virtual void destroyConstant() { llvm_unreachable("Not reached!"); }$/;"	f	class:llvm::Constant
destroySentinel	ADT/SparseBitVector.h	/^  static void destroySentinel(Element *) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	ADT/ilist.h	/^  static void destroySentinel(NodeTy *N) { delete N; }$/;"	f	struct:llvm::ilist_sentinel_traits
destroySentinel	Analysis/IVUsers.h	/^  static void destroySentinel(IVStrideUse*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	BasicBlock.h	/^  static void destroySentinel(Instruction*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	CodeGen/MachineBasicBlock.h	/^  void destroySentinel(MachineInstr *) const {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	CodeGen/MachineFunction.h	/^  void destroySentinel(MachineBasicBlock *) const {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	CodeGen/SelectionDAG.h	/^  static void destroySentinel(SDNode *) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	CodeGen/SlotIndexes.h	/^    void destroySentinel(IndexListEntry *) const {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	Function.h	/^  static void destroySentinel(Argument*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	Function.h	/^  static void destroySentinel(BasicBlock*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	Module.h	/^  static void destroySentinel(Function*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	Module.h	/^  static void destroySentinel(GlobalAlias*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	Module.h	/^  static void destroySentinel(GlobalVariable*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	Module.h	/^  static void destroySentinel(NamedMDNode*) {}$/;"	f	struct:llvm::ilist_traits
destroySentinel	Support/Recycler.h	/^  static void destroySentinel(RecyclerStruct *) {}$/;"	f	struct:llvm::ilist_traits
destroy_range	ADT/SmallVector.h	/^  static void destroy_range(T *, T *) {}$/;"	f	class:llvm::SmallVectorTemplateBase
destroy_range	ADT/SmallVector.h	/^  static void destroy_range(T *S, T *E) {$/;"	f	class:llvm::SmallVectorTemplateBase
detachCase	Support/IntegersSubsetMapping.h	/^  void detachCase(self& NewMapping, SuccessorClass *Succ) {$/;"	f	class:llvm::IntegersSubsetMapping
detail	ADT/Hashing.h	/^namespace detail {$/;"	n	namespace:llvm::hashing
detail	Support/Endian.h	/^namespace detail {$/;"	n	namespace:llvm::support
detail	Support/FileSystem.h	/^namespace detail {$/;"	n	namespace:llvm::sys::fs
device_or_resource_busy	Support/system_error.h	/^  device_or_resource_busy             = EBUSY,$/;"	e	enum:llvm::errc::_
df_begin	ADT/DepthFirstIterator.h	/^df_iterator<T> df_begin(const T& G) {$/;"	f	namespace:llvm
df_end	ADT/DepthFirstIterator.h	/^df_iterator<T> df_end(const T& G) {$/;"	f	namespace:llvm
df_ext_begin	ADT/DepthFirstIterator.h	/^df_ext_iterator<T, SetTy> df_ext_begin(const T& G, SetTy &S) {$/;"	f	namespace:llvm
df_ext_end	ADT/DepthFirstIterator.h	/^df_ext_iterator<T, SetTy> df_ext_end(const T& G, SetTy &S) {$/;"	f	namespace:llvm
df_ext_iterator	ADT/DepthFirstIterator.h	/^  df_ext_iterator(const df_iterator<T, SetTy, true> &V)$/;"	f	struct:llvm::df_ext_iterator
df_ext_iterator	ADT/DepthFirstIterator.h	/^struct df_ext_iterator : public df_iterator<T, SetTy, true> {$/;"	s	namespace:llvm
df_iterator	ADT/DepthFirstIterator.h	/^  inline df_iterator() { $/;"	f	class:llvm::df_iterator
df_iterator	ADT/DepthFirstIterator.h	/^  inline df_iterator(NodeType *Node) {$/;"	f	class:llvm::df_iterator
df_iterator	ADT/DepthFirstIterator.h	/^  inline df_iterator(NodeType *Node, SetType &S)$/;"	f	class:llvm::df_iterator
df_iterator	ADT/DepthFirstIterator.h	/^  inline df_iterator(SetType &S)$/;"	f	class:llvm::df_iterator
df_iterator	ADT/DepthFirstIterator.h	/^class df_iterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
df_iterator_storage	ADT/DepthFirstIterator.h	/^  df_iterator_storage(SetType &VSet) : Visited(VSet) {}$/;"	f	class:llvm::df_iterator_storage
df_iterator_storage	ADT/DepthFirstIterator.h	/^  df_iterator_storage(const df_iterator_storage &S) : Visited(S.Visited) {}$/;"	f	class:llvm::df_iterator_storage
df_iterator_storage	ADT/DepthFirstIterator.h	/^class df_iterator_storage {$/;"	c	namespace:llvm
df_iterator_storage	ADT/DepthFirstIterator.h	/^class df_iterator_storage<SetType, true> {$/;"	c	namespace:llvm
dfsSource	Analysis/LoopInfoImpl.h	/^  BlockT *dfsSource() { return DFSStack.back().first; }$/;"	f	class:llvm::__anon30::PopulateLoopsDFS
dfsSucc	Analysis/LoopInfoImpl.h	/^  SuccIterTy &dfsSucc() { return DFSStack.back().second; }$/;"	f	class:llvm::__anon30::PopulateLoopsDFS
dfsSuccEnd	Analysis/LoopInfoImpl.h	/^  SuccIterTy dfsSuccEnd() { return BlockTraits::child_end(dfsSource()); }$/;"	f	class:llvm::__anon30::PopulateLoopsDFS
diagonalize	CodeGen/PBQP/Math.h	/^    Vector diagonalize() const {$/;"	f	class:PBQP::Matrix
didRematerialize	CodeGen/LiveRangeEdit.h	/^  bool didRematerialize(const VNInfo *ParentVNI) const {$/;"	f	class:llvm::LiveRangeEdit
diff	Support/IntegersSubsetMapping.h	/^  void diff(self *LExclude, self *Intersection, self *RExclude,$/;"	f	class:llvm::IntegersSubsetMapping
difference_type	ADT/DenseMap.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:llvm::DenseMapIterator
difference_type	ADT/DenseSet.h	/^    typedef typename MapTy::const_iterator::difference_type difference_type;$/;"	t	class:llvm::DenseSet::ConstIterator
difference_type	ADT/DenseSet.h	/^    typedef typename MapTy::iterator::difference_type difference_type;$/;"	t	class:llvm::DenseSet::Iterator
difference_type	ADT/STLExtras.h	/^          difference_type;$/;"	t	class:llvm::mapped_iterator
difference_type	ADT/SmallPtrSet.h	/^  typedef std::ptrdiff_t            difference_type;$/;"	t	class:llvm::SmallPtrSetIterator
difference_type	ADT/SmallVector.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:llvm::SmallVectorTemplateCommon
difference_type	ADT/ilist.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:llvm::iplist
difference_type	ADT/ilist.h	/^  typedef typename super::difference_type difference_type;$/;"	t	class:llvm::ilist_iterator
difference_type	Object/ELF.h	/^    typedef void difference_type;$/;"	t	class:llvm::object::ELFObjectFile::ELFRelocationIterator
difference_type	Support/InstIterator.h	/^  typedef signed                        difference_type;$/;"	t	class:llvm::InstIterator
difference_type	Support/PathV2.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:llvm::sys::path::const_iterator
digest	ADT/ImmutableSet.h	/^  uint32_t digest;$/;"	m	class:llvm::ImutAVLTree
directory_entry	Support/FileSystem.h	/^  directory_entry() {}$/;"	f	class:llvm::sys::fs::directory_entry
directory_entry	Support/FileSystem.h	/^  explicit directory_entry(const Twine &path, file_status st = file_status())$/;"	f	class:llvm::sys::fs::directory_entry
directory_entry	Support/FileSystem.h	/^class directory_entry {$/;"	c	namespace:llvm::sys::fs
directory_file	Support/FileSystem.h	/^    directory_file,$/;"	e	enum:llvm::sys::fs::file_type::_
directory_iterator	Support/FileSystem.h	/^  directory_iterator() : State(new detail::DirIterState) {}$/;"	f	class:llvm::sys::fs::directory_iterator
directory_iterator	Support/FileSystem.h	/^  explicit directory_iterator(const Twine &path, error_code &ec) {$/;"	f	class:llvm::sys::fs::directory_iterator
directory_iterator	Support/FileSystem.h	/^  explicit directory_iterator(const directory_entry &de, error_code &ec) {$/;"	f	class:llvm::sys::fs::directory_iterator
directory_iterator	Support/FileSystem.h	/^class directory_iterator {$/;"	c	namespace:llvm::sys::fs
directory_not_empty	Support/system_error.h	/^  directory_not_empty                 = ENOTEMPTY,$/;"	e	enum:llvm::errc::_
disableCanonicalMode	Analysis/ScalarEvolutionExpander.h	/^    void disableCanonicalMode() { CanonicalMode = false; }$/;"	f	class:llvm::SCEVExpander
disablePass	CodeGen/Passes.h	/^  void disablePass(AnalysisID PassID) { substitutePass(PassID, 0); }$/;"	f	class:llvm::TargetPassConfig
disconnectTrivialNodes	CodeGen/PBQP/HeuristicSolver.h	/^    void disconnectTrivialNodes() {$/;"	f	class:PBQP::HeuristicSolverImpl
discoverAndMapSubloop	Analysis/LoopInfoImpl.h	/^static void discoverAndMapSubloop(LoopT *L, ArrayRef<BlockT*> Backedges,$/;"	f	namespace:llvm
disk_full	Support/system_error.h	/^  disk_full               = 112, \/\/ ERROR_DISK_FULL,$/;"	e	enum:llvm::windows_error::_
distance	CodeGen/SlotIndexes.h	/^    int distance(SlotIndex other) const {$/;"	f	class:llvm::SlotIndex
divBlockFreq	Analysis/BlockFrequencyImpl.h	/^  void divBlockFreq(BlockT *BB, BranchProbability Prob) {$/;"	f	class:llvm::BlockFrequencyImpl
doBlock	Analysis/BlockFrequencyImpl.h	/^  void doBlock(BlockT *BB, BlockT *LoopHead,$/;"	f	class:llvm::BlockFrequencyImpl
doExtraRewritesBeforeFinalDeletion	Transforms/Utils/SSAUpdater.h	/^  virtual void doExtraRewritesBeforeFinalDeletion() const {$/;"	f	class:llvm::LoadAndStorePromoter
doFinalization	Analysis/LoopPass.h	/^  virtual bool doFinalization() { return false; }$/;"	f	class:llvm::LoopPass
doFinalization	Analysis/RegionPass.h	/^  virtual bool doFinalization() { return false; }$/;"	f	class:llvm::RegionPass
doFinalization	CallGraphSCCPass.h	/^  virtual bool doFinalization(CallGraph &CG) {$/;"	f	class:llvm::CallGraphSCCPass
doFunction	Analysis/BlockFrequencyImpl.h	/^  void doFunction(FunctionT *fn, BlockProbInfoT *bpi) {$/;"	f	class:llvm::BlockFrequencyImpl
doInitialization	Analysis/LoopPass.h	/^  virtual bool doInitialization(Loop *L, LPPassManager &LPM) {$/;"	f	class:llvm::LoopPass
doInitialization	Analysis/RegionPass.h	/^  virtual bool doInitialization(Region *R, RGPassManager &RGM) { return false; }$/;"	f	class:llvm::RegionPass
doInitialization	CallGraphSCCPass.h	/^  virtual bool doInitialization(CallGraph &CG) {$/;"	f	class:llvm::CallGraphSCCPass
doLoop	Analysis/BlockFrequencyImpl.h	/^  void doLoop(BlockT *Head, BlockT *Tail) {$/;"	f	class:llvm::BlockFrequencyImpl
document_iterator	Support/YAMLParser.h	/^  document_iterator() : Doc(0) {}$/;"	f	class:llvm::yaml::document_iterator
document_iterator	Support/YAMLParser.h	/^  document_iterator(OwningPtr<Document> &D) : Doc(&D) {}$/;"	f	class:llvm::yaml::document_iterator
document_iterator	Support/YAMLParser.h	/^class document_iterator {$/;"	c	namespace:llvm::yaml
doesAccessArgPointees	Analysis/AliasAnalysis.h	/^  static bool doesAccessArgPointees(ModRefBehavior MRB) {$/;"	f	class:llvm::AliasAnalysis
doesAllowNameToStartWithDigit	MC/MCAsmInfo.h	/^    bool doesAllowNameToStartWithDigit() const {$/;"	f	class:llvm::MCAsmInfo
doesAllowPeriodsInName	MC/MCAsmInfo.h	/^    bool doesAllowPeriodsInName() const {$/;"	f	class:llvm::MCAsmInfo
doesAllowQuotesInName	MC/MCAsmInfo.h	/^    bool doesAllowQuotesInName() const {$/;"	f	class:llvm::MCAsmInfo
doesAllowUTF8	MC/MCAsmInfo.h	/^    bool doesAllowUTF8() const {$/;"	f	class:llvm::MCAsmInfo
doesDwarfUseInlineInfoSection	MC/MCAsmInfo.h	/^    bool doesDwarfUseInlineInfoSection() const {$/;"	f	class:llvm::MCAsmInfo
doesDwarfUseRelocationsAcrossSections	MC/MCAsmInfo.h	/^    bool doesDwarfUseRelocationsAcrossSections() const {$/;"	f	class:llvm::MCAsmInfo
doesNotAccessMemory	Analysis/AliasAnalysis.h	/^  bool doesNotAccessMemory(ImmutableCallSite CS) {$/;"	f	class:llvm::AliasAnalysis
doesNotAccessMemory	Analysis/AliasAnalysis.h	/^  bool doesNotAccessMemory(const Function *F) {$/;"	f	class:llvm::AliasAnalysis
doesNotAccessMemory	Function.h	/^  bool doesNotAccessMemory() const {$/;"	f	class:llvm::Function
doesNotAccessMemory	Instructions.h	/^  bool doesNotAccessMemory() const {$/;"	f	class:llvm::CallInst
doesNotAccessMemory	Instructions.h	/^  bool doesNotAccessMemory() const {$/;"	f	class:llvm::InvokeInst
doesNotAccessMemory	Support/CallSite.h	/^  bool doesNotAccessMemory() const {$/;"	f	class:llvm::CallSiteBase
doesNotAlias	Function.h	/^  bool doesNotAlias(unsigned n) const {$/;"	f	class:llvm::Function
doesNotCapture	Function.h	/^  bool doesNotCapture(unsigned n) const {$/;"	f	class:llvm::Function
doesNotCapture	Support/CallSite.h	/^  bool doesNotCapture(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
doesNotReturn	Function.h	/^  bool doesNotReturn() const {$/;"	f	class:llvm::Function
doesNotReturn	Instructions.h	/^  bool doesNotReturn() const { return hasFnAttr(Attributes::NoReturn); }$/;"	f	class:llvm::CallInst
doesNotReturn	Instructions.h	/^  bool doesNotReturn() const { return hasFnAttr(Attributes::NoReturn); }$/;"	f	class:llvm::InvokeInst
doesNotReturn	Support/CallSite.h	/^  bool doesNotReturn() const {$/;"	f	class:llvm::CallSiteBase
doesNotThrow	Function.h	/^  bool doesNotThrow() const {$/;"	f	class:llvm::Function
doesNotThrow	Instructions.h	/^  bool doesNotThrow() const { return hasFnAttr(Attributes::NoUnwind); }$/;"	f	class:llvm::CallInst
doesNotThrow	Instructions.h	/^  bool doesNotThrow() const { return hasFnAttr(Attributes::NoUnwind); }$/;"	f	class:llvm::InvokeInst
doesNotThrow	Support/CallSite.h	/^  bool doesNotThrow() const {$/;"	f	class:llvm::CallSiteBase
doesSectionRequireSymbols	MC/MCAsmBackend.h	/^  virtual bool doesSectionRequireSymbols(const MCSection &Section) const {$/;"	f	class:llvm::MCAsmBackend
doesSupportDataRegionDirectives	MC/MCAsmInfo.h	/^    bool doesSupportDataRegionDirectives() const {$/;"	f	class:llvm::MCAsmInfo
doesSupportDebugInformation	MC/MCAsmInfo.h	/^    bool doesSupportDebugInformation() const {$/;"	f	class:llvm::MCAsmInfo
doesSupportExceptionHandling	MC/MCAsmInfo.h	/^    bool doesSupportExceptionHandling() const {$/;"	f	class:llvm::MCAsmInfo
doit	Support/Casting.h	/^  static bool doit(const From &Val) {$/;"	f	struct:llvm::isa_impl_wrap
doit	Support/Casting.h	/^  static bool doit(const FromTy &Val) {$/;"	f	struct:llvm::isa_impl_wrap
doit	Support/Casting.h	/^  static inline bool doit(const From &) { return true; }$/;"	f	struct:llvm::isa_impl
doit	Support/Casting.h	/^  static inline bool doit(const From &Val) {$/;"	f	struct:llvm::isa_impl
doit	Support/Casting.h	/^  static inline bool doit(const From &Val) {$/;"	f	struct:llvm::isa_impl_cl
doit	Support/Casting.h	/^  static inline bool doit(const From *Val) {$/;"	f	struct:llvm::isa_impl_cl
doit	Support/Casting.h	/^  static typename cast_retty<To, From>::ret_type doit(const From &Val) {$/;"	f	struct:llvm::cast_convert_val
doit	Support/Casting.h	/^  static typename cast_retty<To, FromTy>::ret_type doit(const FromTy &Val) {$/;"	f	struct:llvm::cast_convert_val
doit	Type.h	/^  static inline bool doit(const Type &Ty) {$/;"	f	struct:llvm::isa_impl
doit	Value.h	/^  static inline bool doit (const Value &Val) {$/;"	f	struct:llvm::isa_impl
doit	Value.h	/^  static inline bool doit(const Value &Val) {$/;"	f	struct:llvm::isa_impl
dominatedBySlowTreeWalk	Analysis/Dominators.h	/^  bool dominatedBySlowTreeWalk(const DomTreeNodeBase<NodeT> *A,$/;"	f	class:llvm::DominatorTreeBase
dominates	Analysis/Dominators.h	/^  inline bool dominates(const BasicBlock* A, const BasicBlock* B) const {$/;"	f	class:llvm::DominatorTree
dominates	Analysis/Dominators.h	/^  inline bool dominates(const DomTreeNode* A, const DomTreeNode* B) const {$/;"	f	class:llvm::DominatorTree
dominates	Analysis/Dominators.h	/^  inline bool dominates(const DomTreeNodeBase<NodeT> *A,$/;"	f	class:llvm::DominatorTreeBase
dominates	Analysis/Dominators.h	/^bool DominatorTreeBase<NodeT>::dominates(const NodeT *A, const NodeT *B) {$/;"	f	class:llvm::DominatorTreeBase
dominates	Analysis/PostDominators.h	/^  inline bool dominates(DomTreeNode* A, DomTreeNode* B) const {$/;"	f	struct:llvm::PostDominatorTree
dominates	Analysis/PostDominators.h	/^  inline bool dominates(const BasicBlock* A, const BasicBlock* B) const {$/;"	f	struct:llvm::PostDominatorTree
dominates	Analysis/Trace.h	/^  bool dominates(const BasicBlock *B1, const BasicBlock *B2) const {$/;"	f	class:llvm::Trace
dominates	CodeGen/LexicalScopes.h	/^  bool dominates(const LexicalScope *S) const {$/;"	f	class:llvm::LexicalScope
dominates	CodeGen/MachineDominators.h	/^  bool dominates(MachineInstr *A, MachineInstr *B) const {$/;"	f	class:llvm::MachineDominatorTree
dominates	CodeGen/MachineDominators.h	/^  inline bool dominates(MachineBasicBlock* A, MachineBasicBlock* B) const {$/;"	f	class:llvm::MachineDominatorTree
dominates	CodeGen/MachineDominators.h	/^  inline bool dominates(MachineDomTreeNode* A, MachineDomTreeNode* B) const {$/;"	f	class:llvm::MachineDominatorTree
dominates	CodeGen/MachinePostDominators.h	/^  bool dominates(MachineBasicBlock *A, MachineBasicBlock *B) const {$/;"	f	struct:llvm::MachinePostDominatorTree
dominates	CodeGen/MachinePostDominators.h	/^  bool dominates(MachineDomTreeNode *A, MachineDomTreeNode *B) const {$/;"	f	struct:llvm::MachinePostDominatorTree
done	Support/CommandLine.h	/^  void done() {$/;"	f	class:llvm::cl::alias
done	Support/CommandLine.h	/^  void done() {$/;"	f	class:llvm::cl::bits
done	Support/CommandLine.h	/^  void done() {$/;"	f	class:llvm::cl::list
done	Support/CommandLine.h	/^  void done() {$/;"	f	class:llvm::cl::opt
dont_use	Support/type_traits.h	/^namespace dont_use {$/;"	n	namespace:llvm
dont_use	Support/type_traits.h	/^namespace dont_use$/;"	n	namespace:llvm
dot_dynamic_sec	Object/ELF.h	/^  const Elf_Shdr *dot_dynamic_sec;       \/\/ .dynamic$/;"	m	class:llvm::object::ELFObjectFile
dot_dynstr_sec	Object/ELF.h	/^  const Elf_Shdr *dot_dynstr_sec;   \/\/ Dynamic symbol string table.$/;"	m	class:llvm::object::ELFObjectFile
dot_gnu_version_d_sec	Object/ELF.h	/^  const Elf_Shdr *dot_gnu_version_d_sec; \/\/ .gnu.version_d$/;"	m	class:llvm::object::ELFObjectFile
dot_gnu_version_r_sec	Object/ELF.h	/^  const Elf_Shdr *dot_gnu_version_r_sec; \/\/ .gnu.version_r$/;"	m	class:llvm::object::ELFObjectFile
dot_gnu_version_sec	Object/ELF.h	/^  const Elf_Shdr *dot_gnu_version_sec;   \/\/ .gnu.version$/;"	m	class:llvm::object::ELFObjectFile
dot_shstrtab_sec	Object/ELF.h	/^  const Elf_Shdr *dot_shstrtab_sec; \/\/ Section header string table.$/;"	m	class:llvm::object::ELFObjectFile
dot_strtab_sec	Object/ELF.h	/^  const Elf_Shdr *dot_strtab_sec;   \/\/ Symbol header string table.$/;"	m	class:llvm::object::ELFObjectFile
doubleToBits	ADT/APInt.h	/^  static APInt doubleToBits(double V) {$/;"	f	class:llvm::APInt
dropAllReferences	User.h	/^  void dropAllReferences() {$/;"	f	class:llvm::User
dropHungoffUses	User.h	/^  void dropHungoffUses() {$/;"	f	class:llvm::User
dropRef	Analysis/AliasSetTracker.h	/^  void dropRef(AliasSetTracker &AST) {$/;"	f	class:llvm::AliasSet
dropRef	Bitcode/BitCodes.h	/^  void dropRef() { if (--RefCount == 0) delete this; }$/;"	f	class:llvm::BitCodeAbbrev
drop_back	ADT/StringRef.h	/^    StringRef drop_back(unsigned N = 1) const {$/;"	f	class:llvm::StringRef
drop_front	ADT/StringRef.h	/^    StringRef drop_front(unsigned N = 1) const {$/;"	f	class:llvm::StringRef
dt_soname	Object/ELF.h	/^  mutable const char *dt_soname;$/;"	m	class:llvm::object::ELFObjectFile
dump	ADT/SparseBitVector.h	/^void dump(const SparseBitVector<ElementSize> &LHS, raw_ostream &out) {$/;"	f	namespace:llvm
dump	Analysis/BlockFrequencyImpl.h	/^  void dump() const {$/;"	f	class:llvm::BlockFrequencyImpl
dump	Analysis/ProfileInfo.h	/^    void dump(FType *F = 0, bool real = true) {$/;"	f	class:llvm::ProfileInfoT
dump	CodeGen/PBQP/Graph.h	/^    void dump(OStream &os) {$/;"	f	class:PBQP::Graph
dump	CodeGen/ScheduleDAG.h	/^    virtual void dump(ScheduleDAG *) const {}$/;"	f	class:llvm::SchedulingPriorityQueue
dump	CodeGen/SelectionDAGNodes.h	/^inline void SDValue::dump() const {$/;"	f	class:llvm::SDValue
dumpr	CodeGen/SelectionDAGNodes.h	/^inline void SDValue::dumpr() const {$/;"	f	class:llvm::SDValue
dup_name	Support/system_error.h	/^  dup_name                = 52, \/\/ ERROR_DUP_NAME,$/;"	e	enum:llvm::windows_error::_
dwarf	Support/Dwarf.h	/^namespace dwarf {$/;"	n	namespace:llvm
dwarf_constants	Support/Dwarf.h	/^enum dwarf_constants {$/;"	g	namespace:llvm::dwarf
dyld_info_command	Support/MachO.h	/^    struct dyld_info_command {$/;"	s	namespace:llvm::MachO
dylib	Support/MachO.h	/^      struct dylib dylib;$/;"	m	struct:llvm::MachO::dylib_command	typeref:struct:llvm::MachO::dylib_command::dylib
dylib	Support/MachO.h	/^    struct dylib {$/;"	s	namespace:llvm::MachO
dylib_command	Support/MachO.h	/^    struct dylib_command {$/;"	s	namespace:llvm::MachO
dylib_module	Support/MachO.h	/^    struct dylib_module {$/;"	s	namespace:llvm::MachO
dylib_module_64	Support/MachO.h	/^    struct dylib_module_64 {$/;"	s	namespace:llvm::MachO
dylib_reference	Support/MachO.h	/^    struct dylib_reference {$/;"	s	namespace:llvm::MachO
dylib_table_of_contents	Support/MachO.h	/^    struct dylib_table_of_contents {$/;"	s	namespace:llvm::MachO
dylinker_command	Support/MachO.h	/^    struct dylinker_command {$/;"	s	namespace:llvm::MachO
dyn_cast	ADT/PointerUnion.h	/^    T dyn_cast() const {$/;"	f	class:llvm::PointerUnion3
dyn_cast	ADT/PointerUnion.h	/^    T dyn_cast() const {$/;"	f	class:llvm::PointerUnion4
dyn_cast	Support/Casting.h	/^inline typename cast_retty<X, Y>::ret_type dyn_cast(const Y &Val) {$/;"	f	namespace:llvm
dyn_cast_or_null	Support/Casting.h	/^inline typename cast_retty<X, Y*>::ret_type dyn_cast_or_null(Y *Val) {$/;"	f	namespace:llvm
dyn_iterator	Object/ELF.h	/^  typedef content_iterator<DynRef> dyn_iterator;$/;"	t	class:llvm::object::ELFObjectFile
dysymtab_command	Support/MachO.h	/^    struct dysymtab_command {$/;"	s	namespace:llvm::MachO
e_ehsize	Object/ELF.h	/^  Elf_Half e_ehsize;   \/\/ Size of ELF header, in bytes$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_ehsize	Support/ELF.h	/^  Elf32_Half    e_ehsize;    \/\/ Size of ELF header, in bytes$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_ehsize	Support/ELF.h	/^  Elf64_Half    e_ehsize;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_entry	Object/ELF.h	/^  Elf_Addr e_entry;    \/\/ Address to jump to in order to start program$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_entry	Support/ELF.h	/^  Elf32_Addr    e_entry;     \/\/ Address to jump to in order to start program$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_entry	Support/ELF.h	/^  Elf64_Addr    e_entry;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_flags	Object/ELF.h	/^  Elf_Word e_flags;    \/\/ Processor-specific flags$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_flags	Support/ELF.h	/^  Elf32_Word    e_flags;     \/\/ Processor-specific flags$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_flags	Support/ELF.h	/^  Elf64_Word    e_flags;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_ident	Object/ELF.h	/^  unsigned char e_ident[ELF::EI_NIDENT]; \/\/ ELF Identification bytes$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_ident	Support/ELF.h	/^  unsigned char e_ident[EI_NIDENT]; \/\/ ELF Identification bytes$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_ident	Support/ELF.h	/^  unsigned char e_ident[EI_NIDENT];$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_machine	Object/ELF.h	/^  Elf_Half e_machine;  \/\/ Required architecture for this file (see EM_*)$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_machine	Support/ELF.h	/^  Elf32_Half    e_machine;   \/\/ Required architecture for this file (see EM_*)$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_machine	Support/ELF.h	/^  Elf64_Half    e_machine;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_phentsize	Object/ELF.h	/^  Elf_Half e_phentsize;\/\/ Size of an entry in the program header table$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_phentsize	Support/ELF.h	/^  Elf32_Half    e_phentsize; \/\/ Size of an entry in the program header table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_phentsize	Support/ELF.h	/^  Elf64_Half    e_phentsize;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_phnum	Object/ELF.h	/^  Elf_Half e_phnum;    \/\/ Number of entries in the program header table$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_phnum	Support/ELF.h	/^  Elf32_Half    e_phnum;     \/\/ Number of entries in the program header table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_phnum	Support/ELF.h	/^  Elf64_Half    e_phnum;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_phoff	Object/ELF.h	/^  Elf_Off  e_phoff;    \/\/ Program header table's file offset, in bytes$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_phoff	Support/ELF.h	/^  Elf32_Off     e_phoff;     \/\/ Program header table's file offset, in bytes$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_phoff	Support/ELF.h	/^  Elf64_Off     e_phoff;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_shentsize	Object/ELF.h	/^  Elf_Half e_shentsize;\/\/ Size of an entry in the section header table$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_shentsize	Support/ELF.h	/^  Elf32_Half    e_shentsize; \/\/ Size of an entry in the section header table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_shentsize	Support/ELF.h	/^  Elf64_Half    e_shentsize;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_shnum	Object/ELF.h	/^  Elf_Half e_shnum;    \/\/ Number of entries in the section header table$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_shnum	Support/ELF.h	/^  Elf32_Half    e_shnum;     \/\/ Number of entries in the section header table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_shnum	Support/ELF.h	/^  Elf64_Half    e_shnum;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_shoff	Object/ELF.h	/^  Elf_Off  e_shoff;    \/\/ Section header table's file offset, in bytes$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_shoff	Support/ELF.h	/^  Elf32_Off     e_shoff;     \/\/ Section header table's file offset, in bytes$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_shoff	Support/ELF.h	/^  Elf64_Off     e_shoff;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_shstrndx	Object/ELF.h	/^  Elf_Half e_shstrndx; \/\/ Section header table index of section name$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_shstrndx	Support/ELF.h	/^  Elf32_Half    e_shstrndx;  \/\/ Sect hdr table index of sect name string table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_shstrndx	Support/ELF.h	/^  Elf64_Half    e_shstrndx;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_type	Object/ELF.h	/^  Elf_Half e_type;     \/\/ Type of file (see ET_*)$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_type	Support/ELF.h	/^  Elf32_Half    e_type;      \/\/ Type of file (see ET_* below)$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_type	Support/ELF.h	/^  Elf64_Half    e_type;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_version	Object/ELF.h	/^  Elf_Word e_version;  \/\/ Must be equal to 1$/;"	m	struct:llvm::object::Elf_Ehdr_Impl
e_version	Support/ELF.h	/^  Elf32_Word    e_version;   \/\/ Must be equal to 1$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_version	Support/ELF.h	/^  Elf64_Word    e_version;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
earlyResolveAddresses	CodeGen/JITCodeEmitter.h	/^  bool earlyResolveAddresses() const { return true; }$/;"	f	class:llvm::JITCodeEmitter
edgeDataList	CodeGen/PBQP/HeuristicSolver.h	/^    EdgeDataList edgeDataList;$/;"	m	class:PBQP::HeuristicSolverImpl
edgeTargetsEdgeSource	Support/DOTGraphTraits.h	/^  static bool edgeTargetsEdgeSource(const void *, EdgeIter) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
edge_ty	ADT/DAGDeltaAlgorithm.h	/^  typedef std::pair<change_ty, change_ty> edge_ty;$/;"	t	class:llvm::DAGDeltaAlgorithm
edges	CodeGen/PBQP/Graph.h	/^    EdgeList edges;$/;"	m	class:PBQP::Graph
edgesBegin	CodeGen/PBQP/Graph.h	/^      AdjEdgeItr edgesBegin() { return adjEdges.begin(); }$/;"	f	class:PBQP::Graph::NodeEntry
edgesBegin	CodeGen/PBQP/Graph.h	/^    EdgeItr edgesBegin() { return edges.begin(); }$/;"	f	class:PBQP::Graph
edgesEnd	CodeGen/PBQP/Graph.h	/^      AdjEdgeItr edgesEnd() { return adjEdges.end(); }$/;"	f	class:PBQP::Graph::NodeEntry
edgesEnd	CodeGen/PBQP/Graph.h	/^    EdgeItr edgesEnd() { return edges.end(); }$/;"	f	class:PBQP::Graph
element_begin	DerivedTypes.h	/^  element_iterator element_begin() const { return ContainedTys; }$/;"	f	class:llvm::StructType
element_end	DerivedTypes.h	/^  element_iterator element_end() const { return &ContainedTys[NumContainedTys];}$/;"	f	class:llvm::StructType
element_iterator	Analysis/RegionInfo.h	/^                      GraphTraits<RegionNode*> > element_iterator;$/;"	t	class:llvm::Region
element_iterator	DerivedTypes.h	/^  typedef Type::subtype_iterator element_iterator;$/;"	t	class:llvm::StructType
element_type	ADT/IntrusiveRefCntPtr.h	/^    typedef T element_type;$/;"	t	class:llvm::IntrusiveRefCntPtr
elf_core	Support/FileSystem.h	/^    elf_core,                 \/\/\/< ELF core image$/;"	e	enum:llvm::sys::fs::file_magic::_
elf_executable	Support/FileSystem.h	/^    elf_executable,           \/\/\/< ELF Executable image$/;"	e	enum:llvm::sys::fs::file_magic::_
elf_relocatable	Support/FileSystem.h	/^    elf_relocatable,          \/\/\/< ELF Relocatable object file$/;"	e	enum:llvm::sys::fs::file_magic::_
elf_shared_object	Support/FileSystem.h	/^    elf_shared_object,        \/\/\/< ELF dynamically linked shared lib$/;"	e	enum:llvm::sys::fs::file_magic::_
eliminateCallFramePseudoInstr	Target/TargetRegisterInfo.h	/^  eliminateCallFramePseudoInstr(MachineFunction &MF,$/;"	f	class:llvm::TargetRegisterInfo
eliminateIndependentEdges	CodeGen/PBQP/HeuristicSolver.h	/^    void eliminateIndependentEdges() {$/;"	f	class:PBQP::HeuristicSolverImpl
emitAlignment	CodeGen/JITCodeEmitter.h	/^  void emitAlignment(unsigned Alignment) {$/;"	f	class:llvm::JITCodeEmitter
emitAlignment	CodeGen/MachineCodeEmitter.h	/^  void emitAlignment(unsigned Alignment) {$/;"	f	class:llvm::MachineCodeEmitter
emitAlignmentWithFill	CodeGen/JITCodeEmitter.h	/^  void emitAlignmentWithFill(unsigned Alignment, uint8_t Fill) {$/;"	f	class:llvm::JITCodeEmitter
emitBasicBlockEndAnnot	Assembly/AssemblyAnnotationWriter.h	/^  virtual void emitBasicBlockEndAnnot(const BasicBlock *,$/;"	f	class:llvm::AssemblyAnnotationWriter
emitBasicBlockStartAnnot	Assembly/AssemblyAnnotationWriter.h	/^  virtual void emitBasicBlockStartAnnot(const BasicBlock *,$/;"	f	class:llvm::AssemblyAnnotationWriter
emitByte	CodeGen/JITCodeEmitter.h	/^  void emitByte(uint8_t B) {$/;"	f	class:llvm::JITCodeEmitter
emitByte	CodeGen/MachineCodeEmitter.h	/^  void emitByte(uint8_t B) {$/;"	f	class:llvm::MachineCodeEmitter
emitDWordBE	CodeGen/JITCodeEmitter.h	/^  void emitDWordBE(uint64_t W) {$/;"	f	class:llvm::JITCodeEmitter
emitDWordBE	CodeGen/MachineCodeEmitter.h	/^  void emitDWordBE(uint64_t W) {$/;"	f	class:llvm::MachineCodeEmitter
emitDWordLE	CodeGen/JITCodeEmitter.h	/^  void emitDWordLE(uint64_t W) {$/;"	f	class:llvm::JITCodeEmitter
emitDWordLE	CodeGen/MachineCodeEmitter.h	/^  void emitDWordLE(uint64_t W) {$/;"	f	class:llvm::MachineCodeEmitter
emitEdge	Support/GraphWriter.h	/^  void emitEdge(const void *SrcNodeID, int SrcNodePort,$/;"	f	class:llvm::GraphWriter
emitFrameIndexDebugValue	Target/TargetInstrInfo.h	/^  virtual MachineInstr *emitFrameIndexDebugValue(MachineFunction &MF,$/;"	f	class:llvm::TargetInstrInfo
emitFunctionAnnot	Assembly/AssemblyAnnotationWriter.h	/^  virtual void emitFunctionAnnot(const Function *,$/;"	f	class:llvm::AssemblyAnnotationWriter
emitFunctionStub	Target/TargetJITInfo.h	/^    virtual void *emitFunctionStub(const Function* F, void *Target,$/;"	f	class:llvm::TargetJITInfo
emitGlobalValueIndirectSym	Target/TargetJITInfo.h	/^    virtual void *emitGlobalValueIndirectSym(const GlobalValue* GV, void *ptr,$/;"	f	class:llvm::TargetJITInfo
emitInstructionAnnot	Assembly/AssemblyAnnotationWriter.h	/^  virtual void emitInstructionAnnot(const Instruction *, $/;"	f	class:llvm::AssemblyAnnotationWriter
emitInt32	CodeGen/JITCodeEmitter.h	/^  void emitInt32(uint32_t Value) {$/;"	f	class:llvm::JITCodeEmitter
emitInt32	CodeGen/MachineCodeEmitter.h	/^  void emitInt32(int32_t Value) {$/;"	f	class:llvm::MachineCodeEmitter
emitInt32At	CodeGen/JITCodeEmitter.h	/^  void emitInt32At(uintptr_t *Addr, uintptr_t Value) {$/;"	f	class:llvm::JITCodeEmitter
emitInt32At	CodeGen/MachineCodeEmitter.h	/^  void emitInt32At(uintptr_t *Addr, uintptr_t Value) {$/;"	f	class:llvm::MachineCodeEmitter
emitInt64	CodeGen/JITCodeEmitter.h	/^  void emitInt64(uint64_t Value) {$/;"	f	class:llvm::JITCodeEmitter
emitInt64	CodeGen/MachineCodeEmitter.h	/^  void emitInt64(uint64_t Value) {$/;"	f	class:llvm::MachineCodeEmitter
emitInt64At	CodeGen/JITCodeEmitter.h	/^  void emitInt64At(uintptr_t *Addr, uintptr_t Value) {$/;"	f	class:llvm::JITCodeEmitter
emitInt64At	CodeGen/MachineCodeEmitter.h	/^  void emitInt64At(uintptr_t *Addr, uintptr_t Value) {$/;"	f	class:llvm::MachineCodeEmitter
emitModuleFlags	Target/TargetLoweringObjectFile.h	/^  virtual void emitModuleFlags(MCStreamer &,$/;"	f	class:llvm::TargetLoweringObjectFile
emitSLEB128Bytes	CodeGen/JITCodeEmitter.h	/^  void emitSLEB128Bytes(int64_t Value) {$/;"	f	class:llvm::JITCodeEmitter
emitSLEB128Bytes	CodeGen/MachineCodeEmitter.h	/^  void emitSLEB128Bytes(uint64_t Value) {$/;"	f	class:llvm::MachineCodeEmitter
emitSimpleNode	Support/GraphWriter.h	/^  void emitSimpleNode(const void *ID, const std::string &Attr,$/;"	f	class:llvm::GraphWriter
emitString	CodeGen/JITCodeEmitter.h	/^  void emitString(const std::string &String) {$/;"	f	class:llvm::JITCodeEmitter
emitString	CodeGen/MachineCodeEmitter.h	/^  void emitString(const std::string &String) {$/;"	f	class:llvm::MachineCodeEmitter
emitULEB128Bytes	CodeGen/JITCodeEmitter.h	/^  void emitULEB128Bytes(uint64_t Value, unsigned PadTo = 0) {$/;"	f	class:llvm::JITCodeEmitter
emitULEB128Bytes	CodeGen/MachineCodeEmitter.h	/^  void emitULEB128Bytes(uint64_t Value) {$/;"	f	class:llvm::MachineCodeEmitter
emitWordBE	CodeGen/JITCodeEmitter.h	/^  void emitWordBE(uint32_t W) {$/;"	f	class:llvm::JITCodeEmitter
emitWordBE	CodeGen/MachineCodeEmitter.h	/^  void emitWordBE(uint32_t W) {$/;"	f	class:llvm::MachineCodeEmitter
emitWordLE	CodeGen/JITCodeEmitter.h	/^  void emitWordLE(uint32_t W) {$/;"	f	class:llvm::JITCodeEmitter
emitWordLE	CodeGen/MachineCodeEmitter.h	/^  void emitWordLE(uint32_t W) {$/;"	f	class:llvm::MachineCodeEmitter
emitWordLEInto	CodeGen/MachineCodeEmitter.h	/^  static void emitWordLEInto(uint8_t *&Buf, uint32_t W) {$/;"	f	class:llvm::MachineCodeEmitter
empty	ADT/ArrayRef.h	/^    bool empty() const { return Length == 0; }$/;"	f	class:llvm::ArrayRef
empty	ADT/BitVector.h	/^  bool empty() const { return Size == 0; }$/;"	f	class:llvm::BitVector
empty	ADT/DenseMap.h	/^  bool empty() const { return getNumEntries() == 0; }$/;"	f	class:llvm::DenseMapBase
empty	ADT/DenseSet.h	/^  bool empty() const { return TheMap.empty(); }$/;"	f	class:llvm::DenseSet
empty	ADT/EquivalenceClasses.h	/^  bool empty() const { return TheMapping.empty(); }$/;"	f	class:llvm::EquivalenceClasses
empty	ADT/FoldingSet.h	/^  bool empty() const { return NumNodes == 0; }$/;"	f	class:llvm::FoldingSetImpl
empty	ADT/FoldingSet.h	/^  bool empty() const { return Set.empty(); }$/;"	f	class:llvm::FoldingSetVector
empty	ADT/IntervalMap.h	/^  bool empty() const {$/;"	f	class:llvm::IntervalMap
empty	ADT/MapVector.h	/^  bool empty() const {$/;"	f	class:llvm::MapVector
empty	ADT/PackedVector.h	/^  bool empty() const { return Bits.empty(); }$/;"	f	class:llvm::PackedVector
empty	ADT/SetVector.h	/^  bool empty() const {$/;"	f	class:llvm::SetVector
empty	ADT/SmallBitVector.h	/^  bool empty() const {$/;"	f	class:llvm::SmallBitVector
empty	ADT/SmallPtrSet.h	/^  bool empty() const { return size() == 0; }$/;"	f	class:llvm::SmallPtrSetImpl
empty	ADT/SmallSet.h	/^  bool empty() const { return Vector.empty() && Set.empty(); }$/;"	f	class:llvm::SmallSet
empty	ADT/SmallVector.h	/^  bool empty() const { return BeginX == EndX; }$/;"	f	class:llvm::SmallVectorBase
empty	ADT/SparseBitVector.h	/^  bool empty() const {$/;"	f	class:llvm::SparseBitVector
empty	ADT/SparseBitVector.h	/^  bool empty() const {$/;"	f	struct:llvm::SparseBitVectorElement
empty	ADT/SparseSet.h	/^  bool empty() const { return Dense.empty(); }$/;"	f	class:llvm::SparseSet
empty	ADT/StringMap.h	/^  bool empty() const { return NumItems == 0; }$/;"	f	class:llvm::StringMapImpl
empty	ADT/StringRef.h	/^    bool empty() const { return Length == 0; }$/;"	f	class:llvm::StringRef
empty	ADT/TinyPtrVector.h	/^  bool empty() const {$/;"	f	class:llvm::TinyPtrVector
empty	ADT/UniqueVector.h	/^  bool empty() const { return Vector.empty(); }$/;"	f	class:llvm::UniqueVector
empty	ADT/ValueMap.h	/^  bool empty() const { return Map.empty(); }$/;"	f	class:llvm::ValueMap
empty	ADT/ilist.h	/^  bool empty() const { return Head == 0 || Head == getTail(); }$/;"	f	class:llvm::iplist
empty	Analysis/AliasSetTracker.h	/^  bool empty() const { return PtrList == 0; }$/;"	f	class:llvm::AliasSet
empty	Analysis/CallGraph.h	/^  inline bool empty() const { return CalledFunctions.empty(); }$/;"	f	class:llvm::CallGraphNode
empty	Analysis/IVUsers.h	/^  bool empty() const { return IVUses.empty(); }$/;"	f	class:llvm::IVUsers
empty	Analysis/LoopInfo.h	/^  bool empty() const { return LI.empty(); }$/;"	f	class:llvm::LoopInfo
empty	Analysis/LoopInfo.h	/^  bool empty() const { return SubLoops.empty(); }$/;"	f	class:llvm::LoopBase
empty	Analysis/LoopInfo.h	/^  bool empty() const { return TopLevelLoops.empty(); }$/;"	f	class:llvm::LoopInfoBase
empty	Analysis/Trace.h	/^  bool                    empty() const { return BasicBlocks.empty(); }$/;"	f	class:llvm::Trace
empty	BasicBlock.h	/^  inline bool                    empty() const { return InstList.empty(); }$/;"	f	class:llvm::BasicBlock
empty	Bitcode/Archive.h	/^    inline bool                   empty()  const { return members.empty();  }$/;"	f	class:llvm::Archive
empty	CodeGen/LatencyPriorityQueue.h	/^    bool empty() const { return Queue.empty(); }$/;"	f	class:llvm::LatencyPriorityQueue
empty	CodeGen/LexicalScopes.h	/^  bool empty() { return CurrentFnLexicalScope == NULL; }$/;"	f	class:llvm::LexicalScopes
empty	CodeGen/LiveInterval.h	/^    bool empty() const { return ranges.empty(); }$/;"	f	class:llvm::LiveInterval
empty	CodeGen/LiveRangeEdit.h	/^  bool empty() const { return size() == 0; }$/;"	f	class:llvm::LiveRangeEdit
empty	CodeGen/MachineBasicBlock.h	/^  bool empty() const { return Insts.empty(); }$/;"	f	class:llvm::MachineBasicBlock
empty	CodeGen/MachineFunction.h	/^  bool                     empty() const { return BasicBlocks.empty(); }$/;"	f	class:llvm::MachineFunction
empty	CodeGen/MachineLoopInfo.h	/^  bool empty() const { return LI.empty(); }$/;"	f	class:llvm::MachineLoopInfo
empty	CodeGen/MachineScheduler.h	/^  bool empty() const { return Queue.empty(); }$/;"	f	class:llvm::ReadyQueue
empty	CodeGen/ResourcePriorityQueue.h	/^    bool empty() const { return Queue.empty(); }$/;"	f	class:llvm::ResourcePriorityQueue
empty	CodeGen/ScheduleDAGInstrs.h	/^    bool empty() const { return PhysRegSet.empty(); }$/;"	f	class:llvm::Reg2SUnitsMap
empty	CodeGen/SelectionDAG.h	/^  bool empty() const {$/;"	f	class:llvm::SDDbgInfo
empty	Function.h	/^  bool                    empty() const { return BasicBlocks.empty(); }$/;"	f	class:llvm::Function
empty	MC/MCAssembler.h	/^  bool empty() const { return Fragments.empty(); }$/;"	f	class:llvm::MCSectionData
empty	Module.h	/^  bool                    empty() const { return FunctionList.empty(); }$/;"	f	class:llvm::Module
empty	PassManagers.h	/^  bool empty() const { return S.empty(); }$/;"	f	class:llvm::PMStack
empty	Support/IntegersSubsetMapping.h	/^  bool empty() const { return Items.empty(); }$/;"	f	class:llvm::IntegersSubsetMapping
empty	Support/PathV1.h	/^      unsigned empty() const { return path.empty(); }$/;"	f	class:llvm::sys::Path
empty	Support/StringPool.h	/^    inline bool empty() const { return InternTable.empty(); }$/;"	f	class:llvm::StringPool
empty	TableGen/Record.h	/^  inline bool           empty() const { return Values.empty(); }$/;"	f	class:llvm::ListInit
empty	TypeFinder.h	/^  bool empty() const { return StructTypes.empty(); }$/;"	f	class:llvm::TypeFinder
empty	ValueSymbolTable.h	/^  inline bool empty() const { return vmap.empty(); }$/;"	f	class:llvm::ValueSymbolTable
enableLSRMode	Analysis/ScalarEvolutionExpander.h	/^    void enableLSRMode() { LSRMode = true; }$/;"	f	class:llvm::SCEVExpander
enablePass	CodeGen/Passes.h	/^  void enablePass(AnalysisID PassID) { substitutePass(PassID, PassID); }$/;"	f	class:llvm::TargetPassConfig
enable_if	Support/type_traits.h	/^struct enable_if : public enable_if_c<Cond::value, T> { };$/;"	s	namespace:llvm
enable_if_c	Support/type_traits.h	/^struct enable_if_c {$/;"	s	namespace:llvm
enable_if_c	Support/type_traits.h	/^template<typename T> struct enable_if_c<false, T> { };$/;"	s	namespace:llvm
encodeSLEB128	Support/LEB128.h	/^static inline void encodeSLEB128(int64_t Value, raw_ostream &OS) {$/;"	f	namespace:llvm
encodeULEB128	Support/LEB128.h	/^static inline unsigned encodeULEB128(uint64_t Value, uint8_t *p,$/;"	f	namespace:llvm
encodeULEB128	Support/LEB128.h	/^static inline void encodeULEB128(uint64_t Value, raw_ostream &OS,$/;"	f	namespace:llvm
encryption_info_command	Support/MachO.h	/^    struct encryption_info_command {$/;"	s	namespace:llvm::MachO
end	ADT/ArrayRef.h	/^    iterator end() const { return Data + Length; }$/;"	f	class:llvm::ArrayRef
end	ADT/ArrayRef.h	/^    iterator end() const { return data() + this->size(); }$/;"	f	class:llvm::MutableArrayRef
end	ADT/DenseMap.h	/^  inline const_iterator end() const {$/;"	f	class:llvm::DenseMapBase
end	ADT/DenseMap.h	/^  inline iterator end() {$/;"	f	class:llvm::DenseMapBase
end	ADT/DenseSet.h	/^  const_iterator end() const { return ConstIterator(TheMap.end()); }$/;"	f	class:llvm::DenseSet
end	ADT/DenseSet.h	/^  iterator end() { return Iterator(TheMap.end()); }$/;"	f	class:llvm::DenseSet
end	ADT/DepthFirstIterator.h	/^  static inline _Self end(const GraphT& G) { return _Self(); }$/;"	f	class:llvm::df_iterator
end	ADT/DepthFirstIterator.h	/^  static inline _Self end(const GraphT& G, SetType &S) { return _Self(S); }$/;"	f	class:llvm::df_iterator
end	ADT/EquivalenceClasses.h	/^  iterator end() const { return TheMapping.end(); }$/;"	f	class:llvm::EquivalenceClasses
end	ADT/FoldingSet.h	/^  const_iterator end()   const { return Vector.end(); }$/;"	f	class:llvm::FoldingSetVector
end	ADT/FoldingSet.h	/^  const_iterator end() const { return const_iterator(Buckets+NumBuckets); }$/;"	f	class:llvm::ContextualFoldingSet
end	ADT/FoldingSet.h	/^  const_iterator end() const { return const_iterator(Buckets+NumBuckets); }$/;"	f	class:llvm::FoldingSet
end	ADT/FoldingSet.h	/^  iterator end()   { return Vector.end(); }$/;"	f	class:llvm::FoldingSetVector
end	ADT/FoldingSet.h	/^  iterator end() { return iterator(Buckets+NumBuckets); }$/;"	f	class:llvm::ContextualFoldingSet
end	ADT/FoldingSet.h	/^  iterator end() { return iterator(Buckets+NumBuckets); }$/;"	f	class:llvm::FoldingSet
end	ADT/ImmutableList.h	/^  iterator end() const { return iterator(); }$/;"	f	class:llvm::ImmutableList
end	ADT/ImmutableMap.h	/^  iterator end() const { return iterator(); }$/;"	f	class:llvm::ImmutableMap
end	ADT/ImmutableMap.h	/^  iterator end() const { return iterator(); }$/;"	f	class:llvm::ImmutableMapRef
end	ADT/ImmutableSet.h	/^  iterator end() const { return iterator(); }$/;"	f	class:llvm::ImmutableSet
end	ADT/ImmutableSet.h	/^  iterator end() const { return iterator(); }$/;"	f	class:llvm::ImmutableSetRef
end	ADT/ImmutableSet.h	/^  iterator end() const { return iterator(); }$/;"	f	class:llvm::ImutAVLTree
end	ADT/IntervalMap.h	/^  const_iterator end() const {$/;"	f	class:llvm::IntervalMap
end	ADT/IntervalMap.h	/^  iterator end() {$/;"	f	class:llvm::IntervalMap
end	ADT/MapVector.h	/^  const_iterator end() const {$/;"	f	class:llvm::MapVector
end	ADT/MapVector.h	/^  iterator end() {$/;"	f	class:llvm::MapVector
end	ADT/PostOrderIterator.h	/^  inline rpo_iterator end()   { return Blocks.rend(); }$/;"	f	class:llvm::ReversePostOrderTraversal
end	ADT/PostOrderIterator.h	/^  static inline _Self end  (GraphT G) { return _Self(); }$/;"	f	class:llvm::po_iterator
end	ADT/PostOrderIterator.h	/^  static inline _Self end  (GraphT G, SetType &S) { return _Self(S); }$/;"	f	class:llvm::po_iterator
end	ADT/SCCIterator.h	/^  static inline _Self end  (const GraphT &) { return _Self(); }$/;"	f	class:llvm::scc_iterator
end	ADT/ScopedHashTable.h	/^  iterator end() { return iterator(0); }$/;"	f	class:llvm::ScopedHashTable
end	ADT/SetVector.h	/^  const_iterator end() const {$/;"	f	class:llvm::SetVector
end	ADT/SetVector.h	/^  iterator end() {$/;"	f	class:llvm::SetVector
end	ADT/SmallPtrSet.h	/^  inline iterator end() const {$/;"	f	class:llvm::SmallPtrSet
end	ADT/SmallVector.h	/^  const_iterator end() const { return (const_iterator)this->EndX; }$/;"	f	class:llvm::SmallVectorTemplateCommon
end	ADT/SmallVector.h	/^  iterator end() { return (iterator)this->EndX; }$/;"	f	class:llvm::SmallVectorTemplateCommon
end	ADT/SparseBitVector.h	/^  iterator end() const {$/;"	f	class:llvm::SparseBitVector
end	ADT/SparseSet.h	/^  const_iterator end() const { return Dense.end(); }$/;"	f	class:llvm::SparseSet
end	ADT/SparseSet.h	/^  iterator end() { return Dense.end(); }$/;"	f	class:llvm::SparseSet
end	ADT/StringMap.h	/^  const_iterator end() const {$/;"	f	class:llvm::StringMap
end	ADT/StringMap.h	/^  iterator end() {$/;"	f	class:llvm::StringMap
end	ADT/StringRef.h	/^    iterator end() const { return Data + Length; }$/;"	f	class:llvm::StringRef
end	ADT/TinyPtrVector.h	/^  const_iterator end() const {$/;"	f	class:llvm::TinyPtrVector
end	ADT/TinyPtrVector.h	/^  iterator end() {$/;"	f	class:llvm::TinyPtrVector
end	ADT/ValueMap.h	/^  inline const_iterator end() const { return const_iterator(Map.end()); }$/;"	f	class:llvm::ValueMap
end	ADT/ValueMap.h	/^  inline iterator end() { return iterator(Map.end()); }$/;"	f	class:llvm::ValueMap
end	ADT/ilist.h	/^  const_iterator end() const {$/;"	f	class:llvm::iplist
end	ADT/ilist.h	/^  iterator end() {$/;"	f	class:llvm::iplist
end	Analysis/AliasSetTracker.h	/^  const_iterator end()   const { return AliasSets.end(); }$/;"	f	class:llvm::AliasSetTracker
end	Analysis/AliasSetTracker.h	/^  iterator end()   const { return iterator(); }$/;"	f	class:llvm::AliasSet
end	Analysis/AliasSetTracker.h	/^  iterator end()   { return AliasSets.end(); }$/;"	f	class:llvm::AliasSetTracker
end	Analysis/CallGraph.h	/^  inline       iterator end()         { return FunctionMap.end();   }$/;"	f	class:llvm::CallGraph
end	Analysis/CallGraph.h	/^  inline const_iterator end()   const { return CalledFunctions.end();   }$/;"	f	class:llvm::CallGraphNode
end	Analysis/CallGraph.h	/^  inline const_iterator end()   const { return FunctionMap.end();   }$/;"	f	class:llvm::CallGraph
end	Analysis/CallGraph.h	/^  inline iterator end()   { return CalledFunctions.end();   }$/;"	f	class:llvm::CallGraphNode
end	Analysis/DominanceFrontier.h	/^  const_iterator end()   const { return Frontiers.end(); }$/;"	f	class:llvm::DominanceFrontierBase
end	Analysis/DominanceFrontier.h	/^  iterator       end()         { return Frontiers.end(); }$/;"	f	class:llvm::DominanceFrontierBase
end	Analysis/Dominators.h	/^  const_iterator end()   const { return Children.end(); }$/;"	f	class:llvm::DomTreeNodeBase
end	Analysis/Dominators.h	/^  iterator end()               { return Children.end(); }$/;"	f	class:llvm::DomTreeNodeBase
end	Analysis/IVUsers.h	/^  const_iterator end() const   { return IVUses.end(); }$/;"	f	class:llvm::IVUsers
end	Analysis/IVUsers.h	/^  iterator end()   { return IVUses.end(); }$/;"	f	class:llvm::IVUsers
end	Analysis/LoopInfo.h	/^  inline iterator end() const { return LI.end(); }$/;"	f	class:llvm::LoopInfo
end	Analysis/LoopInfo.h	/^  iterator end() const { return SubLoops.end(); }$/;"	f	class:llvm::LoopBase
end	Analysis/LoopInfo.h	/^  iterator end() const { return TopLevelLoops.end(); }$/;"	f	class:llvm::LoopInfoBase
end	Analysis/LoopIterator.h	/^  POTIterator end() {$/;"	f	class:llvm::LoopBlocksTraversal
end	Analysis/RegionInfo.h	/^  const_iterator end() const { return children.end(); }$/;"	f	class:llvm::Region
end	Analysis/RegionInfo.h	/^  iterator end() { return children.end(); }$/;"	f	class:llvm::Region
end	Analysis/Trace.h	/^  const_iterator          end  () const { return BasicBlocks.end();   }$/;"	f	class:llvm::Trace
end	Analysis/Trace.h	/^  iterator                end  ()       { return BasicBlocks.end();   }$/;"	f	class:llvm::Trace
end	BasicBlock.h	/^  inline const_iterator          end  () const { return InstList.end();   }$/;"	f	class:llvm::BasicBlock
end	BasicBlock.h	/^  inline iterator                end  ()       { return InstList.end();   }$/;"	f	class:llvm::BasicBlock
end	Bitcode/Archive.h	/^    inline const_iterator         end  ()  const { return members.end();    }$/;"	f	class:llvm::Archive
end	Bitcode/Archive.h	/^    inline iterator               end  ()        { return members.end();    }$/;"	f	class:llvm::Archive
end	CallGraphSCCPass.h	/^  iterator end() const { return Nodes.end(); }$/;"	f	class:llvm::CallGraphSCC
end	CodeGen/GCMetadata.h	/^    iterator end()   const { return StrategyList.end();   }$/;"	f	class:llvm::GCModuleInfo
end	CodeGen/GCMetadata.h	/^    iterator end()   { return SafePoints.end();   }$/;"	f	class:llvm::GCFunctionInfo
end	CodeGen/GCMetadataPrinter.h	/^    iterator end()   { return S->end();   }$/;"	f	class:llvm::GCMetadataPrinter
end	CodeGen/GCStrategy.h	/^    iterator end()   { return Functions.end();   }$/;"	f	class:llvm::GCStrategy
end	CodeGen/LiveInterval.h	/^    SlotIndex end;    \/\/ End point of the interval (exclusive)$/;"	m	struct:llvm::LiveRange
end	CodeGen/LiveInterval.h	/^    const_iterator end() const  { return ranges.end(); }$/;"	f	class:llvm::LiveInterval
end	CodeGen/LiveInterval.h	/^    iterator end()   { return ranges.end(); }$/;"	f	class:llvm::LiveInterval
end	CodeGen/LiveRangeEdit.h	/^  iterator end() const { return NewRegs.end(); }$/;"	f	class:llvm::LiveRangeEdit
end	CodeGen/LiveStackAnalysis.h	/^    const_iterator end() const { return S2IMap.end(); }$/;"	f	class:llvm::LiveStacks
end	CodeGen/LiveStackAnalysis.h	/^    iterator end() { return S2IMap.end(); }$/;"	f	class:llvm::LiveStacks
end	CodeGen/MachineBasicBlock.h	/^  const_iterator          end  () const { return instr_end();    }$/;"	f	class:llvm::MachineBasicBlock
end	CodeGen/MachineBasicBlock.h	/^  iterator                end  ()       { return instr_end();    }$/;"	f	class:llvm::MachineBasicBlock
end	CodeGen/MachineFunction.h	/^  const_iterator           end  () const { return BasicBlocks.end();   }$/;"	f	class:llvm::MachineFunction
end	CodeGen/MachineFunction.h	/^  iterator                 end  ()       { return BasicBlocks.end();   }$/;"	f	class:llvm::MachineFunction
end	CodeGen/MachineLoopInfo.h	/^  inline iterator end() const { return LI.end(); }$/;"	f	class:llvm::MachineLoopInfo
end	CodeGen/MachineScheduler.h	/^  iterator end() { return Queue.end(); }$/;"	f	class:llvm::ReadyQueue
end	CodeGen/ScheduleDAG.h	/^    const_iterator end() const { return Index2Node.end(); }$/;"	f	class:llvm::ScheduleDAGTopologicalSort
end	CodeGen/ScheduleDAG.h	/^    iterator end() { return Index2Node.end(); }$/;"	f	class:llvm::ScheduleDAGTopologicalSort
end	CodeGen/ScheduleDAG.h	/^    static SUnitIterator end  (SUnit *N) {$/;"	f	class:llvm::SUnitIterator
end	CodeGen/ScheduleDAGInstrs.h	/^    MachineBasicBlock::iterator end() const { return RegionEnd; }$/;"	f	class:llvm::ScheduleDAGInstrs
end	CodeGen/SelectionDAGNodes.h	/^  static SDNodeIterator end  (const SDNode *N) {$/;"	f	class:llvm::SDNodeIterator
end	Function.h	/^  const_iterator          end  () const { return BasicBlocks.end();   }$/;"	f	class:llvm::Function
end	Function.h	/^  iterator                end  ()       { return BasicBlocks.end();   }$/;"	f	class:llvm::Function
end	MC/MCAssembler.h	/^  const_iterator end() const { return Fragments.end(); }$/;"	f	class:llvm::MCSectionData
end	MC/MCAssembler.h	/^  const_iterator end() const { return Sections.end(); }$/;"	f	class:llvm::MCAssembler
end	MC/MCAssembler.h	/^  iterator end() { return Fragments.end(); }$/;"	f	class:llvm::MCSectionData
end	MC/MCAssembler.h	/^  iterator end() { return Sections.end(); }$/;"	f	class:llvm::MCAssembler
end	MC/MCInst.h	/^  iterator end()   { return Operands.end();   }$/;"	f	class:llvm::MCInst
end	MC/MCRegisterInfo.h	/^  iterator         end() const { return RegsBegin + RegsSize; }$/;"	f	class:llvm::MCRegisterClass
end	Metadata.h	/^  iterator end() const { return getName().end(); }$/;"	f	class:llvm::MDString
end	Module.h	/^  const_iterator          end  () const { return FunctionList.end();   }$/;"	f	class:llvm::Module
end	Module.h	/^  iterator                end  ()       { return FunctionList.end();   }$/;"	f	class:llvm::Module
end	PassManagers.h	/^  iterator end() const { return S.rend(); }$/;"	f	class:llvm::PMStack
end	Support/GetElementPtrTypeIterator.h	/^    static generic_gep_type_iterator end(ItTy It) {$/;"	f	class:llvm::generic_gep_type_iterator
end	Support/IntegersSubsetMapping.h	/^  RangeIterator end() { return Items.end(); }$/;"	f	class:llvm::IntegersSubsetMapping
end	Support/Registry.h	/^    static iterator end()   { return iterator(0); }$/;"	f	class:llvm::Registry
end	Support/StringPool.h	/^    inline const char *end() const {$/;"	f	class:llvm::PooledStringPtr
end	Support/TargetRegistry.h	/^    static iterator end() { return iterator(); }$/;"	f	struct:llvm::TargetRegistry
end	Support/YAMLParser.h	/^  iterator end() { return iterator(); }$/;"	f	class:llvm::yaml::MappingNode
end	Support/YAMLParser.h	/^  iterator end() { return iterator(); }$/;"	f	class:llvm::yaml::SequenceNode
end	TableGen/Record.h	/^  inline const_iterator end  () const { return Values.end();   }$/;"	f	class:llvm::ListInit
end	Target/TargetRegisterInfo.h	/^  iterator         end() const { return MC->end(); }$/;"	f	class:llvm::TargetRegisterClass
end	TypeFinder.h	/^  const_iterator end() const { return StructTypes.end(); }$/;"	f	class:llvm::TypeFinder
end	TypeFinder.h	/^  iterator end() { return StructTypes.end(); }$/;"	f	class:llvm::TypeFinder
end	ValueSymbolTable.h	/^  inline const_iterator end() const { return vmap.end(); }$/;"	f	class:llvm::ValueSymbolTable
end	ValueSymbolTable.h	/^  inline iterator end() { return vmap.end(); }$/;"	f	class:llvm::ValueSymbolTable
endAddress	Support/Win64EH.h	/^  uint64_t endAddress;$/;"	m	struct:llvm::Win64EH::RuntimeFunction
endELFRel	Object/ELF.h	/^  virtual Elf_Rel_Iter endELFRel(const Elf_Shdr *sec) const {$/;"	f	class:llvm::object::ELFObjectFile
endELFRela	Object/ELF.h	/^  virtual Elf_Rela_Iter endELFRela(const Elf_Shdr *sec) const {$/;"	f	class:llvm::object::ELFObjectFile
endIndex	CodeGen/LiveInterval.h	/^    SlotIndex endIndex() const {$/;"	f	class:llvm::LiveInterval
endPoint	CodeGen/LiveInterval.h	/^    SlotIndex endPoint() const {$/;"	f	class:llvm::LiveRangeQuery
endPostorder	Analysis/LoopIterator.h	/^  POIterator endPostorder() const { return PostBlocks.end(); }$/;"	f	class:llvm::LoopBlocksDFS
endRPO	Analysis/LoopIterator.h	/^  RPOIterator endRPO() const { return PostBlocks.rend(); }$/;"	f	class:llvm::LoopBlocksDFS
endStage	MC/MCInstrItineraries.h	/^  const InstrStage *endStage(unsigned ItinClassIndx) const {$/;"	f	class:llvm::InstrItineraryData
end_dynamic_symbols	Object/ELF.h	/^                             ::end_dynamic_symbols() const {$/;"	f	class:llvm::object::ELFObjectFile
end_dynamic_table	Object/ELF.h	/^                          ::end_dynamic_table() const {$/;"	f	class:llvm::object::ELFObjectFile
end_libraries_needed	Object/ELF.h	/^                             ::end_libraries_needed() const {$/;"	f	class:llvm::object::ELFObjectFile
end_relocations	Object/ObjectFile.h	/^inline relocation_iterator SectionRef::end_relocations() const {$/;"	f	class:llvm::object::SectionRef
end_sections	Object/ELF.h	/^                              ::end_sections() const {$/;"	f	class:llvm::object::ELFObjectFile
end_symbols	Object/ELF.h	/^                             ::end_symbols() const {$/;"	f	class:llvm::object::ELFObjectFile
endian	Support/Endian.h	/^namespace endian {$/;"	n	namespace:llvm::support
endianness	Support/Endian.h	/^enum endianness {big, little};$/;"	g	namespace:llvm::support
endswith	ADT/SmallString.h	/^  bool endswith(StringRef Suffix) const {$/;"	f	class:llvm::SmallString
endswith	ADT/StringRef.h	/^    bool endswith(StringRef Suffix) const {$/;"	f	class:llvm::StringRef
ensureAlignment	CodeGen/MachineFunction.h	/^  void ensureAlignment(unsigned A) {$/;"	f	class:llvm::MachineFunction
ensureHead	ADT/SparseBitVector.h	/^  Element *ensureHead(Element *) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	ADT/ilist.h	/^  static NodeTy *ensureHead(NodeTy *&Head) {$/;"	f	struct:llvm::ilist_sentinel_traits
ensureHead	Analysis/IVUsers.h	/^  IVStrideUse *ensureHead(IVStrideUse*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	BasicBlock.h	/^  Instruction *ensureHead(Instruction*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	CodeGen/MachineBasicBlock.h	/^  MachineInstr *ensureHead(MachineInstr*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	CodeGen/MachineFunction.h	/^  MachineBasicBlock *ensureHead(MachineBasicBlock*) const {$/;"	f	struct:llvm::ilist_traits
ensureHead	CodeGen/SelectionDAG.h	/^  SDNode *ensureHead(SDNode*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	CodeGen/SlotIndexes.h	/^    IndexListEntry *ensureHead(IndexListEntry*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	Function.h	/^  Argument *ensureHead(Argument*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	Function.h	/^  BasicBlock *ensureHead(BasicBlock*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	Module.h	/^  Function *ensureHead(Function*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	Module.h	/^  GlobalAlias *ensureHead(GlobalAlias*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	Module.h	/^  GlobalVariable *ensureHead(GlobalVariable*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	Module.h	/^  NamedMDNode *ensureHead(NamedMDNode*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureHead	Support/Recycler.h	/^  RecyclerStruct *ensureHead(RecyclerStruct*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ensureMaxAlignment	CodeGen/MachineFrameInfo.h	/^  void ensureMaxAlignment(unsigned Align) {$/;"	f	class:llvm::MachineFrameInfo
entry	Analysis/RegionInfo.h	/^  PointerIntPair<BasicBlock*, 1, bool> entry;$/;"	m	class:llvm::RegionNode
entry	Support/Registry.h	/^    typedef SimpleRegistryEntry<T> entry;$/;"	t	class:llvm::RegistryTraits
entry	Support/Registry.h	/^    typedef typename U::entry entry;$/;"	t	class:llvm::Registry
entry	Support/RegistryParser.h	/^    typedef typename U::entry entry;$/;"	t	class:llvm::RegistryParser
entry_t	Support/StringPool.h	/^    typedef StringMapEntry<PooledString> entry_t;$/;"	t	class:llvm::StringPool
entry_t	Support/StringPool.h	/^    typedef StringPool::entry_t entry_t;$/;"	t	class:llvm::PooledStringPtr
eq	ADT/APInt.h	/^  bool eq(const APInt &RHS) const {$/;"	f	class:llvm::APInt
equals	ADT/ArrayRef.h	/^    bool equals(ArrayRef RHS) const {$/;"	f	class:llvm::ArrayRef
equals	ADT/SmallString.h	/^  bool equals(StringRef RHS) const {$/;"	f	class:llvm::SmallString
equals	ADT/StringRef.h	/^    bool equals(StringRef RHS) const {$/;"	f	class:llvm::StringRef
equalsInt	Constants.h	/^  bool equalsInt(uint64_t V) const {$/;"	f	class:llvm::ConstantInt
equals_lower	ADT/SmallString.h	/^  bool equals_lower(StringRef RHS) const {$/;"	f	class:llvm::SmallString
equals_lower	ADT/StringRef.h	/^    bool equals_lower(StringRef RHS) const {$/;"	f	class:llvm::StringRef
equivalent	Support/FileSystem.h	/^inline bool equivalent(const Twine &A, const Twine &B) {$/;"	f	namespace:llvm::sys::fs
erase	ADT/DenseMap.h	/^  bool erase(const KeyT &Val) {$/;"	f	class:llvm::DenseMapBase
erase	ADT/DenseMap.h	/^  void erase(iterator I) {$/;"	f	class:llvm::DenseMapBase
erase	ADT/DenseSet.h	/^  bool erase(const ValueT &V) {$/;"	f	class:llvm::DenseSet
erase	ADT/DenseSet.h	/^  void erase(ConstIterator CI) { return TheMap.erase(CI.I); }$/;"	f	class:llvm::DenseSet
erase	ADT/DenseSet.h	/^  void erase(Iterator I) { return TheMap.erase(I.I); }$/;"	f	class:llvm::DenseSet
erase	ADT/IntervalMap.h	/^  void erase(unsigned i, unsigned Size) {$/;"	f	class:llvm::IntervalMapImpl::NodeBase
erase	ADT/IntervalMap.h	/^  void erase(unsigned i, unsigned j, unsigned Size) {$/;"	f	class:llvm::IntervalMapImpl::NodeBase
erase	ADT/IntervalMap.h	/^iterator::erase() {$/;"	f	class:llvm::IntervalMap::iterator
erase	ADT/SmallPtrSet.h	/^  bool erase(PtrType Ptr) {$/;"	f	class:llvm::SmallPtrSet
erase	ADT/SmallSet.h	/^  bool erase(const T &V) {$/;"	f	class:llvm::SmallSet
erase	ADT/SmallVector.h	/^  iterator erase(iterator I) {$/;"	f	class:llvm::SmallVectorImpl
erase	ADT/SmallVector.h	/^  iterator erase(iterator S, iterator E) {$/;"	f	class:llvm::SmallVectorImpl
erase	ADT/SparseSet.h	/^  bool erase(const KeyT &Key) {$/;"	f	class:llvm::SparseSet
erase	ADT/SparseSet.h	/^  iterator erase(iterator I) {$/;"	f	class:llvm::SparseSet
erase	ADT/StringMap.h	/^  bool erase(StringRef Key) {$/;"	f	class:llvm::StringMap
erase	ADT/StringMap.h	/^  void erase(iterator I) {$/;"	f	class:llvm::StringMap
erase	ADT/TinyPtrVector.h	/^  iterator erase(iterator I) {$/;"	f	class:llvm::TinyPtrVector
erase	ADT/TinyPtrVector.h	/^  iterator erase(iterator S, iterator E) {$/;"	f	class:llvm::TinyPtrVector
erase	ADT/ValueMap.h	/^  bool erase(const KeyT &Val) {$/;"	f	class:llvm::ValueMap
erase	ADT/ValueMap.h	/^  void erase(iterator I) {$/;"	f	class:llvm::ValueMap
erase	ADT/ilist.h	/^  iterator erase(iterator first, iterator last) {$/;"	f	class:llvm::iplist
erase	ADT/ilist.h	/^  iterator erase(iterator where) {$/;"	f	class:llvm::iplist
erase	ADT/ilist.h	/^  void erase(const NodeTy &val) {$/;"	f	class:llvm::iplist
erase	Analysis/Trace.h	/^  iterator erase(iterator q)               { return BasicBlocks.erase (q); }$/;"	f	class:llvm::Trace
erase	Analysis/Trace.h	/^  iterator erase(iterator q1, iterator q2) { return BasicBlocks.erase (q1, q2); }$/;"	f	class:llvm::Trace
erase	Bitcode/Archive.h	/^    inline iterator erase(iterator target) { return members.erase(target); }$/;"	f	class:llvm::Archive
erase	CodeGen/MachineBasicBlock.h	/^  instr_iterator erase(instr_iterator I) {$/;"	f	class:llvm::MachineBasicBlock
erase	CodeGen/MachineBasicBlock.h	/^  instr_iterator erase(instr_iterator I, instr_iterator E) {$/;"	f	class:llvm::MachineBasicBlock
erase	CodeGen/MachineBasicBlock.h	/^  iterator erase(MachineInstr *I) {$/;"	f	class:llvm::MachineBasicBlock
erase	CodeGen/MachineBasicBlock.h	/^  iterator erase(iterator I, iterator E) {$/;"	f	class:llvm::MachineBasicBlock
erase	CodeGen/MachineFunction.h	/^  void erase(iterator MBBI) {$/;"	f	class:llvm::MachineFunction
erase	CodeGen/ScheduleDAGInstrs.h	/^    void erase(unsigned Reg) {$/;"	f	class:llvm::Reg2SUnitsMap
erase	Support/ThreadLocal.h	/^      void erase() { removeInstance(); }$/;"	f	class:llvm::sys::ThreadLocal
erase	TypeFinder.h	/^  iterator erase(iterator I, iterator E) { return StructTypes.erase(I, E); }$/;"	f	class:llvm::TypeFinder
eraseFromList	Analysis/AliasSetTracker.h	/^    void eraseFromList() {$/;"	f	class:llvm::AliasSet::PointerRec
eraseNode	ADT/IntervalMap.h	/^iterator::eraseNode(unsigned Level) {$/;"	f	class:llvm::IntervalMap::iterator
eraseNode	Analysis/Dominators.h	/^  inline void eraseNode(BasicBlock *BB) {$/;"	f	class:llvm::DominatorTree
eraseNode	Analysis/Dominators.h	/^  void eraseNode(NodeT *BB) {$/;"	f	class:llvm::DominatorTreeBase
eraseNode	CodeGen/MachineDominators.h	/^  inline void eraseNode(MachineBasicBlock *BB) {$/;"	f	class:llvm::MachineDominatorTree
erase_if	ADT/ilist.h	/^  template<class Pr1> void erase_if(Pr1 pred) {$/;"	f	class:llvm::iplist
erase_instr	CodeGen/MachineBasicBlock.h	/^  instr_iterator erase_instr(MachineInstr *I) {$/;"	f	class:llvm::MachineBasicBlock
erase_one	ADT/PriorityQueue.h	/^  void erase_one(const T &t) {$/;"	f	class:llvm::PriorityQueue
errc	Support/system_error.h	/^  errc(_ v) : v_(v) {}$/;"	f	struct:llvm::errc
errc	Support/system_error.h	/^struct errc {$/;"	s	namespace:llvm
error	Support/Regex.h	/^    int error;$/;"	m	class:llvm::Regex
error_category	Support/system_error.h	/^class error_category$/;"	c	namespace:llvm
error_code	Support/system_error.h	/^  error_code() : _val_(0), _cat_(&system_category()) {}$/;"	f	class:llvm::error_code
error_code	Support/system_error.h	/^  error_code(E _e, typename enable_if_c<$/;"	f	class:llvm::error_code
error_code	Support/system_error.h	/^  error_code(int _val, const error_category& _cat)$/;"	f	class:llvm::error_code
error_code	Support/system_error.h	/^class error_code {$/;"	c	namespace:llvm
error_condition	Support/system_error.h	/^  error_condition() : _val_(0), _cat_(&generic_category()) {}$/;"	f	class:llvm::error_condition
error_condition	Support/system_error.h	/^  error_condition(E _e, typename enable_if_c<$/;"	f	class:llvm::error_condition
error_condition	Support/system_error.h	/^  error_condition(int _val, const error_category& _cat)$/;"	f	class:llvm::error_condition
error_condition	Support/system_error.h	/^class error_condition$/;"	c	namespace:llvm
error_detected	Support/raw_ostream.h	/^  void error_detected() { Error = true; }$/;"	f	class:llvm::raw_fd_ostream
exactLogBase2	ADT/APInt.h	/^  int32_t exactLogBase2() const {$/;"	f	class:llvm::APInt
exceedsNaturalStackAlignment	DataLayout.h	/^  bool exceedsNaturalStackAlignment(unsigned Align) const {$/;"	f	class:llvm::DataLayout
executable_format_error	Support/system_error.h	/^  executable_format_error             = ENOEXEC,$/;"	e	enum:llvm::errc::_
exists	Support/FileSystem.h	/^inline bool exists(const Twine &path) {$/;"	f	namespace:llvm::sys::fs
exit	Analysis/RegionInfo.h	/^  BasicBlock *exit;$/;"	m	class:llvm::Region
exp	Target/TargetLibraryInfo.h	/^      exp,$/;"	e	enum:llvm::LibFunc::Func
exp10	Target/TargetLibraryInfo.h	/^      exp10,$/;"	e	enum:llvm::LibFunc::Func
exp10f	Target/TargetLibraryInfo.h	/^      exp10f,$/;"	e	enum:llvm::LibFunc::Func
exp10l	Target/TargetLibraryInfo.h	/^      exp10l,$/;"	e	enum:llvm::LibFunc::Func
exp2	Target/TargetLibraryInfo.h	/^      exp2,$/;"	e	enum:llvm::LibFunc::Func
exp2f	Target/TargetLibraryInfo.h	/^      exp2f,$/;"	e	enum:llvm::LibFunc::Func
exp2l	Target/TargetLibraryInfo.h	/^      exp2l,$/;"	e	enum:llvm::LibFunc::Func
expandPostRAPseudo	Target/TargetInstrInfo.h	/^  virtual bool expandPostRAPseudo(MachineBasicBlock::iterator MI) const {$/;"	f	class:llvm::TargetInstrInfo
expf	Target/TargetLibraryInfo.h	/^      expf,$/;"	e	enum:llvm::LibFunc::Func
expiredAt	CodeGen/LiveInterval.h	/^    bool expiredAt(SlotIndex index) const {$/;"	f	class:llvm::LiveInterval
expl	Target/TargetLibraryInfo.h	/^      expl,$/;"	e	enum:llvm::LibFunc::Func
expm1	Target/TargetLibraryInfo.h	/^      expm1,$/;"	e	enum:llvm::LibFunc::Func
expm1f	Target/TargetLibraryInfo.h	/^      expm1f,$/;"	e	enum:llvm::LibFunc::Func
expm1l	Target/TargetLibraryInfo.h	/^      expm1l,$/;"	e	enum:llvm::LibFunc::Func
exponent	ADT/APFloat.h	/^    exponent_t exponent;$/;"	m	class:llvm::APFloat
exponent_t	ADT/APFloat.h	/^  typedef signed short exponent_t;$/;"	t	namespace:llvm
export_off	Support/MachO.h	/^      uint32_t export_off;$/;"	m	struct:llvm::MachO::dyld_info_command
export_size	Support/MachO.h	/^      uint32_t export_size;$/;"	m	struct:llvm::MachO::dyld_info_command
exposesReturnsTwice	Analysis/CodeMetrics.h	/^    bool exposesReturnsTwice;$/;"	m	struct:llvm::CodeMetrics
exposesReturnsTwice	CodeGen/MachineFunction.h	/^  bool exposesReturnsTwice() const {$/;"	f	class:llvm::MachineFunction
extOrTrunc	ADT/APSInt.h	/^  APSInt extOrTrunc(uint32_t width) const {$/;"	f	class:llvm::APSInt
extend	ADT/APSInt.h	/^  APSInt extend(uint32_t width) const {$/;"	f	class:llvm::APSInt
extendInsnRange	CodeGen/LexicalScopes.h	/^  void extendInsnRange(const MachineInstr *MI) {$/;"	f	class:llvm::LexicalScope
extractCallocCall	Analysis/MemoryBuiltins.h	/^static inline CallInst *extractCallocCall(Value *I,$/;"	f	namespace:llvm
extractMallocCall	Analysis/MemoryBuiltins.h	/^static inline CallInst *extractMallocCall(Value *I,$/;"	f	namespace:llvm
extrahelp	Support/CommandLine.h	/^struct extrahelp {$/;"	s	namespace:llvm::cl
extrefsymoff	Support/MachO.h	/^      uint32_t extrefsymoff;$/;"	m	struct:llvm::MachO::dysymtab_command
extreloff	Support/MachO.h	/^      uint32_t extreloff;$/;"	m	struct:llvm::MachO::dysymtab_command
f128	CodeGen/ValueTypes.h	/^      f128           =  11,   \/\/ This is a 128 bit floating point value$/;"	e	enum:llvm::MVT::SimpleValueType
f16	CodeGen/ValueTypes.h	/^      f16            =   7,   \/\/ This is a 16 bit floating point value$/;"	e	enum:llvm::MVT::SimpleValueType
f32	CodeGen/ValueTypes.h	/^      f32            =   8,   \/\/ This is a 32 bit floating point value$/;"	e	enum:llvm::MVT::SimpleValueType
f64	CodeGen/ValueTypes.h	/^      f64            =   9,   \/\/ This is a 64 bit floating point value$/;"	e	enum:llvm::MVT::SimpleValueType
f80	CodeGen/ValueTypes.h	/^      f80            =  10,   \/\/ This is a 80 bit floating point value$/;"	e	enum:llvm::MVT::SimpleValueType
fAny	CodeGen/ValueTypes.h	/^      fAny           = 253,$/;"	e	enum:llvm::MVT::SimpleValueType
fabs	Target/TargetLibraryInfo.h	/^      fabs,$/;"	e	enum:llvm::LibFunc::Func
fabsf	Target/TargetLibraryInfo.h	/^      fabsf,$/;"	e	enum:llvm::LibFunc::Func
fabsl	Target/TargetLibraryInfo.h	/^      fabsl,$/;"	e	enum:llvm::LibFunc::Func
factory	ADT/ImmutableSet.h	/^  Factory *factory;$/;"	m	class:llvm::ImutAVLTree
fail_if_exists	Support/FileSystem.h	/^    fail_if_exists,$/;"	e	enum:llvm::sys::fs::copy_option::_
false_type	Support/type_traits.h	/^typedef integral_constant<bool, false> false_type;$/;"	t	namespace:llvm
fat_arch	Support/MachO.h	/^    struct fat_arch {$/;"	s	namespace:llvm::MachO
fat_header	Support/MachO.h	/^    struct fat_header {$/;"	s	namespace:llvm::MachO
fatal_error_handler_t	Support/ErrorHandling.h	/^  typedef void (*fatal_error_handler_t)(void *user_data,$/;"	t	namespace:llvm
fcInfinity	ADT/APFloat.h	/^      fcInfinity,$/;"	e	enum:llvm::APFloat::fltCategory
fcNaN	ADT/APFloat.h	/^      fcNaN,$/;"	e	enum:llvm::APFloat::fltCategory
fcNormal	ADT/APFloat.h	/^      fcNormal,$/;"	e	enum:llvm::APFloat::fltCategory
fcZero	ADT/APFloat.h	/^      fcZero$/;"	e	enum:llvm::APFloat::fltCategory
fetch32	ADT/Hashing.h	/^inline uint32_t fetch32(const char *p) {$/;"	f	namespace:llvm::hashing::detail
fetch64	ADT/Hashing.h	/^inline uint64_t fetch64(const char *p) {$/;"	f	namespace:llvm::hashing::detail
fetchToPos	Support/StreamableMemoryObject.h	/^  bool fetchToPos(size_t Pos) const {$/;"	f	class:llvm::StreamingMemoryObject
fifo_file	Support/FileSystem.h	/^    fifo_file,$/;"	e	enum:llvm::sys::fs::file_type::_
fileSize	Support/PathV1.h	/^    uint64_t    fileSize;   \/\/\/< Size of the file in bytes$/;"	m	class:llvm::sys::FileStatus
file_exists	Support/system_error.h	/^  file_exists                         = EEXIST,$/;"	e	enum:llvm::errc::_
file_exists	Support/system_error.h	/^  file_exists             = 80, \/\/ ERROR_FILE_EXISTS,$/;"	e	enum:llvm::windows_error::_
file_magic	Support/FileSystem.h	/^  explicit file_magic(int v) : v_(_(v)) {}$/;"	f	struct:llvm::sys::fs::file_magic
file_magic	Support/FileSystem.h	/^  file_magic() : v_(unknown) {}$/;"	f	struct:llvm::sys::fs::file_magic
file_magic	Support/FileSystem.h	/^  file_magic(_ v) : v_(v) {}$/;"	f	struct:llvm::sys::fs::file_magic
file_magic	Support/FileSystem.h	/^struct file_magic {$/;"	s	namespace:llvm::sys::fs
file_not_found	Support/FileSystem.h	/^    file_not_found,$/;"	e	enum:llvm::sys::fs::file_type::_
file_not_found	Support/system_error.h	/^  file_not_found          = 2, \/\/ ERROR_FILE_NOT_FOUND,$/;"	e	enum:llvm::windows_error::_
file_status	Support/FileSystem.h	/^  explicit file_status(file_type v=file_type::status_error, $/;"	f	class:llvm::sys::fs::file_status
file_status	Support/FileSystem.h	/^class file_status$/;"	c	namespace:llvm::sys::fs
file_too_large	Support/system_error.h	/^  file_too_large                      = EFBIG,$/;"	e	enum:llvm::errc::_
file_type	Support/FileSystem.h	/^  explicit file_type(int v) : v_(_(v)) {}$/;"	f	struct:llvm::sys::fs::file_type
file_type	Support/FileSystem.h	/^  file_type(_ v) : v_(v) {}$/;"	f	struct:llvm::sys::fs::file_type
file_type	Support/FileSystem.h	/^struct file_type {$/;"	s	namespace:llvm::sys::fs
filename_too_long	Support/system_error.h	/^  filename_too_long                   = ENAMETOOLONG,$/;"	e	enum:llvm::errc::_
fileoff	Support/MachO.h	/^      uint32_t fileoff;$/;"	m	struct:llvm::MachO::segment_command
fileoff	Support/MachO.h	/^      uint64_t fileoff;$/;"	m	struct:llvm::MachO::segment_command_64
filesize	Support/MachO.h	/^      uint32_t filesize;$/;"	m	struct:llvm::MachO::segment_command
filesize	Support/MachO.h	/^      uint64_t filesize;$/;"	m	struct:llvm::MachO::segment_command_64
filetype	Support/MachO.h	/^      uint32_t filetype;$/;"	m	struct:llvm::MachO::mach_header
filetype	Support/MachO.h	/^      uint32_t filetype;$/;"	m	struct:llvm::MachO::mach_header_64
fillLeft	ADT/IntervalMap.h	/^  void fillLeft(unsigned Height) {$/;"	f	class:llvm::IntervalMapImpl::Path
filter	Support/PassNameParser.h	/^  Filter filter;$/;"	m	class:llvm::FilteredPassNameParser
finalize	ADT/Hashing.h	/^  uint64_t finalize(size_t length) {$/;"	f	struct:llvm::hashing::detail::hash_state
finalizeSchedule	CodeGen/ScheduleDAGInstrs.h	/^    virtual void finalizeSchedule() {}$/;"	f	class:llvm::ScheduleDAGInstrs
find	ADT/DenseMap.h	/^  const_iterator find(const KeyT &Val) const {$/;"	f	class:llvm::DenseMapBase
find	ADT/DenseMap.h	/^  iterator find(const KeyT &Val) {$/;"	f	class:llvm::DenseMapBase
find	ADT/DenseSet.h	/^  iterator find(const ValueT &V) { return Iterator(TheMap.find(V)); }$/;"	f	class:llvm::DenseSet
find	ADT/ImmutableSet.h	/^  ImutAVLTree* find(key_type_ref K) {$/;"	f	class:llvm::ImutAVLTree
find	ADT/IntervalMap.h	/^  const_iterator find(KeyT x) const {$/;"	f	class:llvm::IntervalMap
find	ADT/IntervalMap.h	/^  iterator find(KeyT x) {$/;"	f	class:llvm::IntervalMap
find	ADT/IntervalMap.h	/^  void find(KeyT x) {$/;"	f	class:llvm::IntervalMap::const_iterator
find	ADT/SmallString.h	/^  size_t find(StringRef Str, size_t From = 0) const {$/;"	f	class:llvm::SmallString
find	ADT/SmallString.h	/^  size_t find(char C, size_t From = 0) const {$/;"	f	class:llvm::SmallString
find	ADT/SparseSet.h	/^  const_iterator find(const KeyT &Key) const {$/;"	f	class:llvm::SparseSet
find	ADT/SparseSet.h	/^  iterator find(const KeyT &Key) {$/;"	f	class:llvm::SparseSet
find	ADT/StringMap.h	/^  const_iterator find(StringRef Key) const {$/;"	f	class:llvm::StringMap
find	ADT/StringMap.h	/^  iterator find(StringRef Key) {$/;"	f	class:llvm::StringMap
find	ADT/StringRef.h	/^    size_t find(char C, size_t From = 0) const {$/;"	f	class:llvm::StringRef
find	ADT/ValueMap.h	/^  const_iterator find(const KeyT &Val) const {$/;"	f	class:llvm::ValueMap
find	ADT/ValueMap.h	/^  iterator find(const KeyT &Val) {$/;"	f	class:llvm::ValueMap
find	Analysis/DominanceFrontier.h	/^  const_iterator find(BasicBlock *B) const { return Frontiers.find(B); }$/;"	f	class:llvm::DominanceFrontierBase
find	Analysis/DominanceFrontier.h	/^  iterator       find(BasicBlock *B)       { return Frontiers.find(B); }$/;"	f	class:llvm::DominanceFrontierBase
find	CodeGen/LiveInterval.h	/^    const_iterator find(SlotIndex Pos) const {$/;"	f	class:llvm::LiveInterval
find	CodeGen/MachineScheduler.h	/^  iterator find(SUnit *SU) {$/;"	f	class:llvm::ReadyQueue
findAbstractScope	CodeGen/LexicalScopes.h	/^  LexicalScope *findAbstractScope(const MDNode *N) {$/;"	f	class:llvm::LexicalScopes
findCaseDest	Instructions.h	/^  ConstantInt *findCaseDest(BasicBlock *BB) {$/;"	f	class:llvm::SwitchInst
findCaseValue	Instructions.h	/^  CaseIt findCaseValue(const ConstantInt *C) {$/;"	f	class:llvm::SwitchInst
findCaseValue	Instructions.h	/^  ConstCaseIt findCaseValue(const ConstantInt *C) const {$/;"	f	class:llvm::SwitchInst
findDebugLoc	CodeGen/MachineBasicBlock.h	/^  DebugLoc findDebugLoc(iterator MBBI) {$/;"	f	class:llvm::MachineBasicBlock
findEdge	CodeGen/PBQP/Graph.h	/^    EdgeItr findEdge(NodeItr n1Itr, NodeItr n2Itr) {$/;"	f	class:PBQP::Graph
findFirstPredOperandIdx	MC/MCInstrDesc.h	/^  int findFirstPredOperandIdx() const {$/;"	f	class:llvm::MCInstrDesc
findFrom	ADT/IntervalMap.h	/^  unsigned findFrom(unsigned i, unsigned Size, KeyT x) const {$/;"	f	class:llvm::IntervalMapImpl::BranchNode
findFrom	ADT/IntervalMap.h	/^  unsigned findFrom(unsigned i, unsigned Size, KeyT x) const {$/;"	f	class:llvm::IntervalMapImpl::LeafNode
findImplPass	PassAnalysisSupport.h	/^  Pass *findImplPass(AnalysisID PI) {$/;"	f	class:llvm::AnalysisResolver
findIndex	ADT/SparseSet.h	/^  iterator findIndex(unsigned Idx) {$/;"	f	class:llvm::SparseSet
findInlinedScope	CodeGen/LexicalScopes.h	/^  LexicalScope *findInlinedScope(DebugLoc DL) {$/;"	f	class:llvm::LexicalScopes
findLeader	ADT/EquivalenceClasses.h	/^  member_iterator findLeader(const ElemTy &V) const {$/;"	f	class:llvm::EquivalenceClasses
findLeader	ADT/EquivalenceClasses.h	/^  member_iterator findLeader(iterator I) const {$/;"	f	class:llvm::EquivalenceClasses
findLexicalScope	CodeGen/LexicalScopes.h	/^  LexicalScope *findLexicalScope(const MDNode *N) {$/;"	f	class:llvm::LexicalScopes
findLiveInMBBs	CodeGen/LiveIntervalAnalysis.h	/^    bool findLiveInMBBs(SlotIndex Start, SlotIndex End,$/;"	f	class:llvm::LiveIntervals
findLiveInMBBs	CodeGen/SlotIndexes.h	/^    bool findLiveInMBBs(SlotIndex start, SlotIndex end,$/;"	f	class:llvm::SlotIndexes
findNearestCommonDominator	Analysis/Dominators.h	/^  NodeT *findNearestCommonDominator(NodeT *A, NodeT *B) {$/;"	f	class:llvm::DominatorTreeBase
findNearestCommonDominator	Analysis/Dominators.h	/^  const NodeT *findNearestCommonDominator(const NodeT *A, const NodeT *B) {$/;"	f	class:llvm::DominatorTreeBase
findNearestCommonDominator	Analysis/Dominators.h	/^  inline BasicBlock *findNearestCommonDominator(BasicBlock *A, BasicBlock *B) {$/;"	f	class:llvm::DominatorTree
findNearestCommonDominator	Analysis/Dominators.h	/^  inline const BasicBlock *findNearestCommonDominator(const BasicBlock *A,$/;"	f	class:llvm::DominatorTree
findNearestCommonDominator	Analysis/PostDominators.h	/^  inline BasicBlock *findNearestCommonDominator(BasicBlock *A, BasicBlock *B) {$/;"	f	struct:llvm::PostDominatorTree
findNearestCommonDominator	CodeGen/MachineDominators.h	/^  inline MachineBasicBlock *findNearestCommonDominator(MachineBasicBlock *A,$/;"	f	class:llvm::MachineDominatorTree
findNearestCommonDominator	CodeGen/MachinePostDominators.h	/^  MachineBasicBlock *findNearestCommonDominator(MachineBasicBlock *A,$/;"	f	struct:llvm::MachinePostDominatorTree
findRegisterDefOperand	CodeGen/MachineInstr.h	/^  MachineOperand *findRegisterDefOperand(unsigned Reg, bool isDead = false,$/;"	f	class:llvm::MachineInstr
findRegisterUseOperand	CodeGen/MachineInstr.h	/^  MachineOperand *findRegisterUseOperand(unsigned Reg, bool isKill = false,$/;"	f	class:llvm::MachineInstr
findSuccessor	Support/IntegersSubsetMapping.h	/^  SuccessorClass *findSuccessor(const IntTy& Val) {$/;"	f	class:llvm::IntegersSubsetMapping
findValue	ADT/EquivalenceClasses.h	/^  iterator findValue(const ElemTy &V) const {$/;"	f	class:llvm::EquivalenceClasses
find_as	ADT/DenseMap.h	/^  const_iterator find_as(const LookupKeyT &Val) const {$/;"	f	class:llvm::DenseMapBase
find_as	ADT/DenseMap.h	/^  iterator find_as(const LookupKeyT &Val) {$/;"	f	class:llvm::DenseMapBase
find_first	ADT/BitVector.h	/^  int find_first() const {$/;"	f	class:llvm::BitVector
find_first	ADT/SmallBitVector.h	/^  int find_first() const {$/;"	f	class:llvm::SmallBitVector
find_first	ADT/SparseBitVector.h	/^  int find_first() const {$/;"	f	class:llvm::SparseBitVector
find_first	ADT/SparseBitVector.h	/^  int find_first() const {$/;"	f	struct:llvm::SparseBitVectorElement
find_first_not_of	ADT/SmallString.h	/^  size_t find_first_not_of(StringRef Chars, size_t From = 0) const {$/;"	f	class:llvm::SmallString
find_first_not_of	ADT/SmallString.h	/^  size_t find_first_not_of(char C, size_t From = 0) const {$/;"	f	class:llvm::SmallString
find_first_of	ADT/SmallString.h	/^  size_t find_first_of(StringRef Chars, size_t From = 0) const {$/;"	f	class:llvm::SmallString
find_first_of	ADT/SmallString.h	/^  size_t find_first_of(char C, size_t From = 0) const {$/;"	f	class:llvm::SmallString
find_first_of	ADT/StringRef.h	/^    size_type find_first_of(char C, size_t From = 0) const {$/;"	f	class:llvm::StringRef
find_last_of	ADT/SmallString.h	/^  size_t find_last_of($/;"	f	class:llvm::SmallString
find_last_of	ADT/SmallString.h	/^  size_t find_last_of(char C, size_t From = StringRef::npos) const {$/;"	f	class:llvm::SmallString
find_last_of	ADT/StringRef.h	/^    size_type find_last_of(char C, size_t From = npos) const {$/;"	f	class:llvm::StringRef
find_next	ADT/BitVector.h	/^  int find_next(unsigned Prev) const {$/;"	f	class:llvm::BitVector
find_next	ADT/SmallBitVector.h	/^  int find_next(unsigned Prev) const {$/;"	f	class:llvm::SmallBitVector
find_next	ADT/SparseBitVector.h	/^  int find_next(unsigned Curr) const {$/;"	f	struct:llvm::SparseBitVectorElement
finfo_map_type	CodeGen/GCMetadata.h	/^    typedef DenseMap<const Function*,GCFunctionInfo*> finfo_map_type;$/;"	t	class:llvm::GCModuleInfo
finishPostorder	ADT/PostOrderIterator.h	/^  void finishPostorder(NodeType *BB) {}$/;"	f	class:llvm::po_iterator_storage
finishPostorder	Analysis/LoopIterator.h	/^  void finishPostorder(BasicBlock *BB) {$/;"	f	class:llvm::LoopBlocksTraversal
finishPostorder	Analysis/LoopIterator.h	/^finishPostorder(BasicBlock *BB) {$/;"	f	class:llvm::po_iterator_storage
fiprintf	Target/TargetLibraryInfo.h	/^      fiprintf,$/;"	e	enum:llvm::LibFunc::Func
first	ADT/IntervalMap.h	/^  T1 first[N];$/;"	m	class:llvm::IntervalMapImpl::NodeBase
first	ADT/STLExtras.h	/^  first_type first;$/;"	m	struct:llvm::tier
first	ADT/StringMap.h	/^  StringRef first() const { return StringRef(getKeyData(), getKeyLength()); }$/;"	f	class:llvm::StringMapEntry
first	ADT/ValueMap.h	/^    const KeyT first;$/;"	m	struct:llvm::ValueMapConstIterator::ValueTypeProxy
first	ADT/ValueMap.h	/^    const KeyT first;$/;"	m	struct:llvm::ValueMapIterator::ValueTypeProxy
first	ExecutionEngine/GenericValue.h	/^    struct { unsigned int first; unsigned int second; } UIntPairVal;$/;"	m	struct:llvm::GenericValue::__anon52::__anon53
firstFileOffset	Bitcode/Archive.h	/^    unsigned firstFileOffset; \/\/\/< Offset to first normal file.$/;"	m	class:llvm::Archive
first_type	ADT/STLExtras.h	/^  typedef T1 &first_type;$/;"	t	struct:llvm::tier
fitsInLegalInteger	DataLayout.h	/^  bool fitsInLegalInteger(unsigned Width) const {$/;"	f	class:llvm::DataLayout
fixaddr	Support/OutputBuffer.h	/^    void fixaddr(uint64_t X, unsigned Offset) {$/;"	f	class:llvm::OutputBuffer
fixhalf	Support/OutputBuffer.h	/^    void fixhalf(unsigned short X, unsigned Offset) {$/;"	f	class:llvm::OutputBuffer
fixup_begin	MC/MCAssembler.h	/^  const_fixup_iterator fixup_begin() const { return Fixups.begin(); }$/;"	f	class:llvm::MCDataFragment
fixup_begin	MC/MCAssembler.h	/^  const_fixup_iterator fixup_begin() const { return Fixups.begin(); }$/;"	f	class:llvm::MCInstFragment
fixup_begin	MC/MCAssembler.h	/^  fixup_iterator fixup_begin() { return Fixups.begin(); }$/;"	f	class:llvm::MCDataFragment
fixup_begin	MC/MCAssembler.h	/^  fixup_iterator fixup_begin() { return Fixups.begin(); }$/;"	f	class:llvm::MCInstFragment
fixup_end	MC/MCAssembler.h	/^  const_fixup_iterator fixup_end() const {return Fixups.end();}$/;"	f	class:llvm::MCDataFragment
fixup_end	MC/MCAssembler.h	/^  const_fixup_iterator fixup_end() const {return Fixups.end();}$/;"	f	class:llvm::MCInstFragment
fixup_end	MC/MCAssembler.h	/^  fixup_iterator fixup_end() {return Fixups.end();}$/;"	f	class:llvm::MCDataFragment
fixup_end	MC/MCAssembler.h	/^  fixup_iterator fixup_end() {return Fixups.end();}$/;"	f	class:llvm::MCInstFragment
fixup_iterator	MC/MCAssembler.h	/^  typedef SmallVectorImpl<MCFixup>::iterator fixup_iterator;$/;"	t	class:llvm::MCInstFragment
fixup_iterator	MC/MCAssembler.h	/^  typedef std::vector<MCFixup>::iterator fixup_iterator;$/;"	t	class:llvm::MCDataFragment
fixup_size	MC/MCAssembler.h	/^  size_t fixup_size() const { return Fixups.size(); }$/;"	f	class:llvm::MCDataFragment
fixup_size	MC/MCAssembler.h	/^  size_t fixup_size() const { return Fixups.size(); }$/;"	f	class:llvm::MCInstFragment
fixword	Support/OutputBuffer.h	/^    void fixword(unsigned X, unsigned Offset) {$/;"	f	class:llvm::OutputBuffer
fixxword	Support/OutputBuffer.h	/^    void fixxword(uint64_t X, unsigned Offset) {$/;"	f	class:llvm::OutputBuffer
flags	Bitcode/Archive.h	/^    unsigned            flags;    \/\/\/< Flags about the archive member$/;"	m	class:llvm::ArchiveMember
flags	Support/MachO.h	/^               flags:8;$/;"	m	struct:llvm::MachO::dylib_reference
flags	Support/MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::mach_header
flags	Support/MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::mach_header_64
flags	Support/MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::section
flags	Support/MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::section_64
flags	Support/MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::segment_command
flags	Support/MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::segment_command_64
flags	Support/Win64EH.h	/^          flags:5;$/;"	m	struct:llvm::Win64EH::UnwindInfo
flip	ADT/BitVector.h	/^  BitVector &flip() {$/;"	f	class:llvm::BitVector
flip	ADT/BitVector.h	/^  BitVector &flip(unsigned Idx) {$/;"	f	class:llvm::BitVector
flip	ADT/SmallBitVector.h	/^  SmallBitVector &flip() {$/;"	f	class:llvm::SmallBitVector
flip	ADT/SmallBitVector.h	/^  SmallBitVector &flip(unsigned Idx) {$/;"	f	class:llvm::SmallBitVector
flipAllBits	ADT/APInt.h	/^  void flipAllBits() {$/;"	f	class:llvm::APInt
floatToBits	ADT/APInt.h	/^  static APInt floatToBits(float V) {$/;"	f	class:llvm::APInt
floor	Target/TargetLibraryInfo.h	/^      floor,$/;"	e	enum:llvm::LibFunc::Func
floorf	Target/TargetLibraryInfo.h	/^      floorf,$/;"	e	enum:llvm::LibFunc::Func
floorl	Target/TargetLibraryInfo.h	/^      floorl,$/;"	e	enum:llvm::LibFunc::Func
fltCategory	ADT/APFloat.h	/^    enum fltCategory {$/;"	g	class:llvm::APFloat
flush	ExecutionEngine/ObjectBuffer.h	/^  void flush()$/;"	f	class:llvm::ObjectBufferStream
flush	Support/raw_ostream.h	/^  void flush() {$/;"	f	class:llvm::raw_ostream
flushBuffer	Support/circular_raw_ostream.h	/^    void flushBuffer(void) {$/;"	f	class:llvm::circular_raw_ostream
fmod	Target/TargetLibraryInfo.h	/^      fmod,$/;"	e	enum:llvm::LibFunc::Func
fmodf	Target/TargetLibraryInfo.h	/^      fmodf,$/;"	e	enum:llvm::LibFunc::Func
fmodl	Target/TargetLibraryInfo.h	/^      fmodl,$/;"	e	enum:llvm::LibFunc::Func
fnNumber	Analysis/ProfileInfoTypes.h	/^  unsigned fnNumber; \/* function number for these counters *\/$/;"	m	struct:__anon26
fneg_match	Support/PatternMatch.h	/^  fneg_match(const LHS_t &LHS) : L(LHS) {}$/;"	f	struct:llvm::PatternMatch::fneg_match
fneg_match	Support/PatternMatch.h	/^struct fneg_match {$/;"	s	namespace:llvm::PatternMatch
foldMemoryOperandImpl	Target/TargetInstrInfo.h	/^  virtual MachineInstr* foldMemoryOperandImpl(MachineFunction &MF,$/;"	f	class:llvm::TargetInstrInfo
foreach	ADT/ImmutableMap.h	/^  void foreach() {$/;"	f	class:llvm::ImmutableMap
foreach	ADT/ImmutableMap.h	/^  void foreach(Callback& C) {$/;"	f	class:llvm::ImmutableMap
foreach	ADT/ImmutableSet.h	/^  void foreach() { if (Root) { Callback C; Root->foreach(C); } }$/;"	f	class:llvm::ImmutableSet
foreach	ADT/ImmutableSet.h	/^  void foreach(Callback& C) { if (Root) Root->foreach(C); }$/;"	f	class:llvm::ImmutableSet
foreach	ADT/ImmutableSet.h	/^  void foreach(Callback& C) {$/;"	f	class:llvm::ImutAVLTree
foreignST	Bitcode/Archive.h	/^    ArchiveMember* foreignST; \/\/\/< This holds the foreign symbol table.$/;"	m	class:llvm::Archive
format	Support/Format.h	/^  inline format_object3<T1, T2, T3> format(const char *Fmt, const T1 &Val1,$/;"	f	namespace:llvm
format	Support/Format.h	/^inline format_object1<T> format(const char *Fmt, const T &Val) {$/;"	f	namespace:llvm
format	Support/Format.h	/^inline format_object2<T1, T2> format(const char *Fmt, const T1 &Val1,$/;"	f	namespace:llvm
format	Support/Format.h	/^inline format_object4<T1, T2, T3, T4> format(const char *Fmt, const T1 &Val1,$/;"	f	namespace:llvm
format	Support/Format.h	/^inline format_object5<T1, T2, T3, T4, T5> format(const char *Fmt,const T1 &Val1,$/;"	f	namespace:llvm
format_object1	Support/Format.h	/^  format_object1(const char *fmt, const T &val)$/;"	f	class:llvm::format_object1
format_object1	Support/Format.h	/^class format_object1 : public format_object_base {$/;"	c	namespace:llvm
format_object2	Support/Format.h	/^  format_object2(const char *fmt, const T1 &val1, const T2 &val2)$/;"	f	class:llvm::format_object2
format_object2	Support/Format.h	/^class format_object2 : public format_object_base {$/;"	c	namespace:llvm
format_object3	Support/Format.h	/^  format_object3(const char *fmt, const T1 &val1, const T2 &val2,const T3 &val3)$/;"	f	class:llvm::format_object3
format_object3	Support/Format.h	/^class format_object3 : public format_object_base {$/;"	c	namespace:llvm
format_object4	Support/Format.h	/^  format_object4(const char *fmt, const T1 &val1, const T2 &val2,$/;"	f	class:llvm::format_object4
format_object4	Support/Format.h	/^class format_object4 : public format_object_base {$/;"	c	namespace:llvm
format_object5	Support/Format.h	/^  format_object5(const char *fmt, const T1 &val1, const T2 &val2,$/;"	f	class:llvm::format_object5
format_object5	Support/Format.h	/^class format_object5 : public format_object_base {$/;"	c	namespace:llvm
format_object_base	Support/Format.h	/^  format_object_base(const char *fmt) : Fmt(fmt) {}$/;"	f	class:llvm::format_object_base
format_object_base	Support/Format.h	/^class format_object_base {$/;"	c	namespace:llvm
formatted_raw_ostream	Support/FormattedStream.h	/^    explicit formatted_raw_ostream()$/;"	f	class:llvm::formatted_raw_ostream
formatted_raw_ostream	Support/FormattedStream.h	/^    formatted_raw_ostream(raw_ostream &Stream, bool Delete = false) $/;"	f	class:llvm::formatted_raw_ostream
formatted_raw_ostream	Support/FormattedStream.h	/^  class formatted_raw_ostream : public raw_ostream {$/;"	c	namespace:llvm
forward	CodeGen/RegisterScavenging.h	/^  void forward(MachineBasicBlock::iterator I) {$/;"	f	class:llvm::RegScavenger
fp128	TypeBuilder.h	/^class fp128 {};$/;"	c	namespace:llvm::types
fputc	Target/TargetLibraryInfo.h	/^      fputc,$/;"	e	enum:llvm::LibFunc::Func
fputs	Target/TargetLibraryInfo.h	/^      fputs,$/;"	e	enum:llvm::LibFunc::Func
frameOffset	Support/Win64EH.h	/^          frameOffset:4;$/;"	m	struct:llvm::Win64EH::UnwindInfo
frameOffset	Support/Win64EH.h	/^  uint16_t frameOffset;$/;"	m	union:llvm::Win64EH::UnwindCode
frameRegister	Support/Win64EH.h	/^  uint8_t frameRegister:4,$/;"	m	struct:llvm::Win64EH::UnwindInfo
free	Support/FileSystem.h	/^  uint64_t free;$/;"	m	struct:llvm::sys::fs::space_info
free	Target/TargetLibraryInfo.h	/^      free,$/;"	e	enum:llvm::LibFunc::Func
freeNodes	ADT/ImmutableSet.h	/^  std::vector<TreeTy*> freeNodes;$/;"	m	class:llvm::ImutAVLFactory
freeState	Bitcode/BitstreamReader.h	/^  void freeState() {$/;"	f	class:llvm::BitstreamCursor
fromConstantInt	Support/IntegersSubset.h	/^  static IntItem fromConstantInt(const ConstantInt *V) {$/;"	f	class:llvm::IntItem
fromEpochTime	Support/TimeValue.h	/^    void fromEpochTime( SecondsType seconds ) {$/;"	f	class:llvm::sys::TimeValue
fromSuccessorIndex	Instructions.h	/^    static Self fromSuccessorIndex(SwitchInstTy *SI, unsigned SuccessorIndex) {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
fromType	Support/IntegersSubset.h	/^  static IntItem fromType(Type* Ty, const APInt& V) {$/;"	f	class:llvm::IntItem
fromWin32Time	Support/TimeValue.h	/^    void fromWin32Time( uint64_t win32Time ) {$/;"	f	class:llvm::sys::TimeValue
front	ADT/ArrayRef.h	/^    T &front() const {$/;"	f	class:llvm::MutableArrayRef
front	ADT/ArrayRef.h	/^    const T &front() const {$/;"	f	class:llvm::ArrayRef
front	ADT/SmallVector.h	/^  const_reference front() const {$/;"	f	class:llvm::SmallVectorTemplateCommon
front	ADT/SmallVector.h	/^  reference front() {$/;"	f	class:llvm::SmallVectorTemplateCommon
front	ADT/StringRef.h	/^    char front() const {$/;"	f	class:llvm::StringRef
front	ADT/TinyPtrVector.h	/^  EltTy front() const {$/;"	f	class:llvm::TinyPtrVector
front	ADT/ilist.h	/^  const_reference front() const {$/;"	f	class:llvm::iplist
front	ADT/ilist.h	/^  reference front() {$/;"	f	class:llvm::iplist
front	BasicBlock.h	/^  inline       Instruction      &front()       { return InstList.front(); }$/;"	f	class:llvm::BasicBlock
front	BasicBlock.h	/^  inline const Instruction      &front() const { return InstList.front(); }$/;"	f	class:llvm::BasicBlock
front	Bitcode/Archive.h	/^    inline       ArchiveMember&   front()        { return members.front();  }$/;"	f	class:llvm::Archive
front	Bitcode/Archive.h	/^    inline const ArchiveMember&   front()  const { return members.front();  }$/;"	f	class:llvm::Archive
front	CodeGen/MachineBasicBlock.h	/^  MachineInstr& front() { return Insts.front(); }$/;"	f	class:llvm::MachineBasicBlock
front	CodeGen/MachineBasicBlock.h	/^  const MachineInstr& front() const { return Insts.front(); }$/;"	f	class:llvm::MachineBasicBlock
front	CodeGen/MachineFunction.h	/^        MachineBasicBlock &front()       { return BasicBlocks.front(); }$/;"	f	class:llvm::MachineFunction
front	CodeGen/MachineFunction.h	/^  const MachineBasicBlock &front() const { return BasicBlocks.front(); }$/;"	f	class:llvm::MachineFunction
front	Function.h	/^        BasicBlock       &front()       { return BasicBlocks.front(); }$/;"	f	class:llvm::Function
front	Function.h	/^  const BasicBlock       &front() const { return BasicBlocks.front(); }$/;"	f	class:llvm::Function
fs	Support/FileSystem.h	/^namespace fs {$/;"	n	namespace:llvm::sys
fsIsValid	Support/PathV1.h	/^      mutable bool fsIsValid;    \/\/\/< Whether we've obtained it or not$/;"	m	class:llvm::sys::PathWithStatus
fs_st_dev	Support/FileSystem.h	/^  dev_t fs_st_dev;$/;"	m	class:llvm::sys::fs::file_status
fs_st_ino	Support/FileSystem.h	/^  ino_t fs_st_ino;$/;"	m	class:llvm::sys::fs::file_status
fullStopTag	Use.h	/^                  , fullStopTag };$/;"	e	enum:llvm::Use::PrevPtrTag
function_interval_iterator	Analysis/IntervalIterator.h	/^typedef IntervalIterator<BasicBlock, Function> function_interval_iterator;$/;"	t	namespace:llvm
function_not_supported	Support/system_error.h	/^  function_not_supported              = ENOSYS,$/;"	e	enum:llvm::errc::_
fvmfile_command	Support/MachO.h	/^    struct fvmfile_command {$/;"	s	namespace:llvm::MachO
fvmlib	Support/MachO.h	/^      struct fvmlib fvmlib;$/;"	m	struct:llvm::MachO::fvmlib_command	typeref:struct:llvm::MachO::fvmlib_command::fvmlib
fvmlib	Support/MachO.h	/^    struct fvmlib {$/;"	s	namespace:llvm::MachO
fvmlib_command	Support/MachO.h	/^    struct fvmlib_command {$/;"	s	namespace:llvm::MachO
fwrite	Target/TargetLibraryInfo.h	/^      fwrite,$/;"	e	enum:llvm::LibFunc::Func
g	CodeGen/PBQP/HeuristicBase.h	/^    Graph &g;$/;"	m	class:PBQP::HeuristicBase
g	CodeGen/PBQP/HeuristicSolver.h	/^    Graph &g;$/;"	m	class:PBQP::HeuristicSolverImpl
g	CodeGen/PBQP/Heuristics/Briggs.h	/^        Graph *g;$/;"	m	class:PBQP::Heuristics::Briggs::SpillCostComparator
gen_failure	Support/system_error.h	/^  gen_failure             = 31, \/\/ ERROR_GEN_FAILURE,$/;"	e	enum:llvm::windows_error::_
generic_gep_type_iterator	Support/GetElementPtrTypeIterator.h	/^    generic_gep_type_iterator() {}$/;"	f	class:llvm::generic_gep_type_iterator
generic_gep_type_iterator	Support/GetElementPtrTypeIterator.h	/^  class generic_gep_type_iterator$/;"	c	namespace:llvm
generic_parser_base	Support/CommandLine.h	/^class generic_parser_base {$/;"	c	namespace:llvm::cl
gep_type_begin	Support/GetElementPtrTypeIterator.h	/^  gep_type_begin(Type *Op0, ArrayRef<T> A) {$/;"	f	namespace:llvm
gep_type_begin	Support/GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_begin(const User &GEP) {$/;"	f	namespace:llvm
gep_type_begin	Support/GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_begin(const User *GEP) {$/;"	f	namespace:llvm
gep_type_end	Support/GetElementPtrTypeIterator.h	/^  gep_type_end(Type *Op0, ArrayRef<T> A) {$/;"	f	namespace:llvm
gep_type_end	Support/GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_end(const User &GEP) {$/;"	f	namespace:llvm
gep_type_end	Support/GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_end(const User *GEP) {$/;"	f	namespace:llvm
gep_type_iterator	Support/GetElementPtrTypeIterator.h	/^  typedef generic_gep_type_iterator<> gep_type_iterator;$/;"	t	namespace:llvm
get	ADT/IntervalMap.h	/^  NodeT &get() const {$/;"	f	class:llvm::IntervalMapImpl::NodeRef
get	ADT/NullablePtr.h	/^  T *get() {$/;"	f	class:llvm::NullablePtr
get	ADT/NullablePtr.h	/^  const T *get() const {$/;"	f	class:llvm::NullablePtr
get	ADT/OwningPtr.h	/^  T *get() const { return Ptr; }$/;"	f	class:llvm::OwningArrayPtr
get	ADT/OwningPtr.h	/^  T *get() const { return Ptr; }$/;"	f	class:llvm::OwningPtr
get	ADT/PointerUnion.h	/^      T get() const {$/;"	f	struct:llvm::PointerUnion3::IsInnerUnion
get	ADT/PointerUnion.h	/^      T get() const {$/;"	f	struct:llvm::PointerUnion3::IsPT3
get	ADT/PointerUnion.h	/^    T get() const {$/;"	f	class:llvm::PointerUnion3
get	ADT/PointerUnion.h	/^    T get() const {$/;"	f	class:llvm::PointerUnion4
get	Analysis/InlineCost.h	/^    static InlineCost get(int Cost, int Threshold) {$/;"	f	class:llvm::InlineCost
get	Attributes.h	/^  static AttributeWithIndex get(LLVMContext &C, unsigned Idx,$/;"	f	struct:llvm::AttributeWithIndex
get	Attributes.h	/^  static AttributeWithIndex get(unsigned Idx, Attributes Attrs) {$/;"	f	struct:llvm::AttributeWithIndex
get	CodeGen/LiveRangeEdit.h	/^  LiveInterval *get(unsigned idx) const { return NewRegs[idx+FirstNew]; }$/;"	f	class:llvm::LiveRangeEdit
get	CodeGen/RegisterClassInfo.h	/^  const RCInfo &get(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::RegisterClassInfo
get	CodeGen/SelectionDAGNodes.h	/^  ISD::CondCode get() const { return Condition; }$/;"	f	class:llvm::CondCodeSDNode
get	CodeGen/SelectionDAGNodes.h	/^  const SDValue &get() const { return Val; }$/;"	f	class:llvm::SDUse
get	Intrinsics.h	/^    static IITDescriptor get(IITDescriptorKind K, unsigned Field) {$/;"	f	struct:llvm::Intrinsic::IITDescriptor
get	MC/MCInstrInfo.h	/^  const MCInstrDesc &get(unsigned Opcode) const {$/;"	f	class:llvm::MCInstrInfo
get	MC/MCRegisterInfo.h	/^  const MCRegisterDesc &get(unsigned RegNo) const {$/;"	f	class:llvm::MCRegisterInfo
get	MC/MCValue.h	/^  static MCValue get(const MCSymbolRefExpr *SymA, const MCSymbolRefExpr *SymB=0,$/;"	f	class:llvm::MCValue
get	MC/MCValue.h	/^  static MCValue get(int64_t Val) {$/;"	f	class:llvm::MCValue
get	MC/SectionKind.h	/^  static SectionKind get(Kind K) {$/;"	f	class:llvm::SectionKind
get	Metadata.h	/^  static MDString *get(LLVMContext &Context, const char *Str) {$/;"	f	class:llvm::MDString
get	Support/CallSite.h	/^  static CallSiteBase get(ValTy *V) {$/;"	f	class:llvm::CallSiteBase
get	Support/SaveAndRestore.h	/^  T get() { return old_value; }$/;"	f	struct:llvm::SaveAndRestore
get	Support/ThreadLocal.h	/^      T* get() { return static_cast<T*>(getInstance()); }$/;"	f	class:llvm::sys::ThreadLocal
get	TableGen/Record.h	/^  static BitRecTy *get() { return &Shared; }$/;"	f	class:llvm::BitRecTy
get	TableGen/Record.h	/^  static DagRecTy *get() { return &Shared; }$/;"	f	class:llvm::DagRecTy
get	TableGen/Record.h	/^  static IntRecTy *get() { return &Shared; }$/;"	f	class:llvm::IntRecTy
get	TableGen/Record.h	/^  static ListRecTy *get(RecTy *T) { return T->getListTy(); }$/;"	f	class:llvm::ListRecTy
get	TableGen/Record.h	/^  static StringRecTy *get() { return &Shared; }$/;"	f	class:llvm::StringRecTy
get	TypeBuilder.h	/^  static ArrayType *get(LLVMContext &Context) {$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static FunctionType *get(LLVMContext &Context) {$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static IntegerType *get(LLVMContext &C) {$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static PointerType *get(LLVMContext &Context) {$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static Type *get(LLVMContext &C) {$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getDoubleTy(C); }$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getFP128Ty(C); }$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getFloatTy(C); }$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getPPC_FP128Ty(C); }$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getX86_FP80Ty(C); }$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static Type *get(LLVMContext& C) { return Type::getX86_MMXTy(C); }$/;"	f	class:llvm::TypeBuilder
get	TypeBuilder.h	/^  static Type *get(LLVMContext& C) {$/;"	f	class:llvm::TypeBuilder
get	Use.h	/^  Value *get() const { return Val; }$/;"	f	class:llvm::Use
getAPIntValue	CodeGen/SelectionDAGNodes.h	/^  const APInt &getAPIntValue() const { return Value->getValue(); }$/;"	f	class:llvm::ConstantSDNode
getAPIntValue	Support/IntegersSubset.h	/^  const APInt& getAPIntValue() const {$/;"	f	class:llvm::IntItem
getAbbrev	Bitcode/BitstreamReader.h	/^  const BitCodeAbbrev *getAbbrev(unsigned AbbrevID) {$/;"	f	class:llvm::BitstreamCursor
getAbstractScopesList	CodeGen/LexicalScopes.h	/^  ArrayRef<LexicalScope *> getAbstractScopesList() const {$/;"	f	class:llvm::LexicalScopes
getActiveBits	ADT/APInt.h	/^  unsigned getActiveBits() const {$/;"	f	class:llvm::APInt
getActiveWords	ADT/APInt.h	/^  unsigned getActiveWords() const {$/;"	f	class:llvm::APInt
getAddExpr	Analysis/ScalarEvolution.h	/^    const SCEV *getAddExpr(const SCEV *LHS, const SCEV *RHS,$/;"	f	class:llvm::ScalarEvolution
getAddExpr	Analysis/ScalarEvolution.h	/^    const SCEV *getAddExpr(const SCEV *Op0, const SCEV *Op1, const SCEV *Op2,$/;"	f	class:llvm::ScalarEvolution
getAddRecExpr	Analysis/ScalarEvolution.h	/^    const SCEV *getAddRecExpr(const SmallVectorImpl<const SCEV *> &Operands,$/;"	f	class:llvm::ScalarEvolution
getAdditionalInfo	Object/ObjectFile.h	/^inline error_code RelocationRef::getAdditionalInfo(int64_t &Result) const {$/;"	f	class:llvm::object::RelocationRef
getAddr	Analysis/PHITransAddr.h	/^  Value *getAddr() const { return Addr; }$/;"	f	class:llvm::PHITransAddr
getAddrDelta	MC/MCAssembler.h	/^  const MCExpr &getAddrDelta() const { return *AddrDelta; }$/;"	f	class:llvm::MCDwarfCallFrameFragment
getAddrDelta	MC/MCAssembler.h	/^  const MCExpr &getAddrDelta() const { return *AddrDelta; }$/;"	f	class:llvm::MCDwarfLineAddrFragment
getAddrElement	DebugInfo.h	/^    uint64_t getAddrElement(unsigned Idx) const {$/;"	f	class:llvm::DIVariable
getAddrOfPointer	ADT/PointerIntPair.h	/^  PointerTy *getAddrOfPointer() {$/;"	f	class:llvm::PointerIntPair
getAddrOfPointer	ADT/PointerIntPair.h	/^  PointerTy const *getAddrOfPointer() const {$/;"	f	class:llvm::PointerIntPair
getAddrOfPtr1	ADT/PointerUnion.h	/^    PT1 *getAddrOfPtr1() {$/;"	f	class:llvm::PointerUnionUIntTraits
getAddress	Analysis/MemoryDependenceAnalysis.h	/^    Value *getAddress() const { return Address; }$/;"	f	class:llvm::NonLocalDepResult
getAddress	CodeGen/MachORelocation.h	/^    uint32_t getAddress() const { return r_scattered ? r_value : r_address; }$/;"	f	class:llvm::MachORelocation
getAddress	Instructions.h	/^  Value *getAddress() { return getOperand(0); }$/;"	f	class:llvm::IndirectBrInst
getAddress	Instructions.h	/^  const Value *getAddress() const { return getOperand(0); }$/;"	f	class:llvm::IndirectBrInst
getAddress	Object/ObjectFile.h	/^inline error_code RelocationRef::getAddress(uint64_t &Result) const {$/;"	f	class:llvm::object::RelocationRef
getAddress	Object/ObjectFile.h	/^inline error_code SectionRef::getAddress(uint64_t &Result) const {$/;"	f	class:llvm::object::SectionRef
getAddress	Object/ObjectFile.h	/^inline error_code SymbolRef::getAddress(uint64_t &Result) const {$/;"	f	class:llvm::object::SymbolRef
getAddress	Support/DataExtractor.h	/^  uint64_t getAddress(uint32_t *offset_ptr) const {$/;"	f	class:llvm::DataExtractor
getAddressSize	Support/DataExtractor.h	/^  uint8_t getAddressSize() const { return PointerSize; }$/;"	f	class:llvm::DataExtractor
getAddressSpace	CodeGen/SelectionDAGNodes.h	/^  unsigned getAddressSpace() const {$/;"	f	class:llvm::MemSDNode
getAddressSpace	DerivedTypes.h	/^  inline unsigned getAddressSpace() const { return getSubclassData(); }$/;"	f	class:llvm::PointerType
getAddressSpace	Instructions.h	/^  unsigned getAddressSpace() const {$/;"	f	class:llvm::IntToPtrInst
getAddressingMode	CodeGen/SelectionDAGNodes.h	/^  ISD::MemIndexedMode getAddressingMode() const {$/;"	f	class:llvm::LSBaseSDNode
getAdjustedAnalysisPointer	Analysis/LibCallAliasAnalysis.h	/^    virtual void *getAdjustedAnalysisPointer(const void *PI) {$/;"	f	struct:llvm::LibCallAliasAnalysis
getAggregateOperand	Instructions.h	/^  Value *getAggregateOperand() {$/;"	f	class:llvm::ExtractValueInst
getAggregateOperand	Instructions.h	/^  Value *getAggregateOperand() {$/;"	f	class:llvm::InsertValueInst
getAggregateOperand	Instructions.h	/^  const Value *getAggregateOperand() const {$/;"	f	class:llvm::ExtractValueInst
getAggregateOperand	Instructions.h	/^  const Value *getAggregateOperand() const {$/;"	f	class:llvm::InsertValueInst
getAggregateOperandIndex	Instructions.h	/^  static unsigned getAggregateOperandIndex() {$/;"	f	class:llvm::ExtractValueInst
getAggregateOperandIndex	Instructions.h	/^  static unsigned getAggregateOperandIndex() {$/;"	f	class:llvm::InsertValueInst
getAliasAnalysis	Analysis/AliasSetTracker.h	/^  AliasAnalysis &getAliasAnalysis() const { return AA; }$/;"	f	class:llvm::AliasSetTracker
getAliasAnalysis	CodeGen/LiveIntervalAnalysis.h	/^    AliasAnalysis *getAliasAnalysis() const {$/;"	f	class:llvm::LiveIntervals
getAliasList	Module.h	/^  AliasListType          &getAliasList()              { return AliasList; }$/;"	f	class:llvm::Module
getAliasList	Module.h	/^  const AliasListType    &getAliasList() const        { return AliasList; }$/;"	f	class:llvm::Module
getAliasSet	Analysis/AliasSetTracker.h	/^    AliasSet *getAliasSet(AliasSetTracker &AST) {$/;"	f	class:llvm::AliasSet::PointerRec
getAliasSetForPointerIfExists	Analysis/AliasSetTracker.h	/^  AliasSet *getAliasSetForPointerIfExists(Value *P, uint64_t Size,$/;"	f	class:llvm::AliasSetTracker
getAliasSets	Analysis/AliasSetTracker.h	/^  const ilist<AliasSet> &getAliasSets() const { return AliasSets; }$/;"	f	class:llvm::AliasSetTracker
getAliasee	GlobalAlias.h	/^  Constant *getAliasee() {$/;"	f	class:llvm::GlobalAlias
getAliasee	GlobalAlias.h	/^  const Constant *getAliasee() const {$/;"	f	class:llvm::GlobalAlias
getAlignDirective	MC/MCAsmInfo.h	/^    const char *getAlignDirective() const {$/;"	f	class:llvm::MCAsmInfo
getAlignInBits	DebugInfo.h	/^    uint64_t getAlignInBits() const     { return getUInt64Field(6); }$/;"	f	class:llvm::DIType
getAlignment	CodeGen/MachineBasicBlock.h	/^  unsigned getAlignment() const { return Alignment; }$/;"	f	class:llvm::MachineBasicBlock
getAlignment	CodeGen/MachineConstantPool.h	/^  int getAlignment() const { $/;"	f	class:llvm::MachineConstantPoolEntry
getAlignment	CodeGen/MachineFunction.h	/^  unsigned getAlignment() const { return Alignment; }$/;"	f	class:llvm::MachineFunction
getAlignment	CodeGen/SelectionDAGNodes.h	/^  unsigned getAlignment() const { return Alignment; }$/;"	f	class:llvm::ConstantPoolSDNode
getAlignment	CodeGen/SelectionDAGNodes.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::MemSDNode
getAlignment	DataLayout.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::StructLayout
getAlignment	GlobalValue.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::GlobalValue
getAlignment	Instructions.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::AllocaInst
getAlignment	Instructions.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::LoadInst
getAlignment	Instructions.h	/^  unsigned getAlignment() const {$/;"	f	class:llvm::StoreInst
getAlignment	IntrinsicInst.h	/^    unsigned getAlignment() const {$/;"	f	class:llvm::MemIntrinsic
getAlignment	MC/MCAssembler.h	/^  unsigned getAlignment() const { return Alignment; }$/;"	f	class:llvm::MCAlignFragment
getAlignment	MC/MCAssembler.h	/^  unsigned getAlignment() const { return Alignment; }$/;"	f	class:llvm::MCSectionData
getAlignment	MC/MCRegisterInfo.h	/^  unsigned getAlignment() const { return Alignment; }$/;"	f	class:llvm::MCRegisterClass
getAlignment	Object/ObjectFile.h	/^inline error_code SectionRef::getAlignment(uint64_t &Result) const {$/;"	f	class:llvm::object::SectionRef
getAlignment	Target/TargetRegisterInfo.h	/^  unsigned getAlignment() const { return MC->getAlignment(); }$/;"	f	class:llvm::TargetRegisterClass
getAlignmentCst	IntrinsicInst.h	/^    ConstantInt *getAlignmentCst() const {$/;"	f	class:llvm::MemIntrinsic
getAlignmentIsInBytes	MC/MCAsmInfo.h	/^    bool getAlignmentIsInBytes() const {$/;"	f	class:llvm::MCAsmInfo
getAlignmentType	IntrinsicInst.h	/^    Type *getAlignmentType() const {$/;"	f	class:llvm::MemIntrinsic
getAllMetadata	Instruction.h	/^  void getAllMetadata(SmallVectorImpl<std::pair<unsigned, MDNode*> > &MDs)const{$/;"	f	class:llvm::Instruction
getAllMetadataOtherThanDebugLoc	Instruction.h	/^  void getAllMetadataOtherThanDebugLoc(SmallVectorImpl<std::pair<unsigned,$/;"	f	class:llvm::Instruction
getAllOnesValue	ADT/APInt.h	/^  static APInt getAllOnesValue(unsigned numBits) {$/;"	f	class:llvm::APInt
getAllocator	ADT/ImmutableList.h	/^  BumpPtrAllocator& getAllocator() const {$/;"	f	class:llvm::ImmutableListFactory
getAllocator	ADT/ImmutableSet.h	/^    BumpPtrAllocator& getAllocator() { return F.getAllocator(); }$/;"	f	class:llvm::ImmutableSet::Factory
getAllocator	ADT/ImmutableSet.h	/^  BumpPtrAllocator& getAllocator() const {$/;"	f	class:llvm::ImutAVLFactory
getAllocator	ADT/ScopedHashTable.h	/^  AllocatorCRefTy getAllocator() const { return Allocator; }$/;"	f	class:llvm::ScopedHashTable
getAllocator	ADT/ScopedHashTable.h	/^  AllocatorRefTy getAllocator() { return Allocator; }$/;"	f	class:llvm::ScopedHashTable
getAllocator	ADT/StringMap.h	/^  AllocatorCRefTy getAllocator() const { return Allocator; }$/;"	f	class:llvm::StringMap
getAllocator	ADT/StringMap.h	/^  AllocatorRefTy getAllocator() { return Allocator; }$/;"	f	class:llvm::StringMap
getAlways	Analysis/InlineCost.h	/^    static InlineCost getAlways() {$/;"	f	class:llvm::InlineCost
getAnalysis	PassAnalysisSupport.h	/^AnalysisType &Pass::getAnalysis() const {$/;"	f	class:llvm::Pass
getAnalysis	PassAnalysisSupport.h	/^AnalysisType &Pass::getAnalysis(Function &F) {$/;"	f	class:llvm::Pass
getAnalysisID	PassAnalysisSupport.h	/^AnalysisType &Pass::getAnalysisID(AnalysisID PI) const {$/;"	f	class:llvm::Pass
getAnalysisID	PassAnalysisSupport.h	/^AnalysisType &Pass::getAnalysisID(AnalysisID PI, Function &F) {$/;"	f	class:llvm::Pass
getAnalysisIfAvailable	PassAnalysisSupport.h	/^AnalysisType *Pass::getAnalysisIfAvailable() const {$/;"	f	class:llvm::Pass
getAnalysisUsage	Analysis/DOTGraphTraitsPass.h	/^  virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	struct:llvm::DOTGraphTraitsPrinter
getAnalysisUsage	Analysis/DOTGraphTraitsPass.h	/^  virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	struct:llvm::DOTGraphTraitsViewer
getAnalysisUsage	Analysis/DominanceFrontier.h	/^  virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:llvm::DominanceFrontier
getAnalysisUsage	Analysis/Dominators.h	/^  virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:llvm::DominatorTree
getAnalysisUsage	Analysis/FindUsedTypes.h	/^  virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:llvm::FindUsedTypes
getAnalysisUsage	Analysis/IntervalPartition.h	/^  virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:llvm::IntervalPartition
getAnalysisUsage	Analysis/PostDominators.h	/^  virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	struct:llvm::PostDominatorTree
getAnalysisUsage	CodeGen/MachineBranchProbabilityInfo.h	/^  void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:llvm::MachineBranchProbabilityInfo
getAnalysisUsage	PassManagers.h	/^  void getAnalysisUsage(AnalysisUsage &Info) const {$/;"	f	class:llvm::FPPassManager
getAnchor	Support/YAMLParser.h	/^  StringRef getAnchor() const { return Anchor; }$/;"	f	class:llvm::yaml::Node
getAnon	Constants.h	/^  static Constant *getAnon(ArrayRef<Constant*> V, bool Packed = false) {$/;"	f	class:llvm::ConstantStruct
getAnon	Constants.h	/^  static Constant *getAnon(LLVMContext &Ctx, $/;"	f	class:llvm::ConstantStruct
getArch	ADT/Triple.h	/^  ArchType getArch() const { return Arch; }$/;"	f	class:llvm::Triple
getArch	Object/ELF.h	/^unsigned ELFObjectFile<target_endianness, is64Bits>::getArch() const {$/;"	f	class:llvm::object::ELFObjectFile
getArchive	Bitcode/Archive.h	/^    Archive* getArchive() const          { return parent; }$/;"	f	class:llvm::ArchiveMember
getArea	CodeGen/MachineLoopRanges.h	/^  unsigned getArea() const { return Area; }$/;"	f	class:llvm::MachineLoopRange
getArg	TableGen/Record.h	/^  Init *getArg(unsigned Num) const {$/;"	f	class:llvm::DagInit
getArgName	TableGen/Record.h	/^  const std::string &getArgName(unsigned Num) const {$/;"	f	class:llvm::DagInit
getArgNumber	DebugInfo.h	/^    unsigned getArgNumber() const       {$/;"	f	class:llvm::DIVariable
getArgOperand	Instructions.h	/^  Value *getArgOperand(unsigned i) const { return getOperand(i); }$/;"	f	class:llvm::CallInst
getArgOperand	Instructions.h	/^  Value *getArgOperand(unsigned i) const { return getOperand(i); }$/;"	f	class:llvm::InvokeInst
getArgument	Support/CallSite.h	/^  ValTy *getArgument(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
getArgumentEndOffset	Support/CallSite.h	/^  unsigned getArgumentEndOffset() const {$/;"	f	class:llvm::CallSiteBase
getArgumentKind	Intrinsics.h	/^    ArgKind getArgumentKind() const {$/;"	f	struct:llvm::Intrinsic::IITDescriptor
getArgumentList	Function.h	/^  ArgumentListType &getArgumentList() {$/;"	f	class:llvm::Function
getArgumentList	Function.h	/^  const ArgumentListType &getArgumentList() const {$/;"	f	class:llvm::Function
getArgumentNo	Support/CallSite.h	/^  unsigned getArgumentNo(value_use_iterator<UserTy> I) const {$/;"	f	class:llvm::CallSiteBase
getArgumentNumber	Intrinsics.h	/^    unsigned getArgumentNumber() const {$/;"	f	struct:llvm::Intrinsic::IITDescriptor
getArrayElementType	Type.h	/^  Type *getArrayElementType() const { return getSequentialElementType(); }$/;"	f	class:llvm::Type
getArraySize	Instructions.h	/^  Value *getArraySize() { return getOperand(0); }$/;"	f	class:llvm::AllocaInst
getArraySize	Instructions.h	/^  const Value *getArraySize() const { return getOperand(0); }$/;"	f	class:llvm::AllocaInst
getAsCString	Constants.h	/^  StringRef getAsCString() const {$/;"	f	class:llvm::ConstantDataSequential
getAsImmutablePass	Pass.h	/^  virtual ImmutablePass *getAsImmutablePass() { return this; }$/;"	f	class:llvm::ImmutablePass
getAsInteger	ADT/StringRef.h	/^    getAsInteger(unsigned Radix, T &Result) const {$/;"	f	class:llvm::StringRef
getAsPMDataManager	Analysis/LoopPass.h	/^  virtual PMDataManager *getAsPMDataManager() { return this; }$/;"	f	class:llvm::LPPassManager
getAsPMDataManager	Analysis/RegionPass.h	/^  virtual PMDataManager *getAsPMDataManager() { return this; }$/;"	f	class:llvm::RGPassManager
getAsPMDataManager	PassManagers.h	/^  virtual PMDataManager *getAsPMDataManager() { return this; }$/;"	f	class:llvm::FPPassManager
getAsPass	Analysis/LoopPass.h	/^  virtual Pass *getAsPass() { return this; }$/;"	f	class:llvm::LPPassManager
getAsPass	Analysis/RegionPass.h	/^  virtual Pass *getAsPass() { return this; }$/;"	f	class:llvm::RGPassManager
getAsPass	PassManagers.h	/^  virtual Pass *getAsPass() { return this; }$/;"	f	class:llvm::FPPassManager
getAsString	Constants.h	/^  StringRef getAsString() const {$/;"	f	class:llvm::ConstantDataSequential
getAsString	TableGen/Record.h	/^  virtual std::string getAsString() const { return "?"; }$/;"	f	class:llvm::UnsetInit
getAsString	TableGen/Record.h	/^  virtual std::string getAsString() const { return "\\"" + Value + "\\""; }$/;"	f	class:llvm::StringInit
getAsString	TableGen/Record.h	/^  virtual std::string getAsString() const { return "bit"; }$/;"	f	class:llvm::BitRecTy
getAsString	TableGen/Record.h	/^  virtual std::string getAsString() const { return "dag"; }$/;"	f	class:llvm::DagRecTy
getAsString	TableGen/Record.h	/^  virtual std::string getAsString() const { return "int"; }$/;"	f	class:llvm::IntRecTy
getAsString	TableGen/Record.h	/^  virtual std::string getAsString() const { return "string"; }$/;"	f	class:llvm::StringRecTy
getAsString	TableGen/Record.h	/^  virtual std::string getAsString() const { return Value ? "1" : "0"; }$/;"	f	class:llvm::BitInit
getAsString	TableGen/Record.h	/^  virtual std::string getAsString() const { return getName(); }$/;"	f	class:llvm::VarInit
getAsString	TableGen/Record.h	/^  virtual std::string getAsString() const {$/;"	f	class:llvm::FieldInit
getAsUnquotedString	TableGen/Record.h	/^  virtual std::string getAsUnquotedString() const { return Value; }$/;"	f	class:llvm::StringInit
getAsUnquotedString	TableGen/Record.h	/^  virtual std::string getAsUnquotedString() const { return getAsString(); }$/;"	f	class:llvm::Init
getAsVoidPointer	ADT/IntervalMap.h	/^    static inline void *getAsVoidPointer(void *P) { return P; }$/;"	f	struct:llvm::IntervalMapImpl::NodeRef::CacheAlignedPointerTraits
getAsVoidPointer	ADT/PointerIntPair.h	/^  getAsVoidPointer(const PointerIntPair<PointerTy, IntBits, IntType> &P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	ADT/PointerUnion.h	/^    getAsVoidPointer(const PointerUnion3<PT1, PT2, PT3> &P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	ADT/PointerUnion.h	/^    getAsVoidPointer(const PointerUnion4<PT1, PT2, PT3, PT4> &P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	ADT/PointerUnion.h	/^    getAsVoidPointer(const PointerUnion<PT1, PT2> &P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	ADT/PointerUnion.h	/^    static inline void *getAsVoidPointer(void *P) { return P; }$/;"	f	class:llvm::PointerUnionUIntTraits
getAsVoidPointer	Instruction.h	/^  static inline void *getAsVoidPointer(PT P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	Support/PointerLikeTypeTraits.h	/^  static inline const void *getAsVoidPointer(const T* P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	Support/PointerLikeTypeTraits.h	/^  static inline void *getAsVoidPointer(T* P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	Support/PointerLikeTypeTraits.h	/^  static inline void *getAsVoidPointer(uintptr_t P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	Support/ValueHandle.h	/^  static inline void *getAsVoidPointer(ValueHandleBase** P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	Use.h	/^  static inline void *getAsVoidPointer(Use** P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	Value.h	/^  static inline void *getAsVoidPointer(PT P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsciiDirective	MC/MCAsmInfo.h	/^    const char *getAsciiDirective() const {$/;"	f	class:llvm::MCAsmInfo
getAscizDirective	MC/MCAsmInfo.h	/^    const char *getAscizDirective() const {$/;"	f	class:llvm::MCAsmInfo
getAsmInfo	MC/MCContext.h	/^    const MCAsmInfo &getAsmInfo() const { return MAI; }$/;"	f	class:llvm::MCContext
getAsmPrinterFlag	CodeGen/MachineInstr.h	/^  bool getAsmPrinterFlag(CommentFlag Flag) const {$/;"	f	class:llvm::MachineInstr
getAsmPrinterFlags	CodeGen/MachineInstr.h	/^  uint8_t getAsmPrinterFlags() const { return AsmPrinterFlags; }$/;"	f	class:llvm::MachineInstr
getAsmString	InlineAsm.h	/^  const std::string &getAsmString() const { return AsmString; }$/;"	f	class:llvm::InlineAsm
getAssembler	MC/MCAsmLayout.h	/^  MCAssembler &getAssembler() const { return Assembler; }$/;"	f	class:llvm::MCAsmLayout
getAssembler	MC/MCObjectStreamer.h	/^  MCAssembler &getAssembler() { return *Assembler; }$/;"	f	class:llvm::MCObjectStreamer
getAssemblerDialect	MC/MCAsmInfo.h	/^    unsigned getAssemblerDialect() const {$/;"	f	class:llvm::MCAsmInfo
getAssemblerDialect	MC/MCParser/MCAsmParser.h	/^  virtual unsigned getAssemblerDialect() { return 0;}$/;"	f	class:llvm::MCAsmParser
getAtom	MC/MCAssembler.h	/^  MCSymbolData *getAtom() const { return Atom; }$/;"	f	class:llvm::MCFragment
getAttributes	Function.h	/^  const AttrListPtr &getAttributes() const { return AttributeList; }$/;"	f	class:llvm::Function
getAttributes	Instructions.h	/^  const AttrListPtr &getAttributes() const { return AttributeList; }$/;"	f	class:llvm::CallInst
getAttributes	Instructions.h	/^  const AttrListPtr &getAttributes() const { return AttributeList; }$/;"	f	class:llvm::InvokeInst
getAttributes	Support/CallSite.h	/^  const AttrListPtr &getAttributes() const {$/;"	f	class:llvm::CallSiteBase
getAux	Object/ELF.h	/^  const Elf_Verdaux *getAux() const {$/;"	f	struct:llvm::object::Elf_Verdef_Impl
getAuxSymbol	Object/COFF.h	/^  error_code getAuxSymbol(uint32_t index, const T *&Res) const {$/;"	f	class:llvm::object::COFFObjectFile
getAvailableAnalysis	PassManagers.h	/^  std::map<AnalysisID, Pass*> *getAvailableAnalysis() {$/;"	f	class:llvm::PMDataManager
getAvailableFeatures	MC/MCInstPrinter.h	/^  unsigned getAvailableFeatures() const { return AvailableFeatures; }$/;"	f	class:llvm::MCInstPrinter
getAvailableFeatures	MC/MCTargetAsmParser.h	/^  unsigned getAvailableFeatures() const { return AvailableFeatures; }$/;"	f	class:llvm::MCTargetAsmParser
getBB	Analysis/MemoryDependenceAnalysis.h	/^    BasicBlock *getBB() const { return BB; }$/;"	f	class:llvm::NonLocalDepEntry
getBB	Analysis/MemoryDependenceAnalysis.h	/^    BasicBlock *getBB() const { return Entry.getBB(); }$/;"	f	class:llvm::NonLocalDepResult
getBB	CodeGen/MachineRelocation.h	/^  static MachineRelocation getBB(uintptr_t offset,unsigned RelocationType,$/;"	f	class:llvm::MachineRelocation
getBSS	MC/SectionKind.h	/^  static SectionKind getBSS() { return get(BSS); }$/;"	f	class:llvm::SectionKind
getBSSExtern	MC/SectionKind.h	/^  static SectionKind getBSSExtern() { return get(BSSExtern); }$/;"	f	class:llvm::SectionKind
getBSSLocal	MC/SectionKind.h	/^  static SectionKind getBSSLocal() { return get(BSSLocal); }$/;"	f	class:llvm::SectionKind
getBSSSection	MC/MCObjectFileInfo.h	/^  const MCSection *getBSSSection() const { return BSSSection; }$/;"	f	class:llvm::MCObjectFileInfo
getBackend	MC/MCAssembler.h	/^  MCAsmBackend &getBackend() const { return Backend; }$/;"	f	class:llvm::MCAssembler
getBase	Analysis/Dominators.h	/^  DominatorTreeBase<BasicBlock>& getBase() { return *DT; }$/;"	f	class:llvm::DominatorTree
getBase	Analysis/LoopInfo.h	/^  LoopInfoBase<BasicBlock, Loop>& getBase() { return LI; }$/;"	f	class:llvm::LoopInfo
getBase	CodeGen/MachineDominators.h	/^  DominatorTreeBase<MachineBasicBlock>& getBase() { return *DT; }$/;"	f	class:llvm::MachineDominatorTree
getBase	CodeGen/MachineLoopInfo.h	/^  LoopInfoBase<MachineBasicBlock, MachineLoop>& getBase() { return LI; }$/;"	f	class:llvm::MachineLoopInfo
getBaseAlignment	CodeGen/MachineMemOperand.h	/^  uint64_t getBaseAlignment() const { return (1u << (Flags >> MOMaxBits)) >> 1; }$/;"	f	class:llvm::MachineMemOperand
getBaseIndex	CodeGen/SlotIndexes.h	/^    SlotIndex getBaseIndex() const {$/;"	f	class:llvm::SlotIndex
getBasePtr	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getBasePtr() const { return getOperand(1); }$/;"	f	class:llvm::AtomicSDNode
getBasePtr	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getBasePtr() const { return getOperand(1); }$/;"	f	class:llvm::LoadSDNode
getBasePtr	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getBasePtr() const { return getOperand(2); }$/;"	f	class:llvm::StoreSDNode
getBasePtr	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getBasePtr() const {$/;"	f	class:llvm::MemSDNode
getBaseType	Object/COFF.h	/^  uint8_t getBaseType() const {$/;"	f	struct:llvm::object::coff_symbol
getBasicBlock	CodeGen/MachineBasicBlock.h	/^  const BasicBlock *getBasicBlock() const { return BB; }$/;"	f	class:llvm::MachineBasicBlock
getBasicBlock	CodeGen/MachineRelocation.h	/^  MachineBasicBlock *getBasicBlock() const {$/;"	f	class:llvm::MachineRelocation
getBasicBlock	CodeGen/SelectionDAGNodes.h	/^  MachineBasicBlock *getBasicBlock() const { return MBB; }$/;"	f	class:llvm::BasicBlockSDNode
getBasicBlock	Constants.h	/^  BasicBlock *getBasicBlock() const { return (BasicBlock*)Op<1>().get(); }$/;"	f	class:llvm::BlockAddress
getBasicBlockIndex	Instructions.h	/^  int getBasicBlockIndex(const BasicBlock *BB) const {$/;"	f	class:llvm::PHINode
getBasicBlockIterator	Support/InstIterator.h	/^  inline BBIty &getBasicBlockIterator()  { return BB; }$/;"	f	class:llvm::InstIterator
getBasicBlockList	Function.h	/^        BasicBlockListType &getBasicBlockList()       { return BasicBlocks; }$/;"	f	class:llvm::Function
getBasicBlockList	Function.h	/^  const BasicBlockListType &getBasicBlockList() const { return BasicBlocks; }$/;"	f	class:llvm::Function
getBinding	Object/ELF.h	/^  unsigned char getBinding() const { return st_info >> 4; }$/;"	f	struct:llvm::object::Elf_Sym_Impl
getBinding	Support/ELF.h	/^  unsigned char getBinding() const { return st_info >> 4; }$/;"	f	struct:llvm::ELF::Elf32_Sym
getBinding	Support/ELF.h	/^  unsigned char getBinding() const { return st_info >> 4; }$/;"	f	struct:llvm::ELF::Elf64_Sym
getBit	TableGen/Record.h	/^  virtual Init *getBit(unsigned B) const {$/;"	f	class:llvm::VarBitInit
getBit	TableGen/Record.h	/^  virtual Init *getBit(unsigned Bit) const {$/;"	f	class:llvm::BitInit
getBit	TableGen/Record.h	/^  virtual Init *getBit(unsigned Bit) const {$/;"	f	class:llvm::BitsInit
getBit	TableGen/Record.h	/^  virtual Init *getBit(unsigned Bit) const {$/;"	f	class:llvm::DagInit
getBit	TableGen/Record.h	/^  virtual Init *getBit(unsigned Bit) const {$/;"	f	class:llvm::DefInit
getBit	TableGen/Record.h	/^  virtual Init *getBit(unsigned Bit) const {$/;"	f	class:llvm::IntInit
getBit	TableGen/Record.h	/^  virtual Init *getBit(unsigned Bit) const {$/;"	f	class:llvm::ListInit
getBit	TableGen/Record.h	/^  virtual Init *getBit(unsigned Bit) const {$/;"	f	class:llvm::StringInit
getBit	TableGen/Record.h	/^  virtual Init *getBit(unsigned Bit) const {$/;"	f	class:llvm::UnsetInit
getBitMask	DerivedTypes.h	/^  uint64_t getBitMask() const {$/;"	f	class:llvm::IntegerType
getBitNum	TableGen/Record.h	/^  virtual unsigned getBitNum() const { return 0; }$/;"	f	class:llvm::Init
getBitNum	TableGen/Record.h	/^  virtual unsigned getBitNum() const { return Bit; }$/;"	f	class:llvm::VarBitInit
getBitStreamReader	Bitcode/BitstreamReader.h	/^  BitstreamReader *getBitStreamReader() {$/;"	f	class:llvm::BitstreamCursor
getBitStreamReader	Bitcode/BitstreamReader.h	/^  const BitstreamReader *getBitStreamReader() const {$/;"	f	class:llvm::BitstreamCursor
getBitVar	TableGen/Record.h	/^  virtual Init *getBitVar() const { return TI; }$/;"	f	class:llvm::VarBitInit
getBitVar	TableGen/Record.h	/^  virtual Init *getBitVar() const { return const_cast<Init*>(this); }$/;"	f	class:llvm::Init
getBitWidth	ADT/APInt.h	/^  unsigned getBitWidth() const {$/;"	f	class:llvm::APInt
getBitWidth	Constants.h	/^  unsigned getBitWidth() const { return Val.getBitWidth(); }$/;"	f	class:llvm::ConstantInt
getBitWidth	DerivedTypes.h	/^  unsigned getBitWidth() const { return getSubclassData(); }$/;"	f	class:llvm::IntegerType
getBitWidth	DerivedTypes.h	/^  unsigned getBitWidth() const {$/;"	f	class:llvm::VectorType
getBitWidth	Support/ConstantRange.h	/^  uint32_t getBitWidth() const { return Lower.getBitWidth(); }$/;"	f	class:llvm::ConstantRange
getBitcodeBytes	Bitcode/BitstreamReader.h	/^  StreamableMemoryObject &getBitcodeBytes() { return *BitcodeBytes; }$/;"	f	class:llvm::BitstreamReader
getBits	Support/CommandLine.h	/^  unsigned getBits() { return *Location; }$/;"	f	class:llvm::cl::bits_storage
getBits	Support/CommandLine.h	/^  unsigned getBits() { return Bits; }$/;"	f	class:llvm::cl::bits_storage
getBitsSet	ADT/APInt.h	/^  static APInt getBitsSet(unsigned numBits, unsigned loBit, unsigned hiBit) {$/;"	f	class:llvm::APInt
getBlock	Analysis/Dominators.h	/^  NodeT *getBlock() const { return TheBB; }$/;"	f	class:llvm::DomTreeNodeBase
getBlock	Analysis/Trace.h	/^  BasicBlock *getBlock(unsigned i)   const { return BasicBlocks[i]; }$/;"	f	class:llvm::Trace
getBlock	IRBuilder.h	/^    llvm::BasicBlock *getBlock() const { return Block; }$/;"	f	class:llvm::IRBuilderBase::InsertPoint
getBlockAddress	CodeGen/MachineOperand.h	/^  const BlockAddress *getBlockAddress() const {$/;"	f	class:llvm::MachineOperand
getBlockAddress	CodeGen/SelectionDAGNodes.h	/^  const BlockAddress *getBlockAddress() const { return BA; }$/;"	f	class:llvm::BlockAddressSDNode
getBlockFreq	Analysis/BlockFrequencyImpl.h	/^  BlockFrequency getBlockFreq(const BlockT *BB) const {$/;"	f	class:llvm::BlockFrequencyImpl
getBlockIndex	Analysis/Trace.h	/^  int getBlockIndex(const BasicBlock *X) const {$/;"	f	class:llvm::Trace
getBlockInfo	Bitcode/BitstreamReader.h	/^  const BlockInfo *getBlockInfo(unsigned BlockID) const {$/;"	f	class:llvm::BitstreamReader
getBlockInfo	Bitcode/BitstreamWriter.h	/^  BlockInfo *getBlockInfo(unsigned BlockID) {$/;"	f	class:llvm::BitstreamWriter
getBlockInterval	Analysis/IntervalPartition.h	/^  inline Interval *getBlockInterval(BasicBlock *BB) {$/;"	f	class:llvm::IntervalPartition
getBlockName	Analysis/BlockFrequencyImpl.h	/^  std::string getBlockName(BasicBlock *BB) const {$/;"	f	class:llvm::BlockFrequencyImpl
getBlockName	Analysis/BlockFrequencyImpl.h	/^  std::string getBlockName(MachineBasicBlock *MBB) const {$/;"	f	class:llvm::BlockFrequencyImpl
getBlockNumbered	CodeGen/MachineFunction.h	/^  MachineBasicBlock *getBlockNumbered(unsigned N) const {$/;"	f	class:llvm::MachineFunction
getBlocks	Analysis/LoopInfo.h	/^  const std::vector<BlockT*> &getBlocks() const { return Blocks; }$/;"	f	class:llvm::LoopBase
getBlocks	CodeGen/EdgeBundles.h	/^  ArrayRef<unsigned> getBlocks(unsigned Bundle) const { return Blocks[Bundle]; }$/;"	f	class:llvm::EdgeBundles
getBlocksVector	Analysis/LoopInfo.h	/^  std::vector<BlockT*> &getBlocksVector() { return Blocks; }$/;"	f	class:llvm::LoopBase
getBoolValue	ADT/APInt.h	/^  bool getBoolValue() const {$/;"	f	class:llvm::APInt
getBooleanContents	Target/TargetLowering.h	/^  BooleanContent getBooleanContents(bool isVec) const {$/;"	f	class:llvm::TargetLowering
getBotPressure	CodeGen/MachineScheduler.h	/^  const IntervalPressure &getBotPressure() const { return BotPressure; }$/;"	f	class:llvm::ScheduleDAGMI
getBotRPTracker	CodeGen/MachineScheduler.h	/^  const RegPressureTracker &getBotRPTracker() const { return BotRPTracker; }$/;"	f	class:llvm::ScheduleDAGMI
getBoundaryIndex	CodeGen/SlotIndexes.h	/^    SlotIndex getBoundaryIndex() const {$/;"	f	class:llvm::SlotIndex
getBuckets	ADT/DenseMap.h	/^  BucketT *getBuckets() const {$/;"	f	class:llvm::DenseMap
getBuckets	ADT/DenseMap.h	/^  BucketT *getBuckets() {$/;"	f	class:llvm::DenseMapBase
getBuckets	ADT/DenseMap.h	/^  BucketT *getBuckets() {$/;"	f	class:llvm::SmallDenseMap
getBuckets	ADT/DenseMap.h	/^  const BucketT *getBuckets() const {$/;"	f	class:llvm::DenseMapBase
getBuckets	ADT/DenseMap.h	/^  const BucketT *getBuckets() const {$/;"	f	class:llvm::SmallDenseMap
getBucketsEnd	ADT/DenseMap.h	/^  BucketT *getBucketsEnd() {$/;"	f	class:llvm::DenseMapBase
getBucketsEnd	ADT/DenseMap.h	/^  const BucketT *getBucketsEnd() const {$/;"	f	class:llvm::DenseMapBase
getBuffer	Support/MemoryBuffer.h	/^  StringRef getBuffer() const {$/;"	f	class:llvm::MemoryBuffer
getBufferEnd	Support/FileOutputBuffer.h	/^  uint8_t *getBufferEnd() const {$/;"	f	class:llvm::FileOutputBuffer
getBufferEnd	Support/MemoryBuffer.h	/^  const char *getBufferEnd() const   { return BufferEnd; }$/;"	f	class:llvm::MemoryBuffer
getBufferIdentifier	Support/MemoryBuffer.h	/^  virtual const char *getBufferIdentifier() const {$/;"	f	class:llvm::MemoryBuffer
getBufferInfo	Support/SourceMgr.h	/^  const SrcBuffer &getBufferInfo(unsigned i) const {$/;"	f	class:llvm::SourceMgr
getBufferSize	ExecutionEngine/ObjectBuffer.h	/^  size_t getBufferSize() const { return Buffer->getBufferSize(); }$/;"	f	class:llvm::ObjectBuffer
getBufferSize	Support/FileOutputBuffer.h	/^  size_t getBufferSize() const {$/;"	f	class:llvm::FileOutputBuffer
getBufferSize	Support/MemoryBuffer.h	/^  size_t getBufferSize() const { return BufferEnd-BufferStart; }$/;"	f	class:llvm::MemoryBuffer
getBufferStart	ExecutionEngine/ObjectBuffer.h	/^  const char *getBufferStart() const { return Buffer->getBufferStart(); }$/;"	f	class:llvm::ObjectBuffer
getBufferStart	Support/FileOutputBuffer.h	/^  uint8_t *getBufferStart() const {$/;"	f	class:llvm::FileOutputBuffer
getBufferStart	Support/MemoryBuffer.h	/^  const char *getBufferStart() const { return BufferStart; }$/;"	f	class:llvm::MemoryBuffer
getBufferStart	Support/raw_ostream.h	/^  const char *getBufferStart() const { return OutBufStart; }$/;"	f	class:llvm::raw_ostream
getBundle	CodeGen/EdgeBundles.h	/^  unsigned getBundle(unsigned N, bool Out) const { return EC[2 * N + Out]; }$/;"	f	class:llvm::EdgeBundles
getBundleStart	CodeGen/MachineInstrBundle.h	/^inline MachineInstr *getBundleStart(MachineInstr *MI) {$/;"	f	namespace:llvm
getBundleStart	CodeGen/MachineInstrBundle.h	/^inline const MachineInstr *getBundleStart(const MachineInstr *MI) {$/;"	f	namespace:llvm
getByValAlign	Target/TargetCallingConv.h	/^    unsigned getByValAlign() const {$/;"	f	struct:llvm::ISD::ArgFlagsTy
getByValSize	Target/TargetCallingConv.h	/^    unsigned getByValSize() const {$/;"	f	struct:llvm::ISD::ArgFlagsTy
getBypassSlowDivWidths	Target/TargetLowering.h	/^  const DenseMap<unsigned int, unsigned int> &getBypassSlowDivWidths() const {$/;"	f	class:llvm::TargetLowering
getByte	Bitcode/BitstreamReader.h	/^  unsigned char getByte(size_t pos) {$/;"	f	class:llvm::BitstreamCursor
getBytesInAddress	Object/ELF.h	/^uint8_t ELFObjectFile<target_endianness, is64Bits>::getBytesInAddress() const {$/;"	f	class:llvm::object::ELFObjectFile
getCALLSEQ_END	CodeGen/SelectionDAG.h	/^  SDValue getCALLSEQ_END(SDValue Chain, SDValue Op1, SDValue Op2,$/;"	f	class:llvm::SelectionDAG
getCALLSEQ_START	CodeGen/SelectionDAG.h	/^  SDValue getCALLSEQ_START(SDValue Chain, SDValue Op) {$/;"	f	class:llvm::SelectionDAG
getCImm	CodeGen/MachineOperand.h	/^  const ConstantInt *getCImm() const {$/;"	f	class:llvm::MachineOperand
getCOFFSection	MC/MCContext.h	/^    const MCSection *getCOFFSection(StringRef Section, unsigned Characteristics,$/;"	f	class:llvm::MCContext
getCOMMDirectiveAlignmentIsInBytes	MC/MCAsmInfo.h	/^    bool getCOMMDirectiveAlignmentIsInBytes() const {$/;"	f	class:llvm::MCAsmInfo
getCPUSubtype	MC/MCMachObjectWriter.h	/^  uint32_t getCPUSubtype() const { return CPUSubtype; }$/;"	f	class:llvm::MCMachObjectTargetWriter
getCPUType	MC/MCMachObjectWriter.h	/^  uint32_t getCPUType() const { return CPUType; }$/;"	f	class:llvm::MCMachObjectTargetWriter
getCStringSection	MC/MCObjectFileInfo.h	/^  const MCSection *getCStringSection() const { return CStringSection; }$/;"	f	class:llvm::MCObjectFileInfo
getCU	DIBuilder.h	/^    const MDNode *getCU() { return TheCU; }$/;"	f	class:llvm::DIBuilder
getCachedRegUnit	CodeGen/LiveIntervalAnalysis.h	/^    LiveInterval *getCachedRegUnit(unsigned Unit) {$/;"	f	class:llvm::LiveIntervals
getCallFrameDestroyOpcode	Target/TargetInstrInfo.h	/^  int getCallFrameDestroyOpcode() const { return CallFrameDestroyOpcode; }$/;"	f	class:llvm::TargetInstrInfo
getCallFrameSetupOpcode	Target/TargetInstrInfo.h	/^  int getCallFrameSetupOpcode() const { return CallFrameSetupOpcode; }$/;"	f	class:llvm::TargetInstrInfo
getCallOrPrologue	CodeGen/CallingConvLower.h	/^  ParmContext getCallOrPrologue() const { return CallOrPrologue; }$/;"	f	class:llvm::CCState
getCallPreservedMask	Target/TargetRegisterInfo.h	/^  virtual const uint32_t *getCallPreservedMask(CallingConv::ID) const {$/;"	f	class:llvm::TargetRegisterInfo
getCallSiteBeginLabel	CodeGen/MachineModuleInfo.h	/^  unsigned getCallSiteBeginLabel(MCSymbol *BeginLabel) {$/;"	f	class:llvm::MachineModuleInfo
getCallSiteLandingPad	CodeGen/MachineModuleInfo.h	/^  SmallVectorImpl<unsigned> &getCallSiteLandingPad(MCSymbol *Sym) {$/;"	f	class:llvm::MachineModuleInfo
getCalledFunction	Instructions.h	/^  Function *getCalledFunction() const {$/;"	f	class:llvm::CallInst
getCalledFunction	Instructions.h	/^  Function *getCalledFunction() const {$/;"	f	class:llvm::InvokeInst
getCalledFunction	Support/CallSite.h	/^  FunTy *getCalledFunction() const {$/;"	f	class:llvm::CallSiteBase
getCalledValue	Instructions.h	/^        Value *getCalledValue()       { return Op<-1>(); }$/;"	f	class:llvm::CallInst
getCalledValue	Instructions.h	/^        Value *getCalledValue()       { return Op<-3>(); }$/;"	f	class:llvm::InvokeInst
getCalledValue	Instructions.h	/^  const Value *getCalledValue() const { return Op<-1>(); }$/;"	f	class:llvm::CallInst
getCalledValue	Instructions.h	/^  const Value *getCalledValue() const { return Op<-3>(); }$/;"	f	class:llvm::InvokeInst
getCalledValue	Support/CallSite.h	/^  ValTy *getCalledValue() const {$/;"	f	class:llvm::CallSiteBase
getCallee	Support/CallSite.h	/^  IterTy getCallee() const {$/;"	f	class:llvm::CallSiteBase
getCalleeSavedInfo	CodeGen/MachineFrameInfo.h	/^  const std::vector<CalleeSavedInfo> &getCalleeSavedInfo() const {$/;"	f	class:llvm::MachineFrameInfo
getCalleeSavedSpillSlots	Target/TargetFrameLowering.h	/^  getCalleeSavedSpillSlots(unsigned &NumEntries) const {$/;"	f	class:llvm::TargetFrameLowering
getCaller	Support/CallSite.h	/^  FunTy *getCaller() const { return (*this)->getParent()->getParent(); }$/;"	f	class:llvm::CallSiteBase
getCallingConv	CodeGen/CallingConvLower.h	/^  CallingConv::ID getCallingConv() const { return CallingConv; }$/;"	f	class:llvm::CCState
getCallingConv	Function.h	/^  CallingConv::ID getCallingConv() const {$/;"	f	class:llvm::Function
getCallingConv	Instructions.h	/^  CallingConv::ID getCallingConv() const {$/;"	f	class:llvm::CallInst
getCallingConv	Instructions.h	/^  CallingConv::ID getCallingConv() const {$/;"	f	class:llvm::InvokeInst
getCallingConv	Support/CallSite.h	/^  CallingConv::ID getCallingConv() const {$/;"	f	class:llvm::CallSiteBase
getCallsExternalNode	Analysis/CallGraph.h	/^  virtual CallGraphNode* getCallsExternalNode()   const { return 0; }$/;"	f	class:llvm::CallGraph
getCanonicalTree	ADT/ImmutableSet.h	/^  TreeTy *getCanonicalTree(TreeTy *TNew) {$/;"	f	class:llvm::ImutAVLFactory
getCase	Support/IntegersSubsetMapping.h	/^  IntegersSubsetTy getCase() {$/;"	f	class:llvm::IntegersSubsetMapping
getCaseIndex	Instructions.h	/^    unsigned getCaseIndex() const { return Index; }$/;"	f	class:llvm::SwitchInst::CaseIteratorT
getCaseSingleNumber	Support/IntegersSubsetMapping.h	/^  const IntTy* getCaseSingleNumber(SuccessorClass *Succ) {$/;"	f	class:llvm::IntegersSubsetMapping
getCaseSuccessor	Instructions.h	/^    BasicBlockTy *getCaseSuccessor() {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
getCaseValue	Instructions.h	/^    ConstantIntTy *getCaseValue() {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
getCaseValueEx	Instructions.h	/^    IntegersSubsetRef getCaseValueEx() {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
getCases	Support/IntegersSubsetMapping.h	/^  void getCases(Cases& TheCases, bool PreventMerging = false) {$/;"	f	class:llvm::IntegersSubsetMapping
getCategory	ADT/APFloat.h	/^    fltCategory getCategory() const { return category; }$/;"	f	class:llvm::APFloat
getChain	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getChain() const { return getOperand(0); }$/;"	f	class:llvm::MemSDNode
getChainedFunctionEntry	Support/Win64EH.h	/^  RuntimeFunction *getChainedFunctionEntry() {$/;"	f	struct:llvm::Win64EH::UnwindInfo
getCharacteristics	MC/MCSectionCOFF.h	/^    unsigned getCharacteristics() const { return Characteristics; }$/;"	f	class:llvm::MCSectionCOFF
getChildren	Analysis/Dominators.h	/^  const std::vector<DomTreeNodeBase<NodeT>*> &getChildren() const {$/;"	f	class:llvm::DomTreeNodeBase
getChildren	CodeGen/LexicalScopes.h	/^  SmallVector<LexicalScope *, 4> &getChildren() { return Children; }$/;"	f	class:llvm::LexicalScope
getClass	TableGen/Record.h	/^  Record *getClass(const std::string &Name) const {$/;"	f	class:llvm::RecordKeeper
getClasses	TableGen/Record.h	/^  const std::map<std::string, Record*> &getClasses() const { return Classes; }$/;"	f	class:llvm::RecordKeeper
getClause	Instructions.h	/^  Value *getClause(unsigned Idx) const { return OperandList[Idx + 1]; }$/;"	f	class:llvm::LandingPadInst
getClobber	Analysis/MemoryDependenceAnalysis.h	/^    static MemDepResult getClobber(Instruction *Inst) {$/;"	f	class:llvm::MemDepResult
getCmpLibcallCC	Target/TargetLowering.h	/^  ISD::CondCode getCmpLibcallCC(RTLIB::Libcall Call) const {$/;"	f	class:llvm::TargetLowering
getCode	MC/MCAssembler.h	/^  SmallVectorImpl<char> &getCode() { return Code; }$/;"	f	class:llvm::MCInstFragment
getCode	MC/MCAssembler.h	/^  const SmallVectorImpl<char> &getCode() const { return Code; }$/;"	f	class:llvm::MCInstFragment
getCode16Directive	MC/MCAsmInfo.h	/^    const char *getCode16Directive() const {$/;"	f	class:llvm::MCAsmInfo
getCode32Directive	MC/MCAsmInfo.h	/^    const char *getCode32Directive() const {$/;"	f	class:llvm::MCAsmInfo
getCode64Directive	MC/MCAsmInfo.h	/^    const char *getCode64Directive() const {$/;"	f	class:llvm::MCAsmInfo
getCodeModel	MC/MCCodeGenInfo.h	/^    CodeModel::Model getCodeModel() const { return CMModel; }$/;"	f	class:llvm::MCCodeGenInfo
getCol	Support/DebugLoc.h	/^    unsigned getCol() const {$/;"	f	class:llvm::DebugLoc
getColAsVector	CodeGen/PBQP/Math.h	/^    Vector getColAsVector(unsigned c) const {$/;"	f	class:PBQP::Matrix
getColMin	CodeGen/PBQP/Math.h	/^    PBQPNum getColMin(unsigned c) const {$/;"	f	class:PBQP::Matrix
getCols	CodeGen/PBQP/Math.h	/^    unsigned getCols() const { return cols; }$/;"	f	class:PBQP::Matrix
getColumn	DebugInfo/DIContext.h	/^  uint32_t getColumn() const { return Column; }$/;"	f	class:llvm::DILineInfo
getColumn	MC/MCDwarf.h	/^    unsigned getColumn() const { return Column; }$/;"	f	class:llvm::MCDwarfLoc
getColumnNo	Support/SourceMgr.h	/^  int getColumnNo() const { return ColumnNo; }$/;"	f	class:llvm::SMDiagnostic
getColumnNumber	DebugInfo.h	/^    unsigned getColumnNumber() const   { return getUnsignedField(1); }$/;"	f	class:llvm::DILocation
getColumnNumber	DebugInfo.h	/^    unsigned getColumnNumber() const { return getScope().getColumnNumber(); }$/;"	f	class:llvm::DILexicalBlockFile
getColumnNumber	DebugInfo.h	/^    unsigned getColumnNumber() const { return getUnsignedField(3);         }$/;"	f	class:llvm::DILexicalBlock
getColumnNumber	DebugInfo.h	/^    unsigned getColumnNumber() const { return getUnsignedField(6); }$/;"	f	class:llvm::DITemplateTypeParameter
getColumnNumber	DebugInfo.h	/^    unsigned getColumnNumber() const { return getUnsignedField(7); }$/;"	f	class:llvm::DITemplateValueParameter
getCommDirectiveSupportsAlignment	MC/MCObjectFileInfo.h	/^  bool getCommDirectiveSupportsAlignment() const {$/;"	f	class:llvm::MCObjectFileInfo
getCommentColumn	MC/MCAsmInfo.h	/^    unsigned getCommentColumn() const {$/;"	f	class:llvm::MCAsmInfo
getCommentString	MC/MCAsmInfo.h	/^    const char *getCommentString() const {$/;"	f	class:llvm::MCAsmInfo
getCommon	MC/SectionKind.h	/^  static SectionKind getCommon() { return get(Common); }$/;"	f	class:llvm::SectionKind
getCommonAlignment	MC/MCAssembler.h	/^  unsigned getCommonAlignment() const {$/;"	f	class:llvm::MCSymbolData
getCommonRegion	Analysis/RegionInfo.h	/^  Region* getCommonRegion(BasicBlock* A, BasicBlock *B) const {$/;"	f	class:llvm::RegionInfo
getCommonSize	MC/MCAssembler.h	/^  uint64_t getCommonSize() const {$/;"	f	class:llvm::MCSymbolData
getCompactUnwindEncoding	CodeGen/MachineModuleInfo.h	/^  uint32_t getCompactUnwindEncoding() const { return CompactUnwindEncoding; }$/;"	f	class:llvm::MachineModuleInfo
getCompactUnwindRegNum	Target/TargetRegisterInfo.h	/^  virtual int getCompactUnwindRegNum(unsigned, bool) const {$/;"	f	class:llvm::TargetRegisterInfo
getCompactUnwindSection	MC/MCObjectFileInfo.h	/^  const MCSection *getCompactUnwindSection() const{$/;"	f	class:llvm::MCObjectFileInfo
getCompareOperand	Instructions.h	/^  Value *getCompareOperand() { return getOperand(1); }$/;"	f	class:llvm::AtomicCmpXchgInst
getCompareOperand	Instructions.h	/^  const Value *getCompareOperand() const { return getOperand(1); }$/;"	f	class:llvm::AtomicCmpXchgInst
getCompileUnit	DebugInfo.h	/^    DICompileUnit getCompileUnit() const { $/;"	f	class:llvm::DIVariable
getCompileUnit	DebugInfo.h	/^    DICompileUnit getCompileUnit() const{ $/;"	f	class:llvm::DIFile
getCompileUnit	DebugInfo.h	/^    DICompileUnit getCompileUnit() const{ $/;"	f	class:llvm::DIGlobalVariable
getCompileUnit	DebugInfo.h	/^    DICompileUnit getCompileUnit() const{ $/;"	f	class:llvm::DINameSpace
getCompileUnit	DebugInfo.h	/^    DICompileUnit getCompileUnit() const{ $/;"	f	class:llvm::DISubprogram
getCompileUnit	DebugInfo.h	/^    DICompileUnit getCompileUnit() const{ $/;"	f	class:llvm::DIType
getCompl	Support/BranchProbability.h	/^  BranchProbability getCompl() const {$/;"	f	class:llvm::BranchProbability
getCompleteNodeLabel	Analysis/CFGPrinter.h	/^  static std::string getCompleteNodeLabel(const BasicBlock *Node, $/;"	f	struct:llvm::DOTGraphTraits
getComplexType	Object/COFF.h	/^  uint8_t getComplexType() const {$/;"	f	struct:llvm::object::coff_symbol
getCondCodeAction	Target/TargetLowering.h	/^  getCondCodeAction(ISD::CondCode CC, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getCondition	Instructions.h	/^  Value *getCondition() const { return getOperand(0); }$/;"	f	class:llvm::SwitchInst
getCondition	Instructions.h	/^  Value *getCondition() const {$/;"	f	class:llvm::BranchInst
getCondition	Instructions.h	/^  Value *getCondition() { return Op<0>(); }$/;"	f	class:llvm::SelectInst
getCondition	Instructions.h	/^  const Value *getCondition() const { return Op<0>(); }$/;"	f	class:llvm::SelectInst
getConstDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *getConstDataSection() const { return ConstDataSection; }$/;"	f	class:llvm::MCObjectFileInfo
getConstPool	CodeGen/MachineRelocation.h	/^  static MachineRelocation getConstPool(uintptr_t offset,unsigned RelocationType,$/;"	f	class:llvm::MachineRelocation
getConstTextCoalSection	MC/MCObjectFileInfo.h	/^  const MCSection *getConstTextCoalSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getConstVal	CodeGen/SelectionDAGNodes.h	/^  const Constant *getConstVal() const {$/;"	f	class:llvm::ConstantPoolSDNode
getConstant	DebugInfo.h	/^    Constant *getConstant() const   { return getConstantField(11); }$/;"	f	class:llvm::DIGlobalVariable
getConstant	MC/MCValue.h	/^  int64_t getConstant() const { return Cst; }$/;"	f	class:llvm::MCValue
getConstantFPValue	CodeGen/SelectionDAGNodes.h	/^  const ConstantFP *getConstantFPValue() const { return Value; }$/;"	f	class:llvm::ConstantFPSDNode
getConstantIntValue	CodeGen/SelectionDAGNodes.h	/^  const ConstantInt *getConstantIntValue() const { return Value; }$/;"	f	class:llvm::ConstantSDNode
getConstantOperandVal	CodeGen/SelectionDAGNodes.h	/^inline uint64_t SDValue::getConstantOperandVal(unsigned i) const {$/;"	f	class:llvm::SDValue
getConstantPool	CodeGen/MachineFunction.h	/^  MachineConstantPool *getConstantPool() { return ConstantPool; }$/;"	f	class:llvm::MachineFunction
getConstantPool	CodeGen/MachineFunction.h	/^  const MachineConstantPool *getConstantPool() const { return ConstantPool; }$/;"	f	class:llvm::MachineFunction
getConstantPoolAlignment	CodeGen/MachineConstantPool.h	/^  unsigned getConstantPoolAlignment() const { return PoolAlignment; }$/;"	f	class:llvm::MachineConstantPool
getConstantPoolIndex	CodeGen/MachineRelocation.h	/^  unsigned getConstantPoolIndex() const {$/;"	f	class:llvm::MachineRelocation
getConstantVal	CodeGen/MachineRelocation.h	/^  intptr_t getConstantVal() const {$/;"	f	class:llvm::MachineRelocation
getConstants	CodeGen/MachineConstantPool.h	/^  const std::vector<MachineConstantPoolEntry> &getConstants() const {$/;"	f	class:llvm::MachineConstantPool
getConstraint	MC/MCParser/MCParsedAsmOperand.h	/^  StringRef getConstraint() { return Constraint; }$/;"	f	class:llvm::MCParsedAsmOperand
getConstraintString	InlineAsm.h	/^  const std::string &getConstraintString() const { return Constraints; }$/;"	f	class:llvm::InlineAsm
getContainedPass	Analysis/LoopPass.h	/^  LoopPass *getContainedPass(unsigned N) {$/;"	f	class:llvm::LPPassManager
getContainedPass	Analysis/RegionPass.h	/^  Pass *getContainedPass(unsigned N) {$/;"	f	class:llvm::RGPassManager
getContainedPass	PassManagers.h	/^  FunctionPass *getContainedPass(unsigned N) {$/;"	f	class:llvm::FPPassManager
getContainedType	Type.h	/^  Type *getContainedType(unsigned i) const {$/;"	f	class:llvm::Type
getContainingType	DebugInfo.h	/^    DICompositeType getContainingType() const {$/;"	f	class:llvm::DICompositeType
getContainingType	DebugInfo.h	/^    DICompositeType getContainingType() const {$/;"	f	class:llvm::DISubprogram
getContents	MC/MCAssembler.h	/^  SmallString<32> &getContents() { return Contents; }$/;"	f	class:llvm::MCDataFragment
getContents	MC/MCAssembler.h	/^  SmallString<8> &getContents() { return Contents; }$/;"	f	class:llvm::MCDwarfCallFrameFragment
getContents	MC/MCAssembler.h	/^  SmallString<8> &getContents() { return Contents; }$/;"	f	class:llvm::MCDwarfLineAddrFragment
getContents	MC/MCAssembler.h	/^  SmallString<8> &getContents() { return Contents; }$/;"	f	class:llvm::MCLEBFragment
getContents	MC/MCAssembler.h	/^  const SmallString<32> &getContents() const { return Contents; }$/;"	f	class:llvm::MCDataFragment
getContents	MC/MCAssembler.h	/^  const SmallString<8> &getContents() const { return Contents; }$/;"	f	class:llvm::MCDwarfCallFrameFragment
getContents	MC/MCAssembler.h	/^  const SmallString<8> &getContents() const { return Contents; }$/;"	f	class:llvm::MCDwarfLineAddrFragment
getContents	MC/MCAssembler.h	/^  const SmallString<8> &getContents() const { return Contents; }$/;"	f	class:llvm::MCLEBFragment
getContents	Object/ObjectFile.h	/^inline error_code SectionRef::getContents(StringRef &Result) const {$/;"	f	class:llvm::object::SectionRef
getContext	ADT/FoldingSet.h	/^  Ctx getContext() const { return Context; }$/;"	f	class:llvm::ContextualFoldingSet
getContext	Analysis/ScalarEvolution.h	/^    LLVMContext &getContext() const { return F->getContext(); }$/;"	f	class:llvm::ScalarEvolution
getContext	Analysis/ScalarEvolutionExpander.h	/^    LLVMContext &getContext() const { return SE.getContext(); }$/;"	f	class:llvm::SCEVExpander
getContext	CodeGen/CallingConvLower.h	/^  LLVMContext &getContext() const { return Context; }$/;"	f	class:llvm::CCState
getContext	CodeGen/MachineFunction.h	/^  MCContext &getContext() const { return Ctx; }$/;"	f	class:llvm::MachineFunction
getContext	CodeGen/MachineModuleInfo.h	/^  MCContext &getContext() { return Context; }$/;"	f	class:llvm::MachineModuleInfo
getContext	CodeGen/MachineModuleInfo.h	/^  const MCContext &getContext() const { return Context; }$/;"	f	class:llvm::MachineModuleInfo
getContext	CodeGen/SelectionDAG.h	/^  LLVMContext *getContext() const {return Context; }$/;"	f	class:llvm::SelectionDAG
getContext	DebugInfo.h	/^    DIScope getContext() const          { return getFieldAs<DIScope>(1); }$/;"	f	class:llvm::DIType
getContext	DebugInfo.h	/^    DIScope getContext() const          { return getFieldAs<DIScope>(1); }$/;"	f	class:llvm::DIVariable
getContext	DebugInfo.h	/^    DIScope getContext() const          { return getFieldAs<DIScope>(2); }$/;"	f	class:llvm::DIGlobalVariable
getContext	DebugInfo.h	/^    DIScope getContext() const          { return getFieldAs<DIScope>(2); }$/;"	f	class:llvm::DISubprogram
getContext	DebugInfo.h	/^    DIScope getContext() const       { return getFieldAs<DIScope>(1);      }$/;"	f	class:llvm::DILexicalBlock
getContext	DebugInfo.h	/^    DIScope getContext() const       { return getFieldAs<DIScope>(1); }$/;"	f	class:llvm::DITemplateTypeParameter
getContext	DebugInfo.h	/^    DIScope getContext() const       { return getFieldAs<DIScope>(1); }$/;"	f	class:llvm::DITemplateValueParameter
getContext	DebugInfo.h	/^    DIScope getContext() const     { return getFieldAs<DIScope>(1);      }$/;"	f	class:llvm::DINameSpace
getContext	DebugInfo.h	/^    DIScope getContext() const { return getScope().getContext(); }$/;"	f	class:llvm::DILexicalBlockFile
getContext	IRBuilder.h	/^  LLVMContext &getContext() const { return Context; }$/;"	f	class:llvm::IRBuilderBase
getContext	MC/MCAssembler.h	/^  MCContext &getContext() const { return Context; }$/;"	f	class:llvm::MCAssembler
getContext	MC/MCParser/MCAsmParserExtension.h	/^  MCContext &getContext() { return getParser().getContext(); }$/;"	f	class:llvm::MCAsmParserExtension
getContext	MC/MCStreamer.h	/^    MCContext &getContext() const { return Context; }$/;"	f	class:llvm::MCStreamer
getContext	Module.h	/^  LLVMContext &getContext() const { return Context; }$/;"	f	class:llvm::Module
getContext	Support/CrashRecoveryContext.h	/^  CrashRecoveryContext *getContext() const {$/;"	f	class:llvm::CrashRecoveryContextCleanup
getContext	Target/TargetLoweringObjectFile.h	/^  MCContext &getContext() const { return *Ctx; }$/;"	f	class:llvm::TargetLoweringObjectFile
getContext	Type.h	/^  LLVMContext &getContext() const { return Context; }$/;"	f	class:llvm::Type
getCopyCost	MC/MCRegisterInfo.h	/^  int getCopyCost() const { return CopyCost; }$/;"	f	class:llvm::MCRegisterClass
getCopyCost	Target/TargetRegisterInfo.h	/^  int getCopyCost() const { return MC->getCopyCost(); }$/;"	f	class:llvm::TargetRegisterClass
getCopyFromReg	CodeGen/SelectionDAG.h	/^  SDValue getCopyFromReg(SDValue Chain, DebugLoc dl, unsigned Reg, EVT VT) {$/;"	f	class:llvm::SelectionDAG
getCopyFromReg	CodeGen/SelectionDAG.h	/^  SDValue getCopyFromReg(SDValue Chain, DebugLoc dl, unsigned Reg, EVT VT,$/;"	f	class:llvm::SelectionDAG
getCopyToReg	CodeGen/SelectionDAG.h	/^  SDValue getCopyToReg(SDValue Chain, DebugLoc dl, SDValue Reg, SDValue N,$/;"	f	class:llvm::SelectionDAG
getCopyToReg	CodeGen/SelectionDAG.h	/^  SDValue getCopyToReg(SDValue Chain, DebugLoc dl, unsigned Reg, SDValue N) {$/;"	f	class:llvm::SelectionDAG
getCopyToReg	CodeGen/SelectionDAG.h	/^  SDValue getCopyToReg(SDValue Chain, DebugLoc dl, unsigned Reg, SDValue N,$/;"	f	class:llvm::SelectionDAG
getCost	Analysis/InlineCost.h	/^    int getCost() const {$/;"	f	class:llvm::InlineCost
getCostDelta	Analysis/InlineCost.h	/^    int getCostDelta() const { return Threshold - getCost(); }$/;"	f	class:llvm::InlineCost
getCostPerUse	Target/TargetRegisterInfo.h	/^  unsigned getCostPerUse(unsigned RegNo) const {$/;"	f	class:llvm::TargetRegisterInfo
getCosts	CodeGen/PBQP/Graph.h	/^      Matrix& getCosts() { return costs; }$/;"	f	class:PBQP::Graph::EdgeEntry
getCosts	CodeGen/PBQP/Graph.h	/^      Vector& getCosts() { return costs; }$/;"	f	class:PBQP::Graph::NodeEntry
getCosts	CodeGen/PBQP/Graph.h	/^      const Matrix& getCosts() const { return costs; }$/;"	f	class:PBQP::Graph::EdgeEntry
getCosts	CodeGen/PBQP/Graph.h	/^      const Vector& getCosts() const { return costs; }$/;"	f	class:PBQP::Graph::NodeEntry
getCount	Analysis/PathProfileInfo.h	/^  inline unsigned int getCount() const { return _count; }$/;"	f	class:llvm::ProfilePath
getCountStdDev	Analysis/PathProfileInfo.h	/^  inline double getCountStdDev() const { return _countStdDev; }$/;"	f	class:llvm::ProfilePath
getCrossCopyRegClass	Target/TargetRegisterInfo.h	/^  getCrossCopyRegClass(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::TargetRegisterInfo
getCtor	CodeGen/MachinePassRegistry.h	/^  MachinePassCtor getCtor()               const { return Ctor; }$/;"	f	class:llvm::MachinePassRegistryNode
getCurCycle	CodeGen/ScheduleDAG.h	/^    unsigned getCurCycle() const {$/;"	f	class:llvm::SchedulingPriorityQueue
getCurDebugLoc	CodeGen/FastISel.h	/^  DebugLoc getCurDebugLoc() const { return DL; }$/;"	f	class:llvm::FastISel
getCurScope	ADT/ScopedHashTable.h	/^  ScopeTy *getCurScope() { return CurScope; }$/;"	f	class:llvm::ScopedHashTable
getCurScope	ADT/ScopedHashTable.h	/^  const ScopeTy *getCurScope() const { return CurScope; }$/;"	f	class:llvm::ScopedHashTable
getCurrent	ADT/STLExtras.h	/^  inline const RootIt &getCurrent() const { return current; }$/;"	f	class:llvm::mapped_iterator
getCurrentCallSite	CodeGen/MachineModuleInfo.h	/^  unsigned getCurrentCallSite(void) { return CurCallSite; }$/;"	f	class:llvm::MachineModuleInfo
getCurrentDebugLocation	IRBuilder.h	/^  DebugLoc getCurrentDebugLocation() const { return CurDbgLocation; }$/;"	f	class:llvm::IRBuilderBase
getCurrentDwarfLoc	MC/MCContext.h	/^    const MCDwarfLoc &getCurrentDwarfLoc() { return CurrentDwarfLoc; }$/;"	f	class:llvm::MCContext
getCurrentFunctionScope	CodeGen/LexicalScopes.h	/^  LexicalScope *getCurrentFunctionScope() const { return CurrentFnLexicalScope;}$/;"	f	class:llvm::LexicalScopes
getCurrentPCOffset	CodeGen/JITCodeEmitter.h	/^  uintptr_t getCurrentPCOffset() const {$/;"	f	class:llvm::JITCodeEmitter
getCurrentPCOffset	CodeGen/MachineCodeEmitter.h	/^  virtual uintptr_t getCurrentPCOffset() const {$/;"	f	class:llvm::MachineCodeEmitter
getCurrentPCValue	CodeGen/JITCodeEmitter.h	/^  virtual uintptr_t getCurrentPCValue() const {$/;"	f	class:llvm::JITCodeEmitter
getCurrentPCValue	CodeGen/MachineCodeEmitter.h	/^  virtual uintptr_t getCurrentPCValue() const {$/;"	f	class:llvm::MachineCodeEmitter
getCurrentSection	MC/MCStreamer.h	/^    const MCSection *getCurrentSection() const {$/;"	f	class:llvm::MCStreamer
getCurrentSectionData	MC/MCObjectStreamer.h	/^  MCSectionData *getCurrentSectionData() const {$/;"	f	class:llvm::MCObjectStreamer
getCurrentW64UnwindInfo	MC/MCStreamer.h	/^    MCWin64EHUnwindInfo *getCurrentW64UnwindInfo(){return CurrentW64UnwindInfo;}$/;"	f	class:llvm::MCStreamer
getCursor	Support/GCOV.h	/^  uint64_t getCursor() const { return Cursor; }$/;"	f	class:llvm::GCOVBuffer
getCustomMem	CodeGen/CallingConvLower.h	/^  static CCValAssign getCustomMem(unsigned ValNo, MVT ValVT,$/;"	f	class:llvm::CCValAssign
getCustomReg	CodeGen/CallingConvLower.h	/^  static CCValAssign getCustomReg(unsigned ValNo, MVT ValVT,$/;"	f	class:llvm::CCValAssign
getCvtCode	CodeGen/SelectionDAGNodes.h	/^  ISD::CvtCode getCvtCode() const { return CvtCode; }$/;"	f	class:llvm::CvtRndSatSDNode
getCycles	MC/MCInstrItineraries.h	/^  unsigned getCycles() const {$/;"	f	struct:llvm::InstrStage
getDFSIn	CodeGen/LexicalScopes.h	/^  unsigned getDFSIn() const             { return DFSIn; }$/;"	f	class:llvm::LexicalScope
getDFSNumIn	Analysis/Dominators.h	/^  unsigned getDFSNumIn() const { return DFSNumIn; }$/;"	f	class:llvm::DomTreeNodeBase
getDFSNumOut	Analysis/Dominators.h	/^  unsigned getDFSNumOut() const { return DFSNumOut; }$/;"	f	class:llvm::DomTreeNodeBase
getDFSOut	CodeGen/LexicalScopes.h	/^  unsigned getDFSOut() const            { return DFSOut; }$/;"	f	class:llvm::LexicalScope
getData	ADT/EquivalenceClasses.h	/^    const ElemTy &getData() const { return Data; }$/;"	f	class:llvm::EquivalenceClasses::ECValue
getData	ADT/FoldingSet.h	/^  const unsigned *getData() const { return Data; }$/;"	f	class:llvm::FoldingSetNodeIDRef
getData	ADT/ImmutableMap.h	/^    data_type_ref getData() const { return itr->getValue().second; }$/;"	f	class:llvm::ImmutableMap::iterator
getData	ADT/ImmutableMap.h	/^    data_type_ref getData() const { return itr->getValue().second; }$/;"	f	class:llvm::ImmutableMapRef::iterator
getData	Bitcode/Archive.h	/^    const char* getData() const { return data; }$/;"	f	class:llvm::ArchiveMember
getData	CodeGen/PBQP/Graph.h	/^      void *getData() { return data; }$/;"	f	class:PBQP::Graph::EdgeEntry
getData	CodeGen/PBQP/Graph.h	/^      void* getData() { return data; }$/;"	f	class:PBQP::Graph::NodeEntry
getData	Support/DataExtractor.h	/^  StringRef getData() const { return Data; }$/;"	f	class:llvm::DataExtractor
getData16bitsDirective	MC/MCAsmInfo.h	/^    const char *getData16bitsDirective(unsigned AS = 0) const {$/;"	f	class:llvm::MCAsmInfo
getData32bitsDirective	MC/MCAsmInfo.h	/^    const char *getData32bitsDirective(unsigned AS = 0) const {$/;"	f	class:llvm::MCAsmInfo
getData64bitsDirective	MC/MCAsmInfo.h	/^    const char *getData64bitsDirective(unsigned AS = 0) const {$/;"	f	class:llvm::MCAsmInfo
getData8bitsDirective	MC/MCAsmInfo.h	/^    const char *getData8bitsDirective(unsigned AS = 0) const {$/;"	f	class:llvm::MCAsmInfo
getDataASDirective	MC/MCAsmInfo.h	/^    virtual const char *getDataASDirective(unsigned Size, unsigned AS) const {$/;"	f	class:llvm::MCAsmInfo
getDataBSSSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDataBSSSection() const { return DataBSSSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDataCoalSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDataCoalSection() const { return DataCoalSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDataCommonSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDataCommonSection() const { return DataCommonSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDataEncoding	Object/ELF.h	/^   unsigned char getDataEncoding() const { return e_ident[ELF::EI_DATA]; }$/;"	f	struct:llvm::object::Elf_Ehdr_Impl
getDataEncoding	Support/ELF.h	/^  unsigned char getDataEncoding() const { return e_ident[EI_DATA]; }$/;"	f	struct:llvm::ELF::Elf32_Ehdr
getDataEncoding	Support/ELF.h	/^  unsigned char getDataEncoding() const { return e_ident[EI_DATA]; }$/;"	f	struct:llvm::ELF::Elf64_Ehdr
getDataLayout	Analysis/AliasAnalysis.h	/^  const DataLayout *getDataLayout() const { return TD; }$/;"	f	class:llvm::AliasAnalysis
getDataLayout	ExecutionEngine/ExecutionEngine.h	/^  const DataLayout *getDataLayout() const { return TD; }$/;"	f	class:llvm::ExecutionEngine
getDataLayout	Module.h	/^  const std::string &getDataLayout() const { return DataLayout; }$/;"	f	class:llvm::Module
getDataLayout	Target/TargetLowering.h	/^  const DataLayout *getDataLayout() const { return TD; }$/;"	f	class:llvm::TargetLowering
getDataLayout	Target/TargetMachine.h	/^  virtual const DataLayout             *getDataLayout() const { return 0; }$/;"	f	class:llvm::TargetMachine
getDataLayout	Target/TargetSelectionDAGInfo.h	/^  const DataLayout *getDataLayout() const { return TD; }$/;"	f	class:llvm::TargetSelectionDAGInfo
getDataNoRel	MC/SectionKind.h	/^  static SectionKind getDataNoRel() { return get(DataNoRel); }$/;"	f	class:llvm::SectionKind
getDataRegions	MC/MCAssembler.h	/^  std::vector<DataRegionData> &getDataRegions() {$/;"	f	class:llvm::MCAssembler
getDataRel	MC/SectionKind.h	/^  static SectionKind getDataRel() { return get(DataRel); }$/;"	f	class:llvm::SectionKind
getDataRelLocal	MC/SectionKind.h	/^  static SectionKind getDataRelLocal() { return get(DataRelLocal); }$/;"	f	class:llvm::SectionKind
getDataRelLocalSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDataRelLocalSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getDataRelROLocalSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDataRelROLocalSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getDataRelROSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDataRelROSection() const { return DataRelROSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDataRelSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDataRelSection() const { return DataRelSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDataSection() const { return DataSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDeadRegState	CodeGen/MachineInstrBuilder.h	/^inline unsigned getDeadRegState(bool B) {$/;"	f	namespace:llvm
getDeadSlot	CodeGen/SlotIndexes.h	/^    SlotIndex getDeadSlot() const {$/;"	f	class:llvm::SlotIndex
getDebugLoc	CodeGen/MachineInstr.h	/^  DebugLoc getDebugLoc() const { return debugLoc; }$/;"	f	class:llvm::MachineInstr
getDebugLoc	CodeGen/SelectionDAGNodes.h	/^  const DebugLoc getDebugLoc() const { return debugLoc; }$/;"	f	class:llvm::SDNode
getDebugLoc	CodeGen/SelectionDAGNodes.h	/^inline const DebugLoc SDValue::getDebugLoc() const {$/;"	f	class:llvm::SDValue
getDebugLoc	Instruction.h	/^  const DebugLoc &getDebugLoc() const { return DbgLoc; }$/;"	f	class:llvm::Instruction
getDef	Analysis/MemoryDependenceAnalysis.h	/^    static MemDepResult getDef(Instruction *Inst) {$/;"	f	class:llvm::MemDepResult
getDef	TableGen/Record.h	/^  Record *getDef() const { return Def; }$/;"	f	class:llvm::DefInit
getDef	TableGen/Record.h	/^  Record *getDef(const std::string &Name) const {$/;"	f	class:llvm::RecordKeeper
getDefRegState	CodeGen/MachineInstrBuilder.h	/^inline unsigned getDefRegState(bool B) {$/;"	f	namespace:llvm
getDefault	CodeGen/MachinePassRegistry.h	/^  MachinePassCtor getDefault()                          { return Default; }$/;"	f	class:llvm::MachinePassRegistry
getDefault	CodeGen/MachineScheduler.h	/^  static ScheduleDAGCtor getDefault() {$/;"	f	class:llvm::MachineSchedRegistry
getDefault	CodeGen/RegAllocRegistry.h	/^  static FunctionPassCtor getDefault() {$/;"	f	class:llvm::RegisterRegAlloc
getDefault	CodeGen/SchedulerRegistry.h	/^  static FunctionPassCtor getDefault() {$/;"	f	class:llvm::RegisterScheduler
getDefault	Support/CommandLine.h	/^  const OptionValue<DataType> &getDefault() const { return Default; }$/;"	f	class:llvm::cl::opt_storage
getDefaultDest	Instructions.h	/^  BasicBlock *getDefaultDest() const {$/;"	f	class:llvm::SwitchInst
getDefaultFPMathTag	IRBuilder.h	/^  MDNode *getDefaultFPMathTag() const { return DefaultFPMathTag; }$/;"	f	class:llvm::IRBuilder
getDefs	TableGen/Record.h	/^  const std::map<std::string, Record*> &getDefs() const { return Defs; }$/;"	f	class:llvm::RecordKeeper
getDegree	CodeGen/PBQP/Graph.h	/^      unsigned getDegree() const { return degree; }$/;"	f	class:PBQP::Graph::NodeEntry
getDenominator	Support/BranchProbability.h	/^  uint32_t getDenominator() const { return D; }$/;"	f	class:llvm::BranchProbability
getDepth	CodeGen/ScheduleDAG.h	/^    unsigned getDepth() const {$/;"	f	class:llvm::SUnit
getDepth	CodeGen/ScoreboardHazardRecognizer.h	/^    size_t getDepth() const { return Depth; }$/;"	f	class:llvm::ScoreboardHazardRecognizer::Scoreboard
getDepth	PassManagers.h	/^  unsigned getDepth() const { return Depth; }$/;"	f	class:llvm::PMDataManager
getDesc	ADT/Statistic.h	/^  const char *getDesc() const { return Desc; }$/;"	f	class:llvm::Statistic
getDesc	CodeGen/LexicalScopes.h	/^  const MDNode *getDesc() const                 { return Desc; }$/;"	f	class:llvm::LexicalScope
getDesc	CodeGen/MachineInstr.h	/^  const MCInstrDesc &getDesc() const { return *MCID; }$/;"	f	class:llvm::MachineInstr
getDesc	Support/Registry.h	/^    const char *getDesc() const { return Desc; }$/;"	f	class:llvm::SimpleRegistryEntry
getDescription	CodeGen/MachinePassRegistry.h	/^  const char *getDescription()            const { return Description; }$/;"	f	class:llvm::MachinePassRegistryNode
getDescription	Support/CommandLine.h	/^  const char *getDescription(unsigned N) const {$/;"	f	class:llvm::cl::parser
getDest	IntrinsicInst.h	/^    Value *getDest() const { return getRawDest()->stripPointerCasts(); }$/;"	f	class:llvm::MemIntrinsic
getDestAddressSpace	IntrinsicInst.h	/^    unsigned getDestAddressSpace() const {$/;"	f	class:llvm::MemIntrinsic
getDestTy	InstrTypes.h	/^  Type* getDestTy() const { return getType(); }$/;"	f	class:llvm::CastInst
getDestination	Instructions.h	/^  BasicBlock *getDestination(unsigned i) { return getSuccessor(i); }$/;"	f	class:llvm::IndirectBrInst
getDestination	Instructions.h	/^  const BasicBlock *getDestination(unsigned i) const { return getSuccessor(i); }$/;"	f	class:llvm::IndirectBrInst
getDestination	MC/MCDwarf.h	/^    const MachineLocation &getDestination() const { return Destination; }$/;"	f	class:llvm::MCCFIInstruction
getDestination	MC/MachineLocation.h	/^  const MachineLocation &getDestination() const { return Destination; }$/;"	f	class:llvm::MachineMove
getDiagContext	Support/SourceMgr.h	/^  void *getDiagContext() const { return DiagContext; }$/;"	f	class:llvm::SourceMgr
getDiagHandler	Support/SourceMgr.h	/^  DiagHandlerTy getDiagHandler() const { return DiagHandler; }$/;"	f	class:llvm::SourceMgr
getDialect	InlineAsm.h	/^  AsmDialect getDialect() const { return Dialect; }$/;"	f	class:llvm::InlineAsm
getDirIndex	MC/MCDwarf.h	/^    unsigned getDirIndex() const { return DirIndex; }$/;"	f	class:llvm::MCDwarfFile
getDirection	Analysis/DependenceAnalysis.h	/^    virtual unsigned getDirection(unsigned Level) const { return DVEntry::ALL; }$/;"	f	class:llvm::Dependence
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const   { $/;"	f	class:llvm::DISubprogram
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const   { $/;"	f	class:llvm::DITemplateTypeParameter
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const   { $/;"	f	class:llvm::DITemplateValueParameter
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const   { return getScope().getDirectory(); }$/;"	f	class:llvm::DILocation
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const  { $/;"	f	class:llvm::DINameSpace
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const  { $/;"	f	class:llvm::DIType
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const { return getStringField(2);   }$/;"	f	class:llvm::DIFile
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const { return getStringField(4);   }$/;"	f	class:llvm::DICompileUnit
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const {$/;"	f	class:llvm::DIGlobalVariable
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const {$/;"	f	class:llvm::DILexicalBlock
getDirectory	DebugInfo.h	/^    StringRef getDirectory() const {$/;"	f	class:llvm::DILexicalBlockFile
getDirty	Analysis/MemoryDependenceAnalysis.h	/^    static MemDepResult getDirty(Instruction *Inst) {$/;"	f	class:llvm::MemDepResult
getDisInfoBlock	MC/MCDisassembler.h	/^  void *getDisInfoBlock() const { return DisInfo; }$/;"	f	class:llvm::MCDisassembler
getDiscriminator	MC/MCDwarf.h	/^    unsigned getDiscriminator() const { return Discriminator; }$/;"	f	class:llvm::MCDwarfLoc
getDisplayName	DebugInfo.h	/^    StringRef getDisplayName() const  { return getStringField(4); }$/;"	f	class:llvm::DIGlobalVariable
getDisplayName	DebugInfo.h	/^    StringRef getDisplayName() const  { return getStringField(4); }$/;"	f	class:llvm::DISubprogram
getDistance	Analysis/DependenceAnalysis.h	/^    virtual const SCEV *getDistance(unsigned Level) const { return NULL; }$/;"	f	class:llvm::Dependence
getDoubleTy	IRBuilder.h	/^  Type *getDoubleTy() {$/;"	f	class:llvm::IRBuilderBase
getDrectveSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDrectveSection() const { return DrectveSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDst	Analysis/DependenceAnalysis.h	/^    const Instruction *getDst() const { return Dst; }$/;"	f	class:llvm::Dependence
getDuplicateNumber	Analysis/PathProfileInfo.h	/^  inline unsigned getDuplicateNumber() { return _duplicateNumber; }$/;"	f	class:llvm::ProfilePathEdge
getDwarfARangesSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfARangesSection() const { return DwarfARangesSection;}$/;"	f	class:llvm::MCObjectFileInfo
getDwarfAbbrevSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfAbbrevSection() const { return DwarfAbbrevSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDwarfAccelNamesSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfAccelNamesSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getDwarfAccelNamespaceSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfAccelNamespaceSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getDwarfAccelObjCSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfAccelObjCSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getDwarfAccelTypesSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfAccelTypesSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getDwarfDebugFlags	MC/MCContext.h	/^    StringRef getDwarfDebugFlags() { return DwarfDebugFlags; }$/;"	f	class:llvm::MCContext
getDwarfDebugInlineSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfDebugInlineSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getDwarfFrameSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfFrameSection() const { return DwarfFrameSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDwarfInfoSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfInfoSection() const { return DwarfInfoSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDwarfLineSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfLineSection() const { return DwarfLineSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDwarfLocSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfLocSection() const { return DwarfLocSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDwarfLocSeen	MC/MCContext.h	/^    bool getDwarfLocSeen() { return DwarfLocSeen; }$/;"	f	class:llvm::MCContext
getDwarfMacroInfoSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfMacroInfoSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getDwarfPubTypesSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfPubTypesSection() const{return DwarfPubTypesSection;}$/;"	f	class:llvm::MCObjectFileInfo
getDwarfRangesSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfRangesSection() const { return DwarfRangesSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDwarfSectionOffsetDirective	MC/MCAsmInfo.h	/^    const char *getDwarfSectionOffsetDirective() const {$/;"	f	class:llvm::MCAsmInfo
getDwarfStrSection	MC/MCObjectFileInfo.h	/^  const MCSection *getDwarfStrSection() const { return DwarfStrSection; }$/;"	f	class:llvm::MCObjectFileInfo
getDyn	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getDyn(DataRefImpl DynData) const {$/;"	f	class:llvm::object::ELFObjectFile
getDynNext	Object/ELF.h	/^                        ::getDynNext(DataRefImpl DynData,$/;"	f	class:llvm::object::ELFObjectFile
getEDInfo	MC/MCDisassembler.h	/^  virtual const EDInstInfo   *getEDInfo() const { return (EDInstInfo*)0; }$/;"	f	class:llvm::MCDisassembler
getEFlags	Target/TargetELFWriterInfo.h	/^    unsigned getEFlags() const { return 0; }$/;"	f	class:llvm::TargetELFWriterInfo
getEHFrameSection	MC/MCObjectFileInfo.h	/^  const MCSection *getEHFrameSection() {$/;"	f	class:llvm::MCObjectFileInfo
getEIClass	Target/TargetELFWriterInfo.h	/^    unsigned getEIClass() const { return is64Bit ? ELFCLASS64 : ELFCLASS32; }$/;"	f	class:llvm::TargetELFWriterInfo
getEIData	Target/TargetELFWriterInfo.h	/^    unsigned getEIData() const {$/;"	f	class:llvm::TargetELFWriterInfo
getELFType	Object/Binary.h	/^  static inline unsigned int getELFType(bool isLittleEndian, bool is64Bits) {$/;"	f	class:llvm::object::Binary
getELFWriterInfo	Target/TargetMachine.h	/^  virtual const TargetELFWriterInfo *getELFWriterInfo() const { return 0; }$/;"	f	class:llvm::TargetMachine
getEMachine	MC/MCELFObjectWriter.h	/^  uint16_t getEMachine() { return EMachine; }$/;"	f	class:llvm::MCELFObjectTargetWriter
getEMachine	Target/TargetELFWriterInfo.h	/^    unsigned short getEMachine() const { return EMachine; }$/;"	f	class:llvm::TargetELFWriterInfo
getEdge	Analysis/ProfileDataLoader.h	/^  static Edge getEdge(const BType *Src, const BType *Dest) {$/;"	f	class:llvm::ProfileDataT
getEdge	Analysis/ProfileInfo.h	/^    static Edge getEdge(const BType *Src, const BType *Dest) {$/;"	f	class:llvm::ProfileInfoT
getEdge	CodeGen/PBQP/Graph.h	/^    EdgeEntry& getEdge(EdgeItr eItr) { return *eItr; }$/;"	f	class:PBQP::Graph
getEdge	CodeGen/PBQP/Graph.h	/^    const EdgeEntry& getEdge(ConstEdgeItr eItr) const { return *eItr; }$/;"	f	class:PBQP::Graph
getEdgeAttributes	Support/DOTGraphTraits.h	/^  static std::string getEdgeAttributes(const void *, EdgeIter,$/;"	f	struct:llvm::DefaultDOTGraphTraits
getEdgeCosts	CodeGen/PBQP/Graph.h	/^    Matrix& getEdgeCosts(EdgeItr eItr) { return getEdge(eItr).getCosts(); }$/;"	f	class:PBQP::Graph
getEdgeCosts	CodeGen/PBQP/Graph.h	/^    const Matrix& getEdgeCosts(ConstEdgeItr eItr) const {$/;"	f	class:PBQP::Graph
getEdgeData	CodeGen/PBQP/Graph.h	/^    void* getEdgeData(EdgeItr eItr) { return getEdge(eItr).getData(); }$/;"	f	class:PBQP::Graph
getEdgeDestLabel	Support/DOTGraphTraits.h	/^  static std::string getEdgeDestLabel(const void *, unsigned) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getEdgeFreq	Analysis/BlockFrequencyImpl.h	/^  BlockFrequency getEdgeFreq(BlockT *Src, BlockT *Dst) const {$/;"	f	class:llvm::BlockFrequencyImpl
getEdgeNode1	CodeGen/PBQP/Graph.h	/^    NodeItr getEdgeNode1(EdgeItr eItr) {$/;"	f	class:PBQP::Graph
getEdgeNode2	CodeGen/PBQP/Graph.h	/^    NodeItr getEdgeNode2(EdgeItr eItr) {$/;"	f	class:PBQP::Graph
getEdgeOtherNode	CodeGen/PBQP/Graph.h	/^    NodeItr getEdgeOtherNode(EdgeItr eItr, NodeItr nItr) {$/;"	f	class:PBQP::Graph
getEdgeSourceLabel	Analysis/CFGPrinter.h	/^  static std::string getEdgeSourceLabel(const BasicBlock *Node,$/;"	f	struct:llvm::DOTGraphTraits
getEdgeSourceLabel	Support/DOTGraphTraits.h	/^  static std::string getEdgeSourceLabel(const void *, EdgeIter) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getEdgeSourceLabels	Support/GraphWriter.h	/^  bool getEdgeSourceLabels(raw_ostream &O, NodeType *Node) {$/;"	f	class:llvm::GraphWriter
getEdgeTarget	Support/DOTGraphTraits.h	/^  static EdgeIter getEdgeTarget(const void *, EdgeIter I) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getEdgeWeight	Analysis/ProfileDataLoader.h	/^  unsigned getEdgeWeight(Edge e) const {$/;"	f	class:llvm::ProfileDataT
getEdgeWeight	Analysis/ProfileInfo.h	/^    double getEdgeWeight(Edge e) const {$/;"	f	class:llvm::ProfileInfoT
getEdgeWeights	Analysis/ProfileInfo.h	/^    EdgeWeights &getEdgeWeights (const FType *F) {$/;"	f	class:llvm::ProfileInfoT
getEightByteConstantSection	MC/MCObjectFileInfo.h	/^  const MCSection *getEightByteConstantSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getElement	DebugInfo.h	/^    DIDescriptor getElement(unsigned Idx) const {$/;"	f	class:llvm::DIArray
getElement	TableGen/Record.h	/^  Init *getElement(unsigned i) const {$/;"	f	class:llvm::ListInit
getElementNum	TableGen/Record.h	/^  unsigned getElementNum() const { return Element; }$/;"	f	class:llvm::VarListElementInit
getElementOffset	DataLayout.h	/^  uint64_t getElementOffset(unsigned Idx) const {$/;"	f	class:llvm::StructLayout
getElementOffsetInBits	DataLayout.h	/^  uint64_t getElementOffsetInBits(unsigned Idx) const {$/;"	f	class:llvm::StructLayout
getElementType	DerivedTypes.h	/^  Type *getElementType() const { return ContainedTys[0]; }$/;"	f	class:llvm::SequentialType
getElementType	DerivedTypes.h	/^  Type *getElementType(unsigned N) const {$/;"	f	class:llvm::StructType
getElementType	TableGen/Record.h	/^  RecTy *getElementType() const { return Ty; }$/;"	f	class:llvm::ListRecTy
getElfArchType	Object/ELF.h	/^getElfArchType(MemoryBuffer *Object) {$/;"	f	namespace:llvm::object
getElfSection	Object/ELF.h	/^                             ::getElfSection(section_iterator &It) const {$/;"	f	class:llvm::object::ELFObjectFile
getElfSymbol	Object/ELF.h	/^                             ::getElfSymbol(symbol_iterator &It) const {$/;"	f	class:llvm::object::ELFObjectFile
getElfSymbol	Object/ELF.h	/^                             ::getElfSymbol(uint32_t index) const {$/;"	f	class:llvm::object::ELFObjectFile
getEmitter	MC/MCAssembler.h	/^  MCCodeEmitter &getEmitter() const { return Emitter; }$/;"	f	class:llvm::MCAssembler
getEmptyKey	ADT/DenseMap.h	/^  static const KeyT getEmptyKey() {$/;"	f	class:llvm::DenseMapBase
getEmptyKey	ADT/DenseMapInfo.h	/^  static inline Pair getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/DenseMapInfo.h	/^  static inline T* getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/DenseMapInfo.h	/^  static inline char getEmptyKey() { return ~0; }$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/DenseMapInfo.h	/^  static inline int getEmptyKey() { return 0x7fffffff; }$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/DenseMapInfo.h	/^  static inline long getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/DenseMapInfo.h	/^  static inline long long getEmptyKey() { return 0x7fffffffffffffffLL; }$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/DenseMapInfo.h	/^  static inline unsigned getEmptyKey() { return ~0U; }$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/DenseMapInfo.h	/^  static inline unsigned long getEmptyKey() { return ~0UL; }$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/DenseMapInfo.h	/^  static inline unsigned long long getEmptyKey() { return ~0ULL; }$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/ImmutableList.h	/^  static inline ImmutableList<T> getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/PointerIntPair.h	/^  static Ty getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	ADT/ValueMap.h	/^  static inline VH getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	Analysis/AliasAnalysis.h	/^  static inline AliasAnalysis::Location getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	CodeGen/MachineInstr.h	/^  static inline MachineInstr *getEmptyKey() {$/;"	f	struct:llvm::MachineInstrExpressionTrait
getEmptyKey	CodeGen/SelectionDAGNodes.h	/^  static inline SDValue getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	Support/DebugLoc.h	/^    static DebugLoc getEmptyKey() { return DebugLoc::getEmptyKey(); }$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	Support/DebugLoc.h	/^    static DebugLoc getEmptyKey() {$/;"	f	class:llvm::DebugLoc
getEmptyKey	Support/ValueHandle.h	/^  static inline AssertingVH<T> getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEmptyList	ADT/ImmutableList.h	/^  ImmutableList<T> getEmptyList() const {$/;"	f	class:llvm::ImmutableListFactory
getEmptyMap	ADT/ImmutableIntervalMap.h	/^    ImmutableIntervalMap getEmptyMap() { $/;"	f	class:llvm::ImmutableIntervalMap::Factory
getEmptyMap	ADT/ImmutableMap.h	/^    ImmutableMap getEmptyMap() { return ImmutableMap(F.getEmptyTree()); }$/;"	f	class:llvm::ImmutableMap::Factory
getEmptyMap	ADT/ImmutableMap.h	/^  static inline ImmutableMapRef getEmptyMap(FactoryTy *F) {$/;"	f	class:llvm::ImmutableMapRef
getEmptyMarker	ADT/SmallPtrSet.h	/^  static void *getEmptyMarker() {$/;"	f	class:llvm::SmallPtrSetImpl
getEmptySet	ADT/ImmutableSet.h	/^    ImmutableSet getEmptySet() {$/;"	f	class:llvm::ImmutableSet::Factory
getEmptySet	ADT/ImmutableSet.h	/^  static inline ImmutableSetRef getEmptySet(FactoryTy *F) {$/;"	f	class:llvm::ImmutableSetRef
getEmptyTree	ADT/ImmutableSet.h	/^  TreeTy* getEmptyTree() const { return NULL; }$/;"	f	class:llvm::ImutAVLFactory
getEnableTailMerge	CodeGen/Passes.h	/^  bool getEnableTailMerge() const { return EnableTailMerge; }$/;"	f	class:llvm::TargetPassConfig
getEncoding	Bitcode/BitCodes.h	/^  Encoding getEncoding() const { assert(isEncoding()); return (Encoding)Enc; }$/;"	f	class:llvm::BitCodeAbbrevOp
getEncoding	DebugInfo.h	/^    unsigned getEncoding() const { return getUnsignedField(9); }$/;"	f	class:llvm::DIBasicType
getEncodingData	Bitcode/BitCodes.h	/^  uint64_t getEncodingData() const {$/;"	f	class:llvm::BitCodeAbbrevOp
getEncodingValue	MC/MCRegisterInfo.h	/^  uint16_t getEncodingValue(unsigned RegNo) const {$/;"	f	class:llvm::MCRegisterInfo
getEnd	ADT/ImmutableIntervalMap.h	/^  int64_t getEnd() const { return End; }$/;"	f	class:llvm::Interval
getEnd	Analysis/Dominators.h	/^  const BasicBlock *getEnd() const {$/;"	f	class:llvm::BasicBlockEdge
getEndOfList	ADT/EquivalenceClasses.h	/^    const ECValue *getEndOfList() const {$/;"	f	class:llvm::EquivalenceClasses::ECValue
getEntityCount	Object/ELF.h	/^  unsigned getEntityCount() const {$/;"	f	struct:llvm::object::Elf_Shdr_Impl
getEntry	Analysis/RegionInfo.h	/^  BasicBlock *getEntry() const { return RegionNode::getEntry(); }$/;"	f	class:llvm::Region
getEntry	Analysis/RegionInfo.h	/^  inline BasicBlock* getEntry() const { return entry.getPointer(); }$/;"	f	class:llvm::RegionNode
getEntry	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getEntry(const Elf_Shdr * Section,$/;"	f	class:llvm::object::ELFObjectFile
getEntry	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getEntry(uint16_t Section,$/;"	f	class:llvm::object::ELFObjectFile
getEntryBasicBlock	Analysis/Trace.h	/^  BasicBlock *getEntryBasicBlock () const { return BasicBlocks[0]; }$/;"	f	class:llvm::Trace
getEntryBlock	Function.h	/^        BasicBlock       &getEntryBlock()         { return front(); }$/;"	f	class:llvm::Function
getEntryBlock	Function.h	/^  const BasicBlock       &getEntryBlock() const   { return front(); }$/;"	f	class:llvm::Function
getEntryFor	Analysis/AliasSetTracker.h	/^  AliasSet::PointerRec &getEntryFor(Value *V) {$/;"	f	class:llvm::AliasSetTracker
getEntryFrequency	Support/BlockFrequency.h	/^  static uint64_t getEntryFrequency() { return ENTRY_FREQ; }$/;"	f	class:llvm::BlockFrequency
getEntryKind	CodeGen/MachineJumpTableInfo.h	/^  JTEntryKind getEntryKind() const { return EntryKind; }$/;"	f	class:llvm::MachineJumpTableInfo
getEntryNode	ADT/GraphTraits.h	/^  static NodeType *getEntryNode(Inverse<Inverse<T> > *G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/CallGraph.h	/^  static NodeType *getEntryNode(CallGraph *CGN) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/CallGraph.h	/^  static NodeType *getEntryNode(CallGraphNode *CGN) { return CGN; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/CallGraph.h	/^  static NodeType *getEntryNode(const CallGraph *CGN) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/CallGraph.h	/^  static NodeType *getEntryNode(const CallGraphNode *CGN) { return CGN; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/Dominators.h	/^  static NodeType *getEntryNode(DominatorTree *DT) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/Dominators.h	/^  static NodeType *getEntryNode(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/Interval.h	/^  static NodeType *getEntryNode(Interval *I) { return I; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/Interval.h	/^  static NodeType *getEntryNode(Inverse<Interval *> G) { return G.Graph; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/LoopInfo.h	/^  static NodeType *getEntryNode(Loop *L) { return L; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/LoopInfo.h	/^  static NodeType *getEntryNode(const Loop *L) { return L; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/PostDominators.h	/^  static NodeType *getEntryNode(PostDominatorTree *DT) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Analysis/RegionIterator.h	/^  static NodeType *getEntryNode(RegionInfo *RI) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineBasicBlock.h	/^  static NodeType *getEntryNode(Inverse<MachineBasicBlock *> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineBasicBlock.h	/^  static NodeType *getEntryNode(Inverse<const MachineBasicBlock*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineBasicBlock.h	/^  static NodeType *getEntryNode(MachineBasicBlock *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineBasicBlock.h	/^  static NodeType *getEntryNode(const MachineBasicBlock *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineDominators.h	/^  static NodeType *getEntryNode(MachineDominatorTree *DT) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineDominators.h	/^  static NodeType *getEntryNode(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineFunction.h	/^  static NodeType *getEntryNode(Inverse<MachineFunction*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineFunction.h	/^  static NodeType *getEntryNode(Inverse<const MachineFunction *> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineFunction.h	/^  static NodeType *getEntryNode(MachineFunction *F) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineFunction.h	/^  static NodeType *getEntryNode(const MachineFunction *F) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineLoopInfo.h	/^  static NodeType *getEntryNode(MachineLoop *L) { return L; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/MachineLoopInfo.h	/^  static NodeType *getEntryNode(const MachineLoop *L) { return L; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/ScheduleDAG.h	/^    static inline NodeType *getEntryNode(SUnit *N) { return N; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	CodeGen/SelectionDAG.h	/^  SDValue getEntryNode() const {$/;"	f	class:llvm::SelectionDAG
getEntryNode	CodeGen/SelectionDAGNodes.h	/^  static inline NodeType *getEntryNode(SDNode *N) { return N; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/CFG.h	/^  static NodeType *getEntryNode(BasicBlock *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/CFG.h	/^  static NodeType *getEntryNode(Function *F) { return &F->getEntryBlock(); }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/CFG.h	/^  static NodeType *getEntryNode(Inverse<BasicBlock *> G) { return G.Graph; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/CFG.h	/^  static NodeType *getEntryNode(Inverse<Function*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/CFG.h	/^  static NodeType *getEntryNode(Inverse<const BasicBlock*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/CFG.h	/^  static NodeType *getEntryNode(Inverse<const Function *> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/CFG.h	/^  static NodeType *getEntryNode(const BasicBlock *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/CFG.h	/^  static NodeType *getEntryNode(const Function *F) {return &F->getEntryBlock();}$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/DataFlow.h	/^  static NodeType *getEntryNode(Inverse<User*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/DataFlow.h	/^  static NodeType *getEntryNode(Inverse<const User*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/DataFlow.h	/^  static NodeType *getEntryNode(Value *G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Support/DataFlow.h	/^  static NodeType *getEntryNode(const Value *G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	Type.h	/^  static inline NodeType *getEntryNode(NodeType *T) { return T; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	Type.h	/^  static inline NodeType *getEntryNode(Type *T) { return T; }$/;"	f	struct:llvm::GraphTraits
getEntrySize	MC/MCSectionELF.h	/^  unsigned getEntrySize() const { return EntrySize; }$/;"	f	class:llvm::MCSectionELF
getEnumValue	DebugInfo.h	/^    uint64_t getEnumValue() const      { return getUInt64Field(2); }$/;"	f	class:llvm::DIEnumerator
getEnvironment	ADT/Triple.h	/^  EnvironmentType getEnvironment() const { return Environment; }$/;"	f	class:llvm::Triple
getEqClass	CodeGen/LiveInterval.h	/^    unsigned getEqClass(const VNInfo *VNI) const { return EqClass[VNI->id]; }$/;"	f	class:llvm::ConnectedVNInfoEqClasses
getErr	MC/MCParser/MCAsmLexer.h	/^  const std::string &getErr() {$/;"	f	class:llvm::MCAsmLexer
getErr	MC/MCTargetAsmLexer.h	/^  const std::string &getErr() {$/;"	f	class:llvm::MCTargetAsmLexer
getErrLoc	MC/MCParser/MCAsmLexer.h	/^  const SMLoc &getErrLoc() {$/;"	f	class:llvm::MCAsmLexer
getErrLoc	MC/MCTargetAsmLexer.h	/^  const SMLoc &getErrLoc() {$/;"	f	class:llvm::MCTargetAsmLexer
getExactAShr	Constants.h	/^  static Constant *getExactAShr(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getExactLShr	Constants.h	/^  static Constant *getExactLShr(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getExactSDiv	Constants.h	/^  static Constant *getExactSDiv(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getExactUDiv	Constants.h	/^  static Constant *getExactUDiv(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getExceptionData	Support/Win64EH.h	/^  void *getExceptionData() {$/;"	f	struct:llvm::Win64EH::UnwindInfo
getExceptionHandlingType	MC/MCAsmInfo.h	/^    ExceptionHandling::ExceptionsType getExceptionHandlingType() const {$/;"	f	class:llvm::MCAsmInfo
getExceptionPointerRegister	Target/TargetLowering.h	/^  unsigned getExceptionPointerRegister() const {$/;"	f	class:llvm::TargetLowering
getExceptionSelectorRegister	Target/TargetLowering.h	/^  unsigned getExceptionSelectorRegister() const {$/;"	f	class:llvm::TargetLowering
getExecution	Analysis/ProfileDataLoader.h	/^  const std::string &getExecution(unsigned i) const { return CommandLines[i]; }$/;"	f	class:llvm::ProfileDataLoader
getExecution	Analysis/ProfileInfoLoader.h	/^  const std::string &getExecution(unsigned i) const { return CommandLines[i]; }$/;"	f	class:llvm::ProfileInfoLoader
getExecutionDomain	Target/TargetInstrInfo.h	/^  getExecutionDomain(const MachineInstr *MI) const {$/;"	f	class:llvm::TargetInstrInfo
getExit	Analysis/RegionInfo.h	/^  BasicBlock *getExit() const { return exit; }$/;"	f	class:llvm::Region
getExitBlock	Analysis/LoopInfoImpl.h	/^BlockT *LoopBase<BlockT, LoopT>::getExitBlock() const {$/;"	f	class:llvm::LoopBase
getExitBlocks	Analysis/LoopInfoImpl.h	/^getExitBlocks(SmallVectorImpl<BlockT*> &ExitBlocks) const {$/;"	f	class:llvm::LoopBase
getExitEdges	Analysis/LoopInfoImpl.h	/^getExitEdges(SmallVectorImpl<Edge> &ExitEdges) const {$/;"	f	class:llvm::LoopBase
getExitingBlock	Analysis/LoopInfoImpl.h	/^BlockT *LoopBase<BlockT, LoopT>::getExitingBlock() const {$/;"	f	class:llvm::LoopBase
getExitingBlocks	Analysis/LoopInfoImpl.h	/^getExitingBlocks(SmallVectorImpl<BlockT *> &ExitingBlocks) const {$/;"	f	class:llvm::LoopBase
getExpr	MC/MCInst.h	/^  const MCExpr *getExpr() const {$/;"	f	class:llvm::MCOperand
getExtSym	CodeGen/MachineRelocation.h	/^  static MachineRelocation getExtSym(uintptr_t offset, unsigned RelocationType, $/;"	f	class:llvm::MachineRelocation
getExtendForContent	Target/TargetLowering.h	/^  static ISD::NodeType getExtendForContent(BooleanContent Content) {$/;"	f	class:llvm::TargetLowering
getExtendedElementVectorType	DerivedTypes.h	/^  static VectorType *getExtendedElementVectorType(VectorType *VTy) {$/;"	f	class:llvm::VectorType
getExtensionType	CodeGen/SelectionDAGNodes.h	/^  ISD::LoadExtType getExtensionType() const {$/;"	f	class:llvm::LoadSDNode
getExternDirective	MC/MCAsmInfo.h	/^    const char *getExternDirective() const {$/;"	f	class:llvm::MCAsmInfo
getExternalCallingNode	Analysis/CallGraph.h	/^  virtual CallGraphNode* getExternalCallingNode() const { return 0; }$/;"	f	class:llvm::CallGraph
getExternalSymbol	CodeGen/MachineRelocation.h	/^  const char *getExternalSymbol() const {$/;"	f	class:llvm::MachineRelocation
getExtraOptionNames	Support/CommandLine.h	/^  virtual void getExtraOptionNames(SmallVectorImpl<const char*> &) {}$/;"	f	class:llvm::cl::Option
getExtraOptionNames	Support/CommandLine.h	/^  virtual void getExtraOptionNames(SmallVectorImpl<const char*> &OptionNames) {$/;"	f	class:llvm::cl::bits
getExtraOptionNames	Support/CommandLine.h	/^  virtual void getExtraOptionNames(SmallVectorImpl<const char*> &OptionNames) {$/;"	f	class:llvm::cl::list
getExtraOptionNames	Support/CommandLine.h	/^  virtual void getExtraOptionNames(SmallVectorImpl<const char*> &OptionNames) {$/;"	f	class:llvm::cl::opt
getExtraOptionNames	Support/CommandLine.h	/^  void getExtraOptionNames(SmallVectorImpl<const char*> &) {}$/;"	f	class:llvm::cl::basic_parser_impl
getExtraOptionNames	Support/CommandLine.h	/^  void getExtraOptionNames(SmallVectorImpl<const char*> &OptionNames) {$/;"	f	class:llvm::cl::generic_parser_base
getFDEEncoding	MC/MCObjectFileInfo.h	/^  unsigned getFDEEncoding(bool CFI) const {$/;"	f	class:llvm::MCObjectFileInfo
getFPImm	CodeGen/MachineOperand.h	/^  const ConstantFP *getFPImm() const {$/;"	f	class:llvm::MachineOperand
getFPImm	MC/MCInst.h	/^  double getFPImm() const {$/;"	f	class:llvm::MCOperand
getFalse	IRBuilder.h	/^  ConstantInt *getFalse() {$/;"	f	class:llvm::IRBuilderBase
getFalseValue	Instructions.h	/^  Value *getFalseValue() { return Op<2>(); }$/;"	f	class:llvm::SelectInst
getFalseValue	Instructions.h	/^  const Value *getFalseValue() const { return Op<2>(); }$/;"	f	class:llvm::SelectInst
getFeatureBits	MC/MCSubtargetInfo.h	/^  uint64_t getFeatureBits() const {$/;"	f	class:llvm::MCSubtargetInfo
getFieldAs	DebugInfo.h	/^    DescTy getFieldAs(unsigned Elt) const {$/;"	f	class:llvm::DIDescriptor
getFieldInit	TableGen/Record.h	/^  virtual Init *getFieldInit(Record &R, const RecordVal *RV,$/;"	f	class:llvm::Init
getFieldType	TableGen/Record.h	/^  virtual RecTy *getFieldType(const std::string &FieldName) const { return 0; }$/;"	f	class:llvm::Init
getFile	DebugInfo.h	/^    DIFile getFile() const              { return getFieldAs<DIFile>(3); }$/;"	f	class:llvm::DIType
getFile	DebugInfo.h	/^    DIFile getFile() const { return getFieldAs<DIFile>(2); }$/;"	f	class:llvm::DIObjCProperty
getFileClass	Object/ELF.h	/^   unsigned char getFileClass() const { return e_ident[ELF::EI_CLASS]; }$/;"	f	struct:llvm::object::Elf_Ehdr_Impl
getFileClass	Support/ELF.h	/^  unsigned char getFileClass() const { return e_ident[EI_CLASS]; }$/;"	f	struct:llvm::ELF::Elf32_Ehdr
getFileClass	Support/ELF.h	/^  unsigned char getFileClass() const { return e_ident[EI_CLASS]; }$/;"	f	struct:llvm::ELF::Elf64_Ehdr
getFileFormatName	Object/ELF.h	/^                       ::getFileFormatName() const {$/;"	f	class:llvm::object::ELFObjectFile
getFileName	Analysis/ProfileDataLoader.h	/^  const std::string &getFileName() const { return Filename; }$/;"	f	class:llvm::ProfileDataLoader
getFileName	Analysis/ProfileInfoLoader.h	/^  const std::string &getFileName() const { return Filename; }$/;"	f	class:llvm::ProfileInfoLoader
getFileName	DebugInfo/DIContext.h	/^  const char *getFileName() { return FileName.c_str(); }$/;"	f	class:llvm::DILineInfo
getFileNum	MC/MCDwarf.h	/^    unsigned getFileNum() const { return FileNum; }$/;"	f	class:llvm::MCDwarfLoc
getFileNumber	MC/MCDwarf.h	/^    unsigned getFileNumber() const { return FileNumber; }$/;"	f	class:llvm::MCGenDwarfLabelEntry
getFileOffset	Object/ObjectFile.h	/^inline error_code SymbolRef::getFileOffset(uint64_t &Result) const {$/;"	f	class:llvm::object::SymbolRef
getFileStatus	Bitcode/Archive.h	/^    const sys::FileStatus &getFileStatus() const { return info; }$/;"	f	class:llvm::ArchiveMember
getFilename	DebugInfo.h	/^    StringRef getFilename() const    { $/;"	f	class:llvm::DISubprogram
getFilename	DebugInfo.h	/^    StringRef getFilename() const    { $/;"	f	class:llvm::DITemplateTypeParameter
getFilename	DebugInfo.h	/^    StringRef getFilename() const    { $/;"	f	class:llvm::DITemplateValueParameter
getFilename	DebugInfo.h	/^    StringRef getFilename() const    { return getScope().getFilename(); }$/;"	f	class:llvm::DILocation
getFilename	DebugInfo.h	/^    StringRef getFilename() const  { $/;"	f	class:llvm::DINameSpace
getFilename	DebugInfo.h	/^    StringRef getFilename() const  { $/;"	f	class:llvm::DIType
getFilename	DebugInfo.h	/^    StringRef getFilename() const  { return getStringField(1);   }$/;"	f	class:llvm::DIFile
getFilename	DebugInfo.h	/^    StringRef getFilename() const  { return getStringField(3);   }$/;"	f	class:llvm::DICompileUnit
getFilename	DebugInfo.h	/^    StringRef getFilename() const {$/;"	f	class:llvm::DIGlobalVariable
getFilename	DebugInfo.h	/^    StringRef getFilename() const {$/;"	f	class:llvm::DILexicalBlock
getFilename	DebugInfo.h	/^    StringRef getFilename() const {$/;"	f	class:llvm::DILexicalBlockFile
getFilename	Support/SourceMgr.h	/^  const std::string &getFilename() const { return Filename; }$/;"	f	class:llvm::SMDiagnostic
getFilterIds	CodeGen/MachineModuleInfo.h	/^  const std::vector<unsigned> &getFilterIds() const {$/;"	f	class:llvm::MachineModuleInfo
getFirstByValReg	CodeGen/CallingConvLower.h	/^  unsigned getFirstByValReg() const { return FirstByValRegValid ? FirstByValReg : 0; }$/;"	f	class:llvm::CCState
getFirstFileOffset	Bitcode/Archive.h	/^    unsigned getFirstFileOffset() { return firstFileOffset; }$/;"	f	class:llvm::Archive
getFirstInsertionPt	BasicBlock.h	/^  const_iterator getFirstInsertionPt() const {$/;"	f	class:llvm::BasicBlock
getFirstNonPHI	BasicBlock.h	/^  const Instruction* getFirstNonPHI() const {$/;"	f	class:llvm::BasicBlock
getFirstNonPHIOrDbg	BasicBlock.h	/^  const Instruction* getFirstNonPHIOrDbg() const {$/;"	f	class:llvm::BasicBlock
getFirstNonPHIOrDbgOrLifetime	BasicBlock.h	/^  const Instruction* getFirstNonPHIOrDbgOrLifetime() const {$/;"	f	class:llvm::BasicBlock
getFirstUnallocated	CodeGen/CallingConvLower.h	/^  unsigned getFirstUnallocated(const uint16_t *Regs, unsigned NumRegs) const {$/;"	f	class:llvm::CCState
getFixups	MC/MCAssembler.h	/^  SmallVectorImpl<MCFixup> &getFixups() { return Fixups; }$/;"	f	class:llvm::MCInstFragment
getFixups	MC/MCAssembler.h	/^  const SmallVectorImpl<MCFixup> &getFixups() const { return Fixups; }$/;"	f	class:llvm::MCInstFragment
getFixups	MC/MCAssembler.h	/^  const std::vector<MCFixup> &getFixups() const { return Fixups; }$/;"	f	class:llvm::MCDataFragment
getFixups	MC/MCAssembler.h	/^  std::vector<MCFixup> &getFixups() { return Fixups; }$/;"	f	class:llvm::MCDataFragment
getFlag	CodeGen/MachineInstr.h	/^  bool getFlag(MIFlag Flag) const {$/;"	f	class:llvm::MachineInstr
getFlagWord	InlineAsm.h	/^  static unsigned getFlagWord(unsigned Kind, unsigned NumOps) {$/;"	f	class:llvm::InlineAsm
getFlagWordForMatchingOp	InlineAsm.h	/^  static unsigned getFlagWordForMatchingOp(unsigned InputFlag,$/;"	f	class:llvm::InlineAsm
getFlagWordForRegClass	InlineAsm.h	/^  static unsigned getFlagWordForRegClass(unsigned InputFlag, unsigned RC) {$/;"	f	class:llvm::InlineAsm
getFlags	CodeGen/MachineInstr.h	/^  uint8_t getFlags() const {$/;"	f	class:llvm::MachineInstr
getFlags	CodeGen/MachineMemOperand.h	/^  unsigned int getFlags() const { return Flags & ((1 << MOMaxBits) - 1); }$/;"	f	class:llvm::MachineMemOperand
getFlags	DebugInfo.h	/^    StringRef getFlags() const       { return getStringField(8);   }$/;"	f	class:llvm::DICompileUnit
getFlags	DebugInfo.h	/^    unsigned getFlags() const           { return getUnsignedField(8); }$/;"	f	class:llvm::DIType
getFlags	MC/MCAssembler.h	/^  uint32_t getFlags() const { return Flags; }$/;"	f	class:llvm::MCSymbolData
getFlags	MC/MCDwarf.h	/^    unsigned getFlags() const { return Flags; }$/;"	f	class:llvm::MCDwarfLoc
getFlags	MC/MCInstrDesc.h	/^  unsigned getFlags() const { return Flags; }$/;"	f	class:llvm::MCInstrDesc
getFlags	MC/MCSectionELF.h	/^  unsigned getFlags() const { return Flags; }$/;"	f	class:llvm::MCSectionELF
getFlags	Object/ObjectFile.h	/^inline error_code SymbolRef::getFlags(uint32_t &Result) const {$/;"	f	class:llvm::object::SymbolRef
getFloatTy	IRBuilder.h	/^  Type *getFloatTy() {$/;"	f	class:llvm::IRBuilderBase
getFloatingPointVT	CodeGen/ValueTypes.h	/^    static EVT getFloatingPointVT(unsigned BitWidth) {$/;"	f	struct:llvm::EVT
getFloatingPointVT	CodeGen/ValueTypes.h	/^    static MVT getFloatingPointVT(unsigned BitWidth) {$/;"	f	class:llvm::MVT
getFnAttributes	Attributes.h	/^  Attributes getFnAttributes() const {$/;"	f	class:llvm::AttrListPtr
getFnAttributes	Function.h	/^  Attributes getFnAttributes() const {$/;"	f	class:llvm::Function
getFnStubEntry	CodeGen/MachineModuleInfoImpls.h	/^    StubValueTy &getFnStubEntry(MCSymbol *Sym) {$/;"	f	class:llvm::MachineModuleInfoMachO
getFolder	IRBuilder.h	/^  const T &getFolder() { return Folder; }$/;"	f	class:llvm::IRBuilder
getFormattingFlag	Support/CommandLine.h	/^  inline enum FormattingFlags getFormattingFlag() const {$/;"	f	class:llvm::cl::Option
getForwardedTarget	Analysis/AliasSetTracker.h	/^  AliasSet *getForwardedTarget(AliasSetTracker &AST) {$/;"	f	class:llvm::AliasSet
getFourByteConstantSection	MC/MCObjectFileInfo.h	/^  const MCSection *getFourByteConstantSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getFragment	MC/MCAssembler.h	/^  MCFragment *getFragment() const { return Fragment; }$/;"	f	class:llvm::MCSymbolData
getFragmentList	MC/MCAssembler.h	/^  FragmentListType &getFragmentList() { return Fragments; }$/;"	f	class:llvm::MCSectionData
getFragmentList	MC/MCAssembler.h	/^  const FragmentListType &getFragmentList() const { return Fragments; }$/;"	f	class:llvm::MCSectionData
getFrame	DebugInfo/DIContext.h	/^  DILineInfo getFrame(unsigned Index) const {$/;"	f	class:llvm::DIInliningInfo
getFrameIdx	CodeGen/MachineFrameInfo.h	/^  int getFrameIdx()                        const { return FrameIdx; }$/;"	f	class:llvm::CalleeSavedInfo
getFrameIndex	CodeGen/PseudoSourceValue.h	/^    int getFrameIndex() const { return FI; }$/;"	f	class:llvm::FixedStackPseudoSourceValue
getFrameIndexInstrOffset	Target/TargetRegisterInfo.h	/^  virtual int64_t getFrameIndexInstrOffset(const MachineInstr *MI,$/;"	f	class:llvm::TargetRegisterInfo
getFrameInfo	CodeGen/MachineFunction.h	/^  MachineFrameInfo *getFrameInfo() { return FrameInfo; }$/;"	f	class:llvm::MachineFunction
getFrameInfo	CodeGen/MachineFunction.h	/^  const MachineFrameInfo *getFrameInfo() const { return FrameInfo; }$/;"	f	class:llvm::MachineFunction
getFrameInfo	MC/MCStreamer.h	/^    const MCDwarfFrameInfo &getFrameInfo(unsigned i) {$/;"	f	class:llvm::MCStreamer
getFrameInfos	MC/MCStreamer.h	/^    ArrayRef<MCDwarfFrameInfo> getFrameInfos() {$/;"	f	class:llvm::MCStreamer
getFrameLowering	Target/TargetMachine.h	/^  virtual const TargetFrameLowering *getFrameLowering() const { return 0; }$/;"	f	class:llvm::TargetMachine
getFrameMoves	CodeGen/MachineModuleInfo.h	/^  std::vector<MachineMove> &getFrameMoves() { return FrameMoves; }$/;"	f	class:llvm::MachineModuleInfo
getFrameSize	CodeGen/GCMetadata.h	/^    uint64_t getFrameSize() const { return FrameSize; }$/;"	f	class:llvm::GCFunctionInfo
getFrequency	Support/BlockFrequency.h	/^  uint64_t getFrequency() const { return Frequency; }$/;"	f	class:llvm::BlockFrequency
getFromOpaqueValue	ADT/PointerIntPair.h	/^  static PointerIntPair getFromOpaqueValue(const void *V) {$/;"	f	class:llvm::PointerIntPair
getFromOpaqueValue	ADT/PointerIntPair.h	/^  static PointerIntPair getFromOpaqueValue(void *V) {$/;"	f	class:llvm::PointerIntPair
getFromOpaqueValue	ADT/PointerUnion.h	/^    static inline PointerUnion getFromOpaqueValue(void *VP) {$/;"	f	class:llvm::PointerUnionUIntTraits
getFromOpaqueValue	ADT/PointerUnion.h	/^    static inline PointerUnion3 getFromOpaqueValue(void *VP) {$/;"	f	class:llvm::PointerUnion3
getFromOpaqueValue	ADT/PointerUnion.h	/^    static inline PointerUnion4 getFromOpaqueValue(void *VP) {$/;"	f	class:llvm::PointerUnion4
getFromPointer	Support/SMLoc.h	/^  static SMLoc getFromPointer(const char *Ptr) {$/;"	f	class:llvm::SMLoc
getFromVoidPointer	ADT/IntervalMap.h	/^    static inline void *getFromVoidPointer(void *P) { return P; }$/;"	f	struct:llvm::IntervalMapImpl::NodeRef::CacheAlignedPointerTraits
getFromVoidPointer	ADT/PointerIntPair.h	/^  getFromVoidPointer(const void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	ADT/PointerIntPair.h	/^  getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	ADT/PointerUnion.h	/^    getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	ADT/PointerUnion.h	/^    static inline void *getFromVoidPointer(void *P) { return P; }$/;"	f	class:llvm::PointerUnionUIntTraits
getFromVoidPointer	Instruction.h	/^  static inline PT getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	Support/PointerLikeTypeTraits.h	/^  static inline T *getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	Support/PointerLikeTypeTraits.h	/^  static inline const T *getFromVoidPointer(const void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	Support/PointerLikeTypeTraits.h	/^  static inline uintptr_t getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	Support/ValueHandle.h	/^  static inline ValueHandleBase **getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	Use.h	/^  static inline Use **getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	Value.h	/^  static inline PT getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFunc	ADT/STLExtras.h	/^  inline const UnaryFunc &getFunc() const { return Fn; }$/;"	f	class:llvm::mapped_iterator
getFunction	Analysis/CallGraph.h	/^  Function *getFunction() const { return F; }$/;"	f	class:llvm::CallGraphNode
getFunction	Analysis/ProfileDataLoader.h	/^  static const FType *getFunction(Edge e) {$/;"	f	class:llvm::ProfileDataT
getFunction	Analysis/ProfileInfo.h	/^    static const FType* getFunction(Edge e) {$/;"	f	class:llvm::ProfileInfoT
getFunction	CodeGen/GCMetadata.h	/^    const Function &getFunction() const { return F; }$/;"	f	class:llvm::GCFunctionInfo
getFunction	CodeGen/MachineFunction.h	/^  const Function *getFunction() const { return Fn; }$/;"	f	class:llvm::MachineFunction
getFunction	Constants.h	/^  Function *getFunction() const { return (Function*)Op<0>().get(); }$/;"	f	class:llvm::BlockAddress
getFunction	DebugInfo.h	/^    Function *getFunction() const { return getFunctionField(16); }$/;"	f	class:llvm::DISubprogram
getFunctionContextIndex	CodeGen/MachineFrameInfo.h	/^  int getFunctionContextIndex() const { return FunctionContextIdx; }$/;"	f	class:llvm::MachineFrameInfo
getFunctionDeclaration	DebugInfo.h	/^    DISubprogram getFunctionDeclaration() const {$/;"	f	class:llvm::DISubprogram
getFunctionList	Module.h	/^  FunctionListType       &getFunctionList()           { return FunctionList; }$/;"	f	class:llvm::Module
getFunctionList	Module.h	/^  const FunctionListType &getFunctionList() const     { return FunctionList; }$/;"	f	class:llvm::Module
getFunctionName	DebugInfo/DIContext.h	/^  const char *getFunctionName() { return FunctionName.c_str(); }$/;"	f	class:llvm::DILineInfo
getFunctionNumber	CodeGen/MachineFunction.h	/^  unsigned getFunctionNumber() const { return FunctionNumber; }$/;"	f	class:llvm::MachineFunction
getGEPReturnType	Instructions.h	/^  static Type *getGEPReturnType(Value *Ptr, ArrayRef<Value *> IdxList) {$/;"	f	class:llvm::GetElementPtrInst
getGLOBAL_OFFSET_TABLE	CodeGen/SelectionDAG.h	/^  SDValue getGLOBAL_OFFSET_TABLE(EVT VT) {$/;"	f	class:llvm::SelectionDAG
getGMI	CodeGen/MachineFunction.h	/^  GCModuleInfo *getGMI() const { return GMI; }$/;"	f	class:llvm::MachineFunction
getGOTIndex	CodeGen/MachineRelocation.h	/^  unsigned getGOTIndex() const {$/;"	f	class:llvm::MachineRelocation
getGPRel32Directive	MC/MCAsmInfo.h	/^    const char *getGPRel32Directive() const { return GPRel32Directive; }$/;"	f	class:llvm::MCAsmInfo
getGPRel64Directive	MC/MCAsmInfo.h	/^    const char *getGPRel64Directive() const { return GPRel64Directive; }$/;"	f	class:llvm::MCAsmInfo
getGV	CodeGen/MachineRelocation.h	/^  static MachineRelocation getGV(uintptr_t offset, unsigned RelocationType, $/;"	f	class:llvm::MachineRelocation
getGVStubEntry	CodeGen/MachineModuleInfoImpls.h	/^    StubValueTy &getGVStubEntry(MCSymbol *Sym) {$/;"	f	class:llvm::MachineModuleInfoELF
getGVStubEntry	CodeGen/MachineModuleInfoImpls.h	/^    StubValueTy &getGVStubEntry(MCSymbol *Sym) {$/;"	f	class:llvm::MachineModuleInfoMachO
getGenDwarfFileNumber	MC/MCContext.h	/^    unsigned getGenDwarfFileNumber() { return GenDwarfFileNumber; }$/;"	f	class:llvm::MCContext
getGenDwarfForAssembly	MC/MCContext.h	/^    bool getGenDwarfForAssembly() { return GenDwarfForAssembly; }$/;"	f	class:llvm::MCContext
getGenDwarfSection	MC/MCContext.h	/^    const MCSection *getGenDwarfSection() { return GenDwarfSection; }$/;"	f	class:llvm::MCContext
getGenDwarfSectionEndSym	MC/MCContext.h	/^    MCSymbol *getGenDwarfSectionEndSym() { return GenDwarfSectionEndSym; }$/;"	f	class:llvm::MCContext
getGenDwarfSectionStartSym	MC/MCContext.h	/^    MCSymbol *getGenDwarfSectionStartSym() { return GenDwarfSectionStartSym; }$/;"	f	class:llvm::MCContext
getGetElementPtr	Constants.h	/^  static Constant *getGetElementPtr(Constant *C,$/;"	f	class:llvm::ConstantExpr
getGlobal	CodeGen/MachineOperand.h	/^  const GlobalValue *getGlobal() const {$/;"	f	class:llvm::MachineOperand
getGlobal	CodeGen/SelectionDAGNodes.h	/^  const GlobalValue *getGlobal() const { return TheGlobal; }$/;"	f	class:llvm::GlobalAddressSDNode
getGlobal	DebugInfo.h	/^    GlobalVariable *getGlobal() const { return getGlobalVariableField(11); }$/;"	f	class:llvm::DIGlobalVariable
getGlobalAddressMap	ExecutionEngine/ExecutionEngine.h	/^  GlobalAddressMapTy &getGlobalAddressMap(const MutexGuard &) {$/;"	f	class:llvm::ExecutionEngineState
getGlobalAddressReverseMap	ExecutionEngine/ExecutionEngine.h	/^  getGlobalAddressReverseMap(const MutexGuard &) {$/;"	f	class:llvm::ExecutionEngineState
getGlobalDirective	MC/MCAsmInfo.h	/^    const char *getGlobalDirective() const {$/;"	f	class:llvm::MCAsmInfo
getGlobalList	Module.h	/^  GlobalListType         &getGlobalList()             { return GlobalList; }$/;"	f	class:llvm::Module
getGlobalList	Module.h	/^  const GlobalListType   &getGlobalList() const       { return GlobalList; }$/;"	f	class:llvm::Module
getGlobalPrefix	MC/MCAsmInfo.h	/^    const char *getGlobalPrefix() const {$/;"	f	class:llvm::MCAsmInfo
getGlobalValue	CodeGen/MachineRelocation.h	/^  GlobalValue *getGlobalValue() const {$/;"	f	class:llvm::MachineRelocation
getGluedMachineNode	CodeGen/SelectionDAGNodes.h	/^  const SDNode *getGluedMachineNode() const {$/;"	f	class:llvm::SDNode
getGluedNode	CodeGen/SelectionDAGNodes.h	/^  SDNode *getGluedNode() const {$/;"	f	class:llvm::SDNode
getGluedUser	CodeGen/SelectionDAGNodes.h	/^  SDNode *getGluedUser() const {$/;"	f	class:llvm::SDNode
getGraph	CodeGen/PBQP/HeuristicBase.h	/^    Graph& getGraph() { return g; }$/;"	f	class:PBQP::HeuristicBase
getGraph	CodeGen/PBQP/HeuristicSolver.h	/^    Graph& getGraph() { return g; }$/;"	f	class:PBQP::HeuristicSolverImpl
getGraph	CodeGen/RegAllocPBQP.h	/^    PBQP::Graph& getGraph() { return graph; }$/;"	f	class:llvm::PBQPRAProblem
getGraph	CodeGen/RegAllocPBQP.h	/^    const PBQP::Graph& getGraph() const { return graph; }$/;"	f	class:llvm::PBQPRAProblem
getGraphName	Analysis/CFGPrinter.h	/^  static std::string getGraphName(const Function *F) {$/;"	f	struct:llvm::DOTGraphTraits
getGraphName	Support/DOTGraphTraits.h	/^  static std::string getGraphName(const GraphType &) { return ""; }$/;"	f	struct:llvm::DefaultDOTGraphTraits
getGraphProperties	Support/DOTGraphTraits.h	/^  static std::string getGraphProperties(const GraphType &) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getGroup	Bitcode/Archive.h	/^    unsigned getGroup() const            { return info.getGroup(); }$/;"	f	class:llvm::ArchiveMember
getGroup	MC/MCSectionELF.h	/^  const MCSymbol *getGroup() const { return Group; }$/;"	f	class:llvm::MCSectionELF
getGroup	Support/PathV1.h	/^    uint32_t getGroup() const { return group; }$/;"	f	class:llvm::sys::FileStatus
getHalfSizedIntegerVT	CodeGen/ValueTypes.h	/^    EVT getHalfSizedIntegerVT(LLVMContext &Context) const {$/;"	f	struct:llvm::EVT
getHasDebugValue	CodeGen/SelectionDAGNodes.h	/^  bool getHasDebugValue() const { return HasDebugValue; }$/;"	f	class:llvm::SDNode
getHashValue	ADT/DenseMap.h	/^  static unsigned getHashValue(const KeyT &Val) {$/;"	f	class:llvm::DenseMapBase
getHashValue	ADT/DenseMap.h	/^  static unsigned getHashValue(const LookupKeyT &Val) {$/;"	f	class:llvm::DenseMapBase
getHashValue	ADT/DenseMapInfo.h	/^  static unsigned getHashValue(const Pair& PairVal) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/DenseMapInfo.h	/^  static unsigned getHashValue(const T *PtrVal) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/DenseMapInfo.h	/^  static unsigned getHashValue(const char& Val) { return Val * 37U; }$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/DenseMapInfo.h	/^  static unsigned getHashValue(const int& Val) { return (unsigned)(Val * 37U); }$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/DenseMapInfo.h	/^  static unsigned getHashValue(const long long& Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/DenseMapInfo.h	/^  static unsigned getHashValue(const long& Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/DenseMapInfo.h	/^  static unsigned getHashValue(const unsigned long long& Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/DenseMapInfo.h	/^  static unsigned getHashValue(const unsigned long& Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/DenseMapInfo.h	/^  static unsigned getHashValue(const unsigned& Val) { return Val * 37U; }$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/ImmutableList.h	/^  static unsigned getHashValue(ImmutableList<T> X) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/PointerIntPair.h	/^  static unsigned getHashValue(Ty V) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/ValueMap.h	/^  static unsigned getHashValue(const KeyT &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	ADT/ValueMap.h	/^  static unsigned getHashValue(const VH &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	Analysis/AliasAnalysis.h	/^  static unsigned getHashValue(const AliasAnalysis::Location &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	CodeGen/SelectionDAGNodes.h	/^  static unsigned getHashValue(const SDValue &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHashValue	Support/ValueHandle.h	/^  static unsigned getHashValue(const AssertingVH<T> &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHazardType	CodeGen/ScheduleHazardRecognizer.h	/^  virtual HazardType getHazardType(SUnit *m, int Stalls = 0) {$/;"	f	class:llvm::ScheduleHazardRecognizer
getHdrSize	Target/TargetELFWriterInfo.h	/^    unsigned getHdrSize() const { return is64Bit ? 64 : 52; }$/;"	f	class:llvm::TargetELFWriterInfo
getHead	ADT/ImmutableList.h	/^  const T& getHead() const { return Head; }$/;"	f	class:llvm::ImmutableListImpl
getHead	ADT/ImmutableList.h	/^  const T& getHead() {$/;"	f	class:llvm::ImmutableList
getHeader	Analysis/LoopInfo.h	/^  BlockT *getHeader() const { return Blocks.front(); }$/;"	f	class:llvm::LoopBase
getHeader	Object/MachOObject.h	/^  const macho::Header &getHeader() const { return Header; }$/;"	f	class:llvm::object::MachOObject
getHeader64Ext	Object/MachOObject.h	/^  const macho::Header64Ext &getHeader64Ext() const {$/;"	f	class:llvm::object::MachOObject
getHeaderNode	Analysis/Interval.h	/^  inline BasicBlock *getHeaderNode() const { return HeaderNode; }$/;"	f	class:llvm::Interval
getHeaderSize	Object/MachOObject.h	/^  unsigned getHeaderSize() const {$/;"	f	class:llvm::object::MachOObject
getHeight	ADT/ImmutableMap.h	/^  unsigned getHeight() const { return Root ? Root->getHeight() : 0; }$/;"	f	class:llvm::ImmutableMap
getHeight	ADT/ImmutableMap.h	/^  unsigned getHeight() const { return Root ? Root->getHeight() : 0; }$/;"	f	class:llvm::ImmutableMapRef
getHeight	ADT/ImmutableSet.h	/^  unsigned        getHeight(TreeTy* T) const { return T ? T->getHeight() : 0; }$/;"	f	class:llvm::ImutAVLFactory
getHeight	ADT/ImmutableSet.h	/^  unsigned getHeight() const { return Root ? Root->getHeight() : 0; }$/;"	f	class:llvm::ImmutableSet
getHeight	ADT/ImmutableSet.h	/^  unsigned getHeight() const { return Root ? Root->getHeight() : 0; }$/;"	f	class:llvm::ImmutableSetRef
getHeight	ADT/ImmutableSet.h	/^  unsigned getHeight() const { return height; }$/;"	f	class:llvm::ImutAVLTree
getHeight	CodeGen/ScheduleDAG.h	/^    unsigned getHeight() const {$/;"	f	class:llvm::SUnit
getHeuristicData	CodeGen/PBQP/HeuristicSolver.h	/^      HeuristicEdgeData& getHeuristicData() { return hData; }$/;"	f	class:PBQP::HeuristicSolverImpl::EdgeData
getHeuristicData	CodeGen/PBQP/HeuristicSolver.h	/^      HeuristicNodeData& getHeuristicData() { return hData; }$/;"	f	class:PBQP::HeuristicSolverImpl::NodeData
getHeuristicEdgeData	CodeGen/PBQP/HeuristicSolver.h	/^    HeuristicEdgeData& getHeuristicEdgeData(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
getHeuristicEdgeData	CodeGen/PBQP/Heuristics/Briggs.h	/^      EdgeData& getHeuristicEdgeData(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::Heuristics::Briggs
getHeuristicNodeData	CodeGen/PBQP/HeuristicSolver.h	/^    HeuristicNodeData& getHeuristicNodeData(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
getHeuristicNodeData	CodeGen/PBQP/Heuristics/Briggs.h	/^      NodeData& getHeuristicNodeData(Graph::NodeItr nItr) {$/;"	f	class:PBQP::Heuristics::Briggs
getHi	DebugInfo.h	/^    uint64_t getHi() const { return getUInt64Field(2); }$/;"	f	class:llvm::DISubrange
getHidden	Object/ObjectFile.h	/^inline error_code RelocationRef::getHidden(bool &Result) const {$/;"	f	class:llvm::object::RelocationRef
getHiddenDeclarationVisibilityAttr	MC/MCAsmInfo.h	/^    MCSymbolAttr getHiddenDeclarationVisibilityAttr() const {$/;"	f	class:llvm::MCAsmInfo
getHiddenGVStubEntry	CodeGen/MachineModuleInfoImpls.h	/^    StubValueTy &getHiddenGVStubEntry(MCSymbol *Sym) {$/;"	f	class:llvm::MachineModuleInfoMachO
getHiddenVisibilityAttr	MC/MCAsmInfo.h	/^    MCSymbolAttr getHiddenVisibilityAttr() const { return HiddenVisibilityAttr;}$/;"	f	class:llvm::MCAsmInfo
getHigh	Support/IntegersSubset.h	/^    const IntType& getHigh() const {$/;"	f	class:llvm::IntRange
getHighBitsSet	ADT/APInt.h	/^  static APInt getHighBitsSet(unsigned numBits, unsigned hiBitsSet) {$/;"	f	class:llvm::APInt
getHintNameRVA	Support/COFF.h	/^    uint32_t getHintNameRVA() const {$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
getID	CodeGen/MachineScheduler.h	/^  unsigned getID() const { return ID; }$/;"	f	class:llvm::ReadyQueue
getID	MC/MCRegisterInfo.h	/^  unsigned getID() const { return ID; }$/;"	f	class:llvm::MCRegisterClass
getID	TableGen/Record.h	/^  unsigned getID() const { return ID; }$/;"	f	class:llvm::Record
getID	Target/TargetRegisterInfo.h	/^  unsigned getID() const { return MC->getID(); }$/;"	f	class:llvm::TargetRegisterClass
getIDom	Analysis/Dominators.h	/^  DomTreeNodeBase<NodeT> *getIDom() const { return IDom; }$/;"	f	class:llvm::DomTreeNodeBase
getIDom	Analysis/Dominators.h	/^  inline NodeT *getIDom(NodeT *BB) const {$/;"	f	class:llvm::DominatorTreeBase
getISAEncoding	CodeGen/AsmPrinter.h	/^    virtual unsigned getISAEncoding() { return 0; }$/;"	f	class:llvm::AsmPrinter
getISucc	Analysis/RegionIterator.h	/^  RegionNode* getISucc(BasicBlock* BB) const {$/;"	f	class:llvm::RNSuccIterator
getIdentifier	MC/MCParser/MCAsmLexer.h	/^  StringRef getIdentifier() const {$/;"	f	class:llvm::AsmToken
getImm	CodeGen/MachineOperand.h	/^  int64_t getImm() const {$/;"	f	class:llvm::MachineOperand
getImm	MC/MCInst.h	/^  int64_t getImm() const {$/;"	f	class:llvm::MCOperand
getImmutablePasses	PassManagers.h	/^  inline SmallVectorImpl<ImmutablePass *>& getImmutablePasses() {$/;"	f	class:llvm::PMTopLevelManager
getImplRegState	CodeGen/MachineInstrBuilder.h	/^inline unsigned getImplRegState(bool B) {$/;"	f	namespace:llvm
getImplicitDefs	MC/MCInstrDesc.h	/^  const uint16_t *getImplicitDefs() const {$/;"	f	class:llvm::MCInstrDesc
getImplicitUses	MC/MCInstrDesc.h	/^  const uint16_t *getImplicitUses() const {$/;"	f	class:llvm::MCInstrDesc
getInBoundsGetElementPtr	Constants.h	/^  static Constant *getInBoundsGetElementPtr(Constant *C,$/;"	f	class:llvm::ConstantExpr
getIncomingBlock	Instructions.h	/^  BasicBlock *getIncomingBlock(const Use &U) const {$/;"	f	class:llvm::PHINode
getIncomingBlock	Instructions.h	/^  BasicBlock *getIncomingBlock(unsigned i) const {$/;"	f	class:llvm::PHINode
getIncomingBlock	Instructions.h	/^  BasicBlock *getIncomingBlock(value_use_iterator<U> I) const {$/;"	f	class:llvm::PHINode
getIncomingValue	Instructions.h	/^  Value *getIncomingValue(unsigned i) const {$/;"	f	class:llvm::PHINode
getIncomingValueForBlock	Instructions.h	/^  Value *getIncomingValueForBlock(const BasicBlock *BB) const {$/;"	f	class:llvm::PHINode
getIncomingValueNumForOperand	Instructions.h	/^  static unsigned getIncomingValueNumForOperand(unsigned i) {$/;"	f	class:llvm::PHINode
getIndex	CodeGen/MachineOperand.h	/^  int getIndex() const {$/;"	f	class:llvm::MachineOperand
getIndex	CodeGen/SelectionDAGNodes.h	/^  int getIndex() const { return FI; }$/;"	f	class:llvm::FrameIndexSDNode
getIndex	CodeGen/SelectionDAGNodes.h	/^  int getIndex() const { return Index; }$/;"	f	class:llvm::TargetIndexSDNode
getIndex	CodeGen/SelectionDAGNodes.h	/^  int getIndex() const { return JTI; }$/;"	f	class:llvm::JumpTableSDNode
getIndex	CodeGen/SlotIndexes.h	/^    int getIndex() const {$/;"	f	class:llvm::SlotIndex
getIndex	CodeGen/SlotIndexes.h	/^    unsigned getIndex() const { return index; }$/;"	f	class:llvm::IndexListEntry
getIndex	MC/MCAssembler.h	/^  uint64_t getIndex() const { return Index; }$/;"	f	class:llvm::MCSymbolData
getIndexAfter	CodeGen/SlotIndexes.h	/^    SlotIndex getIndexAfter(const MachineInstr *MI) const {$/;"	f	class:llvm::SlotIndexes
getIndexBefore	CodeGen/SlotIndexes.h	/^    SlotIndex getIndexBefore(const MachineInstr *MI) const {$/;"	f	class:llvm::SlotIndexes
getIndexOperand	Instructions.h	/^  Value *getIndexOperand() { return Op<1>(); }$/;"	f	class:llvm::ExtractElementInst
getIndexOperand	Instructions.h	/^  const Value *getIndexOperand() const { return Op<1>(); }$/;"	f	class:llvm::ExtractElementInst
getIndexedLoadAction	Target/TargetLowering.h	/^  getIndexedLoadAction(unsigned IdxMode, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getIndexedStoreAction	Target/TargetLowering.h	/^  getIndexedStoreAction(unsigned IdxMode, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getIndexedType	Support/GetElementPtrTypeIterator.h	/^    Type *getIndexedType() const {$/;"	f	class:llvm::generic_gep_type_iterator
getIndices	Instructions.h	/^  ArrayRef<unsigned> getIndices() const {$/;"	f	class:llvm::ExtractValueInst
getIndices	Instructions.h	/^  ArrayRef<unsigned> getIndices() const {$/;"	f	class:llvm::InsertValueInst
getIndirectSymbol	CodeGen/MachineRelocation.h	/^  static MachineRelocation getIndirectSymbol(uintptr_t offset,$/;"	f	class:llvm::MachineRelocation
getIndirectSymbols	MC/MCAssembler.h	/^  std::vector<IndirectSymbolData> &getIndirectSymbols() {$/;"	f	class:llvm::MCAssembler
getInf	ADT/APFloat.h	/^    static APFloat getInf(const fltSemantics &Sem, bool Negative = false) {$/;"	f	class:llvm::APFloat
getInfo	CodeGen/MachineFunction.h	/^  Ty *getInfo() {$/;"	f	class:llvm::MachineFunction
getInfo	CodeGen/MachineFunction.h	/^  const Ty *getInfo() const {$/;"	f	class:llvm::MachineFunction
getInitialFrameState	MC/MCAsmInfo.h	/^    const std::vector<MachineMove> &getInitialFrameState() const {$/;"	f	class:llvm::MCAsmInfo
getInitializer	GlobalVariable.h	/^  inline Constant *getInitializer() {$/;"	f	class:llvm::GlobalVariable
getInitializer	GlobalVariable.h	/^  inline const Constant *getInitializer() const {$/;"	f	class:llvm::GlobalVariable
getInlineAsmEnd	MC/MCAsmInfo.h	/^    const char *getInlineAsmEnd() const {$/;"	f	class:llvm::MCAsmInfo
getInlineAsmStart	MC/MCAsmInfo.h	/^    const char *getInlineAsmStart() const {$/;"	f	class:llvm::MCAsmInfo
getInlineBuckets	ADT/DenseMap.h	/^  BucketT *getInlineBuckets() {$/;"	f	class:llvm::SmallDenseMap
getInlineBuckets	ADT/DenseMap.h	/^  const BucketT *getInlineBuckets() const {$/;"	f	class:llvm::SmallDenseMap
getInlineThreshold	Transforms/IPO/InlinerPass.h	/^  unsigned getInlineThreshold() const { return InlineThreshold; }$/;"	f	struct:llvm::Inliner
getInlinedAt	CodeGen/LexicalScopes.h	/^  const MDNode *getInlinedAt() const            { return InlinedAtLocation; }$/;"	f	class:llvm::LexicalScope
getInsertFencesForAtomic	Target/TargetLowering.h	/^  bool getInsertFencesForAtomic() const {$/;"	f	class:llvm::TargetLowering
getInsertedValueOperand	Instructions.h	/^  Value *getInsertedValueOperand() {$/;"	f	class:llvm::InsertValueInst
getInsertedValueOperand	Instructions.h	/^  const Value *getInsertedValueOperand() const {$/;"	f	class:llvm::InsertValueInst
getInsertedValueOperandIndex	Instructions.h	/^  static unsigned getInsertedValueOperandIndex() {$/;"	f	class:llvm::InsertValueInst
getInst	Analysis/MemoryDependenceAnalysis.h	/^    Instruction *getInst() const {$/;"	f	class:llvm::MemDepResult
getInst	MC/MCAssembler.h	/^  MCInst &getInst() { return Inst; }$/;"	f	class:llvm::MCInstFragment
getInst	MC/MCAssembler.h	/^  const MCInst &getInst() const { return Inst; }$/;"	f	class:llvm::MCInstFragment
getInst	MC/MCInst.h	/^  const MCInst *getInst() const {$/;"	f	class:llvm::MCOperand
getInstList	BasicBlock.h	/^        InstListType &getInstList()       { return InstList; }$/;"	f	class:llvm::BasicBlock
getInstList	BasicBlock.h	/^  const InstListType &getInstList() const { return InstList; }$/;"	f	class:llvm::BasicBlock
getInstSize	MC/MCAssembler.h	/^  unsigned getInstSize() const { return Code.size(); }$/;"	f	class:llvm::MCInstFragment
getInstance	MC/MCLabel.h	/^    unsigned getInstance() const { return Instance; }$/;"	f	class:llvm::MCLabel
getInstr	CodeGen/ScheduleDAG.h	/^    MachineInstr *getInstr() const {$/;"	f	class:llvm::SUnit
getInstr	CodeGen/SlotIndexes.h	/^    MachineInstr* getInstr() const { return mi; }$/;"	f	class:llvm::IndexListEntry
getInstrDesc	CodeGen/ScheduleDAG.h	/^    const MCInstrDesc *getInstrDesc(const SUnit *SU) const {$/;"	f	class:llvm::ScheduleDAG
getInstrInfo	CodeGen/TargetSchedule.h	/^  const TargetInstrInfo *getInstrInfo() const { return TII; }$/;"	f	class:llvm::TargetSchedModel
getInstrInfo	Target/TargetMachine.h	/^  virtual const TargetInstrInfo         *getInstrInfo() const { return 0; }$/;"	f	class:llvm::TargetMachine
getInstrIterator	CodeGen/MachineBasicBlock.h	/^    IterTy getInstrIterator() const {$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
getInstrItineraries	CodeGen/TargetSchedule.h	/^  const InstrItineraryData *getInstrItineraries() const {$/;"	f	class:llvm::TargetSchedModel
getInstrItineraryData	Target/TargetMachine.h	/^  virtual const InstrItineraryData *getInstrItineraryData() const {$/;"	f	class:llvm::TargetMachine
getInstrItins	CodeGen/DFAPacketizer.h	/^  const InstrItineraryData *getInstrItins() const { return InstrItins; }$/;"	f	class:llvm::DFAPacketizer
getInstruction	Support/CallSite.h	/^  InstrTy *getInstruction() const { return I.getPointer(); }$/;"	f	class:llvm::CallSiteBase
getInstructionFromIndex	CodeGen/LiveIntervalAnalysis.h	/^    MachineInstr* getInstructionFromIndex(SlotIndex index) const {$/;"	f	class:llvm::LiveIntervals
getInstructionFromIndex	CodeGen/SlotIndexes.h	/^    MachineInstr* getInstructionFromIndex(SlotIndex index) const {$/;"	f	class:llvm::SlotIndexes
getInstructionIndex	CodeGen/LiveIntervalAnalysis.h	/^    SlotIndex getInstructionIndex(const MachineInstr *instr) const {$/;"	f	class:llvm::LiveIntervals
getInstructionIndex	CodeGen/SlotIndexes.h	/^    SlotIndex getInstructionIndex(const MachineInstr *MI) const {$/;"	f	class:llvm::SlotIndexes
getInstructionIterator	Support/InstIterator.h	/^  inline BIty  &getInstructionIterator() { return BI; }$/;"	f	class:llvm::InstIterator
getInt	ADT/PointerIntPair.h	/^  IntType getInt() const {$/;"	f	class:llvm::PointerIntPair
getInt	IRBuilder.h	/^  ConstantInt *getInt(const APInt &AI) {$/;"	f	class:llvm::IRBuilderBase
getInt1	IRBuilder.h	/^  ConstantInt *getInt1(bool V) {$/;"	f	class:llvm::IRBuilderBase
getInt16	IRBuilder.h	/^  ConstantInt *getInt16(uint16_t C) {$/;"	f	class:llvm::IRBuilderBase
getInt16Ty	IRBuilder.h	/^  IntegerType *getInt16Ty() {$/;"	f	class:llvm::IRBuilderBase
getInt1Ty	IRBuilder.h	/^  IntegerType *getInt1Ty() {$/;"	f	class:llvm::IRBuilderBase
getInt32	IRBuilder.h	/^  ConstantInt *getInt32(uint32_t C) {$/;"	f	class:llvm::IRBuilderBase
getInt32Ty	IRBuilder.h	/^  IntegerType *getInt32Ty() {$/;"	f	class:llvm::IRBuilderBase
getInt64	IRBuilder.h	/^  ConstantInt *getInt64(uint64_t C) {$/;"	f	class:llvm::IRBuilderBase
getInt64Ty	IRBuilder.h	/^  IntegerType *getInt64Ty() {$/;"	f	class:llvm::IRBuilderBase
getInt8	IRBuilder.h	/^  ConstantInt *getInt8(uint8_t C) {$/;"	f	class:llvm::IRBuilderBase
getInt8PtrTy	IRBuilder.h	/^  PointerType *getInt8PtrTy(unsigned AddrSpace = 0) {$/;"	f	class:llvm::IRBuilderBase
getInt8Ty	IRBuilder.h	/^  IntegerType *getInt8Ty() {$/;"	f	class:llvm::IRBuilderBase
getIntVal	MC/MCParser/MCAsmLexer.h	/^  int64_t getIntVal() const {$/;"	f	class:llvm::AsmToken
getInteger	DerivedTypes.h	/^  static VectorType *getInteger(VectorType *VTy) {$/;"	f	class:llvm::VectorType
getIntegerVT	CodeGen/ValueTypes.h	/^    static EVT getIntegerVT(LLVMContext &Context, unsigned BitWidth) {$/;"	f	struct:llvm::EVT
getIntegerVT	CodeGen/ValueTypes.h	/^    static MVT getIntegerVT(unsigned BitWidth) {$/;"	f	class:llvm::MVT
getInterfacesImplemented	PassSupport.h	/^  const std::vector<const PassInfo*> &getInterfacesImplemented() const {$/;"	f	class:llvm::PassInfo
getInternalPointer	ADT/ImmutableList.h	/^  const ImmutableListImpl<T>* getInternalPointer() const {$/;"	f	class:llvm::ImmutableList
getInternalReadRegState	CodeGen/MachineInstrBuilder.h	/^inline unsigned getInternalReadRegState(bool B) {$/;"	f	namespace:llvm
getInterval	CodeGen/LiveIntervalAnalysis.h	/^    LiveInterval &getInterval(unsigned Reg) {$/;"	f	class:llvm::LiveIntervals
getInterval	CodeGen/LiveIntervalAnalysis.h	/^    const LiveInterval &getInterval(unsigned Reg) const {$/;"	f	class:llvm::LiveIntervals
getInterval	CodeGen/LiveStackAnalysis.h	/^    LiveInterval &getInterval(int Slot) {$/;"	f	class:llvm::LiveStacks
getInterval	CodeGen/LiveStackAnalysis.h	/^    const LiveInterval &getInterval(int Slot) const {$/;"	f	class:llvm::LiveStacks
getIntervalRegClass	CodeGen/LiveStackAnalysis.h	/^    const TargetRegisterClass *getIntervalRegClass(int Slot) const {$/;"	f	class:llvm::LiveStacks
getIntervals	Analysis/IntervalPartition.h	/^  const std::vector<Interval*> &getIntervals() const { return Intervals; }$/;"	f	class:llvm::IntervalPartition
getIntrinsicID	IntrinsicInst.h	/^    Intrinsic::ID getIntrinsicID() const {$/;"	f	class:llvm::IntrinsicInst
getIntrinsicInfo	Target/TargetMachine.h	/^  virtual const TargetIntrinsicInfo *getIntrinsicInfo() const { return 0; }$/;"	f	class:llvm::TargetMachine
getInversePredicate	InstrTypes.h	/^  Predicate getInversePredicate() const {$/;"	f	class:llvm::CmpInst
getIsa	MC/MCDwarf.h	/^    unsigned getIsa() const { return Isa; }$/;"	f	class:llvm::MCDwarfLoc
getIssueWidth	CodeGen/TargetSchedule.h	/^  unsigned getIssueWidth() const { return SchedModel.IssueWidth; }$/;"	f	class:llvm::TargetSchedModel
getItem	Support/IntegersSubset.h	/^  Range getItem(unsigned idx) const {$/;"	f	class:llvm::IntegersSubsetGeneric
getItemFromConstant	Support/IntegersSubset.h	/^  static Range getItemFromConstant(Constant *C, unsigned idx) {$/;"	f	class:llvm::IntegersSubset
getJITInfo	Target/TargetMachine.h	/^  virtual TargetJITInfo *getJITInfo() { return 0; }$/;"	f	class:llvm::TargetMachine
getJumpBufAlignment	Target/TargetLowering.h	/^  unsigned getJumpBufAlignment() const {$/;"	f	class:llvm::TargetLowering
getJumpBufAlignment	TargetTransformInfo.h	/^  virtual unsigned getJumpBufAlignment() const {$/;"	f	class:llvm::ScalarTargetTransformInfo
getJumpBufSize	Target/TargetLowering.h	/^  unsigned getJumpBufSize() const {$/;"	f	class:llvm::TargetLowering
getJumpBufSize	TargetTransformInfo.h	/^  virtual unsigned getJumpBufSize() const {$/;"	f	class:llvm::ScalarTargetTransformInfo
getJumpTable	CodeGen/MachineRelocation.h	/^  static MachineRelocation getJumpTable(uintptr_t offset,unsigned RelocationType,$/;"	f	class:llvm::MachineRelocation
getJumpTableIndex	CodeGen/MachineRelocation.h	/^  unsigned getJumpTableIndex() const {$/;"	f	class:llvm::MachineRelocation
getJumpTableInfo	CodeGen/MachineFunction.h	/^  MachineJumpTableInfo *getJumpTableInfo() { return JumpTableInfo; }$/;"	f	class:llvm::MachineFunction
getJumpTableInfo	CodeGen/MachineFunction.h	/^  const MachineJumpTableInfo *getJumpTableInfo() const { return JumpTableInfo; }$/;"	f	class:llvm::MachineFunction
getJumpTables	CodeGen/MachineJumpTableInfo.h	/^  const std::vector<MachineJumpTableEntry> &getJumpTables() const {$/;"	f	class:llvm::MachineJumpTableInfo
getKey	ADT/ImmutableMap.h	/^    key_type_ref getKey() const { return itr->getValue().first; }$/;"	f	class:llvm::ImmutableMap::iterator
getKey	ADT/ImmutableMap.h	/^    key_type_ref getKey() const { return itr->getValue().first; }$/;"	f	class:llvm::ImmutableMapRef::iterator
getKey	ADT/ScopedHashTable.h	/^  const K &getKey() const { return Key; }$/;"	f	class:llvm::ScopedHashTableVal
getKey	ADT/StringMap.h	/^  StringRef getKey() const {$/;"	f	class:llvm::StringMapEntry
getKeyData	ADT/StringMap.h	/^  const char *getKeyData() const {return reinterpret_cast<const char*>(this+1);}$/;"	f	class:llvm::StringMapEntry
getKeyLength	ADT/StringMap.h	/^  unsigned getKeyLength() const { return StrLen; }$/;"	f	class:llvm::StringMapEntryBase
getKillRegState	CodeGen/MachineInstrBuilder.h	/^inline unsigned getKillRegState(bool B) {$/;"	f	namespace:llvm
getKind	CodeGen/ScheduleDAG.h	/^    Kind getKind() const {$/;"	f	class:llvm::SDep
getKind	InlineAsm.h	/^  static unsigned getKind(unsigned Flags) {$/;"	f	class:llvm::InlineAsm
getKind	MC/MCAssembler.h	/^  FragmentType getKind() const { return Kind; }$/;"	f	class:llvm::MCFragment
getKind	MC/MCExpr.h	/^  ExprKind getKind() const { return Kind; }$/;"	f	class:llvm::MCExpr
getKind	MC/MCExpr.h	/^  VariantKind getKind() const { return Kind; }$/;"	f	class:llvm::MCSymbolRefExpr
getKind	MC/MCFixup.h	/^  MCFixupKind getKind() const { return MCFixupKind(Kind); }$/;"	f	class:llvm::MCFixup
getKind	MC/MCParser/MCAsmLexer.h	/^  AsmToken::TokenKind getKind() const { return CurTok.getKind(); }$/;"	f	class:llvm::MCAsmLexer
getKind	MC/MCParser/MCAsmLexer.h	/^  TokenKind getKind() const { return Kind; }$/;"	f	class:llvm::AsmToken
getKind	MC/MCSection.h	/^    SectionKind getKind() const { return Kind; }$/;"	f	class:llvm::MCSection
getKind	MC/MCTargetAsmLexer.h	/^  AsmToken::TokenKind getKind() const { return CurTok.getKind(); }$/;"	f	class:llvm::MCTargetAsmLexer
getKind	Support/SourceMgr.h	/^  SourceMgr::DiagKind getKind() const { return Kind; }$/;"	f	class:llvm::SMDiagnostic
getKind	Support/ValueHandle.h	/^  HandleBaseKind getKind() const { return PrevPair.getInt(); }$/;"	f	class:llvm::ValueHandleBase
getKind	TableGen/Record.h	/^  InitKind getKind() const { return Kind; }$/;"	f	class:llvm::Init
getKindForSize	MC/MCFixup.h	/^  static MCFixupKind getKindForSize(unsigned Size, bool isPCRel) {$/;"	f	class:llvm::MCFixup
getKnownAlignment	Transforms/Utils/Local.h	/^static inline unsigned getKnownAlignment(Value *V, const DataLayout *TD = 0) {$/;"	f	namespace:llvm
getLCOMMDirectiveAlignmentType	MC/MCAsmInfo.h	/^    LCOMM::LCOMMType getLCOMMDirectiveAlignmentType() const {$/;"	f	class:llvm::MCAsmInfo
getLHS	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *getLHS() const { return LHS; }$/;"	f	class:llvm::SCEVUDivExpr
getLHS	MC/MCExpr.h	/^  const MCExpr *getLHS() const { return LHS; }$/;"	f	class:llvm::MCBinaryExpr
getLHS	TableGen/Record.h	/^  Init *getLHS() const { return LHS; }$/;"	f	class:llvm::BinOpInit
getLHS	TableGen/Record.h	/^  Init *getLHS() const { return LHS; }$/;"	f	class:llvm::TernOpInit
getLHSKind	ADT/Twine.h	/^    NodeKind getLHSKind() const { return (NodeKind) LHSKind; }$/;"	f	class:llvm::Twine
getLLVMOpInfoCallback	MC/MCDisassembler.h	/^  LLVMOpInfoCallback getLLVMOpInfoCallback() const { return GetOpInfo; }$/;"	f	class:llvm::MCDisassembler
getLLVMSymbolLookupCallback	MC/MCDisassembler.h	/^  LLVMSymbolLookupCallback getLLVMSymbolLookupCallback() const {$/;"	f	class:llvm::MCDisassembler
getLSDAEncoding	MC/MCObjectFileInfo.h	/^  unsigned getLSDAEncoding() const { return LSDAEncoding; }$/;"	f	class:llvm::MCObjectFileInfo
getLSDASection	MC/MCObjectFileInfo.h	/^  const MCSection *getLSDASection() const { return LSDASection; }$/;"	f	class:llvm::MCObjectFileInfo
getLabel	CodeGen/SelectionDAGNodes.h	/^  MCSymbol *getLabel() const { return Label; }$/;"	f	class:llvm::EHLabelSDNode
getLabel	MC/MCDwarf.h	/^    MCSymbol *getLabel() const { return Label; }$/;"	f	class:llvm::MCCFIInstruction
getLabel	MC/MCDwarf.h	/^    MCSymbol *getLabel() const { return Label; }$/;"	f	class:llvm::MCGenDwarfLabelEntry
getLabel	MC/MCDwarf.h	/^    MCSymbol *getLabel() const { return Label; }$/;"	f	class:llvm::MCLineEntry
getLabel	MC/MCWin64EH.h	/^    MCSymbol *getLabel() const { return Label; }$/;"	f	class:llvm::MCWin64EHInstruction
getLabel	MC/MachineLocation.h	/^  MCSymbol *getLabel()                    const { return Label; }$/;"	f	class:llvm::MachineMove
getLabelLocations	CodeGen/JITCodeEmitter.h	/^  virtual DenseMap<MCSymbol*, uintptr_t> *getLabelLocations() { return 0; }$/;"	f	class:llvm::JITCodeEmitter
getLabelSuffix	MC/MCAsmInfo.h	/^    const char *getLabelSuffix() const {$/;"	f	class:llvm::MCAsmInfo
getLandingPads	CodeGen/MachineModuleInfo.h	/^  const std::vector<LandingPadInfo> &getLandingPads() const {$/;"	f	class:llvm::MachineModuleInfo
getLanguage	DebugInfo.h	/^    unsigned getLanguage() const   { return getUnsignedField(2); }$/;"	f	class:llvm::DICompileUnit
getLanguageSpecificData	Support/Win64EH.h	/^  void *getLanguageSpecificData() {$/;"	f	struct:llvm::Win64EH::UnwindInfo
getLanguageSpecificHandlerOffset	Support/Win64EH.h	/^  uint64_t getLanguageSpecificHandlerOffset() {$/;"	f	struct:llvm::Win64EH::UnwindInfo
getLargeRep	ADT/DenseMap.h	/^  LargeRep *getLargeRep() {$/;"	f	class:llvm::SmallDenseMap
getLargeRep	ADT/DenseMap.h	/^  const LargeRep *getLargeRep() const {$/;"	f	class:llvm::SmallDenseMap
getLargestLegalSuperClass	Target/TargetRegisterInfo.h	/^  getLargestLegalSuperClass(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::TargetRegisterInfo
getLastCalleeSavedAlias	CodeGen/RegisterClassInfo.h	/^  unsigned getLastCalleeSavedAlias(unsigned PhysReg) const {$/;"	f	class:llvm::RegisterClassInfo
getLastError	Linker.h	/^    const std::string &getLastError() const { return Error; }$/;"	f	class:llvm::Linker
getLastIndex	CodeGen/SlotIndexes.h	/^    SlotIndex getLastIndex() {$/;"	f	class:llvm::SlotIndexes
getLastLocalValue	CodeGen/FastISel.h	/^  MachineInstr *getLastLocalValue() { return LastLocalValue; }$/;"	f	class:llvm::FastISel
getLastValInScope	ADT/ScopedHashTable.h	/^  ScopedHashTableVal<K, V> *getLastValInScope() {$/;"	f	class:llvm::ScopedHashTableScope
getLatency	CodeGen/LatencyPriorityQueue.h	/^    unsigned getLatency(unsigned NodeNum) const {$/;"	f	class:llvm::LatencyPriorityQueue
getLatency	CodeGen/ResourcePriorityQueue.h	/^    unsigned getLatency(unsigned NodeNum) const {$/;"	f	class:llvm::ResourcePriorityQueue
getLatency	CodeGen/ScheduleDAG.h	/^    unsigned getLatency() const {$/;"	f	class:llvm::SDep
getLatticeState	Analysis/SparsePropagation.h	/^  LatticeVal getLatticeState(Value *V) const {$/;"	f	class:llvm::SparseSolver
getLayoutOrder	MC/MCAssembler.h	/^  unsigned getLayoutOrder() const { return LayoutOrder; }$/;"	f	class:llvm::MCFragment
getLayoutOrder	MC/MCAssembler.h	/^  unsigned getLayoutOrder() const { return LayoutOrder; }$/;"	f	class:llvm::MCSectionData
getLazyIRFileModule	Support/IRReader.h	/^  inline Module *getLazyIRFileModule(const std::string &Filename,$/;"	f	namespace:llvm
getLazyIRModule	Support/IRReader.h	/^  inline Module *getLazyIRModule(MemoryBuffer *Buffer,$/;"	f	namespace:llvm
getLazyResolverFunction	Target/TargetJITInfo.h	/^    virtual LazyResolverFn getLazyResolverFunction(JITCompilerFn) {$/;"	f	class:llvm::TargetJITInfo
getLazySymbolPointerSection	MC/MCObjectFileInfo.h	/^  const MCSection *getLazySymbolPointerSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getLeader	ADT/EquivalenceClasses.h	/^    const ECValue *getLeader() const {$/;"	f	class:llvm::EquivalenceClasses::ECValue
getLeaderValue	ADT/EquivalenceClasses.h	/^  const ElemTy &getLeaderValue(const ElemTy &V) const {$/;"	f	class:llvm::EquivalenceClasses
getLeft	ADT/ImmutableSet.h	/^  ImutAVLTree *getLeft() const { return left; }$/;"	f	class:llvm::ImutAVLTree
getLeft	ADT/ImmutableSet.h	/^  TreeTy*         getLeft(TreeTy* T) const { return T->getLeft(); }$/;"	f	class:llvm::ImutAVLFactory
getLength	CodeGen/PBQP/Math.h	/^    unsigned getLength() const {$/;"	f	class:PBQP::Vector
getLength	IntrinsicInst.h	/^    Value *getLength() const { return const_cast<Value*>(getArgOperand(2)); }$/;"	f	class:llvm::MemIntrinsic
getLength	Metadata.h	/^  unsigned getLength() const { return (unsigned)getName().size(); }$/;"	f	class:llvm::MDString
getLevels	Analysis/DependenceAnalysis.h	/^    unsigned getLevels() const { return Levels; }$/;"	f	class:llvm::FullDependence
getLevels	Analysis/DependenceAnalysis.h	/^    virtual unsigned getLevels() const { return 0; }$/;"	f	class:llvm::Dependence
getLexer	MC/MCParser/MCAsmParserExtension.h	/^  MCAsmLexer &getLexer() { return getParser().getLexer(); }$/;"	f	class:llvm::MCAsmParserExtension
getLexer	MC/MCTargetAsmLexer.h	/^  MCAsmLexer *getLexer() {$/;"	f	class:llvm::MCTargetAsmLexer
getLibPaths	Linker.h	/^    const std::vector<sys::Path>& getLibPaths() const { return LibPaths; }$/;"	f	class:llvm::Linker
getLibcallCallingConv	Target/TargetLowering.h	/^  CallingConv::ID getLibcallCallingConv(RTLIB::Libcall Call) const {$/;"	f	class:llvm::TargetLowering
getLibcallName	Target/TargetLowering.h	/^  const char *getLibcallName(RTLIB::Libcall Call) const {$/;"	f	class:llvm::TargetLowering
getLibraries	Module.h	/^  inline const LibraryListType& getLibraries() const { return LibraryList; }$/;"	f	class:llvm::Module
getLibraryNext	Object/ELF.h	/^                        ::getLibraryNext(DataRefImpl Data,$/;"	f	class:llvm::object::ELFObjectFile
getLibraryPath	Object/ELF.h	/^         ::getLibraryPath(DataRefImpl Data, StringRef &Res) const {$/;"	f	class:llvm::object::ELFObjectFile
getLimitedValue	ADT/APInt.h	/^  uint64_t getLimitedValue(uint64_t Limit = ~0ULL) const {$/;"	f	class:llvm::APInt
getLimitedValue	Constants.h	/^  uint64_t getLimitedValue(uint64_t Limit = ~0ULL) const {$/;"	f	class:llvm::ConstantInt
getLine	DebugInfo/DIContext.h	/^  uint32_t getLine() const { return Line; }$/;"	f	class:llvm::DILineInfo
getLine	MC/MCDwarf.h	/^    unsigned getLine() const { return Line; }$/;"	f	class:llvm::MCDwarfLoc
getLine	Support/DebugLoc.h	/^    unsigned getLine() const {$/;"	f	class:llvm::DebugLoc
getLineContents	Support/SourceMgr.h	/^  const std::string &getLineContents() const { return LineContents; }$/;"	f	class:llvm::SMDiagnostic
getLineDelta	MC/MCAssembler.h	/^  int64_t getLineDelta() const { return LineDelta; }$/;"	f	class:llvm::MCDwarfLineAddrFragment
getLineNo	Support/SourceMgr.h	/^  int getLineNo() const { return LineNo; }$/;"	f	class:llvm::SMDiagnostic
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const      { $/;"	f	class:llvm::DIVariable
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const      { return getUnsignedField(4); }$/;"	f	class:llvm::DIType
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const      { return getUnsignedField(7); }$/;"	f	class:llvm::DIGlobalVariable
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const      { return getUnsignedField(7); }$/;"	f	class:llvm::DISubprogram
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const     { return getUnsignedField(0); }$/;"	f	class:llvm::DILocation
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const   { return getUnsignedField(2);         }$/;"	f	class:llvm::DILexicalBlock
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const   { return getUnsignedField(5); }$/;"	f	class:llvm::DITemplateTypeParameter
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const   { return getUnsignedField(6); }$/;"	f	class:llvm::DITemplateValueParameter
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const { return getScope().getLineNumber(); }$/;"	f	class:llvm::DILexicalBlockFile
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const { return getUnsignedField(3); }$/;"	f	class:llvm::DIObjCProperty
getLineNumber	DebugInfo.h	/^    unsigned getLineNumber() const { return getUnsignedField(4);         }$/;"	f	class:llvm::DINameSpace
getLineNumber	MC/MCDwarf.h	/^    unsigned getLineNumber() const { return LineNumber; }$/;"	f	class:llvm::MCGenDwarfLabelEntry
getLinkOnceDirective	MC/MCAsmInfo.h	/^    const char *getLinkOnceDirective() const { return LinkOnceDirective; }$/;"	f	class:llvm::MCAsmInfo
getLinkOnceLinkage	GlobalValue.h	/^  static LinkageTypes getLinkOnceLinkage(bool ODR) {$/;"	f	class:llvm::GlobalValue
getLinkage	GlobalValue.h	/^  LinkageTypes getLinkage() const { return Linkage; }$/;"	f	class:llvm::GlobalValue
getLinkageName	DebugInfo.h	/^    StringRef getLinkageName() const  { return getStringField(5); }$/;"	f	class:llvm::DIGlobalVariable
getLinkageName	DebugInfo.h	/^    StringRef getLinkageName() const  { return getStringField(5); }$/;"	f	class:llvm::DISubprogram
getLinkerPrivateGlobalPrefix	MC/MCAsmInfo.h	/^    const char *getLinkerPrivateGlobalPrefix() const {$/;"	f	class:llvm::MCAsmInfo
getLinkerRequiresNonEmptyDwarfLines	MC/MCAsmInfo.h	/^    bool getLinkerRequiresNonEmptyDwarfLines() const {$/;"	f	class:llvm::MCAsmInfo
getList	ADT/ImmutableList.h	/^    ImmutableList getList() const { return L; }$/;"	f	class:llvm::ImmutableList::iterator
getList	CodeGen/MachinePassRegistry.h	/^  MachinePassRegistryNode *getList()                    { return List; }$/;"	f	class:llvm::MachinePassRegistry
getList	CodeGen/MachineScheduler.h	/^  static MachineSchedRegistry *getList() {$/;"	f	class:llvm::MachineSchedRegistry
getList	CodeGen/RegAllocRegistry.h	/^  static RegisterRegAlloc *getList() {$/;"	f	class:llvm::RegisterRegAlloc
getList	CodeGen/SchedulerRegistry.h	/^  static RegisterScheduler *getList() {$/;"	f	class:llvm::RegisterScheduler
getList	SymbolTableListTraits.h	/^  static iplist<ValueSubClass> &getList(ItemParentClass *Par) {$/;"	f	class:llvm::SymbolTableListTraits
getListOwner	SymbolTableListTraits.h	/^  ItemParentClass *getListOwner() {$/;"	f	class:llvm::SymbolTableListTraits
getLiteralValue	Bitcode/BitCodes.h	/^  uint64_t getLiteralValue() const { assert(isLiteral()); return Val; }$/;"	f	class:llvm::BitCodeAbbrevOp
getLiveRangeContaining	CodeGen/LiveInterval.h	/^    LiveRange *getLiveRangeContaining(SlotIndex Idx) {$/;"	f	class:llvm::LiveInterval
getLiveRangeContaining	CodeGen/LiveInterval.h	/^    const LiveRange *getLiveRangeContaining(SlotIndex Idx) const {$/;"	f	class:llvm::LiveInterval
getLo	DebugInfo.h	/^    uint64_t getLo() const { return getUInt64Field(1); }$/;"	f	class:llvm::DISubrange
getLoadExtAction	Target/TargetLowering.h	/^  LegalizeAction getLoadExtAction(unsigned ExtType, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getLoadName	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getLoadName() const {$/;"	f	class:llvm::object::ELFObjectFile
getLoc	MC/MCFixup.h	/^  SMLoc getLoc() const { return Loc; }$/;"	f	class:llvm::MCFixup
getLoc	MC/MCInst.h	/^  SMLoc getLoc() const { return Loc; }$/;"	f	class:llvm::MCInst
getLoc	Support/SourceMgr.h	/^  SMLoc getLoc() const { return Loc; }$/;"	f	class:llvm::SMDiagnostic
getLoc	TableGen/Error.h	/^  ArrayRef<SMLoc> getLoc() const { return Locs; }$/;"	f	class:llvm::TGError
getLoc	TableGen/Record.h	/^  ArrayRef<SMLoc> getLoc() const { return Locs; }$/;"	f	class:llvm::Record
getLocInfo	CodeGen/CallingConvLower.h	/^  LocInfo getLocInfo() const { return HTP; }$/;"	f	class:llvm::CCValAssign
getLocMemOffset	CodeGen/CallingConvLower.h	/^  unsigned getLocMemOffset() const { assert(isMemLoc()); return Loc; }$/;"	f	class:llvm::CCValAssign
getLocReg	CodeGen/CallingConvLower.h	/^  unsigned getLocReg() const { assert(isRegLoc()); return Loc; }$/;"	f	class:llvm::CCValAssign
getLocVT	CodeGen/CallingConvLower.h	/^  MVT getLocVT() const { return LocVT; }$/;"	f	class:llvm::CCValAssign
getLocalDifferenceRelocationType	MC/MCMachObjectWriter.h	/^  unsigned getLocalDifferenceRelocationType() const {$/;"	f	class:llvm::MCMachObjectTargetWriter
getLocalFrameMaxAlign	CodeGen/MachineFrameInfo.h	/^  unsigned getLocalFrameMaxAlign() const { return LocalFrameMaxAlign; }$/;"	f	class:llvm::MachineFrameInfo
getLocalFrameObjectCount	CodeGen/MachineFrameInfo.h	/^  int64_t getLocalFrameObjectCount() { return LocalFrameObjects.size(); }$/;"	f	class:llvm::MachineFrameInfo
getLocalFrameObjectMap	CodeGen/MachineFrameInfo.h	/^  std::pair<int, int64_t> getLocalFrameObjectMap(int i) {$/;"	f	class:llvm::MachineFrameInfo
getLocalFrameSize	CodeGen/MachineFrameInfo.h	/^  int64_t getLocalFrameSize() const { return LocalFrameSize; }$/;"	f	class:llvm::MachineFrameInfo
getLocationInfo	Analysis/LibCallSemantics.h	/^    virtual unsigned getLocationInfo(const LibCallLocationInfo *&Array) const {$/;"	f	class:llvm::LibCallInfo
getLoop	Analysis/IVUsers.h	/^  Loop *getLoop() const { return L; }$/;"	f	class:llvm::IVUsers
getLoop	Analysis/LoopIterator.h	/^  Loop *getLoop() const { return L; }$/;"	f	class:llvm::LoopBlocksDFS
getLoop	Analysis/ScalarEvolutionExpressions.h	/^    const Loop *getLoop() const { return L; }$/;"	f	class:llvm::SCEVAddRecExpr
getLoop	CodeGen/MachineLoopRanges.h	/^  const MachineLoop *getLoop() const { return Loop; }$/;"	f	class:llvm::MachineLoopRange
getLoopDepth	Analysis/LoopInfo.h	/^  inline unsigned getLoopDepth(const BasicBlock *BB) const {$/;"	f	class:llvm::LoopInfo
getLoopDepth	Analysis/LoopInfo.h	/^  unsigned getLoopDepth() const {$/;"	f	class:llvm::LoopBase
getLoopDepth	Analysis/LoopInfo.h	/^  unsigned getLoopDepth(const BlockT *BB) const {$/;"	f	class:llvm::LoopInfoBase
getLoopDepth	CodeGen/MachineLoopInfo.h	/^  inline unsigned getLoopDepth(const MachineBasicBlock *BB) const {$/;"	f	class:llvm::MachineLoopInfo
getLoopFor	Analysis/LoopInfo.h	/^  LoopT *getLoopFor(const BlockT *BB) const {$/;"	f	class:llvm::LoopInfoBase
getLoopFor	Analysis/LoopInfo.h	/^  inline Loop *getLoopFor(const BasicBlock *BB) const {$/;"	f	class:llvm::LoopInfo
getLoopFor	CodeGen/MachineLoopInfo.h	/^  inline MachineLoop *getLoopFor(const MachineBasicBlock *BB) const {$/;"	f	class:llvm::MachineLoopInfo
getLoopLatch	Analysis/LoopInfoImpl.h	/^BlockT *LoopBase<BlockT, LoopT>::getLoopLatch() const {$/;"	f	class:llvm::LoopBase
getLoopPredecessor	Analysis/LoopInfoImpl.h	/^BlockT *LoopBase<BlockT, LoopT>::getLoopPredecessor() const {$/;"	f	class:llvm::LoopBase
getLoopPreheader	Analysis/LoopInfoImpl.h	/^BlockT *LoopBase<BlockT, LoopT>::getLoopPreheader() const {$/;"	f	class:llvm::LoopBase
getLow	Support/IntegersSubset.h	/^    const IntType& getLow() const {$/;"	f	class:llvm::IntRange
getLowBitsSet	ADT/APInt.h	/^  static APInt getLowBitsSet(unsigned numBits, unsigned loBitsSet) {$/;"	f	class:llvm::APInt
getLower	Support/ConstantRange.h	/^  const APInt &getLower() const { return Lower; }$/;"	f	class:llvm::ConstantRange
getMAI	MC/MCParser/AsmLexer.h	/^  const MCAsmInfo &getMAI() const { return MAI; }$/;"	f	class:llvm::AsmLexer
getMBB	CodeGen/MachineOperand.h	/^  MachineBasicBlock *getMBB() const {$/;"	f	class:llvm::MachineOperand
getMBBCoveringRange	CodeGen/SlotIndexes.h	/^    MachineBasicBlock* getMBBCoveringRange(SlotIndex start, SlotIndex end) const {$/;"	f	class:llvm::SlotIndexes
getMBBEndIdx	CodeGen/LiveIntervalAnalysis.h	/^    SlotIndex getMBBEndIdx(const MachineBasicBlock *mbb) const {$/;"	f	class:llvm::LiveIntervals
getMBBEndIdx	CodeGen/SlotIndexes.h	/^    SlotIndex getMBBEndIdx(const MachineBasicBlock *mbb) const {$/;"	f	class:llvm::SlotIndexes
getMBBEndIdx	CodeGen/SlotIndexes.h	/^    SlotIndex getMBBEndIdx(unsigned Num) const {$/;"	f	class:llvm::SlotIndexes
getMBBFromIndex	CodeGen/LiveIntervalAnalysis.h	/^    MachineBasicBlock* getMBBFromIndex(SlotIndex index) const {$/;"	f	class:llvm::LiveIntervals
getMBBFromIndex	CodeGen/SlotIndexes.h	/^    MachineBasicBlock* getMBBFromIndex(SlotIndex index) const {$/;"	f	class:llvm::SlotIndexes
getMBBRange	CodeGen/SlotIndexes.h	/^    getMBBRange(const MachineBasicBlock *MBB) const {$/;"	f	class:llvm::SlotIndexes
getMBBRange	CodeGen/SlotIndexes.h	/^    getMBBRange(unsigned Num) const {$/;"	f	class:llvm::SlotIndexes
getMBBStartIdx	CodeGen/LiveIntervalAnalysis.h	/^    SlotIndex getMBBStartIdx(const MachineBasicBlock *mbb) const {$/;"	f	class:llvm::LiveIntervals
getMBBStartIdx	CodeGen/SlotIndexes.h	/^    SlotIndex getMBBStartIdx(const MachineBasicBlock *mbb) const {$/;"	f	class:llvm::SlotIndexes
getMBBStartIdx	CodeGen/SlotIndexes.h	/^    SlotIndex getMBBStartIdx(unsigned Num) const {$/;"	f	class:llvm::SlotIndexes
getMCAsmInfo	Target/TargetMachine.h	/^  const MCAsmInfo *getMCAsmInfo() const { return AsmInfo; }$/;"	f	class:llvm::TargetMachine
getMCContext	MC/MCDisassembler.h	/^  MCContext *getMCContext() const { return Ctx; }$/;"	f	class:llvm::MCDisassembler
getMCDwarfDirs	MC/MCContext.h	/^    const std::vector<StringRef> &getMCDwarfDirs() {$/;"	f	class:llvm::MCContext
getMCDwarfFiles	MC/MCContext.h	/^    const std::vector<MCDwarfFile *> &getMCDwarfFiles() {$/;"	f	class:llvm::MCContext
getMCGenDwarfLabelEntries	MC/MCContext.h	/^      &getMCGenDwarfLabelEntries() const {$/;"	f	class:llvm::MCContext
getMCLineEntries	MC/MCDwarf.h	/^    const MCLineEntryCollection *getMCLineEntries() const {$/;"	f	class:llvm::MCLineSection
getMCLineSectionOrder	MC/MCContext.h	/^    const std::vector<const MCSection *> &getMCLineSectionOrder() const {$/;"	f	class:llvm::MCContext
getMCLineSections	MC/MCContext.h	/^    &getMCLineSections() const {$/;"	f	class:llvm::MCContext
getMCOperandNum	MC/MCParser/MCParsedAsmOperand.h	/^  unsigned getMCOperandNum() { return MCOperandNum; }$/;"	f	class:llvm::MCParsedAsmOperand
getMCSchedModel	CodeGen/TargetSchedule.h	/^  const MCSchedModel *getMCSchedModel() const { return &SchedModel; }$/;"	f	class:llvm::TargetSchedModel
getMCSymbol	CodeGen/MachineOperand.h	/^  MCSymbol *getMCSymbol() const {$/;"	f	class:llvm::MachineOperand
getMD	CodeGen/SelectionDAGNodes.h	/^  const MDNode *getMD() const { return MD; }$/;"	f	class:llvm::MDNodeSDNode
getMF	CodeGen/MachineFunctionAnalysis.h	/^  MachineFunction &getMF() const { return *MF; }$/;"	f	struct:llvm::MachineFunctionAnalysis
getMHS	TableGen/Record.h	/^  Init *getMHS() const { return MHS; }$/;"	f	class:llvm::TernOpInit
getMMI	CodeGen/MachineFunction.h	/^  MachineModuleInfo &getMMI() const { return MMI; }$/;"	f	class:llvm::MachineFunction
getMachOSection	MC/MCContext.h	/^    const MCSectionMachO *getMachOSection(StringRef Segment,$/;"	f	class:llvm::MCContext
getMachine	MC/MCWinCOFFObjectWriter.h	/^    unsigned getMachine() const { return Machine; }$/;"	f	class:llvm::MCWinCOFFObjectTargetWriter
getMachineCPVal	CodeGen/SelectionDAGNodes.h	/^  MachineConstantPoolValue *getMachineCPVal() const {$/;"	f	class:llvm::ConstantPoolSDNode
getMachineCodeOffset	CodeGen/MachineRelocation.h	/^  intptr_t getMachineCodeOffset() const {$/;"	f	class:llvm::MachineRelocation
getMachineFunction	CodeGen/CallingConvLower.h	/^  MachineFunction &getMachineFunction() const { return MF; }$/;"	f	class:llvm::CCState
getMachineFunction	CodeGen/EdgeBundles.h	/^  const MachineFunction *getMachineFunction() const { return MF; }$/;"	f	class:llvm::EdgeBundles
getMachineFunction	CodeGen/SelectionDAG.h	/^  MachineFunction &getMachineFunction() const { return *MF; }$/;"	f	class:llvm::SelectionDAG
getMachineOpcode	CodeGen/SelectionDAGNodes.h	/^  unsigned getMachineOpcode() const {$/;"	f	class:llvm::SDNode
getMachineOpcode	CodeGen/SelectionDAGNodes.h	/^inline unsigned SDValue::getMachineOpcode() const {$/;"	f	class:llvm::SDValue
getMap	CodeGen/MachineLoopRanges.h	/^  const Map &getMap() { return Intervals; }$/;"	f	class:llvm::MachineLoopRange
getMask	CodeGen/SelectionDAGNodes.h	/^  ArrayRef<int> getMask() const {$/;"	f	class:llvm::ShuffleVectorSDNode
getMask	Instructions.h	/^  Constant *getMask() const {$/;"	f	class:llvm::ShuffleVectorInst
getMask	Target/TargetRegisterInfo.h	/^  const uint32_t *getMask() const { return Mask; }$/;"	f	class:llvm::SuperRegClassIterator
getMaskElt	CodeGen/SelectionDAGNodes.h	/^  int getMaskElt(unsigned Idx) const {$/;"	f	class:llvm::ShuffleVectorSDNode
getMaskValue	Instructions.h	/^  int getMaskValue(unsigned i) const {$/;"	f	class:llvm::ShuffleVectorInst
getMatchingSuperReg	Target/TargetRegisterInfo.h	/^  unsigned getMatchingSuperReg(unsigned Reg, unsigned SubIdx,$/;"	f	class:llvm::TargetRegisterInfo
getMaterializer	Module.h	/^  GVMaterializer *getMaterializer() const { return Materializer.get(); }$/;"	f	class:llvm::Module
getMaxAlignment	CodeGen/MachineFrameInfo.h	/^  unsigned getMaxAlignment() const { return MaxAlignment; }$/;"	f	class:llvm::MachineFrameInfo
getMaxBytesToEmit	MC/MCAssembler.h	/^  unsigned getMaxBytesToEmit() const { return MaxBytesToEmit; }$/;"	f	class:llvm::MCAlignFragment
getMaxCallFrameSize	CodeGen/MachineFrameInfo.h	/^  unsigned getMaxCallFrameSize() const { return MaxCallFrameSize; }$/;"	f	class:llvm::MachineFrameInfo
getMaxElement	ADT/ImmutableMap.h	/^  value_type* getMaxElement() const {$/;"	f	class:llvm::ImmutableMap
getMaxElement	ADT/ImmutableMap.h	/^  value_type* getMaxElement() const {$/;"	f	class:llvm::ImmutableMapRef
getMaxElement	ADT/ImmutableSet.h	/^  ImutAVLTree* getMaxElement() {$/;"	f	class:llvm::ImutAVLTree
getMaxInstLength	MC/MCAsmInfo.h	/^    unsigned getMaxInstLength() const {$/;"	f	class:llvm::MCAsmInfo
getMaxLookAhead	CodeGen/ScheduleHazardRecognizer.h	/^  unsigned getMaxLookAhead() const { return MaxLookAhead; }$/;"	f	class:llvm::ScheduleHazardRecognizer
getMaxPressureDelta	CodeGen/RegisterPressure.h	/^  void getMaxPressureDelta(const MachineInstr *MI, RegPressureDelta &Delta,$/;"	f	class:llvm::RegPressureTracker
getMaxStoresPerMemcpy	Target/TargetLowering.h	/^  unsigned getMaxStoresPerMemcpy(bool OptSize) const {$/;"	f	class:llvm::TargetLowering
getMaxStoresPerMemmove	Target/TargetLowering.h	/^  unsigned getMaxStoresPerMemmove(bool OptSize) const {$/;"	f	class:llvm::TargetLowering
getMaxStoresPerMemset	Target/TargetLowering.h	/^  unsigned getMaxStoresPerMemset(bool OptSize) const {$/;"	f	class:llvm::TargetLowering
getMaxValue	ADT/APInt.h	/^  static APInt getMaxValue(unsigned numBits) {$/;"	f	class:llvm::APInt
getMaxValue	ADT/APSInt.h	/^  static APSInt getMaxValue(uint32_t numBits, bool Unsigned) {$/;"	f	class:llvm::APSInt
getMaximalGlobalOffset	Target/TargetLowering.h	/^  virtual unsigned getMaximalGlobalOffset() const {$/;"	f	class:llvm::TargetLowering
getMem	CodeGen/CallingConvLower.h	/^  static CCValAssign getMem(unsigned ValNo, MVT ValVT,$/;"	f	class:llvm::CCValAssign
getMemBuffer	ExecutionEngine/ObjectBuffer.h	/^  MemoryBuffer *getMemBuffer() const {$/;"	f	class:llvm::ObjectBuffer
getMemOperand	CodeGen/SelectionDAGNodes.h	/^  MachineMemOperand *getMemOperand() const { return MMO; }$/;"	f	class:llvm::MemSDNode
getMemSize	MC/MCParser/MCParsedAsmOperand.h	/^  virtual unsigned getMemSize() const { return 0; }$/;"	f	class:llvm::MCParsedAsmOperand
getMemUsed	Support/Timer.h	/^  ssize_t getMemUsed() const { return MemUsed; }$/;"	f	class:llvm::TimeRecord
getMembers	Bitcode/Archive.h	/^    MembersList& getMembers() { return members; }$/;"	f	class:llvm::Archive
getMemoryBuffer	Support/SourceMgr.h	/^  const MemoryBuffer *getMemoryBuffer(unsigned i) const {$/;"	f	class:llvm::SourceMgr
getMemorySize	ADT/DenseMap.h	/^  size_t getMemorySize() const {$/;"	f	class:llvm::DenseMapBase
getMemoryVT	CodeGen/SelectionDAGNodes.h	/^  EVT getMemoryVT() const { return MemoryVT; }$/;"	f	class:llvm::MemSDNode
getMergeable1ByteCString	MC/SectionKind.h	/^  static SectionKind getMergeable1ByteCString() {$/;"	f	class:llvm::SectionKind
getMergeable2ByteCString	MC/SectionKind.h	/^  static SectionKind getMergeable2ByteCString() {$/;"	f	class:llvm::SectionKind
getMergeable4ByteCString	MC/SectionKind.h	/^  static SectionKind getMergeable4ByteCString() {$/;"	f	class:llvm::SectionKind
getMergeableConst	MC/SectionKind.h	/^  static SectionKind getMergeableConst() { return get(MergeableConst); }$/;"	f	class:llvm::SectionKind
getMergeableConst16	MC/SectionKind.h	/^  static SectionKind getMergeableConst16() { return get(MergeableConst16); }$/;"	f	class:llvm::SectionKind
getMergeableConst16Section	MC/MCObjectFileInfo.h	/^  const MCSection *getMergeableConst16Section() const {$/;"	f	class:llvm::MCObjectFileInfo
getMergeableConst4	MC/SectionKind.h	/^  static SectionKind getMergeableConst4() { return get(MergeableConst4); }$/;"	f	class:llvm::SectionKind
getMergeableConst4Section	MC/MCObjectFileInfo.h	/^  const MCSection *getMergeableConst4Section() const {$/;"	f	class:llvm::MCObjectFileInfo
getMergeableConst8	MC/SectionKind.h	/^  static SectionKind getMergeableConst8() { return get(MergeableConst8); }$/;"	f	class:llvm::SectionKind
getMergeableConst8Section	MC/MCObjectFileInfo.h	/^  const MCSection *getMergeableConst8Section() const {$/;"	f	class:llvm::MCObjectFileInfo
getMessage	Support/SourceMgr.h	/^  const std::string &getMessage() const { return Message; }$/;"	f	class:llvm::SMDiagnostic
getMessage	TableGen/Error.h	/^  const std::string &getMessage() const { return Message; }$/;"	f	class:llvm::TGError
getMetadata	CodeGen/MachineOperand.h	/^  const MDNode *getMetadata() const {$/;"	f	class:llvm::MachineOperand
getMetadata	Instruction.h	/^  MDNode *getMetadata(StringRef Kind) const {$/;"	f	class:llvm::Instruction
getMetadata	Instruction.h	/^  MDNode *getMetadata(unsigned KindID) const {$/;"	f	class:llvm::Instruction
getMetadata	MC/SectionKind.h	/^  static SectionKind getMetadata() { return get(Metadata); }$/;"	f	class:llvm::SectionKind
getMinFunctionAlignment	Target/TargetLowering.h	/^  unsigned getMinFunctionAlignment() const {$/;"	f	class:llvm::TargetLowering
getMinLatency	CodeGen/ScheduleDAG.h	/^    unsigned getMinLatency() const {$/;"	f	class:llvm::SDep
getMinSignedBits	ADT/APInt.h	/^  unsigned getMinSignedBits() const {$/;"	f	class:llvm::APInt
getMinStackArgumentAlignment	Target/TargetLowering.h	/^  unsigned getMinStackArgumentAlignment() const {$/;"	f	class:llvm::TargetLowering
getMinValue	ADT/APInt.h	/^  static APInt getMinValue(unsigned numBits) {$/;"	f	class:llvm::APInt
getMinValue	ADT/APSInt.h	/^  static APSInt getMinValue(uint32_t numBits, bool Unsigned) {$/;"	f	class:llvm::APSInt
getMinimumJumpTableEntries	Target/TargetLowering.h	/^  int getMinimumJumpTableEntries() const {$/;"	f	class:llvm::TargetLowering
getMinimumNopSize	MC/MCAsmBackend.h	/^  virtual unsigned getMinimumNopSize() const { return 1; }$/;"	f	class:llvm::MCAsmBackend
getMiscFlags	Support/CommandLine.h	/^  inline unsigned getMiscFlags() const {$/;"	f	class:llvm::cl::Option
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(ImmutableCallSite CS,$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const AtomicCmpXchgInst *CX,$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const AtomicRMWInst *RMW,$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const CallInst *C, const Location &Loc) {$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const CallInst *C, const Value *P, uint64_t Size) {$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const FenceInst *S, const Location &Loc) {$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const FenceInst *S, const Value *P, uint64_t Size){$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const Instruction *I,$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const InvokeInst *I,$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const LoadInst *L, const Value *P, uint64_t Size) {$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const StoreInst *S, const Value *P, uint64_t Size){$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/AliasAnalysis.h	/^  ModRefResult getModRefInfo(const VAArgInst* I, const Value* P, uint64_t Size){$/;"	f	class:llvm::AliasAnalysis
getModRefInfo	Analysis/LibCallAliasAnalysis.h	/^    ModRefResult getModRefInfo(ImmutableCallSite CS1,$/;"	f	struct:llvm::LibCallAliasAnalysis
getModTime	Bitcode/Archive.h	/^    sys::TimeValue getModTime() const    { return info.getTimestamp(); }$/;"	f	class:llvm::ArchiveMember
getMode	Bitcode/Archive.h	/^    unsigned getMode() const             { return info.getMode(); }$/;"	f	class:llvm::ArchiveMember
getMode	Support/PathV1.h	/^    uint32_t getMode() const { return mode; }$/;"	f	class:llvm::sys::FileStatus
getModule	Analysis/CallGraph.h	/^  Module &getModule() const { return *Mod; }$/;"	f	class:llvm::CallGraph
getModule	CodeGen/GCMetadataPrinter.h	/^    const Module &getModule() const { return S->getModule(); }$/;"	f	class:llvm::GCMetadataPrinter
getModule	CodeGen/GCStrategy.h	/^    const Module &getModule() const { return *M; }$/;"	f	class:llvm::GCStrategy
getModule	CodeGen/MachineModuleInfo.h	/^  const Module *getModule() const { return TheModule; }$/;"	f	class:llvm::MachineModuleInfo
getModule	Linker.h	/^    Module* getModule() const { return Composite; }$/;"	f	class:llvm::Linker
getModuleIdentifier	Module.h	/^  const std::string &getModuleIdentifier() const { return ModuleID; }$/;"	f	class:llvm::Module
getModuleInlineAsm	Module.h	/^  const std::string &getModuleInlineAsm() const { return GlobalScopeAsm; }$/;"	f	class:llvm::Module
getMulExpr	Analysis/ScalarEvolution.h	/^    const SCEV *getMulExpr(const SCEV *LHS, const SCEV *RHS,$/;"	f	class:llvm::ScalarEvolution
getMulExpr	Analysis/ScalarEvolution.h	/^    const SCEV *getMulExpr(const SCEV *Op0, const SCEV *Op1, const SCEV *Op2,$/;"	f	class:llvm::ScalarEvolution
getMutex	ADT/ValueMap.h	/^  static sys::Mutex *getMutex(const ExtraDataT &\/*Data*\/) { return NULL; }$/;"	f	struct:llvm::ValueMapConfig
getN1SolverEdgeItr	CodeGen/PBQP/HeuristicSolver.h	/^      SolverEdgeItr getN1SolverEdgeItr() { return n1SolverEdgeItr; }$/;"	f	class:PBQP::HeuristicSolverImpl::EdgeData
getN2SolverEdgeItr	CodeGen/PBQP/HeuristicSolver.h	/^      SolverEdgeItr getN2SolverEdgeItr() { return n2SolverEdgeItr; }$/;"	f	class:PBQP::HeuristicSolverImpl::EdgeData
getNMTypeChar	Object/ObjectFile.h	/^inline error_code SymbolRef::getNMTypeChar(char &Result) const {$/;"	f	class:llvm::object::SymbolRef
getNSWAdd	Constants.h	/^  static Constant *getNSWAdd(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNSWMul	Constants.h	/^  static Constant *getNSWMul(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNSWNeg	Constants.h	/^  static Constant *getNSWNeg(Constant *C) { return getNeg(C, false, true); }$/;"	f	class:llvm::ConstantExpr
getNSWShl	Constants.h	/^  static Constant *getNSWShl(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNSWSub	Constants.h	/^  static Constant *getNSWSub(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNUWAdd	Constants.h	/^  static Constant *getNUWAdd(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNUWMul	Constants.h	/^  static Constant *getNUWMul(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNUWNeg	Constants.h	/^  static Constant *getNUWNeg(Constant *C) { return getNeg(C, true, false); }$/;"	f	class:llvm::ConstantExpr
getNUWShl	Constants.h	/^  static Constant *getNUWShl(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNUWSub	Constants.h	/^  static Constant *getNUWSub(Constant *C1, Constant *C2) {$/;"	f	class:llvm::ConstantExpr
getNaN	ADT/APFloat.h	/^    static APFloat getNaN(const fltSemantics &Sem, bool Negative = false,$/;"	f	class:llvm::APFloat
getName	ADT/Statistic.h	/^  const char *getName() const { return Name; }$/;"	f	class:llvm::Statistic
getName	CodeGen/GCStrategy.h	/^    const std::string &getName() const { return Name; }$/;"	f	class:llvm::GCStrategy
getName	CodeGen/MachinePassRegistry.h	/^  const char *getName()                   const { return Name; }$/;"	f	class:llvm::MachinePassRegistryNode
getName	CodeGen/MachineScheduler.h	/^  StringRef getName() const { return Name; }$/;"	f	class:llvm::ReadyQueue
getName	DebugInfo.h	/^    StringRef getName() const           { return getStringField(2);     }$/;"	f	class:llvm::DIType
getName	DebugInfo.h	/^    StringRef getName() const           { return getStringField(2);     }$/;"	f	class:llvm::DIVariable
getName	DebugInfo.h	/^    StringRef getName() const         { return getStringField(3); }$/;"	f	class:llvm::DIGlobalVariable
getName	DebugInfo.h	/^    StringRef getName() const         { return getStringField(3); }$/;"	f	class:llvm::DISubprogram
getName	DebugInfo.h	/^    StringRef getName() const        { return getStringField(1); }$/;"	f	class:llvm::DIEnumerator
getName	DebugInfo.h	/^    StringRef getName() const        { return getStringField(2); }$/;"	f	class:llvm::DITemplateTypeParameter
getName	DebugInfo.h	/^    StringRef getName() const        { return getStringField(2); }$/;"	f	class:llvm::DITemplateValueParameter
getName	DebugInfo.h	/^    StringRef getName() const      { return getStringField(2);           }$/;"	f	class:llvm::DINameSpace
getName	MC/MCDwarf.h	/^    StringRef getName() const { return Name; }$/;"	f	class:llvm::MCDwarfFile
getName	MC/MCDwarf.h	/^    StringRef getName() const { return Name; }$/;"	f	class:llvm::MCGenDwarfLabelEntry
getName	MC/MCInstrInfo.h	/^  const char *getName(unsigned Opcode) const {$/;"	f	class:llvm::MCInstrInfo
getName	MC/MCParser/MCParsedAsmOperand.h	/^  StringRef getName() {$/;"	f	class:llvm::MCParsedAsmOperand
getName	MC/MCRegisterInfo.h	/^  const char *getName() const { return Name; }$/;"	f	class:llvm::MCRegisterClass
getName	MC/MCRegisterInfo.h	/^  const char *getName(unsigned RegNo) const {$/;"	f	class:llvm::MCRegisterInfo
getName	MC/MCSymbol.h	/^    StringRef getName() const { return Name; }$/;"	f	class:llvm::MCSymbol
getName	Object/ObjectFile.h	/^inline error_code SectionRef::getName(StringRef &Result) const {$/;"	f	class:llvm::object::SectionRef
getName	Object/ObjectFile.h	/^inline error_code SymbolRef::getName(StringRef &Result) const {$/;"	f	class:llvm::object::SymbolRef
getName	Support/Registry.h	/^    const char *getName() const { return Name; }$/;"	f	class:llvm::SimpleRegistryEntry
getName	Support/TargetRegistry.h	/^    const char *getName() const { return Name; }$/;"	f	class:llvm::Target
getName	Support/Timer.h	/^  const std::string &getName() const { return Name; }$/;"	f	class:llvm::Timer
getName	Support/YAMLParser.h	/^  StringRef getName() const { return Name; }$/;"	f	class:llvm::yaml::AliasNode
getName	TableGen/Record.h	/^  const std::string &getName() const { return ValName; }$/;"	f	class:llvm::DagInit
getName	Target/TargetLibraryInfo.h	/^  StringRef getName(LibFunc::Func F) const {$/;"	f	class:llvm::TargetLibraryInfo
getName	Target/TargetRegisterInfo.h	/^  const char *getName() const { return MC->getName(); }$/;"	f	class:llvm::TargetRegisterClass
getNameInit	TableGen/Record.h	/^  Init *getNameInit() const { return VarName; }$/;"	f	class:llvm::VarInit
getNameInit	TableGen/Record.h	/^  Init *getNameInit() const {$/;"	f	class:llvm::Record
getNameInit	TableGen/Record.h	/^  const Init *getNameInit() const { return Name; }$/;"	f	class:llvm::RecordVal
getNameInitAsString	TableGen/Record.h	/^  const std::string getNameInitAsString() const {$/;"	f	class:llvm::Record
getNameInitAsString	TableGen/Record.h	/^  std::string getNameInitAsString() const {$/;"	f	class:llvm::RecordVal
getNameInitAsString	TableGen/Record.h	/^  std::string getNameInitAsString() const {$/;"	f	class:llvm::VarInit
getNameLen	MC/MCParser/MCParsedAsmOperand.h	/^  unsigned getNameLen() {$/;"	f	class:llvm::MCParsedAsmOperand
getNameType	Support/COFF.h	/^    ImportNameType getNameType() const {$/;"	f	struct:llvm::COFF::ImportHeader
getNamedGlobal	Module.h	/^  GlobalVariable *getNamedGlobal(StringRef Name) const {$/;"	f	class:llvm::Module
getNamedMDList	Module.h	/^  NamedMDListType        &getNamedMDList()            { return NamedMDList; }$/;"	f	class:llvm::Module
getNamedMDList	Module.h	/^  const NamedMDListType  &getNamedMDList() const      { return NamedMDList; }$/;"	f	class:llvm::Module
getNever	Analysis/InlineCost.h	/^    static InlineCost getNever() {$/;"	f	class:llvm::InlineCost
getNewUID	TableGen/Record.h	/^  static unsigned getNewUID() { return LastID++; }$/;"	f	class:llvm::Record
getNewValOperand	Instructions.h	/^  Value *getNewValOperand() { return getOperand(2); }$/;"	f	class:llvm::AtomicCmpXchgInst
getNewValOperand	Instructions.h	/^  const Value *getNewValOperand() const { return getOperand(2); }$/;"	f	class:llvm::AtomicCmpXchgInst
getNext	ADT/EquivalenceClasses.h	/^    const ECValue *getNext() const {$/;"	f	class:llvm::EquivalenceClasses::ECValue
getNext	ADT/ilist.h	/^  static NodeTy *getNext(NodeTy *N) { return N->getNext(); }$/;"	f	struct:llvm::ilist_nextprev_traits
getNext	ADT/ilist.h	/^  static const NodeTy *getNext(const NodeTy *N) { return N->getNext(); }$/;"	f	struct:llvm::ilist_nextprev_traits
getNext	ADT/ilist_node.h	/^  NodeTy *getNext() { return Next; }$/;"	f	class:llvm::ilist_node
getNext	ADT/ilist_node.h	/^  const NodeTy *getNext() const { return Next; }$/;"	f	class:llvm::ilist_node
getNext	Analysis/AliasSetTracker.h	/^    PointerRec *getNext() const { return NextInList; }$/;"	f	class:llvm::AliasSet::PointerRec
getNext	CodeGen/MachinePassRegistry.h	/^  MachinePassRegistryNode *getNext()      const { return Next; }$/;"	f	class:llvm::MachinePassRegistryNode
getNext	CodeGen/MachineScheduler.h	/^  MachineSchedRegistry *getNext() const {$/;"	f	class:llvm::MachineSchedRegistry
getNext	CodeGen/RegAllocRegistry.h	/^  RegisterRegAlloc *getNext() const {$/;"	f	class:llvm::RegisterRegAlloc
getNext	CodeGen/SchedulerRegistry.h	/^  RegisterScheduler *getNext() const {$/;"	f	class:llvm::RegisterScheduler
getNext	CodeGen/SelectionDAGNodes.h	/^  SDUse *getNext() const { return Next; }$/;"	f	class:llvm::SDUse
getNext	Object/ELF.h	/^                            ::getNext(DynRefImpl &Result) const {$/;"	f	class:llvm::object::DynRefImpl
getNext	Object/ObjectFile.h	/^inline error_code LibraryRef::getNext(LibraryRef &Result) const {$/;"	f	class:llvm::object::LibraryRef
getNext	Object/ObjectFile.h	/^inline error_code RelocationRef::getNext(RelocationRef &Result) const {$/;"	f	class:llvm::object::RelocationRef
getNext	Object/ObjectFile.h	/^inline error_code SectionRef::getNext(SectionRef &Result) const {$/;"	f	class:llvm::object::SectionRef
getNext	Object/ObjectFile.h	/^inline error_code SymbolRef::getNext(SymbolRef &Result) const {$/;"	f	class:llvm::object::SymbolRef
getNext	Support/Recycler.h	/^  static RecyclerStruct *getNext(const RecyclerStruct *t) { return t->Next; }$/;"	f	struct:llvm::ilist_traits
getNext	Support/TargetRegistry.h	/^    const Target *getNext() const { return Next; }$/;"	f	class:llvm::Target
getNext	Use.h	/^  Use *getNext() const { return Next; }$/;"	f	class:llvm::Use
getNextAddress	CodeGen/MachinePassRegistry.h	/^  MachinePassRegistryNode **getNextAddress()    { return &Next; }$/;"	f	class:llvm::MachinePassRegistryNode
getNextCycles	MC/MCInstrItineraries.h	/^  unsigned getNextCycles() const {$/;"	f	struct:llvm::InstrStage
getNextEntry	Support/PrettyStackTrace.h	/^    const PrettyStackTraceEntry *getNextEntry() const { return NextEntry; }$/;"	f	class:llvm::PrettyStackTraceEntry
getNextExit	Analysis/ScalarEvolution.h	/^      ExitNotTakenInfo *getNextExit() const {$/;"	f	struct:llvm::ScalarEvolution::ExitNotTakenInfo
getNextForKey	ADT/ScopedHashTable.h	/^  ScopedHashTableVal *getNextForKey() { return NextForKey; }$/;"	f	class:llvm::ScopedHashTableVal
getNextForKey	ADT/ScopedHashTable.h	/^  const ScopedHashTableVal *getNextForKey() const { return NextForKey; }$/;"	f	class:llvm::ScopedHashTableVal
getNextInBucket	ADT/FoldingSet.h	/^    void *getNextInBucket() const { return NextInFoldingSetBucket; }$/;"	f	class:llvm::FoldingSetImpl::Node
getNextInScope	ADT/ScopedHashTable.h	/^  ScopedHashTableVal *getNextInScope() { return NextInScope; }$/;"	f	class:llvm::ScopedHashTableVal
getNextIndex	CodeGen/SlotIndexes.h	/^    SlotIndex getNextIndex() const {$/;"	f	class:llvm::SlotIndex
getNextNode	ADT/ilist_node.h	/^  NodeTy *getNextNode() {$/;"	f	class:llvm::ilist_node
getNextNode	ADT/ilist_node.h	/^  const NodeTy *getNextNode() const {$/;"	f	class:llvm::ilist_node
getNextNonNullIndex	CodeGen/SlotIndexes.h	/^    SlotIndex getNextNonNullIndex(SlotIndex index) {$/;"	f	class:llvm::SlotIndexes
getNextOperandForReg	CodeGen/MachineRegisterInfo.h	/^  static MachineOperand *getNextOperandForReg(const MachineOperand *MO) {$/;"	f	class:llvm::MachineRegisterInfo
getNextRegisteredOption	Support/CommandLine.h	/^  Option *getNextRegisteredOption() const { return NextRegistered; }$/;"	f	class:llvm::cl::Option
getNextSlot	CodeGen/SlotIndexes.h	/^    SlotIndex getNextSlot() const {$/;"	f	class:llvm::SlotIndex
getNextStackOffset	CodeGen/CallingConvLower.h	/^  unsigned getNextStackOffset() const { return StackOffset; }$/;"	f	class:llvm::CCState
getNextValue	CodeGen/LiveInterval.h	/^    VNInfo *getNextValue(SlotIndex def, VNInfo::Allocator &VNInfoAllocator) {$/;"	f	class:llvm::LiveInterval
getNoExecStack	MC/MCAssembler.h	/^  bool getNoExecStack() const { return NoExecStack; }$/;"	f	class:llvm::MCAssembler
getNoWrapFlags	Analysis/ScalarEvolutionExpressions.h	/^    NoWrapFlags getNoWrapFlags(NoWrapFlags Mask = NoWrapMask) const {$/;"	f	class:llvm::SCEVNAryExpr
getNode	Analysis/Dominators.h	/^  inline DomTreeNode *getNode(BasicBlock *BB) const {$/;"	f	class:llvm::DominatorTree
getNode	Analysis/Dominators.h	/^  inline DomTreeNodeBase<NodeT> *getNode(NodeT *BB) const {$/;"	f	class:llvm::DominatorTreeBase
getNode	Analysis/PostDominators.h	/^  inline DomTreeNode *getNode(BasicBlock *BB) const {$/;"	f	struct:llvm::PostDominatorTree
getNode	Analysis/RegionInfo.h	/^  RegionNode* getNode() const {$/;"	f	class:llvm::Region
getNode	Analysis/RegionIterator.h	/^  NodeType* getNode() const{ return Node.getPointer(); }$/;"	f	class:llvm::RNSuccIterator
getNode	CodeGen/MachineDominators.h	/^  inline MachineDomTreeNode *getNode(MachineBasicBlock *BB) const {$/;"	f	class:llvm::MachineDominatorTree
getNode	CodeGen/MachinePostDominators.h	/^  MachineDomTreeNode *getNode(MachineBasicBlock *BB) const {$/;"	f	struct:llvm::MachinePostDominatorTree
getNode	CodeGen/PBQP/Graph.h	/^    NodeEntry& getNode(NodeItr nItr) { return *nItr; }$/;"	f	class:PBQP::Graph
getNode	CodeGen/PBQP/Graph.h	/^    const NodeEntry& getNode(ConstNodeItr nItr) const { return *nItr; }$/;"	f	class:PBQP::Graph
getNode	CodeGen/ScheduleDAG.h	/^    SDNode *getNode() const {$/;"	f	class:llvm::SUnit
getNode	CodeGen/ScheduleDAG.h	/^    const SUnit *getNode() const { return Node; }$/;"	f	class:llvm::SUnitIterator
getNode	CodeGen/SelectionDAGNodes.h	/^  SDNode *getNode() const { return Node; }$/;"	f	class:llvm::SDValue
getNode	CodeGen/SelectionDAGNodes.h	/^  SDNode *getNode() const { return Val.getNode(); }$/;"	f	class:llvm::SDUse
getNode	CodeGen/SelectionDAGNodes.h	/^  const SDNode *getNode() const { return Node; }$/;"	f	class:llvm::SDNodeIterator
getNode1	CodeGen/PBQP/Graph.h	/^      NodeItr getNode1() const { return node1; }$/;"	f	class:PBQP::Graph::EdgeEntry
getNode1AEItr	CodeGen/PBQP/Graph.h	/^      AdjEdgeItr getNode1AEItr() { return node1AEItr; }$/;"	f	class:PBQP::Graph::EdgeEntry
getNode2	CodeGen/PBQP/Graph.h	/^      NodeItr getNode2() const { return node2; }$/;"	f	class:PBQP::Graph::EdgeEntry
getNode2AEItr	CodeGen/PBQP/Graph.h	/^      AdjEdgeItr getNode2AEItr() { return node2AEItr; }$/;"	f	class:PBQP::Graph::EdgeEntry
getNodeAs	Analysis/RegionInfo.h	/^inline BasicBlock* RegionNode::getNodeAs<BasicBlock>() const {$/;"	f	class:llvm::RegionNode
getNodeAs	Analysis/RegionInfo.h	/^inline Region* RegionNode::getNodeAs<Region>() const {$/;"	f	class:llvm::RegionNode
getNodeAttributes	Support/DOTGraphTraits.h	/^  static std::string getNodeAttributes(const void *,$/;"	f	struct:llvm::DefaultDOTGraphTraits
getNodeCosts	CodeGen/PBQP/Graph.h	/^    Vector& getNodeCosts(NodeItr nItr) { return getNode(nItr).getCosts(); }$/;"	f	class:PBQP::Graph
getNodeCosts	CodeGen/PBQP/Graph.h	/^    const Vector& getNodeCosts(ConstNodeItr nItr) const {$/;"	f	class:PBQP::Graph
getNodeData	CodeGen/PBQP/Graph.h	/^    void* getNodeData(NodeItr nItr) { return getNode(nItr).getData(); }$/;"	f	class:PBQP::Graph
getNodeDegree	CodeGen/PBQP/Graph.h	/^    unsigned getNodeDegree(NodeItr nItr) const {$/;"	f	class:PBQP::Graph
getNodeForBlock	Analysis/Dominators.h	/^  DomTreeNodeBase<NodeT> *getNodeForBlock(NodeT *BB) {$/;"	f	class:llvm::DominatorTreeBase
getNodeHeader	Analysis/IntervalIterator.h	/^inline BasicBlock *getNodeHeader(BasicBlock *BB) { return BB; }$/;"	f	namespace:llvm
getNodeHeader	Analysis/IntervalIterator.h	/^inline BasicBlock *getNodeHeader(Interval *I) { return I->getHeaderNode(); }$/;"	f	namespace:llvm
getNodeId	CodeGen/SelectionDAGNodes.h	/^  int getNodeId() const { return NodeId; }$/;"	f	class:llvm::SDNode
getNodeLabel	Analysis/CFGPrinter.h	/^  std::string getNodeLabel(const BasicBlock *Node,$/;"	f	struct:llvm::DOTGraphTraits
getNodeLabel	Support/DOTGraphTraits.h	/^  std::string getNodeLabel(const void *, const GraphType &) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getNodePtrUnchecked	ADT/ilist.h	/^  pointer getNodePtrUnchecked() const { return NodePtr; }$/;"	f	class:llvm::ilist_iterator
getNonFuncLocal	Analysis/MemoryDependenceAnalysis.h	/^    static MemDepResult getNonFuncLocal() {$/;"	f	class:llvm::MemDepResult
getNonLazySymbolPointerSection	MC/MCObjectFileInfo.h	/^  const MCSection *getNonLazySymbolPointerSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getNonLocal	Analysis/MemoryDependenceAnalysis.h	/^    static MemDepResult getNonLocal() {$/;"	f	class:llvm::MemDepResult
getNonexecutableStackSection	MC/MCAsmInfo.h	/^    virtual const MCSection *getNonexecutableStackSection(MCContext &Ctx) const{$/;"	f	class:llvm::MCAsmInfo
getNoopForMachoTarget	Target/TargetInstrInfo.h	/^  virtual void getNoopForMachoTarget(MCInst &NopInst) const {$/;"	f	class:llvm::TargetInstrInfo
getNormalCtor	PassSupport.h	/^  NormalCtor_t getNormalCtor() const {$/;"	f	class:llvm::PassInfo
getNormalDest	Instructions.h	/^  BasicBlock *getNormalDest() const {$/;"	f	class:llvm::InvokeInst
getNullValue	ADT/APInt.h	/^  static APInt getNullValue(unsigned numBits) {$/;"	f	class:llvm::APInt
getNumAdditionalVals	Support/CommandLine.h	/^  inline unsigned getNumAdditionalVals() const { return AdditionalVals; }$/;"	f	class:llvm::cl::Option
getNumAllocatableRegs	CodeGen/RegisterClassInfo.h	/^  unsigned getNumAllocatableRegs(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::RegisterClassInfo
getNumArgOperands	Instructions.h	/^  unsigned getNumArgOperands() const { return getNumOperands() - 1; }$/;"	f	class:llvm::CallInst
getNumArgOperands	Instructions.h	/^  unsigned getNumArgOperands() const { return getNumOperands() - 3; }$/;"	f	class:llvm::InvokeInst
getNumArgs	TableGen/Record.h	/^  unsigned getNumArgs() const { return Args.size(); }$/;"	f	class:llvm::DagInit
getNumBackEdges	Analysis/LoopInfo.h	/^  unsigned getNumBackEdges() const {$/;"	f	class:llvm::LoopBase
getNumBits	TableGen/Record.h	/^  unsigned getNumBits() const { return Bits.size(); }$/;"	f	class:llvm::BitsInit
getNumBits	TableGen/Record.h	/^  unsigned getNumBits() const { return Size; }$/;"	f	class:llvm::BitsRecTy
getNumBlockIDs	CodeGen/MachineFunction.h	/^  unsigned getNumBlockIDs() const { return (unsigned)MBBNumbering.size(); }$/;"	f	class:llvm::MachineFunction
getNumBlocks	Analysis/LoopInfo.h	/^  unsigned getNumBlocks() const {$/;"	f	class:llvm::LoopBase
getNumBuckets	ADT/DenseMap.h	/^  unsigned getNumBuckets() const {$/;"	f	class:llvm::DenseMap
getNumBuckets	ADT/DenseMap.h	/^  unsigned getNumBuckets() const {$/;"	f	class:llvm::DenseMapBase
getNumBuckets	ADT/DenseMap.h	/^  unsigned getNumBuckets() const {$/;"	f	class:llvm::SmallDenseMap
getNumBuckets	ADT/StringMap.h	/^  unsigned getNumBuckets() const { return NumBuckets; }$/;"	f	class:llvm::StringMapImpl
getNumBundles	CodeGen/EdgeBundles.h	/^  unsigned getNumBundles() const { return EC.getNumClasses(); }$/;"	f	class:llvm::EdgeBundles
getNumCases	Instructions.h	/^  unsigned getNumCases() const {$/;"	f	class:llvm::SwitchInst
getNumChildren	Analysis/Dominators.h	/^  size_t getNumChildren() const {$/;"	f	class:llvm::DomTreeNodeBase
getNumClasses	ADT/EquivalenceClasses.h	/^  unsigned getNumClasses() const {$/;"	f	class:llvm::EquivalenceClasses
getNumClasses	ADT/IntEqClasses.h	/^  unsigned getNumClasses() const { return NumClasses; }$/;"	f	class:llvm::IntEqClasses
getNumClauses	Instructions.h	/^  unsigned getNumClauses() const { return getNumOperands() - 1; }$/;"	f	class:llvm::LandingPadInst
getNumContainedManagers	PassManagers.h	/^  virtual unsigned getNumContainedManagers() const {$/;"	f	class:llvm::PMTopLevelManager
getNumContainedPasses	PassManagers.h	/^  virtual unsigned getNumContainedPasses() const {$/;"	f	class:llvm::PMDataManager
getNumContainedTypes	Type.h	/^  unsigned getNumContainedTypes() const { return NumContainedTys; }$/;"	f	class:llvm::Type
getNumDefs	MC/MCInstrDesc.h	/^  unsigned getNumDefs() const {$/;"	f	class:llvm::MCInstrDesc
getNumDestinations	Instructions.h	/^  unsigned getNumDestinations() const { return getNumOperands()-1; }$/;"	f	class:llvm::IndirectBrInst
getNumEdges	CodeGen/PBQP/Graph.h	/^    unsigned getNumEdges() const { return numEdges; }$/;"	f	class:PBQP::Graph
getNumElements	DerivedTypes.h	/^  uint64_t getNumElements() const { return NumElements; }$/;"	f	class:llvm::ArrayType
getNumElements	DerivedTypes.h	/^  unsigned getNumElements() const { return NumContainedTys; }$/;"	f	class:llvm::StructType
getNumElements	DerivedTypes.h	/^  unsigned getNumElements() const { return NumElements; }$/;"	f	class:llvm::VectorType
getNumEntries	ADT/DenseMap.h	/^  unsigned getNumEntries() const {$/;"	f	class:llvm::DenseMap
getNumEntries	ADT/DenseMap.h	/^  unsigned getNumEntries() const {$/;"	f	class:llvm::DenseMapBase
getNumEntries	ADT/DenseMap.h	/^  unsigned getNumEntries() const {$/;"	f	class:llvm::SmallDenseMap
getNumExecutions	Analysis/ProfileDataLoader.h	/^  unsigned getNumExecutions() const { return CommandLines.size(); }$/;"	f	class:llvm::ProfileDataLoader
getNumExecutions	Analysis/ProfileInfoLoader.h	/^  unsigned getNumExecutions() const { return CommandLines.size(); }$/;"	f	class:llvm::ProfileInfoLoader
getNumFixedFromVariadicInfo	CodeGen/SelectionDAGISel.h	/^  static inline int getNumFixedFromVariadicInfo(unsigned Flags) {$/;"	f	class:llvm::SelectionDAGISel
getNumFixedObjects	CodeGen/MachineFrameInfo.h	/^  unsigned getNumFixedObjects() const { return NumFixedObjects; }$/;"	f	class:llvm::MachineFrameInfo
getNumFrameInfos	MC/MCStreamer.h	/^    unsigned getNumFrameInfos() {$/;"	f	class:llvm::MCStreamer
getNumImplicitDefs	MC/MCInstrDesc.h	/^  unsigned getNumImplicitDefs() const {$/;"	f	class:llvm::MCInstrDesc
getNumImplicitUses	MC/MCInstrDesc.h	/^  unsigned getNumImplicitUses() const {$/;"	f	class:llvm::MCInstrDesc
getNumIncomingValues	Instructions.h	/^  unsigned getNumIncomingValues() const { return getNumOperands(); }$/;"	f	class:llvm::PHINode
getNumIndices	Instructions.h	/^  unsigned getNumIndices() const {  \/\/ Note: always non-negative$/;"	f	class:llvm::GetElementPtrInst
getNumIndices	Instructions.h	/^  unsigned getNumIndices() const {$/;"	f	class:llvm::ExtractValueInst
getNumIndices	Instructions.h	/^  unsigned getNumIndices() const {$/;"	f	class:llvm::InsertValueInst
getNumIndices	Operator.h	/^  unsigned getNumIndices() const {  \/\/ Note: always non-negative$/;"	f	class:llvm::GEPOperator
getNumIntervals	CodeGen/LiveStackAnalysis.h	/^    unsigned getNumIntervals() const { return (unsigned)S2IMap.size(); }$/;"	f	class:llvm::LiveStacks
getNumItems	ADT/StringMap.h	/^  unsigned getNumItems() const { return NumItems; }$/;"	f	class:llvm::StringMapImpl
getNumItems	Support/IntegersSubset.h	/^  unsigned getNumItems() const {$/;"	f	class:llvm::IntegersSubsetGeneric
getNumItemsFromConstant	Support/IntegersSubset.h	/^  static unsigned getNumItemsFromConstant(Constant *C) {$/;"	f	class:llvm::IntegersSubset
getNumMicroOps	MC/MCInstrItineraries.h	/^  int getNumMicroOps(unsigned ItinClassIndx) const {$/;"	f	class:llvm::InstrItineraryData
getNumNodes	CodeGen/PBQP/Graph.h	/^    unsigned getNumNodes() const { return numNodes; }$/;"	f	class:PBQP::Graph
getNumObjects	CodeGen/MachineFrameInfo.h	/^  unsigned getNumObjects() const { return Objects.size(); }$/;"	f	class:llvm::MachineFrameInfo
getNumOccurrences	Support/CommandLine.h	/^  inline int getNumOccurrences() const { return NumOccurrences; }$/;"	f	class:llvm::cl::Option
getNumOccurrencesFlag	Support/CommandLine.h	/^  inline enum NumOccurrencesFlag getNumOccurrencesFlag() const {$/;"	f	class:llvm::cl::Option
getNumOpcodes	MC/MCInstrInfo.h	/^  unsigned getNumOpcodes() const { return NumOpcodes; }$/;"	f	class:llvm::MCInstrInfo
getNumOperandInfos	Bitcode/BitCodes.h	/^  unsigned getNumOperandInfos() const {$/;"	f	class:llvm::BitCodeAbbrev
getNumOperandRegisters	InlineAsm.h	/^  static unsigned getNumOperandRegisters(unsigned Flag) {$/;"	f	class:llvm::InlineAsm
getNumOperands	Analysis/ScalarEvolutionExpressions.h	/^    size_t getNumOperands() const { return NumOperands; }$/;"	f	class:llvm::SCEVNAryExpr
getNumOperands	CodeGen/MachineInstr.h	/^  unsigned getNumOperands() const { return (unsigned)Operands.size(); }$/;"	f	class:llvm::MachineInstr
getNumOperands	CodeGen/SelectionDAGNodes.h	/^  unsigned getNumOperands() const { return NumOperands; }$/;"	f	class:llvm::SDNode
getNumOperands	CodeGen/SelectionDAGNodes.h	/^inline unsigned SDValue::getNumOperands() const {$/;"	f	class:llvm::SDValue
getNumOperands	MC/MCInst.h	/^  unsigned getNumOperands() const { return Operands.size(); }$/;"	f	class:llvm::MCInst
getNumOperands	MC/MCInstrDesc.h	/^  unsigned getNumOperands() const {$/;"	f	class:llvm::MCInstrDesc
getNumOperands	Metadata.h	/^  unsigned getNumOperands() const { return NumOperands; }$/;"	f	class:llvm::MDNode
getNumOperands	TableGen/Record.h	/^  virtual int getNumOperands() const { return 1; }$/;"	f	class:llvm::UnOpInit
getNumOperands	TableGen/Record.h	/^  virtual int getNumOperands() const { return 2; }$/;"	f	class:llvm::BinOpInit
getNumOperands	TableGen/Record.h	/^  virtual int getNumOperands() const { return 3; }$/;"	f	class:llvm::TernOpInit
getNumOperands	User.h	/^  unsigned getNumOperands() const { return NumOperands; }$/;"	f	class:llvm::User
getNumOptions	Support/CommandLine.h	/^  unsigned getNumOptions() const { return unsigned(Values.size()); }$/;"	f	class:llvm::cl::parser
getNumParams	DerivedTypes.h	/^  unsigned getNumParams() const { return NumContainedTys - 1; }$/;"	f	class:llvm::FunctionType
getNumReferences	Analysis/CallGraph.h	/^  unsigned getNumReferences() const { return NumReferences; }$/;"	f	class:llvm::CallGraphNode
getNumRegClasses	MC/MCRegisterInfo.h	/^  unsigned getNumRegClasses() const {$/;"	f	class:llvm::MCRegisterInfo
getNumRegClasses	Target/TargetRegisterInfo.h	/^  unsigned getNumRegClasses() const {$/;"	f	class:llvm::TargetRegisterInfo
getNumRegUnits	MC/MCRegisterInfo.h	/^  unsigned getNumRegUnits() const {$/;"	f	class:llvm::MCRegisterInfo
getNumRegisters	Target/TargetLowering.h	/^  unsigned getNumRegisters(LLVMContext &Context, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getNumRegs	MC/MCRegisterInfo.h	/^  unsigned getNumRegs() const { return RegsSize; }$/;"	f	class:llvm::MCRegisterClass
getNumRegs	MC/MCRegisterInfo.h	/^  unsigned getNumRegs() const {$/;"	f	class:llvm::MCRegisterInfo
getNumRegs	Target/TargetRegisterInfo.h	/^  unsigned getNumRegs() const { return MC->getNumRegs(); }$/;"	f	class:llvm::TargetRegisterClass
getNumSections	Object/ELF.h	/^uint64_t ELFObjectFile<target_endianness, is64Bits>::getNumSections() const {$/;"	f	class:llvm::object::ELFObjectFile
getNumSignBits	ADT/APInt.h	/^  unsigned getNumSignBits() const {$/;"	f	class:llvm::APInt
getNumSolelyBlockNodes	CodeGen/LatencyPriorityQueue.h	/^    unsigned getNumSolelyBlockNodes(unsigned NodeNum) const {$/;"	f	class:llvm::LatencyPriorityQueue
getNumSolelyBlockNodes	CodeGen/ResourcePriorityQueue.h	/^    unsigned getNumSolelyBlockNodes(unsigned NodeNum) const {$/;"	f	class:llvm::ResourcePriorityQueue
getNumSubRegIndices	MC/MCRegisterInfo.h	/^  unsigned getNumSubRegIndices() const {$/;"	f	class:llvm::MCRegisterInfo
getNumSuccessors	InstrTypes.h	/^  unsigned getNumSuccessors() const {$/;"	f	class:llvm::TerminatorInst
getNumSuccessors	Instructions.h	/^  unsigned getNumSuccessors() const { return 0; }$/;"	f	class:llvm::ResumeInst
getNumSuccessors	Instructions.h	/^  unsigned getNumSuccessors() const { return 0; }$/;"	f	class:llvm::ReturnInst
getNumSuccessors	Instructions.h	/^  unsigned getNumSuccessors() const { return 0; }$/;"	f	class:llvm::UnreachableInst
getNumSuccessors	Instructions.h	/^  unsigned getNumSuccessors() const { return 1+isConditional(); }$/;"	f	class:llvm::BranchInst
getNumSuccessors	Instructions.h	/^  unsigned getNumSuccessors() const { return 2; }$/;"	f	class:llvm::InvokeInst
getNumSuccessors	Instructions.h	/^  unsigned getNumSuccessors() const { return getNumOperands()-1; }$/;"	f	class:llvm::IndirectBrInst
getNumSuccessors	Instructions.h	/^  unsigned getNumSuccessors() const { return getNumOperands()\/2; }$/;"	f	class:llvm::SwitchInst
getNumTombstones	ADT/DenseMap.h	/^  unsigned getNumTombstones() const {$/;"	f	class:llvm::DenseMap
getNumTombstones	ADT/DenseMap.h	/^  unsigned getNumTombstones() const {$/;"	f	class:llvm::DenseMapBase
getNumTombstones	ADT/DenseMap.h	/^  unsigned getNumTombstones() const {$/;"	f	class:llvm::SmallDenseMap
getNumValNums	CodeGen/LiveInterval.h	/^    unsigned getNumValNums() const { return (unsigned)valnos.size(); }$/;"	f	class:llvm::LiveInterval
getNumValues	CodeGen/SelectionDAGNodes.h	/^  unsigned getNumValues() const { return NumValues; }$/;"	f	class:llvm::SDNode
getNumVirtRegs	CodeGen/MachineRegisterInfo.h	/^  unsigned getNumVirtRegs() const { return VRegInfo.size(); }$/;"	f	class:llvm::MachineRegisterInfo
getNumW64UnwindInfos	MC/MCStreamer.h	/^    unsigned getNumW64UnwindInfos() {$/;"	f	class:llvm::MCStreamer
getNumWords	ADT/APInt.h	/^  static unsigned getNumWords(unsigned BitWidth) {$/;"	f	class:llvm::APInt
getNumWords	ADT/APInt.h	/^  unsigned getNumWords() const {$/;"	f	class:llvm::APInt
getNumber	Analysis/PathProfileInfo.h	/^  inline unsigned int getNumber() const { return _number; }$/;"	f	class:llvm::ProfilePath
getNumber	CodeGen/MachineBasicBlock.h	/^  int getNumber() const { return Number; }$/;"	f	class:llvm::MachineBasicBlock
getNumberOfFrames	DebugInfo/DIContext.h	/^  uint32_t getNumberOfFrames() const {$/;"	f	class:llvm::DIInliningInfo
getNumerator	Support/BranchProbability.h	/^  uint32_t getNumerator() const { return N; }$/;"	f	class:llvm::BranchProbability
getOS	ADT/Triple.h	/^  OSType getOS() const { return OS; }$/;"	f	class:llvm::Triple
getOSABI	MC/MCELFObjectWriter.h	/^  static uint8_t getOSABI(Triple::OSType OSType) {$/;"	f	class:llvm::MCELFObjectTargetWriter
getOSABI	MC/MCELFObjectWriter.h	/^  uint8_t getOSABI() { return OSABI; }$/;"	f	class:llvm::MCELFObjectTargetWriter
getOSMajorVersion	ADT/Triple.h	/^  unsigned getOSMajorVersion() const {$/;"	f	class:llvm::Triple
getOStream	ExecutionEngine/ObjectBuffer.h	/^  raw_ostream &getOStream() { return OS; }$/;"	f	class:llvm::ObjectBufferStream
getOStream	Support/GraphWriter.h	/^  raw_ostream &getOStream() {$/;"	f	class:llvm::GraphWriter
getObjCPropertyGetterName	DebugInfo.h	/^    StringRef getObjCPropertyGetterName() const {$/;"	f	class:llvm::DIDerivedType
getObjCPropertyGetterName	DebugInfo.h	/^    StringRef getObjCPropertyGetterName() const {$/;"	f	class:llvm::DIObjCProperty
getObjCPropertyName	DebugInfo.h	/^    StringRef getObjCPropertyName() const { $/;"	f	class:llvm::DIDerivedType
getObjCPropertyName	DebugInfo.h	/^    StringRef getObjCPropertyName() const { return getStringField(1); }$/;"	f	class:llvm::DIObjCProperty
getObjCPropertySetterName	DebugInfo.h	/^    StringRef getObjCPropertySetterName() const {$/;"	f	class:llvm::DIDerivedType
getObjCPropertySetterName	DebugInfo.h	/^    StringRef getObjCPropertySetterName() const {$/;"	f	class:llvm::DIObjCProperty
getObjFileInfo	CodeGen/MachineModuleInfo.h	/^  Ty &getObjFileInfo() {$/;"	f	class:llvm::MachineModuleInfo
getObjFileInfo	CodeGen/MachineModuleInfo.h	/^  const Ty &getObjFileInfo() const {$/;"	f	class:llvm::MachineModuleInfo
getObjFileLowering	Target/TargetLowering.h	/^  const TargetLoweringObjectFile &getObjFileLowering() const { return TLOF; }$/;"	f	class:llvm::TargetLowering
getObject	Object/MachO.h	/^  MachOObject *getObject() { return MachOObj; }$/;"	f	class:llvm::object::MachOObjectFile
getObjectAlignment	CodeGen/MachineFrameInfo.h	/^  unsigned getObjectAlignment(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
getObjectAllocation	CodeGen/MachineFrameInfo.h	/^  const AllocaInst* getObjectAllocation(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
getObjectFileInfo	MC/MCContext.h	/^    const MCObjectFileInfo *getObjectFileInfo() const { return MOFI; }$/;"	f	class:llvm::MCContext
getObjectIndexBegin	CodeGen/MachineFrameInfo.h	/^  int getObjectIndexBegin() const { return -NumFixedObjects; }$/;"	f	class:llvm::MachineFrameInfo
getObjectIndexEnd	CodeGen/MachineFrameInfo.h	/^  int getObjectIndexEnd() const { return (int)Objects.size()-NumFixedObjects; }$/;"	f	class:llvm::MachineFrameInfo
getObjectOffset	CodeGen/MachineFrameInfo.h	/^  int64_t getObjectOffset(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
getObjectSize	CodeGen/MachineFrameInfo.h	/^  int64_t getObjectSize(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
getObjectType	Object/ELF.h	/^  virtual StringRef getObjectType() const { return "ELF"; }$/;"	f	class:llvm::object::ELFObjectFile
getOffset	CodeGen/MachineMemOperand.h	/^  int64_t getOffset() const { return PtrInfo.Offset; }$/;"	f	class:llvm::MachineMemOperand
getOffset	CodeGen/MachineOperand.h	/^  int64_t getOffset() const {$/;"	f	class:llvm::MachineOperand
getOffset	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getOffset() const { return getOperand(2); }$/;"	f	class:llvm::LoadSDNode
getOffset	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getOffset() const { return getOperand(3); }$/;"	f	class:llvm::StoreSDNode
getOffset	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getOffset() const {$/;"	f	class:llvm::LSBaseSDNode
getOffset	CodeGen/SelectionDAGNodes.h	/^  int getOffset() const {$/;"	f	class:llvm::ConstantPoolSDNode
getOffset	CodeGen/SelectionDAGNodes.h	/^  int64_t getOffset() const { return Offset; }$/;"	f	class:llvm::BlockAddressSDNode
getOffset	CodeGen/SelectionDAGNodes.h	/^  int64_t getOffset() const { return Offset; }$/;"	f	class:llvm::GlobalAddressSDNode
getOffset	CodeGen/SelectionDAGNodes.h	/^  int64_t getOffset() const { return Offset; }$/;"	f	class:llvm::TargetIndexSDNode
getOffset	IntrinsicInst.h	/^    uint64_t getOffset() const {$/;"	f	class:llvm::DbgValueInst
getOffset	MC/MCAssembler.h	/^  const MCExpr &getOffset() const { return *Offset; }$/;"	f	class:llvm::MCOrgFragment
getOffset	MC/MCAssembler.h	/^  uint64_t getOffset() const { return Offset; }$/;"	f	class:llvm::MCSymbolData
getOffset	MC/MCFixup.h	/^  uint32_t getOffset() const { return Offset; }$/;"	f	class:llvm::MCFixup
getOffset	MC/MCWin64EH.h	/^    unsigned getOffset() const { return Offset; }$/;"	f	class:llvm::MCWin64EHInstruction
getOffset	MC/MachineLocation.h	/^  int getOffset()        const { return Offset; }$/;"	f	class:llvm::MachineLocation
getOffset	Object/ObjectFile.h	/^inline error_code RelocationRef::getOffset(uint64_t &Result) const {$/;"	f	class:llvm::object::RelocationRef
getOffsetAdjustment	CodeGen/MachineFrameInfo.h	/^  int getOffsetAdjustment() const { return OffsetAdjustment; }$/;"	f	class:llvm::MachineFrameInfo
getOffsetInBits	DebugInfo.h	/^    uint64_t getOffsetInBits() const    { return getUInt64Field(7); }$/;"	f	class:llvm::DIType
getOffsetOfLocalArea	Target/TargetFrameLowering.h	/^  int getOffsetOfLocalArea() const { return LocalAreaOffset; }$/;"	f	class:llvm::TargetFrameLowering
getOne	Support/BranchProbability.h	/^  static BranchProbability getOne() { return BranchProbability(1, 1); }$/;"	f	class:llvm::BranchProbability
getOneBitSet	ADT/APInt.h	/^  static APInt getOneBitSet(unsigned numBits, unsigned BitNo) {$/;"	f	class:llvm::APInt
getOpaqueValue	ADT/PointerIntPair.h	/^  void *getOpaqueValue() const { return reinterpret_cast<void*>(Value); }$/;"	f	class:llvm::PointerIntPair
getOpaqueValue	ADT/PointerUnion.h	/^    void *getOpaqueValue() const { return Val.getOpaqueValue(); }$/;"	f	class:llvm::PointerUnion3
getOpaqueValue	ADT/PointerUnion.h	/^    void *getOpaqueValue() const { return Val.getOpaqueValue(); }$/;"	f	class:llvm::PointerUnion4
getOpaqueValue	ADT/PointerUnion.h	/^    void *getOpaqueValue() const { return Val.getOpaqueValue(); }$/;"	f	class:llvm::PointerUnionUIntTraits
getOpcode	CodeGen/MachineInstr.h	/^  int getOpcode() const { return MCID->Opcode; }$/;"	f	class:llvm::MachineInstr
getOpcode	CodeGen/SelectionDAGNodes.h	/^  unsigned getOpcode()  const { return (unsigned short)NodeType; }$/;"	f	class:llvm::SDNode
getOpcode	CodeGen/SelectionDAGNodes.h	/^inline unsigned SDValue::getOpcode() const {$/;"	f	class:llvm::SDValue
getOpcode	Constants.h	/^  unsigned getOpcode() const { return getSubclassDataFromValue(); }$/;"	f	class:llvm::ConstantExpr
getOpcode	InstrTypes.h	/^  BinaryOps getOpcode() const {$/;"	f	class:llvm::BinaryOperator
getOpcode	InstrTypes.h	/^  Instruction::CastOps getOpcode() const {$/;"	f	class:llvm::CastInst
getOpcode	InstrTypes.h	/^  OtherOps getOpcode() const {$/;"	f	class:llvm::CmpInst
getOpcode	Instruction.h	/^  unsigned getOpcode() const { return getValueID() - InstructionVal; }$/;"	f	class:llvm::Instruction
getOpcode	Instructions.h	/^  OtherOps getOpcode() const {$/;"	f	class:llvm::SelectInst
getOpcode	MC/MCExpr.h	/^  Opcode getOpcode() const { return Op; }$/;"	f	class:llvm::MCBinaryExpr
getOpcode	MC/MCExpr.h	/^  Opcode getOpcode() const { return Op; }$/;"	f	class:llvm::MCUnaryExpr
getOpcode	MC/MCInst.h	/^  unsigned getOpcode() const { return Opcode; }$/;"	f	class:llvm::MCInst
getOpcode	MC/MCInstrDesc.h	/^  unsigned getOpcode() const {$/;"	f	class:llvm::MCInstrDesc
getOpcode	Operator.h	/^  static unsigned getOpcode(const Value *V) {$/;"	f	class:llvm::Operator
getOpcode	Operator.h	/^  unsigned getOpcode() const {$/;"	f	class:llvm::Operator
getOpcode	TableGen/Record.h	/^  BinaryOp getOpcode() const { return Opc; }$/;"	f	class:llvm::BinOpInit
getOpcode	TableGen/Record.h	/^  TernaryOp getOpcode() const { return Opc; }$/;"	f	class:llvm::TernOpInit
getOpcode	TableGen/Record.h	/^  UnaryOp getOpcode() const { return Opc; }$/;"	f	class:llvm::UnOpInit
getOpcodeAfterMemoryUnfold	Target/TargetInstrInfo.h	/^  virtual unsigned getOpcodeAfterMemoryUnfold(unsigned Opc,$/;"	f	class:llvm::TargetInstrInfo
getOpcodeName	Instruction.h	/^  const char *getOpcodeName() const { return getOpcodeName(getOpcode()); }$/;"	f	class:llvm::Instruction
getOperand	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *getOperand() const { return Op; }$/;"	f	class:llvm::SCEVCastExpr
getOperand	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *getOperand(unsigned i) const {$/;"	f	class:llvm::SCEVNAryExpr
getOperand	CodeGen/MachineInstr.h	/^  MachineOperand& getOperand(unsigned i) {$/;"	f	class:llvm::MachineInstr
getOperand	CodeGen/MachineInstr.h	/^  const MachineOperand& getOperand(unsigned i) const {$/;"	f	class:llvm::MachineInstr
getOperand	CodeGen/MachineRegisterInfo.h	/^    MachineOperand &getOperand() const {$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
getOperand	CodeGen/ScheduleDAG.h	/^    unsigned getOperand() const { return Operand; }$/;"	f	class:llvm::SUnitIterator
getOperand	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getOperand(unsigned Num) const {$/;"	f	class:llvm::SDNode
getOperand	CodeGen/SelectionDAGNodes.h	/^  unsigned getOperand() const { return Operand; }$/;"	f	class:llvm::SDNodeIterator
getOperand	CodeGen/SelectionDAGNodes.h	/^inline const SDValue &SDValue::getOperand(unsigned i) const {$/;"	f	class:llvm::SDValue
getOperand	MC/MCInst.h	/^  MCOperand &getOperand(unsigned i) { return Operands[i]; }$/;"	f	class:llvm::MCInst
getOperand	MC/MCInst.h	/^  const MCOperand &getOperand(unsigned i) const { return Operands[i]; }$/;"	f	class:llvm::MCInst
getOperand	Support/GetElementPtrTypeIterator.h	/^    Value *getOperand() const { return *OpIt; }$/;"	f	class:llvm::generic_gep_type_iterator
getOperand	TableGen/Record.h	/^  Init *getOperand() const { return LHS; }$/;"	f	class:llvm::UnOpInit
getOperand	TableGen/Record.h	/^  virtual Init *getOperand(int i) const {$/;"	f	class:llvm::BinOpInit
getOperand	TableGen/Record.h	/^  virtual Init *getOperand(int i) const {$/;"	f	class:llvm::TernOpInit
getOperand	TableGen/Record.h	/^  virtual Init *getOperand(int i) const {$/;"	f	class:llvm::UnOpInit
getOperand	User.h	/^  Value *getOperand(unsigned i) const {$/;"	f	class:llvm::User
getOperandConstraint	MC/MCInstrDesc.h	/^  int getOperandConstraint(unsigned OpNum,$/;"	f	class:llvm::MCInstrDesc
getOperandCycle	MC/MCInstrItineraries.h	/^  int getOperandCycle(unsigned ItinClassIndx, unsigned OperandIdx) const {$/;"	f	class:llvm::InstrItineraryData
getOperandInfo	Bitcode/BitCodes.h	/^  const BitCodeAbbrevOp &getOperandInfo(unsigned N) const {$/;"	f	class:llvm::BitCodeAbbrev
getOperandLatency	MC/MCInstrItineraries.h	/^  int getOperandLatency(unsigned DefClass, unsigned DefIdx,$/;"	f	class:llvm::InstrItineraryData
getOperandNo	CodeGen/MachineInstrBundle.h	/^  unsigned getOperandNo() const {$/;"	f	class:llvm::MachineOperandIteratorBase
getOperandNo	CodeGen/MachineRegisterInfo.h	/^    unsigned getOperandNo() const {$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
getOperandNo	CodeGen/SelectionDAGNodes.h	/^    unsigned getOperandNo() const {$/;"	f	class:llvm::SDNode::use_iterator
getOperandNo	Support/CFG.h	/^  unsigned getOperandNo() const {$/;"	f	class:llvm::PredIterator
getOperandNo	User.h	/^unsigned value_use_iterator<UserTy>::getOperandNo() const {$/;"	f	class:llvm::value_use_iterator
getOperandNumForIncomingValue	Instructions.h	/^  static unsigned getOperandNumForIncomingValue(unsigned i) {$/;"	f	class:llvm::PHINode
getOperandUse	User.h	/^  Use &getOperandUse(unsigned i) {$/;"	f	class:llvm::User
getOperandUse	User.h	/^  const Use &getOperandUse(unsigned i) const {$/;"	f	class:llvm::User
getOperandValToReplace	Analysis/IVUsers.h	/^  Value *getOperandValToReplace() const {$/;"	f	class:llvm::IVStrideUse
getOperation	Instructions.h	/^  BinOp getOperation() const {$/;"	f	class:llvm::AtomicRMWInst
getOperation	MC/MCDwarf.h	/^    OpType getOperation() const { return Operation; }$/;"	f	class:llvm::MCCFIInstruction
getOperation	MC/MCWin64EH.h	/^    OpType getOperation() const { return Operation; }$/;"	f	class:llvm::MCWin64EHInstruction
getOperationAction	Target/TargetLowering.h	/^  LegalizeAction getOperationAction(unsigned Op, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getOperator	TableGen/Record.h	/^  Init *getOperator() const { return Val; }$/;"	f	class:llvm::DagInit
getOptLevel	CodeGen/Passes.h	/^  CodeGenOpt::Level getOptLevel() const { return TM->getOptLevel(); }$/;"	f	class:llvm::TargetPassConfig
getOptLevel	MC/MCCodeGenInfo.h	/^    CodeGenOpt::Level getOptLevel() const { return OptLevel; }$/;"	f	class:llvm::MCCodeGenInfo
getOptimalMemOpType	Target/TargetLowering.h	/^  virtual EVT getOptimalMemOpType(uint64_t \/*Size*\/,$/;"	f	class:llvm::TargetLowering
getOption	Support/CommandLine.h	/^  const char *getOption(unsigned N) const { return Values[N].Name; }$/;"	f	class:llvm::cl::parser
getOptionHiddenFlag	Support/CommandLine.h	/^  inline enum OptionHidden getOptionHiddenFlag() const {$/;"	f	class:llvm::cl::Option
getOptionValue	Support/CommandLine.h	/^  virtual const GenericOptionValue &getOptionValue(unsigned N) const {$/;"	f	class:llvm::cl::parser
getOptionWidth	Support/CommandLine.h	/^  virtual size_t getOptionWidth() const {return Parser.getOptionWidth(*this);}$/;"	f	class:llvm::cl::bits
getOptionWidth	Support/CommandLine.h	/^  virtual size_t getOptionWidth() const {return Parser.getOptionWidth(*this);}$/;"	f	class:llvm::cl::list
getOptionWidth	Support/CommandLine.h	/^  virtual size_t getOptionWidth() const {return Parser.getOptionWidth(*this);}$/;"	f	class:llvm::cl::opt
getOrCreateBlockInfo	Bitcode/BitstreamReader.h	/^  BlockInfo &getOrCreateBlockInfo(unsigned BlockID) {$/;"	f	class:llvm::BitstreamReader
getOrCreateBlockInfo	Bitcode/BitstreamWriter.h	/^  BlockInfo &getOrCreateBlockInfo(unsigned BlockID) {$/;"	f	class:llvm::BitstreamWriter
getOrCreateInterval	CodeGen/LiveIntervalAnalysis.h	/^    LiveInterval &getOrCreateInterval(unsigned Reg) {$/;"	f	class:llvm::LiveIntervals
getOrCreateSectionData	MC/MCAssembler.h	/^  MCSectionData &getOrCreateSectionData(const MCSection &Section,$/;"	f	class:llvm::MCAssembler
getOrCreateSymbolData	MC/MCAssembler.h	/^  MCSymbolData &getOrCreateSymbolData(const MCSymbol &Symbol,$/;"	f	class:llvm::MCAssembler
getOrEmitGlobalVariable	ExecutionEngine/ExecutionEngine.h	/^  virtual void *getOrEmitGlobalVariable(const GlobalVariable *GV) {$/;"	f	class:llvm::ExecutionEngine
getOrInsertLeaderValue	ADT/EquivalenceClasses.h	/^  const ElemTy &getOrInsertLeaderValue(const ElemTy &V) {$/;"	f	class:llvm::EquivalenceClasses
getOrder	CodeGen/RegisterClassInfo.h	/^  ArrayRef<unsigned> getOrder(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::RegisterClassInfo
getOrdering	CodeGen/SelectionDAGNodes.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::MemSDNode
getOrdering	Instructions.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::AtomicCmpXchgInst
getOrdering	Instructions.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::AtomicRMWInst
getOrdering	Instructions.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::FenceInst
getOrdering	Instructions.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::LoadInst
getOrdering	Instructions.h	/^  AtomicOrdering getOrdering() const {$/;"	f	class:llvm::StoreInst
getOrdinal	MC/MCAssembler.h	/^  unsigned getOrdinal() const { return Ordinal; }$/;"	f	class:llvm::MCSectionData
getOrdinal	Support/COFF.h	/^    uint16_t getOrdinal() const {$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
getOrdinalSuffix	ADT/StringExtras.h	/^static inline StringRef getOrdinalSuffix(unsigned Val) {$/;"	f	namespace:llvm
getOrigAlign	Target/TargetCallingConv.h	/^    unsigned getOrigAlign() const {$/;"	f	struct:llvm::ISD::ArgFlagsTy
getOrigLocation	DebugInfo.h	/^    DILocation getOrigLocation() const { return getFieldAs<DILocation>(3); }$/;"	f	class:llvm::DILocation
getOriginalAlignment	CodeGen/SelectionDAGNodes.h	/^  unsigned getOriginalAlignment() const { $/;"	f	class:llvm::MemSDNode
getOverdefinedVal	Analysis/SparsePropagation.h	/^  LatticeVal getOverdefinedVal() const { return OverdefinedVal; }$/;"	f	class:llvm::AbstractLatticeFunction
getPCSymbol	MC/MCAsmInfo.h	/^    const char *getPCSymbol() const {$/;"	f	class:llvm::MCAsmInfo
getPDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *getPDataSection() const { return PDataSection; }$/;"	f	class:llvm::MCObjectFileInfo
getPICJumpTableEntry	Target/TargetJITInfo.h	/^    virtual uintptr_t getPICJumpTableEntry(uintptr_t BB, uintptr_t JTBase) {$/;"	f	class:llvm::TargetJITInfo
getPMDataManager	PassAnalysisSupport.h	/^  inline PMDataManager &getPMDataManager() { return PM; }$/;"	f	class:llvm::AnalysisResolver
getPackedFields	CodeGen/MachORelocation.h	/^    uint32_t getPackedFields() const {$/;"	f	class:llvm::MachORelocation
getParamAlignment	Attributes.h	/^  unsigned getParamAlignment(unsigned Idx) const {$/;"	f	class:llvm::AttrListPtr
getParamAlignment	Function.h	/^  unsigned getParamAlignment(unsigned i) const {$/;"	f	class:llvm::Function
getParamAlignment	Instructions.h	/^  unsigned getParamAlignment(unsigned i) const {$/;"	f	class:llvm::CallInst
getParamAlignment	Instructions.h	/^  unsigned getParamAlignment(unsigned i) const {$/;"	f	class:llvm::InvokeInst
getParamAlignment	Support/CallSite.h	/^  uint16_t getParamAlignment(uint16_t i) const {$/;"	f	class:llvm::CallSiteBase
getParamAttributes	Attributes.h	/^  Attributes getParamAttributes(unsigned Idx) const {$/;"	f	class:llvm::AttrListPtr
getParamAttributes	Function.h	/^  Attributes getParamAttributes(unsigned Idx) const {$/;"	f	class:llvm::Function
getParamType	DerivedTypes.h	/^  Type *getParamType(unsigned i) const { return ContainedTys[i+1]; }$/;"	f	class:llvm::FunctionType
getParent	Analysis/RegionInfo.h	/^  Region *getParent() const { return RegionNode::getParent(); }$/;"	f	class:llvm::Region
getParent	Analysis/RegionInfo.h	/^  inline Region* getParent() const { return parent; }$/;"	f	class:llvm::RegionNode
getParent	Argument.h	/^  inline       Function *getParent()       { return Parent; }$/;"	f	class:llvm::Argument
getParent	Argument.h	/^  inline const Function *getParent() const { return Parent; }$/;"	f	class:llvm::Argument
getParent	BasicBlock.h	/^        Function *getParent()       { return Parent; }$/;"	f	class:llvm::BasicBlock
getParent	BasicBlock.h	/^  const Function *getParent() const { return Parent; }$/;"	f	class:llvm::BasicBlock
getParent	CodeGen/LexicalScopes.h	/^  LexicalScope *getParent() const               { return Parent; }$/;"	f	class:llvm::LexicalScope
getParent	CodeGen/LiveRangeEdit.h	/^  LiveInterval &getParent() const {$/;"	f	class:llvm::LiveRangeEdit
getParent	CodeGen/MachineBasicBlock.h	/^  MachineFunction *getParent() { return xParent; }$/;"	f	class:llvm::MachineBasicBlock
getParent	CodeGen/MachineBasicBlock.h	/^  const MachineFunction *getParent() const { return xParent; }$/;"	f	class:llvm::MachineBasicBlock
getParent	CodeGen/MachineInstr.h	/^  MachineBasicBlock* getParent() { return Parent; }$/;"	f	class:llvm::MachineInstr
getParent	CodeGen/MachineInstr.h	/^  const MachineBasicBlock* getParent() const { return Parent; }$/;"	f	class:llvm::MachineInstr
getParent	CodeGen/MachineOperand.h	/^  MachineInstr *getParent() { return ParentMI; }$/;"	f	class:llvm::MachineOperand
getParent	CodeGen/MachineOperand.h	/^  const MachineInstr *getParent() const { return ParentMI; }$/;"	f	class:llvm::MachineOperand
getParent	GlobalValue.h	/^  inline Module *getParent() { return Parent; }$/;"	f	class:llvm::GlobalValue
getParent	GlobalValue.h	/^  inline const Module *getParent() const { return Parent; }$/;"	f	class:llvm::GlobalValue
getParent	Instruction.h	/^  inline       BasicBlock *getParent()       { return Parent; }$/;"	f	class:llvm::Instruction
getParent	Instruction.h	/^  inline const BasicBlock *getParent() const { return Parent; }$/;"	f	class:llvm::Instruction
getParent	MC/MCAssembler.h	/^  MCSectionData *getParent() const { return Parent; }$/;"	f	class:llvm::MCFragment
getParent	Metadata.h	/^  inline Module *getParent() { return Parent; }$/;"	f	class:llvm::NamedMDNode
getParent	Metadata.h	/^  inline const Module *getParent() const { return Parent; }$/;"	f	class:llvm::NamedMDNode
getParentIncludeLoc	Support/SourceMgr.h	/^  SMLoc getParentIncludeLoc(unsigned i) const {$/;"	f	class:llvm::SourceMgr
getParentLoop	Analysis/LoopInfo.h	/^  LoopT *getParentLoop() const { return ParentLoop; }$/;"	f	class:llvm::LoopBase
getParentScope	ADT/ScopedHashTable.h	/^  ScopedHashTableScope *getParentScope() { return PrevScope; }$/;"	f	class:llvm::ScopedHashTableScope
getParentScope	ADT/ScopedHashTable.h	/^  const ScopedHashTableScope *getParentScope() const { return PrevScope; }$/;"	f	class:llvm::ScopedHashTableScope
getParser	MC/MCParser/MCAsmParserExtension.h	/^  MCAsmParser &getParser() { return *Parser; }$/;"	f	class:llvm::MCAsmParserExtension
getParser	Support/CommandLine.h	/^  ParserClass &getParser() { return Parser; }$/;"	f	class:llvm::cl::bits
getParser	Support/CommandLine.h	/^  ParserClass &getParser() { return Parser; }$/;"	f	class:llvm::cl::list
getParser	Support/CommandLine.h	/^  ParserClass &getParser() { return Parser; }$/;"	f	class:llvm::cl::opt
getPartialRegUpdateClearance	Target/TargetInstrInfo.h	/^  getPartialRegUpdateClearance(const MachineInstr *MI, unsigned OpNum,$/;"	f	class:llvm::TargetInstrInfo
getPassArgument	PassSupport.h	/^  const char *getPassArgument() const { return PassArgument; }$/;"	f	class:llvm::PassInfo
getPassID	Pass.h	/^  AnalysisID getPassID() const {$/;"	f	class:llvm::Pass
getPassKind	Pass.h	/^  PassKind getPassKind() const { return Kind; }$/;"	f	class:llvm::Pass
getPassManagerType	Analysis/LoopPass.h	/^  virtual PassManagerType getPassManagerType() const {$/;"	f	class:llvm::LPPassManager
getPassManagerType	Analysis/RegionPass.h	/^  virtual PassManagerType getPassManagerType() const {$/;"	f	class:llvm::RGPassManager
getPassManagerType	PassManagers.h	/^  virtual PassManagerType getPassManagerType() const {$/;"	f	class:llvm::FPPassManager
getPassManagerType	PassManagers.h	/^  virtual PassManagerType getPassManagerType() const {$/;"	f	class:llvm::PMDataManager
getPassName	Analysis/LoopPass.h	/^  virtual const char *getPassName() const {$/;"	f	class:llvm::LPPassManager
getPassName	Analysis/RegionPass.h	/^  virtual const char *getPassName() const {$/;"	f	class:llvm::RGPassManager
getPassName	CodeGen/MachineFunctionAnalysis.h	/^  virtual const char* getPassName() const {$/;"	f	struct:llvm::MachineFunctionAnalysis
getPassName	PassManagers.h	/^  virtual const char *getPassName() const {$/;"	f	class:llvm::FPPassManager
getPassName	PassSupport.h	/^  const char *getPassName() const { return PassName; }$/;"	f	class:llvm::PassInfo
getPath	ADT/DepthFirstIterator.h	/^  NodeType *getPath(unsigned n) const {$/;"	f	class:llvm::df_iterator
getPath	Bitcode/Archive.h	/^    const sys::Path& getPath() const     { return path; }$/;"	f	class:llvm::ArchiveMember
getPath	Bitcode/Archive.h	/^    const sys::Path& getPath() { return archPath; }$/;"	f	class:llvm::Archive
getPath	Object/ObjectFile.h	/^inline error_code LibraryRef::getPath(StringRef &Result) const {$/;"	f	class:llvm::object::LibraryRef
getPath	Support/FileOutputBuffer.h	/^  StringRef getPath() const {$/;"	f	class:llvm::FileOutputBuffer
getPathLength	ADT/DepthFirstIterator.h	/^  unsigned getPathLength() const { return VisitStack.size(); }$/;"	f	class:llvm::df_iterator
getPersonalities	CodeGen/MachineModuleInfo.h	/^  const std::vector<const Function *>& getPersonalities() const {$/;"	f	class:llvm::MachineModuleInfo
getPersonalityEncoding	MC/MCObjectFileInfo.h	/^  unsigned getPersonalityEncoding() const { return PersonalityEncoding; }$/;"	f	class:llvm::MCObjectFileInfo
getPersonalityFn	Instructions.h	/^  Value *getPersonalityFn() const { return getOperand(0); }$/;"	f	class:llvm::LandingPadInst
getPoint	IRBuilder.h	/^    llvm::BasicBlock::iterator getPoint() const { return Point; }$/;"	f	class:llvm::IRBuilderBase::InsertPoint
getPointer	ADT/Optional.h	/^  const T* getPointer() const { assert(hasVal); return &x; }$/;"	f	class:llvm::Optional
getPointer	ADT/PointerIntPair.h	/^  PointerTy getPointer() const {$/;"	f	class:llvm::PointerIntPair
getPointer	ADT/SmallBitVector.h	/^  BitVector *getPointer() const {$/;"	f	class:llvm::SmallBitVector
getPointer	Analysis/AliasSetTracker.h	/^    Value *getPointer() const { return CurNode->getValue(); }$/;"	f	class:llvm::AliasSet::iterator
getPointer	Support/SMLoc.h	/^  const char *getPointer() const { return Ptr; }$/;"	f	class:llvm::SMLoc
getPointerABIAlignment	DataLayout.h	/^  unsigned getPointerABIAlignment(unsigned AS)  const {$/;"	f	class:llvm::DataLayout
getPointerAddressSpace	Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::AtomicCmpXchgInst
getPointerAddressSpace	Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::AtomicRMWInst
getPointerAddressSpace	Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::GetElementPtrInst
getPointerAddressSpace	Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::LoadInst
getPointerAddressSpace	Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::PtrToIntInst
getPointerAddressSpace	Instructions.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::StoreInst
getPointerAddressSpace	Operator.h	/^  unsigned getPointerAddressSpace() const {$/;"	f	class:llvm::GEPOperator
getPointerElementType	Type.h	/^  Type *getPointerElementType() const { return getSequentialElementType(); }$/;"	f	class:llvm::Type
getPointerInfo	CodeGen/MachineMemOperand.h	/^  const MachinePointerInfo &getPointerInfo() const { return PtrInfo; }$/;"	f	class:llvm::MachineMemOperand
getPointerInfo	CodeGen/SelectionDAGNodes.h	/^  const MachinePointerInfo &getPointerInfo() const {$/;"	f	class:llvm::MemSDNode
getPointerIntoBucketsArray	ADT/DenseMap.h	/^  const void *getPointerIntoBucketsArray() const { return getBuckets(); }$/;"	f	class:llvm::DenseMapBase
getPointerIntoBucketsArray	ADT/ValueMap.h	/^  const void *getPointerIntoBucketsArray() const {$/;"	f	class:llvm::ValueMap
getPointerOperand	Instructions.h	/^  Value *getPointerOperand() { return getOperand(0); }$/;"	f	class:llvm::AtomicCmpXchgInst
getPointerOperand	Instructions.h	/^  Value *getPointerOperand() { return getOperand(0); }$/;"	f	class:llvm::AtomicRMWInst
getPointerOperand	Instructions.h	/^  Value *getPointerOperand() { return getOperand(0); }$/;"	f	class:llvm::LoadInst
getPointerOperand	Instructions.h	/^  Value *getPointerOperand() { return getOperand(0); }$/;"	f	class:llvm::VAArgInst
getPointerOperand	Instructions.h	/^  Value *getPointerOperand() { return getOperand(1); }$/;"	f	class:llvm::StoreInst
getPointerOperand	Instructions.h	/^  Value *getPointerOperand() {$/;"	f	class:llvm::GetElementPtrInst
getPointerOperand	Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(0); }$/;"	f	class:llvm::AtomicCmpXchgInst
getPointerOperand	Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(0); }$/;"	f	class:llvm::AtomicRMWInst
getPointerOperand	Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(0); }$/;"	f	class:llvm::LoadInst
getPointerOperand	Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(0); }$/;"	f	class:llvm::VAArgInst
getPointerOperand	Instructions.h	/^  const Value *getPointerOperand() const { return getOperand(1); }$/;"	f	class:llvm::StoreInst
getPointerOperand	Instructions.h	/^  const Value *getPointerOperand() const {$/;"	f	class:llvm::GetElementPtrInst
getPointerOperand	Operator.h	/^  Value *getPointerOperand() {$/;"	f	class:llvm::GEPOperator
getPointerOperand	Operator.h	/^  const Value *getPointerOperand() const {$/;"	f	class:llvm::GEPOperator
getPointerOperandIndex	Instructions.h	/^  static unsigned getPointerOperandIndex() { return 0U; }$/;"	f	class:llvm::AtomicCmpXchgInst
getPointerOperandIndex	Instructions.h	/^  static unsigned getPointerOperandIndex() { return 0U; }$/;"	f	class:llvm::AtomicRMWInst
getPointerOperandIndex	Instructions.h	/^  static unsigned getPointerOperandIndex() { return 0U; }$/;"	f	class:llvm::LoadInst
getPointerOperandIndex	Instructions.h	/^  static unsigned getPointerOperandIndex() { return 0U; }$/;"	f	class:llvm::VAArgInst
getPointerOperandIndex	Instructions.h	/^  static unsigned getPointerOperandIndex() { return 1U; }$/;"	f	class:llvm::StoreInst
getPointerOperandIndex	Instructions.h	/^  static unsigned getPointerOperandIndex() {$/;"	f	class:llvm::GetElementPtrInst
getPointerOperandIndex	Operator.h	/^  static unsigned getPointerOperandIndex() {$/;"	f	class:llvm::GEPOperator
getPointerOperandType	Instructions.h	/^  Type *getPointerOperandType() const {$/;"	f	class:llvm::GetElementPtrInst
getPointerOperandType	Operator.h	/^  Type *getPointerOperandType() const {$/;"	f	class:llvm::GEPOperator
getPointerPrefAlignment	DataLayout.h	/^  unsigned getPointerPrefAlignment(unsigned AS) const {$/;"	f	class:llvm::DataLayout
getPointerRegClass	Target/TargetRegisterInfo.h	/^  getPointerRegClass(const MachineFunction &MF, unsigned Kind=0) const {$/;"	f	class:llvm::TargetRegisterInfo
getPointerSize	DataLayout.h	/^  unsigned getPointerSize(unsigned AS)          const {$/;"	f	class:llvm::DataLayout
getPointerSize	MC/MCAsmInfo.h	/^    unsigned getPointerSize() const {$/;"	f	class:llvm::MCAsmInfo
getPointerSizeInBits	DataLayout.h	/^  unsigned getPointerSizeInBits(unsigned AS)    const {$/;"	f	class:llvm::DataLayout
getPointerToFunctionOrStub	ExecutionEngine/ExecutionEngine.h	/^  virtual void *getPointerToFunctionOrStub(Function *F) {$/;"	f	class:llvm::ExecutionEngine
getPointerTy	Target/TargetLowering.h	/^  virtual MVT getPointerTy(uint32_t AS = 0) const { return PointerTy; }$/;"	f	class:llvm::TargetLowering
getPos	CodeGen/RegisterPressure.h	/^  MachineBasicBlock::const_iterator getPos() const { return CurrPos; }$/;"	f	class:llvm::RegPressureTracker
getPosition	Support/CommandLine.h	/^  inline unsigned getPosition() const { return Position; }$/;"	f	class:llvm::cl::Option
getPosition	Support/CommandLine.h	/^  unsigned getPosition(unsigned optnum) const {$/;"	f	class:llvm::cl::bits
getPosition	Support/CommandLine.h	/^  unsigned getPosition(unsigned optnum) const {$/;"	f	class:llvm::cl::list
getPostIncExpr	Analysis/ScalarEvolutionExpressions.h	/^    const SCEVAddRecExpr *getPostIncExpr(ScalarEvolution &SE) const {$/;"	f	class:llvm::SCEVAddRecExpr
getPostIncLoops	Analysis/IVUsers.h	/^  const PostIncLoopSet &getPostIncLoops() const {$/;"	f	class:llvm::IVStrideUse
getPostIndexedAddressParts	Target/TargetLowering.h	/^  virtual bool getPostIndexedAddressParts(SDNode * \/*N*\/, SDNode * \/*Op*\/,$/;"	f	class:llvm::TargetLowering
getPostorder	Analysis/LoopIterator.h	/^  unsigned getPostorder(BasicBlock *BB) const {$/;"	f	class:llvm::LoopBlocksDFS
getPotentialPassManagerType	Analysis/LoopPass.h	/^  virtual PassManagerType getPotentialPassManagerType() const {$/;"	f	class:llvm::LoopPass
getPotentialPassManagerType	Analysis/RegionPass.h	/^  virtual PassManagerType getPotentialPassManagerType() const {$/;"	f	class:llvm::RegionPass
getPotentialPassManagerType	CallGraphSCCPass.h	/^  virtual PassManagerType getPotentialPassManagerType() const {$/;"	f	class:llvm::CallGraphSCCPass
getPow2VectorType	CodeGen/ValueTypes.h	/^    EVT getPow2VectorType(LLVMContext &Context) const {$/;"	f	struct:llvm::EVT
getPow2VectorType	CodeGen/ValueTypes.h	/^    MVT getPow2VectorType() const {$/;"	f	class:llvm::MVT
getPreIndexedAddressParts	Target/TargetLowering.h	/^  virtual bool getPreIndexedAddressParts(SDNode * \/*N*\/, SDValue &\/*Base*\/,$/;"	f	class:llvm::TargetLowering
getPredicate	InstrTypes.h	/^  Predicate getPredicate() const {$/;"	f	class:llvm::CmpInst
getPrefELFAlignment	Target/TargetELFWriterInfo.h	/^    unsigned getPrefELFAlignment() const { return is64Bit ? 8 : 4; }$/;"	f	class:llvm::TargetELFWriterInfo
getPrefFunctionAlignment	Target/TargetLowering.h	/^  unsigned getPrefFunctionAlignment() const {$/;"	f	class:llvm::TargetLowering
getPrefLoopAlignment	Target/TargetLowering.h	/^  unsigned getPrefLoopAlignment() const {$/;"	f	class:llvm::TargetLowering
getPrefix	TableGen/Record.h	/^  unsigned getPrefix() const { return Prefix; }$/;"	f	class:llvm::RecordVal
getPreservedSet	PassAnalysisSupport.h	/^  const VectorType &getPreservedSet() const { return Preserved; }$/;"	f	class:llvm::AnalysisUsage
getPreservesAll	PassAnalysisSupport.h	/^  bool getPreservesAll() const { return PreservesAll; }$/;"	f	class:llvm::AnalysisUsage
getPressure	CodeGen/RegisterPressure.h	/^  RegisterPressure &getPressure() { return P; }$/;"	f	class:llvm::RegPressureTracker
getPressureAfterInst	CodeGen/RegisterPressure.h	/^  void getPressureAfterInst(const MachineInstr *MI,$/;"	f	class:llvm::RegPressureTracker
getPrev	ADT/ilist.h	/^  static NodeTy *getPrev(NodeTy *N) { return N->getPrev(); }$/;"	f	struct:llvm::ilist_nextprev_traits
getPrev	ADT/ilist.h	/^  static const NodeTy *getPrev(const NodeTy *N) { return N->getPrev(); }$/;"	f	struct:llvm::ilist_nextprev_traits
getPrev	ADT/ilist_node.h	/^  NodeTy *getPrev() { return Prev; }$/;"	f	class:llvm::ilist_half_node
getPrev	ADT/ilist_node.h	/^  const NodeTy *getPrev() const { return Prev; }$/;"	f	class:llvm::ilist_half_node
getPrev	Support/Recycler.h	/^  static RecyclerStruct *getPrev(const RecyclerStruct *t) { return t->Prev; }$/;"	f	struct:llvm::ilist_traits
getPrevIndex	CodeGen/SlotIndexes.h	/^    SlotIndex getPrevIndex() const {$/;"	f	class:llvm::SlotIndex
getPrevNode	ADT/ilist_node.h	/^  NodeTy *getPrevNode() {$/;"	f	class:llvm::ilist_node
getPrevNode	ADT/ilist_node.h	/^  const NodeTy *getPrevNode() const {$/;"	f	class:llvm::ilist_node
getPrevPtr	Support/ValueHandle.h	/^  ValueHandleBase **getPrevPtr() const { return PrevPair.getPointer(); }$/;"	f	class:llvm::ValueHandleBase
getPrevSlot	CodeGen/SlotIndexes.h	/^    SlotIndex getPrevSlot() const {$/;"	f	class:llvm::SlotIndex
getPreviousSection	MC/MCStreamer.h	/^    const MCSection *getPreviousSection() const {$/;"	f	class:llvm::MCStreamer
getPrivateGlobalPrefix	MC/MCAsmInfo.h	/^    const char *getPrivateGlobalPrefix() const {$/;"	f	class:llvm::MCAsmInfo
getProcResource	MC/MCSchedule.h	/^  const MCProcResourceDesc *getProcResource(unsigned ProcResourceIdx) const {$/;"	f	class:llvm::MCSchedModel
getProcessTime	Support/Timer.h	/^  double getProcessTime() const { return UserTime+SystemTime; }$/;"	f	class:llvm::TimeRecord
getProcessorID	CodeGen/TargetSchedule.h	/^  unsigned getProcessorID() const { return SchedModel.getProcessorID(); }$/;"	f	class:llvm::TargetSchedModel
getProcessorID	MC/MCSchedule.h	/^  unsigned getProcessorID() const { return ProcID; }$/;"	f	class:llvm::MCSchedModel
getProducer	DebugInfo.h	/^    StringRef getProducer() const  { return getStringField(5);   }$/;"	f	class:llvm::DICompileUnit
getProtectedVisibilityAttr	MC/MCAsmInfo.h	/^    MCSymbolAttr getProtectedVisibilityAttr() const {$/;"	f	class:llvm::MCAsmInfo
getPtr	ADT/IntrusiveRefCntPtr.h	/^    T* getPtr() const { return Obj; }$/;"	f	class:llvm::IntrusiveRefCntPtr
getPtr	Object/ELF.h	/^                            ::getPtr() const {$/;"	f	class:llvm::object::DynRefImpl
getPtr	Object/ELF.h	/^  uint64_t getPtr() const { return d_un.ptr; }$/;"	f	struct:llvm::object::Elf_Dyn_Impl
getPtrOrNull	ADT/NullablePtr.h	/^  T *getPtrOrNull() { return Ptr; }$/;"	f	class:llvm::NullablePtr
getPtrOrNull	ADT/NullablePtr.h	/^  const T *getPtrOrNull() const { return Ptr; }$/;"	f	class:llvm::NullablePtr
getQNaN	ADT/APFloat.h	/^    static APFloat getQNaN(const fltSemantics &Sem,$/;"	f	class:llvm::APFloat
getRARegister	MC/MCRegisterInfo.h	/^  unsigned getRARegister() const {$/;"	f	class:llvm::MCRegisterInfo
getRHS	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *getRHS() const { return RHS; }$/;"	f	class:llvm::SCEVUDivExpr
getRHS	MC/MCExpr.h	/^  const MCExpr *getRHS() const { return RHS; }$/;"	f	class:llvm::MCBinaryExpr
getRHS	TableGen/Record.h	/^  Init *getRHS() const { return RHS; }$/;"	f	class:llvm::BinOpInit
getRHS	TableGen/Record.h	/^  Init *getRHS() const { return RHS; }$/;"	f	class:llvm::TernOpInit
getRHSKind	ADT/Twine.h	/^    NodeKind getRHSKind() const { return (NodeKind) RHSKind; }$/;"	f	class:llvm::Twine
getRPO	Analysis/LoopIterator.h	/^  unsigned getRPO(BasicBlock *BB) const {$/;"	f	class:llvm::LoopBlocksDFS
getRSsym	MC/MCELFObjectWriter.h	/^  unsigned getRSsym(uint32_t Type) const {$/;"	f	class:llvm::MCELFObjectTargetWriter
getRType	MC/MCELFObjectWriter.h	/^  unsigned getRType(uint32_t Type) const {$/;"	f	class:llvm::MCELFObjectTargetWriter
getRType2	MC/MCELFObjectWriter.h	/^  unsigned getRType2(uint32_t Type) const {$/;"	f	class:llvm::MCELFObjectTargetWriter
getRType3	MC/MCELFObjectWriter.h	/^  unsigned getRType3(uint32_t Type) const {$/;"	f	class:llvm::MCELFObjectTargetWriter
getRanges	CodeGen/LexicalScopes.h	/^  SmallVector<InsnRange, 4> &getRanges()        { return Ranges; }$/;"	f	class:llvm::LexicalScope
getRanges	CodeGen/MachineMemOperand.h	/^  const MDNode *getRanges() const { return Ranges; }$/;"	f	class:llvm::MachineMemOperand
getRanges	CodeGen/SelectionDAGNodes.h	/^  const MDNode *getRanges() const { return MMO->getRanges(); }$/;"	f	class:llvm::MemSDNode
getRanges	Support/SourceMgr.h	/^  const std::vector<std::pair<unsigned, unsigned> > &getRanges() const {$/;"	f	class:llvm::SMDiagnostic
getRawAddress	CodeGen/MachORelocation.h	/^    uint32_t getRawAddress() const { return r_address; }$/;"	f	class:llvm::MachORelocation
getRawAllocationOrder	Target/TargetRegisterInfo.h	/^  ArrayRef<uint16_t> getRawAllocationOrder(const MachineFunction &MF) const {$/;"	f	class:llvm::TargetRegisterClass
getRawAllocationOrder	Target/TargetRegisterInfo.h	/^  getRawAllocationOrder(const TargetRegisterClass *RC,$/;"	f	class:llvm::TargetRegisterInfo
getRawBits	CodeGen/ValueTypes.h	/^    intptr_t getRawBits() {$/;"	f	struct:llvm::EVT
getRawBits	Target/TargetCallingConv.h	/^    uint64_t getRawBits() const { return Flags; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
getRawBlockCounts	Analysis/ProfileInfoLoader.h	/^  const std::vector<unsigned> &getRawBlockCounts() const {$/;"	f	class:llvm::ProfileInfoLoader
getRawData	ADT/APInt.h	/^  const uint64_t* getRawData() const {$/;"	f	class:llvm::APInt
getRawDataRefImpl	Object/ELF.h	/^                             ::getRawDataRefImpl() const {$/;"	f	class:llvm::object::DynRefImpl
getRawDataRefImpl	Object/ObjectFile.h	/^inline DataRefImpl RelocationRef::getRawDataRefImpl() const {$/;"	f	class:llvm::object::RelocationRef
getRawDataRefImpl	Object/ObjectFile.h	/^inline DataRefImpl SectionRef::getRawDataRefImpl() const {$/;"	f	class:llvm::object::SectionRef
getRawDataRefImpl	Object/ObjectFile.h	/^inline DataRefImpl SymbolRef::getRawDataRefImpl() const {$/;"	f	class:llvm::object::SymbolRef
getRawDest	IntrinsicInst.h	/^    Value *getRawDest() const { return const_cast<Value*>(getArgOperand(0)); }$/;"	f	class:llvm::MemIntrinsic
getRawEdgeCounts	Analysis/ProfileDataLoader.h	/^  ArrayRef<unsigned> getRawEdgeCounts() const { return EdgeCounts; }$/;"	f	class:llvm::ProfileDataLoader
getRawEdgeCounts	Analysis/ProfileInfoLoader.h	/^  const std::vector<unsigned> &getRawEdgeCounts() const {$/;"	f	class:llvm::ProfileInfoLoader
getRawFunctionCounts	Analysis/ProfileInfoLoader.h	/^  const std::vector<unsigned> &getRawFunctionCounts() const {$/;"	f	class:llvm::ProfileInfoLoader
getRawOptimalEdgeCounts	Analysis/ProfileInfoLoader.h	/^  const std::vector<unsigned> &getRawOptimalEdgeCounts() const {$/;"	f	class:llvm::ProfileInfoLoader
getRawPointer	Attributes.h	/^  void *getRawPointer() const {$/;"	f	class:llvm::AttrListPtr
getRawSource	IntrinsicInst.h	/^    Value *getRawSource() const { return const_cast<Value*>(getArgOperand(1)); }$/;"	f	class:llvm::MemTransferInst
getRawSubclassData	CodeGen/SelectionDAGNodes.h	/^  unsigned getRawSubclassData() const {$/;"	f	class:llvm::MemSDNode
getRawSubclassOptionalData	Value.h	/^  unsigned getRawSubclassOptionalData() const {$/;"	f	class:llvm::Value
getRawValue	Support/YAMLParser.h	/^  StringRef getRawValue() const { return Value; }$/;"	f	class:llvm::yaml::ScalarNode
getReadAdvanceCycles	MC/MCSubtargetInfo.h	/^  int getReadAdvanceCycles(const MCSchedClassDesc *SC, unsigned UseIdx,$/;"	f	class:llvm::MCSubtargetInfo
getReadOnly	MC/SectionKind.h	/^  static SectionKind getReadOnly() { return get(ReadOnly); }$/;"	f	class:llvm::SectionKind
getReadOnlyWithRel	MC/SectionKind.h	/^  static SectionKind getReadOnlyWithRel() { return get(ReadOnlyWithRel); }$/;"	f	class:llvm::SectionKind
getReadOnlyWithRelLocal	MC/SectionKind.h	/^  static SectionKind getReadOnlyWithRelLocal(){$/;"	f	class:llvm::SectionKind
getRecTyKind	TableGen/Record.h	/^  RecTyKind getRecTyKind() const { return Kind; }$/;"	f	class:llvm::RecTy
getRecord	TableGen/Record.h	/^  Record *getRecord() const { return Rec; }$/;"	f	class:llvm::RecordRecTy
getRecords	TableGen/Record.h	/^  RecordKeeper &getRecords() const {$/;"	f	class:llvm::Record
getReg	CodeGen/CallingConvLower.h	/^  static CCValAssign getReg(unsigned ValNo, MVT ValVT,$/;"	f	class:llvm::CCValAssign
getReg	CodeGen/LiveRangeEdit.h	/^  unsigned getReg() const { return getParent().reg; }$/;"	f	class:llvm::LiveRangeEdit
getReg	CodeGen/MachineFrameInfo.h	/^  unsigned getReg()                        const { return Reg; }$/;"	f	class:llvm::CalleeSavedInfo
getReg	CodeGen/MachineOperand.h	/^  unsigned getReg() const {$/;"	f	class:llvm::MachineOperand
getReg	CodeGen/ScheduleDAG.h	/^    unsigned getReg() const {$/;"	f	class:llvm::SDep
getReg	CodeGen/SelectionDAGNodes.h	/^  unsigned getReg() const { return Reg; }$/;"	f	class:llvm::RegisterSDNode
getReg	MC/MCInst.h	/^  unsigned getReg() const {$/;"	f	class:llvm::MCOperand
getReg	MC/MachineLocation.h	/^  unsigned getReg()      const { return Register; }$/;"	f	class:llvm::MachineLocation
getRegAllocationHint	CodeGen/MachineRegisterInfo.h	/^  getRegAllocationHint(unsigned Reg) const {$/;"	f	class:llvm::MachineRegisterInfo
getRegClass	CodeGen/MachineRegisterInfo.h	/^  const TargetRegisterClass *getRegClass(unsigned Reg) const {$/;"	f	class:llvm::MachineRegisterInfo
getRegClass	MC/MCRegisterInfo.h	/^  const MCRegisterClass getRegClass(unsigned i) const {$/;"	f	class:llvm::MCRegisterInfo
getRegClass	Target/TargetRegisterInfo.h	/^  const TargetRegisterClass *getRegClass(unsigned i) const {$/;"	f	class:llvm::TargetRegisterInfo
getRegClassFor	Target/TargetLowering.h	/^  virtual const TargetRegisterClass *getRegClassFor(EVT VT) const {$/;"	f	class:llvm::TargetLowering
getRegInfo	CodeGen/MachineFunction.h	/^  MachineRegisterInfo &getRegInfo() { return *RegInfo; }$/;"	f	class:llvm::MachineFunction
getRegInfo	CodeGen/MachineFunction.h	/^  const MachineRegisterInfo &getRegInfo() const { return *RegInfo; }$/;"	f	class:llvm::MachineFunction
getRegMask	CodeGen/MachineOperand.h	/^  const uint32_t *getRegMask() const {$/;"	f	class:llvm::MachineOperand
getRegMask	CodeGen/SelectionDAGNodes.h	/^  const uint32_t *getRegMask() const { return RegMask; }$/;"	f	class:llvm::RegisterMaskSDNode
getRegMaskBits	CodeGen/LiveIntervalAnalysis.h	/^    ArrayRef<const uint32_t*> getRegMaskBits() const { return RegMaskBits; }$/;"	f	class:llvm::LiveIntervals
getRegMaskBitsInBlock	CodeGen/LiveIntervalAnalysis.h	/^    ArrayRef<const uint32_t*> getRegMaskBitsInBlock(unsigned MBBNum) const {$/;"	f	class:llvm::LiveIntervals
getRegMaskSlots	CodeGen/LiveIntervalAnalysis.h	/^    ArrayRef<SlotIndex> getRegMaskSlots() const { return RegMaskSlots; }$/;"	f	class:llvm::LiveIntervals
getRegMaskSlotsInBlock	CodeGen/LiveIntervalAnalysis.h	/^    ArrayRef<SlotIndex> getRegMaskSlotsInBlock(unsigned MBBNum) const {$/;"	f	class:llvm::LiveIntervals
getRegPressure	CodeGen/MachineScheduler.h	/^  const IntervalPressure &getRegPressure() const { return RegPressure; }$/;"	f	class:llvm::ScheduleDAGMI
getRegPressureLimit	Target/TargetRegisterInfo.h	/^  virtual unsigned getRegPressureLimit(const TargetRegisterClass *RC,$/;"	f	class:llvm::TargetRegisterInfo
getRegSetPressureAtPos	CodeGen/RegisterPressure.h	/^  std::vector<unsigned> &getRegSetPressureAtPos() { return CurrSetPressure; }$/;"	f	class:llvm::RegPressureTracker
getRegSlot	CodeGen/SlotIndexes.h	/^    SlotIndex getRegSlot(bool EC = false) const {$/;"	f	class:llvm::SlotIndex
getRegUnit	CodeGen/LiveIntervalAnalysis.h	/^    LiveInterval &getRegUnit(unsigned Unit) {$/;"	f	class:llvm::LiveIntervals
getRegUseDefListHead	CodeGen/MachineRegisterInfo.h	/^  MachineOperand *&getRegUseDefListHead(unsigned RegNo) {$/;"	f	class:llvm::MachineRegisterInfo
getRegUseDefListHead	CodeGen/MachineRegisterInfo.h	/^  MachineOperand *getRegUseDefListHead(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
getRegVal	MC/MCParser/MCAsmLexer.h	/^  unsigned getRegVal() const {$/;"	f	class:llvm::AsmToken
getRegionCriticalPSets	CodeGen/MachineScheduler.h	/^  const std::vector<PressureElement> &getRegionCriticalPSets() const {$/;"	f	class:llvm::ScheduleDAGMI
getRegionInfo	Analysis/RegionInfo.h	/^  RegionInfo *getRegionInfo() const {$/;"	f	class:llvm::Region
getRegionSucc	Analysis/RegionIterator.h	/^  inline BasicBlock* getRegionSucc() const {$/;"	f	class:llvm::RNSuccIterator
getRegister	MC/MCRegisterInfo.h	/^  unsigned getRegister(unsigned i) const {$/;"	f	class:llvm::MCRegisterClass
getRegister	MC/MCWin64EH.h	/^    unsigned getRegister() const { return Register; }$/;"	f	class:llvm::MCWin64EHInstruction
getRegister	Target/TargetRegisterInfo.h	/^  unsigned getRegister(unsigned i) const {$/;"	f	class:llvm::TargetRegisterClass
getRegisterInfo	MC/MCContext.h	/^    const MCRegisterInfo &getRegisterInfo() const { return MRI; }$/;"	f	class:llvm::MCContext
getRegisterInfo	Target/TargetMachine.h	/^  virtual const TargetRegisterInfo *getRegisterInfo() const { return 0; }$/;"	f	class:llvm::TargetMachine
getRegisterType	Target/TargetLowering.h	/^  EVT getRegisterType(LLVMContext &Context, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getRegisterType	Target/TargetLowering.h	/^  EVT getRegisterType(MVT VT) const {$/;"	f	class:llvm::TargetLowering
getRel	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getRel(DataRefImpl Rel) const {$/;"	f	class:llvm::object::ELFObjectFile
getRelSection	Object/ELF.h	/^  const Elf_Shdr *getRelSection(DataRefImpl Rel) const {$/;"	f	class:llvm::object::ELFObjectFile
getRela	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getRela(DataRefImpl Rela) const {$/;"	f	class:llvm::object::ELFObjectFile
getRelaxAll	MC/MCAssembler.h	/^  bool getRelaxAll() const { return RelaxAll; }$/;"	f	class:llvm::MCAssembler
getRelocationAdditionalInfo	Object/ELF.h	/^                        ::getRelocationAdditionalInfo(DataRefImpl Rel,$/;"	f	class:llvm::object::ELFObjectFile
getRelocationAddress	Object/ELF.h	/^                        ::getRelocationAddress(DataRefImpl Rel,$/;"	f	class:llvm::object::ELFObjectFile
getRelocationEntrySize	Target/TargetELFWriterInfo.h	/^    unsigned getRelocationEntrySize() const {$/;"	f	class:llvm::TargetELFWriterInfo
getRelocationHidden	Object/ObjectFile.h	/^  virtual error_code getRelocationHidden(DataRefImpl Rel, bool &Result) const {$/;"	f	class:llvm::object::ObjectFile
getRelocationModel	MC/MCCodeGenInfo.h	/^    Reloc::Model getRelocationModel() const { return RelocationModel; }$/;"	f	class:llvm::MCCodeGenInfo
getRelocationNext	Object/ELF.h	/^                        ::getRelocationNext(DataRefImpl Rel,$/;"	f	class:llvm::object::ELFObjectFile
getRelocationOffset	Object/ELF.h	/^                        ::getRelocationOffset(DataRefImpl Rel,$/;"	f	class:llvm::object::ELFObjectFile
getRelocationSymbol	Object/ELF.h	/^                        ::getRelocationSymbol(DataRefImpl Rel,$/;"	f	class:llvm::object::ELFObjectFile
getRelocationType	CodeGen/MachineRelocation.h	/^  unsigned getRelocationType() const {$/;"	f	class:llvm::MachineRelocation
getRelocationType	Object/ELF.h	/^                        ::getRelocationType(DataRefImpl Rel,$/;"	f	class:llvm::object::ELFObjectFile
getRelocationTypeName	Object/ELF.h	/^                        ::getRelocationTypeName(DataRefImpl Rel,$/;"	f	class:llvm::object::ELFObjectFile
getRelocationValueString	Object/ELF.h	/^                        ::getRelocationValueString(DataRefImpl Rel,$/;"	f	class:llvm::object::ELFObjectFile
getRepRegClassCostFor	Target/TargetLowering.h	/^  virtual uint8_t getRepRegClassCostFor(EVT VT) const {$/;"	f	class:llvm::TargetLowering
getRepRegClassFor	Target/TargetLowering.h	/^  virtual const TargetRegisterClass *getRepRegClassFor(EVT VT) const {$/;"	f	class:llvm::TargetLowering
getRequiredSet	PassAnalysisSupport.h	/^  const VectorType &getRequiredSet() const { return Required; }$/;"	f	class:llvm::AnalysisUsage
getRequiredTransitiveSet	PassAnalysisSupport.h	/^  const VectorType &getRequiredTransitiveSet() const {$/;"	f	class:llvm::AnalysisUsage
getResNo	CodeGen/SelectionDAGNodes.h	/^  unsigned getResNo() const { return ResNo; }$/;"	f	class:llvm::SDValue
getResNo	CodeGen/SelectionDAGNodes.h	/^  unsigned getResNo() const { return Val.getResNo(); }$/;"	f	class:llvm::SDUse
getReservationKind	MC/MCInstrItineraries.h	/^  ReservationKinds getReservationKind() const {$/;"	f	struct:llvm::InstrStage
getReservedRegs	CodeGen/MachineRegisterInfo.h	/^  const BitVector &getReservedRegs() const {$/;"	f	class:llvm::MachineRegisterInfo
getResolver	Pass.h	/^  AnalysisResolver *getResolver() const { return Resolver; }$/;"	f	class:llvm::Pass
getResourceTracker	CodeGen/DFAPacketizer.h	/^  DFAPacketizer *getResourceTracker() {return ResourceTracker;}$/;"	f	class:llvm::VLIWPacketizerList
getResult	Analysis/MemoryDependenceAnalysis.h	/^    const MemDepResult &getResult() const { return Entry.getResult(); }$/;"	f	class:llvm::NonLocalDepResult
getResult	Analysis/MemoryDependenceAnalysis.h	/^    const MemDepResult &getResult() const { return Result; }$/;"	f	class:llvm::NonLocalDepEntry
getResultPointer	CodeGen/MachineRelocation.h	/^  void *getResultPointer() const {$/;"	f	class:llvm::MachineRelocation
getRetAttributes	Attributes.h	/^  Attributes getRetAttributes() const {$/;"	f	class:llvm::AttrListPtr
getRetAttributes	Function.h	/^  Attributes getRetAttributes() const {$/;"	f	class:llvm::Function
getReturnBlock	Transforms/Utils/UnifyFunctionExitNodes.h	/^  BasicBlock *getReturnBlock() const { return ReturnBlock; }$/;"	f	struct:llvm::UnifyFunctionExitNodes
getReturnType	DerivedTypes.h	/^  Type *getReturnType() const { return ContainedTys[0]; }$/;"	f	class:llvm::FunctionType
getReturnTypeName	DebugInfo.h	/^    StringRef getReturnTypeName() const {$/;"	f	class:llvm::DISubprogram
getReturnValue	Instructions.h	/^  Value *getReturnValue() const {$/;"	f	class:llvm::ReturnInst
getRight	ADT/ImmutableSet.h	/^  ImutAVLTree *getRight() const { return right; }$/;"	f	class:llvm::ImutAVLTree
getRight	ADT/ImmutableSet.h	/^  TreeTy*         getRight(TreeTy* T) const { return T->getRight(); }$/;"	f	class:llvm::ImutAVLFactory
getRoot	ADT/ImmutableMap.h	/^  TreeTy *getRoot() const {$/;"	f	class:llvm::ImmutableMap
getRoot	ADT/ImmutableSet.h	/^  TreeTy *getRoot() {$/;"	f	class:llvm::ImmutableSet
getRoot	Analysis/CallGraph.h	/^  virtual CallGraphNode* getRoot() { return 0; }$/;"	f	class:llvm::CallGraph
getRoot	Analysis/CallGraph.h	/^  virtual const CallGraphNode* getRoot() const { return 0; }$/;"	f	class:llvm::CallGraph
getRoot	Analysis/DominanceFrontier.h	/^  BasicBlock *getRoot() const {$/;"	f	class:llvm::DominanceFrontier
getRoot	Analysis/Dominators.h	/^  NodeT *getRoot() const {$/;"	f	class:llvm::DominatorTreeBase
getRoot	Analysis/Dominators.h	/^  inline BasicBlock *getRoot() const {$/;"	f	class:llvm::DominatorTree
getRoot	CodeGen/MachineDominators.h	/^  inline MachineBasicBlock *getRoot() const {$/;"	f	class:llvm::MachineDominatorTree
getRoot	CodeGen/SelectionDAG.h	/^  const SDValue &getRoot() const { return Root; }$/;"	f	class:llvm::SelectionDAG
getRoot	Support/YAMLParser.h	/^  Node *getRoot() {$/;"	f	class:llvm::yaml::Document
getRootInterval	Analysis/IntervalPartition.h	/^  inline Interval *getRootInterval() { return RootInterval; }$/;"	f	class:llvm::IntervalPartition
getRootNode	Analysis/Dominators.h	/^  DomTreeNodeBase<NodeT> *getRootNode() { return RootNode; }$/;"	f	class:llvm::DominatorTreeBase
getRootNode	Analysis/Dominators.h	/^  const DomTreeNodeBase<NodeT> *getRootNode() const { return RootNode; }$/;"	f	class:llvm::DominatorTreeBase
getRootNode	Analysis/Dominators.h	/^  inline DomTreeNode *getRootNode() const {$/;"	f	class:llvm::DominatorTree
getRootNode	Analysis/PostDominators.h	/^  inline DomTreeNode *getRootNode() const {$/;"	f	struct:llvm::PostDominatorTree
getRootNode	CodeGen/MachineDominators.h	/^  inline MachineDomTreeNode *getRootNode() const {$/;"	f	class:llvm::MachineDominatorTree
getRootNode	CodeGen/MachinePostDominators.h	/^  MachineDomTreeNode *getRootNode() const {$/;"	f	struct:llvm::MachinePostDominatorTree
getRootWithoutRetain	ADT/ImmutableMap.h	/^  TreeTy *getRootWithoutRetain() const {$/;"	f	class:llvm::ImmutableMap
getRootWithoutRetain	ADT/ImmutableSet.h	/^  TreeTy *getRootWithoutRetain() const {$/;"	f	class:llvm::ImmutableSet
getRootWithoutRetain	ADT/ImmutableSet.h	/^  TreeTy *getRootWithoutRetain() const {$/;"	f	class:llvm::ImmutableSetRef
getRoots	Analysis/DominanceFrontier.h	/^  inline const std::vector<BasicBlock*> &getRoots() const { return Roots; }$/;"	f	class:llvm::DominanceFrontierBase
getRoots	Analysis/Dominators.h	/^  inline const std::vector<BasicBlock*> &getRoots() const {$/;"	f	class:llvm::DominatorTree
getRoots	Analysis/Dominators.h	/^  inline const std::vector<NodeT*> &getRoots() const { return Roots; }$/;"	f	class:llvm::DominatorBase
getRoots	Analysis/PostDominators.h	/^  inline const std::vector<BasicBlock*> &getRoots() const {$/;"	f	struct:llvm::PostDominatorTree
getRoots	CodeGen/MachineDominators.h	/^  inline const std::vector<MachineBasicBlock*> &getRoots() const {$/;"	f	class:llvm::MachineDominatorTree
getRoots	CodeGen/MachinePostDominators.h	/^  const std::vector<MachineBasicBlock *> &getRoots() const {$/;"	f	struct:llvm::MachinePostDominatorTree
getRoundIntegerType	CodeGen/ValueTypes.h	/^    EVT getRoundIntegerType(LLVMContext &Context) const {$/;"	f	struct:llvm::EVT
getRowAsVector	CodeGen/PBQP/Math.h	/^    Vector getRowAsVector(unsigned r) const {$/;"	f	class:PBQP::Matrix
getRowMin	CodeGen/PBQP/Math.h	/^    PBQPNum getRowMin(unsigned r) const {$/;"	f	class:PBQP::Matrix
getRows	CodeGen/PBQP/Math.h	/^    unsigned getRows() const { return rows; }$/;"	f	class:PBQP::Matrix
getRunTimeLang	DebugInfo.h	/^    unsigned getRunTimeLang() const { return getUnsignedField(11); }$/;"	f	class:llvm::DICompositeType
getRunTimeVersion	DebugInfo.h	/^    unsigned getRunTimeVersion() const { return getUnsignedField(9); }$/;"	f	class:llvm::DICompileUnit
getSCEVType	Analysis/ScalarEvolution.h	/^    unsigned getSCEVType() const { return SCEVType; }$/;"	f	class:llvm::SCEV
getSDDbgValues	CodeGen/SelectionDAG.h	/^  ArrayRef<SDDbgValue*> getSDDbgValues(const SDNode *Node) {$/;"	f	class:llvm::SDDbgInfo
getSDVTList	CodeGen/SelectionDAGNodes.h	/^  static SDVTList getSDVTList(EVT VT) {$/;"	f	class:llvm::SDNode
getSDep	CodeGen/ScheduleDAG.h	/^    const SDep &getSDep() const {$/;"	f	class:llvm::SUnitIterator
getSExtValue	ADT/APInt.h	/^  int64_t getSExtValue() const {$/;"	f	class:llvm::APInt
getSExtValue	CodeGen/SelectionDAGNodes.h	/^  int64_t getSExtValue() const { return Value->getSExtValue(); }$/;"	f	class:llvm::ConstantSDNode
getSExtValue	Constants.h	/^  inline int64_t getSExtValue() const {$/;"	f	class:llvm::ConstantInt
getSHdrSize	Target/TargetELFWriterInfo.h	/^    unsigned getSHdrSize() const { return is64Bit ? 64 : 40; }$/;"	f	class:llvm::TargetELFWriterInfo
getSNaN	ADT/APFloat.h	/^    static APFloat getSNaN(const fltSemantics &Sem,$/;"	f	class:llvm::APFloat
getSUnit	CodeGen/ScheduleDAG.h	/^    SUnit *getSUnit() const {$/;"	f	class:llvm::SDep
getSUnit	CodeGen/ScheduleDAGInstrs.h	/^  inline SUnit *ScheduleDAGInstrs::getSUnit(MachineInstr *MI) const {$/;"	f	class:llvm::ScheduleDAGInstrs
getScalarTargetTransformInfo	Target/TargetMachine.h	/^  getScalarTargetTransformInfo() const { return 0; }$/;"	f	class:llvm::TargetMachine
getScalarTargetTransformInfo	TargetTransformInfo.h	/^  const ScalarTargetTransformInfo* getScalarTargetTransformInfo() {$/;"	f	class:llvm::TargetTransformInfo
getScalarType	CodeGen/ValueTypes.h	/^    EVT getScalarType() const {$/;"	f	struct:llvm::EVT
getScalarType	CodeGen/ValueTypes.h	/^    MVT getScalarType() const {$/;"	f	class:llvm::MVT
getScavengingFrameIndex	CodeGen/RegisterScavenging.h	/^  int getScavengingFrameIndex() const { return ScavengingFrameIndex; }$/;"	f	class:llvm::RegScavenger
getSchedClass	MC/MCInstrDesc.h	/^  unsigned getSchedClass() const {$/;"	f	class:llvm::MCInstrDesc
getSchedClassDesc	MC/MCSchedule.h	/^  const MCSchedClassDesc *getSchedClassDesc(unsigned SchedClassIdx) const {$/;"	f	class:llvm::MCSchedModel
getSchedModel	CodeGen/ScheduleDAGInstrs.h	/^    const TargetSchedModel *getSchedModel() const { return &SchedModel; }$/;"	f	class:llvm::ScheduleDAGInstrs
getSchedModel	MC/MCSubtargetInfo.h	/^  const MCSchedModel *getSchedModel() const { return CPUSchedModel; }$/;"	f	class:llvm::MCSubtargetInfo
getSchedulingPreference	Target/TargetLowering.h	/^  Sched::Preference getSchedulingPreference() const {$/;"	f	class:llvm::TargetLowering
getSchedulingPreference	Target/TargetLowering.h	/^  virtual Sched::Preference getSchedulingPreference(SDNode *) const {$/;"	f	class:llvm::TargetLowering
getScope	DebugInfo.h	/^    DILexicalBlock getScope() const { return getFieldAs<DILexicalBlock>(1); }$/;"	f	class:llvm::DILexicalBlockFile
getScope	DebugInfo.h	/^    DIScope  getScope() const          { return getFieldAs<DIScope>(2); }$/;"	f	class:llvm::DILocation
getScopeLineNumber	DebugInfo.h	/^    unsigned getScopeLineNumber() const { return getUnsignedField(20); }$/;"	f	class:llvm::DISubprogram
getScopeNode	CodeGen/LexicalScopes.h	/^  const MDNode *getScopeNode() const            { return Desc; }$/;"	f	class:llvm::LexicalScope
getSection	GlobalValue.h	/^  const std::string &getSection() const { return Section; }$/;"	f	class:llvm::GlobalValue
getSection	MC/MCAssembler.h	/^  const MCSection &getSection() const { return *Section; }$/;"	f	class:llvm::MCSectionData
getSection	MC/MCSymbol.h	/^    const MCSection &getSection() const {$/;"	f	class:llvm::MCSymbol
getSection	Object/ELF.h	/^                             ::getSection(const Elf_Sym *symb) const {$/;"	f	class:llvm::object::ELFObjectFile
getSection	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getSection(DataRefImpl Symb) const {$/;"	f	class:llvm::object::ELFObjectFile
getSection	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getSection(uint32_t index) const {$/;"	f	class:llvm::object::ELFObjectFile
getSection	Object/ObjectFile.h	/^inline error_code SymbolRef::getSection(section_iterator &Result) const {$/;"	f	class:llvm::object::SymbolRef
getSectionAddress	MC/MCMachObjectWriter.h	/^  uint64_t getSectionAddress(const MCSectionData* SD) const {$/;"	f	class:llvm::MachObjectWriter
getSectionAddress	Object/ELF.h	/^                        ::getSectionAddress(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
getSectionAddressMap	MC/MCMachObjectWriter.h	/^  SectionAddrMap &getSectionAddressMap() { return SectionAddress; }$/;"	f	class:llvm::MachObjectWriter
getSectionAlignment	Object/ELF.h	/^                        ::getSectionAlignment(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
getSectionContents	Object/ELF.h	/^                        ::getSectionContents(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
getSectionContents	Object/ELF.h	/^                        ::getSectionContents(const Elf_Shdr *Sec,$/;"	f	class:llvm::object::ELFObjectFile
getSectionData	MC/MCAssembler.h	/^  MCSectionData &getSectionData(const MCSection &Section) const {$/;"	f	class:llvm::MCAssembler
getSectionList	MC/MCAssembler.h	/^  SectionDataListType &getSectionList() { return Sections; }$/;"	f	class:llvm::MCAssembler
getSectionList	MC/MCAssembler.h	/^  const SectionDataListType &getSectionList() const { return Sections; }$/;"	f	class:llvm::MCAssembler
getSectionName	MC/MCSectionCOFF.h	/^    StringRef getSectionName() const { return SectionName; }$/;"	f	class:llvm::MCSectionCOFF
getSectionName	MC/MCSectionELF.h	/^  StringRef getSectionName() const { return SectionName; }$/;"	f	class:llvm::MCSectionELF
getSectionName	MC/MCSectionMachO.h	/^  StringRef getSectionName() const {$/;"	f	class:llvm::MCSectionMachO
getSectionName	Object/ELF.h	/^                        ::getSectionName(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
getSectionName	Object/ELF.h	/^                        ::getSectionName(const Elf_Shdr *section,$/;"	f	class:llvm::object::ELFObjectFile
getSectionNext	Object/ELF.h	/^                        ::getSectionNext(DataRefImpl Sec, SectionRef &Result) const {$/;"	f	class:llvm::object::ELFObjectFile
getSectionOrder	MC/MCAsmLayout.h	/^  const llvm::SmallVectorImpl<MCSectionData*> &getSectionOrder() const {$/;"	f	class:llvm::MCAsmLayout
getSectionOrder	MC/MCAsmLayout.h	/^  llvm::SmallVectorImpl<MCSectionData*> &getSectionOrder() {$/;"	f	class:llvm::MCAsmLayout
getSectionRelBegin	Object/ELF.h	/^                                 ::getSectionRelBegin(DataRefImpl Sec) const {$/;"	f	class:llvm::object::ELFObjectFile
getSectionRelEnd	Object/ELF.h	/^                                 ::getSectionRelEnd(DataRefImpl Sec) const {$/;"	f	class:llvm::object::ELFObjectFile
getSectionSize	Object/ELF.h	/^                        ::getSectionSize(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
getSecureLog	MC/MCContext.h	/^    raw_ostream *getSecureLog() { return SecureLog; }$/;"	f	class:llvm::MCContext
getSecureLogFile	MC/MCContext.h	/^    char *getSecureLogFile() { return SecureLogFile; }$/;"	f	class:llvm::MCContext
getSecureLogUsed	MC/MCContext.h	/^    bool getSecureLogUsed() { return SecureLogUsed; }$/;"	f	class:llvm::MCContext
getSegmentName	MC/MCSectionMachO.h	/^  StringRef getSegmentName() const {$/;"	f	class:llvm::MCSectionMachO
getSelectCC	CodeGen/SelectionDAG.h	/^  SDValue getSelectCC(DebugLoc DL, SDValue LHS, SDValue RHS,$/;"	f	class:llvm::SelectionDAG
getSelection	CodeGen/PBQP/Solution.h	/^    unsigned getSelection(Graph::ConstNodeItr nItr) const {$/;"	f	class:PBQP::Solution
getSelection	MC/MCSectionCOFF.h	/^    int getSelection () const { return Selection; }$/;"	f	class:llvm::MCSectionCOFF
getSelectionDAGInfo	CodeGen/SelectionDAG.h	/^  const TargetSelectionDAGInfo &getSelectionDAGInfo() const { return TSI; }$/;"	f	class:llvm::SelectionDAG
getSelectionDAGInfo	Target/TargetMachine.h	/^  virtual const TargetSelectionDAGInfo *getSelectionDAGInfo() const{ return 0; }$/;"	f	class:llvm::TargetMachine
getSemantics	ADT/APFloat.h	/^    const fltSemantics &getSemantics() const { return *semantics; }$/;"	f	class:llvm::APFloat
getSeparatorString	MC/MCAsmInfo.h	/^    const char *getSeparatorString() const {$/;"	f	class:llvm::MCAsmInfo
getSetCC	CodeGen/SelectionDAG.h	/^  SDValue getSetCC(DebugLoc DL, EVT VT, SDValue LHS, SDValue RHS,$/;"	f	class:llvm::SelectionDAG
getShortDescription	Support/TargetRegistry.h	/^    const char *getShortDescription() const { return ShortDesc; }$/;"	f	class:llvm::Target
getShouldFoldAtomicFences	Target/TargetLowering.h	/^  bool getShouldFoldAtomicFences() const {$/;"	f	class:llvm::TargetLowering
getShowParsedOperands	MC/MCParser/MCAsmParser.h	/^  bool getShowParsedOperands() const { return ShowParsedOperands; }$/;"	f	class:llvm::MCAsmParser
getShuffleMask	Instructions.h	/^  SmallVector<int, 16> getShuffleMask() const {$/;"	f	class:llvm::ShuffleVectorInst
getShuffleMask	Instructions.h	/^  void getShuffleMask(SmallVectorImpl<int> &Result) const {$/;"	f	class:llvm::ShuffleVectorInst
getSignBit	ADT/APInt.h	/^  static APInt getSignBit(unsigned BitWidth) {$/;"	f	class:llvm::APInt
getSignBit	DerivedTypes.h	/^  uint64_t getSignBit() const {$/;"	f	class:llvm::IntegerType
getSignedMaxValue	ADT/APInt.h	/^  static APInt getSignedMaxValue(unsigned numBits) {$/;"	f	class:llvm::APInt
getSignedMinValue	ADT/APInt.h	/^  static APInt getSignedMinValue(unsigned numBits) {$/;"	f	class:llvm::APInt
getSignedPredicate	Instructions.h	/^  Predicate getSignedPredicate() const {$/;"	f	class:llvm::ICmpInst
getSimpleHint	CodeGen/MachineRegisterInfo.h	/^  unsigned getSimpleHint(unsigned Reg) const {$/;"	f	class:llvm::MachineRegisterInfo
getSimpleNodeLabel	Analysis/CFGPrinter.h	/^  static std::string getSimpleNodeLabel(const BasicBlock *Node,$/;"	f	struct:llvm::DOTGraphTraits
getSimpleVT	CodeGen/ValueTypes.h	/^    MVT getSimpleVT() const {$/;"	f	struct:llvm::EVT
getSimplifiedValue	ADT/IntrusiveRefCntPtr.h	/^    static SimpleType getSimplifiedValue(const IntrusiveRefCntPtr<T>& Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	ADT/Optional.h	/^  static SimpleType getSimplifiedValue(const Optional<T> &Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	ADT/ilist.h	/^  static SimpleType getSimplifiedValue(const ilist_iterator<NodeTy> &Node) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	CodeGen/SelectionDAGNodes.h	/^  static SimpleType getSimplifiedValue(const SDUse &Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	CodeGen/SelectionDAGNodes.h	/^  static SimpleType getSimplifiedValue(const SDValue &Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	Support/Casting.h	/^  static SimpleType &getSimplifiedValue(From &Val) { return Val; }$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	Support/Casting.h	/^  static SimpleType &getSimplifiedValue(const From &Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	Support/ValueHandle.h	/^  static SimpleType getSimplifiedValue(const AssertingVH<Value> &AVH) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	Support/ValueHandle.h	/^  static SimpleType getSimplifiedValue(const CallbackVH &CVH) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	Support/ValueHandle.h	/^  static SimpleType getSimplifiedValue(const TrackingVH<Value> &AVH) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	Support/ValueHandle.h	/^  static SimpleType getSimplifiedValue(const WeakVH &WVH) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	Use.h	/^  static SimpleType getSimplifiedValue(const Use &Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	User.h	/^  static SimpleType getSimplifiedValue(const User::const_op_iterator &Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	User.h	/^  static SimpleType getSimplifiedValue(const User::op_iterator &Val) {$/;"	f	struct:llvm::simplify_type
getSingleBlockPred	Analysis/BlockFrequencyImpl.h	/^  BlockT *getSingleBlockPred(BlockT *BB) {$/;"	f	class:llvm::BlockFrequencyImpl
getSingleElement	Support/ConstantRange.h	/^  const APInt *getSingleElement() const {$/;"	f	class:llvm::ConstantRange
getSingleNumber	Support/IntegersSubset.h	/^  const IntTy& getSingleNumber(unsigned idx) const {$/;"	f	class:llvm::IntegersSubsetGeneric
getSinglePredecessor	BasicBlock.h	/^  const BasicBlock *getSinglePredecessor() const {$/;"	f	class:llvm::BasicBlock
getSingleStringRef	ADT/Twine.h	/^    StringRef getSingleStringRef() const {$/;"	f	class:llvm::Twine
getSingleValue	Support/IntegersSubset.h	/^  APInt getSingleValue(unsigned idx) const {$/;"	f	class:llvm::IntegersSubsetGeneric
getSixteenByteConstantSection	MC/MCObjectFileInfo.h	/^  const MCSection *getSixteenByteConstantSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getSize	ADT/FoldingSet.h	/^  size_t getSize() const { return Size; }$/;"	f	class:llvm::FoldingSetNodeIDRef
getSize	Analysis/AliasSetTracker.h	/^    uint64_t getSize() const { return CurNode->getSize(); }$/;"	f	class:llvm::AliasSet::iterator
getSize	Analysis/AliasSetTracker.h	/^    uint64_t getSize() const { return Size; }$/;"	f	class:llvm::AliasSet::PointerRec
getSize	Bitcode/Archive.h	/^    uint64_t getSize() const             { return info.getSize(); }$/;"	f	class:llvm::ArchiveMember
getSize	CodeGen/MachineMemOperand.h	/^  uint64_t getSize() const { return Size; }$/;"	f	class:llvm::MachineMemOperand
getSize	MC/MCAssembler.h	/^  const MCExpr *getSize() const {$/;"	f	class:llvm::MCSymbolData
getSize	MC/MCAssembler.h	/^  uint64_t getSize() const { return Size; }$/;"	f	class:llvm::MCFillFragment
getSize	MC/MCInstrDesc.h	/^  unsigned getSize() const {$/;"	f	class:llvm::MCInstrDesc
getSize	MC/MCRegisterInfo.h	/^  unsigned getSize() const { return RegSize; }$/;"	f	class:llvm::MCRegisterClass
getSize	MC/MCWin64EH.h	/^    unsigned getSize() const { return Offset; }$/;"	f	class:llvm::MCWin64EHInstruction
getSize	Object/ObjectFile.h	/^inline error_code SectionRef::getSize(uint64_t &Result) const {$/;"	f	class:llvm::object::SectionRef
getSize	Object/ObjectFile.h	/^inline error_code SymbolRef::getSize(uint64_t &Result) const {$/;"	f	class:llvm::object::SymbolRef
getSize	Support/IntegersSubset.h	/^  unsigned getSize() const {$/;"	f	class:llvm::IntegersSubsetGeneric
getSize	Support/PathV1.h	/^    uint64_t getSize() const { return fileSize; }$/;"	f	class:llvm::sys::FileStatus
getSize	TableGen/Record.h	/^  unsigned getSize() const { return Values.size(); }$/;"	f	class:llvm::ListInit
getSize	Target/TargetRegisterInfo.h	/^  unsigned getSize() const { return MC->getSize(); }$/;"	f	class:llvm::TargetRegisterClass
getSizeInBits	CodeGen/ValueTypes.h	/^    unsigned getSizeInBits() const {$/;"	f	class:llvm::MVT
getSizeInBits	CodeGen/ValueTypes.h	/^    unsigned getSizeInBits() const {$/;"	f	struct:llvm::EVT
getSizeInBits	DataLayout.h	/^  uint64_t getSizeInBits() const {$/;"	f	class:llvm::StructLayout
getSizeInBits	DebugInfo.h	/^    uint64_t getSizeInBits() const      { return getUInt64Field(5); }$/;"	f	class:llvm::DIType
getSizeInBytes	DataLayout.h	/^  uint64_t getSizeInBytes() const {$/;"	f	class:llvm::StructLayout
getSlot	CodeGen/SlotIndexes.h	/^    Slot getSlot() const {$/;"	f	class:llvm::SlotIndex
getSlotIndexes	CodeGen/LiveIntervalAnalysis.h	/^    SlotIndexes *getSlotIndexes() const {$/;"	f	class:llvm::LiveIntervals
getSmallBits	ADT/SmallBitVector.h	/^  uintptr_t getSmallBits() const {$/;"	f	class:llvm::SmallBitVector
getSmallRawBits	ADT/SmallBitVector.h	/^  uintptr_t getSmallRawBits() const {$/;"	f	class:llvm::SmallBitVector
getSmallSize	ADT/SmallBitVector.h	/^  size_t getSmallSize() const {$/;"	f	class:llvm::SmallBitVector
getSolver	CodeGen/PBQP/HeuristicBase.h	/^    HeuristicSolverImpl<HImpl>& getSolver() { return s; }$/;"	f	class:PBQP::HeuristicBase
getSolverDegree	CodeGen/PBQP/HeuristicSolver.h	/^      unsigned getSolverDegree() const { return solverDegree; }$/;"	f	class:PBQP::HeuristicSolverImpl::NodeData
getSolverDegree	CodeGen/PBQP/HeuristicSolver.h	/^    unsigned getSolverDegree(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
getSolverEdgeData	CodeGen/PBQP/HeuristicSolver.h	/^    EdgeData& getSolverEdgeData(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
getSolverNodeData	CodeGen/PBQP/HeuristicSolver.h	/^    NodeData& getSolverNodeData(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
getSomePointer	Analysis/AliasSetTracker.h	/^  PointerRec *getSomePointer() const {$/;"	f	class:llvm::AliasSet
getSource	Analysis/PathProfileInfo.h	/^  inline BasicBlock* getSource() { return _source; }$/;"	f	class:llvm::ProfilePathEdge
getSource	IntrinsicInst.h	/^    Value *getSource() const { return getRawSource()->stripPointerCasts(); }$/;"	f	class:llvm::MemTransferInst
getSource	MC/MCDwarf.h	/^    const MachineLocation &getSource() const { return Source; }$/;"	f	class:llvm::MCCFIInstruction
getSource	MC/MachineLocation.h	/^  const MachineLocation &getSource()      const { return Source; }$/;"	f	class:llvm::MachineMove
getSource	Support/CFG.h	/^  inline BB_ *getSource() {$/;"	f	class:llvm::SuccIterator
getSourceAddressSpace	IntrinsicInst.h	/^    unsigned getSourceAddressSpace() const {$/;"	f	class:llvm::MemTransferInst
getSourceGraphNode	Analysis/IntervalIterator.h	/^inline BasicBlock *getSourceGraphNode(Function *, BasicBlock *BB) {$/;"	f	namespace:llvm
getSourceGraphNode	Analysis/IntervalIterator.h	/^inline Interval *getSourceGraphNode(IntervalPartition *IP, BasicBlock *BB) {$/;"	f	namespace:llvm
getSourceManager	MC/MCContext.h	/^    const SourceMgr *getSourceManager() const { return SrcMgr; }$/;"	f	class:llvm::MCContext
getSourceManager	MC/MCParser/MCAsmParserExtension.h	/^  SourceMgr &getSourceManager() { return getParser().getSourceManager(); }$/;"	f	class:llvm::MCAsmParserExtension
getSourceMgr	Support/SourceMgr.h	/^  const SourceMgr *getSourceMgr() const { return SM; }$/;"	f	class:llvm::SMDiagnostic
getSourceRange	Support/YAMLParser.h	/^  SMRange getSourceRange() const { return SourceRange; }$/;"	f	class:llvm::yaml::Node
getSparseSetIndex	CodeGen/ScheduleDAGInstrs.h	/^    unsigned getSparseSetIndex() const {$/;"	f	struct:llvm::VReg2SUnit
getSpecialCasedSectionGlobals	Target/TargetLoweringObjectFile.h	/^  getSpecialCasedSectionGlobals(const GlobalValue *GV, Mangler *Mang,$/;"	f	class:llvm::TargetLoweringObjectFile
getSplatIndex	CodeGen/SelectionDAGNodes.h	/^  int  getSplatIndex() const { $/;"	f	class:llvm::ShuffleVectorSDNode
getSrc	Analysis/DependenceAnalysis.h	/^    const Instruction *getSrc() const { return Src; }$/;"	f	class:llvm::Dependence
getSrcTy	InstrTypes.h	/^  Type* getSrcTy() const { return getOperand(0)->getType(); }$/;"	f	class:llvm::CastInst
getSrcValue	CodeGen/SelectionDAGNodes.h	/^  const Value *getSrcValue() const { return MMO->getValue(); }$/;"	f	class:llvm::MemSDNode
getSrcValueOffset	CodeGen/SelectionDAGNodes.h	/^  int64_t getSrcValueOffset() const { return MMO->getOffset(); }$/;"	f	class:llvm::MemSDNode
getStackAlignment	Target/TargetFrameLowering.h	/^  unsigned getStackAlignment() const { return StackAlignment; }$/;"	f	class:llvm::TargetFrameLowering
getStackCookieLocation	Target/TargetLowering.h	/^  virtual bool getStackCookieLocation(unsigned &\/*AddressSpace*\/,$/;"	f	class:llvm::TargetLowering
getStackGrowthDirection	Target/TargetFrameLowering.h	/^  StackDirection getStackGrowthDirection() const { return StackDir; }$/;"	f	class:llvm::TargetFrameLowering
getStackPointerRegisterToSaveRestore	Target/TargetLowering.h	/^  unsigned getStackPointerRegisterToSaveRestore() const {$/;"	f	class:llvm::TargetLowering
getStackProtectorIndex	CodeGen/MachineFrameInfo.h	/^  int getStackProtectorIndex() const { return StackProtectorIdx; }$/;"	f	class:llvm::MachineFrameInfo
getStackSize	CodeGen/MachineFrameInfo.h	/^  uint64_t getStackSize() const { return StackSize; }$/;"	f	class:llvm::MachineFrameInfo
getStageLatency	MC/MCInstrItineraries.h	/^  unsigned getStageLatency(unsigned ItinClassIndx) const {$/;"	f	class:llvm::InstrItineraryData
getStart	ADT/ImmutableIntervalMap.h	/^  int64_t getStart() const { return Start; }$/;"	f	class:llvm::Interval
getStart	Analysis/Dominators.h	/^  const BasicBlock *getStart() const {$/;"	f	class:llvm::BasicBlockEdge
getStart	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *getStart() const { return Operands[0]; }$/;"	f	class:llvm::SCEVAddRecExpr
getState	Target/TargetLibraryInfo.h	/^  AvailabilityState getState(LibFunc::Func F) const {$/;"	f	class:llvm::TargetLibraryInfo
getStaticCtorSection	Target/TargetLoweringObjectFile.h	/^  getStaticCtorSection(unsigned Priority = 65535) const {$/;"	f	class:llvm::TargetLoweringObjectFile
getStaticDtorSection	Target/TargetLoweringObjectFile.h	/^  getStaticDtorSection(unsigned Priority = 65535) const {$/;"	f	class:llvm::TargetLoweringObjectFile
getStepRecurrence	Analysis/ScalarEvolutionExpressions.h	/^    const SCEV *getStepRecurrence(ScalarEvolution &SE) const {$/;"	f	class:llvm::SCEVAddRecExpr
getStoreSize	CodeGen/ValueTypes.h	/^    unsigned getStoreSize() const {$/;"	f	class:llvm::MVT
getStoreSize	CodeGen/ValueTypes.h	/^    unsigned getStoreSize() const {$/;"	f	struct:llvm::EVT
getStoreSizeInBits	CodeGen/ValueTypes.h	/^    unsigned getStoreSizeInBits() const {$/;"	f	class:llvm::MVT
getStoreSizeInBits	CodeGen/ValueTypes.h	/^    unsigned getStoreSizeInBits() const {$/;"	f	struct:llvm::EVT
getStrategy	CodeGen/GCMetadata.h	/^    GCStrategy &getStrategy() { return S; }$/;"	f	class:llvm::GCFunctionInfo
getStrategy	CodeGen/GCMetadataPrinter.h	/^    GCStrategy &getStrategy() { return *S; }$/;"	f	class:llvm::GCMetadataPrinter
getStream	MC/MCObjectWriter.h	/^  raw_ostream &getStream() { return OS; }$/;"	f	class:llvm::MCObjectWriter
getStreamer	MC/MCParser/MCAsmParserExtension.h	/^  MCStreamer &getStreamer() { return getParser().getStreamer(); }$/;"	f	class:llvm::MCAsmParserExtension
getString	MC/MCParser/MCAsmLexer.h	/^  StringRef getString() const { return Str; }$/;"	f	class:llvm::AsmToken
getString	Metadata.h	/^  StringRef getString() const { return getName(); }$/;"	f	class:llvm::MDString
getString	Object/ELF.h	/^                         ::getString(const Elf_Shdr *section,$/;"	f	class:llvm::object::ELFObjectFile
getString	Object/ELF.h	/^                         ::getString(uint32_t section,$/;"	f	class:llvm::object::ELFObjectFile
getStringAtIndex	Object/MachOObject.h	/^  StringRef getStringAtIndex(unsigned Index) const {$/;"	f	class:llvm::object::MachOObject
getStringContents	MC/MCParser/MCAsmLexer.h	/^  StringRef getStringContents() const {$/;"	f	class:llvm::AsmToken
getStringTableData	Object/MachOObject.h	/^  StringRef getStringTableData() const {$/;"	f	class:llvm::object::MachOObject
getStringTableIndex	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getStringTableIndex() const {$/;"	f	class:llvm::object::ELFObjectFile
getStubLayout	Target/TargetJITInfo.h	/^    virtual StubLayout getStubLayout() {$/;"	f	class:llvm::TargetJITInfo
getStubSize	MC/MCSectionMachO.h	/^  unsigned getStubSize() const { return Reserved2; }$/;"	f	class:llvm::MCSectionMachO
getSubClassMask	Target/TargetRegisterInfo.h	/^  const uint32_t *getSubClassMask() const {$/;"	f	class:llvm::TargetRegisterClass
getSubClassWithSubReg	Target/TargetRegisterInfo.h	/^  getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {$/;"	f	class:llvm::TargetRegisterInfo
getSubExpr	MC/MCExpr.h	/^  const MCExpr *getSubExpr() const { return Expr; }$/;"	f	class:llvm::MCUnaryExpr
getSubLoops	Analysis/LoopInfo.h	/^  const std::vector<LoopT *> &getSubLoops() const { return SubLoops; }$/;"	f	class:llvm::LoopBase
getSubLoopsVector	Analysis/LoopInfo.h	/^  std::vector<LoopT *> &getSubLoopsVector() { return SubLoops; }$/;"	f	class:llvm::LoopBase
getSubReg	CodeGen/MachineOperand.h	/^  unsigned getSubReg() const {$/;"	f	class:llvm::MachineOperand
getSubReg	Target/TargetRegisterInfo.h	/^  unsigned getSubReg() const { return SubReg; }$/;"	f	class:llvm::SuperRegClassIterator
getSubRegIndexLaneMask	Target/TargetRegisterInfo.h	/^  unsigned getSubRegIndexLaneMask(unsigned SubIdx) const {$/;"	f	class:llvm::TargetRegisterInfo
getSubRegIndexName	Target/TargetRegisterInfo.h	/^  const char *getSubRegIndexName(unsigned SubIdx) const {$/;"	f	class:llvm::TargetRegisterInfo
getSubclassData	Type.h	/^  unsigned getSubclassData() const { return IDAndSubclassData >> 8; }$/;"	f	class:llvm::Type
getSubclassDataFromInstruction	Instruction.h	/^  unsigned getSubclassDataFromInstruction() const {$/;"	f	class:llvm::Instruction
getSubclassDataFromValue	Instruction.h	/^  unsigned short getSubclassDataFromValue() const {$/;"	f	class:llvm::Instruction
getSubclassDataFromValue	Value.h	/^  unsigned short getSubclassDataFromValue() const { return SubclassData; }$/;"	f	class:llvm::Value
getSublistAccess	BasicBlock.h	/^  static iplist<Instruction> BasicBlock::*getSublistAccess(Instruction*) {$/;"	f	class:llvm::BasicBlock::BasicBlock
getSublistAccess	Function.h	/^  static iplist<Argument> Function::*getSublistAccess(Argument*) {$/;"	f	class:llvm::Function::Function
getSublistAccess	Function.h	/^  static iplist<BasicBlock> Function::*getSublistAccess(BasicBlock*) {$/;"	f	class:llvm::Function::Function
getSublistAccess	Module.h	/^  static ilist<NamedMDNode> Module::*getSublistAccess(NamedMDNode*) {$/;"	f	class:llvm::Module::Module
getSublistAccess	Module.h	/^  static iplist<Function> Module::*getSublistAccess(Function*) {$/;"	f	class:llvm::Module::Module
getSublistAccess	Module.h	/^  static iplist<GlobalAlias> Module::*getSublistAccess(GlobalAlias*) {$/;"	f	class:llvm::Module::Module
getSublistAccess	Module.h	/^  static iplist<GlobalVariable> Module::*getSublistAccess(GlobalVariable*) {$/;"	f	class:llvm::Module::Module
getSubsectionsViaSymbols	MC/MCAssembler.h	/^  bool getSubsectionsViaSymbols() const {$/;"	f	class:llvm::MCAssembler
getSubtarget	Target/TargetMachine.h	/^  template<typename STC> const STC &getSubtarget() const {$/;"	f	class:llvm::TargetMachine
getSubtargetImpl	Target/TargetMachine.h	/^  virtual const TargetSubtargetInfo *getSubtargetImpl() const { return 0; }$/;"	f	class:llvm::TargetMachine
getSuccessor	InstrTypes.h	/^  BasicBlock *getSuccessor(unsigned idx) const {$/;"	f	class:llvm::TerminatorInst
getSuccessor	Instructions.h	/^  BasicBlock *getSuccessor(unsigned i) const {$/;"	f	class:llvm::BranchInst
getSuccessor	Instructions.h	/^  BasicBlock *getSuccessor(unsigned i) const {$/;"	f	class:llvm::IndirectBrInst
getSuccessor	Instructions.h	/^  BasicBlock *getSuccessor(unsigned i) const {$/;"	f	class:llvm::InvokeInst
getSuccessor	Instructions.h	/^  BasicBlock *getSuccessor(unsigned idx) const {$/;"	f	class:llvm::SwitchInst
getSuccessorIndex	Instructions.h	/^    unsigned getSuccessorIndex() const {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
getSuccessorIndex	Support/CFG.h	/^  unsigned getSuccessorIndex() const { return idx; }$/;"	f	class:llvm::SuccIterator
getSuperClasses	TableGen/Record.h	/^  const std::vector<Record*>   &getSuperClasses() const { return SuperClasses; }$/;"	f	class:llvm::Record
getSuperClasses	Target/TargetRegisterInfo.h	/^  sc_iterator getSuperClasses() const {$/;"	f	class:llvm::TargetRegisterClass
getSuperRegIndices	Target/TargetRegisterInfo.h	/^  const uint16_t *getSuperRegIndices() const {$/;"	f	class:llvm::TargetRegisterClass
getSupportsWeakOmittedEHFrame	MC/MCObjectFileInfo.h	/^  bool getSupportsWeakOmittedEHFrame() const {$/;"	f	class:llvm::MCObjectFileInfo
getSwappedPredicate	InstrTypes.h	/^  Predicate getSwappedPredicate() const {$/;"	f	class:llvm::CmpInst
getSymA	MC/MCValue.h	/^  const MCSymbolRefExpr *getSymA() const { return SymA; }$/;"	f	class:llvm::MCValue
getSymB	MC/MCValue.h	/^  const MCSymbolRefExpr *getSymB() const { return SymB; }$/;"	f	class:llvm::MCValue
getSymTab	Function.h	/^ilist_traits<Argument>::getSymTab(Function *F) {$/;"	f	class:llvm::ilist_traits
getSymTab	Function.h	/^ilist_traits<BasicBlock>::getSymTab(Function *F) {$/;"	f	class:llvm::ilist_traits
getSymTab	SymbolTableListTraits.h	/^  static ValueSymbolTable *getSymTab(ItemParentClass *Par) {$/;"	f	class:llvm::SymbolTableListTraits
getSymTabEntrySize	Target/TargetELFWriterInfo.h	/^    unsigned getSymTabEntrySize() const { return is64Bit ? 24 : 16; }$/;"	f	class:llvm::TargetELFWriterInfo
getSymbol	CodeGen/SelectionDAGNodes.h	/^  const char *getSymbol() const { return Symbol; }$/;"	f	class:llvm::ExternalSymbolSDNode
getSymbol	MC/MCAssembler.h	/^  const MCSymbol &getSymbol() const { return *Symbol; }$/;"	f	class:llvm::MCSymbolData
getSymbol	MC/MCExpr.h	/^  const MCSymbol &getSymbol() const { return *Symbol; }$/;"	f	class:llvm::MCSymbolRefExpr
getSymbol	Object/ELF.h	/^  uint32_t getSymbol() const { return (r_info >> 8); }$/;"	f	struct:llvm::object::Elf_Rel_Impl
getSymbol	Object/ELF.h	/^  uint64_t getSymbol() const { return (r_info >> 32); }$/;"	f	struct:llvm::object::Elf_Rel_Impl
getSymbol	Object/ELF.h	/^ELFObjectFile<target_endianness, is64Bits>::getSymbol(DataRefImpl Symb) const {$/;"	f	class:llvm::object::ELFObjectFile
getSymbol	Object/ObjectFile.h	/^inline error_code RelocationRef::getSymbol(SymbolRef &Result) const {$/;"	f	class:llvm::object::RelocationRef
getSymbol	Support/ELF.h	/^  Elf32_Word getSymbol() const { return (r_info >> 8); }$/;"	f	struct:llvm::ELF::Elf32_Rel
getSymbol	Support/ELF.h	/^  Elf32_Word getSymbol() const { return (r_info >> 8); }$/;"	f	struct:llvm::ELF::Elf32_Rela
getSymbol	Support/ELF.h	/^  Elf64_Xword getSymbol() const { return (r_info >> 32); }$/;"	f	struct:llvm::ELF::Elf64_Rel
getSymbol	Support/ELF.h	/^  Elf64_Xword getSymbol() const { return (r_info >> 32); }$/;"	f	struct:llvm::ELF::Elf64_Rela
getSymbolAddress	Object/ELF.h	/^                        ::getSymbolAddress(DataRefImpl Symb,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolData	MC/MCAssembler.h	/^  MCSymbolData &getSymbolData(const MCSymbol &Symbol) const {$/;"	f	class:llvm::MCAssembler
getSymbolFileOffset	Object/ELF.h	/^                        ::getSymbolFileOffset(DataRefImpl Symb,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolFlags	Object/ELF.h	/^                        ::getSymbolFlags(DataRefImpl Symb,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolList	MC/MCAssembler.h	/^  SymbolDataListType &getSymbolList() { return Symbols; }$/;"	f	class:llvm::MCAssembler
getSymbolList	MC/MCAssembler.h	/^  const SymbolDataListType &getSymbolList() const { return Symbols; }$/;"	f	class:llvm::MCAssembler
getSymbolNMTypeChar	Object/ELF.h	/^                        ::getSymbolNMTypeChar(DataRefImpl Symb,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolName	CodeGen/MachineOperand.h	/^  const char *getSymbolName() const {$/;"	f	class:llvm::MachineOperand
getSymbolName	Object/ELF.h	/^                        ::getSymbolName(DataRefImpl Symb,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolName	Object/ELF.h	/^                        ::getSymbolName(const Elf_Shdr *section,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolNext	Object/ELF.h	/^                        ::getSymbolNext(DataRefImpl Symb,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolSection	Object/ELF.h	/^                        ::getSymbolSection(DataRefImpl Symb,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolSize	Object/ELF.h	/^                        ::getSymbolSize(DataRefImpl Symb,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolTable	Bitcode/Archive.h	/^    const SymTabType& getSymbolTable() { return symTab; }$/;"	f	class:llvm::Archive
getSymbolTableIndex	Object/ELF.h	/^                      ::getSymbolTableIndex(const Elf_Sym *symb) const {$/;"	f	class:llvm::object::ELFObjectFile
getSymbolType	Object/ELF.h	/^                        ::getSymbolType(DataRefImpl Symb,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolVersion	Object/ELF.h	/^                        ::getSymbolVersion(SymbolRef SymRef,$/;"	f	class:llvm::object::ELFObjectFile
getSymbolVersion	Object/ELF.h	/^                        ::getSymbolVersion(const Elf_Shdr *section,$/;"	f	class:llvm::object::ELFObjectFile
getSymbols	MC/MCContext.h	/^    const SymbolTable &getSymbols() const {$/;"	f	class:llvm::MCContext
getSynchScope	CodeGen/SelectionDAGNodes.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::MemSDNode
getSynchScope	Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::AtomicCmpXchgInst
getSynchScope	Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::AtomicRMWInst
getSynchScope	Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::FenceInst
getSynchScope	Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::LoadInst
getSynchScope	Instructions.h	/^  SynchronizationScope getSynchScope() const {$/;"	f	class:llvm::StoreInst
getSystemTime	Support/Timer.h	/^  double getSystemTime() const { return SystemTime; }$/;"	f	class:llvm::TimeRecord
getTBAAInfo	Analysis/AliasSetTracker.h	/^    const MDNode *getTBAAInfo() const { return CurNode->getTBAAInfo(); }$/;"	f	class:llvm::AliasSet::iterator
getTBAAInfo	Analysis/AliasSetTracker.h	/^    const MDNode *getTBAAInfo() const {$/;"	f	class:llvm::AliasSet::PointerRec
getTBAAInfo	CodeGen/MachineMemOperand.h	/^  const MDNode *getTBAAInfo() const { return TBAAInfo; }$/;"	f	class:llvm::MachineMemOperand
getTBAAInfo	CodeGen/SelectionDAGNodes.h	/^  const MDNode *getTBAAInfo() const { return MMO->getTBAAInfo(); }$/;"	f	class:llvm::MemSDNode
getTLSBSSSection	MC/MCObjectFileInfo.h	/^  const MCSection *getTLSBSSSection() const { return TLSBSSSection; }$/;"	f	class:llvm::MCObjectFileInfo
getTLSDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *getTLSDataSection() const { return TLSDataSection; }$/;"	f	class:llvm::MCObjectFileInfo
getTLSExtraDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *getTLSExtraDataSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getTLSTLVSection	MC/MCObjectFileInfo.h	/^  const MCSection *getTLSTLVSection() const { return TLSTLVSection; }$/;"	f	class:llvm::MCObjectFileInfo
getTLSThreadInitSection	MC/MCObjectFileInfo.h	/^  const MCSection *getTLSThreadInitSection() const {$/;"	f	class:llvm::MCObjectFileInfo
getTM	CodeGen/Passes.h	/^  template<typename TMC> TMC &getTM() const {$/;"	f	class:llvm::TargetPassConfig
getTTypeEncoding	MC/MCObjectFileInfo.h	/^  unsigned getTTypeEncoding() const { return TTypeEncoding; }$/;"	f	class:llvm::MCObjectFileInfo
getTag	DebugInfo.h	/^    unsigned getTag() const {$/;"	f	class:llvm::DIDescriptor
getTag	Object/ELF.h	/^                            ::getTag() const {$/;"	f	class:llvm::object::DynRefImpl
getTag	Object/ELF.h	/^  int64_t getTag() const { return d_tag; }$/;"	f	struct:llvm::object::Elf_Dyn_Impl
getTail	ADT/ImmutableList.h	/^  ImmutableList getTail() {$/;"	f	class:llvm::ImmutableList
getTail	ADT/ImmutableList.h	/^  const ImmutableListImpl* getTail() const { return Tail; }$/;"	f	class:llvm::ImmutableListImpl
getTail	ADT/ilist.h	/^  NodeTy *getTail() { return this->ensureHead(Head); }$/;"	f	class:llvm::iplist
getTail	ADT/ilist.h	/^  const NodeTy *getTail() const { return this->ensureHead(Head); }$/;"	f	class:llvm::iplist
getTarget	Analysis/PathProfileInfo.h	/^  inline BasicBlock* getTarget() { return _target; }$/;"	f	class:llvm::ProfilePathEdge
getTarget	CodeGen/CallingConvLower.h	/^  const TargetMachine &getTarget() const { return TM; }$/;"	f	class:llvm::CCState
getTarget	CodeGen/MachineFunction.h	/^  const TargetMachine &getTarget() const { return Target; }$/;"	f	class:llvm::MachineFunction
getTarget	CodeGen/SelectionDAG.h	/^  const TargetMachine &getTarget() const { return TM; }$/;"	f	class:llvm::SelectionDAG
getTarget	MC/MCTargetAsmLexer.h	/^  const Target &getTarget() const { return TheTarget; }$/;"	f	class:llvm::MCTargetAsmLexer
getTarget	Target/TargetMachine.h	/^  const Target &getTarget() const { return TheTarget; }$/;"	f	class:llvm::TargetMachine
getTargetBlockAddress	CodeGen/SelectionDAG.h	/^  SDValue getTargetBlockAddress(const BlockAddress *BA, EVT VT,$/;"	f	class:llvm::SelectionDAG
getTargetCPU	Target/TargetMachine.h	/^  const StringRef getTargetCPU() const { return TargetCPU; }$/;"	f	class:llvm::TargetMachine
getTargetConstant	CodeGen/SelectionDAG.h	/^  SDValue getTargetConstant(const APInt &Val, EVT VT) {$/;"	f	class:llvm::SelectionDAG
getTargetConstant	CodeGen/SelectionDAG.h	/^  SDValue getTargetConstant(const ConstantInt &Val, EVT VT) {$/;"	f	class:llvm::SelectionDAG
getTargetConstant	CodeGen/SelectionDAG.h	/^  SDValue getTargetConstant(uint64_t Val, EVT VT) {$/;"	f	class:llvm::SelectionDAG
getTargetConstantFP	CodeGen/SelectionDAG.h	/^  SDValue getTargetConstantFP(const APFloat& Val, EVT VT) {$/;"	f	class:llvm::SelectionDAG
getTargetConstantFP	CodeGen/SelectionDAG.h	/^  SDValue getTargetConstantFP(const ConstantFP &Val, EVT VT) {$/;"	f	class:llvm::SelectionDAG
getTargetConstantFP	CodeGen/SelectionDAG.h	/^  SDValue getTargetConstantFP(double Val, EVT VT) {$/;"	f	class:llvm::SelectionDAG
getTargetConstantPool	CodeGen/SelectionDAG.h	/^  SDValue getTargetConstantPool(MachineConstantPoolValue *C,$/;"	f	class:llvm::SelectionDAG
getTargetConstantPool	CodeGen/SelectionDAG.h	/^  SDValue getTargetConstantPool(const Constant *C, EVT VT,$/;"	f	class:llvm::SelectionDAG
getTargetFeatureString	Target/TargetMachine.h	/^  const StringRef getTargetFeatureString() const { return TargetFS; }$/;"	f	class:llvm::TargetMachine
getTargetFlags	CodeGen/MachineOperand.h	/^  unsigned char getTargetFlags() const {$/;"	f	class:llvm::MachineOperand
getTargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char getTargetFlags() const { return TargetFlags; }$/;"	f	class:llvm::BlockAddressSDNode
getTargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char getTargetFlags() const { return TargetFlags; }$/;"	f	class:llvm::ConstantPoolSDNode
getTargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char getTargetFlags() const { return TargetFlags; }$/;"	f	class:llvm::ExternalSymbolSDNode
getTargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char getTargetFlags() const { return TargetFlags; }$/;"	f	class:llvm::GlobalAddressSDNode
getTargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char getTargetFlags() const { return TargetFlags; }$/;"	f	class:llvm::JumpTableSDNode
getTargetFlags	CodeGen/SelectionDAGNodes.h	/^  unsigned char getTargetFlags() const { return TargetFlags; }$/;"	f	class:llvm::TargetIndexSDNode
getTargetFrameIndex	CodeGen/SelectionDAG.h	/^  SDValue getTargetFrameIndex(int FI, EVT VT) {$/;"	f	class:llvm::SelectionDAG
getTargetGlobalAddress	CodeGen/SelectionDAG.h	/^  SDValue getTargetGlobalAddress(const GlobalValue *GV, DebugLoc DL, EVT VT,$/;"	f	class:llvm::SelectionDAG
getTargetJumpTable	CodeGen/SelectionDAG.h	/^  SDValue getTargetJumpTable(int JTI, EVT VT, unsigned char TargetFlags = 0) {$/;"	f	class:llvm::SelectionDAG
getTargetLibraryInfo	Analysis/AliasAnalysis.h	/^  const TargetLibraryInfo *getTargetLibraryInfo() const { return TLI; }$/;"	f	class:llvm::AliasAnalysis
getTargetLowering	CodeGen/Passes.h	/^  const TargetLowering *getTargetLowering() const {$/;"	f	class:llvm::TargetPassConfig
getTargetLowering	CodeGen/SelectionDAGISel.h	/^  const TargetLowering &getTargetLowering() { return TLI; }$/;"	f	class:llvm::SelectionDAGISel
getTargetLowering	Target/TargetMachine.h	/^  virtual const TargetLowering    *getTargetLowering() const { return 0; }$/;"	f	class:llvm::TargetMachine
getTargetLoweringInfo	CodeGen/SelectionDAG.h	/^  const TargetLowering &getTargetLoweringInfo() const { return TLI; }$/;"	f	class:llvm::SelectionDAG
getTargetMachine	Target/TargetLowering.h	/^  const TargetMachine &getTargetMachine() const { return TM; }$/;"	f	class:llvm::TargetLowering
getTargetParser	MC/MCParser/MCAsmParser.h	/^  MCTargetAsmParser &getTargetParser() const { return *TargetParser; }$/;"	f	class:llvm::MCAsmParser
getTargetTriple	MC/MCSubtargetInfo.h	/^  StringRef getTargetTriple() const {$/;"	f	class:llvm::MCSubtargetInfo
getTargetTriple	Module.h	/^  const std::string &getTargetTriple() const { return TargetTriple; }$/;"	f	class:llvm::Module
getTargetTriple	Target/TargetMachine.h	/^  const StringRef getTargetTriple() const { return TargetTriple; }$/;"	f	class:llvm::TargetMachine
getTemplateArgs	TableGen/Record.h	/^  const std::vector<Init *> &getTemplateArgs() const {$/;"	f	class:llvm::Record
getTemplateParams	DebugInfo.h	/^    DIArray getTemplateParams() const { return getFieldAs<DIArray>(13); }$/;"	f	class:llvm::DICompositeType
getTemplateParams	DebugInfo.h	/^    DIArray getTemplateParams() const { return getFieldAs<DIArray>(17); }$/;"	f	class:llvm::DISubprogram
getText	MC/SectionKind.h	/^  static SectionKind getText() { return get(Text); }$/;"	f	class:llvm::SectionKind
getTextAlignFillValue	MC/MCAsmInfo.h	/^    unsigned getTextAlignFillValue() const {$/;"	f	class:llvm::MCAsmInfo
getTextCoalSection	MC/MCObjectFileInfo.h	/^  const MCSection *getTextCoalSection() const { return TextCoalSection; }$/;"	f	class:llvm::MCObjectFileInfo
getTextSection	MC/MCObjectFileInfo.h	/^  const MCSection *getTextSection() const { return TextSection; }$/;"	f	class:llvm::MCObjectFileInfo
getTgtMemIntrinsic	Target/TargetLowering.h	/^  virtual bool getTgtMemIntrinsic(IntrinsicInfo &, const CallInst &,$/;"	f	class:llvm::TargetLowering
getThreadBSS	MC/SectionKind.h	/^  static SectionKind getThreadBSS() { return get(ThreadBSS); }$/;"	f	class:llvm::SectionKind
getThreadData	MC/SectionKind.h	/^  static SectionKind getThreadData() { return get(ThreadData); }$/;"	f	class:llvm::SectionKind
getThreadLocalMode	GlobalVariable.h	/^  ThreadLocalMode getThreadLocalMode() const {$/;"	f	class:llvm::GlobalVariable
getTimespecTime	Support/TimeValue.h	/^    void getTimespecTime( uint64_t& seconds, uint32_t& nanos ) const {$/;"	f	class:llvm::sys::TimeValue
getTimestamp	Support/PathV1.h	/^    TimeValue getTimestamp() const { return modTime; }$/;"	f	class:llvm::sys::FileStatus
getTok	MC/MCParser/MCAsmLexer.h	/^  const AsmToken &getTok() {$/;"	f	class:llvm::MCAsmLexer
getTok	MC/MCParser/MCAsmParserExtension.h	/^  const AsmToken &getTok() { return getParser().getTok(); }$/;"	f	class:llvm::MCAsmParserExtension
getTok	MC/MCTargetAsmLexer.h	/^  const AsmToken &getTok() {$/;"	f	class:llvm::MCTargetAsmLexer
getTombstoneKey	ADT/DenseMap.h	/^  static const KeyT getTombstoneKey() {$/;"	f	class:llvm::DenseMapBase
getTombstoneKey	ADT/DenseMapInfo.h	/^  static inline Pair getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/DenseMapInfo.h	/^  static inline T* getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/DenseMapInfo.h	/^  static inline char getTombstoneKey() { return ~0 - 1; }$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/DenseMapInfo.h	/^  static inline int getTombstoneKey() { return -0x7fffffff - 1; }$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/DenseMapInfo.h	/^  static inline long getTombstoneKey() { return getEmptyKey() - 1L; }$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/DenseMapInfo.h	/^  static inline long long getTombstoneKey() { return -0x7fffffffffffffffLL-1; }$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/DenseMapInfo.h	/^  static inline unsigned getTombstoneKey() { return ~0U - 1; }$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/DenseMapInfo.h	/^  static inline unsigned long getTombstoneKey() { return ~0UL - 1L; }$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/DenseMapInfo.h	/^  static inline unsigned long long getTombstoneKey() { return ~0ULL - 1ULL; }$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/ImmutableList.h	/^  static inline ImmutableList<T> getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/PointerIntPair.h	/^  static Ty getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	ADT/ValueMap.h	/^  static inline VH getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	Analysis/AliasAnalysis.h	/^  static inline AliasAnalysis::Location getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	CodeGen/MachineInstr.h	/^  static inline MachineInstr *getTombstoneKey() {$/;"	f	struct:llvm::MachineInstrExpressionTrait
getTombstoneKey	CodeGen/SelectionDAGNodes.h	/^  static inline SDValue getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	Support/DebugLoc.h	/^    static DebugLoc getTombstoneKey() { return DebugLoc::getTombstoneKey(); }$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	Support/DebugLoc.h	/^    static DebugLoc getTombstoneKey() {$/;"	f	class:llvm::DebugLoc
getTombstoneKey	Support/ValueHandle.h	/^  static inline T* getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTombstoneMarker	ADT/SmallPtrSet.h	/^  static void *getTombstoneMarker() { return reinterpret_cast<void*>(-2); }$/;"	f	class:llvm::SmallPtrSetImpl
getTombstoneVal	ADT/StringMap.h	/^  static StringMapEntryBase *getTombstoneVal() {$/;"	f	class:llvm::StringMapImpl
getTopLevelManager	PassManagers.h	/^  PMTopLevelManager *getTopLevelManager() { return TPM; }$/;"	f	class:llvm::PMDataManager
getTopLevelRegion	Analysis/RegionInfo.h	/^  Region *getTopLevelRegion() const {$/;"	f	class:llvm::RegionInfo
getTopPressure	CodeGen/MachineScheduler.h	/^  const IntervalPressure &getTopPressure() const { return TopPressure; }$/;"	f	class:llvm::ScheduleDAGMI
getTopRPTracker	CodeGen/MachineScheduler.h	/^  const RegPressureTracker &getTopRPTracker() const { return TopRPTracker; }$/;"	f	class:llvm::ScheduleDAGMI
getTransientStackAlignment	Target/TargetFrameLowering.h	/^  unsigned getTransientStackAlignment() const {$/;"	f	class:llvm::TargetFrameLowering
getTreeFactory	ADT/ImmutableMap.h	/^    typename TreeTy::Factory *getTreeFactory() const {$/;"	f	class:llvm::ImmutableMap::Factory
getTreeFactory	ADT/ImmutableSet.h	/^    typename TreeTy::Factory *getTreeFactory() const {$/;"	f	class:llvm::ImmutableSet::Factory
getTriple	ADT/Triple.h	/^  const std::string &getTriple() const { return Data; }$/;"	f	class:llvm::Triple
getTripleMatchQuality	Support/TargetRegistry.h	/^    static unsigned getTripleMatchQuality(const std::string &TT) {$/;"	f	struct:llvm::RegisterTarget
getTrue	IRBuilder.h	/^  ConstantInt *getTrue() {$/;"	f	class:llvm::IRBuilderBase
getTrueValue	Instructions.h	/^  Value *getTrueValue() { return Op<1>(); }$/;"	f	class:llvm::SelectInst
getTrueValue	Instructions.h	/^  const Value *getTrueValue() const { return Op<1>(); }$/;"	f	class:llvm::SelectInst
getTruncStoreAction	Target/TargetLowering.h	/^  LegalizeAction getTruncStoreAction(EVT ValVT, EVT MemVT) const {$/;"	f	class:llvm::TargetLowering
getTruncatedElementVectorType	DerivedTypes.h	/^  static VectorType *getTruncatedElementVectorType(VectorType *VTy) {$/;"	f	class:llvm::VectorType
getType	Analysis/ScalarEvolutionExpressions.h	/^    Type *getType() const { return Ty; }$/;"	f	class:llvm::SCEVCastExpr
getType	Analysis/ScalarEvolutionExpressions.h	/^    Type *getType() const { return V->getType(); }$/;"	f	class:llvm::SCEVConstant
getType	Analysis/ScalarEvolutionExpressions.h	/^    Type *getType() const { return getOperand(0)->getType(); }$/;"	f	class:llvm::SCEVNAryExpr
getType	Analysis/ScalarEvolutionExpressions.h	/^    Type *getType() const { return getValPtr()->getType(); }$/;"	f	class:llvm::SCEVUnknown
getType	Analysis/ScalarEvolutionExpressions.h	/^    Type *getType() const {$/;"	f	class:llvm::SCEVAddExpr
getType	Analysis/ScalarEvolutionExpressions.h	/^    Type *getType() const {$/;"	f	class:llvm::SCEVUDivExpr
getType	CodeGen/MachineConstantPool.h	/^  Type *getType() const { return Ty; }$/;"	f	class:llvm::MachineConstantPoolValue
getType	CodeGen/MachineOperand.h	/^  MachineOperandType getType() const { return (MachineOperandType)OpKind; }$/;"	f	class:llvm::MachineOperand
getType	Constants.h	/^  inline ArrayType *getType() const {$/;"	f	class:llvm::ConstantArray
getType	Constants.h	/^  inline ArrayType *getType() const {$/;"	f	class:llvm::ConstantDataArray
getType	Constants.h	/^  inline IntegerType *getType() const {$/;"	f	class:llvm::ConstantInt
getType	Constants.h	/^  inline PointerType *getType() const {$/;"	f	class:llvm::ConstantPointerNull
getType	Constants.h	/^  inline SequentialType *getType() const {$/;"	f	class:llvm::ConstantDataSequential
getType	Constants.h	/^  inline StructType *getType() const {$/;"	f	class:llvm::ConstantStruct
getType	Constants.h	/^  inline VectorType *getType() const {$/;"	f	class:llvm::ConstantDataVector
getType	Constants.h	/^  inline VectorType *getType() const {$/;"	f	class:llvm::ConstantVector
getType	DebugInfo.h	/^    DICompositeType getType() const { return getFieldAs<DICompositeType>(8); }$/;"	f	class:llvm::DISubprogram
getType	DebugInfo.h	/^    DIType getType() const              { return getFieldAs<DIType>(5); }$/;"	f	class:llvm::DIVariable
getType	DebugInfo.h	/^    DIType getType() const              { return getFieldAs<DIType>(8); }$/;"	f	class:llvm::DIGlobalVariable
getType	DebugInfo.h	/^    DIType getType() const           { return getFieldAs<DIType>(3); }$/;"	f	class:llvm::DITemplateTypeParameter
getType	DebugInfo.h	/^    DIType getType() const           { return getFieldAs<DIType>(3); }$/;"	f	class:llvm::DITemplateValueParameter
getType	DebugInfo.h	/^    DIType getType() const { return getFieldAs<DIType>(7); }$/;"	f	class:llvm::DIObjCProperty
getType	GlobalValue.h	/^  inline PointerType *getType() const {$/;"	f	class:llvm::GlobalValue
getType	InlineAsm.h	/^  PointerType *getType() const {$/;"	f	class:llvm::InlineAsm
getType	Instructions.h	/^  PointerType *getType() const {$/;"	f	class:llvm::AllocaInst
getType	Instructions.h	/^  PointerType *getType() const {$/;"	f	class:llvm::GetElementPtrInst
getType	Instructions.h	/^  VectorType *getType() const {$/;"	f	class:llvm::InsertElementInst
getType	Instructions.h	/^  VectorType *getType() const {$/;"	f	class:llvm::ShuffleVectorInst
getType	MC/MCSectionELF.h	/^  unsigned getType() const { return Type; }$/;"	f	class:llvm::MCSectionELF
getType	MC/MCSectionMachO.h	/^  unsigned getType() const { return TypeAndAttributes & SECTION_TYPE; }$/;"	f	class:llvm::MCSectionMachO
getType	Object/Binary.h	/^  unsigned int getType() const { return TypeID; }$/;"	f	class:llvm::object::Binary
getType	Object/ELF.h	/^  unsigned char getType() const { return (unsigned char) (r_info & 0x0ff); }$/;"	f	struct:llvm::object::Elf_Rel_Impl
getType	Object/ELF.h	/^  unsigned char getType() const { return st_info & 0x0f; }$/;"	f	struct:llvm::object::Elf_Sym_Impl
getType	Object/ELF.h	/^  unsigned char getType() const {$/;"	f	struct:llvm::object::Elf_Rel_Impl
getType	Object/ObjectFile.h	/^inline error_code RelocationRef::getType(uint64_t &Result) const {$/;"	f	class:llvm::object::RelocationRef
getType	Object/ObjectFile.h	/^inline error_code SymbolRef::getType(SymbolRef::Type &Result) const {$/;"	f	class:llvm::object::SymbolRef
getType	Support/COFF.h	/^    ImportType getType() const {$/;"	f	struct:llvm::COFF::ImportHeader
getType	Support/CallSite.h	/^  Type *getType() const { return (*this)->getType(); }$/;"	f	class:llvm::CallSiteBase
getType	Support/ELF.h	/^  unsigned char getType() const { return (unsigned char) (r_info & 0x0ff); }$/;"	f	struct:llvm::ELF::Elf32_Rel
getType	Support/ELF.h	/^  unsigned char getType() const { return (unsigned char) (r_info & 0x0ff); }$/;"	f	struct:llvm::ELF::Elf32_Rela
getType	Support/ELF.h	/^  unsigned char getType() const { return st_info & 0x0f; }$/;"	f	struct:llvm::ELF::Elf32_Sym
getType	Support/ELF.h	/^  unsigned char getType() const { return st_info & 0x0f; }$/;"	f	struct:llvm::ELF::Elf64_Sym
getType	Support/ELF.h	/^  unsigned char getType() const {$/;"	f	struct:llvm::ELF::Elf64_Rel
getType	Support/ELF.h	/^  unsigned char getType() const {$/;"	f	struct:llvm::ELF::Elf64_Rela
getType	Support/YAMLParser.h	/^  unsigned int getType() const { return TypeID; }$/;"	f	class:llvm::yaml::Node
getType	TableGen/Record.h	/^  RecTy *getType() const { return Ty; }$/;"	f	class:llvm::RecordVal
getType	TableGen/Record.h	/^  RecTy *getType() const { return Ty; }$/;"	f	class:llvm::TypedInit
getType	Value.h	/^  Type *getType() const { return VTy; }$/;"	f	class:llvm::Value
getTypeAction	Target/TargetLowering.h	/^    LegalizeTypeAction getTypeAction(MVT VT) const {$/;"	f	class:llvm::TargetLowering::ValueTypeActionImpl
getTypeAction	Target/TargetLowering.h	/^  LegalizeTypeAction getTypeAction(LLVMContext &Context, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getTypeAction	Target/TargetLowering.h	/^  LegalizeTypeAction getTypeAction(MVT VT) const {$/;"	f	class:llvm::TargetLowering
getTypeAllocSize	DataLayout.h	/^  uint64_t getTypeAllocSize(Type* Ty) const {$/;"	f	class:llvm::DataLayout
getTypeAllocSizeInBits	DataLayout.h	/^  uint64_t getTypeAllocSizeInBits(Type* Ty) const {$/;"	f	class:llvm::DataLayout
getTypeAndAttributes	MC/MCSectionMachO.h	/^  unsigned getTypeAndAttributes() const { return TypeAndAttributes; }$/;"	f	class:llvm::MCSectionMachO
getTypeArray	DebugInfo.h	/^    DIArray getTypeArray() const { return getFieldAs<DIArray>(10); }$/;"	f	class:llvm::DICompositeType
getTypeConversion	Target/TargetLowering.h	/^  getTypeConversion(LLVMContext &Context, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getTypeDerivedFrom	DebugInfo.h	/^    DIType getTypeDerivedFrom() const { return getFieldAs<DIType>(9); }$/;"	f	class:llvm::DIDerivedType
getTypeForExtArgOrReturn	Target/TargetLowering.h	/^  virtual EVT getTypeForExtArgOrReturn(LLVMContext &Context, EVT VT,$/;"	f	class:llvm::TargetLowering
getTypeID	Type.h	/^  TypeID getTypeID() const { return (TypeID)(IDAndSubclassData & 0xFF); }$/;"	f	class:llvm::Type
getTypeInfo	PassSupport.h	/^  const void *getTypeInfo() const { return PassID; }$/;"	f	class:llvm::PassInfo
getTypeInfos	CodeGen/MachineModuleInfo.h	/^  const std::vector<const GlobalVariable *> &getTypeInfos() const {$/;"	f	class:llvm::MachineModuleInfo
getTypeName	Object/ObjectFile.h	/^inline error_code RelocationRef::getTypeName(SmallVectorImpl<char> &Result)$/;"	f	class:llvm::object::RelocationRef
getTypeStoreSize	DataLayout.h	/^  uint64_t getTypeStoreSize(Type *Ty) const {$/;"	f	class:llvm::DataLayout
getTypeStoreSizeInBits	DataLayout.h	/^  uint64_t getTypeStoreSizeInBits(Type *Ty) const {$/;"	f	class:llvm::DataLayout
getTypeToExpandTo	Target/TargetLowering.h	/^  EVT getTypeToExpandTo(LLVMContext &Context, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getTypeToPromoteTo	Target/TargetLowering.h	/^  EVT getTypeToPromoteTo(unsigned Op, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getTypeToTransformTo	Target/TargetLowering.h	/^  EVT getTypeToTransformTo(LLVMContext &Context, EVT VT) const {$/;"	f	class:llvm::TargetLowering
getTypes	Analysis/FindUsedTypes.h	/^  const SetVector<Type *> &getTypes() const { return UsedTypes; }$/;"	f	class:llvm::FindUsedTypes
getUNDEF	CodeGen/SelectionDAG.h	/^  SDValue getUNDEF(EVT VT) {$/;"	f	class:llvm::SelectionDAG
getUStringSection	MC/MCObjectFileInfo.h	/^  const MCSection *getUStringSection() const { return UStringSection; }$/;"	f	class:llvm::MCObjectFileInfo
getUndefRegState	CodeGen/MachineInstrBuilder.h	/^inline unsigned getUndefRegState(bool B) {$/;"	f	namespace:llvm
getUndefVal	Analysis/SparsePropagation.h	/^  LatticeVal getUndefVal()       const { return UndefVal; }$/;"	f	class:llvm::AbstractLatticeFunction
getUniqueID	Support/PathV1.h	/^    uint64_t getUniqueID() const { return uniqueID; }$/;"	f	class:llvm::sys::FileStatus
getUniquePredecessor	BasicBlock.h	/^  const BasicBlock *getUniquePredecessor() const {$/;"	f	class:llvm::BasicBlock
getUniqueSymbolID	MC/MCContext.h	/^    unsigned getUniqueSymbolID() { return NextUniqueID++; }$/;"	f	class:llvm::MCContext
getUnits	MC/MCInstrItineraries.h	/^  unsigned getUnits() const {$/;"	f	struct:llvm::InstrStage
getUnknown	Analysis/MemoryDependenceAnalysis.h	/^    static MemDepResult getUnknown() {$/;"	f	class:llvm::MemDepResult
getUnknownInst	Analysis/AliasSetTracker.h	/^  Instruction *getUnknownInst(unsigned i) const {$/;"	f	class:llvm::AliasSet
getUnorderedFlavor	CodeGen/ISDOpcodes.h	/^  inline unsigned getUnorderedFlavor(CondCode Cond) {$/;"	f	namespace:llvm::ISD
getUnqual	DerivedTypes.h	/^  static PointerType *getUnqual(Type *ElementType) {$/;"	f	class:llvm::PointerType
getUnreachableBlock	Transforms/Utils/UnifyFunctionExitNodes.h	/^  BasicBlock *getUnreachableBlock() const { return UnreachableBlock; }$/;"	f	struct:llvm::UnifyFunctionExitNodes
getUnsignedField	DebugInfo.h	/^    unsigned getUnsignedField(unsigned Elt) const {$/;"	f	class:llvm::DIDescriptor
getUnsignedPredicate	Instructions.h	/^  Predicate getUnsignedPredicate() const {$/;"	f	class:llvm::ICmpInst
getUntrackedVal	Analysis/SparsePropagation.h	/^  LatticeVal getUntrackedVal()   const { return UntrackedVal; }$/;"	f	class:llvm::AbstractLatticeFunction
getUnwindBlock	Transforms/Utils/UnifyFunctionExitNodes.h	/^  BasicBlock *getUnwindBlock() const { return UnwindBlock; }$/;"	f	struct:llvm::UnifyFunctionExitNodes
getUnwindDest	Instructions.h	/^  BasicBlock *getUnwindDest() const {$/;"	f	class:llvm::InvokeInst
getUpper	Support/ConstantRange.h	/^  const APInt &getUpper() const { return Upper; }$/;"	f	class:llvm::ConstantRange
getUse	CodeGen/SelectionDAGNodes.h	/^    SDUse &getUse() const { return *Op; }$/;"	f	class:llvm::SDNode::use_iterator
getUse	Support/CFG.h	/^  Use &getUse() const {$/;"	f	class:llvm::PredIterator
getUse	Use.h	/^  Use &getUse() const { return *U; }$/;"	f	class:llvm::value_use_iterator
getUseLocalStackAllocationBlock	CodeGen/MachineFrameInfo.h	/^  bool getUseLocalStackAllocationBlock() {return UseLocalStackAllocationBlock;}$/;"	f	class:llvm::MachineFrameInfo
getUser	Analysis/IVUsers.h	/^  Instruction *getUser() const {$/;"	f	class:llvm::IVStrideUse
getUser	Bitcode/Archive.h	/^    unsigned getUser() const             { return info.getUser(); }$/;"	f	class:llvm::ArchiveMember
getUser	CodeGen/SelectionDAGNodes.h	/^  SDNode *getUser() { return User; }$/;"	f	class:llvm::SDUse
getUser	Support/PathV1.h	/^    uint32_t getUser() const { return user; }$/;"	f	class:llvm::sys::FileStatus
getUserTime	Support/Timer.h	/^  double getUserTime() const { return UserTime; }$/;"	f	class:llvm::TimeRecord
getVNInfoAllocator	CodeGen/LiveIntervalAnalysis.h	/^    VNInfo::Allocator& getVNInfoAllocator() { return VNInfoAllocator; }$/;"	f	class:llvm::LiveIntervals
getVNInfoAllocator	CodeGen/LiveStackAnalysis.h	/^    VNInfo::Allocator& getVNInfoAllocator() { return VNInfoAllocator; }$/;"	f	class:llvm::LiveStacks
getVNInfoAt	CodeGen/LiveInterval.h	/^    VNInfo *getVNInfoAt(SlotIndex Idx) const {$/;"	f	class:llvm::LiveInterval
getVNInfoBefore	CodeGen/LiveInterval.h	/^    VNInfo *getVNInfoBefore(SlotIndex Idx) const {$/;"	f	class:llvm::LiveInterval
getVT	CodeGen/SelectionDAGNodes.h	/^  EVT getVT() const { return ValueType; }$/;"	f	class:llvm::VTSDNode
getVTList	CodeGen/SelectionDAGNodes.h	/^  SDVTList getVTList() const {$/;"	f	class:llvm::SDNode
getVal	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getVal() const { return getOperand(2); }$/;"	f	class:llvm::AtomicSDNode
getVal	Object/ELF.h	/^                            ::getVal() const {$/;"	f	class:llvm::object::DynRefImpl
getVal	Object/ELF.h	/^  uint64_t getVal() const { return d_un.d_val; }$/;"	f	struct:llvm::object::Elf_Dyn_Impl
getValIndex	ADT/SparseSet.h	/^  static unsigned getValIndex(const ValueT &Val) {$/;"	f	struct:llvm::SparseSetValTraits
getValNo	CodeGen/CallingConvLower.h	/^  unsigned getValNo() const { return ValNo; }$/;"	f	class:llvm::CCValAssign
getValNumInfo	CodeGen/LiveInterval.h	/^    inline VNInfo *getValNumInfo(unsigned ValNo) {$/;"	f	class:llvm::LiveInterval
getValNumInfo	CodeGen/LiveInterval.h	/^    inline const VNInfo *getValNumInfo(unsigned ValNo) const {$/;"	f	class:llvm::LiveInterval
getValOperand	Instructions.h	/^  Value *getValOperand() { return getOperand(1); }$/;"	f	class:llvm::AtomicRMWInst
getValOperand	Instructions.h	/^  const Value *getValOperand() const { return getOperand(1); }$/;"	f	class:llvm::AtomicRMWInst
getValPtr	Support/ValueHandle.h	/^  Value *getValPtr() const { return VP.getPointer(); }$/;"	f	class:llvm::ValueHandleBase
getValPtr	Support/ValueHandle.h	/^  ValueTy *getValPtr() const {$/;"	f	class:llvm::AssertingVH
getValPtr	Support/ValueHandle.h	/^  ValueTy *getValPtr() const {$/;"	f	class:llvm::TrackingVH
getValPtrInt	Support/ValueHandle.h	/^  unsigned getValPtrInt() const { return VP.getInt(); }$/;"	f	class:llvm::ValueHandleBase
getValVT	CodeGen/CallingConvLower.h	/^  MVT getValVT() const { return ValVT; }$/;"	f	class:llvm::CCValAssign
getValue	ADT/FoldingSet.h	/^  T &getValue() { return data; }$/;"	f	class:llvm::FoldingSetNodeWrapper
getValue	ADT/FoldingSet.h	/^  const T &getValue() const { return data; }$/;"	f	class:llvm::FoldingSetNodeWrapper
getValue	ADT/ImmutableSet.h	/^  const value_type& getValue() const { return value; }$/;"	f	class:llvm::ImutAVLTree
getValue	ADT/ImmutableSet.h	/^  value_type_ref  getValue(TreeTy* T) const { return T->value; }$/;"	f	class:llvm::ImutAVLFactory
getValue	ADT/Optional.h	/^  const T& getValue() const { assert(hasVal); return x; }$/;"	f	class:llvm::Optional
getValue	ADT/PackedVector.h	/^  static T getValue(const BitVectorTy &Bits, unsigned Idx) {$/;"	f	class:llvm::PackedVectorBase
getValue	ADT/ScopedHashTable.h	/^  V &getValue() { return Val; }$/;"	f	class:llvm::ScopedHashTableVal
getValue	ADT/ScopedHashTable.h	/^  const V &getValue() const { return Val; }$/;"	f	class:llvm::ScopedHashTableVal
getValue	ADT/Statistic.h	/^  llvm::sys::cas_flag getValue() const { return Value; }$/;"	f	class:llvm::Statistic
getValue	ADT/StringMap.h	/^  ValueTy &getValue() { return second; }$/;"	f	class:llvm::StringMapEntry
getValue	ADT/StringMap.h	/^  const ValueTy &getValue() const { return second; }$/;"	f	class:llvm::StringMapEntry
getValue	Analysis/AliasSetTracker.h	/^    Value *getValue() const { return Val; }$/;"	f	class:llvm::AliasSet::PointerRec
getValue	Analysis/ScalarEvolutionExpressions.h	/^    ConstantInt *getValue() const { return V; }$/;"	f	class:llvm::SCEVConstant
getValue	Analysis/ScalarEvolutionExpressions.h	/^    Value *getValue() const { return getValPtr(); }$/;"	f	class:llvm::SCEVUnknown
getValue	CodeGen/MachineMemOperand.h	/^  const Value *getValue() const { return PtrInfo.V; }$/;"	f	class:llvm::MachineMemOperand
getValue	CodeGen/SelectionDAGNodes.h	/^  SDValue getValue(unsigned R) const {$/;"	f	class:llvm::SDValue
getValue	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getValue() const { return Op; }$/;"	f	class:llvm::HandleSDNode
getValue	CodeGen/SelectionDAGNodes.h	/^  const SDValue &getValue() const { return getOperand(1); }$/;"	f	class:llvm::StoreSDNode
getValue	CodeGen/SelectionDAGNodes.h	/^  const Value *getValue() const { return V; }$/;"	f	class:llvm::SrcValueSDNode
getValue	Constants.h	/^  inline const APInt &getValue() const {$/;"	f	class:llvm::ConstantInt
getValue	DebugInfo.h	/^    uint64_t getValue() const         { return getUInt64Field(4); }$/;"	f	class:llvm::DITemplateValueParameter
getValue	Instructions.h	/^  Value *getValue() const { return Op<0>(); }$/;"	f	class:llvm::ResumeInst
getValue	IntrinsicInst.h	/^    Value *getValue() const { return const_cast<Value*>(getArgOperand(1)); }$/;"	f	class:llvm::MemSetInst
getValue	MC/MCAssembler.h	/^  const MCExpr &getValue() const { return *Value; }$/;"	f	class:llvm::MCLEBFragment
getValue	MC/MCAssembler.h	/^  int64_t getValue() const { return Value; }$/;"	f	class:llvm::MCAlignFragment
getValue	MC/MCAssembler.h	/^  int64_t getValue() const { return Value; }$/;"	f	class:llvm::MCFillFragment
getValue	MC/MCAssembler.h	/^  uint8_t getValue() const { return Value; }$/;"	f	class:llvm::MCOrgFragment
getValue	MC/MCExpr.h	/^  int64_t getValue() const { return Value; }$/;"	f	class:llvm::MCConstantExpr
getValue	MC/MCFixup.h	/^  const MCExpr *getValue() const { return Value; }$/;"	f	class:llvm::MCFixup
getValue	Support/CommandLine.h	/^  DataType &getValue() { check(); return *Location; }$/;"	f	class:llvm::cl::opt_storage
getValue	Support/CommandLine.h	/^  DataType &getValue() { return *this; }$/;"	f	class:llvm::cl::opt_storage
getValue	Support/CommandLine.h	/^  DataType &getValue() { return Value; }$/;"	f	class:llvm::cl::opt_storage
getValue	Support/CommandLine.h	/^  DataType getValue() const { return Value; }$/;"	f	class:llvm::cl::opt_storage
getValue	Support/CommandLine.h	/^  const DataType &getValue() const { check(); return *Location; }$/;"	f	class:llvm::cl::opt_storage
getValue	Support/CommandLine.h	/^  const DataType &getValue() const { llvm_unreachable("no default value"); }$/;"	f	struct:llvm::cl::OptionValueBase
getValue	Support/CommandLine.h	/^  const DataType &getValue() const { return *this; }$/;"	f	class:llvm::cl::opt_storage
getValue	Support/CommandLine.h	/^  const DataType &getValue() const {$/;"	f	class:llvm::cl::OptionValueCopy
getValue	TableGen/Record.h	/^  Init *getValue() const { return Value; }$/;"	f	class:llvm::RecordVal
getValue	TableGen/Record.h	/^  RecordVal *getValue(StringRef Name) {$/;"	f	class:llvm::Record
getValue	TableGen/Record.h	/^  RecordVal *getValue(const Init *Name) {$/;"	f	class:llvm::Record
getValue	TableGen/Record.h	/^  bool getValue() const { return Value; }$/;"	f	class:llvm::BitInit
getValue	TableGen/Record.h	/^  const RecordVal *getValue(StringRef Name) const {$/;"	f	class:llvm::Record
getValue	TableGen/Record.h	/^  const RecordVal *getValue(const Init *Name) const {$/;"	f	class:llvm::Record
getValue	TableGen/Record.h	/^  const std::string &getValue() const { return Value; }$/;"	f	class:llvm::StringInit
getValue	TableGen/Record.h	/^  int64_t getValue() const { return Value; }$/;"	f	class:llvm::IntInit
getValueAPF	CodeGen/SelectionDAGNodes.h	/^  const APFloat& getValueAPF() const { return Value->getValueAPF(); }$/;"	f	class:llvm::ConstantFPSDNode
getValueAPF	Constants.h	/^  inline const APFloat &getValueAPF() const { return Val; }$/;"	f	class:llvm::ConstantFP
getValueExpectedFlag	Support/CommandLine.h	/^  inline enum ValueExpected getValueExpectedFlag() const {$/;"	f	class:llvm::cl::Option
getValueExpectedFlagDefault	Support/CommandLine.h	/^  enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::basic_parser_impl
getValueExpectedFlagDefault	Support/CommandLine.h	/^  enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::generic_parser_base
getValueExpectedFlagDefault	Support/CommandLine.h	/^  enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::parser
getValueExpectedFlagDefault	Support/CommandLine.h	/^  virtual enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::Option
getValueExpectedFlagDefault	Support/CommandLine.h	/^  virtual enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::bits
getValueExpectedFlagDefault	Support/CommandLine.h	/^  virtual enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::list
getValueExpectedFlagDefault	Support/CommandLine.h	/^  virtual enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::opt
getValueID	Value.h	/^  unsigned getValueID() const {$/;"	f	class:llvm::Value
getValueName	Support/CommandLine.h	/^  virtual const char *getValueName() const { return "char"; }$/;"	f	class:llvm::cl::parser
getValueName	Support/CommandLine.h	/^  virtual const char *getValueName() const { return "int"; }$/;"	f	class:llvm::cl::parser
getValueName	Support/CommandLine.h	/^  virtual const char *getValueName() const { return "number"; }$/;"	f	class:llvm::cl::parser
getValueName	Support/CommandLine.h	/^  virtual const char *getValueName() const { return "string"; }$/;"	f	class:llvm::cl::parser
getValueName	Support/CommandLine.h	/^  virtual const char *getValueName() const { return "uint"; }$/;"	f	class:llvm::cl::parser
getValueName	Support/CommandLine.h	/^  virtual const char *getValueName() const { return "value"; }$/;"	f	class:llvm::cl::basic_parser_impl
getValueName	Support/CommandLine.h	/^  virtual const char *getValueName() const { return 0; }$/;"	f	class:llvm::cl::parser
getValueName	Value.h	/^  ValueName *getValueName() const { return Name; }$/;"	f	class:llvm::Value
getValueOperand	Instructions.h	/^  Value *getValueOperand() { return getOperand(0); }$/;"	f	class:llvm::StoreInst
getValueOperand	Instructions.h	/^  const Value *getValueOperand() const { return getOperand(0); }$/;"	f	class:llvm::StoreInst
getValueSize	MC/MCAssembler.h	/^  unsigned getValueSize() const { return ValueSize; }$/;"	f	class:llvm::MCAlignFragment
getValueSize	MC/MCAssembler.h	/^  unsigned getValueSize() const { return ValueSize; }$/;"	f	class:llvm::MCFillFragment
getValueSizeInBits	CodeGen/SelectionDAGNodes.h	/^  unsigned getValueSizeInBits() const {$/;"	f	class:llvm::SDValue
getValueSizeInBits	CodeGen/SelectionDAGNodes.h	/^  unsigned getValueSizeInBits(unsigned ResNo) const {$/;"	f	class:llvm::SDNode
getValueString	Object/ObjectFile.h	/^inline error_code RelocationRef::getValueString(SmallVectorImpl<char> &Result)$/;"	f	class:llvm::object::RelocationRef
getValueSymbolTable	Function.h	/^  inline       ValueSymbolTable &getValueSymbolTable()       { return *SymTab; }$/;"	f	class:llvm::Function
getValueSymbolTable	Function.h	/^  inline const ValueSymbolTable &getValueSymbolTable() const { return *SymTab; }$/;"	f	class:llvm::Function
getValueSymbolTable	Module.h	/^  ValueSymbolTable       &getValueSymbolTable()       { return *ValSymTab; }$/;"	f	class:llvm::Module
getValueSymbolTable	Module.h	/^  const ValueSymbolTable &getValueSymbolTable() const { return *ValSymTab; }$/;"	f	class:llvm::Module
getValueType	CodeGen/SelectionDAGNodes.h	/^  EVT getValueType() const { return Val.getValueType(); }$/;"	f	class:llvm::SDUse
getValueType	CodeGen/SelectionDAGNodes.h	/^  EVT getValueType(unsigned ResNo) const {$/;"	f	class:llvm::SDNode
getValueType	CodeGen/SelectionDAGNodes.h	/^inline EVT SDValue::getValueType() const {$/;"	f	class:llvm::SDValue
getValueType	Target/TargetLowering.h	/^  EVT getValueType(Type *Ty, bool AllowUnknown = false) const {$/;"	f	class:llvm::TargetLowering
getValueTypeActions	Target/TargetLowering.h	/^  const ValueTypeActionImpl &getValueTypeActions() const {$/;"	f	class:llvm::TargetLowering
getValues	MC/MCDwarf.h	/^    const StringRef getValues() const {$/;"	f	class:llvm::MCCFIInstruction
getValues	TableGen/Record.h	/^  ArrayRef<Init*> getValues() const { return Values; }$/;"	f	class:llvm::ListInit
getValues	TableGen/Record.h	/^  const std::vector<RecordVal> &getValues() const { return Values; }$/;"	f	class:llvm::Record
getVariable	IntrinsicInst.h	/^    MDNode *getVariable() const { return cast<MDNode>(getArgOperand(1)); }$/;"	f	class:llvm::DbgDeclareInst
getVariable	IntrinsicInst.h	/^    MDNode *getVariable() const { return cast<MDNode>(getArgOperand(2)); }$/;"	f	class:llvm::DbgValueInst
getVariable	TableGen/Record.h	/^  TypedInit *getVariable() const { return TI; }$/;"	f	class:llvm::VarListElementInit
getVariableDbgInfo	CodeGen/MachineModuleInfo.h	/^  VariableDbgInfoMapTy &getVariableDbgInfo() { return VariableDbgInfo; }$/;"	f	class:llvm::MachineModuleInfo
getVariableValue	MC/MCSymbol.h	/^    const MCExpr *getVariableValue() const {$/;"	f	class:llvm::MCSymbol
getVariant	MC/MCSection.h	/^    SectionVariant getVariant() const { return Variant; }$/;"	f	class:llvm::MCSection
getVectorElementType	CodeGen/ValueTypes.h	/^    EVT getVectorElementType() const {$/;"	f	struct:llvm::EVT
getVectorElementType	CodeGen/ValueTypes.h	/^    MVT getVectorElementType() const {$/;"	f	class:llvm::MVT
getVectorElementType	Type.h	/^  Type *getVectorElementType() const { return getSequentialElementType(); }$/;"	f	class:llvm::Type
getVectorNumElements	CodeGen/ValueTypes.h	/^    unsigned getVectorNumElements() const {$/;"	f	class:llvm::MVT
getVectorNumElements	CodeGen/ValueTypes.h	/^    unsigned getVectorNumElements() const {$/;"	f	struct:llvm::EVT
getVectorOperand	Instructions.h	/^  Value *getVectorOperand() { return Op<0>(); }$/;"	f	class:llvm::ExtractElementInst
getVectorOperand	Instructions.h	/^  const Value *getVectorOperand() const { return Op<0>(); }$/;"	f	class:llvm::ExtractElementInst
getVectorOperandType	Instructions.h	/^  VectorType *getVectorOperandType() const {$/;"	f	class:llvm::ExtractElementInst
getVectorTargetTransformInfo	Target/TargetMachine.h	/^  getVectorTargetTransformInfo() const { return 0; }$/;"	f	class:llvm::TargetMachine
getVectorTargetTransformInfo	TargetTransformInfo.h	/^  const VectorTargetTransformInfo* getVectorTargetTransformInfo() {$/;"	f	class:llvm::TargetTransformInfo
getVectorVT	CodeGen/ValueTypes.h	/^    static EVT getVectorVT(LLVMContext &Context, EVT VT, unsigned NumElements) {$/;"	f	struct:llvm::EVT
getVectorVT	CodeGen/ValueTypes.h	/^    static MVT getVectorVT(MVT VT, unsigned NumElements) {$/;"	f	class:llvm::MVT
getVendor	ADT/Triple.h	/^  VendorType getVendor() const { return Vendor; }$/;"	f	class:llvm::Triple
getVerdef	Object/ELF.h	/^    const Elf_Verdef *getVerdef() const {$/;"	f	class:llvm::object::ELFObjectFile::VersionMapEntry
getVernaux	Object/ELF.h	/^    const Elf_Vernaux *getVernaux() const {$/;"	f	class:llvm::object::ELFObjectFile::VersionMapEntry
getVersion	DebugInfo.h	/^    unsigned getVersion() const {$/;"	f	class:llvm::DIDescriptor
getVirtualIndex	DebugInfo.h	/^    unsigned getVirtualIndex() const { return getUnsignedField(12); }$/;"	f	class:llvm::DISubprogram
getVirtuality	DebugInfo.h	/^    unsigned getVirtuality() const { return getUnsignedField(11); }$/;"	f	class:llvm::DISubprogram
getVisibility	GlobalValue.h	/^  VisibilityTypes getVisibility() const { return VisibilityTypes(Visibility); }$/;"	f	class:llvm::GlobalValue
getVisitState	ADT/ImmutableSet.h	/^  uintptr_t getVisitState() const {$/;"	f	class:llvm::ImutAVLTreeGenericIterator
getVoidTy	IRBuilder.h	/^  Type *getVoidTy() {$/;"	f	class:llvm::IRBuilderBase
getVolatileCst	IntrinsicInst.h	/^    ConstantInt *getVolatileCst() const {$/;"	f	class:llvm::MemIntrinsic
getW64UnwindInfo	MC/MCStreamer.h	/^    MCWin64EHUnwindInfo &getW64UnwindInfo(unsigned i) {$/;"	f	class:llvm::MCStreamer
getWallTime	Support/Timer.h	/^  double getWallTime() const { return WallTime; }$/;"	f	class:llvm::TimeRecord
getWeakDefDirective	MC/MCAsmInfo.h	/^    const char *getWeakDefDirective() const { return WeakDefDirective; }$/;"	f	class:llvm::MCAsmInfo
getWeakLinkage	GlobalValue.h	/^  static LinkageTypes getWeakLinkage(bool ODR) {$/;"	f	class:llvm::GlobalValue
getWeakRefDirective	MC/MCAsmInfo.h	/^    const char *getWeakRefDirective() const { return WeakRefDirective; }$/;"	f	class:llvm::MCAsmInfo
getWithNewPtr	Analysis/AliasAnalysis.h	/^    Location getWithNewPtr(const Value *NewPtr) const {$/;"	f	struct:llvm::AliasAnalysis::Location
getWithNewSize	Analysis/AliasAnalysis.h	/^    Location getWithNewSize(uint64_t NewSize) const {$/;"	f	struct:llvm::AliasAnalysis::Location
getWithOffset	CodeGen/MachineMemOperand.h	/^  MachinePointerInfo getWithOffset(int64_t O) const {$/;"	f	struct:llvm::MachinePointerInfo
getWithOperands	Constants.h	/^  Constant *getWithOperands(ArrayRef<Constant*> Ops) const {$/;"	f	class:llvm::ConstantExpr
getWithoutTBAATag	Analysis/AliasAnalysis.h	/^    Location getWithoutTBAATag() const {$/;"	f	struct:llvm::AliasAnalysis::Location
getWord	ADT/APInt.h	/^  uint64_t getWord(unsigned bitPosition) const {$/;"	f	class:llvm::APInt
getWord	Bitcode/BitstreamReader.h	/^  uint32_t getWord(size_t pos) {$/;"	f	class:llvm::BitstreamCursor
getWriteLatencyEntry	MC/MCSubtargetInfo.h	/^  const MCWriteLatencyEntry *getWriteLatencyEntry(const MCSchedClassDesc *SC,$/;"	f	class:llvm::MCSubtargetInfo
getWriteProcResBegin	MC/MCSubtargetInfo.h	/^  const MCWriteProcResEntry *getWriteProcResBegin($/;"	f	class:llvm::MCSubtargetInfo
getWriteProcResEnd	MC/MCSubtargetInfo.h	/^  const MCWriteProcResEntry *getWriteProcResEnd($/;"	f	class:llvm::MCSubtargetInfo
getWriter	MC/MCAssembler.h	/^  MCObjectWriter &getWriter() const { return Writer; }$/;"	f	class:llvm::MCAssembler
getXDataSection	MC/MCObjectFileInfo.h	/^  const MCSection *getXDataSection() const { return XDataSection; }$/;"	f	class:llvm::MCObjectFileInfo
getZExtValue	ADT/APInt.h	/^  uint64_t getZExtValue() const {$/;"	f	class:llvm::APInt
getZExtValue	CodeGen/SelectionDAGNodes.h	/^  uint64_t getZExtValue() const { return Value->getZExtValue(); }$/;"	f	class:llvm::ConstantSDNode
getZExtValue	Constants.h	/^  inline uint64_t getZExtValue() const {$/;"	f	class:llvm::ConstantInt
getZero	ADT/APFloat.h	/^    static APFloat getZero(const fltSemantics &Sem, bool Negative = false) {$/;"	f	class:llvm::APFloat
getZero	Support/BranchProbability.h	/^  static BranchProbability getZero() { return BranchProbability(0, 1); }$/;"	f	class:llvm::BranchProbability
getZeroDirective	MC/MCAsmInfo.h	/^    const char *getZeroDirective() const {$/;"	f	class:llvm::MCAsmInfo
getZeroIndex	CodeGen/SlotIndexes.h	/^    SlotIndex getZeroIndex() {$/;"	f	class:llvm::SlotIndexes
get_array_pad_sort_comparator	ADT/STLExtras.h	/^inline int (*get_array_pad_sort_comparator(const T &))$/;"	f	namespace:llvm
get_execution_seed	ADT/Hashing.h	/^inline size_t get_execution_seed() {$/;"	f	namespace:llvm::hashing::detail
get_hashable_data	ADT/Hashing.h	/^get_hashable_data(const T &value) {$/;"	f	namespace:llvm::hashing::detail
global_begin	Module.h	/^  const_global_iterator global_begin() const { return GlobalList.begin(); }$/;"	f	class:llvm::Module
global_begin	Module.h	/^  global_iterator       global_begin()       { return GlobalList.begin(); }$/;"	f	class:llvm::Module
global_empty	Module.h	/^  bool                  global_empty() const { return GlobalList.empty(); }$/;"	f	class:llvm::Module
global_end	Module.h	/^  const_global_iterator global_end  () const { return GlobalList.end(); }$/;"	f	class:llvm::Module
global_end	Module.h	/^  global_iterator       global_end  ()       { return GlobalList.end(); }$/;"	f	class:llvm::Module
global_iterator	Module.h	/^  typedef GlobalListType::iterator                      global_iterator;$/;"	t	class:llvm::Module
global_variable_begin	DebugInfo.h	/^    iterator global_variable_begin() const { return GVs.begin(); }$/;"	f	class:llvm::DebugInfoFinder
global_variable_count	DebugInfo.h	/^    unsigned global_variable_count() const { return GVs.size(); }$/;"	f	class:llvm::DebugInfoFinder
global_variable_end	DebugInfo.h	/^    iterator global_variable_end()   const { return GVs.end(); }$/;"	f	class:llvm::DebugInfoFinder
goToBegin	ADT/IntervalMap.h	/^  void goToBegin() {$/;"	f	class:llvm::IntervalMap::const_iterator
goToEnd	ADT/IntervalMap.h	/^  void goToEnd() {$/;"	f	class:llvm::IntervalMap::const_iterator
graph	CodeGen/RegAllocPBQP.h	/^    PBQP::Graph graph;$/;"	m	class:llvm::PBQPRAProblem
greater_ptr	ADT/STLExtras.h	/^struct greater_ptr : public std::binary_function<Ty, Ty, bool> {$/;"	s	namespace:llvm
group	Support/PathV1.h	/^    uint32_t    group;      \/\/\/< Group ID of owner, if applicable$/;"	m	class:llvm::sys::FileStatus
group_all	Support/FileSystem.h	/^  group_all    = group_read | group_write | group_exe,$/;"	e	enum:llvm::sys::fs::perms
group_exe	Support/FileSystem.h	/^  group_exe    =  010, $/;"	e	enum:llvm::sys::fs::perms
group_read	Support/FileSystem.h	/^  group_read   =  040, $/;"	e	enum:llvm::sys::fs::perms
group_write	Support/FileSystem.h	/^  group_write  =  020, $/;"	e	enum:llvm::sys::fs::perms
grow	ADT/BitVector.h	/^  void grow(unsigned NewSize) {$/;"	f	class:llvm::BitVector
grow	ADT/DenseMap.h	/^  void grow(unsigned AtLeast) {$/;"	f	class:llvm::DenseMap
grow	ADT/DenseMap.h	/^  void grow(unsigned AtLeast) {$/;"	f	class:llvm::DenseMapBase
grow	ADT/DenseMap.h	/^  void grow(unsigned AtLeast) {$/;"	f	class:llvm::SmallDenseMap
grow	ADT/IndexedMap.h	/^    void grow(IndexT n) {$/;"	f	class:llvm::IndexedMap
grow	ADT/SmallVector.h	/^  void grow(size_t MinSize = 0) {$/;"	f	class:llvm::SmallVectorTemplateBase
grow	ADT/SmallVector.h	/^void SmallVectorTemplateBase<T, isPodLike>::grow(size_t MinSize) {$/;"	f	class:llvm::SmallVectorTemplateBase
grow_pod	ADT/SmallVector.h	/^  void grow_pod(size_t MinSizeInBytes, size_t TSize) {$/;"	f	class:llvm::SmallVectorTemplateCommon
h	CodeGen/PBQP/HeuristicSolver.h	/^    HImpl h;$/;"	m	class:PBQP::HeuristicSolverImpl
h0	ADT/Hashing.h	/^  uint64_t h0, h1, h2, h3, h4, h5, h6;$/;"	m	struct:llvm::hashing::detail::hash_state
h1	ADT/Hashing.h	/^  uint64_t h0, h1, h2, h3, h4, h5, h6;$/;"	m	struct:llvm::hashing::detail::hash_state
h2	ADT/Hashing.h	/^  uint64_t h0, h1, h2, h3, h4, h5, h6;$/;"	m	struct:llvm::hashing::detail::hash_state
h3	ADT/Hashing.h	/^  uint64_t h0, h1, h2, h3, h4, h5, h6;$/;"	m	struct:llvm::hashing::detail::hash_state
h4	ADT/Hashing.h	/^  uint64_t h0, h1, h2, h3, h4, h5, h6;$/;"	m	struct:llvm::hashing::detail::hash_state
h5	ADT/Hashing.h	/^  uint64_t h0, h1, h2, h3, h4, h5, h6;$/;"	m	struct:llvm::hashing::detail::hash_state
h6	ADT/Hashing.h	/^  uint64_t h0, h1, h2, h3, h4, h5, h6;$/;"	m	struct:llvm::hashing::detail::hash_state
hData	CodeGen/PBQP/HeuristicSolver.h	/^      HeuristicEdgeData hData;$/;"	m	class:PBQP::HeuristicSolverImpl::EdgeData
hData	CodeGen/PBQP/HeuristicSolver.h	/^      HeuristicNodeData hData;$/;"	m	class:PBQP::HeuristicSolverImpl::NodeData
handleAddEdge	CodeGen/PBQP/HeuristicBase.h	/^    void handleAddEdge(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::HeuristicBase
handleAddEdge	CodeGen/PBQP/Heuristics/Briggs.h	/^      void handleAddEdge(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::Heuristics::Briggs
handleAssemblerFlag	MC/MCAsmBackend.h	/^  virtual void handleAssemblerFlag(MCAssemblerFlag Flag) {}$/;"	f	class:llvm::MCAsmBackend
handleOccurrence	Support/CommandLine.h	/^  virtual bool handleOccurrence(unsigned pos, StringRef ArgName, StringRef Arg){$/;"	f	class:llvm::cl::bits
handleOccurrence	Support/CommandLine.h	/^  virtual bool handleOccurrence(unsigned pos, StringRef ArgName, StringRef Arg){$/;"	f	class:llvm::cl::list
handleOccurrence	Support/CommandLine.h	/^  virtual bool handleOccurrence(unsigned pos, StringRef ArgName,$/;"	f	class:llvm::cl::opt
handleRemoveEdge	CodeGen/PBQP/HeuristicBase.h	/^    void handleRemoveEdge(Graph::EdgeItr eItr, Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicBase
handleRemoveEdge	CodeGen/PBQP/Heuristics/Briggs.h	/^      void handleRemoveEdge(Graph::EdgeItr eItr, Graph::NodeItr nItr) {$/;"	f	class:PBQP::Heuristics::Briggs
handleRemoveNode	CodeGen/PBQP/Heuristics/Briggs.h	/^      void handleRemoveNode(Graph::NodeItr xnItr) {$/;"	f	class:PBQP::Heuristics::Briggs
handleTagDirective	Support/YAMLParser.h	/^  void handleTagDirective(const Token &Tag) {$/;"	f	class:llvm::yaml::Document
handle_disk_full	Support/system_error.h	/^  handle_disk_full        = 39, \/\/ ERROR_HANDLE_DISK_FULL,$/;"	e	enum:llvm::windows_error::_
handle_eof	Support/system_error.h	/^  handle_eof              = 38, \/\/ ERROR_HANDLE_EOF,$/;"	e	enum:llvm::windows_error::_
has	Target/TargetLibraryInfo.h	/^  bool has(LibFunc::Func F) const {$/;"	f	class:llvm::TargetLibraryInfo
hasAddressTaken	BasicBlock.h	/^  bool hasAddressTaken() const { return getSubclassDataFromValue() != 0; }$/;"	f	class:llvm::BasicBlock
hasAddressTaken	CodeGen/MachineBasicBlock.h	/^  bool hasAddressTaken() const { return AddressTaken; }$/;"	f	class:llvm::MachineBasicBlock
hasAggressiveSymbolFolding	MC/MCAsmInfo.h	/^    bool hasAggressiveSymbolFolding() const {$/;"	f	class:llvm::MCAsmInfo
hasAliasSet	Analysis/AliasSetTracker.h	/^    bool hasAliasSet() const { return AS != 0; }$/;"	f	class:llvm::AliasSet::PointerRec
hasAllConstantIndices	Operator.h	/^  bool hasAllConstantIndices() const {$/;"	f	class:llvm::GEPOperator
hasAllZeroIndices	Operator.h	/^  bool hasAllZeroIndices() const {$/;"	f	class:llvm::GEPOperator
hasAnyInfo	Analysis/ScalarEvolution.h	/^      bool hasAnyInfo() const {$/;"	f	class:llvm::ScalarEvolution::BackedgeTakenInfo
hasAnyInfo	Analysis/ScalarEvolution.h	/^      bool hasAnyInfo() const {$/;"	f	struct:llvm::ScalarEvolution::ExitLimit
hasAppendingLinkage	GlobalValue.h	/^  bool hasAppendingLinkage() const { return isAppendingLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasArgStr	Support/CommandLine.h	/^  bool hasArgStr() const { return ArgStr[0] != 0; }$/;"	f	class:llvm::cl::Option
hasArgStr	Support/CommandLine.h	/^  bool hasArgStr;$/;"	m	class:llvm::cl::generic_parser_base
hasArgument	Support/CallSite.h	/^  bool hasArgument(const Value *Arg) const {$/;"	f	class:llvm::CallSiteBase
hasAsmPrinter	Support/TargetRegistry.h	/^    bool hasAsmPrinter() const { return AsmPrinterCtorFn != 0; }$/;"	f	class:llvm::Target
hasAsmStreamer	Support/TargetRegistry.h	/^    bool hasAsmStreamer() const { return AsmStreamerCtorFn != 0; }$/;"	f	class:llvm::Target
hasAtLeastOneValue	CodeGen/LiveInterval.h	/^    bool hasAtLeastOneValue() const { return !valnos.empty(); }$/;"	f	class:llvm::LiveInterval
hasAttribute	MC/MCSectionMachO.h	/^  bool hasAttribute(unsigned Value) const {$/;"	f	class:llvm::MCSectionMachO
hasAvailableExternallyLinkage	GlobalValue.h	/^  bool hasAvailableExternallyLinkage() const {$/;"	f	class:llvm::GlobalValue
hasBlockInfoRecords	Bitcode/BitstreamReader.h	/^  bool hasBlockInfoRecords() const { return !BlockInfoRecords.empty(); }$/;"	f	class:llvm::BitstreamReader
hasByValArgument	Instructions.h	/^  bool hasByValArgument() const {$/;"	f	class:llvm::CallInst
hasByValArgument	Instructions.h	/^  bool hasByValArgument() const {$/;"	f	class:llvm::InvokeInst
hasCachedDigest	ADT/ImmutableSet.h	/^  bool hasCachedDigest() const { return IsDigestCached; }$/;"	f	class:llvm::ImutAVLTree
hasCallSiteBeginLabel	CodeGen/MachineModuleInfo.h	/^  bool hasCallSiteBeginLabel(MCSymbol *BeginLabel) {$/;"	f	class:llvm::MachineModuleInfo
hasCallSiteLandingPad	CodeGen/MachineModuleInfo.h	/^  bool hasCallSiteLandingPad(MCSymbol *Sym) {$/;"	f	class:llvm::MachineModuleInfo
hasCalls	CodeGen/MachineFrameInfo.h	/^  bool hasCalls() const { return HasCalls; }$/;"	f	class:llvm::MachineFrameInfo
hasCommonLinkage	GlobalValue.h	/^  bool hasCommonLinkage() const { return isCommonLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasComplexAddress	DebugInfo.h	/^    bool hasComplexAddress() const {$/;"	f	class:llvm::DIVariable
hasCustomConstantPool	Target/TargetJITInfo.h	/^    virtual bool hasCustomConstantPool() const { return false; }$/;"	f	class:llvm::TargetJITInfo
hasCustomJumpTables	Target/TargetJITInfo.h	/^    virtual bool hasCustomJumpTables() const { return false; }$/;"	f	class:llvm::TargetJITInfo
hasDLLExportLinkage	GlobalValue.h	/^  bool hasDLLExportLinkage() const { return isDLLExportLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasDLLImportLinkage	GlobalValue.h	/^  bool hasDLLImportLinkage() const { return isDLLImportLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasDataInCodeSupport	MC/MCAsmBackend.h	/^  bool hasDataInCodeSupport() const {$/;"	f	class:llvm::MCAsmBackend
hasDebugInfo	CodeGen/MachineModuleInfo.h	/^  bool hasDebugInfo() const { return DbgInfoAvailable; }$/;"	f	class:llvm::MachineModuleInfo
hasDebugValues	CodeGen/SelectionDAG.h	/^  bool hasDebugValues() const { return !DbgInfo->empty(); }$/;"	f	class:llvm::SelectionDAG
hasDefaultVisibility	GlobalValue.h	/^  bool hasDefaultVisibility() const { return Visibility == DefaultVisibility; }$/;"	f	class:llvm::GlobalValue
hasDefinitiveInitializer	GlobalVariable.h	/^  inline bool hasDefinitiveInitializer() const {$/;"	f	class:llvm::GlobalVariable
hasDelaySlot	CodeGen/MachineInstr.h	/^  bool hasDelaySlot(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
hasDelaySlot	MC/MCInstrDesc.h	/^  bool hasDelaySlot() const {$/;"	f	class:llvm::MCInstrDesc
hasDotTypeDotSizeDirective	MC/MCAsmInfo.h	/^    bool hasDotTypeDotSizeDirective() const {return HasDotTypeDotSizeDirective;}$/;"	f	class:llvm::MCAsmInfo
hasDwarfFiles	MC/MCContext.h	/^    bool hasDwarfFiles() const {$/;"	f	class:llvm::MCContext
hasEdgeDestLabels	Support/DOTGraphTraits.h	/^  static bool hasEdgeDestLabels() {$/;"	f	struct:llvm::DefaultDOTGraphTraits
hasEmitNops	MC/MCAssembler.h	/^  bool hasEmitNops() const { return EmitNops; }$/;"	f	class:llvm::MCAlignFragment
hasEncodingData	Bitcode/BitCodes.h	/^  bool hasEncodingData() const { return hasEncodingData(getEncoding()); }$/;"	f	class:llvm::BitCodeAbbrevOp
hasEncodingData	Bitcode/BitCodes.h	/^  static bool hasEncodingData(Encoding E) {$/;"	f	class:llvm::BitCodeAbbrevOp
hasEnvironment	ADT/Triple.h	/^  bool hasEnvironment() const {$/;"	f	class:llvm::Triple
hasExternalLinkage	GlobalValue.h	/^  bool hasExternalLinkage() const { return isExternalLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasExternalWeakLinkage	GlobalValue.h	/^  bool hasExternalWeakLinkage() const { return isExternalWeakLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasExtraDefRegAllocReq	CodeGen/MachineInstr.h	/^  bool hasExtraDefRegAllocReq(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
hasExtraDefRegAllocReq	MC/MCInstrDesc.h	/^  bool hasExtraDefRegAllocReq() const {$/;"	f	class:llvm::MCInstrDesc
hasExtraSrcRegAllocReq	CodeGen/MachineInstr.h	/^  bool hasExtraSrcRegAllocReq(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
hasExtraSrcRegAllocReq	MC/MCInstrDesc.h	/^  bool hasExtraSrcRegAllocReq() const {$/;"	f	class:llvm::MCInstrDesc
hasFnAttr	Support/CallSite.h	/^  bool hasFnAttr(Attributes::AttrVal A) const {$/;"	f	class:llvm::CallSiteBase
hasFunctionOnlyAttrs	Attributes.h	/^  bool hasFunctionOnlyAttrs() const {$/;"	f	class:llvm::Attributes
hasHiddenVisibility	GlobalValue.h	/^  bool hasHiddenVisibility() const { return Visibility == HiddenVisibility; }$/;"	f	class:llvm::GlobalValue
hasHighOperandLatency	Target/TargetInstrInfo.h	/^  bool hasHighOperandLatency(const InstrItineraryData *ItinData,$/;"	f	class:llvm::TargetInstrInfo
hasImplicitDefOfPhysReg	MC/MCInstrDesc.h	/^  bool hasImplicitDefOfPhysReg(unsigned Reg) const {$/;"	f	class:llvm::MCInstrDesc
hasImplicitUseOfPhysReg	MC/MCInstrDesc.h	/^  bool hasImplicitUseOfPhysReg(unsigned Reg) const {$/;"	f	class:llvm::MCInstrDesc
hasIncompatibleWithVarArgsAttrs	Attributes.h	/^  bool hasIncompatibleWithVarArgsAttrs() const {$/;"	f	class:llvm::Attributes
hasIndex	CodeGen/SlotIndexes.h	/^    bool hasIndex(const MachineInstr *instr) const {$/;"	f	class:llvm::SlotIndexes
hasIndices	Instructions.h	/^  bool hasIndices() const {$/;"	f	class:llvm::ExtractValueInst
hasIndices	Instructions.h	/^  bool hasIndices() const {$/;"	f	class:llvm::GetElementPtrInst
hasIndices	Instructions.h	/^  bool hasIndices() const {$/;"	f	class:llvm::InsertValueInst
hasIndices	Operator.h	/^  bool hasIndices() const {$/;"	f	class:llvm::GEPOperator
hasInitializer	GlobalVariable.h	/^  inline bool hasInitializer() const { return !isDeclaration(); }$/;"	f	class:llvm::GlobalVariable
hasInstrSchedModel	MC/MCSchedule.h	/^  bool hasInstrSchedModel() const { return SchedClassTable; }$/;"	f	class:llvm::MCSchedModel
hasInstructions	MC/MCAssembler.h	/^  bool hasInstructions() const { return HasInstructions; }$/;"	f	class:llvm::MCSectionData
hasInternalLinkage	GlobalValue.h	/^  bool hasInternalLinkage() const { return isInternalLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasInterval	CodeGen/LiveIntervalAnalysis.h	/^    bool hasInterval(unsigned Reg) const {$/;"	f	class:llvm::LiveIntervals
hasInterval	CodeGen/LiveStackAnalysis.h	/^    bool hasInterval(int Slot) const {$/;"	f	class:llvm::LiveStacks
hasJIT	Support/TargetRegistry.h	/^    bool hasJIT() const { return HasJIT; }$/;"	f	class:llvm::Target
hasLEB128	MC/MCAsmInfo.h	/^    bool hasLEB128() const {$/;"	f	class:llvm::MCAsmInfo
hasLazyArguments	Function.h	/^  bool hasLazyArguments() const {$/;"	f	class:llvm::Function
hasLinkOnceLinkage	GlobalValue.h	/^  bool hasLinkOnceLinkage() const {$/;"	f	class:llvm::GlobalValue
hasLinkOnceODRAutoHideLinkage	GlobalValue.h	/^  bool hasLinkOnceODRAutoHideLinkage() const {$/;"	f	class:llvm::GlobalValue
hasLinkerPrivateLinkage	GlobalValue.h	/^  bool hasLinkerPrivateLinkage() const { return isLinkerPrivateLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasLinkerPrivateWeakLinkage	GlobalValue.h	/^  bool hasLinkerPrivateWeakLinkage() const {$/;"	f	class:llvm::GlobalValue
hasLoadFromStackSlot	Target/TargetInstrInfo.h	/^  virtual bool hasLoadFromStackSlot(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
hasLocalLinkage	GlobalValue.h	/^  bool hasLocalLinkage() const { return isLocalLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasLongFilename	Bitcode/Archive.h	/^    bool hasLongFilename() const { return flags&HasLongFilenameFlag; }$/;"	f	class:llvm::ArchiveMember
hasLoop	ADT/SCCIterator.h	/^  bool hasLoop() const {$/;"	f	class:llvm::scc_iterator
hasMCAsmBackend	Support/TargetRegistry.h	/^    bool hasMCAsmBackend() const { return MCAsmBackendCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCAsmLexer	Support/TargetRegistry.h	/^    bool hasMCAsmLexer() const { return MCAsmLexerCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCAsmParser	Support/TargetRegistry.h	/^    bool hasMCAsmParser() const { return MCAsmParserCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCCodeEmitter	Support/TargetRegistry.h	/^    bool hasMCCodeEmitter() const { return MCCodeEmitterCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCDisassembler	Support/TargetRegistry.h	/^    bool hasMCDisassembler() const { return MCDisassemblerCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCInstPrinter	Support/TargetRegistry.h	/^    bool hasMCInstPrinter() const { return MCInstPrinterCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCNoExecStack	Target/TargetMachine.h	/^  bool hasMCNoExecStack() const { return MCNoExecStack; }$/;"	f	class:llvm::TargetMachine
hasMCObjectStreamer	Support/TargetRegistry.h	/^    bool hasMCObjectStreamer() const { return MCObjectStreamerCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCRelaxAll	Target/TargetMachine.h	/^  bool hasMCRelaxAll() const { return MCRelaxAll; }$/;"	f	class:llvm::TargetMachine
hasMCSaveTempLabels	Target/TargetMachine.h	/^  bool hasMCSaveTempLabels() const { return MCSaveTempLabels; }$/;"	f	class:llvm::TargetMachine
hasMCUseCFI	Target/TargetMachine.h	/^  bool hasMCUseCFI() const { return MCUseCFI; }$/;"	f	class:llvm::TargetMachine
hasMCUseDwarfDirectory	Target/TargetMachine.h	/^  bool hasMCUseDwarfDirectory() const { return MCUseDwarfDirectory; }$/;"	f	class:llvm::TargetMachine
hasMCUseLoc	Target/TargetMachine.h	/^  bool hasMCUseLoc() const { return MCUseLoc; }$/;"	f	class:llvm::TargetMachine
hasMI	Analysis/ProfileInfo.h	/^    bool hasMI() const {$/;"	f	class:llvm::ProfileInfoT
hasMachoTBSSDirective	MC/MCAsmInfo.h	/^    bool hasMachoTBSSDirective() const { return HasMachoTBSSDirective; }$/;"	f	class:llvm::MCAsmInfo
hasMachoZeroFillDirective	MC/MCAsmInfo.h	/^    bool hasMachoZeroFillDirective() const { return HasMachoZeroFillDirective; }$/;"	f	class:llvm::MCAsmInfo
hasMatchingInput	InlineAsm.h	/^    bool hasMatchingInput() const { return MatchingInput != -1; }$/;"	f	struct:llvm::InlineAsm::ConstraintInfo
hasMetadata	Instruction.h	/^  bool hasMetadata() const {$/;"	f	class:llvm::Instruction
hasMetadataHashEntry	Instruction.h	/^  bool hasMetadataHashEntry() const {$/;"	f	class:llvm::Instruction
hasMetadataOtherThanDebugLoc	Instruction.h	/^  bool hasMetadataOtherThanDebugLoc() const {$/;"	f	class:llvm::Instruction
hasMicrosoftFastStdCallMangling	MC/MCAsmInfo.h	/^    bool hasMicrosoftFastStdCallMangling() const {$/;"	f	class:llvm::MCAsmInfo
hasName	DerivedTypes.h	/^  bool hasName() const { return SymbolTableEntry != 0; }$/;"	f	class:llvm::StructType
hasName	Value.h	/^  bool hasName() const { return Name != 0 && SubclassID != MDStringVal; }$/;"	f	class:llvm::Value
hasNoDeadStrip	MC/MCAsmInfo.h	/^    bool hasNoDeadStrip() const { return HasNoDeadStrip; }$/;"	f	class:llvm::MCAsmInfo
hasNoSignedWrap	Operator.h	/^  bool hasNoSignedWrap() const {$/;"	f	class:llvm::OverflowingBinaryOperator
hasNoUnsignedWrap	Operator.h	/^  bool hasNoUnsignedWrap() const {$/;"	f	class:llvm::OverflowingBinaryOperator
hasNodeAddressLabel	Support/DOTGraphTraits.h	/^  static bool hasNodeAddressLabel(const void *, const GraphType &) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
hasOneDef	CodeGen/MachineRegisterInfo.h	/^  bool hasOneDef(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
hasOneMemOperand	CodeGen/MachineInstr.h	/^  bool hasOneMemOperand() const {$/;"	f	class:llvm::MachineInstr
hasOneUse	CodeGen/MachineRegisterInfo.h	/^  bool hasOneUse(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
hasOneUse	CodeGen/SelectionDAGNodes.h	/^  bool hasOneUse() const {$/;"	f	class:llvm::SDNode
hasOneUse	CodeGen/SelectionDAGNodes.h	/^inline bool SDValue::hasOneUse() const {$/;"	f	class:llvm::SDValue
hasOneUse	Value.h	/^  bool hasOneUse() const {$/;"	f	class:llvm::Value
hasOptimizedCodeGen	Target/TargetLibraryInfo.h	/^  bool hasOptimizedCodeGen(LibFunc::Func F) const {$/;"	f	class:llvm::TargetLibraryInfo
hasOptionalDef	CodeGen/MachineInstr.h	/^  bool hasOptionalDef(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
hasOptionalDef	MC/MCInstrDesc.h	/^  bool hasOptionalDef() const {$/;"	f	class:llvm::MCInstrDesc
hasParameterOnlyAttrs	Attributes.h	/^  bool hasParameterOnlyAttrs() const {$/;"	f	class:llvm::Attributes
hasPath	Bitcode/Archive.h	/^    bool hasPath() const { return flags&HasPathFlag; }$/;"	f	class:llvm::ArchiveMember
hasPipelineForwarding	MC/MCInstrItineraries.h	/^  bool hasPipelineForwarding(unsigned DefClass, unsigned DefIdx,$/;"	f	class:llvm::InstrItineraryData
hasPostISelHook	CodeGen/MachineInstr.h	/^  bool hasPostISelHook(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
hasPostISelHook	MC/MCInstrDesc.h	/^  bool hasPostISelHook() const {$/;"	f	class:llvm::MCInstrDesc
hasPostorder	Analysis/LoopIterator.h	/^  bool hasPostorder(BasicBlock *BB) const {$/;"	f	class:llvm::LoopBlocksDFS
hasPreorder	Analysis/LoopIterator.h	/^  bool hasPreorder(BasicBlock *BB) const { return PostNumbers.count(BB); }$/;"	f	class:llvm::LoopBlocksDFS
hasPrivateLinkage	GlobalValue.h	/^  bool hasPrivateLinkage() const { return isPrivateLinkage(Linkage); }$/;"	f	class:llvm::GlobalValue
hasProperty	CodeGen/MachineInstr.h	/^  bool hasProperty(unsigned MCFlag, QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
hasProtectedVisibility	GlobalValue.h	/^  bool hasProtectedVisibility() const {$/;"	f	class:llvm::GlobalValue
hasRawTextSupport	MC/MCStreamer.h	/^    virtual bool hasRawTextSupport() const { return false; }$/;"	f	class:llvm::MCStreamer
hasReadyFilter	CodeGen/ScheduleDAG.h	/^    bool hasReadyFilter() const { return HasReadyFilter; }$/;"	f	class:llvm::SchedulingPriorityQueue
hasRegClassConstraint	InlineAsm.h	/^  static bool hasRegClassConstraint(unsigned Flag, unsigned &RC) {$/;"	f	class:llvm::InlineAsm
hasRegUnit	Target/TargetRegisterInfo.h	/^  bool hasRegUnit(unsigned Reg, unsigned RegUnit) const {$/;"	f	class:llvm::TargetRegisterInfo
hasReliableSymbolDifference	MC/MCAsmBackend.h	/^  bool hasReliableSymbolDifference() const {$/;"	f	class:llvm::MCAsmBackend
hasRelocationAddend	MC/MCELFObjectWriter.h	/^  bool hasRelocationAddend() { return HasRelocationAddend; }$/;"	f	class:llvm::MCELFObjectTargetWriter
hasReservedCallFrame	Target/TargetFrameLowering.h	/^  virtual bool hasReservedCallFrame(const MachineFunction &MF) const {$/;"	f	class:llvm::TargetFrameLowering
hasReservedSpillSlot	Target/TargetRegisterInfo.h	/^  virtual bool hasReservedSpillSlot(const MachineFunction &MF, unsigned Reg,$/;"	f	class:llvm::TargetRegisterInfo
hasSameSubclassOptionalData	Value.h	/^  bool hasSameSubclassOptionalData(const Value *V) const {$/;"	f	class:llvm::Value
hasSection	GlobalValue.h	/^  bool hasSection() const { return !Section.empty(); }$/;"	f	class:llvm::GlobalValue
hasSetDirective	MC/MCAsmInfo.h	/^    bool hasSetDirective() const { return HasSetDirective; }$/;"	f	class:llvm::MCAsmInfo
hasSideEffects	InlineAsm.h	/^  bool hasSideEffects() const { return HasSideEffects; }$/;"	f	class:llvm::InlineAsm
hasSingleParameterDotFile	MC/MCAsmInfo.h	/^    bool hasSingleParameterDotFile() const { return HasSingleParameterDotFile; }$/;"	f	class:llvm::MCAsmInfo
hasStackObjects	CodeGen/MachineFrameInfo.h	/^  bool hasStackObjects() const { return !Objects.empty(); }$/;"	f	class:llvm::MachineFrameInfo
hasStaticCtorDtorReferenceInStaticMode	MC/MCAsmInfo.h	/^    bool hasStaticCtorDtorReferenceInStaticMode() const {$/;"	f	class:llvm::MCAsmInfo
hasStoreToStackSlot	Target/TargetInstrInfo.h	/^  virtual bool hasStoreToStackSlot(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
hasStructRetAttr	Function.h	/^  bool hasStructRetAttr() const {$/;"	f	class:llvm::Function
hasStructRetAttr	Instructions.h	/^  bool hasStructRetAttr() const {$/;"	f	class:llvm::CallInst
hasStructRetAttr	Instructions.h	/^  bool hasStructRetAttr() const {$/;"	f	class:llvm::InvokeInst
hasSubClass	Target/TargetRegisterInfo.h	/^  bool hasSubClass(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::TargetRegisterClass
hasSubClassEq	Target/TargetRegisterInfo.h	/^  bool hasSubClassEq(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::TargetRegisterClass
hasSubsectionsViaSymbols	MC/MCAsmInfo.h	/^    bool hasSubsectionsViaSymbols() const { return HasSubsectionsViaSymbols; }$/;"	f	class:llvm::MCAsmInfo
hasSuperClass	Target/TargetRegisterInfo.h	/^  bool hasSuperClass(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::TargetRegisterClass
hasSuperClassEq	Target/TargetRegisterInfo.h	/^  bool hasSuperClassEq(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::TargetRegisterClass
hasSymbolResolver	MC/MCAsmInfo.h	/^    bool hasSymbolResolver() const { return HasSymbolResolver; }$/;"	f	class:llvm::MCAsmInfo
hasTargetDAGCombine	Target/TargetLowering.h	/^  bool hasTargetDAGCombine(ISD::NodeType NT) const {$/;"	f	class:llvm::TargetLowering
hasTargetMachine	Support/TargetRegistry.h	/^    bool hasTargetMachine() const { return TargetMachineCtorFn != 0; }$/;"	f	class:llvm::Target
hasType	Target/TargetRegisterInfo.h	/^  bool hasType(EVT vt) const {$/;"	f	class:llvm::TargetRegisterClass
hasUWTable	Function.h	/^  bool hasUWTable() const {$/;"	f	class:llvm::Function
hasUniqueInitializer	GlobalVariable.h	/^  inline bool hasUniqueInitializer() const {$/;"	f	class:llvm::GlobalVariable
hasUnmodeledSideEffects	MC/MCInstrDesc.h	/^  bool hasUnmodeledSideEffects() const {$/;"	f	class:llvm::MCInstrDesc
hasUnnamedAddr	GlobalValue.h	/^  bool hasUnnamedAddr() const { return UnnamedAddr; }$/;"	f	class:llvm::GlobalValue
hasValue	ADT/Optional.h	/^  bool hasValue() const { return hasVal; }$/;"	f	class:llvm::Optional
hasValue	Support/CommandLine.h	/^  bool hasValue() const { return Valid; }$/;"	f	class:llvm::cl::OptionValueCopy
hasValue	Support/CommandLine.h	/^  bool hasValue() const { return false; }$/;"	f	struct:llvm::cl::OptionValueBase
hasValueHandle	Value.h	/^  bool hasValueHandle() const { return HasValueHandle; }$/;"	f	class:llvm::Value
hasVarSizedObjects	CodeGen/MachineFrameInfo.h	/^  bool hasVarSizedObjects() const { return HasVarSizedObjects; }$/;"	f	class:llvm::MachineFrameInfo
hasWeakLinkage	GlobalValue.h	/^  bool hasWeakLinkage() const {$/;"	f	class:llvm::GlobalValue
has_colors	Support/raw_ostream.h	/^  virtual bool has_colors() const { return is_displayed(); }$/;"	f	class:llvm::raw_ostream
has_error	Support/raw_ostream.h	/^  bool has_error() const {$/;"	f	class:llvm::raw_fd_ostream
hash	Instructions.h	/^  uint16_t hash() const {$/;"	f	class:llvm::SwitchInst
hash_16_bytes	ADT/Hashing.h	/^inline uint64_t hash_16_bytes(uint64_t low, uint64_t high) {$/;"	f	namespace:llvm::hashing::detail
hash_17to32_bytes	ADT/Hashing.h	/^inline uint64_t hash_17to32_bytes(const char *s, size_t len, uint64_t seed) {$/;"	f	namespace:llvm::hashing::detail
hash_1to3_bytes	ADT/Hashing.h	/^inline uint64_t hash_1to3_bytes(const char *s, size_t len, uint64_t seed) {$/;"	f	namespace:llvm::hashing::detail
hash_33to64_bytes	ADT/Hashing.h	/^inline uint64_t hash_33to64_bytes(const char *s, size_t len, uint64_t seed) {$/;"	f	namespace:llvm::hashing::detail
hash_4to8_bytes	ADT/Hashing.h	/^inline uint64_t hash_4to8_bytes(const char *s, size_t len, uint64_t seed) {$/;"	f	namespace:llvm::hashing::detail
hash_9to16_bytes	ADT/Hashing.h	/^inline uint64_t hash_9to16_bytes(const char *s, size_t len, uint64_t seed) {$/;"	f	namespace:llvm::hashing::detail
hash_code	ADT/Hashing.h	/^  hash_code() {}$/;"	f	class:llvm::hash_code
hash_code	ADT/Hashing.h	/^  hash_code(size_t value) : value(value) {}$/;"	f	class:llvm::hash_code
hash_code	ADT/Hashing.h	/^class hash_code {$/;"	c	namespace:llvm
hash_combine	ADT/Hashing.h	/^template <typename ...Ts> hash_code hash_combine(const Ts &...args) {$/;"	f	namespace:llvm
hash_combine_range	ADT/Hashing.h	/^hash_code hash_combine_range(InputIteratorT first, InputIteratorT last) {$/;"	f	namespace:llvm
hash_combine_range_impl	ADT/Hashing.h	/^hash_code hash_combine_range_impl(InputIteratorT first, InputIteratorT last) {$/;"	f	namespace:llvm::hashing::detail
hash_combine_range_impl	ADT/Hashing.h	/^hash_combine_range_impl(ValueT *first, ValueT *last) {$/;"	f	namespace:llvm::hashing::detail
hash_combine_recursive_helper	ADT/Hashing.h	/^  hash_combine_recursive_helper()$/;"	f	struct:llvm::hashing::detail::hash_combine_recursive_helper
hash_combine_recursive_helper	ADT/Hashing.h	/^struct hash_combine_recursive_helper {$/;"	s	namespace:llvm::hashing::detail
hash_integer_value	ADT/Hashing.h	/^inline hash_code hash_integer_value(uint64_t value) {$/;"	f	namespace:llvm::hashing::detail
hash_short	ADT/Hashing.h	/^inline uint64_t hash_short(const char *s, size_t length, uint64_t seed) {$/;"	f	namespace:llvm::hashing::detail
hash_state	ADT/Hashing.h	/^struct hash_state {$/;"	s	namespace:llvm::hashing::detail
hash_value	ADT/Hashing.h	/^  friend size_t hash_value(const hash_code &code) { return code.value; }$/;"	f	class:llvm::hash_code
hash_value	ADT/Hashing.h	/^hash_code hash_value(const std::basic_string<T> &arg) {$/;"	f	namespace:llvm
hash_value	ADT/Hashing.h	/^hash_code hash_value(const std::pair<T, U> &arg) {$/;"	f	namespace:llvm
hash_value	ADT/Hashing.h	/^hash_value(T value) {$/;"	f	namespace:llvm
hash_value	ADT/Hashing.h	/^template <typename T> hash_code hash_value(const T *ptr) {$/;"	f	namespace:llvm
hashing	ADT/Hashing.h	/^namespace hashing {$/;"	n	namespace:llvm
head	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup *head;$/;"	m	class:llvm::CrashRecoveryContext
header	Support/COFF.h	/^  struct header {$/;"	s	namespace:llvm::COFF
header_addr	Support/MachO.h	/^      uint32_t header_addr;$/;"	m	struct:llvm::MachO::fvmfile_command
header_addr	Support/MachO.h	/^      uint32_t header_addr;$/;"	m	struct:llvm::MachO::fvmlib
height	ADT/IntervalMap.h	/^  unsigned height() const { return path.size() - 1; }$/;"	f	class:llvm::IntervalMapImpl::Path
height	ADT/IntervalMap.h	/^  unsigned height;$/;"	m	class:llvm::IntervalMap
heuristicReduce	CodeGen/PBQP/HeuristicBase.h	/^    bool heuristicReduce() {$/;"	f	class:PBQP::HeuristicBase
heuristicReduce	CodeGen/PBQP/Heuristics/Briggs.h	/^      bool heuristicReduce() {$/;"	f	class:PBQP::Heuristics::Briggs
hexagon	ADT/Triple.h	/^    hexagon, \/\/ Hexagon: hexagon$/;"	e	enum:llvm::Triple::ArchType
hexdigit	ADT/StringExtras.h	/^static inline char hexdigit(unsigned X, bool LowerCase = false) {$/;"	f	namespace:llvm
holds	Support/MutexGuard.h	/^    bool holds(const sys::Mutex& lock) const { return &M == &lock; }$/;"	f	class:llvm::MutexGuard
host_char_bit	ADT/APInt.h	/^  const unsigned int host_char_bit = 8;$/;"	m	namespace:llvm
host_unreachable	Support/system_error.h	/^  host_unreachable                    = EHOSTUNREACH,$/;"	e	enum:llvm::errc::_
i	TypeBuilder.h	/^template<uint32_t num_bits> class i {};$/;"	c	namespace:llvm::types
i1	CodeGen/ValueTypes.h	/^      i1             =   1,   \/\/ This is a 1 bit integer value$/;"	e	enum:llvm::MVT::SimpleValueType
i128	CodeGen/ValueTypes.h	/^      i128           =   6,   \/\/ This is a 128 bit integer value$/;"	e	enum:llvm::MVT::SimpleValueType
i16	CodeGen/ValueTypes.h	/^      i16            =   3,   \/\/ This is a 16 bit integer value$/;"	e	enum:llvm::MVT::SimpleValueType
i32	CodeGen/ValueTypes.h	/^      i32            =   4,   \/\/ This is a 32 bit integer value$/;"	e	enum:llvm::MVT::SimpleValueType
i64	CodeGen/ValueTypes.h	/^      i64            =   5,   \/\/ This is a 64 bit integer value$/;"	e	enum:llvm::MVT::SimpleValueType
i8	CodeGen/ValueTypes.h	/^      i8             =   2,   \/\/ This is an 8 bit integer value$/;"	e	enum:llvm::MVT::SimpleValueType
iAny	CodeGen/ValueTypes.h	/^      iAny           = 254,$/;"	e	enum:llvm::MVT::SimpleValueType
iPTR	CodeGen/ValueTypes.h	/^      iPTR           = 255,$/;"	e	enum:llvm::MVT::SimpleValueType
iPTRAny	CodeGen/ValueTypes.h	/^      iPTRAny        = 251,$/;"	e	enum:llvm::MVT::SimpleValueType
id	CodeGen/LiveInterval.h	/^    unsigned id;$/;"	m	class:llvm::VNInfo
idFor	ADT/UniqueVector.h	/^  unsigned idFor(const T &Entry) const {$/;"	f	class:llvm::UniqueVector
ident_command	Support/MachO.h	/^    struct ident_command {$/;"	s	namespace:llvm::MachO
identifier_removed	Support/system_error.h	/^  identifier_removed                  = EIDRM,$/;"	e	enum:llvm::errc::_
identity	ADT/STLExtras.h	/^struct identity : public std::unary_function<Ty, Ty> {$/;"	s	namespace:llvm
idf_begin	ADT/DepthFirstIterator.h	/^idf_iterator<T> idf_begin(const T& G) {$/;"	f	namespace:llvm
idf_end	ADT/DepthFirstIterator.h	/^idf_iterator<T> idf_end(const T& G){$/;"	f	namespace:llvm
idf_ext_begin	ADT/DepthFirstIterator.h	/^idf_ext_iterator<T, SetTy> idf_ext_begin(const T& G, SetTy &S) {$/;"	f	namespace:llvm
idf_ext_end	ADT/DepthFirstIterator.h	/^idf_ext_iterator<T, SetTy> idf_ext_end(const T& G, SetTy &S) {$/;"	f	namespace:llvm
idf_ext_iterator	ADT/DepthFirstIterator.h	/^  idf_ext_iterator(const df_iterator<Inverse<T>, SetTy, true> &V)$/;"	f	struct:llvm::idf_ext_iterator
idf_ext_iterator	ADT/DepthFirstIterator.h	/^  idf_ext_iterator(const idf_iterator<T, SetTy, true> &V)$/;"	f	struct:llvm::idf_ext_iterator
idf_ext_iterator	ADT/DepthFirstIterator.h	/^struct idf_ext_iterator : public idf_iterator<T, SetTy, true> {$/;"	s	namespace:llvm
idf_iterator	ADT/DepthFirstIterator.h	/^  idf_iterator(const df_iterator<Inverse<T>, SetTy, External> &V)$/;"	f	struct:llvm::idf_iterator
idf_iterator	ADT/DepthFirstIterator.h	/^struct idf_iterator : public df_iterator<Inverse<T>, SetTy, External> {$/;"	s	namespace:llvm
idx	Support/CFG.h	/^  unsigned idx;$/;"	m	class:llvm::SuccIterator
idx2MBBMap	CodeGen/SlotIndexes.h	/^    SmallVector<IdxMBBPair, 8> idx2MBBMap;$/;"	m	class:llvm::SlotIndexes
idx_begin	Instructions.h	/^  inline const_op_iterator idx_begin() const { return op_begin()+1; }$/;"	f	class:llvm::GetElementPtrInst
idx_begin	Instructions.h	/^  inline idx_iterator idx_begin() const { return Indices.begin(); }$/;"	f	class:llvm::ExtractValueInst
idx_begin	Instructions.h	/^  inline idx_iterator idx_begin() const { return Indices.begin(); }$/;"	f	class:llvm::InsertValueInst
idx_begin	Instructions.h	/^  inline op_iterator       idx_begin()       { return op_begin()+1; }$/;"	f	class:llvm::GetElementPtrInst
idx_begin	Operator.h	/^  inline const_op_iterator idx_begin() const { return op_begin()+1; }$/;"	f	class:llvm::GEPOperator
idx_begin	Operator.h	/^  inline op_iterator       idx_begin()       { return op_begin()+1; }$/;"	f	class:llvm::GEPOperator
idx_end	Instructions.h	/^  inline const_op_iterator idx_end()   const { return op_end(); }$/;"	f	class:llvm::GetElementPtrInst
idx_end	Instructions.h	/^  inline idx_iterator idx_end()   const { return Indices.end(); }$/;"	f	class:llvm::ExtractValueInst
idx_end	Instructions.h	/^  inline idx_iterator idx_end()   const { return Indices.end(); }$/;"	f	class:llvm::InsertValueInst
idx_end	Instructions.h	/^  inline op_iterator       idx_end()         { return op_end(); }$/;"	f	class:llvm::GetElementPtrInst
idx_end	Operator.h	/^  inline const_op_iterator idx_end()   const { return op_end(); }$/;"	f	class:llvm::GEPOperator
idx_end	Operator.h	/^  inline op_iterator       idx_end()         { return op_end(); }$/;"	f	class:llvm::GEPOperator
idx_iterator	Instructions.h	/^  typedef const unsigned* idx_iterator;$/;"	t	class:llvm::ExtractValueInst
idx_iterator	Instructions.h	/^  typedef const unsigned* idx_iterator;$/;"	t	class:llvm::InsertValueInst
ieee_double	TypeBuilder.h	/^class ieee_double {};$/;"	c	namespace:llvm::types
ieee_float	TypeBuilder.h	/^class ieee_float {};$/;"	c	namespace:llvm::types
iextdefsym	Support/MachO.h	/^      uint32_t iextdefsym;$/;"	m	struct:llvm::MachO::dylib_module
iextdefsym	Support/MachO.h	/^      uint32_t iextdefsym;$/;"	m	struct:llvm::MachO::dylib_module_64
iextdefsym	Support/MachO.h	/^      uint32_t iextdefsym;$/;"	m	struct:llvm::MachO::dysymtab_command
iextrel	Support/MachO.h	/^      uint32_t iextrel;$/;"	m	struct:llvm::MachO::dylib_module
iextrel	Support/MachO.h	/^      uint32_t iextrel;$/;"	m	struct:llvm::MachO::dylib_module_64
ignorablePass	Support/PassNameParser.h	/^  inline bool ignorablePass(const PassInfo *P) const {$/;"	f	class:llvm::PassNameParser
ignorablePassImpl	Support/PassNameParser.h	/^  bool ignorablePassImpl(const PassInfo *P) const { return !filter(*P); }$/;"	f	class:llvm::FilteredPassNameParser
ignorablePassImpl	Support/PassNameParser.h	/^  virtual bool ignorablePassImpl(const PassInfo *P) const { return false; }$/;"	f	class:llvm::PassNameParser
ignorePseudoInstruction	CodeGen/DFAPacketizer.h	/^  virtual bool ignorePseudoInstruction(MachineInstr *I,$/;"	f	class:llvm::VLIWPacketizerList
iinit_iterm	Support/MachO.h	/^      uint32_t iinit_iterm;$/;"	m	struct:llvm::MachO::dylib_module
iinit_iterm	Support/MachO.h	/^      uint32_t iinit_iterm;$/;"	m	struct:llvm::MachO::dylib_module_64
ileAllocator	CodeGen/SlotIndexes.h	/^    BumpPtrAllocator ileAllocator;$/;"	m	class:llvm::SlotIndexes
ilist	ADT/ilist.h	/^  explicit ilist(size_type count) {$/;"	f	struct:llvm::ilist
ilist	ADT/ilist.h	/^  ilist() {}$/;"	f	struct:llvm::ilist
ilist	ADT/ilist.h	/^  ilist(const ilist &right) {$/;"	f	struct:llvm::ilist
ilist	ADT/ilist.h	/^  ilist(size_type count, const NodeTy &val) {$/;"	f	struct:llvm::ilist
ilist	ADT/ilist.h	/^  template<class InIt> ilist(InIt first, InIt last) {$/;"	f	struct:llvm::ilist
ilist	ADT/ilist.h	/^struct ilist : public iplist<NodeTy> {$/;"	s	namespace:llvm
ilist_default_traits	ADT/ilist.h	/^struct ilist_default_traits : public ilist_nextprev_traits<NodeTy>,$/;"	s	namespace:llvm
ilist_half_node	ADT/ilist_node.h	/^  ilist_half_node() : Prev(0) {}$/;"	f	class:llvm::ilist_half_node
ilist_half_node	ADT/ilist_node.h	/^class ilist_half_node {$/;"	c	namespace:llvm
ilist_iterator	ADT/ilist.h	/^  ilist_iterator() : NodePtr(0) {}$/;"	f	class:llvm::ilist_iterator
ilist_iterator	ADT/ilist.h	/^  ilist_iterator(const ilist_iterator<node_ty> &RHS)$/;"	f	class:llvm::ilist_iterator
ilist_iterator	ADT/ilist.h	/^  ilist_iterator(pointer NP) : NodePtr(NP) {}$/;"	f	class:llvm::ilist_iterator
ilist_iterator	ADT/ilist.h	/^  ilist_iterator(reference NR) : NodePtr(&NR) {}$/;"	f	class:llvm::ilist_iterator
ilist_iterator	ADT/ilist.h	/^class ilist_iterator$/;"	c	namespace:llvm
ilist_nextprev_traits	ADT/ilist.h	/^struct ilist_nextprev_traits {$/;"	s	namespace:llvm
ilist_node	ADT/ilist_node.h	/^  ilist_node() : Next(0) {}$/;"	f	class:llvm::ilist_node
ilist_node	ADT/ilist_node.h	/^class ilist_node : private ilist_half_node<NodeTy> {$/;"	c	namespace:llvm
ilist_node_traits	ADT/ilist.h	/^struct ilist_node_traits {$/;"	s	namespace:llvm
ilist_sentinel_traits	ADT/ilist.h	/^struct ilist_sentinel_traits {$/;"	s	namespace:llvm
ilist_traits	ADT/SparseBitVector.h	/^struct ilist_traits<SparseBitVectorElement<ElementSize> >$/;"	s	namespace:llvm
ilist_traits	ADT/ilist.h	/^struct ilist_traits : public ilist_default_traits<NodeTy> {};$/;"	s	namespace:llvm
ilist_traits	ADT/ilist.h	/^struct ilist_traits<const Ty> : public ilist_traits<Ty> {};$/;"	s	namespace:llvm
ilist_traits	Analysis/IVUsers.h	/^template<> struct ilist_traits<IVStrideUse>$/;"	s	namespace:llvm
ilist_traits	BasicBlock.h	/^template<> struct ilist_traits<Instruction>$/;"	s	namespace:llvm
ilist_traits	CodeGen/MachineBasicBlock.h	/^struct ilist_traits<MachineInstr> : public ilist_default_traits<MachineInstr> {$/;"	s	namespace:llvm
ilist_traits	CodeGen/MachineFunction.h	/^struct ilist_traits<MachineBasicBlock>$/;"	s	namespace:llvm
ilist_traits	CodeGen/SelectionDAG.h	/^template<> struct ilist_traits<SDNode> : public ilist_default_traits<SDNode> {$/;"	s	namespace:llvm
ilist_traits	CodeGen/SlotIndexes.h	/^  struct ilist_traits<IndexListEntry> : public ilist_default_traits<IndexListEntry> {$/;"	s	namespace:llvm
ilist_traits	Function.h	/^template<> struct ilist_traits<Argument>$/;"	s	namespace:llvm
ilist_traits	Function.h	/^template<> struct ilist_traits<BasicBlock>$/;"	s	namespace:llvm
ilist_traits	Module.h	/^template<> struct ilist_traits<Function>$/;"	s	namespace:llvm
ilist_traits	Module.h	/^template<> struct ilist_traits<GlobalAlias>$/;"	s	namespace:llvm
ilist_traits	Module.h	/^template<> struct ilist_traits<GlobalVariable>$/;"	s	namespace:llvm
ilist_traits	Module.h	/^template<> struct ilist_traits<NamedMDNode>$/;"	s	namespace:llvm
ilist_traits	Support/Recycler.h	/^struct ilist_traits<RecyclerStruct> :$/;"	s	namespace:llvm
illegal_byte_sequence	Support/system_error.h	/^  illegal_byte_sequence               = EILSEQ,$/;"	e	enum:llvm::errc::_
ilocalsym	Support/MachO.h	/^      uint32_t ilocalsym;$/;"	m	struct:llvm::MachO::dylib_module
ilocalsym	Support/MachO.h	/^      uint32_t ilocalsym;$/;"	m	struct:llvm::MachO::dylib_module_64
ilocalsym	Support/MachO.h	/^      uint32_t ilocalsym;$/;"	m	struct:llvm::MachO::dysymtab_command
impl	CodeGen/PBQP/HeuristicBase.h	/^    HImpl& impl() { return static_cast<HImpl&>(*this); }$/;"	f	class:PBQP::HeuristicBase
inAllocatableClass	Target/TargetRegisterInfo.h	/^  bool inAllocatableClass;      \/\/ Register belongs to an allocatable regclass.$/;"	m	struct:llvm::TargetRegisterInfoDesc
inBounds	ADT/IndexedMap.h	/^    bool inBounds(IndexT n) const {$/;"	f	class:llvm::IndexedMap
inappropriate_io_control_operation	Support/system_error.h	/^  inappropriate_io_control_operation  = ENOTTY,$/;"	e	enum:llvm::errc::_
incBlockFreq	Analysis/BlockFrequencyImpl.h	/^  void incBlockFreq(BlockT *BB, BlockFrequency Freq) {$/;"	f	class:llvm::BlockFrequencyImpl
incInstance	MC/MCLabel.h	/^    unsigned incInstance() { return ++Instance; }$/;"	f	class:llvm::MCLabel
increment	Object/ObjectFile.h	/^  content_iterator& increment(error_code &err) {$/;"	f	class:llvm::object::content_iterator
increment	Support/FileSystem.h	/^  directory_iterator &increment(error_code &ec) {$/;"	f	class:llvm::sys::fs::directory_iterator
increment	Support/FileSystem.h	/^  recursive_directory_iterator &increment(error_code &ec) {$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
incrementHeight	ADT/ImmutableSet.h	/^  unsigned incrementHeight(TreeTy* L, TreeTy* R) const {$/;"	f	class:llvm::ImutAVLFactory
incrementNumEntries	ADT/DenseMap.h	/^  void incrementNumEntries() {$/;"	f	class:llvm::DenseMapBase
incrementNumTombstones	ADT/DenseMap.h	/^  void incrementNumTombstones() {$/;"	f	class:llvm::DenseMapBase
index	ADT/SparseBitVector.h	/^  unsigned index() const {$/;"	f	struct:llvm::SparseBitVectorElement
index	CodeGen/SlotIndexes.h	/^    unsigned index;$/;"	m	class:llvm::IndexListEntry
index2StackSlot	Target/TargetRegisterInfo.h	/^  static unsigned index2StackSlot(int FI) {$/;"	f	class:llvm::TargetRegisterInfo
index2VirtReg	Target/TargetRegisterInfo.h	/^  static unsigned index2VirtReg(unsigned Index) {$/;"	f	class:llvm::TargetRegisterInfo
indexList	CodeGen/SlotIndexes.h	/^    IndexList indexList;$/;"	m	class:llvm::SlotIndexes
index_is_valid	Support/CFG.h	/^  inline bool index_is_valid(int idx) {$/;"	f	class:llvm::SuccIterator
indirect_symbol_begin	MC/MCAssembler.h	/^  const_indirect_symbol_iterator indirect_symbol_begin() const {$/;"	f	class:llvm::MCAssembler
indirect_symbol_begin	MC/MCAssembler.h	/^  indirect_symbol_iterator indirect_symbol_begin() {$/;"	f	class:llvm::MCAssembler
indirect_symbol_end	MC/MCAssembler.h	/^  const_indirect_symbol_iterator indirect_symbol_end() const {$/;"	f	class:llvm::MCAssembler
indirect_symbol_end	MC/MCAssembler.h	/^  indirect_symbol_iterator indirect_symbol_end() {$/;"	f	class:llvm::MCAssembler
indirect_symbol_iterator	MC/MCAssembler.h	/^  typedef std::vector<IndirectSymbolData>::iterator indirect_symbol_iterator;$/;"	t	class:llvm::MCAssembler
indirect_symbol_size	MC/MCAssembler.h	/^  size_t indirect_symbol_size() const { return IndirectSymbols.size(); }$/;"	f	class:llvm::MCAssembler
indirectsymoff	Support/MachO.h	/^      uint32_t indirectsymoff;$/;"	m	struct:llvm::MachO::dysymtab_command
info	Bitcode/Archive.h	/^    sys::FileStatus     info;     \/\/\/< Status info (size,mode,date)$/;"	m	class:llvm::ArchiveMember
init	ADT/DenseMap.h	/^  void init(unsigned InitBuckets) {$/;"	f	class:llvm::DenseMap
init	ADT/DenseMap.h	/^  void init(unsigned InitBuckets) {$/;"	f	class:llvm::SmallDenseMap
init	ADT/Statistic.h	/^  Statistic &init() {$/;"	f	class:llvm::Statistic
init	Bitcode/BitstreamReader.h	/^  void init(BitstreamReader &R) {$/;"	f	class:llvm::BitstreamCursor
init	Bitcode/BitstreamReader.h	/^  void init(const unsigned char *Start, const unsigned char *End) {$/;"	f	class:llvm::BitstreamReader
init	Instructions.h	/^  void init(Value *C, Value *S1, Value *S2) {$/;"	f	class:llvm::SelectInst
init	MC/MCRegisterInfo.h	/^    void init(uint16_t InitVal, const uint16_t *DiffList) {$/;"	f	class:llvm::MCRegisterInfo::DiffListIterator
init	Support/CommandLine.h	/^initializer<Ty> init(const Ty &Val) {$/;"	f	namespace:llvm::cl
init	Support/Registry.h	/^      void init() {$/;"	f	class:llvm::Registry::listener
initEmpty	ADT/DenseMap.h	/^  void initEmpty() {$/;"	f	class:llvm::DenseMapBase
initNodes	CodeGen/LatencyPriorityQueue.h	/^    void initNodes(std::vector<SUnit> &sunits) {$/;"	f	class:llvm::LatencyPriorityQueue
initPacketizerState	CodeGen/DFAPacketizer.h	/^  virtual void initPacketizerState(void) { return; }$/;"	f	class:llvm::VLIWPacketizerList
init_address	Support/MachO.h	/^      uint32_t init_address;$/;"	m	struct:llvm::MachO::routines_command
init_address	Support/MachO.h	/^      uint64_t init_address;$/;"	m	struct:llvm::MachO::routines_command_64
init_module	Support/MachO.h	/^      uint32_t init_module;$/;"	m	struct:llvm::MachO::routines_command
init_module	Support/MachO.h	/^      uint64_t init_module;$/;"	m	struct:llvm::MachO::routines_command_64
init_words	ADT/BitVector.h	/^  void init_words(BitWord *B, unsigned NumWords, bool t) {$/;"	f	class:llvm::BitVector
initialize	CallGraphSCCPass.h	/^  void initialize(CallGraphNode*const*I, CallGraphNode*const*E) {$/;"	f	class:llvm::CallGraphSCC
initialize	CodeGen/MachinePassRegistry.h	/^  void initialize(cl::Option &O) {$/;"	f	class:llvm::RegisterPassParser
initialize	Support/CommandLine.h	/^  void initialize(Opt &O) {$/;"	f	class:llvm::cl::parser
initialize	Support/CommandLine.h	/^  void initialize(Option &) {}$/;"	f	class:llvm::cl::basic_parser_impl
initialize	Support/CommandLine.h	/^  void initialize(Option &O) {$/;"	f	class:llvm::cl::generic_parser_base
initialize	Support/PassNameParser.h	/^  void initialize(cl::Option &O) {$/;"	f	class:llvm::PassNameParser
initialize	Support/RegistryParser.h	/^    void initialize(cl::Option &O) {$/;"	f	class:llvm::RegistryParser
initializeAnalysisInfo	PassManagers.h	/^  void initializeAnalysisInfo() {$/;"	f	class:llvm::PMDataManager
initializeNode	CodeGen/PBQP/Heuristics/Briggs.h	/^      void initializeNode(Graph::NodeItr nItr) {$/;"	f	class:PBQP::Heuristics::Briggs
initializeRoots	CodeGen/GCStrategy.h	/^    bool initializeRoots() const { return InitRoots; }$/;"	f	class:llvm::GCStrategy
initializer	Support/CommandLine.h	/^  initializer(const Ty &Val) : Init(Val) {}$/;"	f	struct:llvm::cl::initializer
initializer	Support/CommandLine.h	/^struct initializer {$/;"	s	namespace:llvm::cl
initprot	Support/MachO.h	/^      uint32_t initprot;$/;"	m	struct:llvm::MachO::segment_command
initprot	Support/MachO.h	/^      uint32_t initprot;$/;"	m	struct:llvm::MachO::segment_command_64
insert	ADT/DenseMap.h	/^  std::pair<iterator, bool> insert(const std::pair<KeyT, ValueT> &KV) {$/;"	f	class:llvm::DenseMapBase
insert	ADT/DenseMap.h	/^  void insert(InputIt I, InputIt E) {$/;"	f	class:llvm::DenseMapBase
insert	ADT/DenseSet.h	/^  std::pair<iterator, bool> insert(const ValueT &V) {$/;"	f	class:llvm::DenseSet
insert	ADT/DenseSet.h	/^  void insert(InputIt I, InputIt E) {$/;"	f	class:llvm::DenseSet
insert	ADT/EquivalenceClasses.h	/^  iterator insert(const ElemTy &Data) {$/;"	f	class:llvm::EquivalenceClasses
insert	ADT/IntervalMap.h	/^  void insert(KeyT a, KeyT b, ValT y) {$/;"	f	class:llvm::IntervalMap
insert	ADT/IntervalMap.h	/^  void insert(unsigned i, unsigned Size, NodeRef Node, KeyT Stop) {$/;"	f	class:llvm::IntervalMapImpl::BranchNode
insert	ADT/IntervalMap.h	/^iterator::insert(KeyT a, KeyT b, ValT y) {$/;"	f	class:llvm::IntervalMap::iterator
insert	ADT/ScopedHashTable.h	/^  void insert(const K &Key, const V &Val) {$/;"	f	class:llvm::ScopedHashTable
insert	ADT/SetVector.h	/^  bool insert(const value_type &X) {$/;"	f	class:llvm::SetVector
insert	ADT/SetVector.h	/^  void insert(It Start, It End) {$/;"	f	class:llvm::SetVector
insert	ADT/SmallPtrSet.h	/^  bool insert(PtrType Ptr) {$/;"	f	class:llvm::SmallPtrSet
insert	ADT/SmallPtrSet.h	/^  void insert(IterT I, IterT E) {$/;"	f	class:llvm::SmallPtrSet
insert	ADT/SmallSet.h	/^  bool insert(const T &V) {$/;"	f	class:llvm::SmallSet
insert	ADT/SmallSet.h	/^  void insert(IterT I, IterT E) {$/;"	f	class:llvm::SmallSet
insert	ADT/SmallVector.h	/^  iterator insert(iterator I, ItTy From, ItTy To) {$/;"	f	class:llvm::SmallVectorImpl
insert	ADT/SmallVector.h	/^  iterator insert(iterator I, T &&Elt) {$/;"	f	class:llvm::SmallVectorImpl
insert	ADT/SmallVector.h	/^  iterator insert(iterator I, const T &Elt) {$/;"	f	class:llvm::SmallVectorImpl
insert	ADT/SmallVector.h	/^  iterator insert(iterator I, size_type NumToInsert, const T &Elt) {$/;"	f	class:llvm::SmallVectorImpl
insert	ADT/SparseSet.h	/^  std::pair<iterator, bool> insert(const ValueT &Val) {$/;"	f	class:llvm::SparseSet
insert	ADT/StringMap.h	/^  bool insert(MapEntryTy *KeyValue) {$/;"	f	class:llvm::StringMap
insert	ADT/StringSet.h	/^    bool insert(StringRef InLang) {$/;"	f	class:llvm::StringSet
insert	ADT/TinyPtrVector.h	/^  iterator insert(iterator I, ItTy From, ItTy To) {$/;"	f	class:llvm::TinyPtrVector
insert	ADT/TinyPtrVector.h	/^  iterator insert(iterator I, const EltTy &Elt) {$/;"	f	class:llvm::TinyPtrVector
insert	ADT/UniqueVector.h	/^  unsigned insert(const T &Entry) {$/;"	f	class:llvm::UniqueVector
insert	ADT/ValueMap.h	/^  std::pair<iterator, bool> insert(const std::pair<KeyT, ValueT> &KV) {$/;"	f	class:llvm::ValueMap
insert	ADT/ValueMap.h	/^  void insert(InputIt I, InputIt E) {$/;"	f	class:llvm::ValueMap
insert	ADT/ilist.h	/^  iterator insert(iterator where, NodeTy *New) {$/;"	f	class:llvm::iplist
insert	ADT/ilist.h	/^  iterator insert(iterator where, const NodeTy &val) {$/;"	f	struct:llvm::ilist
insert	ADT/ilist.h	/^  template<class InIt> void insert(iterator where, InIt first, InIt last) {$/;"	f	class:llvm::iplist
insert	ADT/ilist.h	/^  void insert(iterator where, size_type count, const NodeTy &val) {$/;"	f	struct:llvm::ilist
insert	CodeGen/MachineBasicBlock.h	/^  instr_iterator insert(instr_iterator I, MachineInstr *M) {$/;"	f	class:llvm::MachineBasicBlock
insert	CodeGen/MachineBasicBlock.h	/^  iterator insert(iterator I, MachineInstr *M) {$/;"	f	class:llvm::MachineBasicBlock
insert	CodeGen/MachineBasicBlock.h	/^  void insert(instr_iterator I, IT S, IT E) {$/;"	f	class:llvm::MachineBasicBlock
insert	CodeGen/MachineBasicBlock.h	/^  void insert(iterator I, IT S, IT E) {$/;"	f	class:llvm::MachineBasicBlock
insert	CodeGen/MachineFunction.h	/^  void insert(iterator MBBI, MachineBasicBlock *MBB) {$/;"	f	class:llvm::MachineFunction
insert	MC/MCInst.h	/^  iterator insert(iterator I, const MCOperand &Op) {$/;"	f	class:llvm::MCInst
insertAfter	ADT/ilist.h	/^  iterator insertAfter(iterator where, NodeTy *New) {$/;"	f	class:llvm::iplist
insertAfter	CodeGen/MachineBasicBlock.h	/^  instr_iterator insertAfter(instr_iterator I, MachineInstr *M) {$/;"	f	class:llvm::MachineBasicBlock
insertAfter	CodeGen/MachineBasicBlock.h	/^  iterator insertAfter(iterator I, MachineInstr *M) {$/;"	f	class:llvm::MachineBasicBlock
insertEdge	ADT/PostOrderIterator.h	/^  bool insertEdge(NodeType *From, NodeType *To) { return Visited.insert(To); }$/;"	f	class:llvm::po_iterator_storage
insertEdge	ADT/PostOrderIterator.h	/^  bool insertEdge(NodeType *From, NodeType *To) {$/;"	f	class:llvm::po_iterator_storage
insertEdge	Analysis/LoopIterator.h	/^insertEdge(BasicBlock *From, BasicBlock *To) {$/;"	f	class:llvm::po_iterator_storage
insertFrom	ADT/IntervalMap.h	/^insertFrom(unsigned &Pos, unsigned Size, KeyT a, KeyT b, ValT y) {$/;"	f	class:llvm::IntervalMapImpl::LeafNode
insertIntoLoop	Analysis/LoopInfoImpl.h	/^void PopulateLoopsDFS<BlockT, LoopT>::insertIntoLoop(BlockT *Block) {$/;"	f	class:llvm::PopulateLoopsDFS
insertIntoScope	ADT/ScopedHashTable.h	/^  void insertIntoScope(ScopeTy *S, const K &Key, const V &Val) {$/;"	f	class:llvm::ScopedHashTable
insertMBBInMaps	CodeGen/SlotIndexes.h	/^    void insertMBBInMaps(MachineBasicBlock *mbb) {$/;"	f	class:llvm::SlotIndexes
insertMachineInstrInMaps	CodeGen/SlotIndexes.h	/^    SlotIndex insertMachineInstrInMaps(MachineInstr *mi, bool Late = false) {$/;"	f	class:llvm::SlotIndexes
insertNode	ADT/IntervalMap.h	/^iterator::insertNode(unsigned Level, IntervalMapImpl::NodeRef Node, KeyT Stop) {$/;"	f	class:llvm::IntervalMap::iterator
insertSelect	Target/TargetInstrInfo.h	/^  virtual void insertSelect(MachineBasicBlock &MBB,$/;"	f	class:llvm::TargetInstrInfo
inst_begin	Support/InstIterator.h	/^inline const_inst_iterator inst_begin(const Function &F) {$/;"	f	namespace:llvm
inst_begin	Support/InstIterator.h	/^inline const_inst_iterator inst_begin(const Function *F) {$/;"	f	namespace:llvm
inst_begin	Support/InstIterator.h	/^inline inst_iterator inst_begin(Function &F) { return inst_iterator(F); }$/;"	f	namespace:llvm
inst_begin	Support/InstIterator.h	/^inline inst_iterator inst_begin(Function *F) { return inst_iterator(*F); }$/;"	f	namespace:llvm
inst_end	Support/InstIterator.h	/^inline const_inst_iterator inst_end(const Function &F) {$/;"	f	namespace:llvm
inst_end	Support/InstIterator.h	/^inline const_inst_iterator inst_end(const Function *F) {$/;"	f	namespace:llvm
inst_end	Support/InstIterator.h	/^inline inst_iterator inst_end(Function &F)   { return inst_iterator(F, true); }$/;"	f	namespace:llvm
inst_end	Support/InstIterator.h	/^inline inst_iterator inst_end(Function *F)   { return inst_iterator(*F, true); }$/;"	f	namespace:llvm
inst_iterator	Support/InstIterator.h	/^                     Instruction> inst_iterator;$/;"	t	namespace:llvm
instantiate	Support/Registry.h	/^    T *instantiate() const { return Ctor(); }$/;"	f	class:llvm::SimpleRegistryEntry
instr_begin	CodeGen/MachineBasicBlock.h	/^  const_instr_iterator          instr_begin() const { return Insts.begin();  }$/;"	f	class:llvm::MachineBasicBlock
instr_begin	CodeGen/MachineBasicBlock.h	/^  instr_iterator                instr_begin()       { return Insts.begin();  }$/;"	f	class:llvm::MachineBasicBlock
instr_end	CodeGen/MachineBasicBlock.h	/^  const_instr_iterator            instr_end() const { return Insts.end();    }$/;"	f	class:llvm::MachineBasicBlock
instr_end	CodeGen/MachineBasicBlock.h	/^  instr_iterator                  instr_end()       { return Insts.end();    }$/;"	f	class:llvm::MachineBasicBlock
instr_iterator	CodeGen/MachineBasicBlock.h	/^  typedef Instructions::iterator                                 instr_iterator;$/;"	t	class:llvm::MachineBasicBlock
instr_rbegin	CodeGen/MachineBasicBlock.h	/^  const_reverse_instr_iterator instr_rbegin() const { return Insts.rbegin(); }$/;"	f	class:llvm::MachineBasicBlock
instr_rbegin	CodeGen/MachineBasicBlock.h	/^  reverse_instr_iterator       instr_rbegin()       { return Insts.rbegin(); }$/;"	f	class:llvm::MachineBasicBlock
instr_rend	CodeGen/MachineBasicBlock.h	/^  const_reverse_instr_iterator instr_rend  () const { return Insts.rend();   }$/;"	f	class:llvm::MachineBasicBlock
instr_rend	CodeGen/MachineBasicBlock.h	/^  reverse_instr_iterator       instr_rend  ()       { return Insts.rend();   }$/;"	f	class:llvm::MachineBasicBlock
instructionDeleted	Transforms/Utils/SSAUpdater.h	/^  virtual void instructionDeleted(Instruction *I) const {$/;"	f	class:llvm::LoadAndStorePromoter
instructionType	MC/EDInstInfo.h	/^  uint8_t       instructionType;$/;"	m	struct:llvm::EDInstInfo
insufficient_buffer	Support/system_error.h	/^  insufficient_buffer     = 122, \/\/ ERROR_INSUFFICIENT_BUFFER,$/;"	e	enum:llvm::windows_error::_
integerPart	ADT/APInt.h	/^  typedef uint64_t integerPart;$/;"	t	namespace:llvm
integerPartWidth	ADT/APInt.h	/^  const unsigned int integerPartWidth = host_char_bit *$/;"	m	namespace:llvm
integral_constant	Support/type_traits.h	/^struct integral_constant {$/;"	s	namespace:llvm
interrupted	Support/system_error.h	/^  interrupted                         = EINTR,$/;"	e	enum:llvm::errc::_
intersectOptionalDataWith	Value.h	/^  void intersectOptionalDataWith(const Value *V) {$/;"	f	class:llvm::Value
intersectWith	ADT/SparseBitVector.h	/^  bool intersectWith(const SparseBitVectorElement &RHS,$/;"	f	struct:llvm::SparseBitVectorElement
intersectWithComplement	ADT/SparseBitVector.h	/^  bool intersectWithComplement(const SparseBitVector &RHS) {$/;"	f	class:llvm::SparseBitVector
intersectWithComplement	ADT/SparseBitVector.h	/^  bool intersectWithComplement(const SparseBitVector<ElementSize> *RHS) const {$/;"	f	class:llvm::SparseBitVector
intersectWithComplement	ADT/SparseBitVector.h	/^  bool intersectWithComplement(const SparseBitVectorElement &RHS,$/;"	f	struct:llvm::SparseBitVectorElement
intersectWithComplement	ADT/SparseBitVector.h	/^  void intersectWithComplement(const SparseBitVector<ElementSize> &RHS1,$/;"	f	class:llvm::SparseBitVector
intersectWithComplement	ADT/SparseBitVector.h	/^  void intersectWithComplement(const SparseBitVector<ElementSize> *RHS1,$/;"	f	class:llvm::SparseBitVector
intersectWithComplement	ADT/SparseBitVector.h	/^  void intersectWithComplement(const SparseBitVectorElement &RHS1,$/;"	f	struct:llvm::SparseBitVectorElement
intersects	ADT/APInt.h	/^  bool intersects(const APInt &RHS) const {$/;"	f	class:llvm::APInt
intersects	ADT/SparseBitVector.h	/^  bool intersects(const SparseBitVector<ElementSize> &RHS) const {$/;"	f	class:llvm::SparseBitVector
intersects	ADT/SparseBitVector.h	/^  bool intersects(const SparseBitVector<ElementSize> *RHS) const {$/;"	f	class:llvm::SparseBitVector
intersects	ADT/SparseBitVector.h	/^  bool intersects(const SparseBitVectorElement &RHS) const {$/;"	f	struct:llvm::SparseBitVectorElement
interval_part_interval_iterator	Analysis/IntervalIterator.h	/^                                          interval_part_interval_iterator;$/;"	t	namespace:llvm
intervals_begin	Analysis/IntervalIterator.h	/^   intervals_begin(IntervalPartition &IP, bool DeleteIntervals = true) {$/;"	f	namespace:llvm
intervals_begin	Analysis/IntervalIterator.h	/^inline function_interval_iterator intervals_begin(Function *F,$/;"	f	namespace:llvm
intervals_end	Analysis/IntervalIterator.h	/^inline function_interval_iterator intervals_end(Function *) {$/;"	f	namespace:llvm
intervals_end	Analysis/IntervalIterator.h	/^inline interval_part_interval_iterator intervals_end(IntervalPartition &IP) {$/;"	f	namespace:llvm
invalid_access	Support/system_error.h	/^  invalid_access          = 12, \/\/ ERROR_INVALID_ACCESS,$/;"	e	enum:llvm::windows_error::_
invalid_argument	Support/system_error.h	/^  invalid_argument                    = EINVAL,$/;"	e	enum:llvm::errc::_
invalid_block	Support/system_error.h	/^  invalid_block           = 9, \/\/ ERROR_INVALID_BLOCK,$/;"	e	enum:llvm::windows_error::_
invalid_drive	Support/system_error.h	/^  invalid_drive           = 15, \/\/ ERROR_INVALID_DRIVE,$/;"	e	enum:llvm::windows_error::_
invalid_file_type	Object/Error.h	/^  invalid_file_type,$/;"	e	enum:llvm::object::object_error::_
invalid_function	Support/system_error.h	/^  invalid_function        = 1, \/\/ ERROR_INVALID_FUNCTION,$/;"	e	enum:llvm::windows_error::_
invalid_handle	Support/system_error.h	/^  invalid_handle          = 6, \/\/ ERROR_INVALID_HANDLE,$/;"	e	enum:llvm::windows_error::_
invalid_seek	Support/system_error.h	/^  invalid_seek                        = ESPIPE,$/;"	e	enum:llvm::errc::_
invalidateLiveness	CodeGen/MachineRegisterInfo.h	/^  void invalidateLiveness() { TracksLiveness = false; }$/;"	f	class:llvm::MachineRegisterInfo
io_error	Support/system_error.h	/^  io_error                            = EIO,$/;"	e	enum:llvm::errc::_
iplist	ADT/ilist.h	/^  iplist() : Head(this->provideInitialHead()) {}$/;"	f	class:llvm::iplist
iplist	ADT/ilist.h	/^class iplist : public Traits {$/;"	c	namespace:llvm
ipo_begin	ADT/PostOrderIterator.h	/^ipo_iterator<T> ipo_begin(T G, bool Reverse = false) {$/;"	f	namespace:llvm
ipo_end	ADT/PostOrderIterator.h	/^ipo_iterator<T> ipo_end(T G){$/;"	f	namespace:llvm
ipo_ext_begin	ADT/PostOrderIterator.h	/^ipo_ext_iterator<T, SetType> ipo_ext_begin(T G, SetType &S) {$/;"	f	namespace:llvm
ipo_ext_end	ADT/PostOrderIterator.h	/^ipo_ext_iterator<T, SetType> ipo_ext_end(T G, SetType &S) {$/;"	f	namespace:llvm
ipo_ext_iterator	ADT/PostOrderIterator.h	/^  ipo_ext_iterator(const ipo_iterator<T, SetType, true> &V) :$/;"	f	struct:llvm::ipo_ext_iterator
ipo_ext_iterator	ADT/PostOrderIterator.h	/^  ipo_ext_iterator(const po_iterator<Inverse<T>, SetType, true> &V) :$/;"	f	struct:llvm::ipo_ext_iterator
ipo_ext_iterator	ADT/PostOrderIterator.h	/^struct ipo_ext_iterator : public ipo_iterator<T, SetType, true> {$/;"	s	namespace:llvm
ipo_iterator	ADT/PostOrderIterator.h	/^  ipo_iterator(const po_iterator<Inverse<T>, SetType, External> &V) :$/;"	f	struct:llvm::ipo_iterator
ipo_iterator	ADT/PostOrderIterator.h	/^struct ipo_iterator : public po_iterator<Inverse<T>, SetType, External > {$/;"	s	namespace:llvm
iprintf	Target/TargetLibraryInfo.h	/^      iprintf,$/;"	e	enum:llvm::LibFunc::Func
irefsym	Support/MachO.h	/^      uint32_t irefsym;$/;"	m	struct:llvm::MachO::dylib_module
irefsym	Support/MachO.h	/^      uint32_t irefsym;$/;"	m	struct:llvm::MachO::dylib_module_64
is	ADT/PointerUnion.h	/^      int is() const {$/;"	f	struct:llvm::PointerUnion3::IsInnerUnion
is	ADT/PointerUnion.h	/^      int is() const {$/;"	f	struct:llvm::PointerUnion3::IsPT3
is	ADT/PointerUnion.h	/^    int is() const {$/;"	f	class:llvm::PointerUnion3
is	ADT/PointerUnion.h	/^    int is() const {$/;"	f	class:llvm::PointerUnion4
is	MC/MCParser/MCAsmLexer.h	/^  bool is(AsmToken::TokenKind K) const { return CurTok.is(K); }$/;"	f	class:llvm::MCAsmLexer
is	MC/MCParser/MCAsmLexer.h	/^  bool is(TokenKind K) const { return Kind == K; }$/;"	f	class:llvm::AsmToken
is	MC/MCTargetAsmLexer.h	/^  bool is(AsmToken::TokenKind K) const { return CurTok.is(K); }$/;"	f	class:llvm::MCTargetAsmLexer
is1024BitVector	CodeGen/ValueTypes.h	/^    bool is1024BitVector() const {$/;"	f	class:llvm::MVT
is1024BitVector	CodeGen/ValueTypes.h	/^    bool is1024BitVector() const {$/;"	f	struct:llvm::EVT
is128BitVector	CodeGen/ValueTypes.h	/^    bool is128BitVector() const {$/;"	f	class:llvm::MVT
is128BitVector	CodeGen/ValueTypes.h	/^    bool is128BitVector() const {$/;"	f	struct:llvm::EVT
is16BitVector	CodeGen/ValueTypes.h	/^    bool is16BitVector() const {$/;"	f	class:llvm::MVT
is16BitVector	CodeGen/ValueTypes.h	/^    bool is16BitVector() const {$/;"	f	struct:llvm::EVT
is256BitVector	CodeGen/ValueTypes.h	/^    bool is256BitVector() const {$/;"	f	class:llvm::MVT
is256BitVector	CodeGen/ValueTypes.h	/^    bool is256BitVector() const {$/;"	f	struct:llvm::EVT
is32BitVector	CodeGen/ValueTypes.h	/^    bool is32BitVector() const {$/;"	f	class:llvm::MVT
is32BitVector	CodeGen/ValueTypes.h	/^    bool is32BitVector() const {$/;"	f	struct:llvm::EVT
is512BitVector	CodeGen/ValueTypes.h	/^    bool is512BitVector() const {$/;"	f	class:llvm::MVT
is512BitVector	CodeGen/ValueTypes.h	/^    bool is512BitVector() const {$/;"	f	struct:llvm::EVT
is64Bit	MC/MCELFObjectWriter.h	/^  bool is64Bit() const { return Is64Bit; }$/;"	f	class:llvm::MCELFObjectTargetWriter
is64Bit	MC/MCMachObjectWriter.h	/^  bool is64Bit() const { return Is64Bit; }$/;"	f	class:llvm::MCMachObjectTargetWriter
is64Bit	MC/MCMachObjectWriter.h	/^  bool is64Bit() const { return TargetObjectWriter->is64Bit(); }$/;"	f	class:llvm::MachObjectWriter
is64Bit	Object/MachOObject.h	/^  bool is64Bit() const { return Is64Bit; }$/;"	f	class:llvm::object::MachOObject
is64Bit	Support/OutputBuffer.h	/^    bool is64Bit, isLittleEndian;$/;"	m	class:llvm::OutputBuffer
is64Bit	Target/TargetELFWriterInfo.h	/^    bool is64Bit, isLittleEndian;$/;"	m	class:llvm::TargetELFWriterInfo
is64BitVector	CodeGen/ValueTypes.h	/^    bool is64BitVector() const {$/;"	f	class:llvm::MVT
is64BitVector	CodeGen/ValueTypes.h	/^    bool is64BitVector() const {$/;"	f	struct:llvm::EVT
isARM	MC/MCMachObjectWriter.h	/^  bool isARM() const {$/;"	f	class:llvm::MachObjectWriter
isASubClass	Target/TargetRegisterInfo.h	/^  bool isASubClass() const {$/;"	f	class:llvm::TargetRegisterClass
isAbsolute	MC/MCSymbol.h	/^    bool isAbsolute() const {$/;"	f	class:llvm::MCSymbol
isAbsolute	MC/MCValue.h	/^  bool isAbsolute() const { return !SymA && !SymB; }$/;"	f	class:llvm::MCValue
isAbstractScope	CodeGen/LexicalScopes.h	/^  bool isAbstractScope() const                  { return AbstractScope; }$/;"	f	class:llvm::LexicalScope
isAffine	Analysis/ScalarEvolutionExpressions.h	/^    bool isAffine() const {$/;"	f	class:llvm::SCEVAddRecExpr
isAggregateType	Type.h	/^  bool isAggregateType() const {$/;"	f	class:llvm::Type
isAlignStack	InlineAsm.h	/^  bool isAlignStack() const { return IsAlignStack; }$/;"	f	class:llvm::InlineAsm
isAllOnesValue	ADT/APInt.h	/^  bool isAllOnesValue() const {$/;"	f	class:llvm::APInt
isAllOnesValue	CodeGen/SelectionDAGNodes.h	/^  bool isAllOnesValue() const { return Value->isAllOnesValue(); }$/;"	f	class:llvm::ConstantSDNode
isAllocable	CodeGen/PBQP/Heuristics/Briggs.h	/^        bool isHeuristic, isAllocable, isInitialized;$/;"	m	struct:PBQP::Heuristics::Briggs::NodeData
isAllocatable	CodeGen/MachineRegisterInfo.h	/^  bool isAllocatable(unsigned PhysReg) const {$/;"	f	class:llvm::MachineRegisterInfo
isAllocatable	MC/MCRegisterInfo.h	/^  bool isAllocatable() const { return Allocatable; }$/;"	f	class:llvm::MCRegisterClass
isAllocatable	Target/TargetRegisterInfo.h	/^  bool isAllocatable() const { return MC->isAllocatable(); }$/;"	f	class:llvm::TargetRegisterClass
isAllocated	CodeGen/CallingConvLower.h	/^  bool isAllocated(unsigned Reg) const {$/;"	f	class:llvm::CCState
isAlways	Analysis/InlineCost.h	/^    bool isAlways() const   { return Cost == AlwaysInlineCost; }$/;"	f	class:llvm::InlineCost
isAnalysis	PassSupport.h	/^  bool isAnalysis() const { return IsAnalysis; }$/;"	f	class:llvm::PassInfo
isAnalysisGroup	PassSupport.h	/^  bool isAnalysisGroup() const { return IsAnalysisGroup; }$/;"	f	class:llvm::PassInfo
isAny	Analysis/DependenceAnalysis.h	/^      bool isAny() const { return Kind == Any; }$/;"	f	class:llvm::DependenceAnalysis::Constraint
isAppendingLinkage	GlobalValue.h	/^  static bool isAppendingLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isAppleBlockExtension	DebugInfo.h	/^    bool isAppleBlockExtension() const {$/;"	f	class:llvm::DIType
isArchive	Object/Binary.h	/^  bool isArchive() const {$/;"	f	class:llvm::object::Binary
isArithmeticShift	Instruction.h	/^  inline bool isArithmeticShift() const {$/;"	f	class:llvm::Instruction
isArrayTy	Type.h	/^  bool isArrayTy() const { return getTypeID() == ArrayTyID; }$/;"	f	class:llvm::Type
isArtificial	CodeGen/ScheduleDAG.h	/^        bool isArtificial : 1;$/;"	m	struct:llvm::SDep::__anon41::__anon42
isArtificial	CodeGen/ScheduleDAG.h	/^    bool isArtificial() const {$/;"	f	class:llvm::SDep
isArtificial	DebugInfo.h	/^    bool isArtificial() const    { $/;"	f	class:llvm::DIVariable
isArtificial	DebugInfo.h	/^    bool isArtificial() const {$/;"	f	class:llvm::DIType
isArtificial	DebugInfo.h	/^    unsigned isArtificial() const    { $/;"	f	class:llvm::DISubprogram
isArtificialDep	CodeGen/ScheduleDAG.h	/^    bool isArtificialDep() const {$/;"	f	class:llvm::SUnitIterator
isAsCheapAsAMove	CodeGen/MachineInstr.h	/^  bool isAsCheapAsAMove(QueryType Type = AllInBundle) const {$/;"	f	class:llvm::MachineInstr
isAsCheapAsAMove	MC/MCInstrDesc.h	/^  bool isAsCheapAsAMove() const {$/;"	f	class:llvm::MCInstrDesc
isAssignObjCProperty	DebugInfo.h	/^    bool isAssignObjCProperty() {$/;"	f	class:llvm::DIDerivedType
isAssignObjCProperty	DebugInfo.h	/^    bool isAssignObjCProperty() {$/;"	f	class:llvm::DIObjCProperty
isAssignedRegDep	CodeGen/ScheduleDAG.h	/^    bool isAssignedRegDep() const {$/;"	f	class:llvm::SDep
isAssociative	Instruction.h	/^  bool isAssociative() const { return isAssociative(getOpcode()); }$/;"	f	class:llvm::Instruction
isAtConstant	Analysis/ConstantsScanner.h	/^  inline bool isAtConstant() const {$/;"	f	class:llvm::constant_iterator
isAtEnd	ADT/SCCIterator.h	/^  inline bool isAtEnd() const {$/;"	f	class:llvm::scc_iterator
isAtEnd	Support/YAMLParser.h	/^  bool isAtEnd() const {$/;"	f	class:llvm::yaml::document_iterator
isAtStartOfLine	MC/MCParser/AsmLexer.h	/^  bool isAtStartOfLine;$/;"	m	class:llvm::AsmLexer
isAtomic	Instructions.h	/^  bool isAtomic() const { return getOrdering() != NotAtomic; }$/;"	f	class:llvm::LoadInst
isAtomic	Instructions.h	/^  bool isAtomic() const { return getOrdering() != NotAtomic; }$/;"	f	class:llvm::StoreInst
isAvailableExternallyLinkage	GlobalValue.h	/^  static bool isAvailableExternallyLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isBB	CodeGen/MachineRelocation.h	/^    isBB,             \/\/ Relocation of BB address.$/;"	e	enum:llvm::MachineRelocation::AddressType
isBSD4SymbolTable	Bitcode/Archive.h	/^    bool isBSD4SymbolTable() const { return flags&BSD4SymbolTableFlag; }$/;"	f	class:llvm::ArchiveMember
isBSS	MC/SectionKind.h	/^  bool isBSS() const { return K == BSS || K == BSSLocal || K == BSSExtern; }$/;"	f	class:llvm::SectionKind
isBSS	Object/ObjectFile.h	/^inline error_code SectionRef::isBSS(bool &Result) const {$/;"	f	class:llvm::object::SectionRef
isBSSExtern	MC/SectionKind.h	/^  bool isBSSExtern() const { return K == BSSExtern; }$/;"	f	class:llvm::SectionKind
isBSSLocal	MC/SectionKind.h	/^  bool isBSSLocal() const { return K == BSSLocal; }$/;"	f	class:llvm::SectionKind
isBackedge	Analysis/BlockFrequencyImpl.h	/^  bool isBackedge(BlockT *Src, BlockT *Dst) {$/;"	f	class:llvm::BlockFrequencyImpl
isBarrier	CodeGen/MachineInstr.h	/^  bool isBarrier(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
isBarrier	MC/MCInstrDesc.h	/^  bool isBarrier() const {$/;"	f	class:llvm::MCInstrDesc
isBaseAddressKnownZero	MC/MCSection.h	/^    virtual bool isBaseAddressKnownZero() const {$/;"	f	class:llvm::MCSection
isBaseAddressKnownZero	MC/MCSectionELF.h	/^  virtual bool isBaseAddressKnownZero() const {$/;"	f	class:llvm::MCSectionELF
isBasicBlock	CodeGen/MachineRelocation.h	/^  bool isBasicBlock() const {$/;"	f	class:llvm::MachineRelocation
isBeforeLegalize	Target/TargetLowering.h	/^    bool isBeforeLegalize() const { return BeforeLegalize; }$/;"	f	struct:llvm::TargetLowering::DAGCombinerInfo
isBeforeLegalizeOps	Target/TargetLowering.h	/^    bool isBeforeLegalizeOps() const { return BeforeLegalizeOps; }$/;"	f	struct:llvm::TargetLowering::DAGCombinerInfo
isBigEndian	DataLayout.h	/^  bool isBigEndian() const { return !LittleEndian; }$/;"	f	class:llvm::DataLayout
isBigEndian	Target/TargetLowering.h	/^  bool isBigEndian() const { return !IsLittleEndian; }$/;"	f	class:llvm::TargetLowering
isBigEndianHost	Support/Host.h	/^  inline bool isBigEndianHost() {$/;"	f	namespace:llvm::sys
isBinary	ADT/Twine.h	/^    bool isBinary() const {$/;"	f	class:llvm::Twine
isBinaryOp	Instruction.h	/^  bool isBinaryOp() const { return isBinaryOp(getOpcode()); }$/;"	f	class:llvm::Instruction
isBinaryOp	Instruction.h	/^  static inline bool isBinaryOp(unsigned Opcode) {$/;"	f	class:llvm::Instruction
isBitcast	CodeGen/MachineInstr.h	/^  bool isBitcast(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
isBitcast	MC/MCInstrDesc.h	/^  bool isBitcast() const {$/;"	f	class:llvm::MCInstrDesc
isBitcode	Bitcode/Archive.h	/^    bool isBitcode() const { return flags&BitcodeFlag; }$/;"	f	class:llvm::ArchiveMember
isBitcode	Bitcode/ReaderWriter.h	/^  inline bool isBitcode(const unsigned char *BufPtr,$/;"	f	namespace:llvm
isBitcodeWrapper	Bitcode/ReaderWriter.h	/^  inline bool isBitcodeWrapper(const unsigned char *BufPtr,$/;"	f	namespace:llvm
isBlock	CodeGen/SlotIndexes.h	/^    bool isBlock() const { return getSlot() == Slot_Block; }$/;"	f	class:llvm::SlotIndex
isBlockAddress	CodeGen/MachineOperand.h	/^  bool isBlockAddress() const { return OpKind == MO_BlockAddress; }$/;"	f	class:llvm::MachineOperand
isBlockByrefStruct	DebugInfo.h	/^    bool isBlockByrefStruct() const {$/;"	f	class:llvm::DIType
isBlockByrefVariable	DebugInfo.h	/^    bool isBlockByrefVariable() const {$/;"	f	class:llvm::DIVariable
isBlockExecutable	Analysis/SparsePropagation.h	/^  bool isBlockExecutable(BasicBlock *BB) const {$/;"	f	class:llvm::SparseSolver
isBottomReady	CodeGen/ScheduleDAG.h	/^    bool isBottomReady() const {$/;"	f	class:llvm::SUnit
isBottomUp	CodeGen/LatencyPriorityQueue.h	/^    bool isBottomUp() const { return false; }$/;"	f	class:llvm::LatencyPriorityQueue
isBottomUp	CodeGen/ResourcePriorityQueue.h	/^    bool isBottomUp() const { return false; }$/;"	f	class:llvm::ResourcePriorityQueue
isBranch	CodeGen/MachineInstr.h	/^  bool isBranch(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
isBranch	MC/MCInstrAnalysis.h	/^  virtual bool isBranch(const MCInst &Inst) const {$/;"	f	class:llvm::MCInstrAnalysis
isBranch	MC/MCInstrDesc.h	/^  bool isBranch() const {$/;"	f	class:llvm::MCInstrDesc
isBundle	CodeGen/MachineInstr.h	/^  bool isBundle() const {$/;"	f	class:llvm::MachineInstr
isByVal	Target/TargetCallingConv.h	/^    bool isByVal()  const { return Flags & ByVal; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
isByVal	Target/TargetLowering.h	/^    bool isByVal : 1;$/;"	m	struct:llvm::TargetLowering::ArgListEntry
isByValArgument	Support/CallSite.h	/^  bool isByValArgument(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
isByteSized	CodeGen/ValueTypes.h	/^    bool isByteSized() const {$/;"	f	struct:llvm::EVT
isCFGOnlyPass	PassSupport.h	/^  bool isCFGOnlyPass() const { return IsCFGOnlyPass; }$/;"	f	class:llvm::PassInfo
isCImm	CodeGen/MachineOperand.h	/^  bool isCImm() const { return OpKind == MO_CImmediate; }$/;"	f	class:llvm::MachineOperand
isCOFF	Object/Binary.h	/^  bool isCOFF() const {$/;"	f	class:llvm::object::Binary
isCPI	CodeGen/MachineOperand.h	/^  bool isCPI() const { return OpKind == MO_ConstantPoolIndex; }$/;"	f	class:llvm::MachineOperand
isCall	CodeGen/MachineInstr.h	/^  bool isCall(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
isCall	MC/MCInstrAnalysis.h	/^  virtual bool isCall(const MCInst &Inst) const {$/;"	f	class:llvm::MCInstrAnalysis
isCall	MC/MCInstrDesc.h	/^  bool isCall() const {$/;"	f	class:llvm::MCInstrDesc
isCall	Support/CallSite.h	/^  bool isCall() const { return I.getInt(); }$/;"	f	class:llvm::CallSiteBase
isCalledByLegalizer	Target/TargetLowering.h	/^    bool isCalledByLegalizer() const { return CalledByLegalizer; }$/;"	f	struct:llvm::TargetLowering::DAGCombinerInfo
isCallee	Support/CallSite.h	/^  bool isCallee(value_use_iterator<UserTy> UI) const {$/;"	f	class:llvm::CallSiteBase
isCalleeSavedInfoValid	CodeGen/MachineFrameInfo.h	/^  bool isCalleeSavedInfoValid() const { return CSIValid; }$/;"	f	class:llvm::MachineFrameInfo
isCast	Instruction.h	/^  bool isCast() const { return isCast(getOpcode()); }$/;"	f	class:llvm::Instruction
isCast	Instruction.h	/^  static inline bool isCast(unsigned OpCode) {$/;"	f	class:llvm::Instruction
isCatch	Instructions.h	/^  bool isCatch(unsigned Idx) const {$/;"	f	class:llvm::LandingPadInst
isChar6	Bitcode/BitCodes.h	/^  static bool isChar6(char C) {$/;"	f	class:llvm::BitCodeAbbrevOp
isCleanup	Instructions.h	/^  bool isCleanup() const { return getSubclassDataFromInstruction() & 1; }$/;"	f	class:llvm::LandingPadInst
isClobber	Analysis/MemoryDependenceAnalysis.h	/^    bool isClobber() const { return Value.getInt() == Clobber; }$/;"	f	class:llvm::MemDepResult
isClobber	InlineAsm.h	/^    isClobber           \/\/ '~x'$/;"	e	enum:llvm::InlineAsm::ConstraintPrefix
isClobberKind	InlineAsm.h	/^  static bool isClobberKind(unsigned Flag) {$/;"	f	class:llvm::InlineAsm
isCoalescableExtInstr	Target/TargetInstrInfo.h	/^  virtual bool isCoalescableExtInstr(const MachineInstr &MI,$/;"	f	class:llvm::TargetInstrInfo
isCommon	MC/MCAssembler.h	/^  bool isCommon() const { return CommonSize != 0; }$/;"	f	class:llvm::MCSymbolData
isCommon	MC/SectionKind.h	/^  bool isCommon() const { return K == Common; }$/;"	f	class:llvm::SectionKind
isCommonLinkage	GlobalValue.h	/^  static bool isCommonLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isCommutable	CodeGen/MachineInstr.h	/^  bool isCommutable(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
isCommutable	MC/MCInstrDesc.h	/^  bool isCommutable() const {$/;"	f	class:llvm::MCInstrDesc
isCommutative	InlineAsm.h	/^    bool isCommutative;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
isCommutative	Instruction.h	/^  bool isCommutative() const { return isCommutative(getOpcode()); }$/;"	f	class:llvm::Instruction
isCommutative	Instructions.h	/^  bool isCommutative() const { return isEquality(); }$/;"	f	class:llvm::ICmpInst
isCommutative	Instructions.h	/^  bool isCommutative() const {$/;"	f	class:llvm::FCmpInst
isCommutativeBinOp	CodeGen/SelectionDAG.h	/^  static bool isCommutativeBinOp(unsigned Opcode) {$/;"	f	class:llvm::SelectionDAG
isCompare	CodeGen/MachineInstr.h	/^  bool isCompare(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
isCompare	MC/MCInstrDesc.h	/^  bool isCompare() const {$/;"	f	class:llvm::MCInstrDesc
isCompareAndSwap	CodeGen/SelectionDAGNodes.h	/^  bool isCompareAndSwap() const {$/;"	f	class:llvm::AtomicSDNode
isCompilingLazily	ExecutionEngine/ExecutionEngine.h	/^  bool isCompilingLazily() const {$/;"	f	class:llvm::ExecutionEngine
isComplete	Analysis/LoopIterator.h	/^  bool isComplete() const { return PostBlocks.size() == L->getNumBlocks(); }$/;"	f	class:llvm::LoopBlocksDFS
isComplete	TableGen/Record.h	/^  virtual bool isComplete() const { return false; }$/;"	f	class:llvm::TernOpInit
isComplete	TableGen/Record.h	/^  virtual bool isComplete() const { return false; }$/;"	f	class:llvm::UnsetInit
isComplete	TableGen/Record.h	/^  virtual bool isComplete() const { return true; }$/;"	f	class:llvm::Init
isComplete	TableGen/Record.h	/^  virtual bool isComplete() const {$/;"	f	class:llvm::BitsInit
isCompleteList	Analysis/ScalarEvolution.h	/^      bool isCompleteList() const {$/;"	f	struct:llvm::ScalarEvolution::ExitNotTakenInfo
isCondCodeLegal	Target/TargetLowering.h	/^  bool isCondCodeLegal(ISD::CondCode CC, EVT VT) const {$/;"	f	class:llvm::TargetLowering
isConditional	Instructions.h	/^  bool isConditional()   const { return getNumOperands() == 3; }$/;"	f	class:llvm::BranchInst
isConditionalBranch	CodeGen/MachineInstr.h	/^  bool isConditionalBranch(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
isConditionalBranch	MC/MCInstrAnalysis.h	/^  virtual bool isConditionalBranch(const MCInst &Inst) const {$/;"	f	class:llvm::MCInstrAnalysis
isConditionalBranch	MC/MCInstrDesc.h	/^  bool isConditionalBranch() const {$/;"	f	class:llvm::MCInstrDesc
isConfused	Analysis/DependenceAnalysis.h	/^    bool isConfused() const { return false; }$/;"	f	class:llvm::FullDependence
isConfused	Analysis/DependenceAnalysis.h	/^    virtual bool isConfused() const { return true; }$/;"	f	class:llvm::Dependence
isConsistent	Analysis/DependenceAnalysis.h	/^    bool isConsistent() const { return Consistent; }$/;"	f	class:llvm::FullDependence
isConsistent	Analysis/DependenceAnalysis.h	/^    virtual bool isConsistent() const { return false; }$/;"	f	class:llvm::Dependence
isConstPool	CodeGen/MachineRelocation.h	/^    isConstPool,      \/\/ Relocation of constant pool address.$/;"	e	enum:llvm::MachineRelocation::AddressType
isConstant	GlobalVariable.h	/^  bool isConstant() const { return isConstantGlobal; }$/;"	f	class:llvm::GlobalVariable
isConstantPoolIndex	CodeGen/MachineRelocation.h	/^  bool isConstantPoolIndex() const {$/;"	f	class:llvm::MachineRelocation
isConstructed	Support/ManagedStatic.h	/^  bool isConstructed() const { return Ptr != 0; }$/;"	f	class:llvm::ManagedStaticBase
isContainedIn	ADT/ImmutableIntervalMap.h	/^  static bool isContainedIn(key_type_ref K, key_type_ref L) {$/;"	f	struct:llvm::ImutIntervalInfo
isConvertibleTo3Addr	CodeGen/MachineInstr.h	/^  bool isConvertibleTo3Addr(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
isConvertibleTo3Addr	MC/MCInstrDesc.h	/^  bool isConvertibleTo3Addr() const {$/;"	f	class:llvm::MCInstrDesc
isCopy	CodeGen/MachineInstr.h	/^  bool isCopy() const {$/;"	f	class:llvm::MachineInstr
isCopyLike	CodeGen/MachineInstr.h	/^  bool isCopyLike() const {$/;"	f	class:llvm::MachineInstr
isCopyObjCProperty	DebugInfo.h	/^    bool isCopyObjCProperty() {$/;"	f	class:llvm::DIDerivedType
isCopyObjCProperty	DebugInfo.h	/^    bool isCopyObjCProperty() {$/;"	f	class:llvm::DIObjCProperty
isCtrl	CodeGen/ScheduleDAG.h	/^    bool isCtrl() const {$/;"	f	class:llvm::SDep
isCtrlDep	CodeGen/ScheduleDAG.h	/^    bool isCtrlDep() const {$/;"	f	class:llvm::SUnitIterator
isCurrentDebugType	Support/Debug.h	72;"	d
isCurrentFunctionScope	CodeGen/LexicalScopes.h	/^  bool isCurrentFunctionScope(const LexicalScope *LS) { $/;"	f	class:llvm::LexicalScopes
isDLLExportLinkage	GlobalValue.h	/^  static bool isDLLExportLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isDLLImportLinkage	GlobalValue.h	/^  static bool isDLLImportLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isData	Object/ObjectFile.h	/^inline error_code SectionRef::isData(bool &Result) const {$/;"	f	class:llvm::object::SectionRef
isDataAtom	MC/MCAtom.h	/^  bool isDataAtom() { return Type == DataAtom; }$/;"	f	class:llvm::MCAtom
isDataEqual	ADT/ImmutableIntervalMap.h	/^  static bool isDataEqual(data_type_ref L, data_type_ref R) {$/;"	f	struct:llvm::ImutIntervalInfo
isDataEqual	ADT/ImmutableMap.h	/^  static inline bool isDataEqual(data_type_ref L, data_type_ref R) {$/;"	f	struct:llvm::ImutKeyValueInfo
isDataEqual	ADT/ImmutableSet.h	/^  static inline bool isDataEqual(data_type_ref,data_type_ref) { return true; }$/;"	f	struct:llvm::ImutContainerInfo
isDataNoRel	MC/SectionKind.h	/^  bool isDataNoRel() const { return K == DataNoRel; }$/;"	f	class:llvm::SectionKind
isDataRel	MC/SectionKind.h	/^  bool isDataRel() const {$/;"	f	class:llvm::SectionKind
isDataRelLocal	MC/SectionKind.h	/^  bool isDataRelLocal() const {$/;"	f	class:llvm::SectionKind
isDead	CodeGen/MachineOperand.h	/^  bool isDead() const {$/;"	f	class:llvm::MachineOperand
isDead	CodeGen/SlotIndexes.h	/^    bool isDead() const { return getSlot() == Slot_Dead; }$/;"	f	class:llvm::SlotIndex
isDeadDef	CodeGen/LiveInterval.h	/^    bool isDeadDef() const {$/;"	f	class:llvm::LiveRangeQuery
isDeadObjectIndex	CodeGen/MachineFrameInfo.h	/^  bool isDeadObjectIndex(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
isDebug	CodeGen/MachineOperand.h	/^  bool isDebug() const {$/;"	f	class:llvm::MachineOperand
isDebugValue	CodeGen/MachineInstr.h	/^  bool isDebugValue() const { return getOpcode() == TargetOpcode::DBG_VALUE; }$/;"	f	class:llvm::MachineInstr
isDef	Analysis/MemoryDependenceAnalysis.h	/^    bool isDef() const { return Value.getInt() == Def; }$/;"	f	class:llvm::MemDepResult
isDef	CodeGen/MachineOperand.h	/^  bool isDef() const {$/;"	f	class:llvm::MachineOperand
isDefined	MC/MCSymbol.h	/^    bool isDefined() const {$/;"	f	class:llvm::MCSymbol
isDefinition	DebugInfo.h	/^    unsigned isDefinition() const       { return getUnsignedField(10); }$/;"	f	class:llvm::DIGlobalVariable
isDefinition	DebugInfo.h	/^    unsigned isDefinition() const      { return getUnsignedField(10); }$/;"	f	class:llvm::DISubprogram
isDegeneratePartition	Analysis/IntervalPartition.h	/^  bool isDegeneratePartition() { return Intervals.size() == 1; }$/;"	f	class:llvm::IntervalPartition
isDerivedType	Type.h	/^  bool isDerivedType()   const { return getTypeID() >= FirstDerivedTyID; }$/;"	f	class:llvm::Type
isDesirableToTransformToIntegerOp	Target/TargetLowering.h	/^  virtual bool isDesirableToTransformToIntegerOp(unsigned \/*Opc*\/,$/;"	f	class:llvm::TargetLowering
isDirty	Analysis/MemoryDependenceAnalysis.h	/^    bool isDirty() const { return Value.getInt() == Invalid; }$/;"	f	class:llvm::MemDepResult
isDiscardableIfUnused	GlobalValue.h	/^  bool isDiscardableIfUnused() const {$/;"	f	class:llvm::GlobalValue
isDiscardableIfUnused	GlobalValue.h	/^  static bool isDiscardableIfUnused(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isDistance	Analysis/DependenceAnalysis.h	/^      bool isDistance() const { return Kind == Distance; }$/;"	f	class:llvm::DependenceAnalysis::Constraint
isDoubleTy	Type.h	/^  bool isDoubleTy() const { return getTypeID() == DoubleTyID; }$/;"	f	class:llvm::Type
isDyldELFObject	Object/ELF.h	/^  bool isDyldELFObject;$/;"	m	class:llvm::object::ELFObjectFile
isDyldType	Object/ELF.h	/^  bool isDyldType() const { return isDyldELFObject; }$/;"	f	class:llvm::object::ELFObjectFile
isEHLabel	CodeGen/MachineInstr.h	/^  bool isEHLabel() const { return getOpcode() == TargetOpcode::EH_LABEL; }$/;"	f	class:llvm::MachineInstr
isELF	Object/Binary.h	/^  bool isELF() const {$/;"	f	class:llvm::object::Binary
isEXTLoad	CodeGen/SelectionDAGNodes.h	/^  inline bool isEXTLoad(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isEarlierInstr	CodeGen/SlotIndexes.h	/^    static bool isEarlierInstr(SlotIndex A, SlotIndex B) {$/;"	f	class:llvm::SlotIndex
isEarlyClobber	CodeGen/MachineOperand.h	/^  bool isEarlyClobber() const {$/;"	f	class:llvm::MachineOperand
isEarlyClobber	CodeGen/SlotIndexes.h	/^    bool isEarlyClobber() const { return getSlot() == Slot_EarlyClobber; }$/;"	f	class:llvm::SlotIndex
isEarlyClobber	InlineAsm.h	/^    bool isEarlyClobber; $/;"	m	struct:llvm::InlineAsm::ConstraintInfo
isElementEqual	ADT/ImmutableSet.h	/^  bool isElementEqual(const ImutAVLTree* RHS) const {$/;"	f	class:llvm::ImutAVLTree
isElementEqual	ADT/ImmutableSet.h	/^  bool isElementEqual(value_type_ref V) const {$/;"	f	class:llvm::ImutAVLTree
isEligible	Transforms/Utils/CodeExtractor.h	/^    bool isEligible() const { return !Blocks.empty(); }$/;"	f	class:llvm::CodeExtractor
isEmpty	ADT/ImmutableList.h	/^  bool isEmpty() const { return !X; }$/;"	f	class:llvm::ImmutableList
isEmpty	ADT/ImmutableMap.h	/^  bool isEmpty() const { return !Root; }$/;"	f	class:llvm::ImmutableMap
isEmpty	ADT/ImmutableMap.h	/^  bool isEmpty() const { return !Root; }$/;"	f	class:llvm::ImmutableMapRef
isEmpty	ADT/ImmutableSet.h	/^  bool            isEmpty(TreeTy* T) const { return !T; }$/;"	f	class:llvm::ImutAVLFactory
isEmpty	ADT/ImmutableSet.h	/^  bool isEmpty() const { return !Root; }$/;"	f	class:llvm::ImmutableSet
isEmpty	ADT/ImmutableSet.h	/^  bool isEmpty() const { return !Root; }$/;"	f	class:llvm::ImmutableSetRef
isEmpty	ADT/Twine.h	/^    bool isEmpty() const {$/;"	f	class:llvm::Twine
isEmpty	Analysis/DependenceAnalysis.h	/^      bool isEmpty() const { return Kind == Empty; }$/;"	f	class:llvm::DependenceAnalysis::Constraint
isEmpty	Attributes.h	/^  bool isEmpty() const {$/;"	f	class:llvm::AttrListPtr
isEmpty	CodeGen/MachineConstantPool.h	/^  bool isEmpty() const { return Constants.empty(); }$/;"	f	class:llvm::MachineConstantPool
isEmpty	CodeGen/MachineJumpTableInfo.h	/^  bool isEmpty() const { return JumpTables.empty(); }$/;"	f	class:llvm::MachineJumpTableInfo
isEmpty	MC/MCInstrItineraries.h	/^  bool isEmpty() const { return Itineraries == 0; }$/;"	f	class:llvm::InstrItineraryData
isEmpty	Support/IntegersSubset.h	/^    bool isEmpty() const { return IsEmpty; }$/;"	f	class:llvm::IntRange
isEmpty	Support/PathV1.h	/^      bool isEmpty() const { return path.empty(); }$/;"	f	class:llvm::sys::Path
isEnabled	CodeGen/ScheduleHazardRecognizer.h	/^  bool isEnabled() const { return MaxLookAhead != 0; }$/;"	f	class:llvm::ScheduleHazardRecognizer
isEncoding	Bitcode/BitCodes.h	/^  bool isEncoding() const { return !IsLiteral; }$/;"	f	class:llvm::BitCodeAbbrevOp
isEndMarker	MC/MCInstrItineraries.h	/^  bool isEndMarker(unsigned ItinClassIndx) const {$/;"	f	class:llvm::InstrItineraryData
isEndPos	Bitcode/BitstreamReader.h	/^  bool isEndPos(size_t pos) {$/;"	f	class:llvm::BitstreamCursor
isEnvironmentMachO	ADT/Triple.h	/^  bool isEnvironmentMachO() const {$/;"	f	class:llvm::Triple
isEqual	ADT/DenseMapInfo.h	/^  static bool isEqual(const Pair &LHS, const Pair &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/DenseMapInfo.h	/^  static bool isEqual(const T *LHS, const T *RHS) { return LHS == RHS; }$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/DenseMapInfo.h	/^  static bool isEqual(const char &LHS, const char &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/DenseMapInfo.h	/^  static bool isEqual(const int& LHS, const int& RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/DenseMapInfo.h	/^  static bool isEqual(const long long& LHS,$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/DenseMapInfo.h	/^  static bool isEqual(const long& LHS, const long& RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/DenseMapInfo.h	/^  static bool isEqual(const unsigned long long& LHS,$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/DenseMapInfo.h	/^  static bool isEqual(const unsigned long& LHS, const unsigned long& RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/DenseMapInfo.h	/^  static bool isEqual(const unsigned& LHS, const unsigned& RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/ImmutableIntervalMap.h	/^  static bool isEqual(key_type_ref L, key_type_ref R) {$/;"	f	struct:llvm::ImutIntervalInfo
isEqual	ADT/ImmutableList.h	/^  bool isEqual(const ImmutableList& L) const { return X == L.X; }$/;"	f	class:llvm::ImmutableList
isEqual	ADT/ImmutableList.h	/^  static bool isEqual(ImmutableList<T> X1, ImmutableList<T> X2) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/ImmutableMap.h	/^  static inline bool isEqual(key_type_ref L, key_type_ref R) {$/;"	f	struct:llvm::ImutKeyValueInfo
isEqual	ADT/ImmutableSet.h	/^  bool isEqual(const ImutAVLTree& RHS) const {$/;"	f	class:llvm::ImutAVLTree
isEqual	ADT/ImmutableSet.h	/^  static inline bool isEqual(key_type_ref LHS, key_type_ref RHS) {$/;"	f	struct:llvm::ImutContainerInfo
isEqual	ADT/PointerIntPair.h	/^  static bool isEqual(const Ty &LHS, const Ty &RHS) { return LHS == RHS; }$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/ValueMap.h	/^  static bool isEqual(const KeyT &LHS, const VH &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	ADT/ValueMap.h	/^  static bool isEqual(const VH &LHS, const VH &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	Analysis/AliasAnalysis.h	/^  static bool isEqual(const AliasAnalysis::Location &LHS,$/;"	f	struct:llvm::DenseMapInfo
isEqual	CodeGen/MachineInstr.h	/^  static bool isEqual(const MachineInstr* const &LHS,$/;"	f	struct:llvm::MachineInstrExpressionTrait
isEqual	CodeGen/SelectionDAGNodes.h	/^  static bool isEqual(const SDValue &LHS, const SDValue &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEqual	Support/DebugLoc.h	/^    static bool isEqual(DebugLoc LHS, DebugLoc RHS) { return LHS == RHS; }$/;"	f	struct:llvm::DenseMapInfo
isEqual	Support/ValueHandle.h	/^  static bool isEqual(const AssertingVH<T> &LHS, const AssertingVH<T> &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isEquality	Instructions.h	/^  bool isEquality() const {$/;"	f	class:llvm::FCmpInst
isEquality	Instructions.h	/^  bool isEquality() const {$/;"	f	class:llvm::ICmpInst
isEquality	Instructions.h	/^  static bool isEquality(Predicate P) {$/;"	f	class:llvm::ICmpInst
isExact	Operator.h	/^  bool isExact() const {$/;"	f	class:llvm::PossiblyExactOperator
isExactlyValue	CodeGen/SelectionDAGNodes.h	/^  bool isExactlyValue(double V) const {$/;"	f	class:llvm::ConstantFPSDNode
isExactlyValue	Constants.h	/^  bool isExactlyValue(double V) const {$/;"	f	class:llvm::ConstantFP
isExceptionHandlingDwarf	MC/MCAsmInfo.h	/^    bool isExceptionHandlingDwarf() const {$/;"	f	class:llvm::MCAsmInfo
isExit	Analysis/RegionIterator.h	/^  inline bool isExit(BasicBlock* BB) const {$/;"	f	class:llvm::RNSuccIterator
isExplicit	DebugInfo.h	/^    bool isExplicit() const    { $/;"	f	class:llvm::DISubprogram
isExportedInst	CodeGen/FunctionLoweringInfo.h	/^  bool isExportedInst(const Value *V) {$/;"	f	class:llvm::FunctionLoweringInfo
isExpr	MC/MCInst.h	/^  bool isExpr() const { return Kind == kExpr; }$/;"	f	class:llvm::MCOperand
isExtInLoc	CodeGen/CallingConvLower.h	/^  bool isExtInLoc() const {$/;"	f	class:llvm::CCValAssign
isExtSym	CodeGen/MachineRelocation.h	/^    isExtSym,         \/\/ The Target.ExtSym field is valid.$/;"	e	enum:llvm::MachineRelocation::AddressType
isExtended	CodeGen/ValueTypes.h	/^    bool isExtended() const {$/;"	f	struct:llvm::EVT
isExternal	MC/MCAssembler.h	/^  bool isExternal() const { return IsExternal; }$/;"	f	class:llvm::MCSymbolData
isExternalLinkage	GlobalValue.h	/^  static bool isExternalLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isExternalSymbol	CodeGen/MachineRelocation.h	/^  bool isExternalSymbol() const {$/;"	f	class:llvm::MachineRelocation
isExternalWeakLinkage	GlobalValue.h	/^  static bool isExternalWeakLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isFAbsFree	Target/TargetLowering.h	/^  virtual bool isFAbsFree(EVT) const {$/;"	f	class:llvm::TargetLowering
isFI	CodeGen/MachineOperand.h	/^  bool isFI() const { return OpKind == MO_FrameIndex; }$/;"	f	class:llvm::MachineOperand
isFMAFasterThanMulAndAdd	Target/TargetLowering.h	/^  virtual bool isFMAFasterThanMulAndAdd(EVT) const {$/;"	f	class:llvm::TargetLowering
isFNegFree	Target/TargetLowering.h	/^  virtual bool isFNegFree(EVT) const {$/;"	f	class:llvm::TargetLowering
isFP128Ty	Type.h	/^  bool isFP128Ty() const { return getTypeID() == FP128TyID; }$/;"	f	class:llvm::Type
isFPImm	CodeGen/MachineOperand.h	/^  bool isFPImm() const { return OpKind == MO_FPImmediate; }$/;"	f	class:llvm::MachineOperand
isFPImm	MC/MCInst.h	/^  bool isFPImm() const { return Kind == kFPImmediate; }$/;"	f	class:llvm::MCOperand
isFPImmLegal	Target/TargetLowering.h	/^  virtual bool isFPImmLegal(const APFloat &\/*Imm*\/, EVT \/*VT*\/) const {$/;"	f	class:llvm::TargetLowering
isFPPredicate	InstrTypes.h	/^  bool isFPPredicate() const { return isFPPredicate(getPredicate()); }$/;"	f	class:llvm::CmpInst
isFPPredicate	InstrTypes.h	/^  static bool isFPPredicate(Predicate P) {$/;"	f	class:llvm::CmpInst
isFalseWhenEqual	InstrTypes.h	/^  bool isFalseWhenEqual() const {$/;"	f	class:llvm::CmpInst
isFilter	Instructions.h	/^  bool isFilter(unsigned Idx) const {$/;"	f	class:llvm::LandingPadInst
isFirstByValRegValid	CodeGen/CallingConvLower.h	/^  bool isFirstByValRegValid() const { return FirstByValRegValid; }$/;"	f	class:llvm::CCState
isFirstClassType	Type.h	/^  bool isFirstClassType() const {$/;"	f	class:llvm::Type
isFixedObjectIndex	CodeGen/MachineFrameInfo.h	/^  bool isFixedObjectIndex(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
isFloatTy	Type.h	/^  bool isFloatTy() const { return getTypeID() == FloatTyID; }$/;"	f	class:llvm::Type
isFloatingPoint	CodeGen/ValueTypes.h	/^    bool isFloatingPoint() const {$/;"	f	class:llvm::MVT
isFloatingPoint	CodeGen/ValueTypes.h	/^    bool isFloatingPoint() const {$/;"	f	struct:llvm::EVT
isFloatingPointTy	Type.h	/^  bool isFloatingPointTy() const {$/;"	f	class:llvm::Type
isForwardDecl	DebugInfo.h	/^    bool isForwardDecl() const {$/;"	f	class:llvm::DIType
isForwardingAliasSet	Analysis/AliasSetTracker.h	/^  bool isForwardingAliasSet() const { return Forward; }$/;"	f	class:llvm::AliasSet
isFrameAddressTaken	CodeGen/MachineFrameInfo.h	/^  bool isFrameAddressTaken() const { return FrameAddressTaken; }$/;"	f	class:llvm::MachineFrameInfo
isFrameOffsetLegal	Target/TargetRegisterInfo.h	/^  virtual bool isFrameOffsetLegal(const MachineInstr *MI,$/;"	f	class:llvm::TargetRegisterInfo
isFreeCall	Analysis/MemoryBuiltins.h	/^static inline CallInst *isFreeCall(Value *I, const TargetLibraryInfo *TLI) {$/;"	f	namespace:llvm
isFullCopy	CodeGen/MachineInstr.h	/^  bool isFullCopy() const {$/;"	f	class:llvm::MachineInstr
isFunctionEHFrameSymbolPrivate	MC/MCObjectFileInfo.h	/^  bool isFunctionEHFrameSymbolPrivate() const {$/;"	f	class:llvm::MCObjectFileInfo
isFunctionLocal	Metadata.h	/^  bool isFunctionLocal() const {$/;"	f	class:llvm::MDNode
isFunctionTy	Type.h	/^  bool isFunctionTy() const { return getTypeID() == FunctionTyID; }$/;"	f	class:llvm::Type
isGCLabel	CodeGen/MachineInstr.h	/^  bool isGCLabel() const { return getOpcode() == TargetOpcode::GC_LABEL; }$/;"	f	class:llvm::MachineInstr
isGOTIndex	CodeGen/MachineRelocation.h	/^    isGOTIndex        \/\/ The Target.GOTIndex field is valid.$/;"	e	enum:llvm::MachineRelocation::AddressType
isGOTRelative	CodeGen/MachineRelocation.h	/^  bool isGOTRelative() const {$/;"	f	class:llvm::MachineRelocation
isGV	CodeGen/MachineRelocation.h	/^    isGV,             \/\/ The Target.GV field is valid.$/;"	e	enum:llvm::MachineRelocation::AddressType
isGVCompilationDisabled	ExecutionEngine/ExecutionEngine.h	/^  bool isGVCompilationDisabled() const {$/;"	f	class:llvm::ExecutionEngine
isGlobal	CodeGen/MachineOperand.h	/^  bool isGlobal() const { return OpKind == MO_GlobalAddress; }$/;"	f	class:llvm::MachineOperand
isGlobalValue	CodeGen/MachineRelocation.h	/^  bool isGlobalValue() const {$/;"	f	class:llvm::MachineRelocation
isGlobalWriteableData	MC/SectionKind.h	/^  bool isGlobalWriteableData() const {$/;"	f	class:llvm::SectionKind
isHalfTy	Type.h	/^  bool isHalfTy() const { return getTypeID() == HalfTyID; }$/;"	f	class:llvm::Type
isHeuristic	CodeGen/PBQP/Heuristics/Briggs.h	/^        bool isHeuristic, isAllocable, isInitialized;$/;"	m	struct:PBQP::Heuristics::Briggs::NodeData
isHighLatencyDef	Target/TargetInstrInfo.h	/^  virtual bool isHighLatencyDef(int opc) const { return false; }$/;"	f	class:llvm::TargetInstrInfo
isIVUserOrOperand	Analysis/IVUsers.h	/^  bool isIVUserOrOperand(Instruction *Inst) const {$/;"	f	class:llvm::IVUsers
isIdempotent	Instruction.h	/^  bool isIdempotent() const { return isIdempotent(getOpcode()); }$/;"	f	class:llvm::Instruction
isIdentityCopy	CodeGen/MachineInstr.h	/^  bool isIdentityCopy() const {$/;"	f	class:llvm::MachineInstr
isIgnoringBlockInfoNames	Bitcode/BitstreamReader.h	/^  bool isIgnoringBlockInfoNames() { return IgnoreBlockInfoNames; }$/;"	f	class:llvm::BitstreamReader
isIllegalInteger	DataLayout.h	/^  bool isIllegalInteger(unsigned Width) const {$/;"	f	class:llvm::DataLayout
isImm	CodeGen/MachineOperand.h	/^  bool isImm() const { return OpKind == MO_Immediate; }$/;"	f	class:llvm::MachineOperand
isImm	MC/MCInst.h	/^  bool isImm() const { return Kind == kImmediate; }$/;"	f	class:llvm::MCOperand
isImmKind	InlineAsm.h	/^  static bool isImmKind(unsigned Flag) { return getKind(Flag) == Kind_Imm; }$/;"	f	class:llvm::InlineAsm
isImmutable	CodeGen/MachineFrameInfo.h	/^    bool isImmutable;$/;"	m	struct:llvm::MachineFrameInfo::StackObject
isImmutableObjectIndex	CodeGen/MachineFrameInfo.h	/^  bool isImmutableObjectIndex(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
isImplicit	CodeGen/MachineOperand.h	/^  bool isImplicit() const {$/;"	f	class:llvm::MachineOperand
isImplicitDef	CodeGen/MachineInstr.h	/^  bool isImplicitDef() const { return getOpcode()==TargetOpcode::IMPLICIT_DEF; }$/;"	f	class:llvm::MachineInstr
isInAllocatableClass	Target/TargetRegisterInfo.h	/^  bool isInAllocatableClass(unsigned RegNo) const {$/;"	f	class:llvm::TargetRegisterInfo
isInBounds	Operator.h	/^  bool isInBounds() const {$/;"	f	class:llvm::GEPOperator
isInOneLiveRange	CodeGen/LiveInterval.h	/^    bool isInOneLiveRange(SlotIndex Start, SlotIndex End) const {$/;"	f	class:llvm::LiveInterval
isInQueue	CodeGen/MachineScheduler.h	/^  bool isInQueue(SUnit *SU) const { return (SU->NodeQueueId & ID); }$/;"	f	class:llvm::ReadyQueue
isInRange	Support/IntegersSubset.h	/^    bool isInRange(const IntType &IntVal) const {$/;"	f	class:llvm::IntRange
isInReg	Target/TargetCallingConv.h	/^    bool isInReg()  const { return Flags & InReg; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
isInReg	Target/TargetLowering.h	/^    bool isInReg : 1;$/;"	m	struct:llvm::TargetLowering::ArgListEntry
isInSection	MC/MCSymbol.h	/^    bool isInSection() const {$/;"	f	class:llvm::MCSymbol
isIndexed	CodeGen/SelectionDAGNodes.h	/^  bool isIndexed() const { return getAddressingMode() != ISD::UNINDEXED; }$/;"	f	class:llvm::LSBaseSDNode
isIndexedLoadLegal	Target/TargetLowering.h	/^  bool isIndexedLoadLegal(unsigned IdxMode, EVT VT) const {$/;"	f	class:llvm::TargetLowering
isIndexedStoreLegal	Target/TargetLowering.h	/^  bool isIndexedStoreLegal(unsigned IdxMode, EVT VT) const {$/;"	f	class:llvm::TargetLowering
isIndirect	InlineAsm.h	/^    bool isIndirect;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
isIndirectBranch	CodeGen/MachineInstr.h	/^  bool isIndirectBranch(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
isIndirectBranch	MC/MCInstrAnalysis.h	/^  virtual bool isIndirectBranch(const MCInst &Inst) const {$/;"	f	class:llvm::MCInstrAnalysis
isIndirectBranch	MC/MCInstrDesc.h	/^  bool isIndirectBranch() const {$/;"	f	class:llvm::MCInstrDesc
isIndirectSym	CodeGen/MachineRelocation.h	/^    isIndirectSym,    \/\/ Relocation of an indirect symbol.$/;"	e	enum:llvm::MachineRelocation::AddressType
isIndirectSymbol	CodeGen/MachineRelocation.h	/^  bool isIndirectSymbol() const {$/;"	f	class:llvm::MachineRelocation
isInfinity	ADT/APFloat.h	/^    bool isInfinity() const { return category == fcInfinity; }$/;"	f	class:llvm::APFloat
isInitialized	CodeGen/PBQP/Heuristics/Briggs.h	/^        bool isHeuristic, isAllocable, isInitialized;$/;"	m	struct:PBQP::Heuristics::Briggs::NodeData
isInitialized	Support/Timer.h	/^  bool isInitialized() const { return TG != 0; }$/;"	f	class:llvm::Timer
isInlineAsm	CodeGen/MachineInstr.h	/^  bool isInlineAsm() const { return getOpcode() == TargetOpcode::INLINEASM; }$/;"	f	class:llvm::MachineInstr
isInlineAsm	Instructions.h	/^  bool isInlineAsm() const {$/;"	f	class:llvm::CallInst
isInput	InlineAsm.h	/^    isInput,            \/\/ 'x'$/;"	e	enum:llvm::InlineAsm::ConstraintPrefix
isInsertSubreg	CodeGen/MachineInstr.h	/^  bool isInsertSubreg() const {$/;"	f	class:llvm::MachineInstr
isInsertedInstruction	Analysis/ScalarEvolutionExpander.h	/^    bool isInsertedInstruction(Instruction *I) const {$/;"	f	class:llvm::SCEVExpander
isInsideBundle	CodeGen/MachineInstr.h	/^  bool isInsideBundle() const {$/;"	f	class:llvm::MachineInstr
isInst	MC/MCInst.h	/^  bool isInst() const { return Kind == kInst; }$/;"	f	class:llvm::MCOperand
isInstr	CodeGen/ScheduleDAG.h	/^    bool isInstr() const { return Instr; }$/;"	f	class:llvm::SUnit
isInt	Support/MathExtras.h	/^inline bool isInt(int64_t x) {$/;"	f	namespace:llvm
isInt	Support/MathExtras.h	/^inline bool isInt<16>(int64_t x) {$/;"	f	namespace:llvm
isInt	Support/MathExtras.h	/^inline bool isInt<32>(int64_t x) {$/;"	f	namespace:llvm
isInt	Support/MathExtras.h	/^inline bool isInt<8>(int64_t x) {$/;"	f	namespace:llvm
isIntDivCheap	Target/TargetLowering.h	/^  bool isIntDivCheap() const { return IntDivIsCheap; }$/;"	f	class:llvm::TargetLowering
isIntN	ADT/APInt.h	/^  bool isIntN(unsigned N) const {$/;"	f	class:llvm::APInt
isIntN	ADT/APInt.h	/^inline bool isIntN(unsigned N, const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
isIntN	Support/MathExtras.h	/^inline bool isIntN(unsigned N, int64_t x) {$/;"	f	namespace:llvm
isIntPredicate	InstrTypes.h	/^  bool isIntPredicate() const { return isIntPredicate(getPredicate()); }$/;"	f	class:llvm::CmpInst
isIntPredicate	InstrTypes.h	/^  static bool isIntPredicate(Predicate P) {$/;"	f	class:llvm::CmpInst
isInteger	CodeGen/ValueTypes.h	/^    bool isInteger() const {$/;"	f	class:llvm::MVT
isInteger	CodeGen/ValueTypes.h	/^    bool isInteger() const {$/;"	f	struct:llvm::EVT
isIntegerTy	Type.h	/^  bool isIntegerTy() const { return getTypeID() == IntegerTyID; } $/;"	f	class:llvm::Type
isInternalLinkage	GlobalValue.h	/^  static bool isInternalLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isInternalRead	CodeGen/MachineOperand.h	/^  bool isInternalRead() const {$/;"	f	class:llvm::MachineOperand
isIntersected	Support/IntegersSubsetMapping.h	/^  bool isIntersected(CaseItemIt& LItem, CaseItemIt& RItem) {$/;"	f	class:llvm::IntegersSubsetMapping
isIntrinsic	Function.h	/^  bool isIntrinsic() const { return getIntrinsicID() != 0; }$/;"	f	class:llvm::Function
isInvariant	CodeGen/MachineMemOperand.h	/^  bool isInvariant() const { return Flags & MOInvariant; }$/;"	f	class:llvm::MachineMemOperand
isInvariant	CodeGen/SelectionDAGNodes.h	/^  bool isInvariant() const { return (SubclassData >> 7) & 1; }$/;"	f	class:llvm::MemSDNode
isInvoke	Support/CallSite.h	/^  bool isInvoke() const { return getInstruction() && !I.getInt(); }$/;"	f	class:llvm::CallSiteBase
isJTI	CodeGen/MachineOperand.h	/^  bool isJTI() const { return OpKind == MO_JumpTableIndex; }$/;"	f	class:llvm::MachineOperand
isJoinable	Support/IntegersSubsetMapping.h	/^  bool isJoinable(CaseItemIt& LItem, CaseItemIt& RItem) {$/;"	f	class:llvm::IntegersSubsetMapping
isJumpExpensive	Target/TargetLowering.h	/^  bool isJumpExpensive() const { return JumpIsExpensive; }$/;"	f	class:llvm::TargetLowering
isJumpTable	CodeGen/MachineRelocation.h	/^    isJumpTable,      \/\/ Relocation of jump table address.$/;"	e	enum:llvm::MachineRelocation::AddressType
isJumpTableIndex	CodeGen/MachineRelocation.h	/^  bool isJumpTableIndex() const {$/;"	f	class:llvm::MachineRelocation
isKill	CodeGen/LiveInterval.h	/^    bool isKill() const {$/;"	f	class:llvm::LiveRangeQuery
isKill	CodeGen/MachineInstr.h	/^  bool isKill() const { return getOpcode() == TargetOpcode::KILL; }$/;"	f	class:llvm::MachineInstr
isKill	CodeGen/MachineOperand.h	/^  bool isKill() const {$/;"	f	class:llvm::MachineOperand
isLLVMSymbolTable	Bitcode/Archive.h	/^    bool isLLVMSymbolTable() const { return flags&LLVMSymbolTableFlag; }$/;"	f	class:llvm::ArchiveMember
isLOpened	Support/IntegersSubsetMapping.h	/^    bool isLOpened() { return State == L_OPENED; }$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
isLabel	CodeGen/MachineInstr.h	/^  bool isLabel() const {$/;"	f	class:llvm::MachineInstr
isLabelTy	Type.h	/^  bool isLabelTy() const { return getTypeID() == LabelTyID; }$/;"	f	class:llvm::Type
isLandingPad	CodeGen/MachineBasicBlock.h	/^  bool isLandingPad() const { return IsLandingPad; }$/;"	f	class:llvm::MachineBasicBlock
isLazyCompilationDisabled	ExecutionEngine/ExecutionEngine.h	/^  bool isLazyCompilationDisabled() const {$/;"	f	class:llvm::ExecutionEngine
isLeader	ADT/EquivalenceClasses.h	/^    bool isLeader() const { return (intptr_t)Next & 1; }$/;"	f	class:llvm::EquivalenceClasses::ECValue
isLegalAddImmediate	Target/TargetLowering.h	/^  virtual bool isLegalAddImmediate(int64_t) const {$/;"	f	class:llvm::TargetLowering
isLegalAddImmediate	TargetTransformInfo.h	/^  virtual bool isLegalAddImmediate(int64_t) const {$/;"	f	class:llvm::ScalarTargetTransformInfo
isLegalAddressingMode	TargetTransformInfo.h	/^  virtual bool isLegalAddressingMode(const AddrMode &AM, Type *Ty) const {$/;"	f	class:llvm::ScalarTargetTransformInfo
isLegalICmpImmediate	Target/TargetLowering.h	/^  virtual bool isLegalICmpImmediate(int64_t) const {$/;"	f	class:llvm::TargetLowering
isLegalICmpImmediate	TargetTransformInfo.h	/^  virtual bool isLegalICmpImmediate(int64_t) const {$/;"	f	class:llvm::ScalarTargetTransformInfo
isLegalInteger	DataLayout.h	/^  bool isLegalInteger(unsigned Width) const {$/;"	f	class:llvm::DataLayout
isLegalToPacketizeTogether	CodeGen/DFAPacketizer.h	/^  virtual bool isLegalToPacketizeTogether(SUnit *SUI, SUnit *SUJ) {$/;"	f	class:llvm::VLIWPacketizerList
isLegalToPruneDependencies	CodeGen/DFAPacketizer.h	/^  virtual bool isLegalToPruneDependencies(SUnit *SUI, SUnit *SUJ) {$/;"	f	class:llvm::VLIWPacketizerList
isLegalToSplitMBBAt	Target/TargetInstrInfo.h	/^  virtual bool isLegalToSplitMBBAt(MachineBasicBlock &MBB,$/;"	f	class:llvm::TargetInstrInfo
isLess	ADT/ImmutableIntervalMap.h	/^  static bool isLess(key_type_ref L, key_type_ref R) {$/;"	f	struct:llvm::ImutIntervalInfo
isLess	ADT/ImmutableMap.h	/^  static inline bool isLess(key_type_ref L, key_type_ref R) {$/;"	f	struct:llvm::ImutKeyValueInfo
isLess	ADT/ImmutableSet.h	/^  static inline bool isLess(key_type_ref LHS, key_type_ref RHS) {$/;"	f	struct:llvm::ImutContainerInfo
isLine	Analysis/DependenceAnalysis.h	/^      bool isLine() const { return Kind == Line || Kind == Distance; }$/;"	f	class:llvm::DependenceAnalysis::Constraint
isLinkOnceLinkage	GlobalValue.h	/^  static bool isLinkOnceLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isLinkOnceODRAutoHideLinkage	GlobalValue.h	/^  static bool isLinkOnceODRAutoHideLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isLinkerPrivateLinkage	GlobalValue.h	/^  static bool isLinkerPrivateLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isLinkerPrivateWeakLinkage	GlobalValue.h	/^  static bool isLinkerPrivateWeakLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isLiteral	Bitcode/BitCodes.h	/^  bool isLiteral() const { return IsLiteral; }$/;"	f	class:llvm::BitCodeAbbrevOp
isLiteral	DerivedTypes.h	/^  bool isLiteral() const { return (getSubclassData() & SCDB_IsLiteral) != 0; }$/;"	f	class:llvm::StructType
isLittleEndian	DataLayout.h	/^  bool isLittleEndian() const { return LittleEndian; }$/;"	f	class:llvm::DataLayout
isLittleEndian	MC/MCAsmInfo.h	/^    bool isLittleEndian() const {$/;"	f	class:llvm::MCAsmInfo
isLittleEndian	MC/MCObjectWriter.h	/^  bool isLittleEndian() const { return IsLittleEndian; }$/;"	f	class:llvm::MCObjectWriter
isLittleEndian	Object/MachOObject.h	/^  bool isLittleEndian() const { return IsLittleEndian; }$/;"	f	class:llvm::object::MachOObject
isLittleEndian	Support/DataExtractor.h	/^  bool isLittleEndian() const { return IsLittleEndian; }$/;"	f	class:llvm::DataExtractor
isLittleEndian	Support/OutputBuffer.h	/^    bool is64Bit, isLittleEndian;$/;"	m	class:llvm::OutputBuffer
isLittleEndian	Target/TargetELFWriterInfo.h	/^    bool is64Bit, isLittleEndian;$/;"	m	class:llvm::TargetELFWriterInfo
isLittleEndian	Target/TargetLowering.h	/^  bool isLittleEndian() const { return IsLittleEndian; }$/;"	f	class:llvm::TargetLowering
isLittleEndianHost	Support/Host.h	/^  inline bool isLittleEndianHost() {$/;"	f	namespace:llvm::sys
isLiveIn	CodeGen/LiveVariables.h	/^  bool isLiveIn(unsigned Reg, const MachineBasicBlock &MBB) {$/;"	f	class:llvm::LiveVariables
isLiveInToMBB	CodeGen/LiveIntervalAnalysis.h	/^    bool isLiveInToMBB(const LiveInterval &li,$/;"	f	class:llvm::LiveIntervals
isLiveOutOfMBB	CodeGen/LiveIntervalAnalysis.h	/^    bool isLiveOutOfMBB(const LiveInterval &li,$/;"	f	class:llvm::LiveIntervals
isLoad	CodeGen/MachineMemOperand.h	/^  bool isLoad() const { return Flags & MOLoad; }$/;"	f	class:llvm::MachineMemOperand
isLoadExtLegal	Target/TargetLowering.h	/^  bool isLoadExtLegal(unsigned ExtType, EVT VT) const {$/;"	f	class:llvm::TargetLowering
isLoadFromStackSlot	Target/TargetInstrInfo.h	/^  virtual unsigned isLoadFromStackSlot(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
isLoadFromStackSlotPostFE	Target/TargetInstrInfo.h	/^  virtual unsigned isLoadFromStackSlotPostFE(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
isLocalLinkage	GlobalValue.h	/^  static bool isLocalLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isLocalToUnit	DebugInfo.h	/^    unsigned isLocalToUnit() const      { return getUnsignedField(9); }$/;"	f	class:llvm::DIGlobalVariable
isLocalToUnit	DebugInfo.h	/^    unsigned isLocalToUnit() const     { return getUnsignedField(9); }$/;"	f	class:llvm::DISubprogram
isLocation	Analysis/LibCallSemantics.h	/^    LocResult (*isLocation)(ImmutableCallSite CS,$/;"	m	struct:llvm::LibCallLocationInfo
isLogicalShift	Instruction.h	/^  inline bool isLogicalShift() const {$/;"	f	class:llvm::Instruction
isLookupPtrRegClass	MC/MCInstrDesc.h	/^  bool isLookupPtrRegClass() const {return Flags&(1 <<MCOI::LookupPtrRegClass);}$/;"	f	class:llvm::MCOperandInfo
isLoopExiting	Analysis/LoopInfo.h	/^  bool isLoopExiting(const BlockT *BB) const {$/;"	f	class:llvm::LoopBase
isLoopHeader	Analysis/LoopInfo.h	/^  bool isLoopHeader(BlockT *BB) const {$/;"	f	class:llvm::LoopInfoBase
isLoopHeader	Analysis/LoopInfo.h	/^  inline bool isLoopHeader(BasicBlock *BB) const {$/;"	f	class:llvm::LoopInfo
isLoopHeader	CodeGen/MachineLoopInfo.h	/^  inline bool isLoopHeader(MachineBasicBlock *BB) const {$/;"	f	class:llvm::MachineLoopInfo
isLoopIndependent	Analysis/DependenceAnalysis.h	/^    bool isLoopIndependent() const { return LoopIndependent; }$/;"	f	class:llvm::FullDependence
isLoopIndependent	Analysis/DependenceAnalysis.h	/^    virtual bool isLoopIndependent() const { return true; }$/;"	f	class:llvm::Dependence
isMBB	CodeGen/MachineOperand.h	/^  bool isMBB() const { return OpKind == MO_MachineBasicBlock; }$/;"	f	class:llvm::MachineOperand
isMCSymbol	CodeGen/MachineOperand.h	/^  bool isMCSymbol() const { return OpKind == MO_MCSymbol; }$/;"	f	class:llvm::MachineOperand
isMacOSX	ADT/Triple.h	/^  bool isMacOSX() const {$/;"	f	class:llvm::Triple
isMacOSXVersionLT	ADT/Triple.h	/^  unsigned isMacOSXVersionLT(unsigned Major, unsigned Minor = 0,$/;"	f	class:llvm::Triple
isMachO	Object/Binary.h	/^  bool isMachO() const {$/;"	f	class:llvm::object::Binary
isMachineConstantPoolEntry	CodeGen/MachineConstantPool.h	/^  bool isMachineConstantPoolEntry() const {$/;"	f	class:llvm::MachineConstantPoolEntry
isMachineConstantPoolEntry	CodeGen/SelectionDAGNodes.h	/^  bool isMachineConstantPoolEntry() const {$/;"	f	class:llvm::ConstantPoolSDNode
isMachineOpcode	CodeGen/SelectionDAGNodes.h	/^  bool isMachineOpcode() const { return NodeType < 0; }$/;"	f	class:llvm::SDNode
isMachineOpcode	CodeGen/SelectionDAGNodes.h	/^inline bool SDValue::isMachineOpcode() const {$/;"	f	class:llvm::SDValue
isMain	DebugInfo.h	/^    bool isMain() const                { return getUnsignedField(6) != 0; }$/;"	f	class:llvm::DICompileUnit
isManagingGOT	ExecutionEngine/JITMemoryManager.h	/^  bool isManagingGOT() const {$/;"	f	class:llvm::JITMemoryManager
isMask	ADT/APInt.h	/^inline bool isMask(unsigned numBits, const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
isMask_32	Support/MathExtras.h	/^inline bool isMask_32(uint32_t Value) {$/;"	f	namespace:llvm
isMask_64	Support/MathExtras.h	/^inline bool isMask_64(uint64_t Value) {$/;"	f	namespace:llvm
isMaxSignedValue	ADT/APInt.h	/^  bool isMaxSignedValue() const {$/;"	f	class:llvm::APInt
isMaxValue	ADT/APInt.h	/^  bool isMaxValue() const {$/;"	f	class:llvm::APInt
isMaxValue	Constants.h	/^  bool isMaxValue(bool isSigned) const {$/;"	f	class:llvm::ConstantInt
isMayAlias	Analysis/AliasSetTracker.h	/^  bool isMayAlias()  const { return AliasTy == MayAlias; }$/;"	f	class:llvm::AliasSet
isMemKind	InlineAsm.h	/^  static bool isMemKind(unsigned Flag) { return getKind(Flag) == Kind_Mem; }$/;"	f	class:llvm::InlineAsm
isMemLoc	CodeGen/CallingConvLower.h	/^  bool isMemLoc() const { return isMem; }$/;"	f	class:llvm::CCValAssign
isMergeable1ByteCString	MC/SectionKind.h	/^  bool isMergeable1ByteCString() const { return K == Mergeable1ByteCString; }$/;"	f	class:llvm::SectionKind
isMergeable2ByteCString	MC/SectionKind.h	/^  bool isMergeable2ByteCString() const { return K == Mergeable2ByteCString; }$/;"	f	class:llvm::SectionKind
isMergeable4ByteCString	MC/SectionKind.h	/^  bool isMergeable4ByteCString() const { return K == Mergeable4ByteCString; }$/;"	f	class:llvm::SectionKind
isMergeableCString	MC/SectionKind.h	/^  bool isMergeableCString() const {$/;"	f	class:llvm::SectionKind
isMergeableConst	MC/SectionKind.h	/^  bool isMergeableConst() const {$/;"	f	class:llvm::SectionKind
isMergeableConst16	MC/SectionKind.h	/^  bool isMergeableConst16() const { return K == MergeableConst16; }$/;"	f	class:llvm::SectionKind
isMergeableConst4	MC/SectionKind.h	/^  bool isMergeableConst4() const { return K == MergeableConst4; }$/;"	f	class:llvm::SectionKind
isMergeableConst8	MC/SectionKind.h	/^  bool isMergeableConst8() const { return K == MergeableConst8; }$/;"	f	class:llvm::SectionKind
isMetadata	CodeGen/MachineOperand.h	/^  bool isMetadata() const { return OpKind == MO_Metadata; }$/;"	f	class:llvm::MachineOperand
isMetadata	MC/SectionKind.h	/^  bool isMetadata() const { return K == Metadata; }$/;"	f	class:llvm::SectionKind
isMetadataTy	Type.h	/^  bool isMetadataTy() const { return getTypeID() == MetadataTyID; }$/;"	f	class:llvm::Type
isMinSignedValue	ADT/APInt.h	/^  bool isMinSignedValue() const {$/;"	f	class:llvm::APInt
isMinValue	ADT/APInt.h	/^  bool isMinValue() const {$/;"	f	class:llvm::APInt
isMinValue	Constants.h	/^  bool isMinValue(bool isSigned) const {$/;"	f	class:llvm::ConstantInt
isMinusOne	Constants.h	/^  bool isMinusOne() const { $/;"	f	class:llvm::ConstantInt
isMod	Analysis/AliasSetTracker.h	/^  bool isMod() const { return AccessTy & Mods; }$/;"	f	class:llvm::AliasSet
isMoveImmediate	CodeGen/MachineInstr.h	/^  bool isMoveImmediate(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
isMoveImmediate	MC/MCInstrDesc.h	/^  bool isMoveImmediate() const {$/;"	f	class:llvm::MCInstrDesc
isMultipleAlternative	InlineAsm.h	/^    bool isMultipleAlternative;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
isMustAlias	Analysis/AliasAnalysis.h	/^  bool isMustAlias(const Location &LocA, const Location &LocB) {$/;"	f	class:llvm::AliasAnalysis
isMustAlias	Analysis/AliasAnalysis.h	/^  bool isMustAlias(const Value *V1, const Value *V2) {$/;"	f	class:llvm::AliasAnalysis
isMustAlias	Analysis/AliasSetTracker.h	/^  bool isMustAlias() const { return AliasTy == MustAlias; }$/;"	f	class:llvm::AliasSet
isMustAlias	CodeGen/ScheduleDAG.h	/^        bool isMustAlias : 1;$/;"	m	struct:llvm::SDep::__anon41::__anon42
isMustAlias	CodeGen/ScheduleDAG.h	/^    bool isMustAlias() const {$/;"	f	class:llvm::SDep
isMutable	ADT/ImmutableSet.h	/^  bool isMutable() const { return IsMutable; }$/;"	f	class:llvm::ImutAVLTree
isN64	MC/MCELFObjectWriter.h	/^  bool isN64() const { return IsN64; }$/;"	f	class:llvm::MCELFObjectTargetWriter
isNON_EXTLoad	CodeGen/SelectionDAGNodes.h	/^  inline bool isNON_EXTLoad(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isNON_TRUNCStore	CodeGen/SelectionDAGNodes.h	/^  inline bool isNON_TRUNCStore(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isNaN	ADT/APFloat.h	/^    bool isNaN() const { return category == fcNaN; }$/;"	f	class:llvm::APFloat
isNaN	CodeGen/SelectionDAGNodes.h	/^  bool isNaN() const { return Value->isNaN(); }$/;"	f	class:llvm::ConstantFPSDNode
isNaN	Constants.h	/^  bool isNaN() const { return Val.isNaN(); }$/;"	f	class:llvm::ConstantFP
isNamePreserving	IRBuilder.h	/^  bool isNamePreserving() const { return preserveNames; }$/;"	f	class:llvm::IRBuilder
isNarrowingProfitable	Target/TargetLowering.h	/^  virtual bool isNarrowingProfitable(EVT \/*VT1*\/, EVT \/*VT2*\/) const {$/;"	f	class:llvm::TargetLowering
isNegZero	ADT/APFloat.h	/^    bool isNegZero() const { return isZero() && isNegative(); }$/;"	f	class:llvm::APFloat
isNegative	ADT/APFloat.h	/^    bool isNegative() const { return sign; }$/;"	f	class:llvm::APFloat
isNegative	ADT/APInt.h	/^  bool isNegative() const {$/;"	f	class:llvm::APInt
isNegative	Constants.h	/^  bool isNegative() const { return Val.isNegative(); }$/;"	f	class:llvm::ConstantFP
isNegative	Constants.h	/^  bool isNegative() const { return Val.isNegative(); }$/;"	f	class:llvm::ConstantInt
isNest	Target/TargetCallingConv.h	/^    bool isNest()   const { return Flags & Nest; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
isNest	Target/TargetLowering.h	/^    bool isNest  : 1;$/;"	m	struct:llvm::TargetLowering::ArgListEntry
isNever	Analysis/InlineCost.h	/^    bool isNever() const    { return Cost == NeverInlineCost; }$/;"	f	class:llvm::InlineCost
isNilpotent	Instruction.h	/^  bool isNilpotent() const { return isNilpotent(getOpcode()); }$/;"	f	class:llvm::Instruction
isNoAlias	Analysis/AliasAnalysis.h	/^  bool isNoAlias(const Location &LocA, const Location &LocB) {$/;"	f	class:llvm::AliasAnalysis
isNoAlias	Analysis/AliasAnalysis.h	/^  bool isNoAlias(const Value *V1, const Value *V2) {$/;"	f	class:llvm::AliasAnalysis
isNoAlias	Analysis/AliasAnalysis.h	/^  bool isNoAlias(const Value *V1, uint64_t V1Size,$/;"	f	class:llvm::AliasAnalysis
isNoInline	Instructions.h	/^  bool isNoInline() const { return hasFnAttr(Attributes::NoInline); }$/;"	f	class:llvm::CallInst
isNoInline	Instructions.h	/^  bool isNoInline() const { return hasFnAttr(Attributes::NoInline); }$/;"	f	class:llvm::InvokeInst
isNoInline	Support/CallSite.h	/^  bool isNoInline() const {$/;"	f	class:llvm::CallSiteBase
isNodeHidden	Support/DOTGraphTraits.h	/^  static bool isNodeHidden(const void *) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
isNodeHidden	Support/GraphWriter.h	/^  bool isNodeHidden(NodeType &Node) {$/;"	f	class:llvm::GraphWriter
isNodeHidden	Support/GraphWriter.h	/^  bool isNodeHidden(NodeType *Node) {$/;"	f	class:llvm::GraphWriter
isNodeHidden	Support/GraphWriter.h	/^  bool isNodeHidden(NodeType *const *Node) {$/;"	f	class:llvm::GraphWriter
isNonAtomicObjCProperty	DebugInfo.h	/^    bool isNonAtomicObjCProperty() {$/;"	f	class:llvm::DIDerivedType
isNonAtomicObjCProperty	DebugInfo.h	/^    bool isNonAtomicObjCProperty() {$/;"	f	class:llvm::DIObjCProperty
isNonFuncLocal	Analysis/MemoryDependenceAnalysis.h	/^    bool isNonFuncLocal() const {$/;"	f	class:llvm::MemDepResult
isNonLocal	Analysis/MemoryDependenceAnalysis.h	/^    bool isNonLocal() const {$/;"	f	class:llvm::MemDepResult
isNonNegative	ADT/APInt.h	/^  bool isNonNegative() const {$/;"	f	class:llvm::APInt
isNonNull	ADT/NullablePtr.h	/^  bool isNonNull() const { return Ptr != 0; }$/;"	f	class:llvm::NullablePtr
isNonTemporal	CodeGen/MachineMemOperand.h	/^  bool isNonTemporal() const { return Flags & MONonTemporal; }$/;"	f	class:llvm::MachineMemOperand
isNonTemporal	CodeGen/SelectionDAGNodes.h	/^  bool isNonTemporal() const { return (SubclassData >> 6) & 1; }$/;"	f	class:llvm::MemSDNode
isNonZero	ADT/APFloat.h	/^    bool isNonZero() const { return category != fcZero; }$/;"	f	class:llvm::APFloat
isNormal	ADT/APFloat.h	/^    bool isNormal() const { return category == fcNormal; }$/;"	f	class:llvm::APFloat
isNormalLoad	CodeGen/SelectionDAGNodes.h	/^  inline bool isNormalLoad(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isNormalMemory	CodeGen/ScheduleDAG.h	/^        bool isNormalMemory : 1;$/;"	m	struct:llvm::SDep::__anon41::__anon42
isNormalMemory	CodeGen/ScheduleDAG.h	/^    bool isNormalMemory() const {$/;"	f	class:llvm::SDep
isNormalStore	CodeGen/SelectionDAGNodes.h	/^  inline bool isNormalStore(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isNot	MC/MCParser/MCAsmLexer.h	/^  bool isNot(AsmToken::TokenKind K) const { return CurTok.isNot(K); }$/;"	f	class:llvm::MCAsmLexer
isNot	MC/MCParser/MCAsmLexer.h	/^  bool isNot(TokenKind K) const { return Kind != K; }$/;"	f	class:llvm::AsmToken
isNot	MC/MCTargetAsmLexer.h	/^  bool isNot(AsmToken::TokenKind K) const { return CurTok.isNot(K); }$/;"	f	class:llvm::MCTargetAsmLexer
isNotAlreadyContainedIn	Analysis/LoopInfo.h	/^  static bool isNotAlreadyContainedIn(const LoopT *SubLoop,$/;"	f	class:llvm::LoopInfoBase
isNotDuplicable	CodeGen/MachineInstr.h	/^  bool isNotDuplicable(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
isNotDuplicable	MC/MCInstrDesc.h	/^  bool isNotDuplicable() const {$/;"	f	class:llvm::MCInstrDesc
isNotEqual	ADT/ImmutableSet.h	/^  bool isNotEqual(const ImutAVLTree& RHS) const { return !isEqual(RHS); }$/;"	f	class:llvm::ImutAVLTree
isNotInMIMap	CodeGen/LiveIntervalAnalysis.h	/^    bool isNotInMIMap(const MachineInstr* Instr) const {$/;"	f	class:llvm::LiveIntervals
isNotUniqued	Metadata.h	/^  bool isNotUniqued() const { $/;"	f	class:llvm::MDNode
isNull	ADT/NullablePtr.h	/^  bool isNull() const { return Ptr == 0; }$/;"	f	class:llvm::NullablePtr
isNull	ADT/PointerUnion.h	/^    bool isNull() const { return Val.isNull(); }$/;"	f	class:llvm::PointerUnion3
isNull	ADT/PointerUnion.h	/^    bool isNull() const { return Val.isNull(); }$/;"	f	class:llvm::PointerUnion4
isNull	ADT/Twine.h	/^    bool isNull() const {$/;"	f	class:llvm::Twine
isNull	Object/ELF.h	/^    bool isNull() const { return getPointer() == NULL; }$/;"	f	class:llvm::object::ELFObjectFile::VersionMapEntry
isNullValue	CodeGen/SelectionDAGNodes.h	/^  bool isNullValue() const { return Value->isNullValue(); }$/;"	f	class:llvm::ConstantSDNode
isNullary	ADT/Twine.h	/^    bool isNullary() const {$/;"	f	class:llvm::Twine
isOSBinFormatCOFF	ADT/Triple.h	/^  bool isOSBinFormatCOFF() const {$/;"	f	class:llvm::Triple
isOSBinFormatELF	ADT/Triple.h	/^  bool isOSBinFormatELF() const {$/;"	f	class:llvm::Triple
isOSCygMing	ADT/Triple.h	/^  bool isOSCygMing() const {$/;"	f	class:llvm::Triple
isOSDarwin	ADT/Triple.h	/^  bool isOSDarwin() const {$/;"	f	class:llvm::Triple
isOSVersionLT	ADT/Triple.h	/^  bool isOSVersionLT(unsigned Major, unsigned Minor = 0,$/;"	f	class:llvm::Triple
isOSWindows	ADT/Triple.h	/^  bool isOSWindows() const {$/;"	f	class:llvm::Triple
isObjcClassComplete	DebugInfo.h	/^    bool isObjcClassComplete() const {$/;"	f	class:llvm::DIType
isObject	Object/Binary.h	/^  bool isObject() const {$/;"	f	class:llvm::object::Binary
isObjectPointer	DebugInfo.h	/^    bool isObjectPointer() const {$/;"	f	class:llvm::DIType
isObjectPointer	DebugInfo.h	/^    bool isObjectPointer() const {$/;"	f	class:llvm::DIVariable
isObjectPreAllocated	CodeGen/MachineFrameInfo.h	/^  bool isObjectPreAllocated(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
isOnRegUseList	CodeGen/MachineOperand.h	/^  bool isOnRegUseList() const {$/;"	f	class:llvm::MachineOperand
isOne	CodeGen/SelectionDAGNodes.h	/^  bool isOne() const { return Value->isOne(); }$/;"	f	class:llvm::ConstantSDNode
isOne	Constants.h	/^  bool isOne() const {$/;"	f	class:llvm::ConstantInt
isOpaque	DerivedTypes.h	/^  bool isOpaque() const { return (getSubclassData() & SCDB_HasBody) == 0; }$/;"	f	class:llvm::StructType
isOperationLegal	Target/TargetLowering.h	/^  bool isOperationLegal(unsigned Op, EVT VT) const {$/;"	f	class:llvm::TargetLowering
isOperationLegalOrCustom	Target/TargetLowering.h	/^  bool isOperationLegalOrCustom(unsigned Op, EVT VT) const {$/;"	f	class:llvm::TargetLowering
isOptimized	DebugInfo.h	/^    bool isOptimized() const           { return getUnsignedField(7) != 0; }$/;"	f	class:llvm::DICompileUnit
isOptionalDef	MC/MCInstrDesc.h	/^  bool isOptionalDef() const { return Flags & (1 << MCOI::OptionalDef); }$/;"	f	class:llvm::MCOperandInfo
isOrdered	Analysis/DependenceAnalysis.h	/^    bool isOrdered() const { return isOutput() || isFlow() || isAnti(); }$/;"	f	class:llvm::Dependence
isOrdinal	Support/COFF.h	/^    bool isOrdinal() const { return data & 0x80000000; }$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
isOutput	InlineAsm.h	/^    isOutput,           \/\/ '=x'$/;"	e	enum:llvm::InlineAsm::ConstraintPrefix
isOverlapped	Support/IntegersSubsetMapping.h	/^  bool isOverlapped(self &RHS) {$/;"	f	class:llvm::IntegersSubsetMapping
isOverloaded	CodeGen/ValueTypes.h	/^    bool isOverloaded() const {$/;"	f	struct:llvm::EVT
isPHI	CodeGen/MachineInstr.h	/^  bool isPHI() const { return getOpcode() == TargetOpcode::PHI; }$/;"	f	class:llvm::MachineInstr
isPHIDef	CodeGen/LiveInterval.h	/^    bool isPHIDef() const { return def.isBlock(); }$/;"	f	class:llvm::VNInfo
isPHIJoin	CodeGen/LiveVariables.h	/^  bool isPHIJoin(unsigned Reg) { return PHIJoins.test(Reg); }$/;"	f	class:llvm::LiveVariables
isPPC_FP128Ty	Type.h	/^  bool isPPC_FP128Ty() const { return getTypeID() == PPC_FP128TyID; }$/;"	f	class:llvm::Type
isPRegOption	CodeGen/RegAllocPBQP.h	/^    bool isPRegOption(unsigned vreg, unsigned option) const {$/;"	f	class:llvm::PBQPRAProblem
isPacked	DerivedTypes.h	/^  bool isPacked() const { return (getSubclassData() & SCDB_Packed) != 0; }$/;"	f	class:llvm::StructType
isParsingInlineAsm	MC/MCTargetAsmParser.h	/^  bool isParsingInlineAsm () { return ParsingInlineAsm; }$/;"	f	class:llvm::MCTargetAsmParser
isPassID	PassSupport.h	/^  bool isPassID(const void *IDPtr) const {$/;"	f	class:llvm::PassInfo
isPeelFirst	Analysis/DependenceAnalysis.h	/^    virtual bool isPeelFirst(unsigned Level) const { return false; }$/;"	f	class:llvm::Dependence
isPeelLast	Analysis/DependenceAnalysis.h	/^    virtual bool isPeelLast(unsigned Level) const { return false; }$/;"	f	class:llvm::Dependence
isPhysRegUsed	CodeGen/MachineRegisterInfo.h	/^  bool isPhysRegUsed(unsigned Reg) const {$/;"	f	class:llvm::MachineRegisterInfo
isPhysicalRegister	Target/TargetRegisterInfo.h	/^  static bool isPhysicalRegister(unsigned Reg) {$/;"	f	class:llvm::TargetRegisterInfo
isPodLike	ADT/ArrayRef.h	/^  template <typename T> struct isPodLike<ArrayRef<T> > {$/;"	s	namespace:llvm
isPodLike	ADT/ImmutableList.h	/^struct isPodLike<ImmutableList<T> > { static const bool value = true; };$/;"	s	namespace:llvm
isPodLike	ADT/PointerIntPair.h	/^struct isPodLike<PointerIntPair<PointerTy, IntBits, IntType> > {$/;"	s	namespace:llvm
isPodLike	ADT/StringRef.h	/^  template <> struct isPodLike<StringRef> { static const bool value = true; };$/;"	s	namespace:llvm
isPodLike	Bitcode/BitCodes.h	/^template <> struct isPodLike<BitCodeAbbrevOp> { static const bool value=true; };$/;"	s	namespace:llvm
isPodLike	CodeGen/LiveInterval.h	/^  template <> struct isPodLike<LiveRange> { static const bool value = true; };$/;"	s	namespace:llvm
isPodLike	CodeGen/ScheduleDAG.h	/^  struct isPodLike<SDep> { static const bool value = true; };$/;"	s	namespace:llvm
isPodLike	CodeGen/SelectionDAGNodes.h	/^template <> struct isPodLike<SDValue> { static const bool value = true; };$/;"	s	namespace:llvm
isPodLike	CodeGen/SlotIndexes.h	/^  template <> struct isPodLike<SlotIndex> { static const bool value = true; };$/;"	s	namespace:llvm
isPodLike	MC/MCInst.h	/^template <> struct isPodLike<MCOperand> { static const bool value = true; };$/;"	s	namespace:llvm
isPodLike	Support/ValueHandle.h	/^struct isPodLike<AssertingVH<T> > {$/;"	s	namespace:llvm
isPodLike	Support/type_traits.h	/^struct isPodLike {$/;"	s	namespace:llvm
isPodLike	Support/type_traits.h	/^struct isPodLike<std::pair<T, U> > {$/;"	s	namespace:llvm
isPoint	Analysis/DependenceAnalysis.h	/^      bool isPoint() const { return Kind == Point; }$/;"	f	class:llvm::DependenceAnalysis::Constraint
isPointerIntoBucketsArray	ADT/DenseMap.h	/^  bool isPointerIntoBucketsArray(const void *Ptr) const {$/;"	f	class:llvm::DenseMapBase
isPointerIntoBucketsArray	ADT/ValueMap.h	/^  bool isPointerIntoBucketsArray(const void *Ptr) const {$/;"	f	class:llvm::ValueMap
isPointerTy	Type.h	/^  bool isPointerTy() const { return getTypeID() == PointerTyID; }$/;"	f	class:llvm::Type
isPosZero	ADT/APFloat.h	/^    bool isPosZero() const { return isZero() && !isNegative(); }$/;"	f	class:llvm::APFloat
isPossiblyExactOpcode	Operator.h	/^  static bool isPossiblyExactOpcode(unsigned OpC) {$/;"	f	class:llvm::PossiblyExactOperator
isPostDominator	Analysis/DominanceFrontier.h	/^  bool isPostDominator() const { return IsPostDominators; }$/;"	f	class:llvm::DominanceFrontierBase
isPostDominator	Analysis/Dominators.h	/^  bool isPostDominator() const { return IsPostDominators; }$/;"	f	class:llvm::DominatorBase
isPow2DivCheap	Target/TargetLowering.h	/^  bool isPow2DivCheap() const { return Pow2DivIsCheap; }$/;"	f	class:llvm::TargetLowering
isPow2VectorType	CodeGen/ValueTypes.h	/^    bool isPow2VectorType() const {$/;"	f	class:llvm::MVT
isPow2VectorType	CodeGen/ValueTypes.h	/^    bool isPow2VectorType() const {$/;"	f	struct:llvm::EVT
isPowerOf2	ADT/APInt.h	/^  bool isPowerOf2() const {$/;"	f	class:llvm::APInt
isPowerOf2_32	Support/MathExtras.h	/^inline bool isPowerOf2_32(uint32_t Value) {$/;"	f	namespace:llvm
isPowerOf2_64	Support/MathExtras.h	/^inline bool isPowerOf2_64(uint64_t Value) {$/;"	f	namespace:llvm
isPred	CodeGen/ScheduleDAG.h	/^    bool isPred(SUnit *N) {$/;"	f	class:llvm::SUnit
isPredecessorOf	CodeGen/SelectionDAGNodes.h	/^  bool isPredecessorOf(const SDNode *N) const { return N->hasPredecessor(this); }$/;"	f	class:llvm::SDNode
isPredicable	CodeGen/MachineInstr.h	/^  bool isPredicable(QueryType Type = AllInBundle) const {$/;"	f	class:llvm::MachineInstr
isPredicable	MC/MCInstrDesc.h	/^  bool isPredicable() const {$/;"	f	class:llvm::MCInstrDesc
isPredicable	Target/TargetInstrInfo.h	/^  virtual bool isPredicable(MachineInstr *MI) const {$/;"	f	class:llvm::TargetInstrInfo
isPredicate	MC/MCInstrDesc.h	/^  bool isPredicate() const { return Flags & (1 << MCOI::Predicate); }$/;"	f	class:llvm::MCOperandInfo
isPredicated	Target/TargetInstrInfo.h	/^  virtual bool isPredicated(const MachineInstr *MI) const {$/;"	f	class:llvm::TargetInstrInfo
isPredictableSelectExpensive	Target/TargetLowering.h	/^  bool isPredictableSelectExpensive() const {$/;"	f	class:llvm::TargetLowering
isPrimitiveType	Type.h	/^  bool isPrimitiveType() const { return getTypeID() <= LastPrimitiveTyID; }$/;"	f	class:llvm::Type
isPrivate	DebugInfo.h	/^    bool isPrivate() const    { $/;"	f	class:llvm::DISubprogram
isPrivate	DebugInfo.h	/^    bool isPrivate() const {$/;"	f	class:llvm::DIType
isPrivateExtern	MC/MCAssembler.h	/^  bool isPrivateExtern() const { return IsPrivateExtern; }$/;"	f	class:llvm::MCSymbolData
isPrivateLinkage	GlobalValue.h	/^  static bool isPrivateLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isProfitableToDupForIfCvt	Target/TargetInstrInfo.h	/^  isProfitableToDupForIfCvt(MachineBasicBlock &MBB, unsigned NumCycles,$/;"	f	class:llvm::TargetInstrInfo
isProfitableToIfCvt	Target/TargetInstrInfo.h	/^  bool isProfitableToIfCvt(MachineBasicBlock &MBB, unsigned NumCycles,$/;"	f	class:llvm::TargetInstrInfo
isProfitableToIfCvt	Target/TargetInstrInfo.h	/^  isProfitableToIfCvt(MachineBasicBlock &TMBB,$/;"	f	class:llvm::TargetInstrInfo
isProfitableToUnpredicate	Target/TargetInstrInfo.h	/^  virtual bool isProfitableToUnpredicate(MachineBasicBlock &TMBB,$/;"	f	class:llvm::TargetInstrInfo
isPrologLabel	CodeGen/MachineInstr.h	/^  bool isPrologLabel() const {$/;"	f	class:llvm::MachineInstr
isProperSubClass	CodeGen/RegisterClassInfo.h	/^  bool isProperSubClass(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::RegisterClassInfo
isProtected	DebugInfo.h	/^    bool isProtected() const    { $/;"	f	class:llvm::DISubprogram
isProtected	DebugInfo.h	/^    bool isProtected() const {$/;"	f	class:llvm::DIType
isPrototyped	DebugInfo.h	/^    bool isPrototyped() const    { $/;"	f	class:llvm::DISubprogram
isPseudo	CodeGen/MachineInstr.h	/^  bool isPseudo(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
isPseudo	MC/MCInstrDesc.h	/^  bool isPseudo() const {$/;"	f	class:llvm::MCInstrDesc
isPushCodeFrame	MC/MCWin64EH.h	/^    bool isPushCodeFrame() const { return Offset == 1; }$/;"	f	class:llvm::MCWin64EHInstruction
isQuadratic	Analysis/ScalarEvolutionExpressions.h	/^    bool isQuadratic() const {$/;"	f	class:llvm::SCEVAddRecExpr
isROpened	Support/IntegersSubsetMapping.h	/^    bool isROpened() { return State == R_OPENED; }$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
isRawBitcode	Bitcode/ReaderWriter.h	/^  inline bool isRawBitcode(const unsigned char *BufPtr,$/;"	f	namespace:llvm
isReachable	Analysis/BlockFrequencyImpl.h	/^  bool isReachable(BlockT *BB) {$/;"	f	class:llvm::BlockFrequencyImpl
isReachableFromEntry	Analysis/Dominators.h	/^  bool isReachableFromEntry(const BasicBlock* A) const {$/;"	f	class:llvm::DominatorTree
isReachableFromEntry	Analysis/Dominators.h	/^  bool isReachableFromEntry(const NodeT* A) const {$/;"	f	class:llvm::DominatorTreeBase
isReachableFromEntry	Analysis/Dominators.h	/^  inline bool isReachableFromEntry(const DomTreeNodeBase<NodeT> *A) const {$/;"	f	class:llvm::DominatorTreeBase
isReachableFromEntry	CodeGen/MachineDominators.h	/^  bool isReachableFromEntry(MachineBasicBlock *A) {$/;"	f	class:llvm::MachineDominatorTree
isReadOnly	MC/SectionKind.h	/^  bool isReadOnly() const {$/;"	f	class:llvm::SectionKind
isReadOnlyData	Object/ObjectFile.h	/^inline error_code SectionRef::isReadOnlyData(bool &Result) const {$/;"	f	class:llvm::object::SectionRef
isReadOnlyObjCProperty	DebugInfo.h	/^    bool isReadOnlyObjCProperty() {$/;"	f	class:llvm::DIDerivedType
isReadOnlyObjCProperty	DebugInfo.h	/^    bool isReadOnlyObjCProperty() {$/;"	f	class:llvm::DIObjCProperty
isReadOnlyWithRel	MC/SectionKind.h	/^  bool isReadOnlyWithRel() const {$/;"	f	class:llvm::SectionKind
isReadOnlyWithRelLocal	MC/SectionKind.h	/^  bool isReadOnlyWithRelLocal() const {$/;"	f	class:llvm::SectionKind
isReadWriteObjCProperty	DebugInfo.h	/^    bool isReadWriteObjCProperty() {$/;"	f	class:llvm::DIDerivedType
isReadWriteObjCProperty	DebugInfo.h	/^    bool isReadWriteObjCProperty() {$/;"	f	class:llvm::DIObjCProperty
isReady	CodeGen/ScheduleDAG.h	/^    virtual bool isReady(SUnit *) const {$/;"	f	class:llvm::SchedulingPriorityQueue
isReallyTriviallyReMaterializable	Target/TargetInstrInfo.h	/^  virtual bool isReallyTriviallyReMaterializable(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
isRecursive	Analysis/CodeMetrics.h	/^    bool isRecursive;$/;"	m	struct:llvm::CodeMetrics
isRef	Analysis/AliasSetTracker.h	/^  bool isRef() const { return AccessTy & Refs; }$/;"	f	class:llvm::AliasSet
isReg	CodeGen/MachineOperand.h	/^  bool isReg() const { return OpKind == MO_Register; }$/;"	f	class:llvm::MachineOperand
isReg	MC/MCInst.h	/^  bool isReg() const { return Kind == kRegister; }$/;"	f	class:llvm::MCOperand
isReg	MC/MachineLocation.h	/^  bool isReg()           const { return IsRegister; }$/;"	f	class:llvm::MachineLocation
isRegDefEarlyClobberKind	InlineAsm.h	/^  static bool isRegDefEarlyClobberKind(unsigned Flag) {$/;"	f	class:llvm::InlineAsm
isRegDefKind	InlineAsm.h	/^  static bool isRegDefKind(unsigned Flag){ return getKind(Flag) == Kind_RegDef;}$/;"	f	class:llvm::InlineAsm
isRegLoc	CodeGen/CallingConvLower.h	/^  bool isRegLoc() const { return !isMem; }$/;"	f	class:llvm::CCValAssign
isRegMask	CodeGen/MachineOperand.h	/^  bool isRegMask() const { return OpKind == MO_RegisterMask; }$/;"	f	class:llvm::MachineOperand
isRegSequence	CodeGen/MachineInstr.h	/^  bool isRegSequence() const {$/;"	f	class:llvm::MachineInstr
isRegTiedToDefOperand	CodeGen/MachineInstr.h	/^  bool isRegTiedToDefOperand(unsigned UseOpIdx, unsigned *DefOpIdx = 0) const {$/;"	f	class:llvm::MachineInstr
isRegTiedToUseOperand	CodeGen/MachineInstr.h	/^  bool isRegTiedToUseOperand(unsigned DefOpIdx, unsigned *UseOpIdx = 0) const {$/;"	f	class:llvm::MachineInstr
isRegionMode	Analysis/RegionIterator.h	/^  bool isRegionMode() const { return Node.getInt() != ItBB; }$/;"	f	class:llvm::RNSuccIterator
isRegister	CodeGen/SlotIndexes.h	/^    bool isRegister() const { return getSlot() == Slot_Register; }$/;"	f	class:llvm::SlotIndex
isRelational	Instructions.h	/^  bool isRelational() const { return !isEquality(); }$/;"	f	class:llvm::FCmpInst
isRelational	Instructions.h	/^  bool isRelational() const {$/;"	f	class:llvm::ICmpInst
isRelational	Instructions.h	/^  static bool isRelational(Predicate P) {$/;"	f	class:llvm::ICmpInst
isRematerializable	CodeGen/MachineInstr.h	/^  bool isRematerializable(QueryType Type = AllInBundle) const {$/;"	f	class:llvm::MachineInstr
isRematerializable	MC/MCInstrDesc.h	/^  bool isRematerializable() const {$/;"	f	class:llvm::MCInstrDesc
isRequiredForExecution	Object/ObjectFile.h	/^inline error_code SectionRef::isRequiredForExecution(bool &Result) const {$/;"	f	class:llvm::object::SectionRef
isReserved	CodeGen/MachineRegisterInfo.h	/^  bool isReserved(unsigned PhysReg) const {$/;"	f	class:llvm::MachineRegisterInfo
isReserved	CodeGen/RegisterScavenging.h	/^  bool isReserved(unsigned Reg) const { return MRI->isReserved(Reg); }$/;"	f	class:llvm::RegScavenger
isResult	CodeGen/MachineRelocation.h	/^    isResult,         \/\/ Relocation has be transformed into its result pointer.$/;"	e	enum:llvm::MachineRelocation::AddressType
isRetainObjCProperty	DebugInfo.h	/^    bool isRetainObjCProperty() {$/;"	f	class:llvm::DIDerivedType
isRetainObjCProperty	DebugInfo.h	/^    bool isRetainObjCProperty() {$/;"	f	class:llvm::DIObjCProperty
isReturn	CodeGen/MachineInstr.h	/^  bool isReturn(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
isReturn	MC/MCInstrAnalysis.h	/^  virtual bool isReturn(const MCInst &Inst) const {$/;"	f	class:llvm::MCInstrAnalysis
isReturn	MC/MCInstrDesc.h	/^  bool isReturn() const {$/;"	f	class:llvm::MCInstrDesc
isReturnAddressTaken	CodeGen/MachineFrameInfo.h	/^  bool isReturnAddressTaken() const { return ReturnAddressTaken; }$/;"	f	class:llvm::MachineFrameInfo
isRound	CodeGen/ValueTypes.h	/^    bool isRound() const {$/;"	f	struct:llvm::EVT
isSEXTLoad	CodeGen/SelectionDAGNodes.h	/^  inline bool isSEXTLoad(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isSExt	Target/TargetCallingConv.h	/^    bool isSExt()   const { return Flags & SExt; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
isSExt	Target/TargetLowering.h	/^    bool isSExt  : 1;$/;"	m	struct:llvm::TargetLowering::ArgListEntry
isSRet	Target/TargetCallingConv.h	/^    bool isSRet()   const { return Flags & SRet; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
isSRet	Target/TargetLowering.h	/^    bool isSRet  : 1;$/;"	m	struct:llvm::TargetLowering::ArgListEntry
isSSA	CodeGen/MachineRegisterInfo.h	/^  bool isSSA() const { return IsSSA; }$/;"	f	class:llvm::MachineRegisterInfo
isSVR4SymbolTable	Bitcode/Archive.h	/^    bool isSVR4SymbolTable() const { return flags&SVR4SymbolTableFlag; }$/;"	f	class:llvm::ArchiveMember
isSafeToMoveRegClassDefs	Target/TargetInstrInfo.h	/^  virtual bool isSafeToMoveRegClassDefs(const TargetRegisterClass *RC) const {$/;"	f	class:llvm::TargetInstrInfo
isSameInstr	CodeGen/SlotIndexes.h	/^    static bool isSameInstr(SlotIndex A, SlotIndex B) {$/;"	f	class:llvm::SlotIndex
isSameValue	ADT/APInt.h	/^  static bool isSameValue(const APInt &I1, const APInt &I2) {$/;"	f	class:llvm::APInt
isSameValue	ADT/APSInt.h	/^  static bool isSameValue(const APSInt &I1, const APSInt &I2) {$/;"	f	class:llvm::APSInt
isSatisfies	Support/IntegersSubset.h	/^  bool isSatisfies(const IntTy &CheckingVal) const {$/;"	f	class:llvm::IntegersSubsetGeneric
isSectionAtomizable	MC/MCAsmBackend.h	/^  virtual bool isSectionAtomizable(const MCSection &Section) const {$/;"	f	class:llvm::MCAsmBackend
isSectionBSS	Object/ELF.h	/^                        ::isSectionBSS(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
isSectionData	Object/ELF.h	/^                        ::isSectionData(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
isSectionReadOnlyData	Object/ELF.h	/^                       ::isSectionReadOnlyData(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
isSectionRequiredForExecution	Object/ELF.h	/^                        ::isSectionRequiredForExecution(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
isSectionText	Object/ELF.h	/^                        ::isSectionText(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
isSectionVirtual	Object/ELF.h	/^                        ::isSectionVirtual(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
isSectionZeroInit	Object/ELF.h	/^                        ::isSectionZeroInit(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
isSelect	CodeGen/MachineInstr.h	/^  bool isSelect(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
isSelect	MC/MCInstrDesc.h	/^  bool isSelect() const {$/;"	f	class:llvm::MCInstrDesc
isSelectExpensive	Target/TargetLowering.h	/^  bool isSelectExpensive() const { return SelectIsExpensive; }$/;"	f	class:llvm::TargetLowering
isSelectSupported	Target/TargetLowering.h	/^  virtual bool isSelectSupported(SelectSupportKind kind) const { return true; }$/;"	f	class:llvm::TargetLowering
isSet	IRBuilder.h	/^    bool isSet() const { return (Block != 0); }$/;"	f	class:llvm::IRBuilderBase::InsertPoint
isSet	Support/CommandLine.h	/^  bool isSet(const T &V) {$/;"	f	class:llvm::cl::bits_storage
isShift	Instruction.h	/^  bool isShift() { return isShift(getOpcode()); }$/;"	f	class:llvm::Instruction
isShift	Instruction.h	/^  static inline bool isShift(unsigned Opcode) {$/;"	f	class:llvm::Instruction
isShiftedInt	Support/MathExtras.h	/^inline bool isShiftedInt(int64_t x) {$/;"	f	namespace:llvm
isShiftedMask	ADT/APInt.h	/^inline bool isShiftedMask(unsigned numBits, const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
isShiftedMask_32	Support/MathExtras.h	/^inline bool isShiftedMask_32(uint32_t Value) {$/;"	f	namespace:llvm
isShiftedMask_64	Support/MathExtras.h	/^inline bool isShiftedMask_64(uint64_t Value) {$/;"	f	namespace:llvm
isShiftedUInt	Support/MathExtras.h	/^inline bool isShiftedUInt(uint64_t x) {$/;"	f	namespace:llvm
isShuffleMaskLegal	Target/TargetLowering.h	/^  virtual bool isShuffleMaskLegal(const SmallVectorImpl<int> &\/*Mask*\/,$/;"	f	class:llvm::TargetLowering
isSignBit	ADT/APInt.h	/^  bool isSignBit() const { return isMinSignedValue(); }$/;"	f	class:llvm::APInt
isSigned	ADT/APSInt.h	/^  bool isSigned() const { return !IsUnsigned; }$/;"	f	class:llvm::APSInt
isSigned	InstrTypes.h	/^  bool isSigned() const {$/;"	f	class:llvm::CmpInst
isSigned	MC/MCAssembler.h	/^  bool isSigned() const { return IsSigned; }$/;"	f	class:llvm::MCLEBFragment
isSignedIntN	ADT/APInt.h	/^  bool isSignedIntN(unsigned N) const {$/;"	f	class:llvm::APInt
isSignedIntN	ADT/APInt.h	/^inline bool isSignedIntN(unsigned N, const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
isSignedIntSetCC	CodeGen/ISDOpcodes.h	/^  inline bool isSignedIntSetCC(CondCode Code) {$/;"	f	namespace:llvm::ISD
isSimple	CodeGen/ValueTypes.h	/^    bool isSimple() const {$/;"	f	struct:llvm::EVT
isSimple	Instructions.h	/^  bool isSimple() const { return !isAtomic() && !isVolatile(); }$/;"	f	class:llvm::LoadInst
isSimple	Instructions.h	/^  bool isSimple() const { return !isAtomic() && !isVolatile(); }$/;"	f	class:llvm::StoreInst
isSimple	Support/DOTGraphTraits.h	/^  bool isSimple() {$/;"	f	struct:llvm::DefaultDOTGraphTraits
isSingleElement	Support/ConstantRange.h	/^  bool isSingleElement() const { return getSingleElement() != 0; }$/;"	f	class:llvm::ConstantRange
isSingleNumber	Support/IntegersSubset.h	/^    bool isSingleNumber() const { return IsSingleNumber; }$/;"	f	class:llvm::IntRange
isSingleNumber	Support/IntegersSubset.h	/^  bool isSingleNumber() const {$/;"	f	class:llvm::IntegersSubsetGeneric
isSingleNumber	Support/IntegersSubset.h	/^  bool isSingleNumber(unsigned idx) const {$/;"	f	class:llvm::IntegersSubsetGeneric
isSingleNumbersOnly	Support/IntegersSubset.h	/^  bool isSingleNumbersOnly() const {$/;"	f	class:llvm::IntegersSubsetGeneric
isSingleStringRef	ADT/Twine.h	/^    bool isSingleStringRef() const {$/;"	f	class:llvm::Twine
isSingleValueType	Type.h	/^  bool isSingleValueType() const {$/;"	f	class:llvm::Type
isSingleWord	ADT/APInt.h	/^  bool isSingleWord() const {$/;"	f	class:llvm::APInt
isSingleton	ADT/ImmutableSet.h	/^  bool isSingleton() const { return getHeight() == 1; }$/;"	f	class:llvm::ImmutableSet
isSingleton	ADT/ImmutableSet.h	/^  bool isSingleton() const { return getHeight() == 1; }$/;"	f	class:llvm::ImmutableSetRef
isSingular	CallGraphSCCPass.h	/^  bool isSingular() const { return Nodes.size() == 1; }$/;"	f	class:llvm::CallGraphSCC
isSized	Type.h	/^  bool isSized() const {$/;"	f	class:llvm::Type
isSlowDivBypassed	Target/TargetLowering.h	/^  bool isSlowDivBypassed() const { return !BypassSlowDivWidths.empty(); }$/;"	f	class:llvm::TargetLowering
isSmall	ADT/SmallBitVector.h	/^  bool isSmall() const {$/;"	f	class:llvm::SmallBitVector
isSmall	ADT/SmallPtrSet.h	/^  bool isSmall() const { return CurArray == SmallArray; }$/;"	f	class:llvm::SmallPtrSetImpl
isSmall	ADT/SmallSet.h	/^  bool isSmall() const { return Set.empty(); }$/;"	f	class:llvm::SmallSet
isSmall	ADT/SmallVector.h	/^  bool isSmall() const {$/;"	f	class:llvm::SmallVectorTemplateCommon
isSoloInstruction	CodeGen/DFAPacketizer.h	/^  virtual bool isSoloInstruction(MachineInstr *MI) {$/;"	f	class:llvm::VLIWPacketizerList
isSpillOption	CodeGen/RegAllocPBQP.h	/^    bool isSpillOption(unsigned vreg, unsigned option) const {$/;"	f	class:llvm::PBQPRAProblem
isSpillSlot	CodeGen/MachineFrameInfo.h	/^    bool isSpillSlot;$/;"	m	struct:llvm::MachineFrameInfo::StackObject
isSpillSlotObjectIndex	CodeGen/MachineFrameInfo.h	/^  bool isSpillSlotObjectIndex(int ObjectIdx) const {$/;"	f	class:llvm::MachineFrameInfo
isSpillable	CodeGen/LiveInterval.h	/^    bool isSpillable() const {$/;"	f	class:llvm::LiveInterval
isSplat	CodeGen/SelectionDAGNodes.h	/^  bool isSplat() const { return isSplatMask(Mask, getValueType(0)); }$/;"	f	class:llvm::ShuffleVectorSDNode
isSplit	Target/TargetCallingConv.h	/^    bool isSplit()   const { return Flags & Split; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
isSplitable	Analysis/DependenceAnalysis.h	/^    virtual bool isSplitable(unsigned Level) const { return false; }$/;"	f	class:llvm::Dependence
isStackGrowthDirectionUp	MC/MCAsmInfo.h	/^    bool isStackGrowthDirectionUp() const {$/;"	f	class:llvm::MCAsmInfo
isStackSlot	Target/TargetRegisterInfo.h	/^  static bool isStackSlot(unsigned Reg) {$/;"	f	class:llvm::TargetRegisterInfo
isStore	CodeGen/MachineMemOperand.h	/^  bool isStore() const { return Flags & MOStore; }$/;"	f	class:llvm::MachineMemOperand
isStoreToStackSlot	Target/TargetInstrInfo.h	/^  virtual unsigned isStoreToStackSlot(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
isStoreToStackSlotPostFE	Target/TargetInstrInfo.h	/^  virtual unsigned isStoreToStackSlotPostFE(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
isStrictlyPositive	ADT/APInt.h	/^  bool isStrictlyPositive() const {$/;"	f	class:llvm::APInt
isStringTable	Bitcode/Archive.h	/^    bool isStringTable() const { return flags&StringTableFlag; }$/;"	f	class:llvm::ArchiveMember
isStructTy	Type.h	/^  bool isStructTy() const { return getTypeID() == StructTyID; }$/;"	f	class:llvm::Type
isSubClassOf	TableGen/Record.h	/^  bool isSubClassOf(StringRef Name) const {$/;"	f	class:llvm::Record
isSubClassOf	TableGen/Record.h	/^  bool isSubClassOf(const Record *R) const {$/;"	f	class:llvm::Record
isSubRegion	Analysis/RegionInfo.h	/^  inline bool isSubRegion() const {$/;"	f	class:llvm::RegionNode
isSubRegister	Target/TargetRegisterInfo.h	/^  bool isSubRegister(unsigned regA, unsigned regB) const {$/;"	f	class:llvm::TargetRegisterInfo
isSubregToReg	CodeGen/MachineInstr.h	/^  bool isSubregToReg() const {$/;"	f	class:llvm::MachineInstr
isSucc	CodeGen/ScheduleDAG.h	/^    bool isSucc(SUnit *N) {$/;"	f	class:llvm::SUnit
isSuccessor	Analysis/Interval.h	/^  inline bool isSuccessor(BasicBlock *BB) const {$/;"	f	class:llvm::Interval
isSuperRegister	Target/TargetRegisterInfo.h	/^  bool isSuperRegister(unsigned RegA, unsigned RegB) const {$/;"	f	class:llvm::TargetRegisterInfo
isSwappedEndian	Object/MachOObject.h	/^  bool isSwappedEndian() const { return IsSwappedEndian; }$/;"	f	class:llvm::object::MachOObject
isSymbol	CodeGen/MachineOperand.h	/^  bool isSymbol() const { return OpKind == MO_ExternalSymbol; }$/;"	f	class:llvm::MachineOperand
isSymbolSearchingDisabled	ExecutionEngine/ExecutionEngine.h	/^  bool isSymbolSearchingDisabled() const {$/;"	f	class:llvm::ExecutionEngine
isTRUNCStore	CodeGen/SelectionDAGNodes.h	/^  inline bool isTRUNCStore(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isTailCall	Instructions.h	/^  bool isTailCall() const { return getSubclassDataFromInstruction() & 1; }$/;"	f	class:llvm::CallInst
isTargetIndex	CodeGen/MachineOperand.h	/^  bool isTargetIndex() const { return OpKind == MO_TargetIndex; }$/;"	f	class:llvm::MachineOperand
isTargetMemoryOpcode	CodeGen/SelectionDAGNodes.h	/^  bool isTargetMemoryOpcode() const {$/;"	f	class:llvm::SDNode
isTargetMemoryOpcode	CodeGen/SelectionDAGNodes.h	/^inline bool SDValue::isTargetMemoryOpcode() const {$/;"	f	class:llvm::SDValue
isTargetOpcode	CodeGen/SelectionDAGNodes.h	/^  bool isTargetOpcode() const { return NodeType >= ISD::BUILTIN_OP_END; }$/;"	f	class:llvm::SDNode
isTargetOpcode	CodeGen/SelectionDAGNodes.h	/^inline bool SDValue::isTargetOpcode() const {$/;"	f	class:llvm::SDValue
isTemplateArg	TableGen/Record.h	/^  bool isTemplateArg(Init *Name) const {$/;"	f	class:llvm::Record
isTemplateArg	TableGen/Record.h	/^  bool isTemplateArg(StringRef Name) const {$/;"	f	class:llvm::Record
isTemporary	MC/MCSymbol.h	/^    bool isTemporary() const { return IsTemporary; }$/;"	f	class:llvm::MCSymbol
isTerminator	CodeGen/MachineInstr.h	/^  bool isTerminator(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
isTerminator	Instruction.h	/^  bool isTerminator() const { return isTerminator(getOpcode()); }$/;"	f	class:llvm::Instruction
isTerminator	Instruction.h	/^  static inline bool isTerminator(unsigned OpCode) {$/;"	f	class:llvm::Instruction
isTerminator	MC/MCInstrDesc.h	/^  bool isTerminator() const {$/;"	f	class:llvm::MCInstrDesc
isText	MC/SectionKind.h	/^  bool isText() const { return K == Text; }$/;"	f	class:llvm::SectionKind
isText	Object/ObjectFile.h	/^inline error_code SectionRef::isText(bool &Result) const {$/;"	f	class:llvm::object::SectionRef
isTextAtom	MC/MCAtom.h	/^  bool isTextAtom() { return Type == TextAtom; }$/;"	f	class:llvm::MCAtom
isThreadBSS	MC/SectionKind.h	/^  bool isThreadBSS() const { return K == ThreadBSS; }$/;"	f	class:llvm::SectionKind
isThreadData	MC/SectionKind.h	/^  bool isThreadData() const { return K == ThreadData; }$/;"	f	class:llvm::SectionKind
isThreadLocal	GlobalVariable.h	/^  bool isThreadLocal() const { return threadLocalMode != NotThreadLocal; }$/;"	f	class:llvm::GlobalVariable
isThreadLocal	MC/SectionKind.h	/^  bool isThreadLocal() const {$/;"	f	class:llvm::SectionKind
isThumbFunc	MC/MCAssembler.h	/^  bool isThumbFunc(const MCSymbol *Func) const {$/;"	f	class:llvm::MCAssembler
isTied	CodeGen/MachineOperand.h	/^  bool isTied() const {$/;"	f	class:llvm::MachineOperand
isTopLevelRegion	Analysis/RegionInfo.h	/^  bool isTopLevelRegion() const { return exit == NULL; }$/;"	f	class:llvm::Region
isTopReady	CodeGen/ScheduleDAG.h	/^    bool isTopReady() const {$/;"	f	class:llvm::SUnit
isTransient	CodeGen/MachineInstr.h	/^  bool isTransient() const {$/;"	f	class:llvm::MachineInstr
isTriviallyEmpty	ADT/Twine.h	/^    bool isTriviallyEmpty() const {$/;"	f	class:llvm::Twine
isTriviallyReMaterializable	Target/TargetInstrInfo.h	/^  bool isTriviallyReMaterializable(const MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
isTrueWhenEqual	CodeGen/ISDOpcodes.h	/^  inline bool isTrueWhenEqual(CondCode Cond) {$/;"	f	namespace:llvm::ISD
isTrueWhenEqual	InstrTypes.h	/^  bool isTrueWhenEqual() const {$/;"	f	class:llvm::CmpInst
isTruncStoreLegal	Target/TargetLowering.h	/^  bool isTruncStoreLegal(EVT ValVT, EVT MemVT) const {$/;"	f	class:llvm::TargetLowering
isTruncateFree	Target/TargetLowering.h	/^  virtual bool isTruncateFree(EVT \/*VT1*\/, EVT \/*VT2*\/) const {$/;"	f	class:llvm::TargetLowering
isTruncateFree	Target/TargetLowering.h	/^  virtual bool isTruncateFree(Type * \/*Ty1*\/, Type * \/*Ty2*\/) const {$/;"	f	class:llvm::TargetLowering
isTruncateFree	TargetTransformInfo.h	/^  virtual bool isTruncateFree(Type * \/*Ty1*\/, Type * \/*Ty2*\/) const {$/;"	f	class:llvm::ScalarTargetTransformInfo
isTruncatingStore	CodeGen/SelectionDAGNodes.h	/^  bool isTruncatingStore() const { return SubclassData & 1; }$/;"	f	class:llvm::StoreSDNode
isTypeDesirableForOp	Target/TargetLowering.h	/^  virtual bool isTypeDesirableForOp(unsigned \/*Opc*\/, EVT VT) const {$/;"	f	class:llvm::TargetLowering
isTypeLegal	Target/TargetLowering.h	/^  bool isTypeLegal(EVT VT) const {$/;"	f	class:llvm::TargetLowering
isTypeLegal	TargetTransformInfo.h	/^  virtual bool isTypeLegal(Type *Ty) const {$/;"	f	class:llvm::ScalarTargetTransformInfo
isUInt	Support/MathExtras.h	/^inline bool isUInt(uint64_t x) {$/;"	f	namespace:llvm
isUInt	Support/MathExtras.h	/^inline bool isUInt<16>(uint64_t x) {$/;"	f	namespace:llvm
isUInt	Support/MathExtras.h	/^inline bool isUInt<32>(uint64_t x) {$/;"	f	namespace:llvm
isUInt	Support/MathExtras.h	/^inline bool isUInt<8>(uint64_t x) {$/;"	f	namespace:llvm
isUIntN	Support/MathExtras.h	/^inline bool isUIntN(unsigned N, uint64_t x) {$/;"	f	namespace:llvm
isUNINDEXEDLoad	CodeGen/SelectionDAGNodes.h	/^  inline bool isUNINDEXEDLoad(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isUNINDEXEDStore	CodeGen/SelectionDAGNodes.h	/^  inline bool isUNINDEXEDStore(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isUnary	ADT/Twine.h	/^    bool isUnary() const {$/;"	f	class:llvm::Twine
isUnconditional	Instructions.h	/^  bool isUnconditional() const { return getNumOperands() == 1; }$/;"	f	class:llvm::BranchInst
isUnconditionalBranch	CodeGen/MachineInstr.h	/^  bool isUnconditionalBranch(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
isUnconditionalBranch	MC/MCInstrAnalysis.h	/^  virtual bool isUnconditionalBranch(const MCInst &Inst) const {$/;"	f	class:llvm::MCInstrAnalysis
isUnconditionalBranch	MC/MCInstrDesc.h	/^  bool isUnconditionalBranch() const {$/;"	f	class:llvm::MCInstrDesc
isUndef	CodeGen/MachineOperand.h	/^  bool isUndef() const {$/;"	f	class:llvm::MachineOperand
isUndefined	MC/MCSymbol.h	/^    bool isUndefined() const {$/;"	f	class:llvm::MCSymbol
isUnindexed	CodeGen/SelectionDAGNodes.h	/^  bool isUnindexed() const { return getAddressingMode() == ISD::UNINDEXED; }$/;"	f	class:llvm::LSBaseSDNode
isUnknown	Analysis/MemoryDependenceAnalysis.h	/^    bool isUnknown() const {$/;"	f	class:llvm::MemDepResult
isUnknown	Support/DebugLoc.h	/^    bool isUnknown() const { return ScopeIdx == 0; }$/;"	f	class:llvm::DebugLoc
isUnordered	Analysis/DependenceAnalysis.h	/^    bool isUnordered() const { return isInput(); }$/;"	f	class:llvm::Dependence
isUnordered	CodeGen/MachineMemOperand.h	/^  bool isUnordered() const { return !isVolatile(); }$/;"	f	class:llvm::MachineMemOperand
isUnordered	Instructions.h	/^  bool isUnordered() const {$/;"	f	class:llvm::LoadInst
isUnordered	Instructions.h	/^  bool isUnordered() const {$/;"	f	class:llvm::StoreInst
isUnsigned	ADT/APSInt.h	/^  bool isUnsigned() const { return IsUnsigned; }$/;"	f	class:llvm::APSInt
isUnsigned	InstrTypes.h	/^  bool isUnsigned() const {$/;"	f	class:llvm::CmpInst
isUnsignedIntSetCC	CodeGen/ISDOpcodes.h	/^  inline bool isUnsignedIntSetCC(CondCode Code) {$/;"	f	namespace:llvm::ISD
isUnused	CodeGen/LiveInterval.h	/^    bool isUnused() const { return !def.isValid(); }$/;"	f	class:llvm::VNInfo
isUpToDate	CodeGen/PBQP/Heuristics/Briggs.h	/^        bool isUpToDate;$/;"	m	struct:PBQP::Heuristics::Briggs::EdgeData
isUse	CodeGen/MachineOperand.h	/^  bool isUse() const {$/;"	f	class:llvm::MachineOperand
isUseOperandTiedToDef	InlineAsm.h	/^  static bool isUseOperandTiedToDef(unsigned Flag, unsigned &Idx) {$/;"	f	class:llvm::InlineAsm
isUsed	CodeGen/RegisterScavenging.h	/^  bool isUsed(unsigned Reg) const   {$/;"	f	class:llvm::RegScavenger
isUsed	MC/MCSymbol.h	/^    bool isUsed() const { return IsUsed; }$/;"	f	class:llvm::MCSymbol
isUsedByReturnOnly	Target/TargetLowering.h	/^  virtual bool isUsedByReturnOnly(SDNode *, SDValue &Chain) const {$/;"	f	class:llvm::TargetLowering
isUsedFunction	CodeGen/MachineModuleInfo.h	/^  bool isUsedFunction(const Function *F) {$/;"	f	class:llvm::MachineModuleInfo
isValid	ADT/Twine.h	/^    bool isValid() const {$/;"	f	class:llvm::Twine
isValid	CodeGen/MachineInstrBundle.h	/^  bool isValid() const { return OpI != OpE; }$/;"	f	class:llvm::MachineOperandIteratorBase
isValid	CodeGen/RegisterPressure.h	/^  bool isValid() const { return PSetID != ~0U; }$/;"	f	struct:llvm::PressureElement
isValid	CodeGen/ScheduleDAGILP.h	/^  bool isValid() const { return Cycles > 0; }$/;"	f	struct:llvm::ILPValue
isValid	CodeGen/SlotIndexes.h	/^    bool isValid() const {$/;"	f	class:llvm::SlotIndex
isValid	DebugInfo.h	/^    bool isValid() const {$/;"	f	class:llvm::DIType
isValid	MC/MCInst.h	/^  bool isValid() const { return Kind != kInvalid; }$/;"	f	class:llvm::MCOperand
isValid	MC/MCRegisterInfo.h	/^    bool isValid() const { return List; }$/;"	f	class:llvm::MCRegisterInfo::DiffListIterator
isValid	MC/MCRegisterInfo.h	/^  bool isValid() const {$/;"	f	class:llvm::MCRegUnitRootIterator
isValid	MC/MCSchedule.h	/^  bool isValid() const {$/;"	f	struct:llvm::MCSchedClassDesc
isValid	Support/DynamicLibrary.h	/^    bool isValid() { return Data != &Invalid; }$/;"	f	class:llvm::sys::DynamicLibrary
isValid	Support/SMLoc.h	/^  bool isValid() const { return Ptr != 0; }$/;"	f	class:llvm::SMLoc
isValid	Support/SMLoc.h	/^  bool isValid() const { return Start.isValid(); }$/;"	f	class:llvm::SMRange
isValid	Support/ValueHandle.h	/^  static bool isValid(Value *V) {$/;"	f	class:llvm::ValueHandleBase
isValid	Target/TargetRegisterInfo.h	/^  bool isValid() const { return Idx; }$/;"	f	class:llvm::SuperRegClassIterator
isValidOffset	Support/DataExtractor.h	/^  bool isValidOffset(uint32_t offset) const { return Data.size() > offset; }$/;"	f	class:llvm::DataExtractor
isValidOffsetForDataOfSize	Support/DataExtractor.h	/^  bool isValidOffsetForDataOfSize(uint32_t offset, uint32_t length) const {$/;"	f	class:llvm::DataExtractor
isValue	Support/PatternMatch.h	/^  bool isValue(const APInt &C) { return C == 1; }$/;"	f	struct:llvm::PatternMatch::is_one
isValue	Support/PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isAllOnesValue(); }$/;"	f	struct:llvm::PatternMatch::is_all_ones
isValue	Support/PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isPowerOf2(); }$/;"	f	struct:llvm::PatternMatch::is_power2
isValue	Support/PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isSignBit(); }$/;"	f	struct:llvm::PatternMatch::is_sign_bit
isVarArg	CodeGen/CallingConvLower.h	/^  bool isVarArg() const { return IsVarArg; }$/;"	f	class:llvm::CCState
isVarArg	DerivedTypes.h	/^  bool isVarArg() const { return getSubclassData(); }$/;"	f	class:llvm::FunctionType
isVariable	Analysis/InlineCost.h	/^    bool isVariable() const { return !isAlways() && !isNever(); }$/;"	f	class:llvm::InlineCost
isVariable	MC/MCSymbol.h	/^    bool isVariable() const {$/;"	f	class:llvm::MCSymbol
isVariadic	CodeGen/MachineInstr.h	/^  bool isVariadic(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
isVariadic	MC/MCInstrDesc.h	/^  bool isVariadic() const {$/;"	f	class:llvm::MCInstrDesc
isVariant	MC/MCSchedule.h	/^  bool isVariant() const {$/;"	f	struct:llvm::MCSchedClassDesc
isVector	CodeGen/ValueTypes.h	/^    bool isVector() const {$/;"	f	class:llvm::MVT
isVector	CodeGen/ValueTypes.h	/^    bool isVector() const {$/;"	f	struct:llvm::EVT
isVectorClearMaskLegal	Target/TargetLowering.h	/^  virtual bool isVectorClearMaskLegal(const SmallVectorImpl<int> &\/*Mask*\/,$/;"	f	class:llvm::TargetLowering
isVectorTy	Type.h	/^  bool isVectorTy() const { return getTypeID() == VectorTyID; }$/;"	f	class:llvm::Type
isVerbose	CodeGen/AsmPrinter.h	/^    bool isVerbose() const { return VerboseAsm; }$/;"	f	class:llvm::AsmPrinter
isVerboseAsm	MC/MCStreamer.h	/^    virtual bool isVerboseAsm() const { return false; }$/;"	f	class:llvm::MCStreamer
isVerdef	Object/ELF.h	/^    bool isVerdef() const { return !isNull() && getInt() == 0; }$/;"	f	class:llvm::object::ELFObjectFile::VersionMapEntry
isVernaux	Object/ELF.h	/^    bool isVernaux() const { return !isNull() && getInt() == 1; }$/;"	f	class:llvm::object::ELFObjectFile::VersionMapEntry
isVirtual	DebugInfo.h	/^    bool isVirtual() const {$/;"	f	class:llvm::DIType
isVirtual	Object/ObjectFile.h	/^inline error_code SectionRef::isVirtual(bool &Result) const {$/;"	f	class:llvm::object::SectionRef
isVirtualRegister	Target/TargetRegisterInfo.h	/^  static bool isVirtualRegister(unsigned Reg) {$/;"	f	class:llvm::TargetRegisterInfo
isVoid	CodeGen/ValueTypes.h	/^      isVoid         =  45,   \/\/ This has no value$/;"	e	enum:llvm::MVT::SimpleValueType
isVoidTy	Type.h	/^  bool isVoidTy() const { return getTypeID() == VoidTyID; }$/;"	f	class:llvm::Type
isVolatile	Analysis/AliasSetTracker.h	/^  bool isVolatile() const { return Volatile; }$/;"	f	class:llvm::AliasSet
isVolatile	CodeGen/MachineMemOperand.h	/^  bool isVolatile() const { return Flags & MOVolatile; }$/;"	f	class:llvm::MachineMemOperand
isVolatile	CodeGen/SelectionDAGNodes.h	/^  bool isVolatile() const { return (SubclassData >> 5) & 1; }$/;"	f	class:llvm::MemSDNode
isVolatile	Instructions.h	/^  bool isVolatile() const { return getSubclassDataFromInstruction() & 1; }$/;"	f	class:llvm::LoadInst
isVolatile	Instructions.h	/^  bool isVolatile() const { return getSubclassDataFromInstruction() & 1; }$/;"	f	class:llvm::StoreInst
isVolatile	Instructions.h	/^  bool isVolatile() const {$/;"	f	class:llvm::AtomicCmpXchgInst
isVolatile	Instructions.h	/^  bool isVolatile() const {$/;"	f	class:llvm::AtomicRMWInst
isVolatile	IntrinsicInst.h	/^    bool isVolatile() const {$/;"	f	class:llvm::MemIntrinsic
isWeakForLinker	GlobalValue.h	/^  bool isWeakForLinker() const { return isWeakForLinker(Linkage); }$/;"	f	class:llvm::GlobalValue
isWeakForLinker	GlobalValue.h	/^  static bool isWeakForLinker(LinkageTypes Linkage)  {$/;"	f	class:llvm::GlobalValue
isWeakLinkage	GlobalValue.h	/^  static bool isWeakLinkage(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
isWriteable	MC/SectionKind.h	/^  bool isWriteable() const {$/;"	f	class:llvm::SectionKind
isX86_FP80Ty	Type.h	/^  bool isX86_FP80Ty() const { return getTypeID() == X86_FP80TyID; }$/;"	f	class:llvm::Type
isX86_MMXTy	Type.h	/^  bool isX86_MMXTy() const { return getTypeID() == X86_MMXTyID; }$/;"	f	class:llvm::Type
isZEXTLoad	CodeGen/SelectionDAGNodes.h	/^  inline bool isZEXTLoad(const SDNode *N) {$/;"	f	namespace:llvm::ISD
isZExt	Target/TargetCallingConv.h	/^    bool isZExt()   const { return Flags & ZExt; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
isZExt	Target/TargetLowering.h	/^    bool isZExt  : 1;$/;"	m	struct:llvm::TargetLowering::ArgListEntry
isZExtFree	Target/TargetLowering.h	/^  virtual bool isZExtFree(EVT \/*VT1*\/, EVT \/*VT2*\/) const {$/;"	f	class:llvm::TargetLowering
isZExtFree	Target/TargetLowering.h	/^  virtual bool isZExtFree(Type * \/*Ty1*\/, Type * \/*Ty2*\/) const {$/;"	f	class:llvm::TargetLowering
isZero	ADT/APFloat.h	/^    bool isZero() const { return category == fcZero; }$/;"	f	class:llvm::APFloat
isZero	CodeGen/PBQP/Math.h	/^    bool isZero() const {$/;"	f	class:PBQP::Matrix
isZero	CodeGen/SelectionDAGNodes.h	/^  bool isZero() const { return Value->isZero(); }$/;"	f	class:llvm::ConstantFPSDNode
isZero	Constants.h	/^  bool isZero() const { return Val.isZero(); }$/;"	f	class:llvm::ConstantFP
isZero	Constants.h	/^  bool isZero() const {$/;"	f	class:llvm::ConstantInt
isZeroCost	Target/TargetInstrInfo.h	/^  bool isZeroCost(unsigned Opcode) const {$/;"	f	class:llvm::TargetInstrInfo
isZeroInit	Object/ObjectFile.h	/^inline error_code SectionRef::isZeroInit(bool &Result) const {$/;"	f	class:llvm::object::SectionRef
isZeroLength	CodeGen/LiveInterval.h	/^    bool isZeroLength(SlotIndexes *Indexes) const {$/;"	f	class:llvm::LiveInterval
is_a_directory	Support/system_error.h	/^  is_a_directory                      = EISDIR,$/;"	e	enum:llvm::errc::_
is_all_ones	Support/PatternMatch.h	/^struct is_all_ones {$/;"	s	namespace:llvm::PatternMatch
is_base_of	Support/type_traits.h	/^struct is_base_of {$/;"	s	namespace:llvm
is_class	Support/type_traits.h	/^struct is_class$/;"	s	namespace:llvm
is_displayed	Support/raw_ostream.h	/^  virtual bool is_displayed() const { return false; }$/;"	f	class:llvm::raw_ostream
is_error_code_enum	Object/Error.h	/^template <> struct is_error_code_enum<object::object_error::_> : true_type { };$/;"	s	namespace:llvm
is_error_code_enum	Object/Error.h	/^template <> struct is_error_code_enum<object::object_error> : true_type { };$/;"	s	namespace:llvm
is_error_code_enum	Support/system_error.h	/^template <> struct is_error_code_enum<windows_error::_> : true_type { };$/;"	s	namespace:llvm
is_error_code_enum	Support/system_error.h	/^template <> struct is_error_code_enum<windows_error> : true_type { };$/;"	s	namespace:llvm
is_error_code_enum	Support/system_error.h	/^template <class Tp> struct is_error_code_enum : public false_type {};$/;"	s	namespace:llvm
is_error_condition_enum	Support/system_error.h	/^template <> struct is_error_condition_enum<errc::_> : true_type { };$/;"	s	namespace:llvm
is_error_condition_enum	Support/system_error.h	/^template <> struct is_error_condition_enum<errc> : true_type { };$/;"	s	namespace:llvm
is_error_condition_enum	Support/system_error.h	/^template <class Tp> struct is_error_condition_enum : public false_type {};$/;"	s	namespace:llvm
is_hashable_data	ADT/Hashing.h	/^template <typename T, typename U> struct is_hashable_data<std::pair<T, U> >$/;"	s	namespace:llvm::hashing::detail
is_hashable_data	ADT/Hashing.h	/^template <typename T> struct is_hashable_data$/;"	s	namespace:llvm::hashing::detail
is_integral	Support/type_traits.h	/^struct is_integral : is_integral_impl<T> {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<         bool>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<         char>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<         int>       : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<         long long> : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<         long>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<         short>     : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<         wchar_t>   : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<  signed char>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<unsigned char>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<unsigned int>       : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<unsigned long long> : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<unsigned long>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <> struct is_integral_impl<unsigned short>     : true_type {};$/;"	s	namespace:llvm
is_integral_impl	Support/type_traits.h	/^template <typename T> struct is_integral_impl           : false_type {};$/;"	s	namespace:llvm
is_integral_or_enum	Support/type_traits.h	/^template <typename T> class is_integral_or_enum {$/;"	c	namespace:llvm
is_object	Support/FileSystem.h	/^  bool is_object() const {$/;"	f	struct:llvm::sys::fs::file_magic
is_one	Support/PatternMatch.h	/^struct is_one {$/;"	s	namespace:llvm::PatternMatch
is_pointer	Support/type_traits.h	/^template <typename T> struct is_pointer : false_type {};$/;"	s	namespace:llvm
is_pointer	Support/type_traits.h	/^template <typename T> struct is_pointer<T* const volatile> : true_type {};$/;"	s	namespace:llvm
is_pointer	Support/type_traits.h	/^template <typename T> struct is_pointer<T* const> : true_type {};$/;"	s	namespace:llvm
is_pointer	Support/type_traits.h	/^template <typename T> struct is_pointer<T* volatile> : true_type {};$/;"	s	namespace:llvm
is_pointer	Support/type_traits.h	/^template <typename T> struct is_pointer<T*> : true_type {};$/;"	s	namespace:llvm
is_power2	Support/PatternMatch.h	/^struct is_power2 {$/;"	s	namespace:llvm::PatternMatch
is_same	Support/type_traits.h	/^template<typename T, typename U> struct is_same       : public false_type {};$/;"	s	namespace:llvm
is_same	Support/type_traits.h	/^template<typename T>             struct is_same<T, T> : public true_type {};$/;"	s	namespace:llvm
is_sign_bit	Support/PatternMatch.h	/^struct is_sign_bit {$/;"	s	namespace:llvm::PatternMatch
isa	Support/Casting.h	/^inline bool isa(const Y &Val) {$/;"	f	namespace:llvm
isa_impl	Support/Casting.h	/^struct isa_impl {$/;"	s	namespace:llvm
isa_impl	Support/Casting.h	/^struct isa_impl<To, From,$/;"	s	namespace:llvm
isa_impl	Type.h	/^template <> struct isa_impl<PointerType, Type> {$/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<Argument, Value> {$/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<BasicBlock, Value> { $/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<Constant, Value> {$/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<Function, Value> { $/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<GlobalAlias, Value> { $/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<GlobalValue, Value> { $/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<GlobalVariable, Value> { $/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<InlineAsm, Value> { $/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<Instruction, Value> { $/;"	s	namespace:llvm
isa_impl	Value.h	/^template <> struct isa_impl<MDNode, Value> { $/;"	s	namespace:llvm
isa_impl_cl	Support/Casting.h	/^template <typename To, typename From> struct isa_impl_cl {$/;"	s	namespace:llvm
isa_impl_cl	Support/Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, From*> {$/;"	s	namespace:llvm
isa_impl_cl	Support/Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, const From*> {$/;"	s	namespace:llvm
isa_impl_cl	Support/Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, const From*const> {$/;"	s	namespace:llvm
isa_impl_cl	Support/Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, const From> {$/;"	s	namespace:llvm
isa_impl_wrap	Support/Casting.h	/^struct isa_impl_wrap {$/;"	s	namespace:llvm
isa_impl_wrap	Support/Casting.h	/^struct isa_impl_wrap<To, FromTy, FromTy> {$/;"	s	namespace:llvm
isub_image	Support/MachO.h	/^      uint32_t isub_image:8,$/;"	m	struct:llvm::MachO::twolevel_hint
isym	Support/MachO.h	/^      uint32_t isym:24,$/;"	m	struct:llvm::MachO::dylib_reference
iterNo	LDDProfilingCommon.h	/^    int iterNo; \/\/ the current iter number    $/;"	m	struct:memRW
iterator	ADT/ArrayRef.h	/^    typedef T *iterator;$/;"	t	class:llvm::MutableArrayRef
iterator	ADT/ArrayRef.h	/^    typedef const T *iterator;$/;"	t	class:llvm::ArrayRef
iterator	ADT/DenseMap.h	/^  typedef DenseMapIterator<KeyT, ValueT, KeyInfoT> iterator;$/;"	t	class:llvm::DenseMapBase
iterator	ADT/DenseSet.h	/^  typedef Iterator      iterator;$/;"	t	class:llvm::DenseSet
iterator	ADT/EquivalenceClasses.h	/^  typedef typename std::set<ECValue>::const_iterator iterator;$/;"	t	class:llvm::EquivalenceClasses
iterator	ADT/FoldingSet.h	/^  typedef FoldingSetIterator<T> iterator;$/;"	t	class:llvm::ContextualFoldingSet
iterator	ADT/FoldingSet.h	/^  typedef FoldingSetIterator<T> iterator;$/;"	t	class:llvm::FoldingSet
iterator	ADT/FoldingSet.h	/^  typedef FoldingSetVectorIterator<T, typename VectorT::iterator> iterator;$/;"	t	class:llvm::FoldingSetVector
iterator	ADT/ImmutableList.h	/^    iterator() : L(0) {}$/;"	f	class:llvm::ImmutableList::iterator
iterator	ADT/ImmutableList.h	/^    iterator(ImmutableList l) : L(l.getInternalPointer()) {}$/;"	f	class:llvm::ImmutableList::iterator
iterator	ADT/ImmutableList.h	/^  class iterator {$/;"	c	class:llvm::ImmutableList
iterator	ADT/ImmutableMap.h	/^    iterator() {}$/;"	f	class:llvm::ImmutableMap::iterator
iterator	ADT/ImmutableMap.h	/^    iterator() {}$/;"	f	class:llvm::ImmutableMapRef::iterator
iterator	ADT/ImmutableMap.h	/^    iterator(TreeTy* t) : itr(t) {}$/;"	f	class:llvm::ImmutableMap::iterator
iterator	ADT/ImmutableMap.h	/^    iterator(TreeTy* t) : itr(t) {}$/;"	f	class:llvm::ImmutableMapRef::iterator
iterator	ADT/ImmutableMap.h	/^  class iterator {$/;"	c	class:llvm::ImmutableMap
iterator	ADT/ImmutableMap.h	/^  class iterator {$/;"	c	class:llvm::ImmutableMapRef
iterator	ADT/ImmutableSet.h	/^    iterator() {}$/;"	f	class:llvm::ImmutableSet::iterator
iterator	ADT/ImmutableSet.h	/^    iterator() {}$/;"	f	class:llvm::ImmutableSetRef::iterator
iterator	ADT/ImmutableSet.h	/^    iterator(TreeTy* t) : itr(t) {}$/;"	f	class:llvm::ImmutableSet::iterator
iterator	ADT/ImmutableSet.h	/^    iterator(TreeTy* t) : itr(t) {}$/;"	f	class:llvm::ImmutableSetRef::iterator
iterator	ADT/ImmutableSet.h	/^  class iterator {$/;"	c	class:llvm::ImmutableSet
iterator	ADT/ImmutableSet.h	/^  class iterator {$/;"	c	class:llvm::ImmutableSetRef
iterator	ADT/ImmutableSet.h	/^  typedef ImutAVLTreeInOrderIterator<ImutInfo>  iterator;$/;"	t	class:llvm::ImutAVLTree
iterator	ADT/IntervalMap.h	/^  explicit iterator(IntervalMap &map) : const_iterator(map) {}$/;"	f	class:llvm::IntervalMap::iterator
iterator	ADT/IntervalMap.h	/^  iterator() {}$/;"	f	class:llvm::IntervalMap::iterator
iterator	ADT/IntervalMap.h	/^class IntervalMap<KeyT, ValT, N, Traits>::iterator : public const_iterator {$/;"	c	class:llvm::IntervalMap
iterator	ADT/MapVector.h	/^  typedef typename VectorType::iterator iterator;$/;"	t	class:llvm::MapVector
iterator	ADT/ScopedHashTable.h	/^  typedef ScopedHashTableIterator<K, V, KInfo> iterator;$/;"	t	class:llvm::ScopedHashTable
iterator	ADT/SetVector.h	/^  typedef typename vector_type::const_iterator iterator;$/;"	t	class:llvm::SetVector
iterator	ADT/SmallPtrSet.h	/^  typedef SmallPtrSetIterator<PtrType> iterator;$/;"	t	class:llvm::SmallPtrSet
iterator	ADT/SmallVector.h	/^  typedef T *iterator;$/;"	t	class:llvm::SmallVectorTemplateCommon
iterator	ADT/SmallVector.h	/^  typedef typename SuperClass::iterator iterator;$/;"	t	class:llvm::SmallVectorImpl
iterator	ADT/SparseBitVector.h	/^  typedef SparseBitVectorIterator iterator;$/;"	t	class:llvm::SparseBitVector
iterator	ADT/SparseSet.h	/^  typedef typename DenseT::iterator iterator;$/;"	t	class:llvm::SparseSet
iterator	ADT/StringMap.h	/^  typedef StringMapIterator<ValueTy> iterator;$/;"	t	class:llvm::StringMap
iterator	ADT/StringRef.h	/^    typedef const char *iterator;$/;"	t	class:llvm::StringRef
iterator	ADT/TinyPtrVector.h	/^  typedef EltTy *iterator;$/;"	t	class:llvm::TinyPtrVector
iterator	ADT/ValueMap.h	/^  typedef ValueMapIterator<MapT, KeyT> iterator;$/;"	t	class:llvm::ValueMap
iterator	ADT/ilist.h	/^  typedef ilist_iterator<NodeTy> iterator;$/;"	t	class:llvm::iplist
iterator	ADT/ilist.h	/^  typedef typename iplist<NodeTy>::iterator iterator;$/;"	t	struct:llvm::ilist
iterator	Analysis/AliasSetTracker.h	/^    explicit iterator(PointerRec *CN = 0) : CurNode(CN) {}$/;"	f	class:llvm::AliasSet::iterator
iterator	Analysis/AliasSetTracker.h	/^  class iterator : public std::iterator<std::forward_iterator_tag,$/;"	c	class:llvm::AliasSet
iterator	Analysis/AliasSetTracker.h	/^  typedef ilist<AliasSet>::iterator iterator;$/;"	t	class:llvm::AliasSetTracker
iterator	Analysis/CallGraph.h	/^  typedef FunctionMapTy::iterator iterator;$/;"	t	class:llvm::CallGraph
iterator	Analysis/CallGraph.h	/^  typedef std::vector<CallRecord>::iterator iterator;$/;"	t	class:llvm::CallGraphNode
iterator	Analysis/DominanceFrontier.h	/^  typedef DomSetMapType::iterator iterator;$/;"	t	class:llvm::DominanceFrontierBase
iterator	Analysis/Dominators.h	/^  typedef typename std::vector<DomTreeNodeBase<NodeT> *>::iterator iterator;$/;"	t	class:llvm::DomTreeNodeBase
iterator	Analysis/IVUsers.h	/^  typedef ilist<IVStrideUse>::iterator iterator;$/;"	t	class:llvm::IVUsers
iterator	Analysis/LoopInfo.h	/^  typedef LoopInfoBase<BasicBlock, Loop>::iterator iterator;$/;"	t	class:llvm::LoopInfo
iterator	Analysis/LoopInfo.h	/^  typedef typename std::vector<LoopT *>::const_iterator iterator;$/;"	t	class:llvm::LoopBase
iterator	Analysis/LoopInfo.h	/^  typedef typename std::vector<LoopT *>::const_iterator iterator;$/;"	t	class:llvm::LoopInfoBase
iterator	Analysis/RegionInfo.h	/^  typedef RegionSet::iterator iterator;$/;"	t	class:llvm::Region
iterator	Analysis/Trace.h	/^  typedef BasicBlockListType::iterator iterator;$/;"	t	class:llvm::Trace
iterator	BasicBlock.h	/^  typedef InstListType::iterator                              iterator;$/;"	t	class:llvm::BasicBlock
iterator	Bitcode/Archive.h	/^    typedef MembersList::iterator iterator;$/;"	t	class:llvm::Archive
iterator	CallGraphSCCPass.h	/^  typedef std::vector<CallGraphNode*>::const_iterator iterator;$/;"	t	class:llvm::CallGraphSCC
iterator	CodeGen/GCMetadata.h	/^    typedef list_type::const_iterator iterator;$/;"	t	class:llvm::GCModuleInfo
iterator	CodeGen/GCMetadata.h	/^    typedef std::vector<GCPoint>::iterator iterator;$/;"	t	class:llvm::GCFunctionInfo
iterator	CodeGen/GCMetadataPrinter.h	/^    typedef GCStrategy::iterator iterator;$/;"	t	class:llvm::GCMetadataPrinter
iterator	CodeGen/GCStrategy.h	/^    typedef list_type::iterator iterator;$/;"	t	class:llvm::GCStrategy
iterator	CodeGen/LiveInterval.h	/^    typedef Ranges::iterator iterator;$/;"	t	class:llvm::LiveInterval
iterator	CodeGen/LiveRangeEdit.h	/^  typedef SmallVectorImpl<LiveInterval*>::const_iterator iterator;$/;"	t	class:llvm::LiveRangeEdit
iterator	CodeGen/LiveStackAnalysis.h	/^    typedef SS2IntervalMap::iterator iterator;$/;"	t	class:llvm::LiveStacks
iterator	CodeGen/MachineBasicBlock.h	/^  bundle_iterator<MachineInstr,instr_iterator>                         iterator;$/;"	t	class:llvm::MachineBasicBlock
iterator	CodeGen/MachineFunction.h	/^  typedef BasicBlockListType::iterator iterator;$/;"	t	class:llvm::MachineFunction
iterator	CodeGen/MachineLoopInfo.h	/^  typedef LoopInfoBase<MachineBasicBlock, MachineLoop>::iterator iterator;$/;"	t	class:llvm::MachineLoopInfo
iterator	CodeGen/MachineScheduler.h	/^  typedef std::vector<SUnit*>::iterator iterator;$/;"	t	class:llvm::ReadyQueue
iterator	CodeGen/ScheduleDAG.h	/^    typedef std::vector<int>::iterator iterator;$/;"	t	class:llvm::ScheduleDAGTopologicalSort
iterator	DebugInfo.h	/^    typedef SmallVector<MDNode *, 8>::const_iterator iterator;$/;"	t	class:llvm::DebugInfoFinder
iterator	Function.h	/^  typedef BasicBlockListType::iterator iterator;$/;"	t	class:llvm::Function
iterator	MC/MCAsmLayout.h	/^  typedef llvm::SmallVectorImpl<MCSectionData*>::iterator iterator;$/;"	t	class:llvm::MCAsmLayout
iterator	MC/MCAssembler.h	/^  typedef FragmentListType::iterator iterator;$/;"	t	class:llvm::MCSectionData
iterator	MC/MCAssembler.h	/^  typedef SectionDataListType::iterator iterator;$/;"	t	class:llvm::MCAssembler
iterator	MC/MCDwarf.h	/^    typedef MCLineEntryCollection::iterator iterator;$/;"	t	class:llvm::MCLineSection
iterator	MC/MCInst.h	/^  typedef SmallVector<MCOperand, 8>::iterator iterator;$/;"	t	class:llvm::MCInst
iterator	MC/MCRegisterInfo.h	/^  typedef const uint16_t* iterator;$/;"	t	class:llvm::MCRegisterClass
iterator	Metadata.h	/^  typedef StringRef::iterator iterator;$/;"	t	class:llvm::MDString
iterator	Module.h	/^  typedef FunctionListType::iterator                           iterator;$/;"	t	class:llvm::Module
iterator	PassManagers.h	/^  typedef std::vector<PMDataManager *>::const_reverse_iterator iterator;$/;"	t	class:llvm::PMStack
iterator	Support/Registry.h	/^      explicit iterator(const node *N) : Cur(N) {}$/;"	f	class:llvm::Registry::iterator
iterator	Support/Registry.h	/^    class iterator {$/;"	c	class:llvm::Registry
iterator	Support/TargetRegistry.h	/^      explicit iterator(Target *T) : Current(T) {}$/;"	f	class:llvm::TargetRegistry::iterator
iterator	Support/TargetRegistry.h	/^      iterator() : Current(0) {}$/;"	f	class:llvm::TargetRegistry::iterator
iterator	Support/TargetRegistry.h	/^      iterator(const iterator &I) : Current(I.Current) {}$/;"	f	class:llvm::TargetRegistry::iterator
iterator	Support/TargetRegistry.h	/^    class iterator {$/;"	c	struct:llvm::TargetRegistry
iterator	Support/YAMLParser.h	/^  typedef basic_collection_iterator<MappingNode, KeyValueNode> iterator;$/;"	t	class:llvm::yaml::MappingNode
iterator	Support/YAMLParser.h	/^  typedef basic_collection_iterator<SequenceNode, Node> iterator;$/;"	t	class:llvm::yaml::SequenceNode
iterator	Target/TargetRegisterInfo.h	/^  typedef const uint16_t* iterator;$/;"	t	class:llvm::TargetRegisterClass
iterator	TypeFinder.h	/^  typedef std::vector<StructType*>::iterator iterator;$/;"	t	class:llvm::TypeFinder
iterator	ValueSymbolTable.h	/^  typedef ValueMap::iterator iterator;$/;"	t	class:llvm::ValueSymbolTable
iterator_category	ADT/DenseMap.h	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:llvm::DenseMapIterator
iterator_category	ADT/DenseSet.h	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:llvm::DenseSet::ConstIterator
iterator_category	ADT/DenseSet.h	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:llvm::DenseSet::Iterator
iterator_category	ADT/STLExtras.h	/^          iterator_category;$/;"	t	class:llvm::mapped_iterator
iterator_category	ADT/SmallPtrSet.h	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:llvm::SmallPtrSetIterator
iterator_category	Analysis/IntervalIterator.h	/^  typedef std::forward_iterator_tag iterator_category;$/;"	t	class:llvm::IntervalIterator
iterator_category	Object/ELF.h	/^    typedef std::forward_iterator_tag iterator_category;$/;"	t	class:llvm::object::ELFObjectFile::ELFRelocationIterator
iterator_category	Support/InstIterator.h	/^  typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:llvm::InstIterator
iterator_category	Support/PathV2.h	/^  typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:llvm::sys::path::const_iterator
iterator_type	ADT/STLExtras.h	/^  typedef RootIt iterator_type;$/;"	t	class:llvm::mapped_iterator
itoc	Support/MachO.h	/^               itoc:24;$/;"	m	struct:llvm::MachO::twolevel_hint
itostr	ADT/StringExtras.h	/^static inline std::string itostr(int64_t X) {$/;"	f	namespace:llvm
itr	ADT/ImmutableMap.h	/^    typename TreeTy::iterator itr;$/;"	m	class:llvm::ImmutableMap::iterator
itr	ADT/ImmutableMap.h	/^    typename TreeTy::iterator itr;$/;"	m	class:llvm::ImmutableMapRef::iterator
itr	ADT/ImmutableSet.h	/^    typename TreeTy::iterator itr;$/;"	m	class:llvm::ImmutableSet::iterator
itr	ADT/ImmutableSet.h	/^    typename TreeTy::iterator itr;$/;"	m	class:llvm::ImmutableSetRef::iterator
iundefsym	Support/MachO.h	/^      uint32_t iundefsym;$/;"	m	struct:llvm::MachO::dysymtab_command
k0	ADT/Hashing.h	/^static const uint64_t k0 = 0xc3a5c85c97cb3127ULL;$/;"	m	namespace:llvm::hashing::detail
k1	ADT/Hashing.h	/^static const uint64_t k1 = 0xb492b66fbe98f273ULL;$/;"	m	namespace:llvm::hashing::detail
k2	ADT/Hashing.h	/^static const uint64_t k2 = 0x9ae16a3b2f90404fULL;$/;"	m	namespace:llvm::hashing::detail
k3	ADT/Hashing.h	/^static const uint64_t k3 = 0xc949d7c7509e6557ULL;$/;"	m	namespace:llvm::hashing::detail
kChunkSize	Support/StreamableMemoryObject.h	/^  const static uint32_t kChunkSize = 4096 * 4;$/;"	m	class:llvm::StreamingMemoryObject
kExpr	MC/MCInst.h	/^    kExpr,                    \/\/\/< Relocatable immediate operand.$/;"	e	enum:llvm::MCOperand::MachineOperandType
kFPImmediate	MC/MCInst.h	/^    kFPImmediate,             \/\/\/< Floating-point immediate operand.$/;"	e	enum:llvm::MCOperand::MachineOperandType
kImmediate	MC/MCInst.h	/^    kImmediate,               \/\/\/< Immediate operand.$/;"	e	enum:llvm::MCOperand::MachineOperandType
kInst	MC/MCInst.h	/^    kInst                     \/\/\/< Sub-instruction operand.$/;"	e	enum:llvm::MCOperand::MachineOperandType
kInvalid	MC/MCInst.h	/^    kInvalid,                 \/\/\/< Uninitialized.$/;"	e	enum:llvm::MCOperand::MachineOperandType
kRegister	MC/MCInst.h	/^    kRegister,                \/\/\/< Register operand.$/;"	e	enum:llvm::MCOperand::MachineOperandType
keep	Support/ToolOutputFile.h	/^  void keep() { Installer.Keep = true; }$/;"	f	class:llvm::tool_output_file
key_type	ADT/DenseMap.h	/^  typedef KeyT key_type;$/;"	t	class:llvm::DenseMapBase
key_type	ADT/ImmutableIntervalMap.h	/^  typedef const Interval key_type;$/;"	t	struct:llvm::ImutIntervalInfo
key_type	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutInfo::key_type       key_type;$/;"	t	class:llvm::ImutIntervalAVLFactory
key_type	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutIntervalInfo<ValT>::key_type        key_type;$/;"	t	class:llvm::ImmutableIntervalMap
key_type	ADT/ImmutableMap.h	/^  typedef const T   key_type;$/;"	t	struct:llvm::ImutKeyValueInfo
key_type	ADT/ImmutableMap.h	/^  typedef typename ValInfo::key_type        key_type;$/;"	t	class:llvm::ImmutableMap
key_type	ADT/ImmutableMap.h	/^  typedef typename ValInfo::key_type        key_type;$/;"	t	class:llvm::ImmutableMapRef
key_type	ADT/ImmutableSet.h	/^  typedef value_type      key_type;$/;"	t	struct:llvm::ImutContainerInfo
key_type	ADT/SetVector.h	/^  typedef T key_type;$/;"	t	class:llvm::SetVector
key_type	ADT/StringMap.h	/^  typedef const char* key_type;$/;"	t	class:llvm::StringMap
key_type	ADT/ValueMap.h	/^  typedef KeyT key_type;$/;"	t	class:llvm::ValueMap
key_type_ref	ADT/ImmutableIntervalMap.h	/^  typedef const Interval &key_type_ref;$/;"	t	struct:llvm::ImutIntervalInfo
key_type_ref	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutInfo::key_type_ref   key_type_ref;$/;"	t	class:llvm::ImutIntervalAVLFactory
key_type_ref	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutIntervalInfo<ValT>::key_type_ref    key_type_ref;$/;"	t	class:llvm::ImmutableIntervalMap
key_type_ref	ADT/ImmutableMap.h	/^  typedef const T&  key_type_ref;$/;"	t	struct:llvm::ImutKeyValueInfo
key_type_ref	ADT/ImmutableMap.h	/^  typedef typename ValInfo::key_type_ref    key_type_ref;$/;"	t	class:llvm::ImmutableMap
key_type_ref	ADT/ImmutableMap.h	/^  typedef typename ValInfo::key_type_ref    key_type_ref;$/;"	t	class:llvm::ImmutableMapRef
key_type_ref	ADT/ImmutableSet.h	/^  typedef typename ImutInfo::key_type_ref   key_type_ref;$/;"	t	class:llvm::ImutAVLTree
key_type_ref	ADT/ImmutableSet.h	/^  typedef typename TreeTy::key_type_ref   key_type_ref;$/;"	t	class:llvm::ImutAVLFactory
key_type_ref	ADT/ImmutableSet.h	/^  typedef value_type_ref  key_type_ref;$/;"	t	struct:llvm::ImutContainerInfo
killedAt	CodeGen/LiveInterval.h	/^    bool killedAt(SlotIndex index) const {$/;"	f	class:llvm::LiveInterval
killsRegister	CodeGen/MachineInstr.h	/^  bool killsRegister(unsigned Reg, const TargetRegisterInfo *TRI = NULL) const {$/;"	f	class:llvm::MachineInstr
knownOffset	Analysis/MemoryBuiltins.h	/^  bool knownOffset(SizeOffsetEvalType SizeOffset) {$/;"	f	class:llvm::ObjectSizeOffsetEvaluator
knownOffset	Analysis/MemoryBuiltins.h	/^  bool knownOffset(SizeOffsetType &SizeOffset) {$/;"	f	class:llvm::ObjectSizeOffsetVisitor
knownSize	Analysis/MemoryBuiltins.h	/^  bool knownSize(SizeOffsetEvalType SizeOffset) {$/;"	f	class:llvm::ObjectSizeOffsetEvaluator
knownSize	Analysis/MemoryBuiltins.h	/^  bool knownSize(SizeOffsetType &SizeOffset) {$/;"	f	class:llvm::ObjectSizeOffsetVisitor
lastStat	LDDProfilingCommon.h	/^    short lastStat; \/\/$/;"	m	struct:memRW
latency_sort	CodeGen/LatencyPriorityQueue.h	/^    explicit latency_sort(LatencyPriorityQueue *pq) : PQ(pq) {}$/;"	f	struct:llvm::latency_sort
latency_sort	CodeGen/LatencyPriorityQueue.h	/^  struct latency_sort : public std::binary_function<SUnit*, SUnit*, bool> {$/;"	s	namespace:llvm
lazy_bind_off	Support/MachO.h	/^      uint32_t lazy_bind_off;$/;"	m	struct:llvm::MachO::dyld_info_command
lazy_bind_size	Support/MachO.h	/^      uint32_t lazy_bind_size;$/;"	m	struct:llvm::MachO::dyld_info_command
le32	ADT/Triple.h	/^    le32,    \/\/ le32: generic little-endian 32-bit CPU (PNaCl \/ Emscripten)$/;"	e	enum:llvm::Triple::ArchType
leaf	ADT/IntervalMap.h	/^  template <typename NodeT> NodeT &leaf() const {$/;"	f	class:llvm::IntervalMapImpl::Path
leafOffset	ADT/IntervalMap.h	/^  unsigned &leafOffset() { return path.back().offset; }$/;"	f	class:llvm::IntervalMapImpl::Path
leafOffset	ADT/IntervalMap.h	/^  unsigned leafOffset() const { return path.back().offset; }$/;"	f	class:llvm::IntervalMapImpl::Path
leafSize	ADT/IntervalMap.h	/^  unsigned leafSize() const { return path.back().size; }$/;"	f	class:llvm::IntervalMapImpl::Path
leaveSSA	CodeGen/MachineRegisterInfo.h	/^  void leaveSSA() { IsSSA = false; }$/;"	f	class:llvm::MachineRegisterInfo
left	ADT/ImmutableSet.h	/^  ImutAVLTree *left;$/;"	m	class:llvm::ImutAVLTree
legalizeForInsert	ADT/IntervalMap.h	/^  void legalizeForInsert(unsigned Level) {$/;"	f	class:llvm::IntervalMapImpl::Path
length	CodeGen/PBQP/Math.h	/^    unsigned length;$/;"	m	class:PBQP::Vector
less_ptr	ADT/STLExtras.h	/^struct less_ptr : public std::binary_function<Ty, Ty, bool> {$/;"	s	namespace:llvm
letTargetResolve	CodeGen/MachineRelocation.h	/^  bool letTargetResolve() const {$/;"	f	class:llvm::MachineRelocation
level	Support/FileSystem.h	/^  int level() const { return State->Level; }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
lfExactlyHalf	ADT/APFloat.h	/^    lfExactlyHalf,              \/\/ 100000$/;"	e	enum:llvm::lostFraction
lfExactlyZero	ADT/APFloat.h	/^    lfExactlyZero,              \/\/ 000000$/;"	e	enum:llvm::lostFraction
lfLessThanHalf	ADT/APFloat.h	/^    lfLessThanHalf,             \/\/ 0xxxxx  x's not all zero$/;"	e	enum:llvm::lostFraction
lfMoreThanHalf	ADT/APFloat.h	/^    lfMoreThanHalf              \/\/ 1xxxxx  x's not all zero$/;"	e	enum:llvm::lostFraction
lib_begin	Module.h	/^  inline lib_iterator lib_begin() const { return LibraryList.begin(); }$/;"	f	class:llvm::Module
lib_end	Module.h	/^  inline lib_iterator lib_end()   const { return LibraryList.end();   }$/;"	f	class:llvm::Module
lib_iterator	Module.h	/^  typedef LibraryListType::const_iterator lib_iterator;$/;"	t	class:llvm::Module
lib_size	Module.h	/^  inline size_t       lib_size()  const { return LibraryList.size();  }$/;"	f	class:llvm::Module
library_iterator	Object/ObjectFile.h	/^typedef content_iterator<LibraryRef> library_iterator;$/;"	t	namespace:llvm::object
lie	CodeGen/SlotIndexes.h	/^    PointerIntPair<IndexListEntry*, 2, unsigned> lie;$/;"	m	class:llvm::SlotIndex
linked_modules	Support/MachO.h	/^      uint32_t linked_modules;$/;"	m	struct:llvm::MachO::prebound_dylib_command
linkedit_data_command	Support/MachO.h	/^    struct linkedit_data_command {$/;"	s	namespace:llvm::MachO
list	Support/CommandLine.h	/^  explicit list(const M0t &M0) : Option(ZeroOrMore, NotHidden) {$/;"	f	class:llvm::cl::list
list	Support/CommandLine.h	/^  list(const M0t &M0, const M1t &M1) : Option(ZeroOrMore, NotHidden) {$/;"	f	class:llvm::cl::list
list	Support/CommandLine.h	/^  list(const M0t &M0, const M1t &M1, const M2t &M2)$/;"	f	class:llvm::cl::list
list	Support/CommandLine.h	/^  list(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3)$/;"	f	class:llvm::cl::list
list	Support/CommandLine.h	/^  list(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3,$/;"	f	class:llvm::cl::list
list	Support/CommandLine.h	/^class list : public Option, public list_storage<DataType, Storage> {$/;"	c	namespace:llvm::cl
listEntry	CodeGen/SlotIndexes.h	/^    IndexListEntry* listEntry() const {$/;"	f	class:llvm::SlotIndex
list_storage	Support/CommandLine.h	/^  list_storage() : Location(0) {}$/;"	f	class:llvm::cl::list_storage
list_storage	Support/CommandLine.h	/^class list_storage {$/;"	c	namespace:llvm::cl
list_storage	Support/CommandLine.h	/^class list_storage<DataType, bool> : public std::vector<DataType> {$/;"	c	namespace:llvm::cl
list_type	CodeGen/GCMetadata.h	/^    typedef std::vector<GCStrategy*> list_type;$/;"	t	class:llvm::GCModuleInfo
list_type	CodeGen/GCMetadataPrinter.h	/^    typedef GCStrategy::list_type list_type;$/;"	t	class:llvm::GCMetadataPrinter
list_type	CodeGen/GCStrategy.h	/^    typedef std::vector<GCFunctionInfo*> list_type;$/;"	t	class:llvm::GCStrategy
listener	Support/Registry.h	/^      listener() : Prev(ListenerTail), Next(0) {$/;"	f	class:llvm::Registry::listener
listener	Support/Registry.h	/^    class listener {$/;"	c	class:llvm::Registry
listener	Support/RegistryParser.h	/^    typedef typename Registry<T, U>::listener listener;$/;"	t	class:llvm::RegistryParser
little	Support/Endian.h	/^enum endianness {big, little};$/;"	e	enum:llvm::support::endianness
little16_t	Support/Endian.h	/^                   <int16_t, little, unaligned> little16_t;$/;"	t	namespace:llvm::support
little32_t	Support/Endian.h	/^                   <int32_t, little, unaligned> little32_t;$/;"	t	namespace:llvm::support
little64_t	Support/Endian.h	/^                   <int64_t, little, unaligned> little64_t;$/;"	t	namespace:llvm::support
little8_t	Support/Endian.h	/^                   <int8_t, little, unaligned>  little8_t;$/;"	t	namespace:llvm::support
liveAt	CodeGen/LiveInterval.h	/^    bool liveAt(SlotIndex index) const {$/;"	f	class:llvm::LiveInterval
live_begin	CodeGen/GCMetadata.h	/^    live_iterator live_begin(const iterator &p) { return roots_begin(); }$/;"	f	class:llvm::GCFunctionInfo
live_end	CodeGen/GCMetadata.h	/^    live_iterator live_end  (const iterator &p) { return roots_end();   }$/;"	f	class:llvm::GCFunctionInfo
live_iterator	CodeGen/GCMetadata.h	/^    typedef std::vector<GCRoot>::const_iterator live_iterator;$/;"	t	class:llvm::GCFunctionInfo
live_size	CodeGen/GCMetadata.h	/^    size_t live_size(const iterator &p) const { return roots_size(); }$/;"	f	class:llvm::GCFunctionInfo
livein_begin	CodeGen/MachineBasicBlock.h	/^  livein_iterator livein_begin() const { return LiveIns.begin(); }$/;"	f	class:llvm::MachineBasicBlock
livein_begin	CodeGen/MachineRegisterInfo.h	/^  livein_iterator livein_begin() const { return LiveIns.begin(); }$/;"	f	class:llvm::MachineRegisterInfo
livein_empty	CodeGen/MachineBasicBlock.h	/^  bool            livein_empty() const { return LiveIns.empty(); }$/;"	f	class:llvm::MachineBasicBlock
livein_empty	CodeGen/MachineRegisterInfo.h	/^  bool            livein_empty() const { return LiveIns.empty(); }$/;"	f	class:llvm::MachineRegisterInfo
livein_end	CodeGen/MachineBasicBlock.h	/^  livein_iterator livein_end()   const { return LiveIns.end(); }$/;"	f	class:llvm::MachineBasicBlock
livein_end	CodeGen/MachineRegisterInfo.h	/^  livein_iterator livein_end()   const { return LiveIns.end(); }$/;"	f	class:llvm::MachineRegisterInfo
livein_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::vector<unsigned>::const_iterator livein_iterator;$/;"	t	class:llvm::MachineBasicBlock
livein_iterator	CodeGen/MachineRegisterInfo.h	/^  livein_iterator;$/;"	t	class:llvm::MachineRegisterInfo
liveout_begin	CodeGen/MachineRegisterInfo.h	/^  liveout_iterator liveout_begin() const { return LiveOuts.begin(); }$/;"	f	class:llvm::MachineRegisterInfo
liveout_empty	CodeGen/MachineRegisterInfo.h	/^  bool             liveout_empty() const { return LiveOuts.empty(); }$/;"	f	class:llvm::MachineRegisterInfo
liveout_end	CodeGen/MachineRegisterInfo.h	/^  liveout_iterator liveout_end()   const { return LiveOuts.end(); }$/;"	f	class:llvm::MachineRegisterInfo
liveout_iterator	CodeGen/MachineRegisterInfo.h	/^  typedef std::vector<unsigned>::const_iterator liveout_iterator;$/;"	t	class:llvm::MachineRegisterInfo
llvm	ADT/APFloat.h	/^namespace llvm {$/;"	n
llvm	ADT/APInt.h	/^namespace llvm {$/;"	n
llvm	ADT/APSInt.h	/^namespace llvm {$/;"	n
llvm	ADT/ArrayRef.h	/^namespace llvm {$/;"	n
llvm	ADT/BitVector.h	/^namespace llvm {$/;"	n
llvm	ADT/DAGDeltaAlgorithm.h	/^namespace llvm {$/;"	n
llvm	ADT/DeltaAlgorithm.h	/^namespace llvm {$/;"	n
llvm	ADT/DenseMap.h	/^namespace llvm {$/;"	n
llvm	ADT/DenseMapInfo.h	/^namespace llvm {$/;"	n
llvm	ADT/DenseSet.h	/^namespace llvm {$/;"	n
llvm	ADT/DepthFirstIterator.h	/^namespace llvm {$/;"	n
llvm	ADT/EquivalenceClasses.h	/^namespace llvm {$/;"	n
llvm	ADT/FoldingSet.h	/^namespace llvm {$/;"	n
llvm	ADT/GraphTraits.h	/^namespace llvm {$/;"	n
llvm	ADT/Hashing.h	/^namespace llvm {$/;"	n
llvm	ADT/ImmutableIntervalMap.h	/^namespace llvm {$/;"	n
llvm	ADT/ImmutableList.h	/^namespace llvm {$/;"	n
llvm	ADT/ImmutableMap.h	/^namespace llvm {$/;"	n
llvm	ADT/ImmutableSet.h	/^namespace llvm {$/;"	n
llvm	ADT/InMemoryStruct.h	/^namespace llvm {$/;"	n
llvm	ADT/IndexedMap.h	/^namespace llvm {$/;"	n
llvm	ADT/IntEqClasses.h	/^namespace llvm {$/;"	n
llvm	ADT/IntervalMap.h	/^namespace llvm {$/;"	n
llvm	ADT/IntrusiveRefCntPtr.h	/^namespace llvm {$/;"	n
llvm	ADT/MapVector.h	/^namespace llvm {$/;"	n
llvm	ADT/NullablePtr.h	/^namespace llvm {$/;"	n
llvm	ADT/Optional.h	/^namespace llvm {$/;"	n
llvm	ADT/OwningPtr.h	/^namespace llvm {$/;"	n
llvm	ADT/PackedVector.h	/^namespace llvm {$/;"	n
llvm	ADT/PointerIntPair.h	/^namespace llvm {$/;"	n
llvm	ADT/PointerUnion.h	/^namespace llvm {$/;"	n
llvm	ADT/PostOrderIterator.h	/^namespace llvm {$/;"	n
llvm	ADT/PriorityQueue.h	/^namespace llvm {$/;"	n
llvm	ADT/SCCIterator.h	/^namespace llvm {$/;"	n
llvm	ADT/STLExtras.h	/^namespace llvm {$/;"	n
llvm	ADT/ScopedHashTable.h	/^namespace llvm {$/;"	n
llvm	ADT/SetOperations.h	/^namespace llvm {$/;"	n
llvm	ADT/SetVector.h	/^namespace llvm {$/;"	n
llvm	ADT/SmallBitVector.h	/^namespace llvm {$/;"	n
llvm	ADT/SmallPtrSet.h	/^namespace llvm {$/;"	n
llvm	ADT/SmallSet.h	/^namespace llvm {$/;"	n
llvm	ADT/SmallString.h	/^namespace llvm {$/;"	n
llvm	ADT/SmallVector.h	/^namespace llvm {$/;"	n
llvm	ADT/SparseBitVector.h	/^namespace llvm {$/;"	n
llvm	ADT/SparseSet.h	/^namespace llvm {$/;"	n
llvm	ADT/Statistic.h	/^namespace llvm {$/;"	n
llvm	ADT/StringExtras.h	/^namespace llvm {$/;"	n
llvm	ADT/StringMap.h	/^namespace llvm {$/;"	n
llvm	ADT/StringRef.h	/^namespace llvm {$/;"	n
llvm	ADT/StringSet.h	/^namespace llvm {$/;"	n
llvm	ADT/StringSwitch.h	/^namespace llvm {$/;"	n
llvm	ADT/TinyPtrVector.h	/^namespace llvm {$/;"	n
llvm	ADT/Triple.h	/^namespace llvm {$/;"	n
llvm	ADT/Twine.h	/^namespace llvm {$/;"	n
llvm	ADT/UniqueVector.h	/^namespace llvm {$/;"	n
llvm	ADT/ValueMap.h	/^namespace llvm {$/;"	n
llvm	ADT/VariadicFunction.h	/^namespace llvm {$/;"	n
llvm	ADT/edit_distance.h	/^namespace llvm {$/;"	n
llvm	ADT/ilist.h	/^namespace llvm {$/;"	n
llvm	ADT/ilist_node.h	/^namespace llvm {$/;"	n
llvm	AddressingMode.h	/^namespace llvm {$/;"	n
llvm	Analysis/AliasAnalysis.h	/^namespace llvm {$/;"	n
llvm	Analysis/AliasSetTracker.h	/^namespace llvm {$/;"	n
llvm	Analysis/BlockFrequencyImpl.h	/^namespace llvm {$/;"	n
llvm	Analysis/BlockFrequencyInfo.h	/^namespace llvm {$/;"	n
llvm	Analysis/BranchProbabilityInfo.h	/^namespace llvm {$/;"	n
llvm	Analysis/CFGPrinter.h	/^namespace llvm {$/;"	n
llvm	Analysis/CallGraph.h	/^namespace llvm {$/;"	n
llvm	Analysis/CaptureTracking.h	/^namespace llvm {$/;"	n
llvm	Analysis/CodeMetrics.h	/^namespace llvm {$/;"	n
llvm	Analysis/ConstantFolding.h	/^namespace llvm {$/;"	n
llvm	Analysis/ConstantsScanner.h	/^namespace llvm {$/;"	n
llvm	Analysis/DOTGraphTraitsPass.h	/^namespace llvm {$/;"	n
llvm	Analysis/DependenceAnalysis.h	/^namespace llvm {$/;"	n
llvm	Analysis/DomPrinter.h	/^namespace llvm {$/;"	n
llvm	Analysis/DominanceFrontier.h	/^namespace llvm {$/;"	n
llvm	Analysis/DominatorInternals.h	/^namespace llvm {$/;"	n
llvm	Analysis/Dominators.h	/^namespace llvm {$/;"	n
llvm	Analysis/FindUsedTypes.h	/^namespace llvm {$/;"	n
llvm	Analysis/IVUsers.h	/^namespace llvm {$/;"	n
llvm	Analysis/InlineCost.h	/^namespace llvm {$/;"	n
llvm	Analysis/InstructionSimplify.h	/^namespace llvm {$/;"	n
llvm	Analysis/Interval.h	/^namespace llvm {$/;"	n
llvm	Analysis/IntervalIterator.h	/^namespace llvm {$/;"	n
llvm	Analysis/IntervalPartition.h	/^namespace llvm {$/;"	n
llvm	Analysis/LazyValueInfo.h	/^namespace llvm {$/;"	n
llvm	Analysis/LibCallAliasAnalysis.h	/^namespace llvm {$/;"	n
llvm	Analysis/LibCallSemantics.h	/^namespace llvm {$/;"	n
llvm	Analysis/Lint.h	/^namespace llvm {$/;"	n
llvm	Analysis/Loads.h	/^namespace llvm {$/;"	n
llvm	Analysis/LoopDependenceAnalysis.h	/^namespace llvm {$/;"	n
llvm	Analysis/LoopInfo.h	/^namespace llvm {$/;"	n
llvm	Analysis/LoopInfoImpl.h	/^namespace llvm {$/;"	n
llvm	Analysis/LoopIterator.h	/^namespace llvm {$/;"	n
llvm	Analysis/LoopPass.h	/^namespace llvm {$/;"	n
llvm	Analysis/MemoryBuiltins.h	/^namespace llvm {$/;"	n
llvm	Analysis/MemoryDependenceAnalysis.h	/^namespace llvm {$/;"	n
llvm	Analysis/PHITransAddr.h	/^namespace llvm {$/;"	n
llvm	Analysis/Passes.h	/^namespace llvm {$/;"	n
llvm	Analysis/PathNumbering.h	/^namespace llvm {$/;"	n
llvm	Analysis/PathProfileInfo.h	/^namespace llvm {$/;"	n
llvm	Analysis/PostDominators.h	/^namespace llvm {$/;"	n
llvm	Analysis/ProfileDataLoader.h	/^namespace llvm {$/;"	n
llvm	Analysis/ProfileInfo.h	/^namespace llvm {$/;"	n
llvm	Analysis/ProfileInfoLoader.h	/^namespace llvm {$/;"	n
llvm	Analysis/RegionInfo.h	/^namespace llvm {$/;"	n
llvm	Analysis/RegionIterator.h	/^namespace llvm {$/;"	n
llvm	Analysis/RegionPass.h	/^namespace llvm {$/;"	n
llvm	Analysis/RegionPrinter.h	/^namespace llvm {$/;"	n
llvm	Analysis/ScalarEvolution.h	/^namespace llvm {$/;"	n
llvm	Analysis/ScalarEvolutionExpander.h	/^namespace llvm {$/;"	n
llvm	Analysis/ScalarEvolutionExpressions.h	/^namespace llvm {$/;"	n
llvm	Analysis/ScalarEvolutionNormalization.h	/^namespace llvm {$/;"	n
llvm	Analysis/SparsePropagation.h	/^namespace llvm {$/;"	n
llvm	Analysis/Trace.h	/^namespace llvm {$/;"	n
llvm	Analysis/ValueTracking.h	/^namespace llvm {$/;"	n
llvm	Analysis/Verifier.h	/^namespace llvm {$/;"	n
llvm	Argument.h	/^namespace llvm {$/;"	n
llvm	Assembly/AssemblyAnnotationWriter.h	/^namespace llvm {$/;"	n
llvm	Assembly/Parser.h	/^namespace llvm {$/;"	n
llvm	Assembly/PrintModulePass.h	/^namespace llvm {$/;"	n
llvm	Assembly/Writer.h	/^namespace llvm {$/;"	n
llvm	Attributes.h	/^namespace llvm {$/;"	n
llvm	AutoUpgrade.h	/^namespace llvm {$/;"	n
llvm	BasicBlock.h	/^namespace llvm {$/;"	n
llvm	Bitcode/Archive.h	/^namespace llvm {$/;"	n
llvm	Bitcode/BitCodes.h	/^namespace llvm {$/;"	n
llvm	Bitcode/BitstreamReader.h	/^namespace llvm {$/;"	n
llvm	Bitcode/BitstreamWriter.h	/^namespace llvm {$/;"	n
llvm	Bitcode/LLVMBitCodes.h	/^namespace llvm {$/;"	n
llvm	Bitcode/ReaderWriter.h	/^namespace llvm {$/;"	n
llvm	CallGraphSCCPass.h	/^namespace llvm {$/;"	n
llvm	CallingConv.h	/^namespace llvm {$/;"	n
llvm	CodeGen/Analysis.h	/^namespace llvm {$/;"	n
llvm	CodeGen/AsmPrinter.h	/^namespace llvm {$/;"	n
llvm	CodeGen/CalcSpillWeights.h	/^namespace llvm {$/;"	n
llvm	CodeGen/CallingConvLower.h	/^namespace llvm {$/;"	n
llvm	CodeGen/DFAPacketizer.h	/^namespace llvm {$/;"	n
llvm	CodeGen/EdgeBundles.h	/^namespace llvm {$/;"	n
llvm	CodeGen/FastISel.h	/^namespace llvm {$/;"	n
llvm	CodeGen/FunctionLoweringInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/GCMetadata.h	/^namespace llvm {$/;"	n
llvm	CodeGen/GCMetadataPrinter.h	/^namespace llvm {$/;"	n
llvm	CodeGen/GCStrategy.h	/^namespace llvm {$/;"	n
llvm	CodeGen/GCs.h	/^namespace llvm {$/;"	n
llvm	CodeGen/ISDOpcodes.h	/^namespace llvm {$/;"	n
llvm	CodeGen/IntrinsicLowering.h	/^namespace llvm {$/;"	n
llvm	CodeGen/JITCodeEmitter.h	/^namespace llvm {$/;"	n
llvm	CodeGen/LatencyPriorityQueue.h	/^namespace llvm {$/;"	n
llvm	CodeGen/LexicalScopes.h	/^namespace llvm {$/;"	n
llvm	CodeGen/LiveInterval.h	/^namespace llvm {$/;"	n
llvm	CodeGen/LiveIntervalAnalysis.h	/^namespace llvm {$/;"	n
llvm	CodeGen/LiveRangeEdit.h	/^namespace llvm {$/;"	n
llvm	CodeGen/LiveStackAnalysis.h	/^namespace llvm {$/;"	n
llvm	CodeGen/LiveVariables.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachORelocation.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineBasicBlock.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineBlockFrequencyInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineBranchProbabilityInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineCodeEmitter.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineCodeInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineConstantPool.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineDominators.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineFrameInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineFunction.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineFunctionAnalysis.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineFunctionPass.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineInstr.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineInstrBuilder.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineInstrBundle.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineJumpTableInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineLoopInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineLoopRanges.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineMemOperand.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineModuleInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineModuleInfoImpls.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineOperand.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachinePassRegistry.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachinePostDominators.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineRegisterInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineRelocation.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineSSAUpdater.h	/^namespace llvm {$/;"	n
llvm	CodeGen/MachineScheduler.h	/^namespace llvm {$/;"	n
llvm	CodeGen/Passes.h	/^namespace llvm {$/;"	n
llvm	CodeGen/PseudoSourceValue.h	/^namespace llvm {$/;"	n
llvm	CodeGen/RegAllocPBQP.h	/^namespace llvm {$/;"	n
llvm	CodeGen/RegAllocRegistry.h	/^namespace llvm {$/;"	n
llvm	CodeGen/RegisterClassInfo.h	/^namespace llvm {$/;"	n
llvm	CodeGen/RegisterPressure.h	/^namespace llvm {$/;"	n
llvm	CodeGen/RegisterScavenging.h	/^namespace llvm {$/;"	n
llvm	CodeGen/ResourcePriorityQueue.h	/^namespace llvm {$/;"	n
llvm	CodeGen/RuntimeLibcalls.h	/^namespace llvm {$/;"	n
llvm	CodeGen/ScheduleDAG.h	/^namespace llvm {$/;"	n
llvm	CodeGen/ScheduleDAGILP.h	/^namespace llvm {$/;"	n
llvm	CodeGen/ScheduleDAGInstrs.h	/^namespace llvm {$/;"	n
llvm	CodeGen/ScheduleHazardRecognizer.h	/^namespace llvm {$/;"	n
llvm	CodeGen/SchedulerRegistry.h	/^namespace llvm {$/;"	n
llvm	CodeGen/ScoreboardHazardRecognizer.h	/^namespace llvm {$/;"	n
llvm	CodeGen/SelectionDAG.h	/^namespace llvm {$/;"	n
llvm	CodeGen/SelectionDAGISel.h	/^namespace llvm {$/;"	n
llvm	CodeGen/SelectionDAGNodes.h	/^namespace llvm {$/;"	n
llvm	CodeGen/SlotIndexes.h	/^namespace llvm {$/;"	n
llvm	CodeGen/TargetLoweringObjectFileImpl.h	/^namespace llvm {$/;"	n
llvm	CodeGen/TargetSchedule.h	/^namespace llvm {$/;"	n
llvm	CodeGen/ValueTypes.h	/^namespace llvm {$/;"	n
llvm	Constant.h	/^namespace llvm {$/;"	n
llvm	Constants.h	/^namespace llvm {$/;"	n
llvm	DIBuilder.h	/^namespace llvm {$/;"	n
llvm	DataLayout.h	/^namespace llvm {$/;"	n
llvm	DebugInfo.h	/^namespace llvm {$/;"	n
llvm	DebugInfo/DIContext.h	/^namespace llvm {$/;"	n
llvm	DefaultPasses.h	/^namespace llvm {$/;"	n
llvm	DerivedTypes.h	/^namespace llvm {$/;"	n
llvm	ExecutionEngine/ExecutionEngine.h	/^namespace llvm {$/;"	n
llvm	ExecutionEngine/GenericValue.h	/^namespace llvm {$/;"	n
llvm	ExecutionEngine/JITEventListener.h	/^namespace llvm {$/;"	n
llvm	ExecutionEngine/JITMemoryManager.h	/^namespace llvm {$/;"	n
llvm	ExecutionEngine/OProfileWrapper.h	/^namespace llvm {$/;"	n
llvm	ExecutionEngine/ObjectBuffer.h	/^namespace llvm {$/;"	n
llvm	ExecutionEngine/ObjectImage.h	/^namespace llvm {$/;"	n
llvm	ExecutionEngine/RuntimeDyld.h	/^namespace llvm {$/;"	n
llvm	Function.h	/^namespace llvm {$/;"	n
llvm	GVMaterializer.h	/^namespace llvm {$/;"	n
llvm	GlobalAlias.h	/^namespace llvm {$/;"	n
llvm	GlobalValue.h	/^namespace llvm {$/;"	n
llvm	GlobalVariable.h	/^namespace llvm {$/;"	n
llvm	IRBuilder.h	/^namespace llvm {$/;"	n
llvm	InitializePasses.h	/^namespace llvm {$/;"	n
llvm	InlineAsm.h	/^namespace llvm {$/;"	n
llvm	InstrTypes.h	/^namespace llvm {$/;"	n
llvm	Instruction.h	/^namespace llvm {$/;"	n
llvm	Instructions.h	/^namespace llvm {$/;"	n
llvm	IntrinsicInst.h	/^namespace llvm {$/;"	n
llvm	Intrinsics.h	/^namespace llvm {$/;"	n
llvm	LLVMContext.h	/^namespace llvm {$/;"	n
llvm	Linker.h	/^namespace llvm {$/;"	n
llvm	MC/EDInstInfo.h	/^namespace llvm {$/;"	n
llvm	MC/MCAsmBackend.h	/^namespace llvm {$/;"	n
llvm	MC/MCAsmInfo.h	/^namespace llvm {$/;"	n
llvm	MC/MCAsmInfoCOFF.h	/^namespace llvm {$/;"	n
llvm	MC/MCAsmInfoDarwin.h	/^namespace llvm {$/;"	n
llvm	MC/MCAsmLayout.h	/^namespace llvm {$/;"	n
llvm	MC/MCAssembler.h	/^namespace llvm {$/;"	n
llvm	MC/MCAtom.h	/^namespace llvm {$/;"	n
llvm	MC/MCCodeEmitter.h	/^namespace llvm {$/;"	n
llvm	MC/MCCodeGenInfo.h	/^namespace llvm {$/;"	n
llvm	MC/MCContext.h	/^namespace llvm {$/;"	n
llvm	MC/MCDirectives.h	/^namespace llvm {$/;"	n
llvm	MC/MCDisassembler.h	/^namespace llvm {$/;"	n
llvm	MC/MCDwarf.h	/^namespace llvm {$/;"	n
llvm	MC/MCELFObjectWriter.h	/^namespace llvm {$/;"	n
llvm	MC/MCELFSymbolFlags.h	/^namespace llvm {$/;"	n
llvm	MC/MCExpr.h	/^namespace llvm {$/;"	n
llvm	MC/MCFixedLenDisassembler.h	/^namespace llvm {$/;"	n
llvm	MC/MCFixup.h	/^namespace llvm {$/;"	n
llvm	MC/MCFixupKindInfo.h	/^namespace llvm {$/;"	n
llvm	MC/MCInst.h	/^namespace llvm {$/;"	n
llvm	MC/MCInstPrinter.h	/^namespace llvm {$/;"	n
llvm	MC/MCInstrAnalysis.h	/^namespace llvm {$/;"	n
llvm	MC/MCInstrDesc.h	/^namespace llvm {$/;"	n
llvm	MC/MCInstrInfo.h	/^namespace llvm {$/;"	n
llvm	MC/MCInstrItineraries.h	/^namespace llvm {$/;"	n
llvm	MC/MCLabel.h	/^namespace llvm {$/;"	n
llvm	MC/MCMachOSymbolFlags.h	/^namespace llvm {$/;"	n
llvm	MC/MCMachObjectWriter.h	/^namespace llvm {$/;"	n
llvm	MC/MCModule.h	/^namespace llvm {$/;"	n
llvm	MC/MCObjectFileInfo.h	/^namespace llvm {$/;"	n
llvm	MC/MCObjectStreamer.h	/^namespace llvm {$/;"	n
llvm	MC/MCObjectWriter.h	/^namespace llvm {$/;"	n
llvm	MC/MCParser/AsmCond.h	/^namespace llvm {$/;"	n
llvm	MC/MCParser/AsmLexer.h	/^namespace llvm {$/;"	n
llvm	MC/MCParser/MCAsmLexer.h	/^namespace llvm {$/;"	n
llvm	MC/MCParser/MCAsmParser.h	/^namespace llvm {$/;"	n
llvm	MC/MCParser/MCAsmParserExtension.h	/^namespace llvm {$/;"	n
llvm	MC/MCParser/MCParsedAsmOperand.h	/^namespace llvm {$/;"	n
llvm	MC/MCRegisterInfo.h	/^namespace llvm {$/;"	n
llvm	MC/MCSchedule.h	/^namespace llvm {$/;"	n
llvm	MC/MCSection.h	/^namespace llvm {$/;"	n
llvm	MC/MCSectionCOFF.h	/^namespace llvm {$/;"	n
llvm	MC/MCSectionELF.h	/^namespace llvm {$/;"	n
llvm	MC/MCSectionMachO.h	/^namespace llvm {$/;"	n
llvm	MC/MCStreamer.h	/^namespace llvm {$/;"	n
llvm	MC/MCSubtargetInfo.h	/^namespace llvm {$/;"	n
llvm	MC/MCSymbol.h	/^namespace llvm {$/;"	n
llvm	MC/MCTargetAsmLexer.h	/^namespace llvm {$/;"	n
llvm	MC/MCTargetAsmParser.h	/^namespace llvm {$/;"	n
llvm	MC/MCValue.h	/^namespace llvm {$/;"	n
llvm	MC/MCWin64EH.h	/^namespace llvm {$/;"	n
llvm	MC/MCWinCOFFObjectWriter.h	/^namespace llvm {$/;"	n
llvm	MC/MachineLocation.h	/^namespace llvm {$/;"	n
llvm	MC/SectionKind.h	/^namespace llvm {$/;"	n
llvm	MC/SubtargetFeature.h	/^namespace llvm {$/;"	n
llvm	MDBuilder.h	/^namespace llvm {$/;"	n
llvm	Metadata.h	/^namespace llvm {$/;"	n
llvm	Module.h	/^namespace llvm {$/;"	n
llvm	Object/Archive.h	/^namespace llvm {$/;"	n
llvm	Object/Binary.h	/^namespace llvm {$/;"	n
llvm	Object/COFF.h	/^namespace llvm {$/;"	n
llvm	Object/ELF.h	/^namespace llvm {$/;"	n
llvm	Object/Error.h	/^namespace llvm {$/;"	n
llvm	Object/MachO.h	/^namespace llvm {$/;"	n
llvm	Object/MachOFormat.h	/^namespace llvm {$/;"	n
llvm	Object/MachOObject.h	/^namespace llvm {$/;"	n
llvm	Object/ObjectFile.h	/^namespace llvm {$/;"	n
llvm	OperandTraits.h	/^namespace llvm {$/;"	n
llvm	Operator.h	/^namespace llvm {$/;"	n
llvm	Pass.h	/^namespace llvm {$/;"	n
llvm	PassAnalysisSupport.h	/^namespace llvm {$/;"	n
llvm	PassManager.h	/^namespace llvm {$/;"	n
llvm	PassManagers.h	/^namespace llvm {$/;"	n
llvm	PassRegistry.h	/^namespace llvm {$/;"	n
llvm	PassSupport.h	/^namespace llvm {$/;"	n
llvm	Support/AlignOf.h	/^namespace llvm {$/;"	n
llvm	Support/Allocator.h	/^namespace llvm {$/;"	n
llvm	Support/Atomic.h	/^namespace llvm {$/;"	n
llvm	Support/BlockFrequency.h	/^namespace llvm {$/;"	n
llvm	Support/BranchProbability.h	/^namespace llvm {$/;"	n
llvm	Support/CFG.h	/^namespace llvm {$/;"	n
llvm	Support/COFF.h	/^namespace llvm {$/;"	n
llvm	Support/CallSite.h	/^namespace llvm {$/;"	n
llvm	Support/Capacity.h	/^namespace llvm {$/;"	n
llvm	Support/Casting.h	/^namespace llvm {$/;"	n
llvm	Support/CodeGen.h	/^namespace llvm {$/;"	n
llvm	Support/CommandLine.h	/^namespace llvm {$/;"	n
llvm	Support/ConstantFolder.h	/^namespace llvm {$/;"	n
llvm	Support/ConstantRange.h	/^namespace llvm {$/;"	n
llvm	Support/CrashRecoveryContext.h	/^namespace llvm {$/;"	n
llvm	Support/DOTGraphTraits.h	/^namespace llvm {$/;"	n
llvm	Support/DataExtractor.h	/^namespace llvm {$/;"	n
llvm	Support/DataFlow.h	/^namespace llvm {$/;"	n
llvm	Support/DataStream.h	/^namespace llvm {$/;"	n
llvm	Support/Debug.h	/^namespace llvm {$/;"	n
llvm	Support/DebugLoc.h	/^namespace llvm {$/;"	n
llvm	Support/Disassembler.h	/^namespace llvm {$/;"	n
llvm	Support/Dwarf.h	/^namespace llvm {$/;"	n
llvm	Support/DynamicLibrary.h	/^namespace llvm {$/;"	n
llvm	Support/ELF.h	/^namespace llvm {$/;"	n
llvm	Support/Endian.h	/^namespace llvm {$/;"	n
llvm	Support/Errno.h	/^namespace llvm {$/;"	n
llvm	Support/ErrorHandling.h	/^namespace llvm {$/;"	n
llvm	Support/FEnv.h	/^namespace llvm {$/;"	n
llvm	Support/FileOutputBuffer.h	/^namespace llvm {$/;"	n
llvm	Support/FileSystem.h	/^namespace llvm {$/;"	n
llvm	Support/FileUtilities.h	/^namespace llvm {$/;"	n
llvm	Support/Format.h	/^namespace llvm {$/;"	n
llvm	Support/FormattedStream.h	/^namespace llvm $/;"	n
llvm	Support/GCOV.h	/^namespace llvm {$/;"	n
llvm	Support/GetElementPtrTypeIterator.h	/^namespace llvm {$/;"	n
llvm	Support/GraphWriter.h	/^namespace llvm {$/;"	n
llvm	Support/Host.h	/^namespace llvm {$/;"	n
llvm	Support/IRReader.h	/^namespace llvm {$/;"	n
llvm	Support/IncludeFile.h	/^namespace llvm {$/;"	n
llvm	Support/InstIterator.h	/^namespace llvm {$/;"	n
llvm	Support/InstVisitor.h	/^namespace llvm {$/;"	n
llvm	Support/IntegersSubset.h	/^namespace llvm {$/;"	n
llvm	Support/IntegersSubsetMapping.h	/^namespace llvm {$/;"	n
llvm	Support/LEB128.h	/^namespace llvm {$/;"	n
llvm	Support/LeakDetector.h	/^namespace llvm {$/;"	n
llvm	Support/Locale.h	/^namespace llvm {$/;"	n
llvm	Support/LockFileManager.h	/^namespace llvm {$/;"	n
llvm	Support/MachO.h	/^namespace llvm {$/;"	n
llvm	Support/ManagedStatic.h	/^namespace llvm {$/;"	n
llvm	Support/MathExtras.h	/^namespace llvm {$/;"	n
llvm	Support/Memory.h	/^namespace llvm {$/;"	n
llvm	Support/MemoryBuffer.h	/^namespace llvm {$/;"	n
llvm	Support/MemoryObject.h	/^namespace llvm {$/;"	n
llvm	Support/Mutex.h	/^namespace llvm$/;"	n
llvm	Support/MutexGuard.h	/^namespace llvm {$/;"	n
llvm	Support/NoFolder.h	/^namespace llvm {$/;"	n
llvm	Support/OutputBuffer.h	/^namespace llvm {$/;"	n
llvm	Support/PassNameParser.h	/^namespace llvm {$/;"	n
llvm	Support/PathV1.h	/^namespace llvm {$/;"	n
llvm	Support/PathV2.h	/^namespace llvm {$/;"	n
llvm	Support/PatternMatch.h	/^namespace llvm {$/;"	n
llvm	Support/PluginLoader.h	/^namespace llvm {$/;"	n
llvm	Support/PointerLikeTypeTraits.h	/^namespace llvm {$/;"	n
llvm	Support/PredIteratorCache.h	/^namespace llvm {$/;"	n
llvm	Support/PrettyStackTrace.h	/^namespace llvm {$/;"	n
llvm	Support/Process.h	/^namespace llvm {$/;"	n
llvm	Support/Program.h	/^namespace llvm {$/;"	n
llvm	Support/RWMutex.h	/^namespace llvm$/;"	n
llvm	Support/Recycler.h	/^namespace llvm {$/;"	n
llvm	Support/RecyclingAllocator.h	/^namespace llvm {$/;"	n
llvm	Support/Regex.h	/^namespace llvm {$/;"	n
llvm	Support/Registry.h	/^namespace llvm {$/;"	n
llvm	Support/RegistryParser.h	/^namespace llvm {$/;"	n
llvm	Support/SMLoc.h	/^namespace llvm {$/;"	n
llvm	Support/SaveAndRestore.h	/^namespace llvm {$/;"	n
llvm	Support/Signals.h	/^namespace llvm {$/;"	n
llvm	Support/SourceMgr.h	/^namespace llvm {$/;"	n
llvm	Support/StreamableMemoryObject.h	/^namespace llvm {$/;"	n
llvm	Support/StringPool.h	/^namespace llvm {$/;"	n
llvm	Support/SwapByteOrder.h	/^namespace llvm {$/;"	n
llvm	Support/SystemUtils.h	/^namespace llvm {$/;"	n
llvm	Support/TargetFolder.h	/^namespace llvm {$/;"	n
llvm	Support/TargetRegistry.h	/^namespace llvm {$/;"	n
llvm	Support/TargetSelect.h	/^namespace llvm {$/;"	n
llvm	Support/ThreadLocal.h	/^namespace llvm {$/;"	n
llvm	Support/Threading.h	/^namespace llvm {$/;"	n
llvm	Support/TimeValue.h	/^namespace llvm {$/;"	n
llvm	Support/Timer.h	/^namespace llvm {$/;"	n
llvm	Support/ToolOutputFile.h	/^namespace llvm {$/;"	n
llvm	Support/Valgrind.h	/^namespace llvm {$/;"	n
llvm	Support/ValueHandle.h	/^namespace llvm {$/;"	n
llvm	Support/Win64EH.h	/^namespace llvm {$/;"	n
llvm	Support/YAMLParser.h	/^namespace llvm {$/;"	n
llvm	Support/circular_raw_ostream.h	/^namespace llvm $/;"	n
llvm	Support/raw_os_ostream.h	/^namespace llvm {$/;"	n
llvm	Support/raw_ostream.h	/^namespace llvm {$/;"	n
llvm	Support/system_error.h	/^namespace llvm {$/;"	n
llvm	Support/type_traits.h	/^namespace llvm {$/;"	n
llvm	SymbolTableListTraits.h	/^namespace llvm {$/;"	n
llvm	TableGen/Error.h	/^namespace llvm {$/;"	n
llvm	TableGen/Main.h	/^namespace llvm {$/;"	n
llvm	TableGen/Record.h	/^namespace llvm {$/;"	n
llvm	TableGen/StringMatcher.h	/^namespace llvm {$/;"	n
llvm	TableGen/TableGenBackend.h	/^namespace llvm {$/;"	n
llvm	Target/Mangler.h	/^namespace llvm {$/;"	n
llvm	Target/TargetCallingConv.h	/^namespace llvm {$/;"	n
llvm	Target/TargetELFWriterInfo.h	/^namespace llvm {$/;"	n
llvm	Target/TargetFrameLowering.h	/^namespace llvm {$/;"	n
llvm	Target/TargetInstrInfo.h	/^namespace llvm {$/;"	n
llvm	Target/TargetIntrinsicInfo.h	/^namespace llvm {$/;"	n
llvm	Target/TargetJITInfo.h	/^namespace llvm {$/;"	n
llvm	Target/TargetLibraryInfo.h	/^namespace llvm {$/;"	n
llvm	Target/TargetLowering.h	/^namespace llvm {$/;"	n
llvm	Target/TargetLoweringObjectFile.h	/^namespace llvm {$/;"	n
llvm	Target/TargetMachine.h	/^namespace llvm {$/;"	n
llvm	Target/TargetOpcodes.h	/^namespace llvm {$/;"	n
llvm	Target/TargetOptions.h	/^namespace llvm {$/;"	n
llvm	Target/TargetRegisterInfo.h	/^namespace llvm {$/;"	n
llvm	Target/TargetSelectionDAGInfo.h	/^namespace llvm {$/;"	n
llvm	Target/TargetSubtargetInfo.h	/^namespace llvm {$/;"	n
llvm	Target/TargetTransformImpl.h	/^namespace llvm {$/;"	n
llvm	TargetTransformInfo.h	/^namespace llvm {$/;"	n
llvm	Transforms/IPO.h	/^namespace llvm {$/;"	n
llvm	Transforms/IPO/InlinerPass.h	/^namespace llvm {$/;"	n
llvm	Transforms/IPO/PassManagerBuilder.h	/^namespace llvm {$/;"	n
llvm	Transforms/Instrumentation.h	/^namespace llvm {$/;"	n
llvm	Transforms/Scalar.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/AddrModeMatcher.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/BasicBlockUtils.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/BuildLibCalls.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/BypassSlowDivision.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/Cloning.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/CmpInstAnalysis.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/CodeExtractor.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/IntegerDivision.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/Local.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/ModuleUtils.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/PromoteMemToReg.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/SSAUpdater.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/SSAUpdaterImpl.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/SimplifyIndVar.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/SimplifyLibCalls.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/UnifyFunctionExitNodes.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/UnrollLoop.h	/^namespace llvm {$/;"	n
llvm	Transforms/Utils/ValueMapper.h	/^namespace llvm {$/;"	n
llvm	Transforms/Vectorize.h	/^namespace llvm {$/;"	n
llvm	Type.h	/^namespace llvm {$/;"	n
llvm	TypeBuilder.h	/^namespace llvm {$/;"	n
llvm	TypeFinder.h	/^namespace llvm {$/;"	n
llvm	Use.h	/^namespace llvm {$/;"	n
llvm	User.h	/^namespace llvm {$/;"	n
llvm	Value.h	/^namespace llvm {$/;"	n
llvm	ValueSymbolTable.h	/^namespace llvm {$/;"	n
llvm_dwarf_constants	Support/Dwarf.h	/^enum llvm_dwarf_constants {$/;"	g	namespace:llvm::dwarf
llvm_fenv_clearexcept	Support/FEnv.h	/^static inline void llvm_fenv_clearexcept() {$/;"	f	namespace:llvm::sys
llvm_fenv_testexcept	Support/FEnv.h	/^static inline bool llvm_fenv_testexcept() {$/;"	f	namespace:llvm::sys
llvm_move	Support/Compiler.h	36;"	d
llvm_move	Support/Compiler.h	38;"	d
llvm_shutdown_obj	Support/ManagedStatic.h	/^  explicit llvm_shutdown_obj(bool multithreaded) {$/;"	f	struct:llvm::llvm_shutdown_obj
llvm_shutdown_obj	Support/ManagedStatic.h	/^  llvm_shutdown_obj() { }$/;"	f	struct:llvm::llvm_shutdown_obj
llvm_shutdown_obj	Support/ManagedStatic.h	/^struct llvm_shutdown_obj {$/;"	s	namespace:llvm
llvm_unreachable	Support/ErrorHandling.h	98;"	d
loadRegFromStackSlot	Target/TargetInstrInfo.h	/^  virtual void loadRegFromStackSlot(MachineBasicBlock &MBB,$/;"	f	class:llvm::TargetInstrInfo
load_command	Support/MachO.h	/^    struct load_command {$/;"	s	namespace:llvm::MachO
locale	Support/Locale.h	/^namespace locale {$/;"	n	namespace:llvm::sys
location	Support/CommandLine.h	/^LocationClass<Ty> location(Ty &L) { return LocationClass<Ty>(L); }$/;"	f	namespace:llvm::cl
lock	ExecutionEngine/ExecutionEngine.h	/^  sys::Mutex lock;$/;"	m	class:llvm::ExecutionEngine
lock_failed	Support/system_error.h	/^  lock_failed             = 167, \/\/ ERROR_LOCK_FAILED,$/;"	e	enum:llvm::windows_error::_
lock_violation	Support/system_error.h	/^  lock_violation          = 33, \/\/ ERROR_LOCK_VIOLATION,$/;"	e	enum:llvm::windows_error::_
locreloff	Support/MachO.h	/^      uint32_t locreloff;$/;"	m	struct:llvm::MachO::dysymtab_command
log	Target/TargetLibraryInfo.h	/^      log,$/;"	e	enum:llvm::LibFunc::Func
log10	Target/TargetLibraryInfo.h	/^      log10,$/;"	e	enum:llvm::LibFunc::Func
log10f	Target/TargetLibraryInfo.h	/^      log10f,$/;"	e	enum:llvm::LibFunc::Func
log10l	Target/TargetLibraryInfo.h	/^      log10l,$/;"	e	enum:llvm::LibFunc::Func
log1p	Target/TargetLibraryInfo.h	/^      log1p,$/;"	e	enum:llvm::LibFunc::Func
log1pf	Target/TargetLibraryInfo.h	/^      log1pf,$/;"	e	enum:llvm::LibFunc::Func
log1pl	Target/TargetLibraryInfo.h	/^      log1pl,$/;"	e	enum:llvm::LibFunc::Func
log2	Target/TargetLibraryInfo.h	/^      log2,$/;"	e	enum:llvm::LibFunc::Func
log2f	Target/TargetLibraryInfo.h	/^      log2f,$/;"	e	enum:llvm::LibFunc::Func
log2l	Target/TargetLibraryInfo.h	/^      log2l,$/;"	e	enum:llvm::LibFunc::Func
logBase2	ADT/APInt.h	/^  unsigned logBase2() const {$/;"	f	class:llvm::APInt
logBase2	ADT/APInt.h	/^inline unsigned logBase2(const APInt& APIVal) {$/;"	f	namespace:llvm::APIntOps
logb	Target/TargetLibraryInfo.h	/^      logb,$/;"	e	enum:llvm::LibFunc::Func
logbf	Target/TargetLibraryInfo.h	/^      logbf,$/;"	e	enum:llvm::LibFunc::Func
logbl	Target/TargetLibraryInfo.h	/^      logbl,$/;"	e	enum:llvm::LibFunc::Func
logf	Target/TargetLibraryInfo.h	/^      logf,$/;"	e	enum:llvm::LibFunc::Func
logl	Target/TargetLibraryInfo.h	/^      logl,$/;"	e	enum:llvm::LibFunc::Func
lookup	ADT/DenseMap.h	/^  ValueT lookup(const KeyT &Val) const {$/;"	f	class:llvm::DenseMapBase
lookup	ADT/ImmutableIntervalMap.h	/^    data_type *lookup(ImmutableIntervalMap M, key_type_ref K) {$/;"	f	class:llvm::ImmutableIntervalMap::Factory
lookup	ADT/ImmutableMap.h	/^  data_type* lookup(key_type_ref K) const {$/;"	f	class:llvm::ImmutableMap
lookup	ADT/ImmutableMap.h	/^  data_type* lookup(key_type_ref K) const {$/;"	f	class:llvm::ImmutableMapRef
lookup	ADT/IntervalMap.h	/^  ValT lookup(KeyT x, ValT NotFound = ValT()) const {$/;"	f	class:llvm::IntervalMap
lookup	ADT/ScopedHashTable.h	/^  V lookup(const K &Key) {$/;"	f	class:llvm::ScopedHashTable
lookup	ADT/StringMap.h	/^  ValueTy lookup(StringRef Key) const {$/;"	f	class:llvm::StringMap
lookup	ADT/ValueMap.h	/^  ValueT lookup(const KeyT &Val) const {$/;"	f	class:llvm::ValueMap
lookup	ValueSymbolTable.h	/^  Value *lookup(StringRef Name) const { return vmap.lookup(Name); }$/;"	f	class:llvm::ValueSymbolTable
loopID	LDDProfilingCommon.h	/^    int loopID;$/;"	m	struct:dep
lostFraction	ADT/APFloat.h	/^  enum lostFraction {           \/\/ Example of truncated bits:$/;"	g	namespace:llvm
lshr	ADT/APInt.h	/^inline APInt lshr(const APInt& LHS, unsigned shiftAmt) {$/;"	f	namespace:llvm::APIntOps
ltrim	ADT/StringRef.h	/^    StringRef ltrim(StringRef Chars = " \\t\\n\\v\\f\\r") const {$/;"	f	class:llvm::StringRef
m	ADT/APInt.h	/^  APInt m;     \/\/\/< magic number$/;"	m	struct:llvm::APInt::mu
m	ADT/APInt.h	/^  APInt m;  \/\/\/< magic number$/;"	m	struct:llvm::APInt::ms
m_APInt	Support/PatternMatch.h	/^inline apint_match m_APInt(const APInt *&Res) { return Res; }$/;"	f	namespace:llvm::PatternMatch
m_AShr	Support/PatternMatch.h	/^m_AShr(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Add	Support/PatternMatch.h	/^m_Add(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_AllOnes	Support/PatternMatch.h	/^inline api_pred_ty<is_all_ones> m_AllOnes(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_AllOnes	Support/PatternMatch.h	/^inline cst_pred_ty<is_all_ones> m_AllOnes() {return cst_pred_ty<is_all_ones>();}$/;"	f	namespace:llvm::PatternMatch
m_And	Support/PatternMatch.h	/^m_And(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_BitCast	Support/PatternMatch.h	/^m_BitCast(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_Br	Support/PatternMatch.h	/^inline brc_match<Cond_t> m_Br(const Cond_t &C, BasicBlock *&T, BasicBlock *&F) {$/;"	f	namespace:llvm::PatternMatch
m_Constant	Support/PatternMatch.h	/^inline bind_ty<Constant> m_Constant(Constant *&C) { return C; }$/;"	f	namespace:llvm::PatternMatch
m_Constant	Support/PatternMatch.h	/^inline class_match<Constant> m_Constant() { return class_match<Constant>(); }$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	Support/PatternMatch.h	/^inline bind_const_intval_ty m_ConstantInt(uint64_t &V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	Support/PatternMatch.h	/^inline bind_ty<ConstantInt> m_ConstantInt(ConstantInt *&CI) { return CI; }$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	Support/PatternMatch.h	/^inline class_match<ConstantInt> m_ConstantInt() {$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	Support/PatternMatch.h	/^inline constantint_match<Val> m_ConstantInt() {$/;"	f	namespace:llvm::PatternMatch
m_Exact	Support/PatternMatch.h	/^inline Exact_match<T> m_Exact(const T &SubPattern) { return SubPattern; }$/;"	f	namespace:llvm::PatternMatch
m_FAdd	Support/PatternMatch.h	/^m_FAdd(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FCmp	Support/PatternMatch.h	/^m_FCmp(FCmpInst::Predicate &Pred, const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FDiv	Support/PatternMatch.h	/^m_FDiv(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FMul	Support/PatternMatch.h	/^m_FMul(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FNeg	Support/PatternMatch.h	/^inline fneg_match<LHS> m_FNeg(const LHS &L) { return L; }$/;"	f	namespace:llvm::PatternMatch
m_FRem	Support/PatternMatch.h	/^m_FRem(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FSub	Support/PatternMatch.h	/^m_FSub(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_ICmp	Support/PatternMatch.h	/^m_ICmp(ICmpInst::Predicate &Pred, const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_IDiv	Support/PatternMatch.h	/^m_IDiv(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_LShr	Support/PatternMatch.h	/^m_LShr(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_LogicalShift	Support/PatternMatch.h	/^m_LogicalShift(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Mul	Support/PatternMatch.h	/^m_Mul(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Neg	Support/PatternMatch.h	/^inline neg_match<LHS> m_Neg(const LHS &L) { return L; }$/;"	f	namespace:llvm::PatternMatch
m_Not	Support/PatternMatch.h	/^inline not_match<LHS> m_Not(const LHS &L) { return L; }$/;"	f	namespace:llvm::PatternMatch
m_One	Support/PatternMatch.h	/^inline api_pred_ty<is_one> m_One(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_One	Support/PatternMatch.h	/^inline cst_pred_ty<is_one> m_One() { return cst_pred_ty<is_one>(); }$/;"	f	namespace:llvm::PatternMatch
m_OneUse	Support/PatternMatch.h	/^inline OneUse_match<T> m_OneUse(const T &SubPattern) { return SubPattern; }$/;"	f	namespace:llvm::PatternMatch
m_Or	Support/PatternMatch.h	/^m_Or(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Power2	Support/PatternMatch.h	/^inline api_pred_ty<is_power2> m_Power2(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_Power2	Support/PatternMatch.h	/^inline cst_pred_ty<is_power2> m_Power2() { return cst_pred_ty<is_power2>(); }$/;"	f	namespace:llvm::PatternMatch
m_PtrToInt	Support/PatternMatch.h	/^m_PtrToInt(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_SDiv	Support/PatternMatch.h	/^m_SDiv(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SExt	Support/PatternMatch.h	/^m_SExt(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_SMax	Support/PatternMatch.h	/^m_SMax(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SMin	Support/PatternMatch.h	/^m_SMin(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SRem	Support/PatternMatch.h	/^m_SRem(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Select	Support/PatternMatch.h	/^m_Select(const Cond &C, const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SelectCst	Support/PatternMatch.h	/^m_SelectCst(const Cond &C) {$/;"	f	namespace:llvm::PatternMatch
m_Shl	Support/PatternMatch.h	/^m_Shl(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Shr	Support/PatternMatch.h	/^m_Shr(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SignBit	Support/PatternMatch.h	/^inline api_pred_ty<is_sign_bit> m_SignBit(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_SignBit	Support/PatternMatch.h	/^inline cst_pred_ty<is_sign_bit> m_SignBit() {return cst_pred_ty<is_sign_bit>();}$/;"	f	namespace:llvm::PatternMatch
m_Specific	Support/PatternMatch.h	/^inline specificval_ty m_Specific(const Value *V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_Sub	Support/PatternMatch.h	/^m_Sub(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Trunc	Support/PatternMatch.h	/^m_Trunc(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_UDiv	Support/PatternMatch.h	/^m_UDiv(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_UMax	Support/PatternMatch.h	/^m_UMax(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_UMin	Support/PatternMatch.h	/^m_UMin(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_URem	Support/PatternMatch.h	/^m_URem(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Undef	Support/PatternMatch.h	/^inline class_match<UndefValue> m_Undef() { return class_match<UndefValue>(); }$/;"	f	namespace:llvm::PatternMatch
m_Value	Support/PatternMatch.h	/^inline bind_ty<Value> m_Value(Value *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_Value	Support/PatternMatch.h	/^inline class_match<Value> m_Value() { return class_match<Value>(); }$/;"	f	namespace:llvm::PatternMatch
m_Xor	Support/PatternMatch.h	/^m_Xor(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_ZExt	Support/PatternMatch.h	/^m_ZExt(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_Zero	Support/PatternMatch.h	/^inline match_zero m_Zero() { return match_zero(); }$/;"	f	namespace:llvm::PatternMatch
mach	Object/MachOFormat.h	/^namespace mach {$/;"	n	namespace:llvm::object
mach_header	Support/MachO.h	/^    struct mach_header {$/;"	s	namespace:llvm::MachO
mach_header_64	Support/MachO.h	/^    struct mach_header_64 {$/;"	s	namespace:llvm::MachO
macho	Object/MachOFormat.h	/^namespace macho {$/;"	n	namespace:llvm::object
macho_bundle	Support/FileSystem.h	/^    macho_bundle,             \/\/\/< Mach-O Bundle file$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_core	Support/FileSystem.h	/^    macho_core,               \/\/\/< Mach-O Core File$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_dsym_companion	Support/FileSystem.h	/^    macho_dsym_companion,     \/\/\/< Mach-O dSYM companion file$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_dynamic_linker	Support/FileSystem.h	/^    macho_dynamic_linker,     \/\/\/< The Mach-O dynamic linker$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_dynamically_linked_shared_lib	Support/FileSystem.h	/^    macho_dynamically_linked_shared_lib, \/\/\/< Mach-O dynlinked shared lib$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_dynamically_linked_shared_lib_stub	Support/FileSystem.h	/^    macho_dynamically_linked_shared_lib_stub, \/\/\/< Mach-O Shared lib stub$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_executable	Support/FileSystem.h	/^    macho_executable,         \/\/\/< Mach-O Executable$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_fixed_virtual_memory_shared_lib	Support/FileSystem.h	/^    macho_fixed_virtual_memory_shared_lib, \/\/\/< Mach-O Shared Lib, FVM$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_object	Support/FileSystem.h	/^    macho_object,             \/\/\/< Mach-O Object file$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_preload_executabl	Support/FileSystem.h	/^    macho_preload_executabl,  \/\/\/< Mach-O Preloaded Executable$/;"	e	enum:llvm::sys::fs::file_magic::_
magic	Support/MachO.h	/^      uint32_t magic;$/;"	m	struct:llvm::MachO::fat_header
magic	Support/MachO.h	/^      uint32_t magic;$/;"	m	struct:llvm::MachO::mach_header
magic	Support/MachO.h	/^      uint32_t magic;$/;"	m	struct:llvm::MachO::mach_header_64
makeArrayRef	ADT/ArrayRef.h	/^  ArrayRef<T> makeArrayRef(const SmallVector<T, N> &Vec) {$/;"	f	namespace:llvm
makeArrayRef	ADT/ArrayRef.h	/^  ArrayRef<T> makeArrayRef(const SmallVectorImpl<T> &Vec) {$/;"	f	namespace:llvm
makeArrayRef	ADT/ArrayRef.h	/^  ArrayRef<T> makeArrayRef(const T &OneElt) {$/;"	f	namespace:llvm
makeArrayRef	ADT/ArrayRef.h	/^  ArrayRef<T> makeArrayRef(const T *begin, const T *end) {$/;"	f	namespace:llvm
makeArrayRef	ADT/ArrayRef.h	/^  ArrayRef<T> makeArrayRef(const T *data, size_t length) {$/;"	f	namespace:llvm
makeArrayRef	ADT/ArrayRef.h	/^  ArrayRef<T> makeArrayRef(const std::vector<T> &Vec) {$/;"	f	namespace:llvm
makeCmpResultType	InstrTypes.h	/^  static Type* makeCmpResultType(Type* opnd_type) {$/;"	f	class:llvm::CmpInst
make_error_code	Object/Error.h	/^inline error_code make_error_code(object_error e) {$/;"	f	namespace:llvm::object
make_error_code	Support/system_error.h	/^inline error_code make_error_code(errc _e) {$/;"	f	namespace:llvm
make_error_code	Support/system_error.h	/^inline error_code make_error_code(windows_error e) {$/;"	f	namespace:llvm
make_error_condition	Support/system_error.h	/^inline error_condition make_error_condition(errc _e) {$/;"	f	namespace:llvm
malloc	Target/TargetLibraryInfo.h	/^      malloc,$/;"	e	enum:llvm::LibFunc::Func
manualRelease	ADT/ImmutableMap.h	/^  void manualRelease() {$/;"	f	class:llvm::ImmutableMap
manualRetain	ADT/ImmutableMap.h	/^  void manualRetain() {$/;"	f	class:llvm::ImmutableMap
map	ADT/IntervalMap.h	/^  IntervalMap *map;$/;"	m	class:llvm::IntervalMap::const_iterator
mapDwarfRegsToLLVMRegs	MC/MCRegisterInfo.h	/^  void mapDwarfRegsToLLVMRegs(const DwarfLLVMRegPair *Map, unsigned Size,$/;"	f	class:llvm::MCRegisterInfo
mapLLVMRegToSEHReg	MC/MCRegisterInfo.h	/^  void mapLLVMRegToSEHReg(unsigned LLVMReg, int SEHReg) {$/;"	f	class:llvm::MCRegisterInfo
mapLLVMRegsToDwarfRegs	MC/MCRegisterInfo.h	/^  void mapLLVMRegsToDwarfRegs(const DwarfLLVMRegPair *Map, unsigned Size,$/;"	f	class:llvm::MCRegisterInfo
mapLocalFrameObject	CodeGen/MachineFrameInfo.h	/^  void mapLocalFrameObject(int ObjectIndex, int64_t Offset) {$/;"	f	class:llvm::MachineFrameInfo
mapSectionAddress	ExecutionEngine/ExecutionEngine.h	/^  virtual void mapSectionAddress(const void *LocalAddress, uint64_t TargetAddress) {$/;"	f	class:llvm::ExecutionEngine
map_iterator	ADT/STLExtras.h	/^inline mapped_iterator<ItTy, FuncTy> map_iterator(const ItTy &I, FuncTy F) {$/;"	f	namespace:llvm
mapfile	Bitcode/Archive.h	/^    MemoryBuffer *mapfile;    \/\/\/< Raw Archive contents mapped into memory$/;"	m	class:llvm::Archive
mapmode	Support/FileSystem.h	/^  enum mapmode {$/;"	g	class:llvm::sys::fs::mapped_file_region
mapped_file_region	Support/FileSystem.h	/^class mapped_file_region {$/;"	c	namespace:llvm::sys::fs
mapped_iterator	ADT/STLExtras.h	/^  inline explicit mapped_iterator(const RootIt &I, UnaryFunc F)$/;"	f	class:llvm::mapped_iterator
mapped_iterator	ADT/STLExtras.h	/^  inline mapped_iterator(const mapped_iterator &It)$/;"	f	class:llvm::mapped_iterator
mapped_iterator	ADT/STLExtras.h	/^class mapped_iterator {$/;"	c	namespace:llvm
mapped_type	ADT/DenseMap.h	/^  typedef ValueT mapped_type;$/;"	t	class:llvm::DenseMapBase
mapped_type	ADT/StringMap.h	/^  typedef ValueTy mapped_type;$/;"	t	class:llvm::StringMap
mapped_type	ADT/ValueMap.h	/^  typedef ValueT mapped_type;$/;"	t	class:llvm::ValueMap
markImmutable	ADT/ImmutableSet.h	/^  void markImmutable() {$/;"	f	class:llvm::ImutAVLTree
markImmutable	ADT/ImmutableSet.h	/^  void markImmutable(TreeTy* T) {$/;"	f	class:llvm::ImutAVLFactory
markNotSpillable	CodeGen/LiveInterval.h	/^    void markNotSpillable() {$/;"	f	class:llvm::LiveInterval
markRematerialized	CodeGen/LiveRangeEdit.h	/^  void markRematerialized(const VNInfo *ParentVNI) {$/;"	f	class:llvm::LiveRangeEdit
markUnused	CodeGen/LiveInterval.h	/^    void markUnused() { def = SlotIndex(); }$/;"	f	class:llvm::VNInfo
markedCachedDigest	ADT/ImmutableSet.h	/^  void markedCachedDigest() {$/;"	f	class:llvm::ImutAVLTree
maskBit	ADT/APInt.h	/^  static uint64_t maskBit(unsigned bitPosition) {$/;"	f	class:llvm::APInt
maskCacheIndex	ADT/ImmutableSet.h	/^  static inline unsigned maskCacheIndex(unsigned I) {$/;"	f	class:llvm::ImutAVLFactory
maskFlags	Analysis/ScalarEvolution.h	/^    static SCEV::NoWrapFlags maskFlags(SCEV::NoWrapFlags Flags, int Mask) {$/;"	f	class:llvm::ScalarEvolution
match	Support/PatternMatch.h	/^  bool match(ITy *V) { return isa<Class>(V); }$/;"	f	struct:llvm::PatternMatch::class_match
match	Support/PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::api_pred_ty
match	Support/PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::apint_match
match	Support/PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::bind_const_intval_ty
match	Support/PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::bind_ty
match	Support/PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::constantint_match
match	Support/PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::cst_pred_ty
match	Support/PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::match_zero
match	Support/PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::specificval_ty
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::BinOp2_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::BinaryOp_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::CastClass_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::CmpClass_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::Exact_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::MaxMin_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::OneUse_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::SelectClass_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::brc_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::fneg_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::neg_match
match	Support/PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::not_match
match	Support/PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::smax_pred_ty
match	Support/PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::smin_pred_ty
match	Support/PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::umax_pred_ty
match	Support/PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::umin_pred_ty
match	Support/PatternMatch.h	/^bool match(Val *V, const Pattern &P) {$/;"	f	namespace:llvm::PatternMatch
matchIfFNeg	Support/PatternMatch.h	/^  bool matchIfFNeg(Value *LHS, Value *RHS) {$/;"	f	struct:llvm::PatternMatch::fneg_match
matchIfNeg	Support/PatternMatch.h	/^  bool matchIfNeg(Value *LHS, Value *RHS) {$/;"	f	struct:llvm::PatternMatch::neg_match
matchIfNot	Support/PatternMatch.h	/^  bool matchIfNot(Value *LHS, Value *RHS) {$/;"	f	struct:llvm::PatternMatch::not_match
match_zero	Support/PatternMatch.h	/^struct match_zero {$/;"	s	namespace:llvm::PatternMatch
materializeFrameBaseRegister	Target/TargetRegisterInfo.h	/^  virtual void materializeFrameBaseRegister(MachineBasicBlock *MBB,$/;"	f	class:llvm::TargetRegisterInfo
max	ADT/StringRef.h	/^    static size_t max(size_t a, size_t b) { return a > b ? a : b; }$/;"	f	class:llvm::StringRef
maxStoresPerMemcpy	Target/TargetLowering.h	/^  unsigned maxStoresPerMemcpy;$/;"	m	class:llvm::TargetLowering
maxStoresPerMemcpyOptSize	Target/TargetLowering.h	/^  unsigned maxStoresPerMemcpyOptSize;$/;"	m	class:llvm::TargetLowering
maxStoresPerMemmove	Target/TargetLowering.h	/^  unsigned maxStoresPerMemmove;$/;"	m	class:llvm::TargetLowering
maxStoresPerMemmoveOptSize	Target/TargetLowering.h	/^  unsigned maxStoresPerMemmoveOptSize;$/;"	m	class:llvm::TargetLowering
maxStoresPerMemset	Target/TargetLowering.h	/^  unsigned maxStoresPerMemset;$/;"	m	class:llvm::TargetLowering
maxStoresPerMemsetOptSize	Target/TargetLowering.h	/^  unsigned maxStoresPerMemsetOptSize;$/;"	m	class:llvm::TargetLowering
max_size	ADT/SmallVector.h	/^  size_type max_size() const { return size_type(-1) \/ sizeof(T); }$/;"	f	class:llvm::SmallVectorTemplateCommon
max_size	ADT/ilist.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:llvm::iplist
maxprot	Support/MachO.h	/^      uint32_t maxprot;$/;"	m	struct:llvm::MachO::segment_command
maxprot	Support/MachO.h	/^      uint32_t maxprot;$/;"	m	struct:llvm::MachO::segment_command_64
mayBeEmittedAsTailCall	Target/TargetLowering.h	/^  virtual bool mayBeEmittedAsTailCall(CallInst *) const {$/;"	f	class:llvm::TargetLowering
mayBeOverridden	GlobalValue.h	/^  bool mayBeOverridden() const { return mayBeOverridden(Linkage); }$/;"	f	class:llvm::GlobalValue
mayBeOverridden	GlobalValue.h	/^  static bool mayBeOverridden(LinkageTypes Linkage) {$/;"	f	class:llvm::GlobalValue
mayHaveSideEffects	Instruction.h	/^  bool mayHaveSideEffects() const {$/;"	f	class:llvm::Instruction
mayLoad	CodeGen/MachineInstr.h	/^  bool mayLoad(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
mayLoad	MC/MCInstrDesc.h	/^  bool mayLoad() const {$/;"	f	class:llvm::MCInstrDesc
mayNeedFarStub	CodeGen/MachineRelocation.h	/^  bool mayNeedFarStub() const {$/;"	f	class:llvm::MachineRelocation
mayReadOrWriteMemory	Instruction.h	/^  bool mayReadOrWriteMemory() const {$/;"	f	class:llvm::Instruction
mayStore	CodeGen/MachineInstr.h	/^  bool mayStore(QueryType Type = AnyInBundle) const {$/;"	f	class:llvm::MachineInstr
mayStore	MC/MCInstrDesc.h	/^  bool mayStore() const {$/;"	f	class:llvm::MCInstrDesc
mblaze	ADT/Triple.h	/^    mblaze,  \/\/ MBlaze: mblaze$/;"	e	enum:llvm::Triple::ArchType
memRW	LDDProfilingCommon.h	/^  typedef struct memRW{$/;"	s
memRWInfo	LDDProfilingCommon.h	/^  }memRWInfo;$/;"	t	typeref:struct:memRW
memVT	Target/TargetLowering.h	/^    EVT          memVT;       \/\/ memory VT$/;"	m	struct:llvm::TargetLowering::IntrinsicInfo
member_begin	ADT/EquivalenceClasses.h	/^  member_iterator member_begin(iterator I) const {$/;"	f	class:llvm::EquivalenceClasses
member_end	ADT/EquivalenceClasses.h	/^  member_iterator member_end() const {$/;"	f	class:llvm::EquivalenceClasses
member_iterator	ADT/EquivalenceClasses.h	/^    explicit member_iterator() {}$/;"	f	class:llvm::EquivalenceClasses::member_iterator
member_iterator	ADT/EquivalenceClasses.h	/^    explicit member_iterator(const ECValue *N) : Node(N) {}$/;"	f	class:llvm::EquivalenceClasses::member_iterator
member_iterator	ADT/EquivalenceClasses.h	/^    member_iterator(const member_iterator &I) : Node(I.Node) {}$/;"	f	class:llvm::EquivalenceClasses::member_iterator
member_iterator	ADT/EquivalenceClasses.h	/^  class member_iterator : public std::iterator<std::forward_iterator_tag,$/;"	c	class:llvm::EquivalenceClasses
members	Bitcode/Archive.h	/^    MembersList members;      \/\/\/< The ilist of ArchiveMember$/;"	m	class:llvm::Archive
memchr	Target/TargetLibraryInfo.h	/^      memchr,$/;"	e	enum:llvm::LibFunc::Func
memcmp	Target/TargetLibraryInfo.h	/^      memcmp,$/;"	e	enum:llvm::LibFunc::Func
memcpy	Target/TargetLibraryInfo.h	/^      memcpy,$/;"	e	enum:llvm::LibFunc::Func
memcpy_chk	Target/TargetLibraryInfo.h	/^      memcpy_chk,$/;"	e	enum:llvm::LibFunc::Func
memmove	Target/TargetLibraryInfo.h	/^      memmove,$/;"	e	enum:llvm::LibFunc::Func
memoperands_begin	CodeGen/MachineInstr.h	/^  mmo_iterator memoperands_begin() const { return MemRefs; }$/;"	f	class:llvm::MachineInstr
memoperands_begin	CodeGen/SelectionDAGNodes.h	/^  mmo_iterator memoperands_begin() const { return MemRefs; }$/;"	f	class:llvm::MachineSDNode
memoperands_empty	CodeGen/MachineInstr.h	/^  bool memoperands_empty() const { return NumMemRefs == 0; }$/;"	f	class:llvm::MachineInstr
memoperands_empty	CodeGen/SelectionDAGNodes.h	/^  bool memoperands_empty() const { return MemRefsEnd == MemRefs; }$/;"	f	class:llvm::MachineSDNode
memoperands_end	CodeGen/MachineInstr.h	/^  mmo_iterator memoperands_end() const { return MemRefs + NumMemRefs; }$/;"	f	class:llvm::MachineInstr
memoperands_end	CodeGen/SelectionDAGNodes.h	/^  mmo_iterator memoperands_end() const { return MemRefsEnd; }$/;"	f	class:llvm::MachineSDNode
memset	Target/TargetLibraryInfo.h	/^      memset,$/;"	e	enum:llvm::LibFunc::Func
memset_pattern16	Target/TargetLibraryInfo.h	/^      memset_pattern16,$/;"	e	enum:llvm::LibFunc::Func
merge	ADT/ilist.h	/^  template<class Pr3> void merge(iplist &right, Pr3 pred) {$/;"	f	class:llvm::iplist
merge	ADT/ilist.h	/^  void merge(iplist &right) { return merge(right, op_less); }$/;"	f	class:llvm::iplist
message_size	Support/system_error.h	/^  message_size                        = EMSGSIZE,$/;"	e	enum:llvm::errc::_
mf	CodeGen/SlotIndexes.h	/^    MachineFunction *mf;$/;"	m	class:llvm::SlotIndexes
mi	CodeGen/SlotIndexes.h	/^    MachineInstr *mi;$/;"	m	class:llvm::IndexListEntry
mi2iMap	CodeGen/SlotIndexes.h	/^    Mi2IndexMap mi2iMap;$/;"	m	class:llvm::SlotIndexes
microseconds	Support/TimeValue.h	/^    uint32_t microseconds() const {$/;"	f	class:llvm::sys::TimeValue
microseconds	Support/TimeValue.h	/^    void microseconds ( int32_t micros ) {$/;"	f	class:llvm::sys::TimeValue
milliseconds	Support/TimeValue.h	/^    uint32_t milliseconds() const {$/;"	f	class:llvm::sys::TimeValue
milliseconds	Support/TimeValue.h	/^    void milliseconds ( int32_t millis ) {$/;"	f	class:llvm::sys::TimeValue
min	ADT/StringRef.h	/^    static size_t min(size_t a, size_t b) { return a < b ? a : b; }$/;"	f	class:llvm::StringRef
minIndex	CodeGen/PBQP/Math.h	/^    unsigned minIndex() const {$/;"	f	class:PBQP::Vector
minor_version	Support/MachO.h	/^      uint32_t minor_version;$/;"	m	struct:llvm::MachO::fvmlib
mips	ADT/Triple.h	/^    mips,    \/\/ MIPS: mips, mipsallegrex$/;"	e	enum:llvm::Triple::ArchType
mips	ADT/Triple.h	17;"	d
mips64	ADT/Triple.h	/^    mips64,  \/\/ MIPS64: mips64$/;"	e	enum:llvm::Triple::ArchType
mips64el	ADT/Triple.h	/^    mips64el,\/\/ MIPS64EL: mips64el$/;"	e	enum:llvm::Triple::ArchType
mipsel	ADT/Triple.h	/^    mipsel,  \/\/ MIPSEL: mipsel, mipsallegrexel$/;"	e	enum:llvm::Triple::ArchType
mix	ADT/Hashing.h	/^  void mix(const char *s) {$/;"	f	struct:llvm::hashing::detail::hash_state
mix_32_bytes	ADT/Hashing.h	/^  static void mix_32_bytes(const char *s, uint64_t &a, uint64_t &b) {$/;"	f	struct:llvm::hashing::detail::hash_state
mmo_iterator	CodeGen/MachineInstr.h	/^  typedef MachineMemOperand **mmo_iterator;$/;"	t	class:llvm::MachineInstr
mmo_iterator	CodeGen/SelectionDAGNodes.h	/^  typedef MachineMemOperand **mmo_iterator;$/;"	t	class:llvm::MachineSDNode
modTime	Support/PathV1.h	/^    TimeValue   modTime;    \/\/\/< Time of file's modification$/;"	m	class:llvm::sys::FileStatus
mode	Support/PathV1.h	/^    uint32_t    mode;       \/\/\/< Mode of the file, if applicable$/;"	m	class:llvm::sys::FileStatus
modifiesRegister	CodeGen/MachineInstr.h	/^  bool modifiesRegister(unsigned Reg, const TargetRegisterInfo *TRI) const {$/;"	f	class:llvm::MachineInstr
modifyFlags	MC/MCAssembler.h	/^  void modifyFlags(uint32_t Value, uint32_t Mask) {$/;"	f	class:llvm::MCSymbolData
modtaboff	Support/MachO.h	/^      uint32_t modtaboff;$/;"	m	struct:llvm::MachO::dysymtab_command
module_index	Support/MachO.h	/^      uint32_t module_index;$/;"	m	struct:llvm::MachO::dylib_table_of_contents
module_name	Support/MachO.h	/^      uint32_t module_name;$/;"	m	struct:llvm::MachO::dylib_module
module_name	Support/MachO.h	/^      uint32_t module_name;$/;"	m	struct:llvm::MachO::dylib_module_64
modules	Bitcode/Archive.h	/^    ModuleMap modules;        \/\/\/< The modules loaded via symbol lookup.$/;"	m	class:llvm::Archive
mop_iterator	CodeGen/MachineInstr.h	/^  typedef std::vector<MachineOperand>::iterator mop_iterator;$/;"	t	class:llvm::MachineInstr
morehelp	Support/CommandLine.h	/^  const char * morehelp;$/;"	m	struct:llvm::cl::extrahelp
move	ADT/SmallVector.h	/^  static It2 move(It1 I, It1 E, It2 Dest) {$/;"	f	class:llvm::SmallVectorTemplateBase
moveFromOldBuckets	ADT/DenseMap.h	/^  void moveFromOldBuckets(BucketT *OldBucketsBegin, BucketT *OldBucketsEnd) {$/;"	f	class:llvm::DenseMapBase
moveLeft	ADT/IntervalMap.h	/^  void moveLeft(unsigned i, unsigned j, unsigned Count) {$/;"	f	class:llvm::IntervalMapImpl::NodeBase
moveRight	ADT/IntervalMap.h	/^  void moveRight(unsigned i, unsigned j, unsigned Count) {$/;"	f	class:llvm::IntervalMapImpl::NodeBase
moveToHeader	Analysis/LoopInfo.h	/^  void moveToHeader(BlockT *BB) {$/;"	f	class:llvm::LoopBase
move_backward	ADT/SmallVector.h	/^  static It2 move_backward(It1 I, It1 E, It2 Dest) {$/;"	f	class:llvm::SmallVectorTemplateBase
ms	ADT/APInt.h	/^struct APInt::ms {$/;"	s	class:llvm::APInt
msec	Support/TimeValue.h	/^    uint64_t msec() const {$/;"	f	class:llvm::sys::TimeValue
msec	Support/TimeValue.h	/^    void msec( int64_t milliseconds ) {$/;"	f	class:llvm::sys::TimeValue
msp430	ADT/Triple.h	/^    msp430,  \/\/ MSP430: msp430$/;"	e	enum:llvm::Triple::ArchType
mtx	Support/Mutex.h	/^      SmartMutex<mt_only>& mtx;$/;"	m	class:llvm::sys::SmartScopedLock
mu	ADT/APInt.h	/^struct APInt::mu {$/;"	s	class:llvm::APInt
mul	ADT/APInt.h	/^inline APInt mul(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
multi_val	Support/CommandLine.h	/^  explicit multi_val(unsigned N) : AdditionalVals(N) {}$/;"	f	struct:llvm::cl::multi_val
multi_val	Support/CommandLine.h	/^struct multi_val {$/;"	s	namespace:llvm::cl
multipleAlternatives	InlineAsm.h	/^    SubConstraintInfoVector multipleAlternatives;$/;"	m	struct:llvm::InlineAsm::ConstraintInfo
mutable_iterator	ADT/SmallSet.h	/^  typedef typename SmallVector<T, N>::iterator mutable_iterator;$/;"	t	class:llvm::SmallSet
mutateType	Value.h	/^  void mutateType(Type *Ty) {$/;"	f	class:llvm::Value
mutex	Support/RWMutex.h	/^      SmartRWMutex<mt_only>& mutex;$/;"	m	struct:llvm::sys::SmartScopedReader
mutex	Support/RWMutex.h	/^      SmartRWMutex<mt_only>& mutex;$/;"	m	struct:llvm::sys::SmartScopedWriter
n1SolverEdgeItr	CodeGen/PBQP/HeuristicSolver.h	/^      SolverEdgeItr n1SolverEdgeItr, n2SolverEdgeItr;$/;"	m	class:PBQP::HeuristicSolverImpl::EdgeData
n2SolverEdgeItr	CodeGen/PBQP/HeuristicSolver.h	/^      SolverEdgeItr n1SolverEdgeItr, n2SolverEdgeItr;$/;"	m	class:PBQP::HeuristicSolverImpl::EdgeData
n_desc	Support/MachO.h	/^      int16_t n_desc;$/;"	m	struct:llvm::MachO::nlist
n_desc	Support/MachO.h	/^      uint16_t n_desc;$/;"	m	struct:llvm::MachO::nlist_64
n_sect	Support/MachO.h	/^      uint8_t n_sect;$/;"	m	struct:llvm::MachO::nlist
n_sect	Support/MachO.h	/^      uint8_t n_sect;$/;"	m	struct:llvm::MachO::nlist_64
n_strx	Support/MachO.h	/^      uint32_t n_strx;$/;"	m	struct:llvm::MachO::nlist
n_strx	Support/MachO.h	/^      uint32_t n_strx;$/;"	m	struct:llvm::MachO::nlist_64
n_type	Support/MachO.h	/^      uint8_t n_type;$/;"	m	struct:llvm::MachO::nlist
n_type	Support/MachO.h	/^      uint8_t n_type;$/;"	m	struct:llvm::MachO::nlist_64
n_value	Support/MachO.h	/^      uint32_t n_value;$/;"	m	struct:llvm::MachO::nlist
n_value	Support/MachO.h	/^      uint64_t n_value;$/;"	m	struct:llvm::MachO::nlist_64
name	Support/MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::dylib
name	Support/MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::dylinker_command
name	Support/MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::fvmfile_command
name	Support/MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::fvmlib
name	Support/MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::prebound_dylib_command
name_begin	TableGen/Record.h	/^  inline const_name_iterator name_begin() const { return ArgNames.begin(); }$/;"	f	class:llvm::DagInit
name_empty	TableGen/Record.h	/^  inline bool                name_empty() const { return ArgNames.empty(); }$/;"	f	class:llvm::DagInit
name_end	TableGen/Record.h	/^  inline const_name_iterator name_end  () const { return ArgNames.end();   }$/;"	f	class:llvm::DagInit
name_size	TableGen/Record.h	/^  inline size_t              name_size () const { return ArgNames.size();  }$/;"	f	class:llvm::DagInit
named_metadata_begin	Module.h	/^  const_named_metadata_iterator named_metadata_begin() const {$/;"	f	class:llvm::Module
named_metadata_begin	Module.h	/^  named_metadata_iterator named_metadata_begin() { return NamedMDList.begin(); }$/;"	f	class:llvm::Module
named_metadata_empty	Module.h	/^  bool named_metadata_empty() const { return NamedMDList.empty(); }$/;"	f	class:llvm::Module
named_metadata_end	Module.h	/^  const_named_metadata_iterator named_metadata_end() const {$/;"	f	class:llvm::Module
named_metadata_end	Module.h	/^  named_metadata_iterator named_metadata_end() { return NamedMDList.end(); }$/;"	f	class:llvm::Module
named_metadata_iterator	Module.h	/^  typedef NamedMDListType::iterator             named_metadata_iterator;$/;"	t	class:llvm::Module
named_metadata_size	Module.h	/^  size_t named_metadata_size() const { return NamedMDList.size();  }$/;"	f	class:llvm::Module
nameof	Support/Registry.h	/^    static const char *nameof(const entry &Entry) { return Entry.getName(); }$/;"	f	class:llvm::RegistryTraits
nanos_	Support/TimeValue.h	/^    NanoSecondsType  nanos_;  \/\/\/< Stores the nanoseconds part of the TimeVal$/;"	m	class:llvm::sys::TimeValue
nanoseconds	Support/TimeValue.h	/^    NanoSecondsType nanoseconds() const { return nanos_; }$/;"	f	class:llvm::sys::TimeValue
nanoseconds	Support/TimeValue.h	/^    void nanoseconds ( NanoSecondsType nanos ) {$/;"	f	class:llvm::sys::TimeValue
ncmds	Support/MachO.h	/^      uint32_t ncmds;$/;"	m	struct:llvm::MachO::mach_header
ncmds	Support/MachO.h	/^      uint32_t ncmds;$/;"	m	struct:llvm::MachO::mach_header_64
ne	ADT/APInt.h	/^  bool ne(const APInt &RHS) const {$/;"	f	class:llvm::APInt
nearbyint	Target/TargetLibraryInfo.h	/^      nearbyint,$/;"	e	enum:llvm::LibFunc::Func
nearbyintf	Target/TargetLibraryInfo.h	/^      nearbyintf,$/;"	e	enum:llvm::LibFunc::Func
nearbyintl	Target/TargetLibraryInfo.h	/^      nearbyintl,$/;"	e	enum:llvm::LibFunc::Func
needSizeDirective	MC/MCParser/MCParsedAsmOperand.h	/^  virtual bool needSizeDirective() const { return false; }$/;"	f	class:llvm::MCParsedAsmOperand
needs	DebugInfo/DIContext.h	/^  bool needs(Specification spec) const {$/;"	f	class:llvm::DILineInfoSpecifier
needsCustom	CodeGen/CallingConvLower.h	/^  bool needsCustom() const { return isCustom; }$/;"	f	class:llvm::CCValAssign
needsFrameBaseReg	Target/TargetRegisterInfo.h	/^  virtual bool needsFrameBaseReg(MachineInstr *MI, int64_t Offset) const {$/;"	f	class:llvm::TargetRegisterInfo
needsGOT	Target/TargetJITInfo.h	/^    bool needsGOT() const { return useGOT; }$/;"	f	class:llvm::TargetJITInfo
needsSafePoint	CodeGen/GCStrategy.h	/^    bool needsSafePoint(GC::PointKind Kind) const {$/;"	f	class:llvm::GCStrategy
needsSafePoints	CodeGen/GCStrategy.h	/^    bool needsSafePoints() const {$/;"	f	class:llvm::GCStrategy
needsStackRealignment	Target/TargetRegisterInfo.h	/^  virtual bool needsStackRealignment(const MachineFunction &MF) const {$/;"	f	class:llvm::TargetRegisterInfo
needsUnwindTableEntry	Function.h	/^  bool needsUnwindTableEntry() const {$/;"	f	class:llvm::Function
neg_match	Support/PatternMatch.h	/^  neg_match(const LHS_t &LHS) : L(LHS) {}$/;"	f	struct:llvm::PatternMatch::neg_match
neg_match	Support/PatternMatch.h	/^struct neg_match {$/;"	s	namespace:llvm::PatternMatch
network_busy	Support/system_error.h	/^  network_busy            = 54, \/\/ ERROR_NETWORK_BUSY,$/;"	e	enum:llvm::windows_error::_
network_down	Support/system_error.h	/^  network_down                        = ENETDOWN,$/;"	e	enum:llvm::errc::_
network_reset	Support/system_error.h	/^  network_reset                       = ENETRESET,$/;"	e	enum:llvm::errc::_
network_unreachable	Support/system_error.h	/^  network_unreachable                 = ENETUNREACH,$/;"	e	enum:llvm::errc::_
newNode	ADT/IntervalMap.h	/^  template <typename NodeT> NodeT *newNode() {$/;"	f	class:llvm::IntervalMap
newSUnit	CodeGen/ScheduleDAGInstrs.h	/^  inline SUnit *ScheduleDAGInstrs::newSUnit(MachineInstr *MI) {$/;"	f	class:llvm::ScheduleDAGInstrs
next	ADT/ImmutableSet.h	/^  ImutAVLTree *next;$/;"	m	class:llvm::ImutAVLTree
next	ADT/STLExtras.h	/^inline ItTy next(ItTy it)$/;"	f	namespace:llvm
next	ADT/STLExtras.h	/^inline ItTy next(ItTy it, Dist n)$/;"	f	namespace:llvm
next	LDDProfilingCommon.h	/^    struct dep *next;$/;"	m	struct:dep	typeref:struct:dep::dep
next	LDDProfilingCommon.h	/^    struct memRW *next;$/;"	m	struct:memRW	typeref:struct:memRW::memRW
next	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup *prev, *next;$/;"	m	class:llvm::CrashRecoveryContextCleanup
nextGenDwarfFileNumber	MC/MCContext.h	/^    unsigned nextGenDwarfFileNumber() { return ++GenDwarfFileNumber; }$/;"	f	class:llvm::MCContext
nextTrueDep	LDDProfilingCommon.h	/^    size_t nextTrueDep;$/;"	m	struct:dInfo
nextdefsym	Support/MachO.h	/^      uint32_t nextdefsym;$/;"	m	struct:llvm::MachO::dylib_module
nextdefsym	Support/MachO.h	/^      uint32_t nextdefsym;$/;"	m	struct:llvm::MachO::dylib_module_64
nextdefsym	Support/MachO.h	/^      uint32_t nextdefsym;$/;"	m	struct:llvm::MachO::dysymtab_command
nextrefsyms	Support/MachO.h	/^      uint32_t nextrefsyms;$/;"	m	struct:llvm::MachO::dysymtab_command
nextrel	Support/MachO.h	/^      uint32_t nextrel;$/;"	m	struct:llvm::MachO::dylib_module
nextrel	Support/MachO.h	/^      uint32_t nextrel;$/;"	m	struct:llvm::MachO::dylib_module_64
nextrel	Support/MachO.h	/^      uint32_t nextrel;$/;"	m	struct:llvm::MachO::dysymtab_command
nfat_arch	Support/MachO.h	/^      uint32_t nfat_arch;$/;"	m	struct:llvm::MachO::fat_header
nhints	Support/MachO.h	/^      uint32_t nhints;$/;"	m	struct:llvm::MachO::twolevel_hints_command
nindirectsyms	Support/MachO.h	/^      uint32_t nindirectsyms;$/;"	m	struct:llvm::MachO::dysymtab_command
ninit_nterm	Support/MachO.h	/^      uint32_t ninit_nterm;$/;"	m	struct:llvm::MachO::dylib_module
ninit_nterm	Support/MachO.h	/^      uint32_t ninit_nterm;$/;"	m	struct:llvm::MachO::dylib_module_64
nlist	Support/MachO.h	/^    struct nlist {$/;"	s	namespace:llvm::MachO
nlist_64	Support/MachO.h	/^    struct nlist_64 {$/;"	s	namespace:llvm::MachO
nlocalsym	Support/MachO.h	/^      uint32_t nlocalsym;$/;"	m	struct:llvm::MachO::dylib_module
nlocalsym	Support/MachO.h	/^      uint32_t nlocalsym;$/;"	m	struct:llvm::MachO::dylib_module_64
nlocalsym	Support/MachO.h	/^      uint32_t nlocalsym;$/;"	m	struct:llvm::MachO::dysymtab_command
nlocrel	Support/MachO.h	/^      uint32_t nlocrel;$/;"	m	struct:llvm::MachO::dysymtab_command
nmodtab	Support/MachO.h	/^      uint32_t nmodtab;$/;"	m	struct:llvm::MachO::dysymtab_command
nmodules	Support/MachO.h	/^      uint32_t nmodules;$/;"	m	struct:llvm::MachO::prebound_dylib_command
no_buffer_space	Support/system_error.h	/^  no_buffer_space                     = ENOBUFS,$/;"	e	enum:llvm::errc::_
no_child_process	Support/system_error.h	/^  no_child_process                    = ECHILD,$/;"	e	enum:llvm::errc::_
no_link	Support/system_error.h	/^  no_link                             = ENOLINK,$/;"	e	enum:llvm::errc::_
no_lock_available	Support/system_error.h	/^  no_lock_available                   = ENOLCK,$/;"	e	enum:llvm::errc::_
no_message	Support/system_error.h	/^  no_message                          = ENOMSG,$/;"	e	enum:llvm::errc::_
no_message_available	Support/system_error.h	/^  no_message_available                = ENODATA,$/;"	e	enum:llvm::errc::_
no_more_files	Support/system_error.h	/^  no_more_files           = 18, \/\/ ERROR_NO_MORE_FILES,$/;"	e	enum:llvm::windows_error::_
no_perms	Support/FileSystem.h	/^  no_perms     = 0,$/;"	e	enum:llvm::sys::fs::perms
no_protocol_option	Support/system_error.h	/^  no_protocol_option                  = ENOPROTOOPT,$/;"	e	enum:llvm::errc::_
no_push	Support/FileSystem.h	/^  void no_push() { State->HasNoPushRequest = true; }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
no_push_request	Support/FileSystem.h	/^  bool no_push_request() const { return State->HasNoPushRequest; }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
no_space_on_device	Support/system_error.h	/^  no_space_on_device                  = ENOSPC,$/;"	e	enum:llvm::errc::_
no_stream_resources	Support/system_error.h	/^  no_stream_resources                 = ENOSR,$/;"	e	enum:llvm::errc::_
no_such_device	Support/system_error.h	/^  no_such_device                      = ENODEV,$/;"	e	enum:llvm::errc::_
no_such_device_or_address	Support/system_error.h	/^  no_such_device_or_address           = ENXIO,$/;"	e	enum:llvm::errc::_
no_such_file_or_directory	Support/system_error.h	/^  no_such_file_or_directory           = ENOENT,$/;"	e	enum:llvm::errc::_
no_such_process	Support/system_error.h	/^  no_such_process                     = ESRCH,$/;"	e	enum:llvm::errc::_
node	ADT/IntervalMap.h	/^    RootBranch node;$/;"	m	struct:llvm::IntervalMap::RootBranchData
node	ADT/IntervalMap.h	/^    void *node;$/;"	m	struct:llvm::IntervalMapImpl::Path::Entry
node	ADT/IntervalMap.h	/^  template <typename NodeT> NodeT &node(unsigned Level) const {$/;"	f	class:llvm::IntervalMapImpl::Path
node	Support/Registry.h	/^      node(const entry& V) : Next(0), Val(V) {$/;"	f	class:llvm::Registry::node
node	Support/Registry.h	/^    class node {$/;"	c	class:llvm::Registry
node1	CodeGen/PBQP/Graph.h	/^      NodeItr node1, node2;$/;"	m	class:PBQP::Graph::EdgeEntry
node1AEItr	CodeGen/PBQP/Graph.h	/^      AdjEdgeItr node1AEItr, node2AEItr;$/;"	m	class:PBQP::Graph::EdgeEntry
node2	CodeGen/PBQP/Graph.h	/^      NodeItr node1, node2;$/;"	m	class:PBQP::Graph::EdgeEntry
node2AEItr	CodeGen/PBQP/Graph.h	/^      AdjEdgeItr node1AEItr, node2AEItr;$/;"	m	class:PBQP::Graph::EdgeEntry
node2VReg	CodeGen/RegAllocPBQP.h	/^    Node2VReg node2VReg;$/;"	m	class:llvm::PBQPRAProblem
nodeDataList	CodeGen/PBQP/HeuristicSolver.h	/^    NodeDataList nodeDataList;$/;"	m	class:PBQP::HeuristicSolverImpl
nodeVisitNumbers	ADT/SCCIterator.h	/^  DenseMap<NodeType *, unsigned> nodeVisitNumbers;$/;"	m	class:llvm::scc_iterator
nodeVisited	ADT/DepthFirstIterator.h	/^  inline bool nodeVisited(NodeType *Node) const {$/;"	f	class:llvm::df_iterator
node_iterator	Analysis/Interval.h	/^  typedef std::vector<BasicBlock*>::iterator node_iterator;$/;"	t	class:llvm::Interval
node_iterator	Support/GraphWriter.h	/^  typedef typename GTraits::nodes_iterator    node_iterator;$/;"	t	class:llvm::GraphWriter
nodes	CodeGen/PBQP/Graph.h	/^    NodeList nodes;$/;"	m	class:PBQP::Graph
nodesBegin	CodeGen/PBQP/Graph.h	/^    ConstNodeItr nodesBegin() const { return nodes.begin(); }$/;"	f	class:PBQP::Graph
nodesBegin	CodeGen/PBQP/Graph.h	/^    NodeItr nodesBegin() { return nodes.begin(); }$/;"	f	class:PBQP::Graph
nodesEnd	CodeGen/PBQP/Graph.h	/^    ConstNodeItr nodesEnd() const { return nodes.end(); }$/;"	f	class:PBQP::Graph
nodesEnd	CodeGen/PBQP/Graph.h	/^    NodeItr nodesEnd() { return nodes.end(); }$/;"	f	class:PBQP::Graph
nodes_begin	Analysis/CallGraph.h	/^  static nodes_iterator nodes_begin(CallGraph *CG) {$/;"	f	struct:llvm::GraphTraits
nodes_begin	Analysis/CallGraph.h	/^  static nodes_iterator nodes_begin(const CallGraph *CG) { return CG->begin(); }$/;"	f	struct:llvm::GraphTraits
nodes_begin	Analysis/Dominators.h	/^  static nodes_iterator nodes_begin(DomTreeNode *N) {$/;"	f	struct:llvm::GraphTraits
nodes_begin	Analysis/Dominators.h	/^  static nodes_iterator nodes_begin(DominatorTree *N) {$/;"	f	struct:llvm::GraphTraits
nodes_begin	Analysis/PostDominators.h	/^  static nodes_iterator nodes_begin(PostDominatorTree *N) {$/;"	f	struct:llvm::GraphTraits
nodes_begin	Analysis/RegionIterator.h	/^  static nodes_iterator nodes_begin(RegionInfo* RI) {$/;"	f	struct:llvm::GraphTraits
nodes_begin	CodeGen/MachineFunction.h	/^  static nodes_iterator nodes_begin(MachineFunction *F) { return F->begin(); }$/;"	f	struct:llvm::GraphTraits
nodes_begin	CodeGen/MachineFunction.h	/^  static nodes_iterator nodes_begin(const MachineFunction *F) {$/;"	f	struct:llvm::GraphTraits
nodes_begin	CodeGen/ScheduleDAG.h	/^    static nodes_iterator nodes_begin(ScheduleDAG *G) {$/;"	f	struct:llvm::GraphTraits
nodes_begin	CodeGen/SelectionDAG.h	/^  static nodes_iterator nodes_begin(SelectionDAG *G) {$/;"	f	struct:llvm::GraphTraits
nodes_begin	Support/CFG.h	/^  static nodes_iterator nodes_begin(Function *F) { return F->begin(); }$/;"	f	struct:llvm::GraphTraits
nodes_begin	Support/CFG.h	/^  static nodes_iterator nodes_begin(const Function *F) { return F->begin(); }$/;"	f	struct:llvm::GraphTraits
nodes_end	Analysis/CallGraph.h	/^  static nodes_iterator nodes_end  (CallGraph *CG) {$/;"	f	struct:llvm::GraphTraits
nodes_end	Analysis/CallGraph.h	/^  static nodes_iterator nodes_end  (const CallGraph *CG) { return CG->end(); }$/;"	f	struct:llvm::GraphTraits
nodes_end	Analysis/Dominators.h	/^  static nodes_iterator nodes_end(DomTreeNode *N) {$/;"	f	struct:llvm::GraphTraits
nodes_end	Analysis/Dominators.h	/^  static nodes_iterator nodes_end(DominatorTree *N) {$/;"	f	struct:llvm::GraphTraits
nodes_end	Analysis/PostDominators.h	/^  static nodes_iterator nodes_end(PostDominatorTree *N) {$/;"	f	struct:llvm::GraphTraits
nodes_end	Analysis/RegionIterator.h	/^  static nodes_iterator nodes_end(RegionInfo *RI) {$/;"	f	struct:llvm::GraphTraits
nodes_end	CodeGen/MachineFunction.h	/^  static nodes_iterator nodes_end  (MachineFunction *F) { return F->end(); }$/;"	f	struct:llvm::GraphTraits
nodes_end	CodeGen/MachineFunction.h	/^  static nodes_iterator nodes_end  (const MachineFunction *F) {$/;"	f	struct:llvm::GraphTraits
nodes_end	CodeGen/ScheduleDAG.h	/^    static nodes_iterator nodes_end(ScheduleDAG *G) {$/;"	f	struct:llvm::GraphTraits
nodes_end	CodeGen/SelectionDAG.h	/^  static nodes_iterator nodes_end(SelectionDAG *G) {$/;"	f	struct:llvm::GraphTraits
nodes_end	Support/CFG.h	/^  static nodes_iterator nodes_end  (Function *F) { return F->end(); }$/;"	f	struct:llvm::GraphTraits
nodes_end	Support/CFG.h	/^  static nodes_iterator nodes_end  (const Function *F) { return F->end(); }$/;"	f	struct:llvm::GraphTraits
nodes_iterator	Analysis/CallGraph.h	/^  typedef CallGraph::const_iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	Analysis/CallGraph.h	/^  typedef mapped_iterator<CallGraph::iterator, DerefFun> nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	Analysis/Dominators.h	/^  typedef df_iterator<DomTreeNode*> nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	Analysis/RegionIterator.h	/^                      GraphTraits<FlatIt<NodeType*> > > nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	CodeGen/MachineFunction.h	/^  typedef MachineFunction::const_iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	CodeGen/MachineFunction.h	/^  typedef MachineFunction::iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	CodeGen/ScheduleDAG.h	/^    typedef std::vector<SUnit>::iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	CodeGen/SelectionDAG.h	/^  typedef SelectionDAG::allnodes_iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	Support/CFG.h	/^  typedef Function::const_iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	Support/CFG.h	/^  typedef Function::iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nonce_instance	Support/type_traits.h	/^  static UnderlyingT &nonce_instance;$/;"	m	class:llvm::is_integral_or_enum
nonce_member	Support/AlignOf.h	/^  llvm::AlignedCharArrayImpl<AlignOf<AlignerImpl>::Alignment> nonce_member;$/;"	m	union:llvm::AlignedCharArrayUnion
none	ADT/BitVector.h	/^  bool none() const {$/;"	f	class:llvm::BitVector
none	ADT/SmallBitVector.h	/^  bool none() const {$/;"	f	class:llvm::SmallBitVector
normalizeSpillWeight	CodeGen/CalcSpillWeights.h	/^  static inline float normalizeSpillWeight(float UseDefFreq, unsigned Size) {$/;"	f	namespace:llvm
not_a_directory	Support/system_error.h	/^  not_a_directory                     = ENOTDIR,$/;"	e	enum:llvm::errc::_
not_a_socket	Support/system_error.h	/^  not_a_socket                        = ENOTSOCK,$/;"	e	enum:llvm::errc::_
not_a_stream	Support/system_error.h	/^  not_a_stream                        = ENOSTR,$/;"	e	enum:llvm::errc::_
not_connected	Support/system_error.h	/^  not_connected                       = ENOTCONN,$/;"	e	enum:llvm::errc::_
not_dos_disk	Support/system_error.h	/^  not_dos_disk            = 26, \/\/ ERROR_NOT_DOS_DISK,$/;"	e	enum:llvm::windows_error::_
not_enough_memory	Support/system_error.h	/^  not_enough_memory                   = ENOMEM,$/;"	e	enum:llvm::errc::_
not_enough_memory	Support/system_error.h	/^  not_enough_memory       = 8, \/\/ ERROR_NOT_ENOUGH_MEMORY,$/;"	e	enum:llvm::windows_error::_
not_intrinsic	Intrinsics.h	/^    not_intrinsic = 0,   \/\/ Must be zero$/;"	e	enum:llvm::Intrinsic::ID
not_match	Support/PatternMatch.h	/^  not_match(const LHS_t &LHS) : L(LHS) {}$/;"	f	struct:llvm::PatternMatch::not_match
not_match	Support/PatternMatch.h	/^struct not_match {$/;"	s	namespace:llvm::PatternMatch
not_ready	Support/system_error.h	/^  not_ready               = 21, \/\/ ERROR_NOT_READY,$/;"	e	enum:llvm::windows_error::_
not_same_device	Support/system_error.h	/^  not_same_device         = 17, \/\/ ERROR_NOT_SAME_DEVICE,$/;"	e	enum:llvm::windows_error::_
not_supported	Support/system_error.h	/^  not_supported                       = ENOTSUP,$/;"	e	enum:llvm::errc::_
noteHead	ADT/SparseBitVector.h	/^  static void noteHead(Element *, Element *) {}$/;"	f	struct:llvm::ilist_traits
noteHead	ADT/ilist.h	/^  static void noteHead(NodeTy *NewHead, NodeTy *Sentinel) {$/;"	f	struct:llvm::ilist_sentinel_traits
noteHead	Analysis/IVUsers.h	/^  static void noteHead(IVStrideUse*, IVStrideUse*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	BasicBlock.h	/^  static void noteHead(Instruction*, Instruction*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	CodeGen/MachineBasicBlock.h	/^  static void noteHead(MachineInstr*, MachineInstr*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	CodeGen/MachineFunction.h	/^  static void noteHead(MachineBasicBlock*, MachineBasicBlock*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	CodeGen/SelectionDAG.h	/^  static void noteHead(SDNode*, SDNode*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	CodeGen/SlotIndexes.h	/^    static void noteHead(IndexListEntry*, IndexListEntry*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	Function.h	/^  static void noteHead(Argument*, Argument*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	Function.h	/^  static void noteHead(BasicBlock*, BasicBlock*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	Module.h	/^  static void noteHead(Function*, Function*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	Module.h	/^  static void noteHead(GlobalAlias*, GlobalAlias*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	Module.h	/^  static void noteHead(GlobalVariable*, GlobalVariable*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	Module.h	/^  static void noteHead(NamedMDNode*, NamedMDNode*) {}$/;"	f	struct:llvm::ilist_traits
noteHead	Support/Recycler.h	/^  static void noteHead(RecyclerStruct*, RecyclerStruct*) {}$/;"	f	struct:llvm::ilist_traits
npos	ADT/StringRef.h	/^    static const size_t npos = ~size_t(0);$/;"	m	class:llvm::StringRef
nrefsym	Support/MachO.h	/^      uint32_t nrefsym;$/;"	m	struct:llvm::MachO::dylib_module
nrefsym	Support/MachO.h	/^      uint32_t nrefsym;$/;"	m	struct:llvm::MachO::dylib_module_64
nreloc	Support/MachO.h	/^      uint32_t nreloc;$/;"	m	struct:llvm::MachO::section
nreloc	Support/MachO.h	/^      uint32_t nreloc;$/;"	m	struct:llvm::MachO::section_64
nsects	Support/MachO.h	/^      uint32_t nsects;$/;"	m	struct:llvm::MachO::segment_command
nsects	Support/MachO.h	/^      uint32_t nsects;$/;"	m	struct:llvm::MachO::segment_command_64
nsyms	Support/MachO.h	/^      uint32_t nsyms;$/;"	m	struct:llvm::MachO::symtab_command
ntoc	Support/MachO.h	/^      uint32_t ntoc;$/;"	m	struct:llvm::MachO::dysymtab_command
nullVal_	ADT/IndexedMap.h	/^    T nullVal_;$/;"	m	class:llvm::IndexedMap
numCodes	Support/Win64EH.h	/^  uint8_t numCodes;$/;"	m	struct:llvm::Win64EH::UnwindInfo
numDenied	CodeGen/PBQP/Heuristics/Briggs.h	/^        unsigned numDenied, numSafe;$/;"	m	struct:PBQP::Heuristics::Briggs::NodeData
numEdgeDestLabels	Support/DOTGraphTraits.h	/^  static unsigned numEdgeDestLabels(const void *) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
numEdges	CodeGen/PBQP/Graph.h	/^    unsigned numEdges;$/;"	m	class:PBQP::Graph
numEntries	Analysis/ProfileInfoTypes.h	/^  unsigned numEntries;   \/* number of entries stored *\/$/;"	m	struct:__anon26
numNodes	CodeGen/PBQP/Graph.h	/^    unsigned numNodes;$/;"	m	class:PBQP::Graph
numNodes	CodeGen/PBQP/Solution.h	/^    unsigned numNodes() const { return selections.size(); }$/;"	f	class:PBQP::Solution
numOperands	MC/EDInstInfo.h	/^  uint8_t       numOperands;$/;"	m	struct:llvm::EDInstInfo
numR0Reductions	CodeGen/PBQP/Solution.h	/^    unsigned numR0Reductions() const { return r0Reductions; }$/;"	f	class:PBQP::Solution
numR1Reductions	CodeGen/PBQP/Solution.h	/^    unsigned numR1Reductions() const { return r1Reductions; }$/;"	f	class:PBQP::Solution
numR2Reductions	CodeGen/PBQP/Solution.h	/^    unsigned numR2Reductions() const { return r2Reductions; }$/;"	f	class:PBQP::Solution
numRNReductions	CodeGen/PBQP/Solution.h	/^    unsigned numRNReductions() const { return rNReductions; }$/;"	f	class:PBQP::Solution
numSafe	CodeGen/PBQP/Heuristics/Briggs.h	/^        unsigned numDenied, numSafe;$/;"	m	struct:PBQP::Heuristics::Briggs::NodeData
num_intrinsics	Intrinsics.h	/^    , num_intrinsics$/;"	e	enum:llvm::Intrinsic::ID
nundefsym	Support/MachO.h	/^      uint32_t nundefsym;$/;"	m	struct:llvm::MachO::dysymtab_command
nvptx	ADT/Triple.h	/^    nvptx,   \/\/ NVPTX: 32-bit$/;"	e	enum:llvm::Triple::ArchType
nvptx64	ADT/Triple.h	/^    nvptx64, \/\/ NVPTX: 64-bit$/;"	e	enum:llvm::Triple::ArchType
objc_module_info_addr	Support/MachO.h	/^      uint32_t objc_module_info_addr;$/;"	m	struct:llvm::MachO::dylib_module
objc_module_info_addr	Support/MachO.h	/^      uint64_t objc_module_info_addr;$/;"	m	struct:llvm::MachO::dylib_module_64
objc_module_info_size	Support/MachO.h	/^      uint32_t objc_module_info_size;$/;"	m	struct:llvm::MachO::dylib_module
objc_module_info_size	Support/MachO.h	/^      uint32_t objc_module_info_size;$/;"	m	struct:llvm::MachO::dylib_module_64
object	Object/Archive.h	/^namespace object {$/;"	n	namespace:llvm
object	Object/Binary.h	/^namespace object {$/;"	n	namespace:llvm
object	Object/COFF.h	/^namespace object {$/;"	n	namespace:llvm
object	Object/ELF.h	/^namespace object {$/;"	n	namespace:llvm
object	Object/Error.h	/^namespace object {$/;"	n	namespace:llvm
object	Object/MachO.h	/^namespace object {$/;"	n	namespace:llvm
object	Object/MachOFormat.h	/^namespace object {$/;"	n	namespace:llvm
object	Object/MachOObject.h	/^namespace object {$/;"	n	namespace:llvm
object	Object/ObjectFile.h	/^namespace object {$/;"	n	namespace:llvm
object_creator	Support/ManagedStatic.h	/^void* object_creator() {$/;"	f	namespace:llvm
object_deleter	Support/ManagedStatic.h	/^template<typename T, size_t N> struct object_deleter<T[N]> {$/;"	s	namespace:llvm
object_deleter	Support/ManagedStatic.h	/^template<typename T> struct object_deleter {$/;"	s	namespace:llvm
object_error	Object/Error.h	/^  explicit object_error(int v) : v_(_(v)) {}$/;"	f	struct:llvm::object::object_error
object_error	Object/Error.h	/^  object_error(_ v) : v_(v) {}$/;"	f	struct:llvm::object::object_error
object_error	Object/Error.h	/^struct object_error {$/;"	s	namespace:llvm::object
offset	ADT/IntervalMap.h	/^    unsigned offset;$/;"	m	struct:llvm::IntervalMapImpl::Path::Entry
offset	ADT/IntervalMap.h	/^  unsigned &offset(unsigned Level) { return path[Level].offset; }$/;"	f	class:llvm::IntervalMapImpl::Path
offset	ADT/IntervalMap.h	/^  unsigned offset(unsigned Level) const { return path[Level].offset; }$/;"	f	class:llvm::IntervalMapImpl::Path
offset	Support/MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::fat_arch
offset	Support/MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::section
offset	Support/MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::section_64
offset	Support/MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::symseg_command
offset	Support/MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::twolevel_hints_command
offset	Target/TargetLowering.h	/^    int          offset;      \/\/ offset off of ptrVal$/;"	m	struct:llvm::TargetLowering::IntrinsicInfo
old_value	Support/SaveAndRestore.h	/^  T old_value;$/;"	m	struct:llvm::SaveAndRestore
old_value	Support/SaveAndRestore.h	/^  const bool old_value;$/;"	m	struct:llvm::SaveOr
onDelete	ADT/ValueMap.h	/^  static void onDelete(const ExtraDataT &\/*Data*\/, KeyT \/*Old*\/) {}$/;"	f	struct:llvm::ValueMapConfig
onLClose	Support/IntegersSubsetMapping.h	/^    void onLClose(const IntTy &Pt) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onLOpen	Support/IntegersSubsetMapping.h	/^    void onLOpen(const IntTy &Pt, SuccessorClass *S) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onLRClose	Support/IntegersSubsetMapping.h	/^    void onLRClose(const IntTy &Pt) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onLROpen	Support/IntegersSubsetMapping.h	/^    void onLROpen(const IntTy &Pt,$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onRAUW	ADT/ValueMap.h	/^  static void onRAUW(const ExtraDataT & \/*Data*\/, KeyT \/*Old*\/, KeyT \/*New*\/) {}$/;"	f	struct:llvm::ValueMapConfig
onRClose	Support/IntegersSubsetMapping.h	/^    void onRClose(const IntTy &Pt) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onROpen	Support/IntegersSubsetMapping.h	/^    void onROpen(const IntTy &Pt, SuccessorClass *S) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
oneDigitTag	Use.h	/^                  , oneDigitTag$/;"	e	enum:llvm::Use::PrevPtrTag
onlyAccessesArgPointees	Analysis/AliasAnalysis.h	/^  static bool onlyAccessesArgPointees(ModRefBehavior MRB) {$/;"	f	class:llvm::AliasAnalysis
onlyReadsMemory	Analysis/AliasAnalysis.h	/^  bool onlyReadsMemory(ImmutableCallSite CS) {$/;"	f	class:llvm::AliasAnalysis
onlyReadsMemory	Analysis/AliasAnalysis.h	/^  bool onlyReadsMemory(const Function *F) {$/;"	f	class:llvm::AliasAnalysis
onlyReadsMemory	Analysis/AliasAnalysis.h	/^  static bool onlyReadsMemory(ModRefBehavior MRB) {$/;"	f	class:llvm::AliasAnalysis
onlyReadsMemory	Function.h	/^  bool onlyReadsMemory() const {$/;"	f	class:llvm::Function
onlyReadsMemory	Instructions.h	/^  bool onlyReadsMemory() const {$/;"	f	class:llvm::CallInst
onlyReadsMemory	Instructions.h	/^  bool onlyReadsMemory() const {$/;"	f	class:llvm::InvokeInst
onlyReadsMemory	Support/CallSite.h	/^  bool onlyReadsMemory() const {$/;"	f	class:llvm::CallSiteBase
opDivByZero	ADT/APFloat.h	/^      opDivByZero   = 0x02,$/;"	e	enum:llvm::APFloat::opStatus
opInexact	ADT/APFloat.h	/^      opInexact     = 0x10$/;"	e	enum:llvm::APFloat::opStatus
opInfo	Support/Win64EH.h	/^            opInfo:4;$/;"	m	struct:llvm::Win64EH::UnwindCode::__anon137
opInvalidOp	ADT/APFloat.h	/^      opInvalidOp   = 0x01,$/;"	e	enum:llvm::APFloat::opStatus
opOK	ADT/APFloat.h	/^      opOK          = 0x00,$/;"	e	enum:llvm::APFloat::opStatus
opOverflow	ADT/APFloat.h	/^      opOverflow    = 0x04,$/;"	e	enum:llvm::APFloat::opStatus
opStatus	ADT/APFloat.h	/^    enum opStatus {$/;"	g	class:llvm::APFloat
opUnderflow	ADT/APFloat.h	/^      opUnderflow   = 0x08,$/;"	e	enum:llvm::APFloat::opStatus
op_begin	Analysis/ScalarEvolutionExpressions.h	/^    op_iterator op_begin() const { return Operands; }$/;"	f	class:llvm::SCEVNAryExpr
op_begin	CodeGen/SelectionDAGNodes.h	/^  op_iterator op_begin() const { return OperandList; }$/;"	f	class:llvm::SDNode
op_begin	OperandTraits.h	/^  static Use *op_begin(SubClass* U) {$/;"	f	struct:llvm::FixedNumOperandTraits
op_begin	OperandTraits.h	/^  static Use *op_begin(SubClass* U) {$/;"	f	struct:llvm::VariadicOperandTraits
op_begin	OperandTraits.h	/^  static Use *op_begin(User* U) {$/;"	f	struct:llvm::HungoffOperandTraits
op_begin	User.h	/^  inline const_op_iterator op_begin() const { return OperandList; }$/;"	f	class:llvm::User
op_begin	User.h	/^  inline op_iterator       op_begin()       { return OperandList; }$/;"	f	class:llvm::User
op_close_agent_ptr_t	ExecutionEngine/OProfileWrapper.h	/^  typedef  int           (*op_close_agent_ptr_t)(op_agent_t);$/;"	t	class:llvm::OProfileWrapper
op_end	Analysis/ScalarEvolutionExpressions.h	/^    op_iterator op_end() const { return Operands + NumOperands; }$/;"	f	class:llvm::SCEVNAryExpr
op_end	CodeGen/SelectionDAGNodes.h	/^  op_iterator op_end() const { return OperandList+NumOperands; }$/;"	f	class:llvm::SDNode
op_end	OperandTraits.h	/^  static Use *op_end(SubClass* U) {$/;"	f	struct:llvm::FixedNumOperandTraits
op_end	OperandTraits.h	/^  static Use *op_end(SubClass* U) {$/;"	f	struct:llvm::VariadicOperandTraits
op_end	OperandTraits.h	/^  static Use *op_end(User* U) {$/;"	f	struct:llvm::HungoffOperandTraits
op_end	User.h	/^  inline const_op_iterator op_end()   const { return OperandList+NumOperands; }$/;"	f	class:llvm::User
op_end	User.h	/^  inline op_iterator       op_end()         { return OperandList+NumOperands; }$/;"	f	class:llvm::User
op_equal	ADT/ilist.h	/^  static bool op_equal(NodeTy &L, NodeTy &R) { return L == R; }$/;"	f	class:llvm::iplist
op_iterator	Analysis/ScalarEvolutionExpressions.h	/^    typedef const SCEV *const *op_iterator;$/;"	t	class:llvm::SCEVNAryExpr
op_iterator	CodeGen/SelectionDAGNodes.h	/^  typedef SDUse* op_iterator;$/;"	t	class:llvm::SDNode
op_iterator	User.h	/^  typedef Use*       op_iterator;$/;"	t	class:llvm::User
op_less	ADT/ilist.h	/^  static bool op_less(NodeTy &L, NodeTy &R) { return L < R; }$/;"	f	class:llvm::iplist
op_major_version_ptr_t	ExecutionEngine/OProfileWrapper.h	/^  typedef  int           (*op_major_version_ptr_t)(void);$/;"	t	class:llvm::OProfileWrapper
op_open_agent_ptr_t	ExecutionEngine/OProfileWrapper.h	/^  typedef  op_agent_t    (*op_open_agent_ptr_t)();$/;"	t	class:llvm::OProfileWrapper
op_unload_native_code_ptr_t	ExecutionEngine/OProfileWrapper.h	/^  typedef  int           (*op_unload_native_code_ptr_t)(op_agent_t, uint64_t);$/;"	t	class:llvm::OProfileWrapper
op_write_debug_line_info_ptr_t	ExecutionEngine/OProfileWrapper.h	/^  typedef  int           (*op_write_debug_line_info_ptr_t)(op_agent_t,$/;"	t	class:llvm::OProfileWrapper
op_write_native_code_ptr_t	ExecutionEngine/OProfileWrapper.h	/^  typedef  int           (*op_write_native_code_ptr_t)(op_agent_t,$/;"	t	class:llvm::OProfileWrapper
opc	Target/TargetLowering.h	/^    unsigned     opc;         \/\/ target opcode$/;"	m	struct:llvm::TargetLowering::IntrinsicInfo
openInsnRange	CodeGen/LexicalScopes.h	/^  void openInsnRange(const MachineInstr *MI) {$/;"	f	class:llvm::LexicalScope
open_failed	Support/system_error.h	/^  open_failed             = 110, \/\/ ERROR_OPEN_FAILED,$/;"	e	enum:llvm::windows_error::_
operandFlags	MC/EDInstInfo.h	/^  uint8_t       operandFlags[EDIS_MAX_OPERANDS];$/;"	m	struct:llvm::EDInstInfo
operandOrders	MC/EDInstInfo.h	/^  const signed char operandOrders[EDIS_MAX_SYNTAXES][EDIS_MAX_OPERANDS];$/;"	m	struct:llvm::EDInstInfo
operandTypes	MC/EDInstInfo.h	/^  uint8_t       operandTypes[EDIS_MAX_OPERANDS];$/;"	m	struct:llvm::EDInstInfo
operands	OperandTraits.h	/^  static unsigned operands(const User *U) {$/;"	f	struct:llvm::HungoffOperandTraits
operands	OperandTraits.h	/^  static unsigned operands(const User *U) {$/;"	f	struct:llvm::OptionalOperandTraits
operands	OperandTraits.h	/^  static unsigned operands(const User *U) {$/;"	f	struct:llvm::VariadicOperandTraits
operands	OperandTraits.h	/^  static unsigned operands(const User*) {$/;"	f	struct:llvm::FixedNumOperandTraits
operands_begin	CodeGen/MachineInstr.h	/^  const_mop_iterator operands_begin() const { return Operands.begin(); }$/;"	f	class:llvm::MachineInstr
operands_begin	CodeGen/MachineInstr.h	/^  mop_iterator operands_begin() { return Operands.begin(); }$/;"	f	class:llvm::MachineInstr
operands_end	CodeGen/MachineInstr.h	/^  const_mop_iterator operands_end() const { return Operands.end(); }$/;"	f	class:llvm::MachineInstr
operands_end	CodeGen/MachineInstr.h	/^  mop_iterator operands_end() { return Operands.end(); }$/;"	f	class:llvm::MachineInstr
operation_canceled	Support/system_error.h	/^  operation_canceled                  = ECANCELED,$/;"	e	enum:llvm::errc::_
operation_in_progress	Support/system_error.h	/^  operation_in_progress               = EINPROGRESS,$/;"	e	enum:llvm::errc::_
operation_not_permitted	Support/system_error.h	/^  operation_not_permitted             = EPERM,$/;"	e	enum:llvm::errc::_
operation_not_supported	Support/system_error.h	/^  operation_not_supported             = EOPNOTSUPP,$/;"	e	enum:llvm::errc::_
operation_would_block	Support/system_error.h	/^  operation_would_block               = EWOULDBLOCK,$/;"	e	enum:llvm::errc::_
operator !	ADT/APInt.h	/^  bool operator!() const {$/;"	f	class:llvm::APInt
operator !	ADT/OwningPtr.h	/^  bool operator!() const { return Ptr == 0; }$/;"	f	class:llvm::OwningArrayPtr
operator !	ADT/OwningPtr.h	/^  bool operator!() const { return Ptr == 0; }$/;"	f	class:llvm::OwningPtr
operator !=	ADT/APInt.h	/^  bool operator!=(const APInt& RHS) const {$/;"	f	class:llvm::APInt
operator !=	ADT/APInt.h	/^  bool operator!=(uint64_t Val) const {$/;"	f	class:llvm::APInt
operator !=	ADT/APInt.h	/^inline bool operator!=(uint64_t V1, const APInt& V2) {$/;"	f	namespace:llvm
operator !=	ADT/APSInt.h	/^  inline bool operator!=(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator !=	ADT/APSInt.h	/^  inline bool operator!=(int64_t RHS) const {$/;"	f	class:llvm::APSInt
operator !=	ADT/APSInt.h	/^inline bool operator!=(int64_t V1, const APSInt& V2) {$/;"	f	namespace:llvm
operator !=	ADT/ArrayRef.h	/^  inline bool operator!=(ArrayRef<T> LHS, ArrayRef<T> RHS) {$/;"	f	namespace:llvm
operator !=	ADT/BitVector.h	/^  bool operator!=(const BitVector &RHS) const {$/;"	f	class:llvm::BitVector
operator !=	ADT/DenseMap.h	/^  bool operator!=(const ConstIterator &RHS) const {$/;"	f	class:llvm::DenseMapIterator
operator !=	ADT/DenseSet.h	/^    bool operator!=(const ConstIterator& X) const { return I != X.I; }$/;"	f	class:llvm::DenseSet::ConstIterator
operator !=	ADT/DenseSet.h	/^    bool operator!=(const Iterator& X) const { return I != X.I; }$/;"	f	class:llvm::DenseSet::Iterator
operator !=	ADT/DepthFirstIterator.h	/^  inline bool operator!=(const _Self& x) const { return !operator==(x); }$/;"	f	class:llvm::df_iterator
operator !=	ADT/EquivalenceClasses.h	/^    bool operator!=(const member_iterator &RHS) const {$/;"	f	class:llvm::EquivalenceClasses::member_iterator
operator !=	ADT/FoldingSet.h	/^  bool operator!=(const FoldingSetBucketIteratorImpl &RHS) const {$/;"	f	class:llvm::FoldingSetBucketIteratorImpl
operator !=	ADT/FoldingSet.h	/^  bool operator!=(const FoldingSetIteratorImpl &RHS) const {$/;"	f	class:llvm::FoldingSetIteratorImpl
operator !=	ADT/FoldingSet.h	/^  bool operator!=(const SelfT &RHS) const {$/;"	f	class:llvm::FoldingSetVectorIterator
operator !=	ADT/Hashing.h	/^  friend bool operator!=(const hash_code &lhs, const hash_code &rhs) {$/;"	f	class:llvm::hash_code
operator !=	ADT/ImmutableList.h	/^    bool operator!=(const iterator& I) const { return L != I.L; }$/;"	f	class:llvm::ImmutableList::iterator
operator !=	ADT/ImmutableMap.h	/^    bool operator!=(const iterator& RHS) const { return RHS.itr != itr; }$/;"	f	class:llvm::ImmutableMap::iterator
operator !=	ADT/ImmutableMap.h	/^    bool operator!=(const iterator& RHS) const { return RHS.itr != itr; }$/;"	f	class:llvm::ImmutableMapRef::iterator
operator !=	ADT/ImmutableMap.h	/^  bool operator!=(const ImmutableMap &RHS) const {$/;"	f	class:llvm::ImmutableMap
operator !=	ADT/ImmutableMap.h	/^  bool operator!=(const ImmutableMapRef &RHS) const {$/;"	f	class:llvm::ImmutableMapRef
operator !=	ADT/ImmutableSet.h	/^    inline bool operator!=(const iterator& RHS) const { return RHS.itr != itr; }$/;"	f	class:llvm::ImmutableSet::iterator
operator !=	ADT/ImmutableSet.h	/^    inline bool operator!=(const iterator& RHS) const { return RHS.itr != itr; }$/;"	f	class:llvm::ImmutableSetRef::iterator
operator !=	ADT/ImmutableSet.h	/^  bool operator!=(const ImmutableSet &RHS) const {$/;"	f	class:llvm::ImmutableSet
operator !=	ADT/ImmutableSet.h	/^  bool operator!=(const ImmutableSetRef &RHS) const {$/;"	f	class:llvm::ImmutableSetRef
operator !=	ADT/ImmutableSet.h	/^  inline bool operator!=(const _Self& x) const { return !operator==(x); }$/;"	f	class:llvm::ImutAVLTreeGenericIterator
operator !=	ADT/ImmutableSet.h	/^  inline bool operator!=(const _Self& x) const { return !operator==(x); }$/;"	f	class:llvm::ImutAVLTreeInOrderIterator
operator !=	ADT/IntervalMap.h	/^  bool operator!=(const NodeRef &RHS) const {$/;"	f	class:llvm::IntervalMapImpl::NodeRef
operator !=	ADT/IntervalMap.h	/^  bool operator!=(const const_iterator &RHS) const {$/;"	f	class:llvm::IntervalMap::const_iterator
operator !=	ADT/IntrusiveRefCntPtr.h	/^  inline bool operator!=(T* A,$/;"	f	namespace:llvm
operator !=	ADT/IntrusiveRefCntPtr.h	/^  inline bool operator!=(const IntrusiveRefCntPtr<T>& A,$/;"	f	namespace:llvm
operator !=	ADT/PackedVector.h	/^  bool operator!=(const PackedVector &RHS) const {$/;"	f	class:llvm::PackedVector
operator !=	ADT/PointerIntPair.h	/^  bool operator!=(const PointerIntPair &RHS) const {return Value != RHS.Value;}$/;"	f	class:llvm::PointerIntPair
operator !=	ADT/PostOrderIterator.h	/^  inline bool operator!=(const _Self& x) const { return !operator==(x); }$/;"	f	class:llvm::po_iterator
operator !=	ADT/SCCIterator.h	/^  inline bool operator!=(const _Self& x) const { return !operator==(x); }$/;"	f	class:llvm::scc_iterator
operator !=	ADT/STLExtras.h	/^  inline bool operator!=(const _Self &X) const { return !operator==(X); }$/;"	f	class:llvm::mapped_iterator
operator !=	ADT/ScopedHashTable.h	/^  bool operator!=(const ScopedHashTableIterator &RHS) const {$/;"	f	class:llvm::ScopedHashTableIterator
operator !=	ADT/SetVector.h	/^  bool operator!=(const SetVector &that) const {$/;"	f	class:llvm::SetVector
operator !=	ADT/SmallBitVector.h	/^  bool operator!=(const SmallBitVector &RHS) const {$/;"	f	class:llvm::SmallBitVector
operator !=	ADT/SmallPtrSet.h	/^  bool operator!=(const SmallPtrSetIteratorImpl &RHS) const {$/;"	f	class:llvm::SmallPtrSetIteratorImpl
operator !=	ADT/SmallVector.h	/^  bool operator!=(const SmallVectorImpl &RHS) const {$/;"	f	class:llvm::SmallVectorImpl
operator !=	ADT/SparseBitVector.h	/^    bool operator!=(const SparseBitVectorIterator &RHS) const {$/;"	f	class:llvm::SparseBitVector::SparseBitVectorIterator
operator !=	ADT/SparseBitVector.h	/^  bool operator!=(const SparseBitVector &RHS) const {$/;"	f	class:llvm::SparseBitVector
operator !=	ADT/SparseBitVector.h	/^  bool operator!=(const SparseBitVectorElement &RHS) const {$/;"	f	struct:llvm::SparseBitVectorElement
operator !=	ADT/StringMap.h	/^  bool operator!=(const StringMapConstIterator &RHS) const {$/;"	f	class:llvm::StringMapConstIterator
operator !=	ADT/StringRef.h	/^  inline bool operator!=(StringRef LHS, StringRef RHS) {$/;"	f	namespace:llvm
operator !=	ADT/ValueMap.h	/^  bool operator!=(const ValueMapConstIterator &RHS) const {$/;"	f	class:llvm::ValueMapConstIterator
operator !=	ADT/ValueMap.h	/^  bool operator!=(const ValueMapIterator &RHS) const {$/;"	f	class:llvm::ValueMapIterator
operator !=	ADT/ilist.h	/^  bool operator!=(const ilist_iterator &RHS) const {$/;"	f	class:llvm::ilist_iterator
operator !=	ADT/ilist.h	/^bool operator!=(T* LHS, const ilist_iterator<T> &RHS) {$/;"	f	namespace:llvm
operator !=	ADT/ilist.h	/^bool operator!=(const T* LHS, const ilist_iterator<const T> &RHS) {$/;"	f	namespace:llvm
operator !=	Analysis/AliasSetTracker.h	/^    bool operator!=(const iterator& x) const { return !operator==(x); }$/;"	f	class:llvm::AliasSet::iterator
operator !=	Analysis/ConstantsScanner.h	/^  inline bool operator!=(const _Self& x) const { return !operator==(x); }$/;"	f	class:llvm::constant_iterator
operator !=	Analysis/IntervalIterator.h	/^  inline bool operator!=(const _Self& x) const { return !operator==(x); }$/;"	f	class:llvm::IntervalIterator
operator !=	Analysis/MemoryDependenceAnalysis.h	/^    bool operator!=(const MemDepResult &M) const { return Value != M.Value; }$/;"	f	class:llvm::MemDepResult
operator !=	Analysis/RegionIterator.h	/^  inline bool operator!=(const Self& x) const { return !operator==(x); }$/;"	f	class:llvm::RNSuccIterator
operator !=	Attributes.h	/^  bool operator!=(const AttrBuilder &B) {$/;"	f	class:llvm::AttrBuilder
operator !=	Attributes.h	/^  bool operator!=(const AttrListPtr &RHS) const$/;"	f	class:llvm::AttrListPtr
operator !=	Attributes.h	/^  bool operator!=(const Attributes &A) const {$/;"	f	class:llvm::Attributes
operator !=	CodeGen/MachineBasicBlock.h	/^    bool operator!=(const bundle_iterator &x) const {$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
operator !=	CodeGen/MachineRegisterInfo.h	/^    bool operator!=(const defusechain_iterator &x) const {$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
operator !=	CodeGen/ScheduleDAG.h	/^    bool operator!=(const SDep &Other) const {$/;"	f	class:llvm::SDep
operator !=	CodeGen/ScheduleDAG.h	/^    bool operator!=(const SUnitIterator& x) const { return !operator==(x); }$/;"	f	class:llvm::SUnitIterator
operator !=	CodeGen/SelectionDAGNodes.h	/^    bool operator!=(const use_iterator &x) const {$/;"	f	class:llvm::SDNode::use_iterator
operator !=	CodeGen/SelectionDAGNodes.h	/^  bool operator!=(const SDNodeIterator& x) const { return !operator==(x); }$/;"	f	class:llvm::SDNodeIterator
operator !=	CodeGen/SelectionDAGNodes.h	/^  bool operator!=(const SDValue &O) const {$/;"	f	class:llvm::SDValue
operator !=	CodeGen/SelectionDAGNodes.h	/^  bool operator!=(const SDValue &V) const {$/;"	f	class:llvm::SDUse
operator !=	CodeGen/SlotIndexes.h	/^    bool operator!=(SlotIndex other) const {$/;"	f	class:llvm::SlotIndex
operator !=	CodeGen/ValueTypes.h	/^    bool operator!=(EVT VT) const {$/;"	f	struct:llvm::EVT
operator !=	CodeGen/ValueTypes.h	/^    bool operator!=(const MVT& S) const { return SimpleTy != S.SimpleTy; }$/;"	f	class:llvm::MVT
operator !=	DebugInfo/DIContext.h	/^  bool operator!=(const DILineInfo &RHS) const {$/;"	f	class:llvm::DILineInfo
operator !=	Instructions.h	/^    bool operator!=(const Self& RHS) const {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator !=	Object/Archive.h	/^    bool operator!=(const child_iterator &other) const {$/;"	f	class:llvm::object::Archive::child_iterator
operator !=	Object/Archive.h	/^    bool operator!=(const symbol_iterator &other) const {$/;"	f	class:llvm::object::Archive::symbol_iterator
operator !=	Object/ELF.h	/^    bool operator !=(const ELFRelocationIterator &Other) {$/;"	f	class:llvm::object::ELFObjectFile::ELFRelocationIterator
operator !=	Object/ObjectFile.h	/^  bool operator!=(const content_iterator &other) const {$/;"	f	class:llvm::object::content_iterator
operator !=	Support/BranchProbability.h	/^  bool operator!=(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator !=	Support/CFG.h	/^  inline bool operator!=(const Self& x) const { return !operator==(x); }$/;"	f	class:llvm::PredIterator
operator !=	Support/CFG.h	/^  inline bool operator!=(const Self& x) const { return !operator==(x); }$/;"	f	class:llvm::SuccIterator
operator !=	Support/CallSite.h	/^  bool operator!=(const CallSite &CS) const { return I != CS.I; }$/;"	f	class:llvm::CallSite
operator !=	Support/ConstantRange.h	/^  bool operator!=(const ConstantRange &CR) const {$/;"	f	class:llvm::ConstantRange
operator !=	Support/DebugLoc.h	/^    bool operator!=(const DebugLoc &DL) const { return !(*this == DL); }$/;"	f	class:llvm::DebugLoc
operator !=	Support/FileSystem.h	/^  bool operator!=(const directory_entry& rhs) const { return !(*this == rhs); }$/;"	f	class:llvm::sys::fs::directory_entry
operator !=	Support/FileSystem.h	/^  bool operator!=(const directory_iterator &RHS) const {$/;"	f	class:llvm::sys::fs::directory_iterator
operator !=	Support/FileSystem.h	/^  bool operator!=(const recursive_directory_iterator &RHS) const {$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
operator !=	Support/GetElementPtrTypeIterator.h	/^    bool operator!=(const generic_gep_type_iterator& x) const {$/;"	f	class:llvm::generic_gep_type_iterator
operator !=	Support/InstIterator.h	/^  inline bool operator!=(const InstIterator& y) const {$/;"	f	class:llvm::InstIterator
operator !=	Support/IntegersSubset.h	/^    bool operator!=(const self &RHS) const {$/;"	f	class:llvm::IntRange
operator !=	Support/PathV1.h	/^      bool operator!=(const Path &that) const { return !(*this == that); }$/;"	f	class:llvm::sys::Path
operator !=	Support/Registry.h	/^      bool operator!=(const iterator &That) const { return Cur != That.Cur; }$/;"	f	class:llvm::Registry::iterator
operator !=	Support/SMLoc.h	/^  bool operator!=(const SMLoc &RHS) const { return RHS.Ptr != Ptr; }$/;"	f	class:llvm::SMLoc
operator !=	Support/StringPool.h	/^    inline bool operator!=(const PooledStringPtr &That) { return S != That.S; }$/;"	f	class:llvm::PooledStringPtr
operator !=	Support/TargetRegistry.h	/^      bool operator!=(const iterator &x) const {$/;"	f	class:llvm::TargetRegistry::iterator
operator !=	Support/TimeValue.h	/^    int operator != (const TimeValue &that) const { return !(*this == that); }$/;"	f	class:llvm::sys::TimeValue
operator !=	Support/YAMLParser.h	/^  bool operator !=(const basic_collection_iterator &Other) const {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator !=	Support/YAMLParser.h	/^  bool operator !=(const document_iterator &Other) {$/;"	f	class:llvm::yaml::document_iterator
operator !=	Support/system_error.h	/^  bool operator!=(const error_category& _rhs) const {return !(*this == _rhs);}$/;"	f	class:llvm::error_category
operator !=	Support/system_error.h	/^inline bool operator!=(const error_code& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator !=	Support/system_error.h	/^inline bool operator!=(const error_code& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator !=	Support/system_error.h	/^inline bool operator!=(const error_condition& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator !=	Support/system_error.h	/^inline bool operator!=(const error_condition& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator !=	Use.h	/^  bool operator!=(const _Self &x) const {$/;"	f	class:llvm::value_use_iterator
operator !=	User.h	/^    bool operator!=(const value_op_iterator &x) const {$/;"	f	class:llvm::User::value_op_iterator
operator %	ADT/APSInt.h	/^  APSInt operator%(const APSInt &RHS) const {$/;"	f	class:llvm::APSInt
operator %=	ADT/APSInt.h	/^  const APSInt &operator%=(const APSInt &RHS) {$/;"	f	class:llvm::APSInt
operator &	ADT/APInt.h	/^  APInt operator&(const APInt& RHS) const {$/;"	f	class:llvm::APInt
operator &	ADT/APSInt.h	/^  APSInt operator&(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator &	ADT/SmallBitVector.h	/^operator&(const SmallBitVector &LHS, const SmallBitVector &RHS) {$/;"	f	namespace:llvm
operator &	ADT/SparseBitVector.h	/^operator&(const SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:llvm
operator &	Support/FileSystem.h	/^inline perms operator&(perms l , perms r) {$/;"	f	namespace:llvm::sys::fs
operator &=	ADT/APSInt.h	/^  APSInt& operator&=(const APSInt& RHS) {$/;"	f	class:llvm::APSInt
operator &=	ADT/BitVector.h	/^  BitVector &operator&=(const BitVector &RHS) {$/;"	f	class:llvm::BitVector
operator &=	ADT/SmallBitVector.h	/^  SmallBitVector &operator&=(const SmallBitVector &RHS) {$/;"	f	class:llvm::SmallBitVector
operator &=	ADT/SparseBitVector.h	/^  bool operator&=(const SparseBitVector &RHS) {$/;"	f	class:llvm::SparseBitVector
operator &=	ADT/SparseBitVector.h	/^inline bool operator &=(SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:llvm
operator &=	ADT/SparseBitVector.h	/^inline bool operator &=(SparseBitVector<ElementSize> *LHS,$/;"	f	namespace:llvm
operator &=	Support/FileSystem.h	/^inline perms &operator&=(perms &l, perms r) {$/;"	f	namespace:llvm::sys::fs
operator ()	ADT/ImmutableMap.h	/^    void operator()(value_type_ref V) { C(V.first,V.second); }$/;"	f	struct:llvm::ImmutableMap::CBWrapper
operator ()	ADT/ImmutableMap.h	/^    void operator()(value_type_ref V) { C(V.first,V.second); }$/;"	f	struct:llvm::ImmutableMap::CBWrapperRef
operator ()	ADT/STLExtras.h	/^  Ty &operator()(Ty &self) const {$/;"	f	struct:llvm::identity
operator ()	ADT/STLExtras.h	/^  bool operator()(const Ty* left, const Ty* right) const {$/;"	f	struct:llvm::greater_ptr
operator ()	ADT/STLExtras.h	/^  bool operator()(const Ty* left, const Ty* right) const {$/;"	f	struct:llvm::less_ptr
operator ()	ADT/STLExtras.h	/^  const Ty &operator()(const Ty &self) const {$/;"	f	struct:llvm::identity
operator ()	ADT/SetVector.h	/^    bool operator()(argument_type Arg) {$/;"	f	class:llvm::SetVector::TestAndEraseFromSet
operator ()	ADT/SparseSet.h	/^  unsigned operator()(const KeyT &Key) const {$/;"	f	struct:llvm::SparseSetValFunctor
operator ()	ADT/SparseSet.h	/^  unsigned operator()(const ValueT &Val) const {$/;"	f	struct:llvm::SparseSetValFunctor
operator ()	ADT/VariadicFunction.h	/^  ResultT operator()() const {$/;"	f	struct:llvm::VariadicFunction
operator ()	ADT/VariadicFunction.h	/^  ResultT operator()(Param0T P0) const {$/;"	f	struct:llvm::VariadicFunction1
operator ()	ADT/VariadicFunction.h	/^  ResultT operator()(Param0T P0, Param1T P1) const {$/;"	f	struct:llvm::VariadicFunction2
operator ()	ADT/VariadicFunction.h	/^  ResultT operator()(Param0T P0, Param1T P1, Param2T P2) const {$/;"	f	struct:llvm::VariadicFunction3
operator ()	CodeGen/MachineBasicBlock.h	/^  unsigned operator()(const MachineBasicBlock *MBB) const {$/;"	f	struct:llvm::MBB2NumberFunctor
operator ()	CodeGen/PBQP/Graph.h	/^    bool operator()(Graph::ConstEdgeItr e1, Graph::ConstEdgeItr e2) const {$/;"	f	class:PBQP::EdgeItrCompartor
operator ()	CodeGen/PBQP/Graph.h	/^    bool operator()(Graph::ConstNodeItr n1, Graph::ConstNodeItr n2) const {$/;"	f	class:PBQP::NodeItrComparator
operator ()	CodeGen/PBQP/Graph.h	/^    bool operator()(Graph::EdgeItr e1, Graph::EdgeItr e2) const {$/;"	f	class:PBQP::EdgeItrCompartor
operator ()	CodeGen/PBQP/Graph.h	/^    bool operator()(Graph::NodeItr n1, Graph::NodeItr n2) const {$/;"	f	class:PBQP::NodeItrComparator
operator ()	CodeGen/PBQP/Heuristics/Briggs.h	/^        bool operator()(Graph::NodeItr n1Itr, Graph::NodeItr n2Itr) const {$/;"	f	class:PBQP::Heuristics::Briggs::LinkDegreeComparator
operator ()	CodeGen/PBQP/Heuristics/Briggs.h	/^        bool operator()(Graph::NodeItr n1Itr, Graph::NodeItr n2Itr) const {$/;"	f	class:PBQP::Heuristics::Briggs::SpillCostComparator
operator ()	CodeGen/SlotIndexes.h	/^    bool operator()(const IdxMBBPair &LHS, const IdxMBBPair &RHS) const {$/;"	f	struct:llvm::Idx2MBBCompare
operator ()	CodeGen/ValueTypes.h	/^      bool operator()(EVT L, EVT R) const {$/;"	f	struct:llvm::EVT::compareRawBits
operator ()	Support/IntegersSubsetMapping.h	/^    bool operator()(const Cluster &C1, const Cluster &C2) {$/;"	f	struct:llvm::IntegersSubsetMapping::ClustersCmp
operator ()	Support/PassNameParser.h	/^  bool operator()(const PassInfo &P) const {$/;"	f	class:llvm::PassArgFilter
operator ()	TableGen/Record.h	/^  bool operator()(const Record *LHS, const Record *RHS) const {$/;"	f	struct:llvm::LessRecordByID
operator ()	TableGen/Record.h	/^  bool operator()(const Record *Rec1, const Record *Rec2) const {$/;"	f	struct:llvm::LessRecord
operator ()	TableGen/Record.h	/^  bool operator()(const Record *Rec1, const Record *Rec2) const {$/;"	f	struct:llvm::LessRecordFieldName
operator ()	Target/TargetRegisterInfo.h	/^  unsigned operator()(unsigned Reg) const {$/;"	f	struct:llvm::VirtReg2IndexFunctor
operator *	ADT/APSInt.h	/^  APSInt operator*(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator *	ADT/DenseMap.h	/^  reference operator*() const {$/;"	f	class:llvm::DenseMapIterator
operator *	ADT/DenseSet.h	/^    ValueT& operator*() { return I->first; }$/;"	f	class:llvm::DenseSet::Iterator
operator *	ADT/DenseSet.h	/^    const ValueT& operator*() { return I->first; }$/;"	f	class:llvm::DenseSet::ConstIterator
operator *	ADT/DepthFirstIterator.h	/^  inline pointer operator*() const {$/;"	f	class:llvm::df_iterator
operator *	ADT/EquivalenceClasses.h	/^    reference operator*() const {$/;"	f	class:llvm::EquivalenceClasses::member_iterator
operator *	ADT/FoldingSet.h	/^  T &operator*() const { return **Iterator; }$/;"	f	class:llvm::FoldingSetVectorIterator
operator *	ADT/FoldingSet.h	/^  T &operator*() const { return *static_cast<T*>(Ptr); }$/;"	f	class:llvm::FoldingSetBucketIterator
operator *	ADT/FoldingSet.h	/^  T &operator*() const {$/;"	f	class:llvm::FoldingSetIterator
operator *	ADT/ImmutableList.h	/^    const value_type& operator*() const { return L->getHead(); }$/;"	f	class:llvm::ImmutableList::iterator
operator *	ADT/ImmutableMap.h	/^    value_type_ref operator*() const { return itr->getValue(); }$/;"	f	class:llvm::ImmutableMap::iterator
operator *	ADT/ImmutableMap.h	/^    value_type_ref operator*() const { return itr->getValue(); }$/;"	f	class:llvm::ImmutableMapRef::iterator
operator *	ADT/ImmutableSet.h	/^    inline value_type_ref operator*() const { return itr->getValue(); }$/;"	f	class:llvm::ImmutableSet::iterator
operator *	ADT/ImmutableSet.h	/^    inline value_type_ref operator*() const { return itr->getValue(); }$/;"	f	class:llvm::ImmutableSetRef::iterator
operator *	ADT/ImmutableSet.h	/^  TreeTy* operator*() const {$/;"	f	class:llvm::ImutAVLTreeGenericIterator
operator *	ADT/ImmutableSet.h	/^  inline TreeTy* operator*() const { return *InternalItr; }$/;"	f	class:llvm::ImutAVLTreeInOrderIterator
operator *	ADT/InMemoryStruct.h	/^  const_reference operator*() const {$/;"	f	class:llvm::InMemoryStruct
operator *	ADT/InMemoryStruct.h	/^  reference operator*() {$/;"	f	class:llvm::InMemoryStruct
operator *	ADT/IntervalMap.h	/^  const ValT &operator*() const { return value(); }$/;"	f	class:llvm::IntervalMap::const_iterator
operator *	ADT/IntrusiveRefCntPtr.h	/^    T& operator*() const { return *Obj; }$/;"	f	class:llvm::IntrusiveRefCntPtr
operator *	ADT/Optional.h	/^  const T& operator*() const { assert(hasVal); return x; }$/;"	f	class:llvm::Optional
operator *	ADT/OwningPtr.h	/^  T &operator*() const {$/;"	f	class:llvm::OwningPtr
operator *	ADT/PostOrderIterator.h	/^  inline pointer operator*() const {$/;"	f	class:llvm::po_iterator
operator *	ADT/SCCIterator.h	/^  inline SccTy &operator*() {$/;"	f	class:llvm::scc_iterator
operator *	ADT/SCCIterator.h	/^  inline const SccTy &operator*() const {$/;"	f	class:llvm::scc_iterator
operator *	ADT/STLExtras.h	/^  inline value_type operator*() const {   \/\/ All this work to do this$/;"	f	class:llvm::mapped_iterator
operator *	ADT/ScopedHashTable.h	/^  V &operator*() const {$/;"	f	class:llvm::ScopedHashTableIterator
operator *	ADT/SmallPtrSet.h	/^  const PtrTy operator*() const {$/;"	f	class:llvm::SmallPtrSetIterator
operator *	ADT/SparseBitVector.h	/^    unsigned operator*() const {$/;"	f	class:llvm::SparseBitVector::SparseBitVectorIterator
operator *	ADT/StringMap.h	/^  StringMapEntry<ValueTy> &operator*() const {$/;"	f	class:llvm::StringMapIterator
operator *	ADT/StringMap.h	/^  const value_type &operator*() const {$/;"	f	class:llvm::StringMapConstIterator
operator *	ADT/ValueMap.h	/^  ValueTypeProxy operator*() const {$/;"	f	class:llvm::ValueMapConstIterator
operator *	ADT/ValueMap.h	/^  ValueTypeProxy operator*() const {$/;"	f	class:llvm::ValueMapIterator
operator *	ADT/ilist.h	/^  reference operator*() const {$/;"	f	class:llvm::ilist_iterator
operator *	Analysis/AliasSetTracker.h	/^    value_type &operator*() const {$/;"	f	class:llvm::AliasSet::iterator
operator *	Analysis/ConstantsScanner.h	/^  inline pointer operator*() const {$/;"	f	class:llvm::constant_iterator
operator *	Analysis/IntervalIterator.h	/^  inline       Interval *operator*()       { return IntStack.back().first; }$/;"	f	class:llvm::IntervalIterator
operator *	Analysis/IntervalIterator.h	/^  inline const Interval *operator*() const { return IntStack.back().first; }$/;"	f	class:llvm::IntervalIterator
operator *	Analysis/RegionInfo.h	/^    BasicBlock *operator*() const {$/;"	f	class:llvm::Region::block_iterator_wrapper
operator *	Analysis/RegionIterator.h	/^  inline pointer operator*() const {$/;"	f	class:llvm::RNSuccIterator
operator *	CodeGen/MachineBasicBlock.h	/^    Ty &operator*() const { return *MII; }$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
operator *	CodeGen/MachineInstrBundle.h	/^  MachineOperand &operator* () const { return deref(); }$/;"	f	class:llvm::MIBundleOperands
operator *	CodeGen/MachineInstrBundle.h	/^  MachineOperand &operator* () const { return deref(); }$/;"	f	class:llvm::MIOperands
operator *	CodeGen/MachineInstrBundle.h	/^  const MachineOperand &operator* () const { return deref(); }$/;"	f	class:llvm::ConstMIBundleOperands
operator *	CodeGen/MachineInstrBundle.h	/^  const MachineOperand &operator* () const { return deref(); }$/;"	f	class:llvm::ConstMIOperands
operator *	CodeGen/MachineRegisterInfo.h	/^    MachineInstr &operator*() const {$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
operator *	CodeGen/ScheduleDAG.h	/^    pointer operator*() const {$/;"	f	class:llvm::SUnitIterator
operator *	CodeGen/SelectionDAGNodes.h	/^    SDNode *operator*() const {$/;"	f	class:llvm::SDNode::use_iterator
operator *	CodeGen/SelectionDAGNodes.h	/^  pointer operator*() const {$/;"	f	class:llvm::SDNodeIterator
operator *	MC/MCRegisterInfo.h	/^    unsigned operator*() const { return Val; }$/;"	f	class:llvm::MCRegisterInfo::DiffListIterator
operator *	MC/MCRegisterInfo.h	/^  unsigned operator*() const {$/;"	f	class:llvm::MCRegUnitRootIterator
operator *	Object/ELF.h	/^    reference operator *() {$/;"	f	class:llvm::object::ELFObjectFile::ELFRelocationIterator
operator *	Object/ObjectFile.h	/^  const content_type &operator*() const {$/;"	f	class:llvm::object::content_iterator
operator *	Support/CFG.h	/^  inline pointer operator*() const { return Term->getSuccessor(idx); }$/;"	f	class:llvm::SuccIterator
operator *	Support/CFG.h	/^  inline pointer operator*() const {$/;"	f	class:llvm::PredIterator
operator *	Support/FileSystem.h	/^  const directory_entry &operator*() const { return *State->Stack.top(); }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
operator *	Support/FileSystem.h	/^  const directory_entry &operator*() const { return State->CurrentEntry; }$/;"	f	class:llvm::sys::fs::directory_iterator
operator *	Support/GetElementPtrTypeIterator.h	/^    Type *operator*() const {$/;"	f	class:llvm::generic_gep_type_iterator
operator *	Support/InstIterator.h	/^  inline reference operator*()  const { return *BI; }$/;"	f	class:llvm::InstIterator
operator *	Support/ManagedStatic.h	/^  C &operator*() {$/;"	f	class:llvm::ManagedStatic
operator *	Support/ManagedStatic.h	/^  const C &operator*() const {$/;"	f	class:llvm::ManagedStatic
operator *	Support/PathV2.h	/^  reference operator*() const { return Component; }$/;"	f	class:llvm::sys::path::const_iterator
operator *	Support/Registry.h	/^      const entry &operator*() const { return Cur->Val; }$/;"	f	class:llvm::Registry::iterator
operator *	Support/StringPool.h	/^    inline const char *operator*() const { return begin(); }$/;"	f	class:llvm::PooledStringPtr
operator *	Support/TargetRegistry.h	/^      const Target &operator*() const {$/;"	f	class:llvm::TargetRegistry::iterator
operator *	Support/ValueHandle.h	/^  Value &operator*() const { return *getValPtr(); }$/;"	f	class:llvm::ValueHandleBase
operator *	Support/ValueHandle.h	/^  ValueTy &operator*() const { return *getValPtr(); }$/;"	f	class:llvm::AssertingVH
operator *	Support/ValueHandle.h	/^  ValueTy &operator*() const { return *getValPtr(); }$/;"	f	class:llvm::TrackingVH
operator *	Support/YAMLParser.h	/^  Document &operator *() {$/;"	f	class:llvm::yaml::document_iterator
operator *	Support/YAMLParser.h	/^  ValueT &operator *() const {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator *	Use.h	/^  UserTy *operator*() const {$/;"	f	class:llvm::value_use_iterator
operator *	User.h	/^    Value *operator*() const {$/;"	f	class:llvm::User::value_op_iterator
operator *=	ADT/APSInt.h	/^  APSInt& operator*=(const APSInt& RHS) {$/;"	f	class:llvm::APSInt
operator *=	ADT/Statistic.h	/^  const Statistic &operator*=(const unsigned &V) {$/;"	f	class:llvm::Statistic
operator +	ADT/APInt.h	/^  APInt operator+(uint64_t RHS) const {$/;"	f	class:llvm::APInt
operator +	ADT/APSInt.h	/^  APSInt operator+(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator +	ADT/STLExtras.h	/^  _Self  operator+    (difference_type n) const {$/;"	f	class:llvm::mapped_iterator
operator +	ADT/STLExtras.h	/^operator+(typename mapped_iterator<_Iterator, Func>::difference_type N,$/;"	f	namespace:llvm
operator +	ADT/Twine.h	/^  inline Twine operator+(const StringRef &LHS, const char *RHS) {$/;"	f	namespace:llvm
operator +	ADT/Twine.h	/^  inline Twine operator+(const Twine &LHS, const Twine &RHS) {$/;"	f	namespace:llvm
operator +	ADT/Twine.h	/^  inline Twine operator+(const char *LHS, const StringRef &RHS) {$/;"	f	namespace:llvm
operator +	Support/CFG.h	/^  inline Self operator+(int Right) {$/;"	f	class:llvm::SuccIterator
operator +	Support/TimeValue.h	/^inline TimeValue operator + (const TimeValue &tv1, const TimeValue &tv2) {$/;"	f	namespace:llvm::sys
operator ++	ADT/APInt.h	/^  const APInt operator++(int) {$/;"	f	class:llvm::APInt
operator ++	ADT/APSInt.h	/^  APSInt operator++(int) {$/;"	f	class:llvm::APSInt
operator ++	ADT/APSInt.h	/^  APSInt& operator++() {$/;"	f	class:llvm::APSInt
operator ++	ADT/DenseMap.h	/^  DenseMapIterator operator++(int) {  \/\/ Postincrement$/;"	f	class:llvm::DenseMapIterator
operator ++	ADT/DenseMap.h	/^  inline DenseMapIterator& operator++() {  \/\/ Preincrement$/;"	f	class:llvm::DenseMapIterator
operator ++	ADT/DenseSet.h	/^    ConstIterator& operator++() { ++I; return *this; }$/;"	f	class:llvm::DenseSet::ConstIterator
operator ++	ADT/DenseSet.h	/^    Iterator& operator++() { ++I; return *this; }$/;"	f	class:llvm::DenseSet::Iterator
operator ++	ADT/DepthFirstIterator.h	/^  inline _Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::df_iterator
operator ++	ADT/DepthFirstIterator.h	/^  inline _Self& operator++() {   \/\/ Preincrement$/;"	f	class:llvm::df_iterator
operator ++	ADT/EquivalenceClasses.h	/^    member_iterator &operator++() {$/;"	f	class:llvm::EquivalenceClasses::member_iterator
operator ++	ADT/EquivalenceClasses.h	/^    member_iterator operator++(int) {    \/\/ postincrement operators.$/;"	f	class:llvm::EquivalenceClasses::member_iterator
operator ++	ADT/FoldingSet.h	/^  FoldingSetBucketIterator operator++(int) {      \/\/ Postincrement$/;"	f	class:llvm::FoldingSetBucketIterator
operator ++	ADT/FoldingSet.h	/^  FoldingSetIterator operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::FoldingSetIterator
operator ++	ADT/FoldingSet.h	/^  SelfT operator++(int) {$/;"	f	class:llvm::FoldingSetVectorIterator
operator ++	ADT/FoldingSet.h	/^  inline FoldingSetBucketIterator &operator++() { \/\/ Preincrement$/;"	f	class:llvm::FoldingSetBucketIterator
operator ++	ADT/FoldingSet.h	/^  inline FoldingSetIterator &operator++() {          \/\/ Preincrement$/;"	f	class:llvm::FoldingSetIterator
operator ++	ADT/FoldingSet.h	/^  inline SelfT &operator++() {$/;"	f	class:llvm::FoldingSetVectorIterator
operator ++	ADT/ImmutableList.h	/^    iterator& operator++() { L = L->getTail(); return *this; }$/;"	f	class:llvm::ImmutableList::iterator
operator ++	ADT/ImmutableMap.h	/^    iterator  operator++(int) { iterator tmp(*this); ++itr; return tmp; }$/;"	f	class:llvm::ImmutableMap::iterator
operator ++	ADT/ImmutableMap.h	/^    iterator  operator++(int) { iterator tmp(*this); ++itr; return tmp; }$/;"	f	class:llvm::ImmutableMapRef::iterator
operator ++	ADT/ImmutableMap.h	/^    iterator& operator++() { ++itr; return *this; }$/;"	f	class:llvm::ImmutableMap::iterator
operator ++	ADT/ImmutableMap.h	/^    iterator& operator++() { ++itr; return *this; }$/;"	f	class:llvm::ImmutableMapRef::iterator
operator ++	ADT/ImmutableSet.h	/^    inline iterator  operator++(int) { iterator tmp(*this); ++itr; return tmp; }$/;"	f	class:llvm::ImmutableSet::iterator
operator ++	ADT/ImmutableSet.h	/^    inline iterator  operator++(int) { iterator tmp(*this); ++itr; return tmp; }$/;"	f	class:llvm::ImmutableSetRef::iterator
operator ++	ADT/ImmutableSet.h	/^    inline iterator& operator++() { ++itr; return *this; }$/;"	f	class:llvm::ImmutableSet::iterator
operator ++	ADT/ImmutableSet.h	/^    inline iterator& operator++() { ++itr; return *this; }$/;"	f	class:llvm::ImmutableSetRef::iterator
operator ++	ADT/ImmutableSet.h	/^  _Self& operator++() {$/;"	f	class:llvm::ImutAVLTreeGenericIterator
operator ++	ADT/ImmutableSet.h	/^  inline _Self& operator++() {$/;"	f	class:llvm::ImutAVLTreeInOrderIterator
operator ++	ADT/IntervalMap.h	/^  IntervalMapOverlaps &operator++() {$/;"	f	class:llvm::IntervalMapOverlaps
operator ++	ADT/IntervalMap.h	/^  const_iterator &operator++() {$/;"	f	class:llvm::IntervalMap::const_iterator
operator ++	ADT/IntervalMap.h	/^  const_iterator operator++(int) {$/;"	f	class:llvm::IntervalMap::const_iterator
operator ++	ADT/IntervalMap.h	/^  iterator &operator++() {$/;"	f	class:llvm::IntervalMap::iterator
operator ++	ADT/IntervalMap.h	/^  iterator operator++(int) {$/;"	f	class:llvm::IntervalMap::iterator
operator ++	ADT/PostOrderIterator.h	/^  inline _Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::po_iterator
operator ++	ADT/PostOrderIterator.h	/^  inline _Self& operator++() {   \/\/ Preincrement$/;"	f	class:llvm::po_iterator
operator ++	ADT/SCCIterator.h	/^  inline _Self operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::scc_iterator
operator ++	ADT/SCCIterator.h	/^  inline _Self& operator++() {          \/\/ Preincrement$/;"	f	class:llvm::scc_iterator
operator ++	ADT/STLExtras.h	/^  _Self  operator++(int) { _Self __tmp = *this; ++current; return __tmp; }$/;"	f	class:llvm::mapped_iterator
operator ++	ADT/STLExtras.h	/^  _Self& operator++() { ++current; return *this; }$/;"	f	class:llvm::mapped_iterator
operator ++	ADT/ScopedHashTable.h	/^  ScopedHashTableIterator operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::ScopedHashTableIterator
operator ++	ADT/ScopedHashTable.h	/^  inline ScopedHashTableIterator& operator++() {          \/\/ Preincrement$/;"	f	class:llvm::ScopedHashTableIterator
operator ++	ADT/SmallPtrSet.h	/^  SmallPtrSetIterator operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::SmallPtrSetIterator
operator ++	ADT/SmallPtrSet.h	/^  inline SmallPtrSetIterator& operator++() {          \/\/ Preincrement$/;"	f	class:llvm::SmallPtrSetIterator
operator ++	ADT/SparseBitVector.h	/^    inline SparseBitVectorIterator operator++(int) {$/;"	f	class:llvm::SparseBitVector::SparseBitVectorIterator
operator ++	ADT/SparseBitVector.h	/^    inline SparseBitVectorIterator& operator++() {$/;"	f	class:llvm::SparseBitVector::SparseBitVectorIterator
operator ++	ADT/Statistic.h	/^  const Statistic &operator++() {$/;"	f	class:llvm::Statistic
operator ++	ADT/Statistic.h	/^  unsigned operator++(int) {$/;"	f	class:llvm::Statistic
operator ++	ADT/StringMap.h	/^  StringMapConstIterator operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::StringMapConstIterator
operator ++	ADT/StringMap.h	/^  inline StringMapConstIterator& operator++() {          \/\/ Preincrement$/;"	f	class:llvm::StringMapConstIterator
operator ++	ADT/ValueMap.h	/^  ValueMapConstIterator operator++(int) {  \/\/ Postincrement$/;"	f	class:llvm::ValueMapConstIterator
operator ++	ADT/ValueMap.h	/^  ValueMapIterator operator++(int) {  \/\/ Postincrement$/;"	f	class:llvm::ValueMapIterator
operator ++	ADT/ValueMap.h	/^  inline ValueMapConstIterator& operator++() {  \/\/ Preincrement$/;"	f	class:llvm::ValueMapConstIterator
operator ++	ADT/ValueMap.h	/^  inline ValueMapIterator& operator++() {  \/\/ Preincrement$/;"	f	class:llvm::ValueMapIterator
operator ++	ADT/ilist.h	/^  ilist_iterator &operator++() {      \/\/ preincrement - Advance$/;"	f	class:llvm::ilist_iterator
operator ++	ADT/ilist.h	/^  ilist_iterator operator++(int) {    \/\/ postincrement operators...$/;"	f	class:llvm::ilist_iterator
operator ++	Analysis/AliasSetTracker.h	/^    iterator operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::AliasSet::iterator
operator ++	Analysis/AliasSetTracker.h	/^    iterator& operator++() {                \/\/ Preincrement$/;"	f	class:llvm::AliasSet::iterator
operator ++	Analysis/ConstantsScanner.h	/^  inline _Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::constant_iterator
operator ++	Analysis/ConstantsScanner.h	/^  inline _Self& operator++() {   \/\/ Preincrement implementation$/;"	f	class:llvm::constant_iterator
operator ++	Analysis/IntervalIterator.h	/^  _Self& operator++() {  \/\/ Preincrement$/;"	f	class:llvm::IntervalIterator
operator ++	Analysis/IntervalIterator.h	/^  inline _Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::IntervalIterator
operator ++	Analysis/RegionIterator.h	/^  inline Self operator++(int) {$/;"	f	class:llvm::RNSuccIterator
operator ++	Analysis/RegionIterator.h	/^  inline Self& operator++() {$/;"	f	class:llvm::RNSuccIterator
operator ++	CodeGen/MachineBasicBlock.h	/^    bundle_iterator &operator++() {      \/\/ preincrement - Advance$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
operator ++	CodeGen/MachineBasicBlock.h	/^    bundle_iterator operator++(int) {    \/\/ postincrement operators...$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
operator ++	CodeGen/MachineInstrBundle.h	/^  void operator++() {$/;"	f	class:llvm::MachineOperandIteratorBase
operator ++	CodeGen/MachineRegisterInfo.h	/^    defusechain_iterator &operator++() {          \/\/ Preincrement$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
operator ++	CodeGen/MachineRegisterInfo.h	/^    defusechain_iterator operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
operator ++	CodeGen/ScheduleDAG.h	/^    SUnitIterator operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::SUnitIterator
operator ++	CodeGen/ScheduleDAG.h	/^    SUnitIterator& operator++() {                \/\/ Preincrement$/;"	f	class:llvm::SUnitIterator
operator ++	CodeGen/SelectionDAGNodes.h	/^    use_iterator &operator++() {          \/\/ Preincrement$/;"	f	class:llvm::SDNode::use_iterator
operator ++	CodeGen/SelectionDAGNodes.h	/^    use_iterator operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::SDNode::use_iterator
operator ++	CodeGen/SelectionDAGNodes.h	/^  SDNodeIterator operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::SDNodeIterator
operator ++	CodeGen/SelectionDAGNodes.h	/^  SDNodeIterator& operator++() {                \/\/ Preincrement$/;"	f	class:llvm::SDNodeIterator
operator ++	Instructions.h	/^    Self operator++() {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator ++	Instructions.h	/^    Self operator++(int) {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator ++	MC/MCRegisterInfo.h	/^    void operator++() {$/;"	f	class:llvm::MCRegisterInfo::DiffListIterator
operator ++	MC/MCRegisterInfo.h	/^  void operator++() {$/;"	f	class:llvm::MCRegUnitRootIterator
operator ++	Object/Archive.h	/^    child_iterator& operator++() {  \/\/ Preincrement$/;"	f	class:llvm::object::Archive::child_iterator
operator ++	Object/Archive.h	/^    symbol_iterator& operator++() {  \/\/ Preincrement$/;"	f	class:llvm::object::Archive::symbol_iterator
operator ++	Object/ELF.h	/^    ELFRelocationIterator &operator ++(int) {$/;"	f	class:llvm::object::ELFObjectFile::ELFRelocationIterator
operator ++	Object/ELF.h	/^    ELFRelocationIterator operator ++() {$/;"	f	class:llvm::object::ELFObjectFile::ELFRelocationIterator
operator ++	Support/CFG.h	/^  inline Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::PredIterator
operator ++	Support/CFG.h	/^  inline Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::SuccIterator
operator ++	Support/CFG.h	/^  inline Self& operator++() {   \/\/ Preincrement$/;"	f	class:llvm::PredIterator
operator ++	Support/CFG.h	/^  inline Self& operator++() { ++idx; return *this; } \/\/ Preincrement$/;"	f	class:llvm::SuccIterator
operator ++	Support/GetElementPtrTypeIterator.h	/^    generic_gep_type_iterator operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::generic_gep_type_iterator
operator ++	Support/GetElementPtrTypeIterator.h	/^    generic_gep_type_iterator& operator++() {   \/\/ Preincrement$/;"	f	class:llvm::generic_gep_type_iterator
operator ++	Support/InstIterator.h	/^  InstIterator& operator++() {$/;"	f	class:llvm::InstIterator
operator ++	Support/InstIterator.h	/^  inline InstIterator operator++(int) {$/;"	f	class:llvm::InstIterator
operator ++	Support/Registry.h	/^      iterator &operator++() { Cur = Cur->Next; return *this; }$/;"	f	class:llvm::Registry::iterator
operator ++	Support/TargetRegistry.h	/^      iterator &operator++() {          \/\/ Preincrement$/;"	f	class:llvm::TargetRegistry::iterator
operator ++	Support/TargetRegistry.h	/^      iterator operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::TargetRegistry::iterator
operator ++	Support/YAMLParser.h	/^  basic_collection_iterator &operator++() {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator ++	Support/YAMLParser.h	/^  document_iterator operator ++() {$/;"	f	class:llvm::yaml::document_iterator
operator ++	Target/TargetRegisterInfo.h	/^  void operator++() {$/;"	f	class:llvm::SuperRegClassIterator
operator ++	Use.h	/^  _Self &operator++() {          \/\/ Preincrement$/;"	f	class:llvm::value_use_iterator
operator ++	Use.h	/^  _Self operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::value_use_iterator
operator ++	User.h	/^    value_op_iterator &operator++() {          \/\/ Preincrement$/;"	f	class:llvm::User::value_op_iterator
operator ++	User.h	/^    value_op_iterator operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::User::value_op_iterator
operator +=	ADT/APSInt.h	/^  APSInt& operator+=(const APSInt& RHS) {$/;"	f	class:llvm::APSInt
operator +=	ADT/STLExtras.h	/^  _Self& operator+=   (difference_type n) { current += n; return *this; }$/;"	f	class:llvm::mapped_iterator
operator +=	ADT/SmallString.h	/^  SmallString &operator+=(StringRef RHS) {$/;"	f	class:llvm::SmallString
operator +=	ADT/SmallString.h	/^  SmallString &operator+=(char C) {$/;"	f	class:llvm::SmallString
operator +=	ADT/Statistic.h	/^  const Statistic &operator+=(const unsigned &V) {$/;"	f	class:llvm::Statistic
operator +=	ADT/StringRef.h	/^  inline std::string &operator+=(std::string &buffer, llvm::StringRef string) {$/;"	f	namespace:llvm
operator +=	CodeGen/PBQP/Math.h	/^    Matrix& operator+=(const Matrix &m) {$/;"	f	class:PBQP::Matrix
operator +=	CodeGen/PBQP/Math.h	/^    Vector& operator+=(const Vector &v) {$/;"	f	class:PBQP::Vector
operator +=	Support/CFG.h	/^  inline Self& operator+=(int Right) {$/;"	f	class:llvm::SuccIterator
operator +=	Support/TimeValue.h	/^    TimeValue& operator += (const TimeValue& that ) {$/;"	f	class:llvm::sys::TimeValue
operator +=	Support/Timer.h	/^  void operator+=(const TimeRecord &RHS) {$/;"	f	class:llvm::TimeRecord
operator -	ADT/APInt.h	/^  APInt operator-() const {$/;"	f	class:llvm::APInt
operator -	ADT/APInt.h	/^  APInt operator-(uint64_t RHS) const {$/;"	f	class:llvm::APInt
operator -	ADT/APSInt.h	/^  APSInt operator-() const {$/;"	f	class:llvm::APSInt
operator -	ADT/APSInt.h	/^  APSInt operator-(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator -	ADT/STLExtras.h	/^  _Self  operator-    (difference_type n) const {$/;"	f	class:llvm::mapped_iterator
operator -	ADT/STLExtras.h	/^  inline difference_type operator-(const _Self &X) const {$/;"	f	class:llvm::mapped_iterator
operator -	ADT/SparseBitVector.h	/^operator-(const SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:llvm
operator -	CodeGen/SelectionDAGNodes.h	/^  size_t operator-(SDNodeIterator Other) const {$/;"	f	class:llvm::SDNodeIterator
operator -	Support/CFG.h	/^  inline Self operator-(int Right) {$/;"	f	class:llvm::SuccIterator
operator -	Support/CFG.h	/^  inline int operator-(const Self& x) {$/;"	f	class:llvm::SuccIterator
operator -	Support/TimeValue.h	/^inline TimeValue operator - (const TimeValue &tv1, const TimeValue &tv2) {$/;"	f	namespace:llvm::sys
operator --	ADT/APInt.h	/^  const APInt operator--(int) {$/;"	f	class:llvm::APInt
operator --	ADT/APSInt.h	/^  APSInt operator--(int) {$/;"	f	class:llvm::APSInt
operator --	ADT/APSInt.h	/^  APSInt& operator--() {$/;"	f	class:llvm::APSInt
operator --	ADT/ImmutableMap.h	/^    iterator  operator--(int) { iterator tmp(*this); --itr; return tmp; }$/;"	f	class:llvm::ImmutableMap::iterator
operator --	ADT/ImmutableMap.h	/^    iterator  operator--(int) { iterator tmp(*this); --itr; return tmp; }$/;"	f	class:llvm::ImmutableMapRef::iterator
operator --	ADT/ImmutableMap.h	/^    iterator& operator--() { --itr; return *this; }$/;"	f	class:llvm::ImmutableMap::iterator
operator --	ADT/ImmutableMap.h	/^    iterator& operator--() { --itr; return *this; }$/;"	f	class:llvm::ImmutableMapRef::iterator
operator --	ADT/ImmutableSet.h	/^    inline iterator  operator--(int) { iterator tmp(*this); --itr; return tmp; }$/;"	f	class:llvm::ImmutableSet::iterator
operator --	ADT/ImmutableSet.h	/^    inline iterator  operator--(int) { iterator tmp(*this); --itr; return tmp; }$/;"	f	class:llvm::ImmutableSetRef::iterator
operator --	ADT/ImmutableSet.h	/^    inline iterator& operator--() { --itr; return *this; }$/;"	f	class:llvm::ImmutableSet::iterator
operator --	ADT/ImmutableSet.h	/^    inline iterator& operator--() { --itr; return *this; }$/;"	f	class:llvm::ImmutableSetRef::iterator
operator --	ADT/ImmutableSet.h	/^  _Self& operator--() {$/;"	f	class:llvm::ImutAVLTreeGenericIterator
operator --	ADT/ImmutableSet.h	/^  inline _Self& operator--() {$/;"	f	class:llvm::ImutAVLTreeInOrderIterator
operator --	ADT/IntervalMap.h	/^  const_iterator &operator--() {$/;"	f	class:llvm::IntervalMap::const_iterator
operator --	ADT/IntervalMap.h	/^  const_iterator operator--(int) {$/;"	f	class:llvm::IntervalMap::const_iterator
operator --	ADT/IntervalMap.h	/^  iterator &operator--() {$/;"	f	class:llvm::IntervalMap::iterator
operator --	ADT/IntervalMap.h	/^  iterator operator--(int) {$/;"	f	class:llvm::IntervalMap::iterator
operator --	ADT/STLExtras.h	/^  _Self  operator--(int) { _Self __tmp = *this; --current; return __tmp; }$/;"	f	class:llvm::mapped_iterator
operator --	ADT/STLExtras.h	/^  _Self& operator--() { --current; return *this; }$/;"	f	class:llvm::mapped_iterator
operator --	ADT/Statistic.h	/^  const Statistic &operator--() {$/;"	f	class:llvm::Statistic
operator --	ADT/Statistic.h	/^  unsigned operator--(int) {$/;"	f	class:llvm::Statistic
operator --	ADT/ilist.h	/^  ilist_iterator &operator--() {      \/\/ predecrement - Back up$/;"	f	class:llvm::ilist_iterator
operator --	ADT/ilist.h	/^  ilist_iterator operator--(int) {    \/\/ postdecrement operators...$/;"	f	class:llvm::ilist_iterator
operator --	CodeGen/MachineBasicBlock.h	/^    bundle_iterator &operator--() {      \/\/ predecrement - Back up$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
operator --	CodeGen/MachineBasicBlock.h	/^    bundle_iterator operator--(int) {    \/\/ postdecrement operators...$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
operator --	Instructions.h	/^    Self operator--() { $/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator --	Instructions.h	/^    Self operator--(int) {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator --	Support/CFG.h	/^  inline Self operator--(int) { \/\/ Postdecrement$/;"	f	class:llvm::SuccIterator
operator --	Support/CFG.h	/^  inline Self& operator--() { --idx; return *this; }  \/\/ Predecrement$/;"	f	class:llvm::SuccIterator
operator --	Support/InstIterator.h	/^  InstIterator& operator--() {$/;"	f	class:llvm::InstIterator
operator --	Support/InstIterator.h	/^  inline InstIterator  operator--(int) {$/;"	f	class:llvm::InstIterator
operator -=	ADT/APSInt.h	/^  APSInt& operator-=(const APSInt& RHS) {$/;"	f	class:llvm::APSInt
operator -=	ADT/STLExtras.h	/^  _Self& operator-=   (difference_type n) { current -= n; return *this; }$/;"	f	class:llvm::mapped_iterator
operator -=	ADT/Statistic.h	/^  const Statistic &operator-=(const unsigned &V) {$/;"	f	class:llvm::Statistic
operator -=	CodeGen/PBQP/Math.h	/^    Vector& operator-=(const Vector &v) {$/;"	f	class:PBQP::Vector
operator -=	Support/CFG.h	/^  inline Self& operator-=(int Right) {$/;"	f	class:llvm::SuccIterator
operator -=	Support/TimeValue.h	/^    TimeValue& operator -= (const TimeValue &that ) {$/;"	f	class:llvm::sys::TimeValue
operator -=	Support/Timer.h	/^  void operator-=(const TimeRecord &RHS) {$/;"	f	class:llvm::TimeRecord
operator ->	ADT/DenseMap.h	/^  pointer operator->() const {$/;"	f	class:llvm::DenseMapIterator
operator ->	ADT/DenseSet.h	/^    ValueT* operator->() { return &I->first; }$/;"	f	class:llvm::DenseSet::Iterator
operator ->	ADT/DenseSet.h	/^    const ValueT* operator->() { return &I->first; }$/;"	f	class:llvm::DenseSet::ConstIterator
operator ->	ADT/DepthFirstIterator.h	/^  inline NodeType *operator->() const { return operator*(); }$/;"	f	class:llvm::df_iterator
operator ->	ADT/EquivalenceClasses.h	/^    reference operator->() const { return operator*(); }$/;"	f	class:llvm::EquivalenceClasses::member_iterator
operator ->	ADT/FoldingSet.h	/^  T *operator->() const { return *Iterator; }$/;"	f	class:llvm::FoldingSetVectorIterator
operator ->	ADT/FoldingSet.h	/^  T *operator->() const { return static_cast<T*>(Ptr); }$/;"	f	class:llvm::FoldingSetBucketIterator
operator ->	ADT/FoldingSet.h	/^  T *operator->() const {$/;"	f	class:llvm::FoldingSetIterator
operator ->	ADT/ImmutableMap.h	/^    value_type*    operator->() const { return &itr->getValue(); }$/;"	f	class:llvm::ImmutableMap::iterator
operator ->	ADT/ImmutableMap.h	/^    value_type*    operator->() const { return &itr->getValue(); }$/;"	f	class:llvm::ImmutableMapRef::iterator
operator ->	ADT/ImmutableSet.h	/^    inline value_type *operator->() const { return &(operator*()); }$/;"	f	class:llvm::ImmutableSet::iterator
operator ->	ADT/ImmutableSet.h	/^    inline value_type *operator->() const { return &(operator*()); }$/;"	f	class:llvm::ImmutableSetRef::iterator
operator ->	ADT/ImmutableSet.h	/^  inline TreeTy* operator->() const { return *InternalItr; }$/;"	f	class:llvm::ImutAVLTreeInOrderIterator
operator ->	ADT/InMemoryStruct.h	/^  const_pointer operator->() const {$/;"	f	class:llvm::InMemoryStruct
operator ->	ADT/InMemoryStruct.h	/^  pointer operator->() {$/;"	f	class:llvm::InMemoryStruct
operator ->	ADT/IntrusiveRefCntPtr.h	/^    T* operator->() const { return Obj; }$/;"	f	class:llvm::IntrusiveRefCntPtr
operator ->	ADT/Optional.h	/^  const T* operator->() const { return getPointer(); }$/;"	f	class:llvm::Optional
operator ->	ADT/OwningPtr.h	/^  T *operator->() const { return Ptr; }$/;"	f	class:llvm::OwningPtr
operator ->	ADT/PostOrderIterator.h	/^  inline NodeType *operator->() const { return operator*(); }$/;"	f	class:llvm::po_iterator
operator ->	ADT/ScopedHashTable.h	/^  V *operator->() const {$/;"	f	class:llvm::ScopedHashTableIterator
operator ->	ADT/StringMap.h	/^  StringMapEntry<ValueTy> *operator->() const {$/;"	f	class:llvm::StringMapIterator
operator ->	ADT/StringMap.h	/^  const value_type *operator->() const {$/;"	f	class:llvm::StringMapConstIterator
operator ->	ADT/ValueMap.h	/^    ValueTypeProxy *operator->() { return this; }$/;"	f	struct:llvm::ValueMapConstIterator::ValueTypeProxy
operator ->	ADT/ValueMap.h	/^    ValueTypeProxy *operator->() { return this; }$/;"	f	struct:llvm::ValueMapIterator::ValueTypeProxy
operator ->	ADT/ValueMap.h	/^  ValueTypeProxy operator->() const {$/;"	f	class:llvm::ValueMapConstIterator
operator ->	ADT/ValueMap.h	/^  ValueTypeProxy operator->() const {$/;"	f	class:llvm::ValueMapIterator
operator ->	ADT/ilist.h	/^  pointer operator->() const { return &operator*(); }$/;"	f	class:llvm::ilist_iterator
operator ->	Analysis/AliasSetTracker.h	/^    value_type *operator->() const { return &operator*(); }$/;"	f	class:llvm::AliasSet::iterator
operator ->	Analysis/ConstantsScanner.h	/^  inline pointer operator->() const { return operator*(); }$/;"	f	class:llvm::constant_iterator
operator ->	Analysis/IntervalIterator.h	/^  inline       Interval *operator->()       { return operator*(); }$/;"	f	class:llvm::IntervalIterator
operator ->	Analysis/IntervalIterator.h	/^  inline const Interval *operator->() const { return operator*(); }$/;"	f	class:llvm::IntervalIterator
operator ->	CodeGen/MachineBasicBlock.h	/^    Ty *operator->() const { return &operator*(); }$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
operator ->	CodeGen/MachineInstrBuilder.h	/^  MachineInstr *operator->() const { return MI; }$/;"	f	class:llvm::MachineInstrBuilder
operator ->	CodeGen/MachineInstrBundle.h	/^  MachineOperand *operator->() const { return &deref(); }$/;"	f	class:llvm::MIBundleOperands
operator ->	CodeGen/MachineInstrBundle.h	/^  MachineOperand *operator->() const { return &deref(); }$/;"	f	class:llvm::MIOperands
operator ->	CodeGen/MachineInstrBundle.h	/^  const MachineOperand *operator->() const { return &deref(); }$/;"	f	class:llvm::ConstMIBundleOperands
operator ->	CodeGen/MachineInstrBundle.h	/^  const MachineOperand *operator->() const { return &deref(); }$/;"	f	class:llvm::ConstMIOperands
operator ->	CodeGen/MachineRegisterInfo.h	/^    MachineInstr *operator->() const {$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
operator ->	CodeGen/ScheduleDAG.h	/^    pointer operator->() const { return operator*(); }$/;"	f	class:llvm::SUnitIterator
operator ->	CodeGen/SelectionDAGNodes.h	/^    SDNode *operator->() const { return operator*(); }$/;"	f	class:llvm::SDNode::use_iterator
operator ->	CodeGen/SelectionDAGNodes.h	/^  inline SDNode *operator->() const { return Node; }$/;"	f	class:llvm::SDValue
operator ->	CodeGen/SelectionDAGNodes.h	/^  pointer operator->() const { return operator*(); }$/;"	f	class:llvm::SDNodeIterator
operator ->	DebugInfo.h	/^    MDNode *operator ->() const { return const_cast<MDNode*>(DbgNode); }$/;"	f	class:llvm::DIDescriptor
operator ->	Object/Archive.h	/^    const Child* operator->() const {$/;"	f	class:llvm::object::Archive::child_iterator
operator ->	Object/Archive.h	/^    const Symbol *operator->() const {$/;"	f	class:llvm::object::Archive::symbol_iterator
operator ->	Object/ELF.h	/^    pointer operator ->() {$/;"	f	class:llvm::object::ELFObjectFile::ELFRelocationIterator
operator ->	Object/ObjectFile.h	/^  const content_type* operator->() const {$/;"	f	class:llvm::object::content_iterator
operator ->	Support/CFG.h	/^  inline pointer *operator->() const { return &operator*(); }$/;"	f	class:llvm::PredIterator
operator ->	Support/CFG.h	/^  inline pointer operator->() const { return operator*(); }$/;"	f	class:llvm::SuccIterator
operator ->	Support/CallSite.h	/^  InstrTy *operator->() const { return I.getPointer(); }$/;"	f	class:llvm::CallSiteBase
operator ->	Support/CommandLine.h	/^  DataType operator->() const { return Value; }$/;"	f	class:llvm::cl::opt_storage
operator ->	Support/FileSystem.h	/^  const directory_entry *operator->() const { return &*State->Stack.top(); }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
operator ->	Support/FileSystem.h	/^  const directory_entry *operator->() const { return &State->CurrentEntry; }$/;"	f	class:llvm::sys::fs::directory_iterator
operator ->	Support/GetElementPtrTypeIterator.h	/^    Type *operator->() const { return operator*(); }$/;"	f	class:llvm::generic_gep_type_iterator
operator ->	Support/InstIterator.h	/^  inline pointer operator->() const { return &operator*(); }$/;"	f	class:llvm::InstIterator
operator ->	Support/IntegersSubset.h	/^  Constant *operator->() { return Holder; }$/;"	f	class:llvm::IntegersSubset
operator ->	Support/IntegersSubset.h	/^  const Constant *operator->() const { return Holder; }$/;"	f	class:llvm::IntegersSubset
operator ->	Support/ManagedStatic.h	/^  C *operator->() {$/;"	f	class:llvm::ManagedStatic
operator ->	Support/ManagedStatic.h	/^  const C *operator->() const {$/;"	f	class:llvm::ManagedStatic
operator ->	Support/PathV2.h	/^  pointer   operator->() const { return &Component; }$/;"	f	class:llvm::sys::path::const_iterator
operator ->	Support/Registry.h	/^      const entry *operator->() const { return &Cur->Val; }$/;"	f	class:llvm::Registry::iterator
operator ->	Support/TargetRegistry.h	/^      const Target *operator->() const {$/;"	f	class:llvm::TargetRegistry::iterator
operator ->	Support/ValueHandle.h	/^  Value *operator->() const { return getValPtr(); }$/;"	f	class:llvm::ValueHandleBase
operator ->	Support/ValueHandle.h	/^  ValueTy *operator->() const { return getValPtr(); }$/;"	f	class:llvm::AssertingVH
operator ->	Support/ValueHandle.h	/^  ValueTy *operator->() const { return getValPtr(); }$/;"	f	class:llvm::TrackingVH
operator ->	Support/YAMLParser.h	/^  OwningPtr<Document> &operator ->() {$/;"	f	class:llvm::yaml::document_iterator
operator ->	Support/YAMLParser.h	/^  ValueT *operator ->() const {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator ->	Use.h	/^        Value *operator->()       { return Val; }$/;"	f	class:llvm::Use
operator ->	Use.h	/^  UserTy *operator->() const { return operator*(); }$/;"	f	class:llvm::value_use_iterator
operator ->	Use.h	/^  const Value *operator->() const { return Val; }$/;"	f	class:llvm::Use
operator ->	User.h	/^    Value *operator->() const { return operator*(); }$/;"	f	class:llvm::User::value_op_iterator
operator /	ADT/APSInt.h	/^  APSInt operator\/(const APSInt &RHS) const {$/;"	f	class:llvm::APSInt
operator /=	ADT/APSInt.h	/^  const APSInt &operator\/=(const APSInt &RHS) {$/;"	f	class:llvm::APSInt
operator /=	ADT/Statistic.h	/^  const Statistic &operator\/=(const unsigned &V) {$/;"	f	class:llvm::Statistic
operator <	ADT/APSInt.h	/^  inline bool operator<(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator <	ADT/EquivalenceClasses.h	/^    bool operator<(const ECValue &UFN) const { return Data < UFN.Data; }$/;"	f	class:llvm::EquivalenceClasses::ECValue
operator <	ADT/EquivalenceClasses.h	/^    bool operator<(const T &Val) const { return Data < Val; }$/;"	f	class:llvm::EquivalenceClasses::ECValue
operator <	ADT/PointerIntPair.h	/^  bool operator<(const PointerIntPair &RHS) const {return Value < RHS.Value;}$/;"	f	class:llvm::PointerIntPair
operator <	ADT/STLExtras.h	/^  inline bool operator< (const _Self &X) const { return current <  X.current; }$/;"	f	class:llvm::mapped_iterator
operator <	ADT/SmallVector.h	/^  bool operator<(const SmallVectorImpl &RHS) const {$/;"	f	class:llvm::SmallVectorImpl
operator <	ADT/StringRef.h	/^  inline bool operator<(StringRef LHS, StringRef RHS) {$/;"	f	namespace:llvm
operator <	Analysis/MemoryDependenceAnalysis.h	/^    bool operator<(const MemDepResult &M) const { return Value < M.Value; }$/;"	f	class:llvm::MemDepResult
operator <	Analysis/MemoryDependenceAnalysis.h	/^    bool operator<(const NonLocalDepEntry &RHS) const {$/;"	f	class:llvm::NonLocalDepEntry
operator <	CodeGen/LiveInterval.h	/^    bool operator<(const LiveInterval& other) const {$/;"	f	class:llvm::LiveInterval
operator <	CodeGen/LiveInterval.h	/^    bool operator<(const LiveRange &LR) const {$/;"	f	struct:llvm::LiveRange
operator <	CodeGen/LiveInterval.h	/^  inline bool operator<(SlotIndex V, const LiveRange &LR) {$/;"	f	namespace:llvm
operator <	CodeGen/LiveInterval.h	/^  inline bool operator<(const LiveRange &LR, SlotIndex V) {$/;"	f	namespace:llvm
operator <	CodeGen/ScheduleDAGILP.h	/^  bool operator<(ILPValue RHS) const {$/;"	f	struct:llvm::ILPValue
operator <	CodeGen/SelectionDAGNodes.h	/^  bool operator<(const SDValue &O) const {$/;"	f	class:llvm::SDValue
operator <	CodeGen/SelectionDAGNodes.h	/^  bool operator<(const SDValue &V) const {$/;"	f	class:llvm::SDUse
operator <	CodeGen/SlotIndexes.h	/^    bool operator<(SlotIndex other) const {$/;"	f	class:llvm::SlotIndex
operator <	CodeGen/SlotIndexes.h	/^  inline bool operator<(SlotIndex V, const IdxMBBPair &IM) {$/;"	f	namespace:llvm
operator <	CodeGen/SlotIndexes.h	/^  inline bool operator<(const IdxMBBPair &IM, SlotIndex V) {$/;"	f	namespace:llvm
operator <	CodeGen/ValueTypes.h	/^    bool operator<(const MVT& S)  const { return SimpleTy <  S.SimpleTy; }$/;"	f	class:llvm::MVT
operator <	MC/MCELFObjectWriter.h	/^  bool operator<(const ELFRelocationEntry &RE) const {$/;"	f	struct:llvm::ELFRelocationEntry
operator <	MC/MCRegisterInfo.h	/^    bool operator<(DwarfLLVMRegPair RHS) const { return FromReg < RHS.FromReg; }$/;"	f	struct:llvm::MCRegisterInfo::DwarfLLVMRegPair
operator <	MC/SubtargetFeature.h	/^  bool operator<(const SubtargetFeatureKV &S) const {$/;"	f	struct:llvm::SubtargetFeatureKV
operator <	MC/SubtargetFeature.h	/^  bool operator<(const SubtargetInfoKV &S) const {$/;"	f	struct:llvm::SubtargetInfoKV
operator <	Object/Archive.h	/^    bool operator <(const Child &other) const {$/;"	f	class:llvm::object::Archive::Child
operator <	Object/Archive.h	/^    bool operator <(const child_iterator &other) const {$/;"	f	class:llvm::object::Archive::child_iterator
operator <	Object/ELF.h	/^                      ::operator <(const DynRefImpl &Other) const {$/;"	f	class:llvm::object::DynRefImpl
operator <	Object/ObjectFile.h	/^inline bool LibraryRef::operator<(const LibraryRef &Other) const {$/;"	f	class:llvm::object::LibraryRef
operator <	Object/ObjectFile.h	/^inline bool SectionRef::operator<(const SectionRef &Other) const {$/;"	f	class:llvm::object::SectionRef
operator <	Object/ObjectFile.h	/^inline bool SymbolRef::operator<(const SymbolRef &Other) const {$/;"	f	class:llvm::object::SymbolRef
operator <	Object/ObjectFile.h	/^inline bool operator<(const DataRefImpl &a, const DataRefImpl &b) {$/;"	f	namespace:llvm::object
operator <	Support/BlockFrequency.h	/^  bool operator<(const BlockFrequency &RHS) const {$/;"	f	class:llvm::BlockFrequency
operator <	Support/BranchProbability.h	/^  bool operator<(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator <	Support/CFG.h	/^  inline bool operator<(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator <	Support/CallSite.h	/^  bool operator<(const CallSite &CS) const {$/;"	f	class:llvm::CallSite
operator <	Support/IntegersSubset.h	/^    bool operator<(const self &RHS) const {$/;"	f	class:llvm::IntRange
operator <	Support/TimeValue.h	/^    int operator < (const TimeValue &that) const { return that > *this; }$/;"	f	class:llvm::sys::TimeValue
operator <	Support/Timer.h	/^  bool operator<(const TimeRecord &T) const {$/;"	f	class:llvm::TimeRecord
operator <	Support/system_error.h	/^  bool operator< (const error_category& _rhs) const {return this < &_rhs;}$/;"	f	class:llvm::error_category
operator <	Support/system_error.h	/^inline bool operator<(const error_code& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator <	Support/system_error.h	/^inline bool operator<(const error_condition& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator <<	ADT/APInt.h	/^  APInt operator<<(const APInt &Bits) const {$/;"	f	class:llvm::APInt
operator <<	ADT/APInt.h	/^  APInt operator<<(unsigned Bits) const {$/;"	f	class:llvm::APInt
operator <<	ADT/APInt.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const APInt &I) {$/;"	f	namespace:llvm
operator <<	ADT/APSInt.h	/^  APSInt operator<<(unsigned Bits) const {$/;"	f	class:llvm::APSInt
operator <<	ADT/APSInt.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const APSInt &I) {$/;"	f	namespace:llvm
operator <<	ADT/Twine.h	/^  inline raw_ostream &operator<<(raw_ostream &OS, const Twine &RHS) {$/;"	f	namespace:llvm
operator <<	Analysis/AliasSetTracker.h	/^inline raw_ostream& operator<<(raw_ostream &OS, const AliasSet &AS) {$/;"	f	namespace:llvm
operator <<	Analysis/AliasSetTracker.h	/^inline raw_ostream& operator<<(raw_ostream &OS, const AliasSetTracker &AST) {$/;"	f	namespace:llvm
operator <<	Analysis/Dominators.h	/^inline raw_ostream &operator<<(raw_ostream &o,$/;"	f	namespace:llvm
operator <<	Analysis/LoopInfo.h	/^raw_ostream& operator<<(raw_ostream &OS, const LoopBase<BlockT, LoopT> &Loop) {$/;"	f	namespace:llvm
operator <<	Analysis/RegionInfo.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const RegionNode &Node) {$/;"	f	namespace:llvm
operator <<	Analysis/ScalarEvolution.h	/^  inline raw_ostream &operator<<(raw_ostream &OS, const SCEV &S) {$/;"	f	namespace:llvm
operator <<	CodeGen/LiveInterval.h	/^  inline raw_ostream &operator<<(raw_ostream &OS, const LiveInterval &LI) {$/;"	f	namespace:llvm
operator <<	CodeGen/MachineConstantPool.h	/^inline raw_ostream &operator<<(raw_ostream &OS,$/;"	f	namespace:llvm
operator <<	CodeGen/MachineInstr.h	/^inline raw_ostream& operator<<(raw_ostream &OS, const MachineInstr &MI) {$/;"	f	namespace:llvm
operator <<	CodeGen/MachineOperand.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const MachineOperand& MO) {$/;"	f	namespace:llvm
operator <<	CodeGen/PBQP/Math.h	/^OStream& operator<<(OStream &os, const Matrix &m) {$/;"	f	namespace:PBQP
operator <<	CodeGen/PBQP/Math.h	/^OStream& operator<<(OStream &os, const Vector &v) {$/;"	f	namespace:PBQP
operator <<	CodeGen/SlotIndexes.h	/^  inline raw_ostream& operator<<(raw_ostream &os, SlotIndex li) {$/;"	f	namespace:llvm
operator <<	MC/MCDwarf.h	/^  inline raw_ostream &operator<<(raw_ostream &OS, const MCDwarfFile &DwarfFile){$/;"	f	namespace:llvm
operator <<	MC/MCExpr.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const MCExpr &E) {$/;"	f	namespace:llvm
operator <<	MC/MCInst.h	/^inline raw_ostream& operator<<(raw_ostream &OS, const MCInst &MI) {$/;"	f	namespace:llvm
operator <<	MC/MCInst.h	/^inline raw_ostream& operator<<(raw_ostream &OS, const MCOperand &MO) {$/;"	f	namespace:llvm
operator <<	MC/MCLabel.h	/^  inline raw_ostream &operator<<(raw_ostream &OS, const MCLabel &Label) {$/;"	f	namespace:llvm
operator <<	MC/MCParser/MCParsedAsmOperand.h	/^inline raw_ostream& operator<<(raw_ostream &OS, const MCParsedAsmOperand &MO) {$/;"	f	namespace:llvm
operator <<	MC/MCSymbol.h	/^  inline raw_ostream &operator<<(raw_ostream &OS, const MCSymbol &Sym) {$/;"	f	namespace:llvm
operator <<	Module.h	/^inline raw_ostream &operator<<(raw_ostream &O, const Module &M) {$/;"	f	namespace:llvm
operator <<	Object/MachOObject.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const MachOObject &V) {$/;"	f	namespace:llvm::object
operator <<	Support/ConstantRange.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const ConstantRange &CR) {$/;"	f	namespace:llvm
operator <<	Support/raw_ostream.h	/^  raw_ostream &operator<<(StringRef Str) {$/;"	f	class:llvm::raw_ostream
operator <<	Support/raw_ostream.h	/^  raw_ostream &operator<<(char C) {$/;"	f	class:llvm::raw_ostream
operator <<	Support/raw_ostream.h	/^  raw_ostream &operator<<(const char *Str) {$/;"	f	class:llvm::raw_ostream
operator <<	Support/raw_ostream.h	/^  raw_ostream &operator<<(const std::string &Str) {$/;"	f	class:llvm::raw_ostream
operator <<	Support/raw_ostream.h	/^  raw_ostream &operator<<(int N) {$/;"	f	class:llvm::raw_ostream
operator <<	Support/raw_ostream.h	/^  raw_ostream &operator<<(signed char C) {$/;"	f	class:llvm::raw_ostream
operator <<	Support/raw_ostream.h	/^  raw_ostream &operator<<(unsigned char C) {$/;"	f	class:llvm::raw_ostream
operator <<	Support/raw_ostream.h	/^  raw_ostream &operator<<(unsigned int N) {$/;"	f	class:llvm::raw_ostream
operator <<	TableGen/Record.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const Init &I) {$/;"	f	namespace:llvm
operator <<	TableGen/Record.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const RecTy &Ty) {$/;"	f	namespace:llvm
operator <<	TableGen/Record.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const RecordVal &RV) {$/;"	f	namespace:llvm
operator <<	Target/TargetRegisterInfo.h	/^static inline raw_ostream &operator<<(raw_ostream &OS, const PrintReg &PR) {$/;"	f	namespace:llvm
operator <<	Target/TargetRegisterInfo.h	/^static inline raw_ostream &operator<<(raw_ostream &OS, const PrintRegUnit &PR) {$/;"	f	namespace:llvm
operator <<	Transforms/Utils/AddrModeMatcher.h	/^static inline raw_ostream &operator<<(raw_ostream &OS, const ExtAddrMode &AM) {$/;"	f	namespace:llvm
operator <<	Type.h	/^static inline raw_ostream &operator<<(raw_ostream &OS, Type &T) {$/;"	f	namespace:llvm
operator <<	Value.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const Value &V) {$/;"	f	namespace:llvm
operator <<=	ADT/APInt.h	/^  APInt& operator<<=(unsigned shiftAmt) {$/;"	f	class:llvm::APInt
operator <<=	ADT/APSInt.h	/^  APSInt& operator<<=(unsigned Amt) {$/;"	f	class:llvm::APSInt
operator <<=	Support/IntegersSubset.h	/^  IntItem& operator <<= (unsigned RHS) {$/;"	f	class:llvm::IntItem
operator <=	ADT/APSInt.h	/^  inline bool operator<=(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator <=	ADT/PointerIntPair.h	/^  bool operator<=(const PointerIntPair &RHS) const {return Value <= RHS.Value;}$/;"	f	class:llvm::PointerIntPair
operator <=	ADT/StringRef.h	/^  inline bool operator<=(StringRef LHS, StringRef RHS) {$/;"	f	namespace:llvm
operator <=	CodeGen/ScheduleDAGILP.h	/^  bool operator<=(ILPValue RHS) const {$/;"	f	struct:llvm::ILPValue
operator <=	CodeGen/SlotIndexes.h	/^    bool operator<=(SlotIndex other) const {$/;"	f	class:llvm::SlotIndex
operator <=	CodeGen/ValueTypes.h	/^    bool operator<=(const MVT& S) const { return SimpleTy <= S.SimpleTy; }$/;"	f	class:llvm::MVT
operator <=	Support/BlockFrequency.h	/^  bool operator<=(const BlockFrequency &RHS) const {$/;"	f	class:llvm::BlockFrequency
operator <=	Support/BranchProbability.h	/^  bool operator<=(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator <=	Support/CFG.h	/^  inline bool operator<=(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator <=	Support/TimeValue.h	/^    int operator <= (const TimeValue &that) const { return that >= *this; }$/;"	f	class:llvm::sys::TimeValue
operator =	ADT/APInt.h	/^  APInt& operator=(APInt&& that) {$/;"	f	class:llvm::APInt
operator =	ADT/APInt.h	/^  APInt& operator=(const APInt& RHS) {$/;"	f	class:llvm::APInt
operator =	ADT/APSInt.h	/^  APSInt &operator=(const APInt &RHS) {$/;"	f	class:llvm::APSInt
operator =	ADT/APSInt.h	/^  APSInt &operator=(const APSInt &RHS) {$/;"	f	class:llvm::APSInt
operator =	ADT/APSInt.h	/^  APSInt &operator=(uint64_t RHS) {$/;"	f	class:llvm::APSInt
operator =	ADT/BitVector.h	/^    reference &operator=(reference t) {$/;"	f	class:llvm::BitVector::reference
operator =	ADT/BitVector.h	/^    reference& operator=(bool t) {$/;"	f	class:llvm::BitVector::reference
operator =	ADT/BitVector.h	/^  const BitVector &operator=(BitVector &&RHS) {$/;"	f	class:llvm::BitVector
operator =	ADT/BitVector.h	/^  const BitVector &operator=(const BitVector &RHS) {$/;"	f	class:llvm::BitVector
operator =	ADT/DenseMap.h	/^  DenseMap& operator=(DenseMap &&other) {$/;"	f	class:llvm::DenseMap
operator =	ADT/DenseMap.h	/^  DenseMap& operator=(const DenseMap& other) {$/;"	f	class:llvm::DenseMap
operator =	ADT/DenseMap.h	/^  SmallDenseMap& operator=(SmallDenseMap &&other) {$/;"	f	class:llvm::SmallDenseMap
operator =	ADT/DenseMap.h	/^  SmallDenseMap& operator=(const SmallDenseMap& other) {$/;"	f	class:llvm::SmallDenseMap
operator =	ADT/DenseSet.h	/^  DenseSet &operator=(const DenseSet &RHS) {$/;"	f	class:llvm::DenseSet
operator =	ADT/EquivalenceClasses.h	/^  const EquivalenceClasses &operator=(const EquivalenceClasses &RHS) {$/;"	f	class:llvm::EquivalenceClasses
operator =	ADT/ImmutableMap.h	/^  ImmutableMap &operator=(const ImmutableMap &X) {$/;"	f	class:llvm::ImmutableMap
operator =	ADT/ImmutableMap.h	/^  ImmutableMapRef &operator=(const ImmutableMapRef &X) {$/;"	f	class:llvm::ImmutableMapRef
operator =	ADT/ImmutableSet.h	/^  ImmutableSet &operator=(const ImmutableSet &X) {$/;"	f	class:llvm::ImmutableSet
operator =	ADT/ImmutableSet.h	/^  ImmutableSetRef &operator=(const ImmutableSetRef &X) {$/;"	f	class:llvm::ImmutableSetRef
operator =	ADT/InMemoryStruct.h	/^  void operator=(const InMemoryStruct<T> &Value) {$/;"	f	class:llvm::InMemoryStruct
operator =	ADT/IntrusiveRefCntPtr.h	/^    IntrusiveRefCntPtr& operator=(IntrusiveRefCntPtr S) {$/;"	f	class:llvm::IntrusiveRefCntPtr
operator =	ADT/Optional.h	/^  Optional &operator=(const T &y) {$/;"	f	class:llvm::Optional
operator =	ADT/OwningPtr.h	/^  OwningArrayPtr &operator=(OwningArrayPtr &&Other) {$/;"	f	class:llvm::OwningArrayPtr
operator =	ADT/OwningPtr.h	/^  OwningPtr &operator=(OwningPtr &&Other) {$/;"	f	class:llvm::OwningPtr
operator =	ADT/PackedVector.h	/^    reference &operator=(T val) {$/;"	f	class:llvm::PackedVector::reference
operator =	ADT/PackedVector.h	/^  const PackedVector &operator=(const PackedVector &RHS) {$/;"	f	class:llvm::PackedVector
operator =	ADT/PointerUnion.h	/^    const PointerUnion &operator=(const PT1 &RHS) {$/;"	f	class:llvm::PointerUnionUIntTraits
operator =	ADT/PointerUnion.h	/^    const PointerUnion &operator=(const PT2 &RHS) {$/;"	f	class:llvm::PointerUnionUIntTraits
operator =	ADT/PointerUnion.h	/^    const PointerUnion3 &operator=(const PT1 &RHS) {$/;"	f	class:llvm::PointerUnion3
operator =	ADT/PointerUnion.h	/^    const PointerUnion3 &operator=(const PT2 &RHS) {$/;"	f	class:llvm::PointerUnion3
operator =	ADT/PointerUnion.h	/^    const PointerUnion3 &operator=(const PT3 &RHS) {$/;"	f	class:llvm::PointerUnion3
operator =	ADT/PointerUnion.h	/^    const PointerUnion4 &operator=(const PT1 &RHS) {$/;"	f	class:llvm::PointerUnion4
operator =	ADT/PointerUnion.h	/^    const PointerUnion4 &operator=(const PT2 &RHS) {$/;"	f	class:llvm::PointerUnion4
operator =	ADT/PointerUnion.h	/^    const PointerUnion4 &operator=(const PT3 &RHS) {$/;"	f	class:llvm::PointerUnion4
operator =	ADT/PointerUnion.h	/^    const PointerUnion4 &operator=(const PT4 &RHS) {$/;"	f	class:llvm::PointerUnion4
operator =	ADT/STLExtras.h	/^  tier& operator=(const std::pair<T1, T2>& p) {$/;"	f	struct:llvm::tier
operator =	ADT/SmallBitVector.h	/^    reference& operator=(bool t) {$/;"	f	class:llvm::SmallBitVector::reference
operator =	ADT/SmallBitVector.h	/^    reference& operator=(reference t) {$/;"	f	class:llvm::SmallBitVector::reference
operator =	ADT/SmallBitVector.h	/^  const SmallBitVector &operator=(SmallBitVector &&RHS) {$/;"	f	class:llvm::SmallBitVector
operator =	ADT/SmallBitVector.h	/^  const SmallBitVector &operator=(const SmallBitVector &RHS) {$/;"	f	class:llvm::SmallBitVector
operator =	ADT/SmallPtrSet.h	/^  operator=(const SmallPtrSet<PtrType, SmallSize> &RHS) {$/;"	f	class:llvm::SmallPtrSet
operator =	ADT/SmallString.h	/^  const SmallString &operator=(StringRef RHS) {$/;"	f	class:llvm::SmallString
operator =	ADT/SmallVector.h	/^  const SmallVector &operator=(SmallVector &&RHS) {$/;"	f	class:llvm::SmallVector
operator =	ADT/SmallVector.h	/^  const SmallVector &operator=(const SmallVector &RHS) {$/;"	f	class:llvm::SmallVector
operator =	ADT/SmallVector.h	/^  operator=(const SmallVectorImpl<T> &RHS) {$/;"	f	class:llvm::SmallVectorImpl
operator =	ADT/SmallVector.h	/^SmallVectorImpl<T> &SmallVectorImpl<T>::operator=(SmallVectorImpl<T> &&RHS) {$/;"	f	class:llvm::SmallVectorImpl
operator =	ADT/SparseBitVector.h	/^  SparseBitVector& operator=(const SparseBitVector& RHS) {$/;"	f	class:llvm::SparseBitVector
operator =	ADT/Statistic.h	/^  const Statistic &operator=(unsigned Val) {$/;"	f	class:llvm::Statistic
operator =	ADT/StringMap.h	/^  void operator=(const StringMap &RHS) {$/;"	f	class:llvm::StringMap
operator =	ADT/TinyPtrVector.h	/^  TinyPtrVector &operator=(TinyPtrVector &&RHS) {$/;"	f	class:llvm::TinyPtrVector
operator =	ADT/TinyPtrVector.h	/^  TinyPtrVector &operator=(const TinyPtrVector &RHS) {$/;"	f	class:llvm::TinyPtrVector
operator =	ADT/ilist.h	/^  const ilist_iterator &operator=(const ilist_iterator<node_ty> &RHS) {$/;"	f	class:llvm::ilist_iterator
operator =	Analysis/AliasSetTracker.h	/^    const iterator &operator=(const iterator &I) {$/;"	f	class:llvm::AliasSet::iterator
operator =	Analysis/RegionIterator.h	/^  inline const Self &operator=(const Self &I) {$/;"	f	class:llvm::RNSuccIterator
operator =	Attributes.h	/^  Attributes &operator=(const Attributes &A) {$/;"	f	class:llvm::Attributes
operator =	Bitcode/BitstreamReader.h	/^  void operator=(const BitstreamCursor &RHS) {$/;"	f	class:llvm::BitstreamCursor
operator =	CodeGen/PBQP/Graph.h	/^    Graph& operator=(const Graph &other) {$/;"	f	class:PBQP::Graph
operator =	CodeGen/PBQP/Math.h	/^    Matrix& operator=(const Matrix &m) {$/;"	f	class:PBQP::Matrix
operator =	CodeGen/PBQP/Math.h	/^    Vector& operator=(const Vector &v) {$/;"	f	class:PBQP::Vector
operator =	CodeGen/ScheduleDAG.h	/^    const SUnitIterator &operator=(const SUnitIterator &I) {$/;"	f	class:llvm::SUnitIterator
operator =	CodeGen/SelectionDAGNodes.h	/^  const SDNodeIterator &operator=(const SDNodeIterator &I) {$/;"	f	class:llvm::SDNodeIterator
operator =	Support/CFG.h	/^  inline const Self &operator=(const Self &I) {$/;"	f	class:llvm::SuccIterator
operator =	Support/CommandLine.h	/^  DataType &operator=(const T &Val) {$/;"	f	class:llvm::cl::opt
operator =	Support/CommandLine.h	/^  OptionValue<DataType> &operator=(const DT& V) {$/;"	f	struct:llvm::cl::OptionValue
operator =	Support/CommandLine.h	/^  OptionValue<cl::boolOrDefault> &operator=(const cl::boolOrDefault& V) {$/;"	f	struct:llvm::cl::OptionValue
operator =	Support/CommandLine.h	/^  OptionValue<std::string> &operator=(const std::string& V) {$/;"	f	struct:llvm::cl::OptionValue
operator =	Support/Endian.h	/^  void operator=(value_type newValue) {$/;"	f	class:llvm::support::detail::packed_endian_specific_integral
operator =	Support/IntegersSubset.h	/^  self& operator=(const self& RHS) {$/;"	f	class:llvm::IntegersSubsetGeneric
operator =	Support/PathV1.h	/^      Path &operator=(const Path &that) {$/;"	f	class:llvm::sys::Path
operator =	Support/PathV1.h	/^      PathWithStatus &operator=(const Path &that) {$/;"	f	class:llvm::sys::PathWithStatus
operator =	Support/PathV1.h	/^      PathWithStatus &operator=(const PathWithStatus &that) {$/;"	f	class:llvm::sys::PathWithStatus
operator =	Support/StringPool.h	/^    PooledStringPtr &operator=(const PooledStringPtr &That) {$/;"	f	class:llvm::PooledStringPtr
operator =	Support/Timer.h	/^  const Timer &operator=(const Timer &T) {$/;"	f	class:llvm::Timer
operator =	Support/ValueHandle.h	/^  Value *operator=(Value *RHS) {$/;"	f	class:llvm::ValueHandleBase
operator =	Support/ValueHandle.h	/^  Value *operator=(Value *RHS) {$/;"	f	class:llvm::WeakVH
operator =	Support/ValueHandle.h	/^  Value *operator=(const ValueHandleBase &RHS) {$/;"	f	class:llvm::ValueHandleBase
operator =	Support/ValueHandle.h	/^  Value *operator=(const ValueHandleBase &RHS) {$/;"	f	class:llvm::WeakVH
operator =	Support/ValueHandle.h	/^  ValueTy *operator=(ValueTy *RHS) {$/;"	f	class:llvm::AssertingVH
operator =	Support/ValueHandle.h	/^  ValueTy *operator=(ValueTy *RHS) {$/;"	f	class:llvm::TrackingVH
operator =	Support/ValueHandle.h	/^  ValueTy *operator=(const AssertingVH<ValueTy> &RHS) {$/;"	f	class:llvm::AssertingVH
operator =	Support/ValueHandle.h	/^  ValueTy *operator=(const TrackingVH<ValueTy> &RHS) {$/;"	f	class:llvm::TrackingVH
operator =	Support/system_error.h	/^    operator=(E _e)$/;"	f	class:llvm::error_code
operator =	Support/system_error.h	/^    operator=(E _e)$/;"	f	class:llvm::error_condition
operator =	Use.h	/^  Value *operator=(Value *RHS) {$/;"	f	class:llvm::Use
operator =	Use.h	/^  const Use &operator=(const Use &RHS) {$/;"	f	class:llvm::Use
operator ==	ADT/APInt.h	/^  bool operator==(const APInt& RHS) const {$/;"	f	class:llvm::APInt
operator ==	ADT/APInt.h	/^  bool operator==(uint64_t Val) const {$/;"	f	class:llvm::APInt
operator ==	ADT/APInt.h	/^inline bool operator==(uint64_t V1, const APInt& V2) {$/;"	f	namespace:llvm
operator ==	ADT/APSInt.h	/^  inline bool operator==(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator ==	ADT/APSInt.h	/^  inline bool operator==(int64_t RHS) const {$/;"	f	class:llvm::APSInt
operator ==	ADT/APSInt.h	/^inline bool operator==(int64_t V1, const APSInt& V2) {$/;"	f	namespace:llvm
operator ==	ADT/ArrayRef.h	/^  inline bool operator==(ArrayRef<T> LHS, ArrayRef<T> RHS) {$/;"	f	namespace:llvm
operator ==	ADT/BitVector.h	/^  bool operator==(const BitVector &RHS) const {$/;"	f	class:llvm::BitVector
operator ==	ADT/DenseMap.h	/^  bool operator==(const ConstIterator &RHS) const {$/;"	f	class:llvm::DenseMapIterator
operator ==	ADT/DenseSet.h	/^    bool operator==(const ConstIterator& X) const { return I == X.I; }$/;"	f	class:llvm::DenseSet::ConstIterator
operator ==	ADT/DenseSet.h	/^    bool operator==(const Iterator& X) const { return I == X.I; }$/;"	f	class:llvm::DenseSet::Iterator
operator ==	ADT/DepthFirstIterator.h	/^  inline bool operator==(const _Self& x) const {$/;"	f	class:llvm::df_iterator
operator ==	ADT/EquivalenceClasses.h	/^    bool operator==(const member_iterator &RHS) const {$/;"	f	class:llvm::EquivalenceClasses::member_iterator
operator ==	ADT/FoldingSet.h	/^  bool operator==(const FoldingSetBucketIteratorImpl &RHS) const {$/;"	f	class:llvm::FoldingSetBucketIteratorImpl
operator ==	ADT/FoldingSet.h	/^  bool operator==(const FoldingSetIteratorImpl &RHS) const {$/;"	f	class:llvm::FoldingSetIteratorImpl
operator ==	ADT/FoldingSet.h	/^  bool operator==(const SelfT &RHS) const {$/;"	f	class:llvm::FoldingSetVectorIterator
operator ==	ADT/Hashing.h	/^  friend bool operator==(const hash_code &lhs, const hash_code &rhs) {$/;"	f	class:llvm::hash_code
operator ==	ADT/ImmutableList.h	/^    bool operator==(const iterator& I) const { return L == I.L; }$/;"	f	class:llvm::ImmutableList::iterator
operator ==	ADT/ImmutableList.h	/^  bool operator==(const ImmutableList& L) const { return isEqual(L); }$/;"	f	class:llvm::ImmutableList
operator ==	ADT/ImmutableMap.h	/^    bool operator==(const iterator& RHS) const { return RHS.itr == itr; }$/;"	f	class:llvm::ImmutableMap::iterator
operator ==	ADT/ImmutableMap.h	/^    bool operator==(const iterator& RHS) const { return RHS.itr == itr; }$/;"	f	class:llvm::ImmutableMapRef::iterator
operator ==	ADT/ImmutableMap.h	/^  bool operator==(const ImmutableMap &RHS) const {$/;"	f	class:llvm::ImmutableMap
operator ==	ADT/ImmutableMap.h	/^  bool operator==(const ImmutableMapRef &RHS) const {$/;"	f	class:llvm::ImmutableMapRef
operator ==	ADT/ImmutableSet.h	/^    inline bool operator==(const iterator& RHS) const { return RHS.itr == itr; }$/;"	f	class:llvm::ImmutableSet::iterator
operator ==	ADT/ImmutableSet.h	/^    inline bool operator==(const iterator& RHS) const { return RHS.itr == itr; }$/;"	f	class:llvm::ImmutableSetRef::iterator
operator ==	ADT/ImmutableSet.h	/^  bool operator==(const ImmutableSet &RHS) const {$/;"	f	class:llvm::ImmutableSet
operator ==	ADT/ImmutableSet.h	/^  bool operator==(const ImmutableSetRef &RHS) const {$/;"	f	class:llvm::ImmutableSetRef
operator ==	ADT/ImmutableSet.h	/^  inline bool operator==(const _Self& x) const {$/;"	f	class:llvm::ImutAVLTreeGenericIterator
operator ==	ADT/ImmutableSet.h	/^  inline bool operator==(const _Self& x) const {$/;"	f	class:llvm::ImutAVLTreeInOrderIterator
operator ==	ADT/IntervalMap.h	/^  bool operator==(const NodeRef &RHS) const {$/;"	f	class:llvm::IntervalMapImpl::NodeRef
operator ==	ADT/IntervalMap.h	/^  bool operator==(const const_iterator &RHS) const {$/;"	f	class:llvm::IntervalMap::const_iterator
operator ==	ADT/IntrusiveRefCntPtr.h	/^  inline bool operator==(T* A,$/;"	f	namespace:llvm
operator ==	ADT/IntrusiveRefCntPtr.h	/^  inline bool operator==(const IntrusiveRefCntPtr<T>& A,$/;"	f	namespace:llvm
operator ==	ADT/PackedVector.h	/^  bool operator==(const PackedVector &RHS) const {$/;"	f	class:llvm::PackedVector
operator ==	ADT/PointerIntPair.h	/^  bool operator==(const PointerIntPair &RHS) const {return Value == RHS.Value;}$/;"	f	class:llvm::PointerIntPair
operator ==	ADT/PostOrderIterator.h	/^  inline bool operator==(const _Self& x) const {$/;"	f	class:llvm::po_iterator
operator ==	ADT/SCCIterator.h	/^  inline bool operator==(const _Self& x) const {$/;"	f	class:llvm::scc_iterator
operator ==	ADT/STLExtras.h	/^  inline bool operator==(const _Self &X) const { return current == X.current; }$/;"	f	class:llvm::mapped_iterator
operator ==	ADT/ScopedHashTable.h	/^  bool operator==(const ScopedHashTableIterator &RHS) const {$/;"	f	class:llvm::ScopedHashTableIterator
operator ==	ADT/SetVector.h	/^  bool operator==(const SetVector &that) const {$/;"	f	class:llvm::SetVector
operator ==	ADT/SmallBitVector.h	/^  bool operator==(const SmallBitVector &RHS) const {$/;"	f	class:llvm::SmallBitVector
operator ==	ADT/SmallPtrSet.h	/^  bool operator==(const SmallPtrSetIteratorImpl &RHS) const {$/;"	f	class:llvm::SmallPtrSetIteratorImpl
operator ==	ADT/SmallVector.h	/^  bool operator==(const SmallVectorImpl &RHS) const {$/;"	f	class:llvm::SmallVectorImpl
operator ==	ADT/SparseBitVector.h	/^    bool operator==(const SparseBitVectorIterator &RHS) const {$/;"	f	class:llvm::SparseBitVector::SparseBitVectorIterator
operator ==	ADT/SparseBitVector.h	/^  bool operator==(const SparseBitVector &RHS) const {$/;"	f	class:llvm::SparseBitVector
operator ==	ADT/SparseBitVector.h	/^  bool operator==(const SparseBitVectorElement &RHS) const {$/;"	f	struct:llvm::SparseBitVectorElement
operator ==	ADT/StringMap.h	/^  bool operator==(const StringMapConstIterator &RHS) const {$/;"	f	class:llvm::StringMapConstIterator
operator ==	ADT/StringRef.h	/^  inline bool operator==(StringRef LHS, StringRef RHS) {$/;"	f	namespace:llvm
operator ==	ADT/ValueMap.h	/^  bool operator==(const ValueMapConstIterator &RHS) const {$/;"	f	class:llvm::ValueMapConstIterator
operator ==	ADT/ValueMap.h	/^  bool operator==(const ValueMapIterator &RHS) const {$/;"	f	class:llvm::ValueMapIterator
operator ==	ADT/ilist.h	/^  bool operator==(const ilist_iterator &RHS) const {$/;"	f	class:llvm::ilist_iterator
operator ==	ADT/ilist.h	/^bool operator==(T* LHS, const ilist_iterator<T> &RHS) {$/;"	f	namespace:llvm
operator ==	ADT/ilist.h	/^bool operator==(const T* LHS, const ilist_iterator<const T> &RHS) {$/;"	f	namespace:llvm
operator ==	Analysis/AliasSetTracker.h	/^    bool operator==(const iterator& x) const {$/;"	f	class:llvm::AliasSet::iterator
operator ==	Analysis/ConstantsScanner.h	/^  inline bool operator==(const _Self& x) const { return OpIdx == x.OpIdx &&$/;"	f	class:llvm::constant_iterator
operator ==	Analysis/Interval.h	/^  inline bool operator==(const Interval &I) const {$/;"	f	class:llvm::Interval
operator ==	Analysis/IntervalIterator.h	/^  inline bool operator==(const _Self& x) const { return IntStack == x.IntStack;}$/;"	f	class:llvm::IntervalIterator
operator ==	Analysis/MemoryDependenceAnalysis.h	/^    bool operator==(const MemDepResult &M) const { return Value == M.Value; }$/;"	f	class:llvm::MemDepResult
operator ==	Analysis/RegionIterator.h	/^  inline bool operator==(const Self& x) const {$/;"	f	class:llvm::RNSuccIterator
operator ==	Attributes.h	/^  bool operator==(const AttrBuilder &B) {$/;"	f	class:llvm::AttrBuilder
operator ==	Attributes.h	/^  bool operator==(const AttrListPtr &RHS) const$/;"	f	class:llvm::AttrListPtr
operator ==	Attributes.h	/^  bool operator==(const Attributes &A) const {$/;"	f	class:llvm::Attributes
operator ==	CodeGen/LiveInterval.h	/^    bool operator==(const LiveRange &LR) const {$/;"	f	struct:llvm::LiveRange
operator ==	CodeGen/MachineBasicBlock.h	/^    bool operator==(const bundle_iterator &x) const {$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
operator ==	CodeGen/MachineRegisterInfo.h	/^    bool operator==(const defusechain_iterator &x) const {$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
operator ==	CodeGen/ScheduleDAG.h	/^    bool operator==(const SDep &Other) const {$/;"	f	class:llvm::SDep
operator ==	CodeGen/ScheduleDAG.h	/^    bool operator==(const SUnitIterator& x) const {$/;"	f	class:llvm::SUnitIterator
operator ==	CodeGen/SelectionDAGNodes.h	/^    bool operator==(const use_iterator &x) const {$/;"	f	class:llvm::SDNode::use_iterator
operator ==	CodeGen/SelectionDAGNodes.h	/^  bool operator==(const SDNodeIterator& x) const {$/;"	f	class:llvm::SDNodeIterator
operator ==	CodeGen/SelectionDAGNodes.h	/^  bool operator==(const SDValue &O) const {$/;"	f	class:llvm::SDValue
operator ==	CodeGen/SelectionDAGNodes.h	/^  bool operator==(const SDValue &V) const {$/;"	f	class:llvm::SDUse
operator ==	CodeGen/SlotIndexes.h	/^    bool operator==(SlotIndex other) const {$/;"	f	class:llvm::SlotIndex
operator ==	CodeGen/ValueTypes.h	/^    bool operator==(EVT VT) const {$/;"	f	struct:llvm::EVT
operator ==	CodeGen/ValueTypes.h	/^    bool operator==(const MVT& S) const { return SimpleTy == S.SimpleTy; }$/;"	f	class:llvm::MVT
operator ==	DebugInfo/DIContext.h	/^  bool operator==(const DILineInfo &RHS) const {$/;"	f	class:llvm::DILineInfo
operator ==	Instructions.h	/^    bool operator==(const Self& RHS) const {$/;"	f	class:llvm::SwitchInst::CaseIteratorT
operator ==	MC/MCSchedule.h	/^  bool operator==(const MCProcResourceDesc &Other) const {$/;"	f	struct:llvm::MCProcResourceDesc
operator ==	MC/MCSchedule.h	/^  bool operator==(const MCReadAdvanceEntry &Other) const {$/;"	f	struct:llvm::MCReadAdvanceEntry
operator ==	MC/MCSchedule.h	/^  bool operator==(const MCWriteLatencyEntry &Other) const {$/;"	f	struct:llvm::MCWriteLatencyEntry
operator ==	MC/MCSchedule.h	/^  bool operator==(const MCWriteProcResEntry &Other) const {$/;"	f	struct:llvm::MCWriteProcResEntry
operator ==	MC/MachineLocation.h	/^  bool operator==(const MachineLocation &Other) const {$/;"	f	class:llvm::MachineLocation
operator ==	Object/Archive.h	/^    bool operator ==(const Child &other) const {$/;"	f	class:llvm::object::Archive::Child
operator ==	Object/Archive.h	/^    bool operator ==(const Symbol &other) const {$/;"	f	class:llvm::object::Archive::Symbol
operator ==	Object/Archive.h	/^    bool operator==(const child_iterator &other) const {$/;"	f	class:llvm::object::Archive::child_iterator
operator ==	Object/Archive.h	/^    bool operator==(const symbol_iterator &other) const {$/;"	f	class:llvm::object::Archive::symbol_iterator
operator ==	Object/ELF.h	/^                      ::operator==(const DynRefImpl &Other) const {$/;"	f	class:llvm::object::DynRefImpl
operator ==	Object/ELF.h	/^    bool operator ==(const ELFRelocationIterator &Other) {$/;"	f	class:llvm::object::ELFObjectFile::ELFRelocationIterator
operator ==	Object/ObjectFile.h	/^  bool operator==(const content_iterator &other) const {$/;"	f	class:llvm::object::content_iterator
operator ==	Object/ObjectFile.h	/^inline bool LibraryRef::operator==(const LibraryRef &Other) const {$/;"	f	class:llvm::object::LibraryRef
operator ==	Object/ObjectFile.h	/^inline bool RelocationRef::operator==(const RelocationRef &Other) const {$/;"	f	class:llvm::object::RelocationRef
operator ==	Object/ObjectFile.h	/^inline bool SectionRef::operator==(const SectionRef &Other) const {$/;"	f	class:llvm::object::SectionRef
operator ==	Object/ObjectFile.h	/^inline bool SymbolRef::operator==(const SymbolRef &Other) const {$/;"	f	class:llvm::object::SymbolRef
operator ==	Object/ObjectFile.h	/^inline bool operator==(const DataRefImpl &a, const DataRefImpl &b) {$/;"	f	namespace:llvm::object
operator ==	Support/BranchProbability.h	/^  bool operator==(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator ==	Support/CFG.h	/^  inline bool operator==(const Self& x) const { return It == x.It; }$/;"	f	class:llvm::PredIterator
operator ==	Support/CFG.h	/^  inline bool operator==(const Self& x) const { return idx == x.idx; }$/;"	f	class:llvm::SuccIterator
operator ==	Support/CallSite.h	/^  bool operator==(const CallSite &CS) const { return I == CS.I; }$/;"	f	class:llvm::CallSite
operator ==	Support/ConstantRange.h	/^  bool operator==(const ConstantRange &CR) const {$/;"	f	class:llvm::ConstantRange
operator ==	Support/DebugLoc.h	/^    bool operator==(const DebugLoc &DL) const {$/;"	f	class:llvm::DebugLoc
operator ==	Support/FileSystem.h	/^  bool operator==(const directory_entry& rhs) const { return Path == rhs.Path; }$/;"	f	class:llvm::sys::fs::directory_entry
operator ==	Support/FileSystem.h	/^  bool operator==(const directory_iterator &RHS) const {$/;"	f	class:llvm::sys::fs::directory_iterator
operator ==	Support/FileSystem.h	/^  bool operator==(const recursive_directory_iterator &RHS) const {$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
operator ==	Support/GetElementPtrTypeIterator.h	/^    bool operator==(const generic_gep_type_iterator& x) const {$/;"	f	class:llvm::generic_gep_type_iterator
operator ==	Support/InstIterator.h	/^  inline bool operator==(const InstIterator &y) const {$/;"	f	class:llvm::InstIterator
operator ==	Support/IntegersSubset.h	/^    bool operator==(const self &RHS) const {$/;"	f	class:llvm::IntRange
operator ==	Support/Registry.h	/^      bool operator==(const iterator &That) const { return Cur == That.Cur; }$/;"	f	class:llvm::Registry::iterator
operator ==	Support/SMLoc.h	/^  bool operator==(const SMLoc &RHS) const { return RHS.Ptr == Ptr; }$/;"	f	class:llvm::SMLoc
operator ==	Support/StringPool.h	/^    inline bool operator==(const PooledStringPtr &That) { return S == That.S; }$/;"	f	class:llvm::PooledStringPtr
operator ==	Support/TargetRegistry.h	/^      bool operator==(const iterator &x) const {$/;"	f	class:llvm::TargetRegistry::iterator
operator ==	Support/TimeValue.h	/^    int operator == (const TimeValue &that) const {$/;"	f	class:llvm::sys::TimeValue
operator ==	Support/YAMLParser.h	/^  bool operator ==(const document_iterator &Other) {$/;"	f	class:llvm::yaml::document_iterator
operator ==	Support/system_error.h	/^  bool operator==(const error_category& _rhs) const {return this == &_rhs;}$/;"	f	class:llvm::error_category
operator ==	Support/system_error.h	/^inline bool operator==(const error_code& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator ==	Support/system_error.h	/^inline bool operator==(const error_code& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator ==	Support/system_error.h	/^inline bool operator==(const error_condition& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator ==	Support/system_error.h	/^inline bool operator==(const error_condition& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator ==	Transforms/Utils/AddrModeMatcher.h	/^  bool operator==(const ExtAddrMode& O) const {$/;"	f	struct:llvm::ExtAddrMode
operator ==	Use.h	/^  bool operator==(const _Self &x) const {$/;"	f	class:llvm::value_use_iterator
operator ==	User.h	/^    bool operator==(const value_op_iterator &x) const {$/;"	f	class:llvm::User::value_op_iterator
operator >	ADT/APSInt.h	/^  inline bool operator>(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator >	ADT/PointerIntPair.h	/^  bool operator>(const PointerIntPair &RHS) const {return Value > RHS.Value;}$/;"	f	class:llvm::PointerIntPair
operator >	ADT/StringRef.h	/^  inline bool operator>(StringRef LHS, StringRef RHS) {$/;"	f	namespace:llvm
operator >	Analysis/MemoryDependenceAnalysis.h	/^    bool operator>(const MemDepResult &M) const { return Value > M.Value; }$/;"	f	class:llvm::MemDepResult
operator >	CodeGen/ScheduleDAGILP.h	/^  bool operator>(ILPValue RHS) const {$/;"	f	struct:llvm::ILPValue
operator >	CodeGen/SlotIndexes.h	/^    bool operator>(SlotIndex other) const {$/;"	f	class:llvm::SlotIndex
operator >	CodeGen/ValueTypes.h	/^    bool operator>(const MVT& S)  const { return SimpleTy >  S.SimpleTy; }$/;"	f	class:llvm::MVT
operator >	Support/BlockFrequency.h	/^  bool operator>(const BlockFrequency &RHS) const {$/;"	f	class:llvm::BlockFrequency
operator >	Support/BranchProbability.h	/^  bool operator>(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator >	Support/CFG.h	/^  inline bool operator>(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator >	Support/TimeValue.h	/^    int operator > (const TimeValue &that) const {$/;"	f	class:llvm::sys::TimeValue
operator >=	ADT/APSInt.h	/^  inline bool operator>=(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator >=	ADT/PointerIntPair.h	/^  bool operator>=(const PointerIntPair &RHS) const {return Value >= RHS.Value;}$/;"	f	class:llvm::PointerIntPair
operator >=	ADT/StringRef.h	/^  inline bool operator>=(StringRef LHS, StringRef RHS) {$/;"	f	namespace:llvm
operator >=	CodeGen/ScheduleDAGILP.h	/^  bool operator>=(ILPValue RHS) const {$/;"	f	struct:llvm::ILPValue
operator >=	CodeGen/SlotIndexes.h	/^    bool operator>=(SlotIndex other) const {$/;"	f	class:llvm::SlotIndex
operator >=	CodeGen/ValueTypes.h	/^    bool operator>=(const MVT& S) const { return SimpleTy >= S.SimpleTy; }$/;"	f	class:llvm::MVT
operator >=	Support/BlockFrequency.h	/^  bool operator>=(const BlockFrequency &RHS) const {$/;"	f	class:llvm::BlockFrequency
operator >=	Support/BranchProbability.h	/^  bool operator>=(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator >=	Support/CFG.h	/^  inline bool operator>=(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator >=	Support/TimeValue.h	/^    int operator >= (const TimeValue &that) const {$/;"	f	class:llvm::sys::TimeValue
operator >>	ADT/APSInt.h	/^  APSInt operator>>(unsigned Amt) const {$/;"	f	class:llvm::APSInt
operator >>=	ADT/APSInt.h	/^  APSInt& operator>>=(unsigned Amt) {$/;"	f	class:llvm::APSInt
operator ArrayRef<EltTy>	ADT/TinyPtrVector.h	/^  operator ArrayRef<EltTy>() const {$/;"	f	class:llvm::TinyPtrVector
operator ArrayRef<unsigned>	CodeGen/RegisterClassInfo.h	/^    operator ArrayRef<unsigned>() const {$/;"	f	struct:llvm::RegisterClassInfo::RCInfo
operator Constant*	Support/IntegersSubset.h	/^  operator Constant*() { return Holder; }$/;"	f	class:llvm::IntegersSubset
operator DataType	Support/CommandLine.h	/^  operator DataType() const { return getValue(); }$/;"	f	class:llvm::cl::opt_storage
operator DataType	Support/CommandLine.h	/^  operator DataType() const { return this->getValue(); }$/;"	f	class:llvm::cl::opt_storage
operator LockFileState	Support/LockFileManager.h	/^  operator LockFileState() const { return getState(); }$/;"	f	class:llvm::LockFileManager
operator MDNode *	DebugInfo.h	/^    operator MDNode *() const { return const_cast<MDNode*>(DbgNode); }$/;"	f	class:llvm::DIDescriptor
operator MachineBasicBlock::iterator	CodeGen/MachineInstrBuilder.h	/^  operator MachineBasicBlock::iterator() const { return MI; }$/;"	f	class:llvm::MachineInstrBuilder
operator MachineInstr*	CodeGen/MachineInstrBuilder.h	/^  operator MachineInstr*() const { return MI; }$/;"	f	class:llvm::MachineInstrBuilder
operator R	ADT/StringSwitch.h	/^  operator R() const {$/;"	f	class:llvm::StringSwitch
operator StringRef	ADT/SmallString.h	/^  operator StringRef() const { return str(); }$/;"	f	class:llvm::SmallString
operator T	ADT/PackedVector.h	/^    operator T() const {$/;"	f	class:llvm::PackedVector::reference
operator T&	ADT/FoldingSet.h	/^  operator T&() { return data; }$/;"	f	class:llvm::FoldingSetNodeWrapper
operator Ty*	CodeGen/MachineBasicBlock.h	/^    operator Ty*() const { return MII; }$/;"	f	class:llvm::MachineBasicBlock::bundle_iterator
operator Value*	Support/ValueHandle.h	/^  operator Value*() const {$/;"	f	class:llvm::CallbackVH
operator Value*	Support/ValueHandle.h	/^  operator Value*() const {$/;"	f	class:llvm::WeakVH
operator Value*	Use.h	/^  operator Value*() const { return Val; }$/;"	f	class:llvm::Use
operator ValueT*	Support/YAMLParser.h	/^  operator ValueT*() const {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator ValueTy*	Support/ValueHandle.h	/^  operator ValueTy*() const {$/;"	f	class:llvm::AssertingVH
operator ValueTy*	Support/ValueHandle.h	/^  operator ValueTy*() const {$/;"	f	class:llvm::TrackingVH
operator []	ADT/APInt.h	/^  bool operator[](unsigned bitPosition) const {$/;"	f	class:llvm::APInt
operator []	ADT/ArrayRef.h	/^    T &operator[](size_t Index) const {$/;"	f	class:llvm::MutableArrayRef
operator []	ADT/ArrayRef.h	/^    const T &operator[](size_t Index) const {$/;"	f	class:llvm::ArrayRef
operator []	ADT/BitVector.h	/^  bool operator[](unsigned Idx) const {$/;"	f	class:llvm::BitVector
operator []	ADT/BitVector.h	/^  reference operator[](unsigned Idx) {$/;"	f	class:llvm::BitVector
operator []	ADT/DenseMap.h	/^  ValueT &operator[](KeyT &&Key) {$/;"	f	class:llvm::DenseMapBase
operator []	ADT/DenseMap.h	/^  ValueT &operator[](const KeyT &Key) {$/;"	f	class:llvm::DenseMapBase
operator []	ADT/IndexedMap.h	/^    typename StorageT::const_reference operator[](IndexT n) const {$/;"	f	class:llvm::IndexedMap
operator []	ADT/IndexedMap.h	/^    typename StorageT::reference operator[](IndexT n) {$/;"	f	class:llvm::IndexedMap
operator []	ADT/IntEqClasses.h	/^  unsigned operator[](unsigned a) const {$/;"	f	class:llvm::IntEqClasses
operator []	ADT/MapVector.h	/^  ValueT &operator[](const KeyT &Key) {$/;"	f	class:llvm::MapVector
operator []	ADT/OwningPtr.h	/^  T &operator[](std::ptrdiff_t i) const {$/;"	f	class:llvm::OwningArrayPtr
operator []	ADT/PackedVector.h	/^  T operator[](unsigned Idx) const {$/;"	f	class:llvm::PackedVector
operator []	ADT/PackedVector.h	/^  reference operator[](unsigned Idx) {$/;"	f	class:llvm::PackedVector
operator []	ADT/STLExtras.h	/^  reference operator[](difference_type n) const { return *(*this + n); }$/;"	f	class:llvm::mapped_iterator
operator []	ADT/SetVector.h	/^  const_reference operator[](size_type n) const {$/;"	f	class:llvm::SetVector
operator []	ADT/SmallBitVector.h	/^  bool operator[](unsigned Idx) const {$/;"	f	class:llvm::SmallBitVector
operator []	ADT/SmallBitVector.h	/^  reference operator[](unsigned Idx) {$/;"	f	class:llvm::SmallBitVector
operator []	ADT/SmallVector.h	/^  const_reference operator[](unsigned idx) const {$/;"	f	class:llvm::SmallVectorTemplateCommon
operator []	ADT/SmallVector.h	/^  reference operator[](unsigned idx) {$/;"	f	class:llvm::SmallVectorTemplateCommon
operator []	ADT/SparseSet.h	/^  ValueT &operator[](const KeyT &Key) {$/;"	f	class:llvm::SparseSet
operator []	ADT/StringMap.h	/^  ValueTy &operator[](StringRef Key) {$/;"	f	class:llvm::StringMap
operator []	ADT/StringRef.h	/^    char operator[](size_t Index) const {$/;"	f	class:llvm::StringRef
operator []	ADT/TinyPtrVector.h	/^  EltTy operator[](unsigned i) const {$/;"	f	class:llvm::TinyPtrVector
operator []	ADT/UniqueVector.h	/^  const T &operator[](unsigned ID) const {$/;"	f	class:llvm::UniqueVector
operator []	ADT/ValueMap.h	/^  ValueT &operator[](const KeyT &Key) {$/;"	f	class:llvm::ValueMap
operator []	Analysis/CallGraph.h	/^  CallGraphNode *operator[](unsigned i) const {$/;"	f	class:llvm::CallGraphNode
operator []	Analysis/CallGraph.h	/^  inline CallGraphNode *operator[](const Function *F) {$/;"	f	class:llvm::CallGraph
operator []	Analysis/CallGraph.h	/^  inline const CallGraphNode *operator[](const Function *F) const {$/;"	f	class:llvm::CallGraph
operator []	Analysis/Dominators.h	/^  inline DomTreeNode *operator[](BasicBlock *BB) const {$/;"	f	class:llvm::DominatorTree
operator []	Analysis/LoopInfo.h	/^  const LoopT *operator[](const BlockT *BB) const {$/;"	f	class:llvm::LoopInfoBase
operator []	Analysis/LoopInfo.h	/^  inline const Loop *operator[](const BasicBlock *BB) const {$/;"	f	class:llvm::LoopInfo
operator []	Analysis/PostDominators.h	/^  inline DomTreeNode *operator[](BasicBlock *BB) const {$/;"	f	struct:llvm::PostDominatorTree
operator []	Analysis/Trace.h	/^  BasicBlock *operator[](unsigned i) const { return BasicBlocks[i]; }$/;"	f	class:llvm::Trace
operator []	CodeGen/MachineDominators.h	/^  inline MachineDomTreeNode *operator[](MachineBasicBlock *BB) const {$/;"	f	class:llvm::MachineDominatorTree
operator []	CodeGen/MachineLoopInfo.h	/^  inline const MachineLoop *operator[](const MachineBasicBlock *BB) const {$/;"	f	class:llvm::MachineLoopInfo
operator []	CodeGen/MachinePostDominators.h	/^  MachineDomTreeNode *operator[](MachineBasicBlock *BB) const {$/;"	f	struct:llvm::MachinePostDominatorTree
operator []	CodeGen/PBQP/Math.h	/^    PBQPNum& operator[](unsigned index) {$/;"	f	class:PBQP::Vector
operator []	CodeGen/PBQP/Math.h	/^    PBQPNum* operator[](unsigned r) {$/;"	f	class:PBQP::Matrix
operator []	CodeGen/PBQP/Math.h	/^    const PBQPNum& operator[](unsigned index) const {$/;"	f	class:PBQP::Vector
operator []	CodeGen/PBQP/Math.h	/^    const PBQPNum* operator[](unsigned r) const {$/;"	f	class:PBQP::Matrix
operator []	CodeGen/ScheduleDAGInstrs.h	/^    std::vector<PhysRegSUOper> &operator[](unsigned Reg) {$/;"	f	class:llvm::Reg2SUnitsMap
operator []	CodeGen/ScoreboardHazardRecognizer.h	/^    unsigned& operator[](size_t idx) const {$/;"	f	class:llvm::ScoreboardHazardRecognizer::Scoreboard
operator []	MC/MCRegisterInfo.h	/^  const MCRegisterDesc &operator[](unsigned RegNo) const {$/;"	f	class:llvm::MCRegisterInfo
operator []	Support/OutputBuffer.h	/^    const unsigned char &operator[](unsigned Index) const {$/;"	f	class:llvm::OutputBuffer
operator []	Support/OutputBuffer.h	/^    unsigned char &operator[](unsigned Index) {$/;"	f	class:llvm::OutputBuffer
operator []	TypeFinder.h	/^  StructType *&operator[](unsigned Idx) { return StructTypes[Idx]; }$/;"	f	class:llvm::TypeFinder
operator ^	ADT/APInt.h	/^  APInt operator^(const APInt& RHS) const {$/;"	f	class:llvm::APInt
operator ^	ADT/APSInt.h	/^  APSInt operator^(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator ^	ADT/SmallBitVector.h	/^operator^(const SmallBitVector &LHS, const SmallBitVector &RHS) {$/;"	f	namespace:llvm
operator ^=	ADT/APSInt.h	/^  APSInt& operator^=(const APSInt& RHS) {$/;"	f	class:llvm::APSInt
operator ^=	ADT/BitVector.h	/^  BitVector &operator^=(const BitVector &RHS) {$/;"	f	class:llvm::BitVector
operator ^=	ADT/SmallBitVector.h	/^  SmallBitVector &operator^=(const SmallBitVector &RHS) {$/;"	f	class:llvm::SmallBitVector
operator bool	ADT/BitVector.h	/^    operator bool() const {$/;"	f	class:llvm::BitVector::reference
operator bool	ADT/InMemoryStruct.h	/^  operator bool() const { return Target != 0; }$/;"	f	class:llvm::InMemoryStruct
operator bool	ADT/IntervalMap.h	/^  operator bool() const { return pip.getOpaqueValue(); }$/;"	f	class:llvm::IntervalMapImpl::NodeRef
operator bool	ADT/Optional.h	/^  operator bool() const { return hasVal; }$/;"	f	class:llvm::Optional
operator bool	ADT/OwningPtr.h	/^  operator bool() const { return Ptr != 0; }$/;"	f	class:llvm::OwningArrayPtr
operator bool	ADT/OwningPtr.h	/^  operator bool() const { return Ptr != 0; }$/;"	f	class:llvm::OwningPtr
operator bool	ADT/PointerUnion.h	/^    operator bool() const { return !isNull(); }$/;"	f	class:llvm::PointerUnion3
operator bool	ADT/PointerUnion.h	/^    operator bool() const { return !isNull(); }$/;"	f	class:llvm::PointerUnion4
operator bool	ADT/SmallBitVector.h	/^    operator bool() const {$/;"	f	class:llvm::SmallBitVector::reference
operator bool	Analysis/InlineCost.h	/^    operator bool() const {$/;"	f	class:llvm::InlineCost
operator bool	CodeGen/SlotIndexes.h	/^    operator bool() const { return isValid(); }$/;"	f	class:llvm::SlotIndex
operator bool	Support/CallSite.h	/^  operator bool() const { return I.getPointer(); }$/;"	f	class:llvm::CallSiteBase
operator bool	Support/StringPool.h	/^    inline operator bool() const { return S != 0; }$/;"	f	class:llvm::PooledStringPtr
operator const APInt&	Support/IntegersSubset.h	/^  operator const APInt&() const {$/;"	f	class:llvm::IntItem
operator const Constant*	Support/IntegersSubset.h	/^  operator const Constant*() const { return Holder; }$/;"	f	class:llvm::IntegersSubset
operator const SDValue&	CodeGen/SelectionDAGNodes.h	/^  operator const SDValue&() const { return Val; }$/;"	f	class:llvm::SDUse
operator const T&	ADT/FoldingSet.h	/^  operator const T&() const { return data; }$/;"	f	class:llvm::FoldingSetNodeWrapper
operator delete	MC/MCContext.h	/^inline void operator delete(void *Ptr, llvm::MCContext &C, size_t)$/;"	f
operator delete	Support/Allocator.h	/^inline void operator delete(void *, llvm::BumpPtrAllocator &) {}$/;"	f
operator delete	Support/RecyclingAllocator.h	/^inline void operator delete(void *E,$/;"	f
operator delete	Support/YAMLParser.h	/^  void operator delete(void *) throw() {}$/;"	f	class:llvm::yaml::Node
operator delete	Support/YAMLParser.h	/^  void operator delete(void *Ptr, BumpPtrAllocator &Alloc, size_t) throw() {$/;"	f	class:llvm::yaml::Node
operator delete	User.h	/^  void operator delete(void*, unsigned) {$/;"	f	class:llvm::User
operator delete	User.h	/^  void operator delete(void*, unsigned, bool) {$/;"	f	class:llvm::User
operator delete[]	MC/MCContext.h	/^inline void operator delete[](void *Ptr, llvm::MCContext &C) throw () {$/;"	f
operator int	Object/Error.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::object::object_error
operator int	Support/FileSystem.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::sys::fs::copy_option
operator int	Support/FileSystem.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::sys::fs::file_magic
operator int	Support/FileSystem.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::sys::fs::file_type
operator int	Support/system_error.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::errc
operator int	Support/system_error.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::windows_error
operator new	Constants.h	/^  void *operator new(size_t s) { return User::operator new(s, 2); }$/;"	f	class:llvm::BlockAddress
operator new	Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantAggregateZero
operator new	Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantDataArray
operator new	Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantDataSequential
operator new	Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantDataVector
operator new	Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantFP
operator new	Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantInt
operator new	Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ConstantPointerNull
operator new	Constants.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::UndefValue
operator new	GlobalAlias.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::GlobalAlias
operator new	GlobalVariable.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::GlobalVariable
operator new	InstrTypes.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::BinaryOperator
operator new	InstrTypes.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::CmpInst
operator new	InstrTypes.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::UnaryInstruction
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::AtomicCmpXchgInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::AtomicRMWInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ExtractValueInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::FenceInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::IndirectBrInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::InsertValueInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::LandingPadInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::PHINode
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ShuffleVectorInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::StoreInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::SwitchInst
operator new	Instructions.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::UnreachableInst
operator new	MC/MCContext.h	/^inline void *operator new(size_t Bytes, llvm::MCContext &C,$/;"	f
operator new	Support/Allocator.h	/^inline void *operator new(size_t Size, llvm::BumpPtrAllocator &Allocator) {$/;"	f
operator new	Support/RecyclingAllocator.h	/^inline void *operator new(size_t,$/;"	f
operator new	Support/YAMLParser.h	/^  void *operator new ( size_t Size$/;"	f	class:llvm::yaml::Node
operator new[]	MC/MCContext.h	/^inline void *operator new[](size_t Bytes, llvm::MCContext& C,$/;"	f
operator pointer	ADT/ilist.h	/^  operator pointer() const {$/;"	f	class:llvm::ilist_iterator
operator size_t	ADT/Hashing.h	/^  \/*explicit*\/ operator size_t() const { return value; }$/;"	f	class:llvm::hash_code
operator std::pair<KeyT, ValueT>	ADT/ValueMap.h	/^    operator std::pair<KeyT, ValueT>() const {$/;"	f	struct:llvm::ValueMapConstIterator::ValueTypeProxy
operator std::pair<KeyT, ValueT>	ADT/ValueMap.h	/^    operator std::pair<KeyT, ValueT>() const {$/;"	f	struct:llvm::ValueMapIterator::ValueTypeProxy
operator std::string	ADT/StringRef.h	/^    operator std::string() const {$/;"	f	class:llvm::StringRef
operator std::vector<T>	ADT/ArrayRef.h	/^    operator std::vector<T>() const {$/;"	f	class:llvm::ArrayRef
operator unsigned	ADT/Statistic.h	/^  operator unsigned() const { return Value; }$/;"	f	class:llvm::Statistic
operator unspecified_bool_type	ADT/IntrusiveRefCntPtr.h	/^    operator unspecified_bool_type() const {$/;"	f	class:llvm::IntrusiveRefCntPtr
operator unspecified_bool_type	Support/system_error.h	/^  operator unspecified_bool_type() const { \/\/ true if error$/;"	f	class:llvm::error_code
operator unspecified_bool_type	Support/system_error.h	/^  operator unspecified_bool_type() const { \/\/ true if error$/;"	f	class:llvm::error_condition
operator value_type	Support/Endian.h	/^  operator value_type() const {$/;"	f	class:llvm::support::detail::packed_endian_specific_integral
operator value_type	Support/type_traits.h	/^  operator value_type() { return value; }$/;"	f	struct:llvm::integral_constant
operator |	ADT/APInt.h	/^  APInt operator|(const APInt& RHS) const {$/;"	f	class:llvm::APInt
operator |	ADT/APSInt.h	/^  APSInt operator|(const APSInt& RHS) const {$/;"	f	class:llvm::APSInt
operator |	ADT/SmallBitVector.h	/^operator|(const SmallBitVector &LHS, const SmallBitVector &RHS) {$/;"	f	namespace:llvm
operator |	ADT/SparseBitVector.h	/^operator|(const SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:llvm
operator |	Support/FileSystem.h	/^inline perms operator|(perms l , perms r) {$/;"	f	namespace:llvm::sys::fs
operator |	Transforms/Utils/ValueMapper.h	/^  static inline RemapFlags operator|(RemapFlags LHS, RemapFlags RHS) {$/;"	f	namespace:llvm
operator |=	ADT/APInt.h	/^  APInt& operator|=(uint64_t RHS) {$/;"	f	class:llvm::APInt
operator |=	ADT/APSInt.h	/^  APSInt& operator|=(const APSInt& RHS) {$/;"	f	class:llvm::APSInt
operator |=	ADT/BitVector.h	/^  BitVector &operator|=(const BitVector &RHS) {$/;"	f	class:llvm::BitVector
operator |=	ADT/PackedVector.h	/^  PackedVector &operator|=(const PackedVector &RHS) {$/;"	f	class:llvm::PackedVector
operator |=	ADT/SmallBitVector.h	/^  SmallBitVector &operator|=(const SmallBitVector &RHS) {$/;"	f	class:llvm::SmallBitVector
operator |=	ADT/SparseBitVector.h	/^  bool operator|=(const SparseBitVector &RHS) {$/;"	f	class:llvm::SparseBitVector
operator |=	ADT/SparseBitVector.h	/^inline bool operator |=(SparseBitVector<ElementSize> &LHS,$/;"	f	namespace:llvm
operator |=	ADT/SparseBitVector.h	/^inline bool operator |=(SparseBitVector<ElementSize> *LHS,$/;"	f	namespace:llvm
operator |=	Support/FileSystem.h	/^inline perms &operator|=(perms &l, perms r) {$/;"	f	namespace:llvm::sys::fs
operator ~	ADT/APInt.h	/^  APInt operator~() const {$/;"	f	class:llvm::APInt
operator ~	ADT/APSInt.h	/^  APSInt operator~() const {$/;"	f	class:llvm::APSInt
operator ~	ADT/SmallBitVector.h	/^  SmallBitVector operator~() const {$/;"	f	class:llvm::SmallBitVector
operator ~	Support/FileSystem.h	/^inline perms operator~(perms x) {$/;"	f	namespace:llvm::sys::fs
opt	Support/CommandLine.h	/^  explicit opt(const M0t &M0) : Option(Optional, NotHidden) {$/;"	f	class:llvm::cl::opt
opt	Support/CommandLine.h	/^  opt(const M0t &M0, const M1t &M1) : Option(Optional, NotHidden) {$/;"	f	class:llvm::cl::opt
opt	Support/CommandLine.h	/^  opt(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3,$/;"	f	class:llvm::cl::opt
opt	Support/CommandLine.h	/^  opt(const M0t &M0, const M1t &M1, const M2t &M2,$/;"	f	class:llvm::cl::opt
opt	Support/CommandLine.h	/^  opt(const M0t &M0, const M1t &M1,$/;"	f	class:llvm::cl::opt
opt	Support/CommandLine.h	/^  static void opt(FormattingFlags FF, Option &O) { O.setFormattingFlag(FF); }$/;"	f	struct:llvm::cl::applicator
opt	Support/CommandLine.h	/^  static void opt(MiscFlags MF, Option &O) { O.setMiscFlag(MF); }$/;"	f	struct:llvm::cl::applicator
opt	Support/CommandLine.h	/^  static void opt(NumOccurrencesFlag NO, Option &O) {$/;"	f	struct:llvm::cl::applicator
opt	Support/CommandLine.h	/^  static void opt(OptionHidden OH, Option &O) { O.setHiddenFlag(OH); }$/;"	f	struct:llvm::cl::applicator
opt	Support/CommandLine.h	/^  static void opt(ValueExpected VE, Option &O) { O.setValueExpectedFlag(VE); }$/;"	f	struct:llvm::cl::applicator
opt	Support/CommandLine.h	/^  static void opt(const Mod &M, Opt &O) { M.apply(O); }$/;"	f	struct:llvm::cl::applicator
opt	Support/CommandLine.h	/^  static void opt(const char *Str, Opt &O) { O.setArgStr(Str); }$/;"	f	struct:llvm::cl::applicator
opt	Support/CommandLine.h	/^class opt : public Option,$/;"	c	namespace:llvm::cl
opt_storage	Support/CommandLine.h	/^  opt_storage() : Location(0) {}$/;"	f	class:llvm::cl::opt_storage
opt_storage	Support/CommandLine.h	/^  opt_storage() : Value(DataType()) {}$/;"	f	class:llvm::cl::opt_storage
opt_storage	Support/CommandLine.h	/^class opt_storage {$/;"	c	namespace:llvm::cl
opt_storage	Support/CommandLine.h	/^class opt_storage<DataType, false, false> {$/;"	c	namespace:llvm::cl
opt_storage	Support/CommandLine.h	/^class opt_storage<DataType,false,true> : public DataType {$/;"	c	namespace:llvm::cl
optimalList	CodeGen/PBQP/HeuristicBase.h	/^    OptimalList optimalList;$/;"	m	class:PBQP::HeuristicBase
optimalReduce	CodeGen/PBQP/HeuristicBase.h	/^    bool optimalReduce() {$/;"	f	class:PBQP::HeuristicBase
optimize	Support/IntegersSubsetMapping.h	/^  void optimize() {$/;"	f	class:llvm::IntegersSubsetMapping
optimizeCompareInstr	Target/TargetInstrInfo.h	/^  virtual bool optimizeCompareInstr(MachineInstr *CmpInstr,$/;"	f	class:llvm::TargetInstrInfo
optimizeLoadInstr	Target/TargetInstrInfo.h	/^  virtual MachineInstr* optimizeLoadInstr(MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
optimizeSelect	Target/TargetInstrInfo.h	/^  virtual MachineInstr *optimizeSelect(MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
os	Support/ToolOutputFile.h	/^  raw_fd_ostream &os() { return OS; }$/;"	f	class:llvm::tool_output_file
others_all	Support/FileSystem.h	/^  others_all   = others_read | others_write | others_exe, $/;"	e	enum:llvm::sys::fs::perms
others_exe	Support/FileSystem.h	/^  others_exe   =   01, $/;"	e	enum:llvm::sys::fs::perms
others_read	Support/FileSystem.h	/^  others_read  =   04, $/;"	e	enum:llvm::sys::fs::perms
others_write	Support/FileSystem.h	/^  others_write =   02, $/;"	e	enum:llvm::sys::fs::perms
out_of_paper	Support/system_error.h	/^  out_of_paper            = 28, \/\/ ERROR_OUT_OF_PAPER,$/;"	e	enum:llvm::windows_error::_
outaddr	Support/OutputBuffer.h	/^    void outaddr(uint64_t X) {$/;"	f	class:llvm::OutputBuffer
outaddr32	Support/OutputBuffer.h	/^    void outaddr32(unsigned X) {$/;"	f	class:llvm::OutputBuffer
outaddr64	Support/OutputBuffer.h	/^    void outaddr64(uint64_t X) {$/;"	f	class:llvm::OutputBuffer
outbyte	Support/OutputBuffer.h	/^    void outbyte(unsigned char X) {$/;"	f	class:llvm::OutputBuffer
outhalf	Support/OutputBuffer.h	/^    void outhalf(unsigned short X) {$/;"	f	class:llvm::OutputBuffer
outofmemory	Support/system_error.h	/^  outofmemory             = 14, \/\/ ERROR_OUTOFMEMORY,$/;"	e	enum:llvm::windows_error::_
outputDep	LDDProfilingCommon.h	/^    size_t outputDep;$/;"	m	struct:dInfo
outstring	Support/OutputBuffer.h	/^    void outstring(const std::string &S, unsigned Length) {$/;"	f	class:llvm::OutputBuffer
outword	Support/OutputBuffer.h	/^    void outword(unsigned X) {$/;"	f	class:llvm::OutputBuffer
outxword	Support/OutputBuffer.h	/^    void outxword(uint64_t X) {$/;"	f	class:llvm::OutputBuffer
overflow	ADT/IntervalMap.h	/^iterator::overflow(unsigned Level) {$/;"	f	class:llvm::IntervalMap::iterator
overlaps	CodeGen/LiveInterval.h	/^    bool overlaps(const LiveInterval& other) const {$/;"	f	class:llvm::LiveInterval
overlaps	CodeGen/ScheduleDAG.h	/^    bool overlaps(const SDep &Other) const {$/;"	f	class:llvm::SDep
overwrite_if_exists	Support/FileSystem.h	/^    overwrite_if_exists$/;"	e	enum:llvm::sys::fs::copy_option::_
owner_all	Support/FileSystem.h	/^  owner_all    = owner_read | owner_write | owner_exe,$/;"	e	enum:llvm::sys::fs::perms
owner_dead	Support/system_error.h	/^  owner_dead                          = EOWNERDEAD,$/;"	e	enum:llvm::errc::_
owner_exe	Support/FileSystem.h	/^  owner_exe    = 0100, $/;"	e	enum:llvm::sys::fs::perms
owner_read	Support/FileSystem.h	/^  owner_read   = 0400, $/;"	e	enum:llvm::sys::fs::perms
owner_write	Support/FileSystem.h	/^  owner_write  = 0200, $/;"	e	enum:llvm::sys::fs::perms
ownsAllocator	ADT/ImmutableList.h	/^  bool ownsAllocator() const {$/;"	f	class:llvm::ImmutableListFactory
ownsAllocator	ADT/ImmutableSet.h	/^  bool ownsAllocator() const {$/;"	f	class:llvm::ImutAVLFactory
p	Object/ObjectFile.h	/^  uintptr_t p;$/;"	m	union:llvm::object::DataRefImpl
pImpl	LLVMContext.h	/^  LLVMContextImpl *const pImpl;$/;"	m	class:llvm::LLVMContext
pImpl	PassRegistry.h	/^  mutable void *pImpl;$/;"	m	class:llvm::PassRegistry
pVal	ADT/APInt.h	/^    uint64_t *pVal;  \/\/\/< Used to store the >64 bits integer value.$/;"	m	union:llvm::APInt::__anon7
p_align	Object/ELF.h	/^  Elf_Word p_align;  \/\/ Segment alignment constraint$/;"	m	struct:llvm::object::Elf_Phdr
p_align	Support/ELF.h	/^  Elf32_Word p_align;  \/\/ Segment alignment constraint$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_align	Support/ELF.h	/^  Elf64_Xword  p_align;  \/\/ Segment alignment constraint$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_filesz	Object/ELF.h	/^  Elf_Word p_filesz; \/\/ Num. of bytes in file image of segment (may be zero)$/;"	m	struct:llvm::object::Elf_Phdr
p_filesz	Support/ELF.h	/^  Elf32_Word p_filesz; \/\/ Num. of bytes in file image of segment (may be zero)$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_filesz	Support/ELF.h	/^  Elf64_Xword  p_filesz; \/\/ Num. of bytes in file image of segment (may be zero)$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_flags	Object/ELF.h	/^  Elf_Word p_flags;  \/\/ Segment flags$/;"	m	struct:llvm::object::Elf_Phdr
p_flags	Support/ELF.h	/^  Elf32_Word p_flags;  \/\/ Segment flags$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_flags	Support/ELF.h	/^  Elf64_Word   p_flags;  \/\/ Segment flags$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_memsz	Object/ELF.h	/^  Elf_Word p_memsz;  \/\/ Num. of bytes in mem image of segment (may be zero)$/;"	m	struct:llvm::object::Elf_Phdr
p_memsz	Support/ELF.h	/^  Elf32_Word p_memsz;  \/\/ Num. of bytes in mem image of segment (may be zero)$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_memsz	Support/ELF.h	/^  Elf64_Xword  p_memsz;  \/\/ Num. of bytes in mem image of segment (may be zero)$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_offset	Object/ELF.h	/^  Elf_Off  p_offset; \/\/ FileOffset where segment is located, in bytes$/;"	m	struct:llvm::object::Elf_Phdr
p_offset	Support/ELF.h	/^  Elf32_Off  p_offset; \/\/ File offset where segment is located, in bytes$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_offset	Support/ELF.h	/^  Elf64_Off    p_offset; \/\/ File offset where segment is located, in bytes$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_paddr	Object/ELF.h	/^  Elf_Addr p_paddr;  \/\/ Physical address of beginning of segment (OS-specific)$/;"	m	struct:llvm::object::Elf_Phdr
p_paddr	Support/ELF.h	/^  Elf32_Addr p_paddr;  \/\/ Physical address of beginning of segment (OS-specific)$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_paddr	Support/ELF.h	/^  Elf64_Addr   p_paddr;  \/\/ Physical address of beginning of segment (OS-specific)$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_type	Object/ELF.h	/^  Elf_Word p_type;   \/\/ Type of segment$/;"	m	struct:llvm::object::Elf_Phdr
p_type	Support/ELF.h	/^  Elf32_Word p_type;   \/\/ Type of segment$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_type	Support/ELF.h	/^  Elf64_Word   p_type;   \/\/ Type of segment$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_vaddr	Object/ELF.h	/^  Elf_Addr p_vaddr;  \/\/ Virtual Address of beginning of segment $/;"	m	struct:llvm::object::Elf_Phdr
p_vaddr	Support/ELF.h	/^  Elf32_Addr p_vaddr;  \/\/ Virtual address of beginning of segment$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_vaddr	Support/ELF.h	/^  Elf64_Addr   p_vaddr;  \/\/ Virtual address of beginning of segment$/;"	m	struct:llvm::ELF::Elf64_Phdr
packed_endian_specific_integral	Support/Endian.h	/^class packed_endian_specific_integral<value_type, big, aligned> {$/;"	c	namespace:llvm::support::detail
packed_endian_specific_integral	Support/Endian.h	/^class packed_endian_specific_integral<value_type, big, unaligned> {$/;"	c	namespace:llvm::support::detail
packed_endian_specific_integral	Support/Endian.h	/^class packed_endian_specific_integral<value_type, little, aligned> {$/;"	c	namespace:llvm::support::detail
packed_endian_specific_integral	Support/Endian.h	/^class packed_endian_specific_integral<value_type, little, unaligned> {$/;"	c	namespace:llvm::support::detail
paramHasAttr	Attributes.h	/^  bool paramHasAttr(unsigned Idx, Attributes Attr) const {$/;"	f	class:llvm::AttrListPtr
paramHasAttr	Support/CallSite.h	/^  bool paramHasAttr(unsigned i, Attributes::AttrVal A) const {$/;"	f	class:llvm::CallSiteBase
param_begin	DerivedTypes.h	/^  param_iterator param_begin() const { return ContainedTys + 1; }$/;"	f	class:llvm::FunctionType
param_end	DerivedTypes.h	/^  param_iterator param_end() const { return &ContainedTys[NumContainedTys]; }$/;"	f	class:llvm::FunctionType
param_iterator	DerivedTypes.h	/^  typedef Type::subtype_iterator param_iterator;$/;"	t	class:llvm::FunctionType
parent	Analysis/RegionInfo.h	/^  Region* parent;$/;"	m	class:llvm::RegionNode
parent	Bitcode/Archive.h	/^    Archive*            parent;   \/\/\/< Pointer to parent archive$/;"	m	class:llvm::ArchiveMember
parse	Support/CommandLine.h	/^  bool parse(Option &, StringRef, StringRef Arg, char &Value) {$/;"	f	class:llvm::cl::parser
parse	Support/CommandLine.h	/^  bool parse(Option &, StringRef, StringRef Arg, std::string &Value) {$/;"	f	class:llvm::cl::parser
parse	Support/CommandLine.h	/^  bool parse(Option &O, StringRef ArgName, StringRef Arg, DataType &V) {$/;"	f	class:llvm::cl::parser
parse_failed	Object/Error.h	/^  parse_failed,$/;"	e	enum:llvm::object::object_error::_
parser	Support/CommandLine.h	/^class parser : public generic_parser_base {$/;"	c	namespace:llvm::cl
parser	Support/CommandLine.h	/^class parser<bool> : public basic_parser<bool> {$/;"	c	namespace:llvm::cl
parser	Support/CommandLine.h	/^class parser<boolOrDefault> : public basic_parser<boolOrDefault> {$/;"	c	namespace:llvm::cl
parser	Support/CommandLine.h	/^class parser<char> : public basic_parser<char> {$/;"	c	namespace:llvm::cl
parser	Support/CommandLine.h	/^class parser<double> : public basic_parser<double> {$/;"	c	namespace:llvm::cl
parser	Support/CommandLine.h	/^class parser<float> : public basic_parser<float> {$/;"	c	namespace:llvm::cl
parser	Support/CommandLine.h	/^class parser<int> : public basic_parser<int> {$/;"	c	namespace:llvm::cl
parser	Support/CommandLine.h	/^class parser<std::string> : public basic_parser<std::string> {$/;"	c	namespace:llvm::cl
parser	Support/CommandLine.h	/^class parser<unsigned long long> : public basic_parser<unsigned long long> {$/;"	c	namespace:llvm::cl
parser	Support/CommandLine.h	/^class parser<unsigned> : public basic_parser<unsigned> {$/;"	c	namespace:llvm::cl
parser_data_type	Support/CommandLine.h	/^  typedef DataType parser_data_type;$/;"	t	class:llvm::cl::basic_parser
parser_data_type	Support/CommandLine.h	/^  typedef DataType parser_data_type;$/;"	t	class:llvm::cl::parser
part	ADT/APFloat.h	/^      integerPart part;$/;"	m	union:llvm::APFloat::Significand
parts	ADT/APFloat.h	/^      integerPart *parts;$/;"	m	union:llvm::APFloat::Significand
passEnumerate	PassSupport.h	/^  virtual void passEnumerate(const PassInfo *) {}$/;"	f	struct:llvm::PassRegistrationListener
passEnumerate	Support/PassNameParser.h	/^  virtual void passEnumerate(const PassInfo *P) { passRegistered(P); }$/;"	f	class:llvm::PassNameParser
passRegistered	PassSupport.h	/^  virtual void passRegistered(const PassInfo *) {}$/;"	f	struct:llvm::PassRegistrationListener
passRegistered	Support/PassNameParser.h	/^  virtual void passRegistered(const PassInfo *P) {$/;"	f	class:llvm::PassNameParser
path	ADT/IntervalMap.h	/^  IntervalMapImpl::Path path;$/;"	m	class:llvm::IntervalMap::const_iterator
path	ADT/IntervalMap.h	/^  SmallVector<Entry, 4> path;$/;"	m	class:llvm::IntervalMapImpl::Path
path	Bitcode/Archive.h	/^    sys::PathWithStatus path;     \/\/\/< Path of file containing the member$/;"	m	class:llvm::ArchiveMember
path	Support/FileSystem.h	/^  const std::string &path() const { return Path; }$/;"	f	class:llvm::sys::fs::directory_entry
path	Support/MachO.h	/^      uint32_t path;$/;"	m	struct:llvm::MachO::rpath_command
path	Support/PathV1.h	/^      mutable std::string path;   \/\/\/< Storage for the path name.$/;"	m	class:llvm::sys::Path
path	Support/PathV2.h	/^namespace path {$/;"	n	namespace:llvm::sys
pathCounter	Analysis/ProfileInfoTypes.h	/^  unsigned pathCounter;$/;"	m	struct:__anon27
pathFillFind	ADT/IntervalMap.h	/^const_iterator::pathFillFind(KeyT x) {$/;"	f	class:llvm::IntervalMap::const_iterator
pathNumber	Analysis/ProfileInfoTypes.h	/^  unsigned pathNumber;$/;"	m	struct:__anon27
path_not_found	Support/system_error.h	/^  path_not_found          = 3, \/\/ ERROR_PATH_NOT_FOUND,$/;"	e	enum:llvm::windows_error::_
pecoff_executable	Support/FileSystem.h	/^    pecoff_executable         \/\/\/< PECOFF executable file$/;"	e	enum:llvm::sys::fs::file_magic::_
permission_denied	Support/system_error.h	/^  permission_denied                   = EACCES,$/;"	e	enum:llvm::errc::_
permissions	Support/FileSystem.h	/^  perms permissions() const { return Perms; }$/;"	f	class:llvm::sys::fs::file_status
permissions	Support/FileSystem.h	/^  void permissions(perms p) { Perms = p; }$/;"	f	class:llvm::sys::fs::file_status
perms	Support/FileSystem.h	/^enum perms {$/;"	g	namespace:llvm::sys::fs
perms_mask	Support/FileSystem.h	/^  perms_mask      = all_all | set_uid_on_exe | set_gid_on_exe | sticky_bit, $/;"	e	enum:llvm::sys::fs::perms
perms_not_known	Support/FileSystem.h	/^  perms_not_known = 0xFFFF,$/;"	e	enum:llvm::sys::fs::perms
pip	ADT/IntervalMap.h	/^  PointerIntPair<void*, Log2CacheLine, unsigned, CacheAlignedPointerTraits> pip;$/;"	m	class:llvm::IntervalMapImpl::NodeRef
po_begin	ADT/PostOrderIterator.h	/^po_iterator<T> po_begin(T G) { return po_iterator<T>::begin(G); }$/;"	f	namespace:llvm
po_end	ADT/PostOrderIterator.h	/^po_iterator<T> po_end  (T G) { return po_iterator<T>::end(G); }$/;"	f	namespace:llvm
po_ext_begin	ADT/PostOrderIterator.h	/^po_ext_iterator<T, SetType> po_ext_begin(T G, SetType &S) {$/;"	f	namespace:llvm
po_ext_end	ADT/PostOrderIterator.h	/^po_ext_iterator<T, SetType> po_ext_end(T G, SetType &S) {$/;"	f	namespace:llvm
po_ext_iterator	ADT/PostOrderIterator.h	/^  po_ext_iterator(const po_iterator<T, SetType, true> &V) :$/;"	f	struct:llvm::po_ext_iterator
po_ext_iterator	ADT/PostOrderIterator.h	/^struct po_ext_iterator : public po_iterator<T, SetType, true> {$/;"	s	namespace:llvm
po_iterator	ADT/PostOrderIterator.h	/^  inline po_iterator() {} \/\/ End is when stack is empty.$/;"	f	class:llvm::po_iterator
po_iterator	ADT/PostOrderIterator.h	/^  inline po_iterator(NodeType *BB) {$/;"	f	class:llvm::po_iterator
po_iterator	ADT/PostOrderIterator.h	/^  inline po_iterator(NodeType *BB, SetType &S) :$/;"	f	class:llvm::po_iterator
po_iterator	ADT/PostOrderIterator.h	/^  inline po_iterator(SetType &S) :$/;"	f	class:llvm::po_iterator
po_iterator	ADT/PostOrderIterator.h	/^class po_iterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
po_iterator_storage	ADT/PostOrderIterator.h	/^  po_iterator_storage(SetType &VSet) : Visited(VSet) {}$/;"	f	class:llvm::po_iterator_storage
po_iterator_storage	ADT/PostOrderIterator.h	/^  po_iterator_storage(const po_iterator_storage &S) : Visited(S.Visited) {}$/;"	f	class:llvm::po_iterator_storage
po_iterator_storage	ADT/PostOrderIterator.h	/^class po_iterator_storage {$/;"	c	namespace:llvm
po_iterator_storage	ADT/PostOrderIterator.h	/^class po_iterator_storage<SetType, true> {$/;"	c	namespace:llvm
po_iterator_storage	Analysis/LoopIterator.h	/^  po_iterator_storage(LoopBlocksTraversal &lbs) : LBT(lbs) {}$/;"	f	class:llvm::po_iterator_storage
po_iterator_storage	Analysis/LoopIterator.h	/^template<> class po_iterator_storage<LoopBlocksTraversal, true> {$/;"	c	namespace:llvm
pointer	ADT/DenseMap.h	/^  typedef value_type *pointer;$/;"	t	class:llvm::DenseMapIterator
pointer	ADT/DenseSet.h	/^    typedef value_type *pointer;$/;"	t	class:llvm::DenseSet::ConstIterator
pointer	ADT/DenseSet.h	/^    typedef value_type *pointer;$/;"	t	class:llvm::DenseSet::Iterator
pointer	ADT/DepthFirstIterator.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::df_iterator
pointer	ADT/EquivalenceClasses.h	/^    typedef typename super::pointer pointer;$/;"	t	class:llvm::EquivalenceClasses::member_iterator
pointer	ADT/InMemoryStruct.h	/^  typedef value_type *pointer;$/;"	t	class:llvm::InMemoryStruct
pointer	ADT/PostOrderIterator.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::po_iterator
pointer	ADT/SCCIterator.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::scc_iterator
pointer	ADT/STLExtras.h	/^  typedef void pointer;$/;"	t	class:llvm::mapped_iterator
pointer	ADT/SmallPtrSet.h	/^  typedef PtrTy                     pointer;$/;"	t	class:llvm::SmallPtrSetIterator
pointer	ADT/SmallVector.h	/^  typedef T *pointer;$/;"	t	class:llvm::SmallVectorTemplateCommon
pointer	ADT/SparseSet.h	/^  typedef ValueT *pointer;$/;"	t	class:llvm::SparseSet
pointer	ADT/ilist.h	/^  typedef NodeTy *pointer;$/;"	t	class:llvm::iplist
pointer	ADT/ilist.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::ilist_iterator
pointer	Analysis/RegionInfo.h	/^    typedef typename super::pointer pointer;$/;"	t	class:llvm::Region::block_iterator_wrapper
pointer	Analysis/RegionIterator.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::RNSuccIterator
pointer	CodeGen/MachineRegisterInfo.h	/^                          MachineInstr, ptrdiff_t>::pointer pointer;$/;"	t	class:llvm::MachineRegisterInfo::defusechain_iterator
pointer	CodeGen/SelectionDAGNodes.h	/^                          SDUse, ptrdiff_t>::pointer pointer;$/;"	t	class:llvm::SDNode::use_iterator
pointer	Object/ELF.h	/^    typedef value_type *pointer;$/;"	t	class:llvm::object::ELFObjectFile::ELFRelocationIterator
pointer	Support/CFG.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::PredIterator
pointer	Support/CFG.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::SuccIterator
pointer	Support/InstIterator.h	/^  typedef IIty*                           pointer;$/;"	t	class:llvm::InstIterator
pointer	Support/PathV2.h	/^  typedef value_type *pointer;$/;"	t	class:llvm::sys::path::const_iterator
pointer	Use.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::value_use_iterator
pointsToConstantMemory	Analysis/AliasAnalysis.h	/^  bool pointsToConstantMemory(const Value *P, bool OrLocal = false) {$/;"	f	class:llvm::AliasAnalysis
pop	ADT/IntervalMap.h	/^  void pop() {$/;"	f	class:llvm::IntervalMapImpl::Path
pop	Support/FileSystem.h	/^  void pop() {$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
pop_back	ADT/SetVector.h	/^  void pop_back() {$/;"	f	class:llvm::SetVector
pop_back	ADT/SmallVector.h	/^  void pop_back() {$/;"	f	class:llvm::SmallVectorTemplateBase
pop_back	ADT/TinyPtrVector.h	/^  void pop_back() {$/;"	f	class:llvm::TinyPtrVector
pop_back	ADT/ilist.h	/^  void pop_back() {$/;"	f	class:llvm::iplist
pop_back	CodeGen/MachineBasicBlock.h	/^  void pop_back() { Insts.pop_back(); }$/;"	f	class:llvm::MachineBasicBlock
pop_back_val	ADT/SetVector.h	/^  T pop_back_val() {$/;"	f	class:llvm::SetVector
pop_back_val	ADT/SmallVector.h	/^  T pop_back_val() {$/;"	f	class:llvm::SmallVectorImpl
pop_front	ADT/ilist.h	/^  void pop_front() {$/;"	f	class:llvm::iplist
pop_front	CodeGen/MachineBasicBlock.h	/^  void pop_front() { Insts.pop_front(); }$/;"	f	class:llvm::MachineBasicBlock
populateInheritedAnalysis	PassManagers.h	/^  void populateInheritedAnalysis(PMStack &PMS) {$/;"	f	class:llvm::PMDataManager
pos	Support/raw_ostream.h	/^  uint64_t pos;$/;"	m	class:llvm::raw_fd_ostream
posA	ADT/IntervalMap.h	/^  typename MapA::const_iterator posA;$/;"	m	class:llvm::IntervalMapOverlaps
posB	ADT/IntervalMap.h	/^  typename MapB::const_iterator posB;$/;"	m	class:llvm::IntervalMapOverlaps
posix_memalign	Target/TargetLibraryInfo.h	/^      posix_memalign,$/;"	e	enum:llvm::LibFunc::Func
postUpdateEdgeCosts	CodeGen/PBQP/Heuristics/Briggs.h	/^      void postUpdateEdgeCosts(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::Heuristics::Briggs
postUpdateEdgeCostts	CodeGen/PBQP/HeuristicBase.h	/^    void postUpdateEdgeCostts(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::HeuristicBase
pot_begin	Analysis/BlockFrequencyImpl.h	/^  pot_iterator pot_begin() { return POT.begin(); }$/;"	f	class:llvm::BlockFrequencyImpl
pot_end	Analysis/BlockFrequencyImpl.h	/^  pot_iterator pot_end() { return POT.end(); }$/;"	f	class:llvm::BlockFrequencyImpl
pot_iterator	Analysis/BlockFrequencyImpl.h	/^  typedef typename std::vector<BlockT *>::iterator pot_iterator;$/;"	t	class:llvm::BlockFrequencyImpl
pow	Target/TargetLibraryInfo.h	/^      pow,$/;"	e	enum:llvm::LibFunc::Func
powf	Target/TargetLibraryInfo.h	/^      powf,$/;"	e	enum:llvm::LibFunc::Func
powl	Target/TargetLibraryInfo.h	/^      powl,$/;"	e	enum:llvm::LibFunc::Func
ppc	ADT/Triple.h	/^    ppc,     \/\/ PPC: powerpc$/;"	e	enum:llvm::Triple::ArchType
ppc64	ADT/Triple.h	/^    ppc64,   \/\/ PPC64: powerpc64, ppu$/;"	e	enum:llvm::Triple::ArchType
ppc_fp128	TypeBuilder.h	/^class ppc_fp128 {};$/;"	c	namespace:llvm::types
ppcf128	CodeGen/ValueTypes.h	/^      ppcf128        =  12,   \/\/ This is a PPC 128-bit floating point value$/;"	e	enum:llvm::MVT::SimpleValueType
preUpdateEdgeCosts	CodeGen/PBQP/HeuristicBase.h	/^    void preUpdateEdgeCosts(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::HeuristicBase
preUpdateEdgeCosts	CodeGen/PBQP/Heuristics/Briggs.h	/^      void preUpdateEdgeCosts(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::Heuristics::Briggs
prebind_cksum_command	Support/MachO.h	/^    struct prebind_cksum_command {$/;"	s	namespace:llvm::MachO
prebound_dylib_command	Support/MachO.h	/^    struct prebound_dylib_command {$/;"	s	namespace:llvm::MachO
pred_begin	Analysis/Interval.h	/^inline Interval::pred_iterator pred_begin(Interval *I) {$/;"	f	namespace:llvm
pred_begin	CodeGen/MachineBasicBlock.h	/^  const_pred_iterator  pred_begin() const { return Predecessors.begin(); }$/;"	f	class:llvm::MachineBasicBlock
pred_begin	CodeGen/MachineBasicBlock.h	/^  pred_iterator        pred_begin()       { return Predecessors.begin(); }$/;"	f	class:llvm::MachineBasicBlock
pred_begin	Support/CFG.h	/^inline const_pred_iterator pred_begin(const BasicBlock *BB) {$/;"	f	namespace:llvm
pred_begin	Support/CFG.h	/^inline pred_iterator pred_begin(BasicBlock *BB) { return pred_iterator(BB); }$/;"	f	namespace:llvm
pred_empty	CodeGen/MachineBasicBlock.h	/^  bool                 pred_empty() const { return Predecessors.empty(); }$/;"	f	class:llvm::MachineBasicBlock
pred_end	Analysis/Interval.h	/^inline Interval::pred_iterator pred_end(Interval *I)   {$/;"	f	namespace:llvm
pred_end	CodeGen/MachineBasicBlock.h	/^  const_pred_iterator  pred_end()   const { return Predecessors.end();   }$/;"	f	class:llvm::MachineBasicBlock
pred_end	CodeGen/MachineBasicBlock.h	/^  pred_iterator        pred_end()         { return Predecessors.end();   }$/;"	f	class:llvm::MachineBasicBlock
pred_end	Support/CFG.h	/^inline const_pred_iterator pred_end(const BasicBlock *BB) {$/;"	f	namespace:llvm
pred_end	Support/CFG.h	/^inline pred_iterator pred_end(BasicBlock *BB) { return pred_iterator(BB, true);}$/;"	f	namespace:llvm
pred_iterator	Analysis/Interval.h	/^  typedef std::vector<BasicBlock*>::iterator pred_iterator;$/;"	t	class:llvm::Interval
pred_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::vector<MachineBasicBlock *>::iterator       pred_iterator;$/;"	t	class:llvm::MachineBasicBlock
pred_iterator	CodeGen/ScheduleDAG.h	/^    typedef SmallVector<SDep, 4>::iterator pred_iterator;$/;"	t	class:llvm::SUnit
pred_iterator	Support/CFG.h	/^typedef PredIterator<BasicBlock, Value::use_iterator> pred_iterator;$/;"	t	namespace:llvm
pred_rbegin	CodeGen/MachineBasicBlock.h	/^  const_pred_reverse_iterator  pred_rbegin() const$/;"	f	class:llvm::MachineBasicBlock
pred_rbegin	CodeGen/MachineBasicBlock.h	/^  pred_reverse_iterator        pred_rbegin()$/;"	f	class:llvm::MachineBasicBlock
pred_rend	CodeGen/MachineBasicBlock.h	/^  const_pred_reverse_iterator  pred_rend()   const$/;"	f	class:llvm::MachineBasicBlock
pred_rend	CodeGen/MachineBasicBlock.h	/^  pred_reverse_iterator        pred_rend()$/;"	f	class:llvm::MachineBasicBlock
pred_reverse_iterator	CodeGen/MachineBasicBlock.h	/^                                                         pred_reverse_iterator;$/;"	t	class:llvm::MachineBasicBlock
pred_size	CodeGen/MachineBasicBlock.h	/^  unsigned             pred_size()  const {$/;"	f	class:llvm::MachineBasicBlock
predictableSelectIsExpensive	Target/TargetLowering.h	/^  bool predictableSelectIsExpensive;$/;"	m	class:llvm::TargetLowering
preg	Support/Regex.h	/^    struct llvm_regex *preg;$/;"	m	class:llvm::Regex	typeref:struct:llvm::Regex::llvm_regex
prev	ADT/ImmutableSet.h	/^  ImutAVLTree *prev;$/;"	m	class:llvm::ImutAVLTree
prev	Support/CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup *prev, *next;$/;"	m	class:llvm::CrashRecoveryContextCleanup
prevTrueDep	LDDProfilingCommon.h	/^    size_t prevTrueDep;$/;"	m	struct:dInfo
print	Analysis/BlockFrequencyImpl.h	/^  void print(raw_ostream &OS) const {$/;"	f	class:llvm::BlockFrequencyImpl
print	Analysis/Dominators.h	/^  void print(raw_ostream &o) const {$/;"	f	class:llvm::DominatorTreeBase
print	Analysis/LoopInfoImpl.h	/^void LoopBase<BlockT, LoopT>::print(raw_ostream &OS, unsigned Depth) const {$/;"	f	class:llvm::LoopBase
print	Analysis/LoopInfoImpl.h	/^void LoopInfoBase<BlockT, LoopT>::print(raw_ostream &OS) const {$/;"	f	class:llvm::LoopInfoBase
print	Support/CommandLine.h	/^  void print(const Option &O, const parser<DT> P, const DT &V,$/;"	f	struct:llvm::cl::OptionDiffPrinter
print	Support/CommandLine.h	/^  void print(const Option &O, const parser<ParserDT> P, const ValDT &\/*V*\/,$/;"	f	struct:llvm::cl::OptionDiffPrinter
print	Support/Format.h	/^  unsigned print(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object_base
print	TableGen/Record.h	/^  void print(raw_ostream &OS) const { OS << getAsString(); }$/;"	f	class:llvm::Init
print	TableGen/Record.h	/^  void print(raw_ostream &OS) const { OS << getAsString(); }$/;"	f	class:llvm::RecTy
printDot	CodeGen/PBQP/Graph.h	/^    void printDot(OStream &os) {$/;"	f	class:PBQP::Graph
printInfoComment	Assembly/AssemblyAnnotationWriter.h	/^  virtual void printInfoComment(const Value &, formatted_raw_ostream &) {}$/;"	f	class:llvm::AssemblyAnnotationWriter
printInternal	DebugInfo.h	/^    void printInternal(raw_ostream &OS) const {} \/\/ FIXME: Output something?$/;"	f	class:llvm::DIFile
printOptionDiff	Support/CommandLine.h	/^  void printOptionDiff(const Option &O, const AnyOptionValue &V,$/;"	f	class:llvm::cl::generic_parser_base
printOptionDiff	Support/CommandLine.h	/^void printOptionDiff($/;"	f	namespace:llvm::cl
printOptionDiff	Support/CommandLine.h	/^void printOptionDiff(const Option &O, const generic_parser_base &P, const DT &V,$/;"	f	namespace:llvm::cl
printOptionInfo	Support/CommandLine.h	/^  virtual void printOptionInfo(size_t GlobalWidth) const {$/;"	f	class:llvm::cl::bits
printOptionInfo	Support/CommandLine.h	/^  virtual void printOptionInfo(size_t GlobalWidth) const {$/;"	f	class:llvm::cl::list
printOptionInfo	Support/CommandLine.h	/^  virtual void printOptionInfo(size_t GlobalWidth) const {$/;"	f	class:llvm::cl::opt
printOptionInfo	Support/PassNameParser.h	/^  virtual void printOptionInfo(const cl::Option &O, size_t GlobalWidth) const {$/;"	f	class:llvm::PassNameParser
printOptionValue	Support/CommandLine.h	/^  virtual void printOptionValue(size_t GlobalWidth, bool Force) const {$/;"	f	class:llvm::cl::opt
printOptionValue	Support/CommandLine.h	/^  virtual void printOptionValue(size_t \/*GlobalWidth*\/, bool \/*Force*\/) const {}$/;"	f	class:llvm::cl::bits
printOptionValue	Support/CommandLine.h	/^  virtual void printOptionValue(size_t \/*GlobalWidth*\/, bool \/*Force*\/) const {}$/;"	f	class:llvm::cl::list
prior	ADT/STLExtras.h	/^inline ItTy prior(ItTy it)$/;"	f	namespace:llvm
prior	ADT/STLExtras.h	/^inline ItTy prior(ItTy it, Dist n)$/;"	f	namespace:llvm
priv	Support/FileSystem.h	/^    priv \/\/\/< May modify via data, but changes are lost on destruction.$/;"	e	enum:llvm::sys::fs::mapped_file_region::mapmode
processDebugLoc	CodeGen/MachineCodeEmitter.h	/^  virtual void processDebugLoc(DebugLoc DL, bool BeforePrintintInsn) {}$/;"	f	class:llvm::MachineCodeEmitter
processFixupValue	MC/MCAsmBackend.h	/^  virtual void processFixupValue(const MCAssembler &Asm,$/;"	f	class:llvm::MCAsmBackend
processFunctionBeforeCalleeSavedScan	Target/TargetFrameLowering.h	/^  virtual void processFunctionBeforeCalleeSavedScan(MachineFunction &MF,$/;"	f	class:llvm::TargetFrameLowering
processFunctionBeforeFrameFinalized	Target/TargetFrameLowering.h	/^  virtual void processFunctionBeforeFrameFinalized(MachineFunction &MF) const {$/;"	f	class:llvm::TargetFrameLowering
prologSize	Support/Win64EH.h	/^  uint8_t prologSize;$/;"	m	struct:llvm::Win64EH::UnwindInfo
properlyDominates	Analysis/Dominators.h	/^  bool properlyDominates(const BasicBlock *A, const BasicBlock *B) const {$/;"	f	class:llvm::DominatorTree
properlyDominates	Analysis/Dominators.h	/^  bool properlyDominates(const DomTreeNode *A, const DomTreeNode *B) const {$/;"	f	class:llvm::DominatorTree
properlyDominates	Analysis/Dominators.h	/^  bool properlyDominates(const DomTreeNodeBase<NodeT> *A,$/;"	f	class:llvm::DominatorTreeBase
properlyDominates	Analysis/Dominators.h	/^DominatorTreeBase<NodeT>::properlyDominates(const NodeT *A, const NodeT *B) {$/;"	f	class:llvm::DominatorTreeBase
properlyDominates	Analysis/PostDominators.h	/^  inline bool properlyDominates(BasicBlock* A, BasicBlock* B) const {$/;"	f	struct:llvm::PostDominatorTree
properlyDominates	Analysis/PostDominators.h	/^  inline bool properlyDominates(const DomTreeNode* A, DomTreeNode* B) const {$/;"	f	struct:llvm::PostDominatorTree
properlyDominates	CodeGen/MachineDominators.h	/^  inline bool properlyDominates(MachineBasicBlock* A,$/;"	f	class:llvm::MachineDominatorTree
properlyDominates	CodeGen/MachineDominators.h	/^  inline bool properlyDominates(const MachineDomTreeNode* A,$/;"	f	class:llvm::MachineDominatorTree
properlyDominates	CodeGen/MachinePostDominators.h	/^  properlyDominates(MachineBasicBlock *A, MachineBasicBlock *B) const {$/;"	f	struct:llvm::MachinePostDominatorTree
properlyDominates	CodeGen/MachinePostDominators.h	/^  properlyDominates(const MachineDomTreeNode *A, MachineDomTreeNode *B) const {$/;"	f	struct:llvm::MachinePostDominatorTree
protocol_error	Support/system_error.h	/^  protocol_error                      = EPROTO,$/;"	e	enum:llvm::errc::_
protocol_not_supported	Support/system_error.h	/^  protocol_not_supported              = EPROTONOSUPPORT,$/;"	e	enum:llvm::errc::_
provideInitialHead	ADT/SparseBitVector.h	/^  Element *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	ADT/ilist.h	/^  static NodeTy *provideInitialHead() { return 0; }$/;"	f	struct:llvm::ilist_sentinel_traits
provideInitialHead	Analysis/IVUsers.h	/^  IVStrideUse *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	BasicBlock.h	/^  Instruction *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	CodeGen/MachineBasicBlock.h	/^  MachineInstr *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	CodeGen/MachineFunction.h	/^  MachineBasicBlock *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	CodeGen/SelectionDAG.h	/^  SDNode *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	CodeGen/SlotIndexes.h	/^    IndexListEntry *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	Function.h	/^  Argument *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	Function.h	/^  BasicBlock *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	Module.h	/^  Function *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	Module.h	/^  GlobalAlias *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	Module.h	/^  GlobalVariable *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	Module.h	/^  NamedMDNode *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
provideInitialHead	Support/Recycler.h	/^  RecyclerStruct *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
ptrVal	Target/TargetLowering.h	/^    const Value* ptrVal;      \/\/ value representing memory location$/;"	m	struct:llvm::TargetLowering::IntrinsicInfo
push	ADT/IntervalMap.h	/^  void push(NodeRef Node, unsigned Offset) {$/;"	f	class:llvm::IntervalMapImpl::Path
push	Analysis/ScalarEvolutionExpressions.h	/^    void push(const SCEV *S) {$/;"	f	class:llvm::SCEVTraversal
push	CodeGen/MachineScheduler.h	/^  void push(SUnit *SU) {$/;"	f	class:llvm::ReadyQueue
pushBlock	Analysis/LoopInfoImpl.h	/^  void pushBlock(BlockT *Block) {$/;"	f	class:llvm::__anon30::PopulateLoopsDFS
pushToStack	CodeGen/PBQP/HeuristicSolver.h	/^    void pushToStack(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
push_all	CodeGen/ScheduleDAG.h	/^    void push_all(const std::vector<SUnit *> &Nodes) {$/;"	f	class:llvm::SchedulingPriorityQueue
push_back	ADT/PackedVector.h	/^  void push_back(T val) {$/;"	f	class:llvm::PackedVector
push_back	ADT/SmallVector.h	/^  void push_back(T &&Elt) {$/;"	f	class:llvm::SmallVectorTemplateBase
push_back	ADT/SmallVector.h	/^  void push_back(const T &Elt) {$/;"	f	class:llvm::SmallVectorTemplateBase
push_back	ADT/TinyPtrVector.h	/^  void push_back(EltTy NewVal) {$/;"	f	class:llvm::TinyPtrVector
push_back	ADT/ilist.h	/^  void push_back(NodeTy *val) { insert(end(), val); }$/;"	f	class:llvm::iplist
push_back	ADT/ilist.h	/^  void push_back(const NodeTy &val) { insert(this->end(), val); }$/;"	f	struct:llvm::ilist
push_back	CodeGen/MachineBasicBlock.h	/^  void push_back(MachineInstr *MI) { Insts.push_back(MI); }$/;"	f	class:llvm::MachineBasicBlock
push_back	CodeGen/MachineFunction.h	/^  void push_back (MachineBasicBlock *MBB) { BasicBlocks.push_back (MBB); }$/;"	f	class:llvm::MachineFunction
push_front	ADT/ilist.h	/^  void push_front(NodeTy *val) { insert(begin(), val); }$/;"	f	class:llvm::iplist
push_front	ADT/ilist.h	/^  void push_front(const NodeTy &val) { insert(this->begin(), val); }$/;"	f	struct:llvm::ilist
push_front	CodeGen/MachineFunction.h	/^  void push_front(MachineBasicBlock *MBB) { BasicBlocks.push_front(MBB); }$/;"	f	class:llvm::MachineFunction
putchar	Target/TargetLibraryInfo.h	/^      putchar,$/;"	e	enum:llvm::LibFunc::Func
puts	Target/TargetLibraryInfo.h	/^      puts,$/;"	e	enum:llvm::LibFunc::Func
r0Reductions	CodeGen/PBQP/Solution.h	/^    unsigned r0Reductions, r1Reductions, r2Reductions, rNReductions;$/;"	m	class:PBQP::Solution
r1Reductions	CodeGen/PBQP/Solution.h	/^    unsigned r0Reductions, r1Reductions, r2Reductions, rNReductions;$/;"	m	class:PBQP::Solution
r2Reductions	CodeGen/PBQP/Solution.h	/^    unsigned r0Reductions, r1Reductions, r2Reductions, rNReductions;$/;"	m	class:PBQP::Solution
r600	ADT/Triple.h	/^    r600,    \/\/ R600: AMD GPUs HD2XXX - HD6XXX$/;"	e	enum:llvm::Triple::ArchType
rNReductions	CodeGen/PBQP/Solution.h	/^    unsigned r0Reductions, r1Reductions, r2Reductions, rNReductions;$/;"	m	class:PBQP::Solution
r_addend	MC/MCELFObjectWriter.h	/^  uint64_t r_addend;$/;"	m	struct:llvm::ELFRelocationEntry
r_addend	Object/ELF.h	/^  Elf_Sword     r_addend; \/\/ Compute value for relocatable field by adding this$/;"	m	struct:llvm::object::Elf_Rel_Base
r_addend	Object/ELF.h	/^  Elf_Sxword    r_addend; \/\/ Compute value for relocatable field by adding this.$/;"	m	struct:llvm::object::Elf_Rel_Base
r_addend	Support/ELF.h	/^  Elf32_Sword r_addend; \/\/ Compute value for relocatable field by adding this$/;"	m	struct:llvm::ELF::Elf32_Rela
r_addend	Support/ELF.h	/^  Elf64_Sxword r_addend; \/\/ Compute value for relocatable field by adding this.$/;"	m	struct:llvm::ELF::Elf64_Rela
r_address	CodeGen/MachORelocation.h	/^    uint32_t r_address;   \/\/ offset in the section to what is being  relocated$/;"	m	class:llvm::MachORelocation
r_extern	CodeGen/MachORelocation.h	/^    bool     r_extern;    \/\/ $/;"	m	class:llvm::MachORelocation
r_info	Object/ELF.h	/^  Elf_Word      r_info;   \/\/ Symbol table index and type of relocation to apply$/;"	m	struct:llvm::object::Elf_Rel_Base
r_info	Object/ELF.h	/^  Elf_Word      r_info;  \/\/ Symbol table index and type of relocation to apply$/;"	m	struct:llvm::object::Elf_Rel_Base
r_info	Object/ELF.h	/^  Elf_Xword     r_info;   \/\/ Symbol table index and type of relocation to apply$/;"	m	struct:llvm::object::Elf_Rel_Base
r_info	Support/ELF.h	/^  Elf32_Word  r_info;   \/\/ Symbol table index and type of relocation to apply$/;"	m	struct:llvm::ELF::Elf32_Rela
r_info	Support/ELF.h	/^  Elf32_Word r_info;   \/\/ Symbol table index and type of relocation to apply$/;"	m	struct:llvm::ELF::Elf32_Rel
r_info	Support/ELF.h	/^  Elf64_Xword  r_info;   \/\/ Symbol table index and type of relocation to apply.$/;"	m	struct:llvm::ELF::Elf64_Rela
r_info	Support/ELF.h	/^  Elf64_Xword r_info;   \/\/ Symbol table index and type of relocation to apply.$/;"	m	struct:llvm::ELF::Elf64_Rel
r_length	CodeGen/MachORelocation.h	/^    uint8_t  r_length;    \/\/ length = 2 ^ r_length$/;"	m	class:llvm::MachORelocation
r_offset	MC/MCELFObjectWriter.h	/^  uint64_t r_offset;$/;"	m	struct:llvm::ELFRelocationEntry
r_offset	Object/ELF.h	/^  Elf_Addr      r_offset; \/\/ Location (file byte offset, or program virtual addr)$/;"	m	struct:llvm::object::Elf_Rel_Base
r_offset	Support/ELF.h	/^  Elf32_Addr  r_offset; \/\/ Location (file byte offset, or program virtual addr)$/;"	m	struct:llvm::ELF::Elf32_Rela
r_offset	Support/ELF.h	/^  Elf32_Addr r_offset; \/\/ Location (file byte offset, or program virtual addr)$/;"	m	struct:llvm::ELF::Elf32_Rel
r_offset	Support/ELF.h	/^  Elf64_Addr  r_offset; \/\/ Location (file byte offset, or program virtual addr).$/;"	m	struct:llvm::ELF::Elf64_Rela
r_offset	Support/ELF.h	/^  Elf64_Addr r_offset; \/\/ Location (file byte offset, or program virtual addr).$/;"	m	struct:llvm::ELF::Elf64_Rel
r_pcrel	CodeGen/MachORelocation.h	/^    bool     r_pcrel;     \/\/ was relocated pc-relative already$/;"	m	class:llvm::MachORelocation
r_scattered	CodeGen/MachORelocation.h	/^    bool     r_scattered; \/\/ 1 = scattered, 0 = non-scattered$/;"	m	class:llvm::MachORelocation
r_symbolnum	CodeGen/MachORelocation.h	/^    uint32_t r_symbolnum; \/\/ symbol index if r_extern == 1 else section index$/;"	m	class:llvm::MachORelocation
r_type	CodeGen/MachORelocation.h	/^    uint8_t  r_type;      \/\/ if not 0, machine-specific relocation type.$/;"	m	class:llvm::MachORelocation
r_value	CodeGen/MachORelocation.h	/^    int32_t  r_value;     \/\/ the value the item to be relocated is referring$/;"	m	class:llvm::MachORelocation
ranges	CodeGen/LiveInterval.h	/^    Ranges ranges;       \/\/ the ranges in which this register is live$/;"	m	class:llvm::LiveInterval
rangesFromConstant	Support/IntegersSubset.h	/^  std::vector<Range> rangesFromConstant(Constant *C) {$/;"	f	class:llvm::IntegersSubset
raw_fd_ostream	Support/raw_ostream.h	/^class raw_fd_ostream : public raw_ostream {$/;"	c	namespace:llvm
raw_null_ostream	Support/raw_ostream.h	/^  explicit raw_null_ostream() {}$/;"	f	class:llvm::raw_null_ostream
raw_null_ostream	Support/raw_ostream.h	/^class raw_null_ostream : public raw_ostream {$/;"	c	namespace:llvm
raw_os_ostream	Support/raw_os_ostream.h	/^  raw_os_ostream(std::ostream &O) : OS(O) {}$/;"	f	class:llvm::raw_os_ostream
raw_os_ostream	Support/raw_os_ostream.h	/^class raw_os_ostream : public raw_ostream {$/;"	c	namespace:llvm
raw_ostream	Support/raw_ostream.h	/^  explicit raw_ostream(bool unbuffered=false)$/;"	f	class:llvm::raw_ostream
raw_ostream	Support/raw_ostream.h	/^class raw_ostream {$/;"	c	namespace:llvm
raw_string_ostream	Support/raw_ostream.h	/^  explicit raw_string_ostream(std::string &O) : OS(O) {}$/;"	f	class:llvm::raw_string_ostream
raw_string_ostream	Support/raw_ostream.h	/^class raw_string_ostream : public raw_ostream {$/;"	c	namespace:llvm
raw_svector_ostream	Support/raw_ostream.h	/^class raw_svector_ostream : public raw_ostream {$/;"	c	namespace:llvm
rbegin	ADT/SmallVector.h	/^  const_reverse_iterator rbegin() const{ return const_reverse_iterator(end()); }$/;"	f	class:llvm::SmallVectorTemplateCommon
rbegin	ADT/SmallVector.h	/^  reverse_iterator rbegin()            { return reverse_iterator(end()); }$/;"	f	class:llvm::SmallVectorTemplateCommon
rbegin	ADT/ilist.h	/^  const_reverse_iterator rbegin() const{ return const_reverse_iterator(end()); }$/;"	f	class:llvm::iplist
rbegin	ADT/ilist.h	/^  reverse_iterator rbegin()            { return reverse_iterator(end()); }$/;"	f	class:llvm::iplist
rbegin	Analysis/LoopInfo.h	/^  inline reverse_iterator rbegin() const { return LI.rbegin(); }$/;"	f	class:llvm::LoopInfo
rbegin	Analysis/LoopInfo.h	/^  reverse_iterator rbegin() const { return SubLoops.rbegin(); }$/;"	f	class:llvm::LoopBase
rbegin	Analysis/LoopInfo.h	/^  reverse_iterator rbegin() const { return TopLevelLoops.rbegin(); }$/;"	f	class:llvm::LoopInfoBase
rbegin	Analysis/Trace.h	/^  const_reverse_iterator rbegin() const { return BasicBlocks.rbegin(); }$/;"	f	class:llvm::Trace
rbegin	Analysis/Trace.h	/^  reverse_iterator       rbegin()       { return BasicBlocks.rbegin(); }$/;"	f	class:llvm::Trace
rbegin	Bitcode/Archive.h	/^    inline const_reverse_iterator rbegin() const { return members.rbegin(); }$/;"	f	class:llvm::Archive
rbegin	Bitcode/Archive.h	/^    inline reverse_iterator       rbegin()       { return members.rbegin(); }$/;"	f	class:llvm::Archive
rbegin	CodeGen/MachineBasicBlock.h	/^  const_reverse_iterator rbegin() const { return instr_rbegin(); }$/;"	f	class:llvm::MachineBasicBlock
rbegin	CodeGen/MachineBasicBlock.h	/^  reverse_iterator       rbegin()       { return instr_rbegin(); }$/;"	f	class:llvm::MachineBasicBlock
rbegin	CodeGen/MachineFunction.h	/^  const_reverse_iterator  rbegin() const { return BasicBlocks.rbegin(); }$/;"	f	class:llvm::MachineFunction
rbegin	CodeGen/MachineFunction.h	/^  reverse_iterator        rbegin()       { return BasicBlocks.rbegin(); }$/;"	f	class:llvm::MachineFunction
rbegin	CodeGen/ScheduleDAG.h	/^    const_reverse_iterator rbegin() const { return Index2Node.rbegin(); }$/;"	f	class:llvm::ScheduleDAGTopologicalSort
rbegin	CodeGen/ScheduleDAG.h	/^    reverse_iterator rbegin() { return Index2Node.rbegin(); }$/;"	f	class:llvm::ScheduleDAGTopologicalSort
rbegin	MC/MCAssembler.h	/^  const_reverse_iterator rbegin() const { return Fragments.rbegin(); }$/;"	f	class:llvm::MCSectionData
rbegin	MC/MCAssembler.h	/^  reverse_iterator rbegin() { return Fragments.rbegin(); }$/;"	f	class:llvm::MCSectionData
rbegin	Support/PathV2.h	/^inline reverse_iterator rbegin(StringRef path) {$/;"	f	namespace:llvm::sys::path
readArcTag	Support/GCOV.h	/^  bool readArcTag() {$/;"	f	class:llvm::GCOVBuffer
readBlockTag	Support/GCOV.h	/^  bool readBlockTag() {$/;"	f	class:llvm::GCOVBuffer
readEdgeTag	Support/GCOV.h	/^  bool readEdgeTag() {$/;"	f	class:llvm::GCOVBuffer
readFunctionTag	Support/GCOV.h	/^  bool readFunctionTag() {$/;"	f	class:llvm::GCOVBuffer
readGCOVFormat	Support/GCOV.h	/^  GCOV::GCOVFormat readGCOVFormat() {$/;"	f	class:llvm::GCOVBuffer
readInt	Support/GCOV.h	/^  uint32_t readInt() {$/;"	f	class:llvm::GCOVBuffer
readInt64	Support/GCOV.h	/^  uint64_t readInt64() {$/;"	f	class:llvm::GCOVBuffer
readLineTag	Support/GCOV.h	/^  bool readLineTag() {$/;"	f	class:llvm::GCOVBuffer
readMem	CodeGen/SelectionDAGNodes.h	/^  bool readMem() const { return MMO->isLoad(); }$/;"	f	class:llvm::MemSDNode
readMem	Target/TargetLowering.h	/^    bool         readMem;     \/\/ reads memory?$/;"	m	struct:llvm::TargetLowering::IntrinsicInfo
readString	Support/GCOV.h	/^  StringRef readString() {$/;"	f	class:llvm::GCOVBuffer
read_be	Support/Endian.h	/^  inline value_type read_be(const void *memory) {$/;"	f	namespace:llvm::support::endian
read_fault	Support/system_error.h	/^  read_fault              = 30, \/\/ ERROR_READ_FAULT,$/;"	e	enum:llvm::windows_error::_
read_le	Support/Endian.h	/^  inline value_type read_le(const void *memory) {$/;"	f	namespace:llvm::support::endian
read_only_file_system	Support/system_error.h	/^  read_only_file_system               = EROFS,$/;"	e	enum:llvm::errc::_
reader_acquire	Support/RWMutex.h	/^      bool reader_acquire() {$/;"	f	class:llvm::sys::SmartRWMutex
reader_release	Support/RWMutex.h	/^      bool reader_release() {$/;"	f	class:llvm::sys::SmartRWMutex
readers	Support/RWMutex.h	/^      unsigned readers, writers;$/;"	m	class:llvm::sys::SmartRWMutex
readonly	Support/FileSystem.h	/^    readonly, \/\/\/< May only access map via const_data as read only.$/;"	e	enum:llvm::sys::fs::mapped_file_region::mapmode
readsReg	CodeGen/MachineOperand.h	/^  bool readsReg() const {$/;"	f	class:llvm::MachineOperand
readsRegister	CodeGen/MachineInstr.h	/^  bool readsRegister(unsigned Reg, const TargetRegisterInfo *TRI = NULL) const {$/;"	f	class:llvm::MachineInstr
readsVirtualRegister	CodeGen/MachineInstr.h	/^  bool readsVirtualRegister(unsigned Reg) const {$/;"	f	class:llvm::MachineInstr
readwrite	Support/FileSystem.h	/^    readwrite, \/\/\/< May access map via data and modify it. Written to path.$/;"	e	enum:llvm::sys::fs::mapped_file_region::mapmode
realloc	Target/TargetLibraryInfo.h	/^      realloc,$/;"	e	enum:llvm::LibFunc::Func
reallocf	Target/TargetLibraryInfo.h	/^      reallocf,$/;"	e	enum:llvm::LibFunc::Func
rebase_off	Support/MachO.h	/^      uint32_t rebase_off;$/;"	m	struct:llvm::MachO::dyld_info_command
rebase_size	Support/MachO.h	/^      uint32_t rebase_size;$/;"	m	struct:llvm::MachO::dyld_info_command
recalculate	Analysis/Dominators.h	/^  void recalculate(FT& F) {$/;"	f	class:llvm::DominatorTreeBase
recede	CodeGen/ScoreboardHazardRecognizer.h	/^    void recede() {$/;"	f	class:llvm::ScoreboardHazardRecognizer::Scoreboard
recordR0	CodeGen/PBQP/Solution.h	/^    void recordR0() { ++r0Reductions; }$/;"	f	class:PBQP::Solution
recordR1	CodeGen/PBQP/Solution.h	/^    void recordR1() { ++r1Reductions; }$/;"	f	class:PBQP::Solution
recordR2	CodeGen/PBQP/Solution.h	/^    void recordR2() { ++r2Reductions; }$/;"	f	class:PBQP::Solution
recordRN	CodeGen/PBQP/HeuristicSolver.h	/^    void recordRN() { s.recordRN(); } $/;"	f	class:PBQP::HeuristicSolverImpl
recordRN	CodeGen/PBQP/Solution.h	/^    void recordRN() { ++ rNReductions; }$/;"	f	class:PBQP::Solution
recordVReg	CodeGen/RegAllocPBQP.h	/^    void recordVReg(unsigned vreg, PBQP::Graph::NodeItr node,$/;"	f	class:llvm::PBQPRAProblem
recoverNodes	ADT/ImmutableSet.h	/^  void recoverNodes() {$/;"	f	class:llvm::ImutAVLFactory
recoverResources	Support/CrashRecoveryContext.h	/^  virtual void recoverResources() {$/;"	f	class:llvm::CrashRecoveryContextDeleteCleanup
recoverResources	Support/CrashRecoveryContext.h	/^  virtual void recoverResources() {$/;"	f	class:llvm::CrashRecoveryContextDestructorCleanup
recoverResources	Support/CrashRecoveryContext.h	/^  virtual void recoverResources() {$/;"	f	class:llvm::CrashRecoveryContextReleaseRefCleanup
recursive	Support/Mutex.h	/^      bool recursive;$/;"	m	class:llvm::sys::SmartMutex
recursive_directory_iterator	Support/FileSystem.h	/^  explicit recursive_directory_iterator(const Twine &path, error_code &ec)$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
recursive_directory_iterator	Support/FileSystem.h	/^  recursive_directory_iterator() {}$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
recursive_directory_iterator	Support/FileSystem.h	/^class recursive_directory_iterator {$/;"	c	namespace:llvm::sys::fs
redoThisLoop	Analysis/LoopPass.h	/^  bool redoThisLoop;$/;"	m	class:llvm::LPPassManager
redoThisRegion	Analysis/RegionPass.h	/^  bool redoThisRegion;$/;"	m	class:llvm::RGPassManager
reduce	CodeGen/PBQP/HeuristicBase.h	/^    void reduce() {$/;"	f	class:PBQP::HeuristicBase
refCount	ADT/ImmutableSet.h	/^  uint32_t refCount;$/;"	m	class:llvm::ImutAVLTree
ref_cnt	ADT/IntrusiveRefCntPtr.h	/^    mutable unsigned ref_cnt;$/;"	m	class:llvm::RefCountedBase
ref_cnt	ADT/IntrusiveRefCntPtr.h	/^    mutable unsigned ref_cnt;$/;"	m	class:llvm::RefCountedBaseVPTR
reference	ADT/BitVector.h	/^    reference(BitVector &b, unsigned Idx) {$/;"	f	class:llvm::BitVector::reference
reference	ADT/BitVector.h	/^  class reference {$/;"	c	class:llvm::BitVector
reference	ADT/DenseMap.h	/^  typedef value_type &reference;$/;"	t	class:llvm::DenseMapIterator
reference	ADT/DenseSet.h	/^    typedef value_type &reference;$/;"	t	class:llvm::DenseSet::ConstIterator
reference	ADT/DenseSet.h	/^    typedef value_type &reference;$/;"	t	class:llvm::DenseSet::Iterator
reference	ADT/EquivalenceClasses.h	/^    typedef typename super::reference reference;$/;"	t	class:llvm::EquivalenceClasses::member_iterator
reference	ADT/InMemoryStruct.h	/^  typedef value_type &reference;$/;"	t	class:llvm::InMemoryStruct
reference	ADT/PackedVector.h	/^    reference(PackedVector &vec, unsigned idx) : Vec(vec), Idx(idx) { }    $/;"	f	class:llvm::PackedVector::reference
reference	ADT/PackedVector.h	/^  class reference {$/;"	c	class:llvm::PackedVector
reference	ADT/SCCIterator.h	/^  typedef typename super::reference reference;$/;"	t	class:llvm::scc_iterator
reference	ADT/STLExtras.h	/^  typedef void reference;        \/\/ Can't modify value returned by fn$/;"	t	class:llvm::mapped_iterator
reference	ADT/SetVector.h	/^  typedef T& reference;$/;"	t	class:llvm::SetVector
reference	ADT/SmallBitVector.h	/^    reference(SmallBitVector &b, unsigned Idx) : TheVector(b), BitPos(Idx) {}$/;"	f	class:llvm::SmallBitVector::reference
reference	ADT/SmallBitVector.h	/^  class reference {$/;"	c	class:llvm::SmallBitVector
reference	ADT/SmallPtrSet.h	/^  typedef PtrTy                     reference;$/;"	t	class:llvm::SmallPtrSetIterator
reference	ADT/SmallVector.h	/^  typedef T &reference;$/;"	t	class:llvm::SmallVectorTemplateCommon
reference	ADT/SparseSet.h	/^  typedef ValueT &reference;$/;"	t	class:llvm::SparseSet
reference	ADT/ilist.h	/^  typedef NodeTy &reference;$/;"	t	class:llvm::iplist
reference	ADT/ilist.h	/^  typedef typename super::reference reference;$/;"	t	class:llvm::ilist_iterator
reference	CodeGen/MachineRegisterInfo.h	/^                          MachineInstr, ptrdiff_t>::reference reference;$/;"	t	class:llvm::MachineRegisterInfo::defusechain_iterator
reference	CodeGen/SelectionDAGNodes.h	/^                          SDUse, ptrdiff_t>::reference reference;$/;"	t	class:llvm::SDNode::use_iterator
reference	Object/ELF.h	/^    typedef value_type &reference;$/;"	t	class:llvm::object::ELFObjectFile::ELFRelocationIterator
reference	Support/InstIterator.h	/^  typedef IIty&                           reference;$/;"	t	class:llvm::InstIterator
reference	Support/PathV2.h	/^  typedef value_type &reference;$/;"	t	class:llvm::sys::path::const_iterator
reference	Use.h	/^  typedef typename super::reference reference;$/;"	t	class:llvm::value_use_iterator
refineAlignment	CodeGen/SelectionDAGNodes.h	/^  void refineAlignment(const MachineMemOperand *NewMMO) {$/;"	f	class:llvm::MemSDNode
reg	CodeGen/LiveInterval.h	/^    const unsigned reg;  \/\/ the register or stack slot of this interval.$/;"	m	class:llvm::LiveInterval
reg_begin	CodeGen/MachineRegisterInfo.h	/^  reg_iterator reg_begin(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
reg_begin	CodeGen/ScheduleDAGInstrs.h	/^    const_iterator reg_begin() const { return PhysRegSet.begin(); }$/;"	f	class:llvm::Reg2SUnitsMap
reg_empty	CodeGen/MachineRegisterInfo.h	/^  bool reg_empty(unsigned RegNo) const { return reg_begin(RegNo) == reg_end(); }$/;"	f	class:llvm::MachineRegisterInfo
reg_end	CodeGen/MachineRegisterInfo.h	/^  static reg_iterator reg_end() { return reg_iterator(0); }$/;"	f	class:llvm::MachineRegisterInfo
reg_end	CodeGen/ScheduleDAGInstrs.h	/^    const_iterator reg_end() const { return PhysRegSet.end(); }$/;"	f	class:llvm::Reg2SUnitsMap
reg_iterator	CodeGen/MachineRegisterInfo.h	/^  typedef defusechain_iterator<true,true,false> reg_iterator;$/;"	t	class:llvm::MachineRegisterInfo
reg_nodbg_begin	CodeGen/MachineRegisterInfo.h	/^  reg_nodbg_iterator reg_nodbg_begin(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
reg_nodbg_empty	CodeGen/MachineRegisterInfo.h	/^  bool reg_nodbg_empty(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
reg_nodbg_end	CodeGen/MachineRegisterInfo.h	/^  static reg_nodbg_iterator reg_nodbg_end() { return reg_nodbg_iterator(0); }$/;"	f	class:llvm::MachineRegisterInfo
reg_nodbg_iterator	CodeGen/MachineRegisterInfo.h	/^  typedef defusechain_iterator<true,true,true> reg_nodbg_iterator;$/;"	t	class:llvm::MachineRegisterInfo
regclass_begin	MC/MCRegisterInfo.h	/^  regclass_iterator regclass_begin() const { return Classes; }$/;"	f	class:llvm::MCRegisterInfo
regclass_begin	Target/TargetRegisterInfo.h	/^  regclass_iterator regclass_begin() const { return RegClassBegin; }$/;"	f	class:llvm::TargetRegisterInfo
regclass_end	MC/MCRegisterInfo.h	/^  regclass_iterator regclass_end() const { return Classes+NumClasses; }$/;"	f	class:llvm::MCRegisterInfo
regclass_end	Target/TargetRegisterInfo.h	/^  regclass_iterator regclass_end() const { return RegClassEnd; }$/;"	f	class:llvm::TargetRegisterInfo
regclass_iterator	MC/MCRegisterInfo.h	/^  typedef const MCRegisterClass *regclass_iterator;$/;"	t	class:llvm::MCRegisterInfo
regclass_iterator	Target/TargetRegisterInfo.h	/^  typedef const TargetRegisterClass * const * regclass_iterator;$/;"	t	class:llvm::TargetRegisterInfo
registerDefIsDead	CodeGen/MachineInstr.h	/^  bool registerDefIsDead(unsigned Reg,$/;"	f	class:llvm::MachineInstr
registerRoots	CodeGen/MachineScheduler.h	/^  virtual void registerRoots() {}$/;"	f	class:llvm::MachineSchedStrategy
registered	Support/RegistryParser.h	/^    void registered(const entry &E) {$/;"	f	class:llvm::RegistryParser
regs	CodeGen/LiveRangeEdit.h	/^  ArrayRef<LiveInterval*> regs() const {$/;"	f	class:llvm::LiveRangeEdit
regsOverlap	Target/TargetRegisterInfo.h	/^  bool regsOverlap(unsigned regA, unsigned regB) const {$/;"	f	class:llvm::TargetRegisterInfo
regular_file	Support/FileSystem.h	/^    regular_file,$/;"	e	enum:llvm::sys::fs::file_type::_
reheapify	ADT/PriorityQueue.h	/^  void reheapify() {$/;"	f	class:llvm::PriorityQueue
release	ADT/ImmutableSet.h	/^  void release() {$/;"	f	class:llvm::ImutAVLTree
release	ADT/IntrusiveRefCntPtr.h	/^    static void release(T *obj) { obj->Release(); }$/;"	f	struct:llvm::IntrusiveRefCntPtrInfo
release	ADT/IntrusiveRefCntPtr.h	/^    void release() { if (Obj) IntrusiveRefCntPtrInfo<T>::release(Obj); }$/;"	f	class:llvm::IntrusiveRefCntPtr
release	Support/Mutex.h	/^      bool release() {$/;"	f	class:llvm::sys::SmartMutex
releaseFile	Support/FileUtilities.h	/^    void releaseFile() { DeleteIt = false; }$/;"	f	class:llvm::FileRemover
releaseMemory	Analysis/DominanceFrontier.h	/^  virtual void releaseMemory() { Frontiers.clear(); }$/;"	f	class:llvm::DominanceFrontierBase
releaseMemory	Analysis/Dominators.h	/^  virtual void releaseMemory() { reset(); }$/;"	f	class:llvm::DominatorTreeBase
releaseMemory	Analysis/Dominators.h	/^  virtual void releaseMemory() {$/;"	f	class:llvm::DominatorTree
releaseMemory	Analysis/LoopInfo.h	/^  virtual void releaseMemory() { LI.releaseMemory(); }$/;"	f	class:llvm::LoopInfo
releaseMemory	Analysis/LoopInfo.h	/^  void releaseMemory() {$/;"	f	class:llvm::LoopInfoBase
releaseMemory	Analysis/PostDominators.h	/^  virtual void releaseMemory() {$/;"	f	struct:llvm::PostDominatorTree
releaseMemory	CodeGen/LiveVariables.h	/^  virtual void releaseMemory() {$/;"	f	class:llvm::LiveVariables
releaseMemory	CodeGen/MachineLoopInfo.h	/^  virtual void releaseMemory() { LI.releaseMemory(); }$/;"	f	class:llvm::MachineLoopInfo
releaseState	CodeGen/LatencyPriorityQueue.h	/^    void releaseState() {$/;"	f	class:llvm::LatencyPriorityQueue
releaseState	CodeGen/ResourcePriorityQueue.h	/^    void releaseState() {$/;"	f	class:llvm::ResourcePriorityQueue
releaseStream	Support/FormattedStream.h	/^    void releaseStream() {$/;"	f	class:llvm::formatted_raw_ostream
releaseStream	Support/circular_raw_ostream.h	/^    void releaseStream() {$/;"	f	class:llvm::circular_raw_ostream
relocate	Target/TargetJITInfo.h	/^    virtual void relocate(void *Function, MachineRelocation *MR,$/;"	f	class:llvm::TargetJITInfo
relocation	Support/COFF.h	/^  struct relocation {$/;"	s	namespace:llvm::COFF
relocation_iterator	Object/ObjectFile.h	/^typedef content_iterator<RelocationRef> relocation_iterator;$/;"	t	namespace:llvm::object
reloff	Support/MachO.h	/^      uint32_t reloff;$/;"	m	struct:llvm::MachO::section
reloff	Support/MachO.h	/^      uint32_t reloff;$/;"	m	struct:llvm::MachO::section_64
rem_not_list	Support/system_error.h	/^  rem_not_list            = 51, \/\/ ERROR_REM_NOT_LIST,$/;"	e	enum:llvm::windows_error::_
remove	ADT/ImmutableIntervalMap.h	/^    ImmutableIntervalMap remove(ImmutableIntervalMap Old, key_type_ref K) {$/;"	f	class:llvm::ImmutableIntervalMap::Factory
remove	ADT/ImmutableMap.h	/^    ImmutableMap remove(ImmutableMap Old, key_type_ref K) {$/;"	f	class:llvm::ImmutableMap::Factory
remove	ADT/ImmutableMap.h	/^  ImmutableMapRef remove(key_type_ref K) {$/;"	f	class:llvm::ImmutableMapRef
remove	ADT/ImmutableSet.h	/^    ImmutableSet remove(ImmutableSet Old, value_type_ref V) {$/;"	f	class:llvm::ImmutableSet::Factory
remove	ADT/ImmutableSet.h	/^  ImmutableSetRef remove(value_type_ref V) {$/;"	f	class:llvm::ImmutableSetRef
remove	ADT/ImmutableSet.h	/^  TreeTy* remove(TreeTy* T, key_type_ref V) {$/;"	f	class:llvm::ImutAVLFactory
remove	ADT/SetVector.h	/^  bool remove(const value_type& X) {$/;"	f	class:llvm::SetVector
remove	ADT/StringMap.h	/^  void remove(MapEntryTy *KeyValue) {$/;"	f	class:llvm::StringMap
remove	ADT/ilist.h	/^  NodeTy *remove(const iterator &IT) {$/;"	f	class:llvm::iplist
remove	ADT/ilist.h	/^  NodeTy *remove(iterator &IT) {$/;"	f	class:llvm::iplist
remove	CodeGen/MachineFunction.h	/^  void remove(iterator MBBI) {$/;"	f	class:llvm::MachineFunction
remove	CodeGen/MachineScheduler.h	/^  void remove(iterator I) {$/;"	f	class:llvm::ReadyQueue
removeAllCalledFunctions	Analysis/CallGraph.h	/^  void removeAllCalledFunctions() {$/;"	f	class:llvm::CallGraphNode
removeAllOverlaps	ADT/ImmutableIntervalMap.h	/^  TreeTy *removeAllOverlaps(TreeTy *T, key_type_ref K) {$/;"	f	class:llvm::ImutIntervalAVLFactory
removeBlock	Analysis/DominanceFrontier.h	/^  void removeBlock(BasicBlock *BB) {$/;"	f	class:llvm::DominanceFrontierBase
removeBlock	Analysis/LoopInfo.h	/^  void removeBlock(BasicBlock *BB) {$/;"	f	class:llvm::LoopInfo
removeBlock	Analysis/LoopInfo.h	/^  void removeBlock(BlockT *BB) {$/;"	f	class:llvm::LoopInfoBase
removeBlock	CodeGen/MachineLoopInfo.h	/^  void removeBlock(MachineBasicBlock *BB) {$/;"	f	class:llvm::MachineLoopInfo
removeBlockFromLoop	Analysis/LoopInfo.h	/^  void removeBlockFromLoop(BlockT *BB) {$/;"	f	class:llvm::LoopBase
removeCallEdge	Analysis/CallGraph.h	/^  void removeCallEdge(iterator I) {$/;"	f	class:llvm::CallGraphNode
removeCase	Support/IntegersSubsetMapping.h	/^  void removeCase(SuccessorClass *Succ) {$/;"	f	class:llvm::IntegersSubsetMapping
removeChildLoop	Analysis/LoopInfo.h	/^  LoopT *removeChildLoop(iterator I) {$/;"	f	class:llvm::LoopBase
removeClass	TableGen/Record.h	/^  void removeClass(const std::string &Name) {$/;"	f	class:llvm::RecordKeeper
removeDef	TableGen/Record.h	/^  void removeDef(const std::string &Name) {$/;"	f	class:llvm::RecordKeeper
removeEdge	CodeGen/PBQP/Graph.h	/^      void removeEdge(AdjEdgeItr ae) {$/;"	f	class:PBQP::Graph::NodeEntry
removeEdge	CodeGen/PBQP/Graph.h	/^    void removeEdge(EdgeItr eItr) {$/;"	f	class:PBQP::Graph
removeFnAttr	Function.h	/^  void removeFnAttr(Attributes N) {$/;"	f	class:llvm::Function
removeFromFrontier	Analysis/DominanceFrontier.h	/^  void removeFromFrontier(iterator I, BasicBlock *Node) {$/;"	f	class:llvm::DominanceFrontierBase
removeFromList	CodeGen/SelectionDAGNodes.h	/^  void removeFromList() {$/;"	f	class:llvm::SDUse
removeFromList	Use.h	/^  void removeFromList() {$/;"	f	class:llvm::Use
removeFromMBBNumbering	CodeGen/MachineFunction.h	/^  void removeFromMBBNumbering(unsigned N) {$/;"	f	class:llvm::MachineFunction
removeFunctionFromModule	Analysis/CallGraph.h	/^  Function *removeFunctionFromModule(Function *F) {$/;"	f	class:llvm::CallGraph
removeFunctionOnlyAttrs	Attributes.h	/^  void removeFunctionOnlyAttrs() {$/;"	f	class:llvm::AttrBuilder
removeGarbageObject	Support/LeakDetector.h	/^  static void removeGarbageObject(const Value *Object) {$/;"	f	struct:llvm::LeakDetector
removeGarbageObject	Support/LeakDetector.h	/^  static void removeGarbageObject(void *Object) {$/;"	f	struct:llvm::LeakDetector
removeIncomingValue	Instructions.h	/^  Value *removeIncomingValue(const BasicBlock *BB, bool DeletePHIIfEmpty=true) {$/;"	f	class:llvm::PHINode
removeInterval	CodeGen/LiveIntervalAnalysis.h	/^    void removeInterval(unsigned Reg) {$/;"	f	class:llvm::LiveIntervals
removeItem	Support/IntegersSubsetMapping.h	/^  void removeItem(RangeIterator i) { Items.erase(i); }$/;"	f	class:llvm::IntegersSubsetMapping
removeKill	CodeGen/LiveVariables.h	/^    bool removeKill(MachineInstr *MI) {$/;"	f	struct:llvm::LiveVariables::VarInfo
removeLiteralOption	Support/CommandLine.h	/^  void removeLiteralOption(const char *Name) {$/;"	f	class:llvm::cl::parser
removeLoop	Analysis/LoopInfo.h	/^  LoopT *removeLoop(iterator I) {$/;"	f	class:llvm::LoopInfoBase
removeLoop	Analysis/LoopInfo.h	/^  inline Loop *removeLoop(iterator I) { return LI.removeLoop(I); }$/;"	f	class:llvm::LoopInfo
removeLoop	CodeGen/MachineLoopInfo.h	/^  inline MachineLoop *removeLoop(iterator I) { return LI.removeLoop(I); }$/;"	f	class:llvm::MachineLoopInfo
removeMachineInstrFromMaps	CodeGen/SlotIndexes.h	/^    void removeMachineInstrFromMaps(MachineInstr *mi) {$/;"	f	class:llvm::SlotIndexes
removeMinBinding	ADT/ImmutableSet.h	/^  TreeTy* removeMinBinding(TreeTy* T, TreeTy*& Noderemoved) {$/;"	f	class:llvm::ImutAVLFactory
removeNode	Analysis/Dominators.h	/^  void removeNode(NodeT *BB) {$/;"	f	class:llvm::DominatorTreeBase
removeNode	CodeGen/PBQP/Graph.h	/^    void removeNode(NodeItr nItr) {$/;"	f	class:PBQP::Graph
removeNodeFromList	ADT/ilist.h	/^  void removeNodeFromList(NodeTy *) {}$/;"	f	struct:llvm::ilist_node_traits
removeNodeFromList	Module.h	/^  void removeNodeFromList(NamedMDNode *) {}$/;"	f	struct:llvm::ilist_traits
removeOverlap	ADT/ImmutableIntervalMap.h	/^  TreeTy *removeOverlap(TreeTy *T, key_type_ref K, bool &Changed) {$/;"	f	class:llvm::ImutIntervalAVLFactory
removeRange	CodeGen/LiveInterval.h	/^    void removeRange(LiveRange LR, bool RemoveDeadValNo = false) {$/;"	f	class:llvm::LiveInterval
removeSolverEdge	CodeGen/PBQP/HeuristicSolver.h	/^      void removeSolverEdge(SolverEdgeItr seItr) {$/;"	f	class:PBQP::HeuristicSolverImpl::NodeData
removeSolverEdge	CodeGen/PBQP/HeuristicSolver.h	/^    void removeSolverEdge(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
removeUnknownInst	Analysis/AliasSetTracker.h	/^  void removeUnknownInst(Instruction *I) {$/;"	f	class:llvm::AliasSet
removeValue	TableGen/Record.h	/^  void removeValue(Init *Name) {$/;"	f	class:llvm::Record
removeValue	TableGen/Record.h	/^  void removeValue(StringRef Name) {$/;"	f	class:llvm::Record
removeVirtualRegisterDead	CodeGen/LiveVariables.h	/^  bool removeVirtualRegisterDead(unsigned reg, MachineInstr *MI) {$/;"	f	class:llvm::LiveVariables
removeVirtualRegisterKilled	CodeGen/LiveVariables.h	/^  bool removeVirtualRegisterKilled(unsigned reg, MachineInstr *MI) {$/;"	f	class:llvm::LiveVariables
remove_const	Support/type_traits.h	/^template <typename T> struct remove_const          { typedef T type; };$/;"	s	namespace:llvm
remove_const	Support/type_traits.h	/^template <typename T> struct remove_const<const T> { typedef T type; };$/;"	s	namespace:llvm
remove_cv	Support/type_traits.h	/^template <typename T> struct remove_cv {$/;"	s	namespace:llvm
remove_if	ADT/SetVector.h	/^  bool remove_if(UnaryPredicate P) {$/;"	f	class:llvm::SetVector
remove_internal	ADT/ImmutableSet.h	/^  TreeTy* remove_internal(key_type_ref K, TreeTy* T) {$/;"	f	class:llvm::ImutAVLFactory
remove_perms	Support/FileSystem.h	/^  remove_perms    = 0x2000, $/;"	e	enum:llvm::sys::fs::perms
remove_pointer	Support/type_traits.h	/^template <typename T> struct remove_pointer { typedef T type; };$/;"	s	namespace:llvm
remove_pointer	Support/type_traits.h	/^template <typename T> struct remove_pointer<T*> { typedef T type; };$/;"	s	namespace:llvm
remove_pointer	Support/type_traits.h	/^template <typename T> struct remove_pointer<T*const volatile> {$/;"	s	namespace:llvm
remove_pointer	Support/type_traits.h	/^template <typename T> struct remove_pointer<T*const> { typedef T type; };$/;"	s	namespace:llvm
remove_pointer	Support/type_traits.h	/^template <typename T> struct remove_pointer<T*volatile> { typedef T type; };$/;"	s	namespace:llvm
remove_reference	Support/type_traits.h	/^template <typename T> struct remove_reference { typedef T type; };$/;"	s	namespace:llvm
remove_reference	Support/type_traits.h	/^template <typename T> struct remove_reference<T&> { typedef T type; };$/;"	s	namespace:llvm
remove_volatile	Support/type_traits.h	/^template <typename T> struct remove_volatile             { typedef T type; };$/;"	s	namespace:llvm
remove_volatile	Support/type_traits.h	/^template <typename T> struct remove_volatile<volatile T> { typedef T type; };$/;"	s	namespace:llvm
rend	ADT/SmallVector.h	/^  const_reverse_iterator rend() const { return const_reverse_iterator(begin());}$/;"	f	class:llvm::SmallVectorTemplateCommon
rend	ADT/SmallVector.h	/^  reverse_iterator rend()              { return reverse_iterator(begin()); }$/;"	f	class:llvm::SmallVectorTemplateCommon
rend	ADT/ilist.h	/^  const_reverse_iterator rend() const { return const_reverse_iterator(begin());}$/;"	f	class:llvm::iplist
rend	ADT/ilist.h	/^  reverse_iterator rend()              { return reverse_iterator(begin()); }$/;"	f	class:llvm::iplist
rend	Analysis/LoopInfo.h	/^  inline reverse_iterator rend() const { return LI.rend(); }$/;"	f	class:llvm::LoopInfo
rend	Analysis/LoopInfo.h	/^  reverse_iterator rend() const { return SubLoops.rend(); }$/;"	f	class:llvm::LoopBase
rend	Analysis/LoopInfo.h	/^  reverse_iterator rend() const { return TopLevelLoops.rend(); }$/;"	f	class:llvm::LoopInfoBase
rend	Analysis/Trace.h	/^  const_reverse_iterator rend  () const { return BasicBlocks.rend();   }$/;"	f	class:llvm::Trace
rend	Analysis/Trace.h	/^  reverse_iterator       rend  ()       { return BasicBlocks.rend();   }$/;"	f	class:llvm::Trace
rend	Bitcode/Archive.h	/^    inline const_reverse_iterator rend  () const { return members.rend();   }$/;"	f	class:llvm::Archive
rend	Bitcode/Archive.h	/^    inline reverse_iterator       rend  ()       { return members.rend();   }$/;"	f	class:llvm::Archive
rend	CodeGen/MachineBasicBlock.h	/^  const_reverse_iterator rend  () const { return instr_rend();   }$/;"	f	class:llvm::MachineBasicBlock
rend	CodeGen/MachineBasicBlock.h	/^  reverse_iterator       rend  ()       { return instr_rend();   }$/;"	f	class:llvm::MachineBasicBlock
rend	CodeGen/MachineFunction.h	/^  const_reverse_iterator  rend  () const { return BasicBlocks.rend();   }$/;"	f	class:llvm::MachineFunction
rend	CodeGen/MachineFunction.h	/^  reverse_iterator        rend  ()       { return BasicBlocks.rend();   }$/;"	f	class:llvm::MachineFunction
rend	CodeGen/ScheduleDAG.h	/^    const_reverse_iterator rend() const { return Index2Node.rend(); }$/;"	f	class:llvm::ScheduleDAGTopologicalSort
rend	CodeGen/ScheduleDAG.h	/^    reverse_iterator rend() { return Index2Node.rend(); }$/;"	f	class:llvm::ScheduleDAGTopologicalSort
rend	MC/MCAssembler.h	/^  const_reverse_iterator rend() const { return Fragments.rend(); }$/;"	f	class:llvm::MCSectionData
rend	MC/MCAssembler.h	/^  reverse_iterator rend() { return Fragments.rend(); }$/;"	f	class:llvm::MCSectionData
rend	Support/PathV2.h	/^inline reverse_iterator rend(StringRef path) {$/;"	f	namespace:llvm::sys::path
renderGraphFromBottomUp	Support/DOTGraphTraits.h	/^  static bool renderGraphFromBottomUp() {$/;"	f	struct:llvm::DefaultDOTGraphTraits
replaceChildLoopWith	Analysis/LoopInfoImpl.h	/^replaceChildLoopWith(LoopT *OldChild, LoopT *NewChild) {$/;"	f	class:llvm::LoopBase
replaceFunction	DebugInfo.h	/^    void replaceFunction(Function *F) { replaceFunctionField(16, F); }$/;"	f	class:llvm::DISubprogram
replaceLoadWithValue	Transforms/Utils/SSAUpdater.h	/^  virtual void replaceLoadWithValue(LoadInst *LI, Value *V) const {$/;"	f	class:llvm::LoadAndStorePromoter
replaceMachineInstrInMaps	CodeGen/SlotIndexes.h	/^    void replaceMachineInstrInMaps(MachineInstr *mi, MachineInstr *newMI) {$/;"	f	class:llvm::SlotIndexes
replaceUsesOfWithOnConstant	Constant.h	/^  virtual void replaceUsesOfWithOnConstant(Value *, Value *, Use *) {$/;"	f	class:llvm::Constant
replaceWithNewValue	Analysis/AliasAnalysis.h	/^  void replaceWithNewValue(Value *Old, Value *New) {$/;"	f	class:llvm::AliasAnalysis
replacementPreservesLCSSAForm	Analysis/LoopInfo.h	/^  bool replacementPreservesLCSSAForm(Instruction *From, Value *To) {$/;"	f	class:llvm::LoopInfo
requiresFrameIndexScavenging	Target/TargetRegisterInfo.h	/^  virtual bool requiresFrameIndexScavenging(const MachineFunction &MF) const {$/;"	f	class:llvm::TargetRegisterInfo
requiresRegisterScavenging	Target/TargetRegisterInfo.h	/^  virtual bool requiresRegisterScavenging(const MachineFunction &MF) const {$/;"	f	class:llvm::TargetRegisterInfo
requiresVirtualBaseRegisters	Target/TargetRegisterInfo.h	/^  virtual bool requiresVirtualBaseRegisters(const MachineFunction &MF) const {$/;"	f	class:llvm::TargetRegisterInfo
reserve	ADT/BitVector.h	/^  void reserve(unsigned N) {$/;"	f	class:llvm::BitVector
reserve	ADT/IndexedMap.h	/^    void reserve(typename StorageT::size_type s) {$/;"	f	class:llvm::IndexedMap
reserve	ADT/PackedVector.h	/^  void reserve(unsigned N) { Bits.reserve(N << (BitNum-1)); }$/;"	f	class:llvm::PackedVector
reserve	ADT/SmallBitVector.h	/^  void reserve(unsigned N) {$/;"	f	class:llvm::SmallBitVector
reserve	ADT/SmallVector.h	/^  void reserve(unsigned N) {$/;"	f	class:llvm::SmallVectorImpl
reserveClauses	Instructions.h	/^  void reserveClauses(unsigned Size) { growOperands(Size); }$/;"	f	class:llvm::LandingPadInst
reserved	Support/MachO.h	/^      uint32_t reserved;$/;"	m	struct:llvm::MachO::mach_header_64
reserved	Support/MachO.h	/^      uint32_t reserved;$/;"	m	struct:llvm::MachO::version_min_command
reserved1	Support/MachO.h	/^      uint32_t reserved1;$/;"	m	struct:llvm::MachO::routines_command
reserved1	Support/MachO.h	/^      uint32_t reserved1;$/;"	m	struct:llvm::MachO::section
reserved1	Support/MachO.h	/^      uint32_t reserved1;$/;"	m	struct:llvm::MachO::section_64
reserved1	Support/MachO.h	/^      uint64_t reserved1;$/;"	m	struct:llvm::MachO::routines_command_64
reserved2	Support/MachO.h	/^      uint32_t reserved2;$/;"	m	struct:llvm::MachO::routines_command
reserved2	Support/MachO.h	/^      uint32_t reserved2;$/;"	m	struct:llvm::MachO::section
reserved2	Support/MachO.h	/^      uint32_t reserved2;$/;"	m	struct:llvm::MachO::section_64
reserved2	Support/MachO.h	/^      uint64_t reserved2;$/;"	m	struct:llvm::MachO::routines_command_64
reserved3	Support/MachO.h	/^      uint32_t reserved3;$/;"	m	struct:llvm::MachO::routines_command
reserved3	Support/MachO.h	/^      uint32_t reserved3;$/;"	m	struct:llvm::MachO::section_64
reserved3	Support/MachO.h	/^      uint64_t reserved3;$/;"	m	struct:llvm::MachO::routines_command_64
reserved4	Support/MachO.h	/^      uint32_t reserved4;$/;"	m	struct:llvm::MachO::routines_command
reserved4	Support/MachO.h	/^      uint64_t reserved4;$/;"	m	struct:llvm::MachO::routines_command_64
reserved5	Support/MachO.h	/^      uint32_t reserved5;$/;"	m	struct:llvm::MachO::routines_command
reserved5	Support/MachO.h	/^      uint64_t reserved5;$/;"	m	struct:llvm::MachO::routines_command_64
reserved6	Support/MachO.h	/^      uint32_t reserved6;$/;"	m	struct:llvm::MachO::routines_command
reserved6	Support/MachO.h	/^      uint64_t reserved6;$/;"	m	struct:llvm::MachO::routines_command_64
reservedRegsFrozen	CodeGen/MachineRegisterInfo.h	/^  bool reservedRegsFrozen() const {$/;"	f	class:llvm::MachineRegisterInfo
reset	ADT/BitVector.h	/^  BitVector &reset() {$/;"	f	class:llvm::BitVector
reset	ADT/BitVector.h	/^  BitVector &reset(const BitVector &RHS) {$/;"	f	class:llvm::BitVector
reset	ADT/BitVector.h	/^  BitVector &reset(unsigned I, unsigned E) {$/;"	f	class:llvm::BitVector
reset	ADT/BitVector.h	/^  BitVector &reset(unsigned Idx) {$/;"	f	class:llvm::BitVector
reset	ADT/IntervalMap.h	/^  void reset(unsigned Level) {$/;"	f	class:llvm::IntervalMapImpl::Path
reset	ADT/IntrusiveRefCntPtr.h	/^    void reset() {$/;"	f	class:llvm::IntrusiveRefCntPtr
reset	ADT/OwningPtr.h	/^  void reset(T *P = 0) {$/;"	f	class:llvm::OwningArrayPtr
reset	ADT/OwningPtr.h	/^  void reset(T *P = 0) {$/;"	f	class:llvm::OwningPtr
reset	ADT/PackedVector.h	/^  PackedVector &reset() {$/;"	f	class:llvm::PackedVector
reset	ADT/SmallBitVector.h	/^  SmallBitVector &reset() {$/;"	f	class:llvm::SmallBitVector
reset	ADT/SmallBitVector.h	/^  SmallBitVector &reset(unsigned I, unsigned E) {$/;"	f	class:llvm::SmallBitVector
reset	ADT/SmallBitVector.h	/^  SmallBitVector &reset(unsigned Idx) {$/;"	f	class:llvm::SmallBitVector
reset	ADT/SparseBitVector.h	/^  void reset(unsigned Idx) {$/;"	f	class:llvm::SparseBitVector
reset	ADT/SparseBitVector.h	/^  void reset(unsigned Idx) {$/;"	f	struct:llvm::SparseBitVectorElement
reset	ADT/UniqueVector.h	/^  void reset() {$/;"	f	class:llvm::UniqueVector
reset	Analysis/Dominators.h	/^  void reset() {$/;"	f	class:llvm::DominatorTreeBase
reset	CodeGen/PBQP/Math.h	/^    Matrix& reset(PBQPNum val = 0) {$/;"	f	class:PBQP::Matrix
reset	CodeGen/ScoreboardHazardRecognizer.h	/^    void reset(size_t d = 1) {$/;"	f	class:llvm::ScoreboardHazardRecognizer::Scoreboard
reset	Transforms/Utils/Cloning.h	/^  void reset() {$/;"	f	class:llvm::InlineFunctionInfo
resetColor	Support/raw_ostream.h	/^  virtual raw_ostream &resetColor() { return *this; }$/;"	f	class:llvm::raw_ostream
resetToSmall	ADT/SmallVector.h	/^  void resetToSmall() {$/;"	f	class:llvm::SmallVectorTemplateCommon
resetWithoutRelease	ADT/IntrusiveRefCntPtr.h	/^    void resetWithoutRelease() {$/;"	f	class:llvm::IntrusiveRefCntPtr
resize	ADT/BitVector.h	/^  void resize(unsigned N, bool t = false) {$/;"	f	class:llvm::BitVector
resize	ADT/DenseMap.h	/^  void resize(size_t Size) {$/;"	f	class:llvm::DenseMapBase
resize	ADT/DenseSet.h	/^  void resize(size_t Size) { TheMap.resize(Size); }$/;"	f	class:llvm::DenseSet
resize	ADT/IndexedMap.h	/^    void resize(typename StorageT::size_type s) {$/;"	f	class:llvm::IndexedMap
resize	ADT/PackedVector.h	/^  void resize(unsigned N) { Bits.resize(N << (BitNum-1)); }$/;"	f	class:llvm::PackedVector
resize	ADT/SmallBitVector.h	/^  void resize(unsigned N, bool t = false) {$/;"	f	class:llvm::SmallBitVector
resize	ADT/SmallVector.h	/^  void resize(unsigned N) {$/;"	f	class:llvm::SmallVectorImpl
resize	ADT/SmallVector.h	/^  void resize(unsigned N, const T &NV) {$/;"	f	class:llvm::SmallVectorImpl
resize	ADT/ValueMap.h	/^  void resize(size_t Size) { Map.resize(Size); }$/;"	f	class:llvm::ValueMap
resize	ADT/ilist.h	/^  void resize(size_type newsize) { resize(newsize, NodeTy()); }$/;"	f	struct:llvm::ilist
resize	ADT/ilist.h	/^  void resize(size_type newsize, NodeTy val) {$/;"	f	struct:llvm::ilist
resolveFrameIndex	Target/TargetRegisterInfo.h	/^  virtual void resolveFrameIndex(MachineBasicBlock::iterator I,$/;"	f	class:llvm::TargetRegisterInfo
resolveListElementReference	TableGen/Record.h	/^  virtual Init *resolveListElementReference(Record &R, const RecordVal *RV,$/;"	f	class:llvm::DagInit
resolveListElementReference	TableGen/Record.h	/^  virtual Init *resolveListElementReference(Record &R, const RecordVal *RV,$/;"	f	class:llvm::DefInit
resolveListElementReference	TableGen/Record.h	/^  virtual Init *resolveListElementReference(Record &R, const RecordVal *RV,$/;"	f	class:llvm::IntInit
resolveListElementReference	TableGen/Record.h	/^  virtual Init *resolveListElementReference(Record &R, const RecordVal *RV,$/;"	f	class:llvm::StringInit
resolveReferences	TableGen/Record.h	/^  virtual Init *resolveReferences(Record &R, const RecordVal *RV) const {$/;"	f	class:llvm::Init
resolveReferences	TableGen/Record.h	/^  void resolveReferences() { resolveReferencesTo(0); }$/;"	f	class:llvm::Record
resolveSchedClass	Target/TargetSubtargetInfo.h	/^  virtual unsigned resolveSchedClass(unsigned SchedClass, const MachineInstr *MI,$/;"	f	class:llvm::TargetSubtargetInfo
resource	Support/CrashRecoveryContext.h	/^  T *resource;$/;"	m	class:llvm::CrashRecoveryContextCleanupBase
resource_deadlock_would_occur	Support/system_error.h	/^  resource_deadlock_would_occur       = EDEADLK,$/;"	e	enum:llvm::errc::_
resource_sort	CodeGen/ResourcePriorityQueue.h	/^    explicit resource_sort(ResourcePriorityQueue *pq) : PQ(pq) {}$/;"	f	struct:llvm::resource_sort
resource_sort	CodeGen/ResourcePriorityQueue.h	/^  struct resource_sort : public std::binary_function<SUnit*, SUnit*, bool> {$/;"	s	namespace:llvm
resource_unavailable_try_again	Support/system_error.h	/^  resource_unavailable_try_again      = EAGAIN,$/;"	e	enum:llvm::errc::_
restoreCalleeSavedRegisters	Target/TargetFrameLowering.h	/^  virtual bool restoreCalleeSavedRegisters(MachineBasicBlock &MBB,$/;"	f	class:llvm::TargetFrameLowering
restoreIP	IRBuilder.h	/^  void restoreIP(InsertPoint IP) {$/;"	f	class:llvm::IRBuilderBase
result	Support/Allocator.h	/^template <typename T> struct ReferenceAdder { typedef T& result; };$/;"	t	struct:llvm::ReferenceAdder
result	Support/Allocator.h	/^template <typename T> struct ReferenceAdder<T&> { typedef T result; };$/;"	t	struct:llvm::ReferenceAdder
result_out_of_range	Support/system_error.h	/^  result_out_of_range                 = ERANGE,$/;"	e	enum:llvm::errc::_
ret_type	Support/Casting.h	/^                   typename simplify_type<From>::SimpleType>::ret_type ret_type;$/;"	t	struct:llvm::cast_retty
ret_type	Support/Casting.h	/^  typedef To& ret_type;         \/\/ Normal case, return Ty&$/;"	t	struct:llvm::cast_retty_impl
ret_type	Support/Casting.h	/^  typedef To* ret_type;         \/\/ Pointer arg case, return Ty*$/;"	t	struct:llvm::cast_retty_impl
ret_type	Support/Casting.h	/^  typedef const To &ret_type;   \/\/ Normal case, return Ty&$/;"	t	struct:llvm::cast_retty_impl
ret_type	Support/Casting.h	/^  typedef const To* ret_type;   \/\/ Constant pointer arg case, return const Ty*$/;"	t	struct:llvm::cast_retty_impl
ret_type	Support/Casting.h	/^  typedef typename cast_retty<To, SimpleFrom>::ret_type ret_type;$/;"	t	struct:llvm::cast_retty_wrap
ret_type	Support/Casting.h	/^  typedef typename cast_retty_impl<To,FromTy>::ret_type ret_type;$/;"	t	struct:llvm::cast_retty_wrap
retain	ADT/ImmutableSet.h	/^  void retain() { ++refCount; }$/;"	f	class:llvm::ImutAVLTree
retain	ADT/IntrusiveRefCntPtr.h	/^    static void retain(T *obj) { obj->Retain(); }$/;"	f	struct:llvm::IntrusiveRefCntPtrInfo
retain	ADT/IntrusiveRefCntPtr.h	/^    void retain() { if (Obj) IntrusiveRefCntPtrInfo<T>::retain(Obj); }$/;"	f	class:llvm::IntrusiveRefCntPtr
reverseColor	Support/raw_ostream.h	/^  virtual raw_ostream &reverseColor() { return *this; }$/;"	f	class:llvm::raw_ostream
reverseUnsafe	CodeGen/PBQP/Heuristics/Briggs.h	/^        UnsafeArray unsafe, reverseUnsafe;$/;"	m	struct:PBQP::Heuristics::Briggs::EdgeData
reverseWorst	CodeGen/PBQP/Heuristics/Briggs.h	/^        unsigned worst, reverseWorst;$/;"	m	struct:PBQP::Heuristics::Briggs::EdgeData
reverse_instr_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::reverse_iterator<instr_iterator>          reverse_instr_iterator;$/;"	t	class:llvm::MachineBasicBlock
reverse_iterator	ADT/SmallVector.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:llvm::SmallVectorTemplateCommon
reverse_iterator	ADT/ilist.h	/^  typedef std::reverse_iterator<iterator>  reverse_iterator;$/;"	t	class:llvm::iplist
reverse_iterator	Analysis/LoopInfo.h	/^    reverse_iterator;$/;"	t	class:llvm::LoopBase
reverse_iterator	Analysis/LoopInfo.h	/^    reverse_iterator;$/;"	t	class:llvm::LoopInfoBase
reverse_iterator	Analysis/LoopInfo.h	/^  typedef LoopInfoBase<BasicBlock, Loop>::reverse_iterator reverse_iterator;$/;"	t	class:llvm::LoopInfo
reverse_iterator	Analysis/Trace.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:llvm::Trace
reverse_iterator	Bitcode/Archive.h	/^    typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:llvm::Archive
reverse_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::reverse_iterator<iterator>                      reverse_iterator;$/;"	t	class:llvm::MachineBasicBlock
reverse_iterator	CodeGen/MachineFunction.h	/^  typedef std::reverse_iterator<iterator>             reverse_iterator;$/;"	t	class:llvm::MachineFunction
reverse_iterator	CodeGen/ScheduleDAG.h	/^    typedef std::vector<int>::reverse_iterator reverse_iterator;$/;"	t	class:llvm::ScheduleDAGTopologicalSort
reverse_iterator	MC/MCAssembler.h	/^  typedef FragmentListType::reverse_iterator reverse_iterator;$/;"	t	class:llvm::MCSectionData
reverse_iterator	Support/PathV2.h	/^typedef std::reverse_iterator<const_iterator> reverse_iterator;$/;"	t	namespace:llvm::sys::path
rfind	ADT/SmallString.h	/^  size_t rfind(StringRef Str) const {$/;"	f	class:llvm::SmallString
rfind	ADT/SmallString.h	/^  size_t rfind(char C, size_t From = StringRef::npos) const {$/;"	f	class:llvm::SmallString
rfind	ADT/StringRef.h	/^    size_t rfind(char C, size_t From = npos) const {$/;"	f	class:llvm::StringRef
right	ADT/ImmutableSet.h	/^  ImutAVLTree *right;$/;"	m	class:llvm::ImutAVLTree
rint	Target/TargetLibraryInfo.h	/^      rint,$/;"	e	enum:llvm::LibFunc::Func
rintf	Target/TargetLibraryInfo.h	/^      rintf,$/;"	e	enum:llvm::LibFunc::Func
rintl	Target/TargetLibraryInfo.h	/^      rintl,$/;"	e	enum:llvm::LibFunc::Func
rmNearestTiesToAway	ADT/APFloat.h	/^      rmNearestTiesToAway$/;"	e	enum:llvm::APFloat::roundingMode
rmNearestTiesToEven	ADT/APFloat.h	/^      rmNearestTiesToEven,$/;"	e	enum:llvm::APFloat::roundingMode
rmTowardNegative	ADT/APFloat.h	/^      rmTowardNegative,$/;"	e	enum:llvm::APFloat::roundingMode
rmTowardPositive	ADT/APFloat.h	/^      rmTowardPositive,$/;"	e	enum:llvm::APFloat::roundingMode
rmTowardZero	ADT/APFloat.h	/^      rmTowardZero,$/;"	e	enum:llvm::APFloat::roundingMode
rnAllocableList	CodeGen/PBQP/Heuristics/Briggs.h	/^      RNAllocableList rnAllocableList;$/;"	m	class:PBQP::Heuristics::Briggs
rnUnallocableList	CodeGen/PBQP/Heuristics/Briggs.h	/^      RNUnallocableList rnUnallocableList;$/;"	m	class:PBQP::Heuristics::Briggs
rnaItr	CodeGen/PBQP/Heuristics/Briggs.h	/^        RNAllocableListItr rnaItr;$/;"	m	struct:PBQP::Heuristics::Briggs::NodeData
rnuItr	CodeGen/PBQP/Heuristics/Briggs.h	/^        RNUnallocableListItr rnuItr;$/;"	m	struct:PBQP::Heuristics::Briggs::NodeData
rootBranch	ADT/IntervalMap.h	/^  RootBranch &rootBranch()             { return rootBranchData().node; }$/;"	f	class:llvm::IntervalMap
rootBranch	ADT/IntervalMap.h	/^  const RootBranch &rootBranch() const { return rootBranchData().node; }$/;"	f	class:llvm::IntervalMap
rootBranchData	ADT/IntervalMap.h	/^  RootBranchData &rootBranchData() const {$/;"	f	class:llvm::IntervalMap
rootBranchData	ADT/IntervalMap.h	/^  RootBranchData &rootBranchData() {$/;"	f	class:llvm::IntervalMap
rootBranchStart	ADT/IntervalMap.h	/^  KeyT &rootBranchStart()      { return rootBranchData().start; }$/;"	f	class:llvm::IntervalMap
rootBranchStart	ADT/IntervalMap.h	/^  KeyT rootBranchStart() const { return rootBranchData().start; }$/;"	f	class:llvm::IntervalMap
rootLeaf	ADT/IntervalMap.h	/^  RootLeaf &rootLeaf() {$/;"	f	class:llvm::IntervalMap
rootLeaf	ADT/IntervalMap.h	/^  const RootLeaf &rootLeaf() const {$/;"	f	class:llvm::IntervalMap
rootSize	ADT/IntervalMap.h	/^  unsigned rootSize;$/;"	m	class:llvm::IntervalMap
roots_begin	CodeGen/GCMetadata.h	/^    roots_iterator roots_begin() { return Roots.begin(); }$/;"	f	class:llvm::GCFunctionInfo
roots_end	CodeGen/GCMetadata.h	/^    roots_iterator roots_end  () { return Roots.end();   }$/;"	f	class:llvm::GCFunctionInfo
roots_iterator	CodeGen/GCMetadata.h	/^    typedef std::vector<GCRoot>::iterator roots_iterator;$/;"	t	class:llvm::GCFunctionInfo
roots_size	CodeGen/GCMetadata.h	/^    size_t roots_size() const { return Roots.size(); }$/;"	f	class:llvm::GCFunctionInfo
rotate	ADT/Hashing.h	/^inline uint64_t rotate(uint64_t val, size_t shift) {$/;"	f	namespace:llvm::hashing::detail
round	Target/TargetLibraryInfo.h	/^      round,$/;"	e	enum:llvm::LibFunc::Func
roundToDouble	ADT/APInt.h	/^  double roundToDouble() const {$/;"	f	class:llvm::APInt
roundf	Target/TargetLibraryInfo.h	/^      roundf,$/;"	e	enum:llvm::LibFunc::Func
roundingMode	ADT/APFloat.h	/^    enum roundingMode {$/;"	g	class:llvm::APFloat
roundl	Target/TargetLibraryInfo.h	/^      roundl,$/;"	e	enum:llvm::LibFunc::Func
routines_command	Support/MachO.h	/^    struct routines_command {$/;"	s	namespace:llvm::MachO
routines_command_64	Support/MachO.h	/^    struct routines_command_64 {$/;"	s	namespace:llvm::MachO
rows	CodeGen/PBQP/Math.h	/^    unsigned rows, cols;$/;"	m	class:PBQP::Matrix
rpath_command	Support/MachO.h	/^    struct rpath_command {$/;"	s	namespace:llvm::MachO
rpo_iterator	ADT/PostOrderIterator.h	/^  typedef typename std::vector<NodeType*>::reverse_iterator rpo_iterator;$/;"	t	class:llvm::ReversePostOrderTraversal
rpot_at	Analysis/BlockFrequencyImpl.h	/^  rpot_iterator rpot_at(BlockT *BB) {$/;"	f	class:llvm::BlockFrequencyImpl
rpot_begin	Analysis/BlockFrequencyImpl.h	/^  rpot_iterator rpot_begin() { return POT.rbegin(); }$/;"	f	class:llvm::BlockFrequencyImpl
rpot_end	Analysis/BlockFrequencyImpl.h	/^  rpot_iterator rpot_end() { return POT.rend(); }$/;"	f	class:llvm::BlockFrequencyImpl
rpot_iterator	Analysis/BlockFrequencyImpl.h	/^  typedef typename std::vector<BlockT *>::reverse_iterator rpot_iterator;$/;"	t	class:llvm::BlockFrequencyImpl
rsplit	ADT/StringRef.h	/^    std::pair<StringRef, StringRef> rsplit(char Separator) const {$/;"	f	class:llvm::StringRef
rtrim	ADT/StringRef.h	/^    StringRef rtrim(StringRef Chars = " \\t\\n\\v\\f\\r") const {$/;"	f	class:llvm::StringRef
runJITOnFunction	ExecutionEngine/ExecutionEngine.h	/^  virtual void runJITOnFunction(Function *, MachineCodeInfo * = 0) { }$/;"	f	class:llvm::ExecutionEngine
runOnFunction	Analysis/DOTGraphTraitsPass.h	/^  virtual bool runOnFunction(Function &F) {$/;"	f	struct:llvm::DOTGraphTraitsPrinter
runOnFunction	Analysis/DOTGraphTraitsPass.h	/^  virtual bool runOnFunction(Function &F) {$/;"	f	struct:llvm::DOTGraphTraitsViewer
runOnFunction	Analysis/DominanceFrontier.h	/^  virtual bool runOnFunction(Function &) {$/;"	f	class:llvm::DominanceFrontier
runOnFunction	Analysis/LibCallAliasAnalysis.h	/^    virtual bool runOnFunction(Function &F) {$/;"	f	struct:llvm::LibCallAliasAnalysis
runOnMachineFunction	CodeGen/AsmPrinter.h	/^    virtual bool runOnMachineFunction(MachineFunction &MF) {$/;"	f	class:llvm::AsmPrinter
runOnModule	Pass.h	/^  bool runOnModule(Module &) { return false; }$/;"	f	class:llvm::ImmutablePass
s	ADT/APInt.h	/^  unsigned s;  \/\/\/< shift amount$/;"	m	struct:llvm::APInt::ms
s	ADT/APInt.h	/^  unsigned s;  \/\/\/< shift amount$/;"	m	struct:llvm::APInt::mu
s	CodeGen/PBQP/HeuristicBase.h	/^    HeuristicSolverImpl<HImpl> &s;$/;"	m	class:PBQP::HeuristicBase
s	CodeGen/PBQP/HeuristicSolver.h	/^    Solution s;$/;"	m	class:PBQP::HeuristicSolverImpl
s	CodeGen/PBQP/Heuristics/Briggs.h	/^        HeuristicSolverImpl<Briggs> *s;$/;"	m	class:PBQP::Heuristics::Briggs::LinkDegreeComparator
s	CodeGen/PBQP/Heuristics/Briggs.h	/^        HeuristicSolverImpl<Briggs> *s;$/;"	m	class:PBQP::Heuristics::Briggs::SpillCostComparator
safeFind	ADT/IntervalMap.h	/^  unsigned safeFind(unsigned i, KeyT x) const {$/;"	f	class:llvm::IntervalMapImpl::BranchNode
safeFind	ADT/IntervalMap.h	/^  unsigned safeFind(unsigned i, KeyT x) const {$/;"	f	class:llvm::IntervalMapImpl::LeafNode
safeLookup	ADT/IntervalMap.h	/^  NodeRef safeLookup(KeyT x) const {$/;"	f	class:llvm::IntervalMapImpl::BranchNode
safeLookup	ADT/IntervalMap.h	/^  ValT safeLookup(KeyT x, ValT NotFound) const {$/;"	f	class:llvm::IntervalMapImpl::LeafNode
saveAndClearIP	IRBuilder.h	/^  InsertPoint saveAndClearIP() {$/;"	f	class:llvm::IRBuilderBase
saveIP	IRBuilder.h	/^  InsertPoint saveIP() const {$/;"	f	class:llvm::IRBuilderBase
saveScavengerRegister	Target/TargetRegisterInfo.h	/^  virtual bool saveScavengerRegister(MachineBasicBlock &MBB,$/;"	f	class:llvm::TargetRegisterInfo
scAddExpr	Analysis/ScalarEvolutionExpressions.h	/^    scConstant, scTruncate, scZeroExtend, scSignExtend, scAddExpr, scMulExpr,$/;"	e	enum:llvm::SCEVTypes
scAddRecExpr	Analysis/ScalarEvolutionExpressions.h	/^    scUDivExpr, scAddRecExpr, scUMaxExpr, scSMaxExpr,$/;"	e	enum:llvm::SCEVTypes
scConstant	Analysis/ScalarEvolutionExpressions.h	/^    scConstant, scTruncate, scZeroExtend, scSignExtend, scAddExpr, scMulExpr,$/;"	e	enum:llvm::SCEVTypes
scCouldNotCompute	Analysis/ScalarEvolutionExpressions.h	/^    scUnknown, scCouldNotCompute$/;"	e	enum:llvm::SCEVTypes
scMulExpr	Analysis/ScalarEvolutionExpressions.h	/^    scConstant, scTruncate, scZeroExtend, scSignExtend, scAddExpr, scMulExpr,$/;"	e	enum:llvm::SCEVTypes
scSMaxExpr	Analysis/ScalarEvolutionExpressions.h	/^    scUDivExpr, scAddRecExpr, scUMaxExpr, scSMaxExpr,$/;"	e	enum:llvm::SCEVTypes
scSignExtend	Analysis/ScalarEvolutionExpressions.h	/^    scConstant, scTruncate, scZeroExtend, scSignExtend, scAddExpr, scMulExpr,$/;"	e	enum:llvm::SCEVTypes
scTruncate	Analysis/ScalarEvolutionExpressions.h	/^    scConstant, scTruncate, scZeroExtend, scSignExtend, scAddExpr, scMulExpr,$/;"	e	enum:llvm::SCEVTypes
scUDivExpr	Analysis/ScalarEvolutionExpressions.h	/^    scUDivExpr, scAddRecExpr, scUMaxExpr, scSMaxExpr,$/;"	e	enum:llvm::SCEVTypes
scUMaxExpr	Analysis/ScalarEvolutionExpressions.h	/^    scUDivExpr, scAddRecExpr, scUMaxExpr, scSMaxExpr,$/;"	e	enum:llvm::SCEVTypes
scUnknown	Analysis/ScalarEvolutionExpressions.h	/^    scUnknown, scCouldNotCompute$/;"	e	enum:llvm::SCEVTypes
scZeroExtend	Analysis/ScalarEvolutionExpressions.h	/^    scConstant, scTruncate, scZeroExtend, scSignExtend, scAddExpr, scMulExpr,$/;"	e	enum:llvm::SCEVTypes
sc_iterator	Target/TargetRegisterInfo.h	/^  typedef const TargetRegisterClass* const * sc_iterator;$/;"	t	class:llvm::TargetRegisterClass
scanner	Support/YAMLParser.h	/^  OwningPtr<Scanner> scanner;$/;"	m	class:llvm::yaml::Stream
scavengeRegister	CodeGen/RegisterScavenging.h	/^  unsigned scavengeRegister(const TargetRegisterClass *RegClass, int SPAdj) {$/;"	f	class:llvm::RegScavenger
scc_begin	ADT/SCCIterator.h	/^scc_iterator<Inverse<T> > scc_begin(const Inverse<T> &G) {$/;"	f	namespace:llvm
scc_begin	ADT/SCCIterator.h	/^scc_iterator<T> scc_begin(const T &G) {$/;"	f	namespace:llvm
scc_end	ADT/SCCIterator.h	/^scc_iterator<Inverse<T> > scc_end(const Inverse<T> &G) {$/;"	f	namespace:llvm
scc_end	ADT/SCCIterator.h	/^scc_iterator<T> scc_end(const T &G) {$/;"	f	namespace:llvm
scc_iterator	ADT/SCCIterator.h	/^  inline scc_iterator() { \/* End is when DFS stack is empty *\/ }$/;"	f	class:llvm::scc_iterator
scc_iterator	ADT/SCCIterator.h	/^  inline scc_iterator(NodeType *entryN) : visitNum(0) {$/;"	f	class:llvm::scc_iterator
scc_iterator	ADT/SCCIterator.h	/^class scc_iterator$/;"	c	namespace:llvm
scheduledNode	CodeGen/ScheduleDAG.h	/^    virtual void scheduledNode(SUnit *) {}$/;"	f	class:llvm::SchedulingPriorityQueue
sdiv	ADT/APInt.h	/^  APInt sdiv(const APInt &RHS) const {$/;"	f	class:llvm::APInt
sdiv	ADT/APInt.h	/^inline APInt sdiv(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
sdivrem	ADT/APInt.h	/^  static void sdivrem(const APInt &LHS, const APInt &RHS,$/;"	f	class:llvm::APInt
second	ADT/IntervalMap.h	/^  T2 second[N];$/;"	m	class:llvm::IntervalMapImpl::NodeBase
second	ADT/STLExtras.h	/^  second_type second;$/;"	m	struct:llvm::tier
second	ADT/StringMap.h	/^  ValueTy second;$/;"	m	class:llvm::StringMapEntry
second	ADT/ValueMap.h	/^    ValueT& second;$/;"	m	struct:llvm::ValueMapIterator::ValueTypeProxy
second	ADT/ValueMap.h	/^    const ValueT& second;$/;"	m	struct:llvm::ValueMapConstIterator::ValueTypeProxy
second	ExecutionEngine/GenericValue.h	/^    struct { unsigned int first; unsigned int second; } UIntPairVal;$/;"	m	struct:llvm::GenericValue::__anon52::__anon53
second_type	ADT/STLExtras.h	/^  typedef T2 &second_type;$/;"	t	struct:llvm::tier
seconds	Support/TimeValue.h	/^    SecondsType seconds() const { return seconds_; }$/;"	f	class:llvm::sys::TimeValue
seconds	Support/TimeValue.h	/^    void seconds (SecondsType sec ) {$/;"	f	class:llvm::sys::TimeValue
seconds_	Support/TimeValue.h	/^    SecondsType      seconds_;\/\/\/< Stores the seconds part of the TimeVal$/;"	m	class:llvm::sys::TimeValue
section	Support/COFF.h	/^  struct section {$/;"	s	namespace:llvm::COFF
section	Support/MachO.h	/^    struct section {$/;"	s	namespace:llvm::MachO
sectionContainsSymbol	Object/ELF.h	/^                          ::sectionContainsSymbol(DataRefImpl Sec,$/;"	f	class:llvm::object::ELFObjectFile
section_64	Support/MachO.h	/^    struct section_64 {$/;"	s	namespace:llvm::MachO
section_iterator	Object/ObjectFile.h	/^typedef content_iterator<SectionRef> section_iterator;$/;"	t	namespace:llvm::object
sectname	Support/MachO.h	/^      char sectname[16];$/;"	m	struct:llvm::MachO::section
sectname	Support/MachO.h	/^      char sectname[16];$/;"	m	struct:llvm::MachO::section_64
sector_not_found	Support/system_error.h	/^  sector_not_found        = 27, \/\/ ERROR_SECTOR_NOT_FOUND,$/;"	e	enum:llvm::windows_error::_
seed	ADT/Hashing.h	/^  const size_t seed;$/;"	m	struct:llvm::hashing::detail::hash_combine_recursive_helper
seed	ADT/Hashing.h	/^  uint64_t seed;$/;"	m	struct:llvm::hashing::detail::hash_state
seek	Support/system_error.h	/^  seek                    = 25, \/\/ ERROR_SEEK,$/;"	e	enum:llvm::windows_error::_
segment_command	Support/MachO.h	/^    struct segment_command {$/;"	s	namespace:llvm::MachO
segment_command_64	Support/MachO.h	/^    struct segment_command_64 {$/;"	s	namespace:llvm::MachO
segname	Support/MachO.h	/^      char segname[16];$/;"	m	struct:llvm::MachO::section
segname	Support/MachO.h	/^      char segname[16];$/;"	m	struct:llvm::MachO::section_64
segname	Support/MachO.h	/^      char segname[16];$/;"	m	struct:llvm::MachO::segment_command
segname	Support/MachO.h	/^      char segname[16];$/;"	m	struct:llvm::MachO::segment_command_64
selections	CodeGen/PBQP/Solution.h	/^    SelectionsMap selections;$/;"	m	class:PBQP::Solution
self	Support/IntegersSubset.h	/^    typedef IntRange<IntType> self;$/;"	t	class:llvm::IntRange
self	Support/IntegersSubset.h	/^  typedef IntegersSubsetGeneric<IntTy> self;$/;"	t	class:llvm::IntegersSubsetGeneric
self	Support/IntegersSubsetMapping.h	/^  typedef IntegersSubsetMapping<SuccessorClass, IntegersSubsetTy, IntTy> self;$/;"	t	class:llvm::IntegersSubsetMapping
semantics	ADT/APFloat.h	/^    const fltSemantics *semantics;$/;"	m	class:llvm::APFloat
set	ADT/BitVector.h	/^  BitVector &set() {$/;"	f	class:llvm::BitVector
set	ADT/BitVector.h	/^  BitVector &set(unsigned I, unsigned E) {$/;"	f	class:llvm::BitVector
set	ADT/BitVector.h	/^  BitVector &set(unsigned Idx) {$/;"	f	class:llvm::BitVector
set	ADT/SmallBitVector.h	/^  SmallBitVector &set() {$/;"	f	class:llvm::SmallBitVector
set	ADT/SmallBitVector.h	/^  SmallBitVector &set(unsigned I, unsigned E) {$/;"	f	class:llvm::SmallBitVector
set	ADT/SmallBitVector.h	/^  SmallBitVector &set(unsigned Idx) {$/;"	f	class:llvm::SmallBitVector
set	ADT/SparseBitVector.h	/^  void set(unsigned Idx) {$/;"	f	class:llvm::SparseBitVector
set	ADT/SparseBitVector.h	/^  void set(unsigned Idx) {$/;"	f	struct:llvm::SparseBitVectorElement
set	CodeGen/SelectionDAGNodes.h	/^inline void SDUse::set(const SDValue &V) {$/;"	f	class:llvm::SDUse
set	MC/MachineLocation.h	/^  void set(unsigned R) {$/;"	f	class:llvm::MachineLocation
set	MC/MachineLocation.h	/^  void set(unsigned R, int O) {$/;"	f	class:llvm::MachineLocation
set	Support/ThreadLocal.h	/^      void set(T* d) { setInstance(d); }$/;"	f	class:llvm::sys::ThreadLocal
set	Value.h	/^void Use::set(Value *V) {$/;"	f	class:llvm::Use
setAbsolute	MC/MCSymbol.h	/^    void setAbsolute() { Section = AbsolutePseudoSection; }$/;"	f	class:llvm::MCSymbol
setAddress	CodeGen/MachineCodeInfo.h	/^  void setAddress(void *a) {$/;"	f	class:llvm::MachineCodeInfo
setAddress	Instructions.h	/^  void setAddress(Value *V) { setOperand(0, V); }$/;"	f	class:llvm::IndirectBrInst
setAdjustsStack	CodeGen/MachineFrameInfo.h	/^  void setAdjustsStack(bool V) { AdjustsStack = V; }$/;"	f	class:llvm::MachineFrameInfo
setAliasFor	Support/CommandLine.h	/^  void setAliasFor(Option &O) {$/;"	f	class:llvm::cl::alias
setAliasSet	Analysis/AliasSetTracker.h	/^    void setAliasSet(AliasSet *as) {$/;"	f	class:llvm::AliasSet::PointerRec
setAlignment	CodeGen/MachineBasicBlock.h	/^  void setAlignment(unsigned Align) { Alignment = Align; }$/;"	f	class:llvm::MachineBasicBlock
setAlignment	CodeGen/MachineFunction.h	/^  void setAlignment(unsigned A) { Alignment = A; }$/;"	f	class:llvm::MachineFunction
setAlignment	IntrinsicInst.h	/^    void setAlignment(Constant* A) {$/;"	f	class:llvm::MemIntrinsic
setAlignment	MC/MCAssembler.h	/^  void setAlignment(unsigned Value) { Alignment = Value; }$/;"	f	class:llvm::MCSectionData
setAllBits	ADT/APInt.h	/^  void setAllBits() {$/;"	f	class:llvm::APInt
setAllocateGVsWithCode	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setAllocateGVsWithCode(bool a) {$/;"	f	class:llvm::EngineBuilder
setAllowTemporaryLabels	MC/MCContext.h	/^    void setAllowTemporaryLabels(bool Value) { AllowTemporaryLabels = Value; }$/;"	f	class:llvm::MCContext
setArgOperand	Instructions.h	/^  void setArgOperand(unsigned i, Value *v) { setOperand(i, v); }$/;"	f	class:llvm::CallInst
setArgOperand	Instructions.h	/^  void setArgOperand(unsigned i, Value *v) { setOperand(i, v); }$/;"	f	class:llvm::InvokeInst
setArgStr	Support/CommandLine.h	/^  void setArgStr(const char *S) { ArgStr = S; }$/;"	f	class:llvm::cl::Option
setArgument	Support/CallSite.h	/^  void setArgument(unsigned ArgNo, Value* newVal) {$/;"	f	class:llvm::CallSiteBase
setAsmPrinterFlag	CodeGen/MachineInstr.h	/^  void setAsmPrinterFlag(CommentFlag Flag) {$/;"	f	class:llvm::MachineInstr
setAssemblerDialect	MC/MCParser/MCAsmParser.h	/^  virtual void setAssemblerDialect(unsigned i) { }$/;"	f	class:llvm::MCAsmParser
setAtom	MC/MCAssembler.h	/^  void setAtom(MCSymbolData *Value) { Atom = Value; }$/;"	f	class:llvm::MCFragment
setAtomic	Instructions.h	/^  void setAtomic(AtomicOrdering Ordering,$/;"	f	class:llvm::LoadInst
setAtomic	Instructions.h	/^  void setAtomic(AtomicOrdering Ordering,$/;"	f	class:llvm::StoreInst
setAttributes	Function.h	/^  void setAttributes(const AttrListPtr &attrs) { AttributeList = attrs; }$/;"	f	class:llvm::Function
setAttributes	Instructions.h	/^  void setAttributes(const AttrListPtr &Attrs) { AttributeList = Attrs; }$/;"	f	class:llvm::CallInst
setAttributes	Instructions.h	/^  void setAttributes(const AttrListPtr &Attrs) { AttributeList = Attrs; }$/;"	f	class:llvm::InvokeInst
setAttributes	Support/CallSite.h	/^  void setAttributes(const AttrListPtr &PAL) {$/;"	f	class:llvm::CallSiteBase
setAvailable	Target/TargetLibraryInfo.h	/^  void setAvailable(LibFunc::Func F) {$/;"	f	class:llvm::TargetLibraryInfo
setAvailableFeatures	MC/MCInstPrinter.h	/^  void setAvailableFeatures(unsigned Value) { AvailableFeatures = Value; }$/;"	f	class:llvm::MCInstPrinter
setAvailableFeatures	MC/MCTargetAsmParser.h	/^  void setAvailableFeatures(unsigned Value) { AvailableFeatures = Value; }$/;"	f	class:llvm::MCTargetAsmParser
setAvailableWithName	Target/TargetLibraryInfo.h	/^  void setAvailableWithName(LibFunc::Func F, StringRef Name) {$/;"	f	class:llvm::TargetLibraryInfo
setBinding	Object/ELF.h	/^  void setBinding(unsigned char b) { setBindingAndType(b, getType()); }$/;"	f	struct:llvm::object::Elf_Sym_Impl
setBinding	Support/ELF.h	/^  void setBinding(unsigned char b) { setBindingAndType(b, getType()); }$/;"	f	struct:llvm::ELF::Elf32_Sym
setBinding	Support/ELF.h	/^  void setBinding(unsigned char b) { setBindingAndType(b, getType()); }$/;"	f	struct:llvm::ELF::Elf64_Sym
setBindingAndType	Object/ELF.h	/^  void setBindingAndType(unsigned char b, unsigned char t) {$/;"	f	struct:llvm::object::Elf_Sym_Impl
setBindingAndType	Support/ELF.h	/^  void setBindingAndType(unsigned char b, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf32_Sym
setBindingAndType	Support/ELF.h	/^  void setBindingAndType(unsigned char b, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf64_Sym
setBitsInMask	ADT/BitVector.h	/^  void setBitsInMask(const uint32_t *Mask, unsigned MaskWords = ~0u) {$/;"	f	class:llvm::BitVector
setBitsInMask	ADT/SmallBitVector.h	/^  void setBitsInMask(const uint32_t *Mask, unsigned MaskWords = ~0u) {$/;"	f	class:llvm::SmallBitVector
setBitsNotInMask	ADT/BitVector.h	/^  void setBitsNotInMask(const uint32_t *Mask, unsigned MaskWords = ~0u) {$/;"	f	class:llvm::BitVector
setBitsNotInMask	ADT/SmallBitVector.h	/^  void setBitsNotInMask(const uint32_t *Mask, unsigned MaskWords = ~0u) {$/;"	f	class:llvm::SmallBitVector
setBlockFreq	Analysis/BlockFrequencyImpl.h	/^  void setBlockFreq(BlockT *BB, BlockFrequency Freq) {$/;"	f	class:llvm::BlockFrequencyImpl
setBooleanContents	Target/TargetLowering.h	/^  void setBooleanContents(BooleanContent Ty) { BooleanContents = Ty; }$/;"	f	class:llvm::TargetLowering
setBooleanVectorContents	Target/TargetLowering.h	/^  void setBooleanVectorContents(BooleanContent Ty) {$/;"	f	class:llvm::TargetLowering
setByVal	Target/TargetCallingConv.h	/^    void setByVal() { Flags |= One << ByValOffs; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
setByValAlign	Target/TargetCallingConv.h	/^    void setByValAlign(unsigned A) {$/;"	f	struct:llvm::ISD::ArgFlagsTy
setByValSize	Target/TargetCallingConv.h	/^    void setByValSize(unsigned S) {$/;"	f	struct:llvm::ISD::ArgFlagsTy
setCallSiteBeginLabel	CodeGen/MachineModuleInfo.h	/^  void setCallSiteBeginLabel(MCSymbol *BeginLabel, unsigned Site) {$/;"	f	class:llvm::MachineModuleInfo
setCalledFunction	Instructions.h	/^  void setCalledFunction(Value* Fn) {$/;"	f	class:llvm::CallInst
setCalledFunction	Instructions.h	/^  void setCalledFunction(Value* Fn) {$/;"	f	class:llvm::InvokeInst
setCalledFunction	Support/CallSite.h	/^  void setCalledFunction(Value *V) {$/;"	f	class:llvm::CallSiteBase
setCalleeSavedInfo	CodeGen/MachineFrameInfo.h	/^  void setCalleeSavedInfo(const std::vector<CalleeSavedInfo> &CSI) {$/;"	f	class:llvm::MachineFrameInfo
setCalleeSavedInfoValid	CodeGen/MachineFrameInfo.h	/^  void setCalleeSavedInfoValid(bool v) { CSIValid = v; }$/;"	f	class:llvm::MachineFrameInfo
setCallingConv	Function.h	/^  void setCallingConv(CallingConv::ID CC) {$/;"	f	class:llvm::Function
setCallingConv	Instructions.h	/^  void setCallingConv(CallingConv::ID CC) {$/;"	f	class:llvm::CallInst
setCallingConv	Instructions.h	/^  void setCallingConv(CallingConv::ID CC) {$/;"	f	class:llvm::InvokeInst
setCallingConv	Support/CallSite.h	/^  void setCallingConv(CallingConv::ID CC) {$/;"	f	class:llvm::CallSiteBase
setCallsEHReturn	CodeGen/MachineModuleInfo.h	/^  void setCallsEHReturn(bool b) { CallsEHReturn = b; }$/;"	f	class:llvm::MachineModuleInfo
setCallsUnwindInit	CodeGen/MachineModuleInfo.h	/^  void setCallsUnwindInit(bool b) { CallsUnwindInit = b; }$/;"	f	class:llvm::MachineModuleInfo
setCanReturnTwice	Instructions.h	/^  void setCanReturnTwice() {$/;"	f	class:llvm::CallInst
setChainedPhi	Analysis/ScalarEvolutionExpander.h	/^    void setChainedPhi(PHINode *PN) { ChainedPhis.insert(PN); }$/;"	f	class:llvm::SCEVExpander
setCleanup	Instructions.h	/^  void setCleanup(bool V) {$/;"	f	class:llvm::LandingPadInst
setCmpLibcallCC	Target/TargetLowering.h	/^  void setCmpLibcallCC(RTLIB::Libcall Call, ISD::CondCode CC) {$/;"	f	class:llvm::TargetLowering
setCodeModel	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setCodeModel(CodeModel::Model M) {$/;"	f	class:llvm::EngineBuilder
setCol	CodeGen/PBQP/Math.h	/^    Matrix& setCol(unsigned c, PBQPNum val) {$/;"	f	class:PBQP::Matrix
setColumn	MC/MCDwarf.h	/^    void setColumn(unsigned column) { Column = column; }$/;"	f	class:llvm::MCDwarfLoc
setCommentStream	MC/MCInstPrinter.h	/^  void setCommentStream(raw_ostream &OS) { CommentStream = &OS; }$/;"	f	class:llvm::MCInstPrinter
setCommon	MC/MCAssembler.h	/^  void setCommon(uint64_t Size, unsigned Align) {$/;"	f	class:llvm::MCSymbolData
setCompactUnwindEncoding	CodeGen/MachineModuleInfo.h	/^  void setCompactUnwindEncoding(uint32_t Enc) { CompactUnwindEncoding = Enc; }$/;"	f	class:llvm::MachineModuleInfo
setCondCodeAction	Target/TargetLowering.h	/^  void setCondCodeAction(ISD::CondCode CC, MVT VT,$/;"	f	class:llvm::TargetLowering
setCondition	Instructions.h	/^  void setCondition(Value *V) { setOperand(0, V); }$/;"	f	class:llvm::SwitchInst
setCondition	Instructions.h	/^  void setCondition(Value *V) {$/;"	f	class:llvm::BranchInst
setConstant	GlobalVariable.h	/^  void setConstant(bool Val) { isConstantGlobal = Val; }$/;"	f	class:llvm::GlobalVariable
setConstantVal	CodeGen/MachineRelocation.h	/^  void setConstantVal(intptr_t val) {$/;"	f	class:llvm::MachineRelocation
setConstraint	MC/MCParser/MCParsedAsmOperand.h	/^  void setConstraint(StringRef C) { Constraint = C.str(); }$/;"	f	class:llvm::MCParsedAsmOperand
setCurCycle	CodeGen/ScheduleDAG.h	/^    void setCurCycle(unsigned Cycle) {$/;"	f	class:llvm::SchedulingPriorityQueue
setCurrentCallSite	CodeGen/MachineModuleInfo.h	/^  void setCurrentCallSite(unsigned Site) { CurCallSite = Site; }$/;"	f	class:llvm::MachineModuleInfo
setCurrentDebugType	Support/Debug.h	73;"	d
setCurrentDwarfLoc	MC/MCContext.h	/^    void setCurrentDwarfLoc(unsigned FileNum, unsigned Line, unsigned Column,$/;"	f	class:llvm::MCContext
setDFSIn	CodeGen/LexicalScopes.h	/^  void setDFSIn(unsigned I)             { DFSIn = I; }$/;"	f	class:llvm::LexicalScope
setDFSOut	CodeGen/LexicalScopes.h	/^  void setDFSOut(unsigned O)            { DFSOut = O; }$/;"	f	class:llvm::LexicalScope
setData	CodeGen/PBQP/Graph.h	/^      void setData(void *data) { this->data = data; }$/;"	f	class:PBQP::Graph::EdgeEntry
setData	CodeGen/PBQP/Graph.h	/^      void setData(void *data) { this->data = data; }$/;"	f	class:PBQP::Graph::NodeEntry
setDataLayout	Analysis/InlineCost.h	/^    void setDataLayout(const DataLayout *TData) { TD = TData; }$/;"	f	class:llvm::InlineCostAnalyzer
setDataLayout	ExecutionEngine/ExecutionEngine.h	/^  void setDataLayout(const DataLayout *td) { TD = td; }$/;"	f	class:llvm::ExecutionEngine
setDataLayout	Module.h	/^  void setDataLayout(StringRef DL) { DataLayout = DL; }$/;"	f	class:llvm::Module
setDebugInfoAvailability	CodeGen/MachineModuleInfo.h	/^  void setDebugInfoAvailability(bool avail) { DbgInfoAvailable = avail; }$/;"	f	class:llvm::MachineModuleInfo
setDebugLoc	CodeGen/MachineInstr.h	/^  void setDebugLoc(const DebugLoc dl) { debugLoc = dl; }$/;"	f	class:llvm::MachineInstr
setDebugLoc	CodeGen/SelectionDAGNodes.h	/^  void setDebugLoc(const DebugLoc dl) { debugLoc = dl; }$/;"	f	class:llvm::SDNode
setDebugLoc	Instruction.h	/^  void setDebugLoc(const DebugLoc &Loc) { DbgLoc = Loc; }$/;"	f	class:llvm::Instruction
setDebugType	Analysis/ScalarEvolutionExpander.h	/^    void setDebugType(const char* s) { DebugType = s; }$/;"	f	class:llvm::SCEVExpander
setDefault	CodeGen/MachinePassRegistry.h	/^  void setDefault(MachinePassCtor C)                    { Default = C; }$/;"	f	class:llvm::MachinePassRegistry
setDefault	CodeGen/MachineScheduler.h	/^  static void setDefault(ScheduleDAGCtor C) {$/;"	f	class:llvm::MachineSchedRegistry
setDefault	CodeGen/MachineScheduler.h	/^  static void setDefault(StringRef Name) {$/;"	f	class:llvm::MachineSchedRegistry
setDefault	CodeGen/RegAllocRegistry.h	/^  static void setDefault(FunctionPassCtor C) {$/;"	f	class:llvm::RegisterRegAlloc
setDefault	CodeGen/SchedulerRegistry.h	/^  static void setDefault(FunctionPassCtor C) {$/;"	f	class:llvm::RegisterScheduler
setDefaultDest	Instructions.h	/^  void setDefaultDest(BasicBlock *DefaultCase) {$/;"	f	class:llvm::SwitchInst
setDepth	PassManagers.h	/^  void setDepth(unsigned newDepth) { Depth = newDepth; }$/;"	f	class:llvm::PMDataManager
setDesc	CodeGen/MachineInstr.h	/^  void setDesc(const MCInstrDesc &tid) { MCID = &tid; }$/;"	f	class:llvm::MachineInstr
setDescription	Support/CommandLine.h	/^  void setDescription(const char *S) { HelpStr = S; }$/;"	f	class:llvm::cl::Option
setDest	IntrinsicInst.h	/^    void setDest(Value *Ptr) {$/;"	f	class:llvm::MemIntrinsic
setDiagHandler	Support/SourceMgr.h	/^  void setDiagHandler(DiagHandlerTy DH, void *Ctx = 0) {$/;"	f	class:llvm::SourceMgr
setDisableVerify	CodeGen/Passes.h	/^  void setDisableVerify(bool Disable) { setOpt(DisableVerify, Disable); }$/;"	f	class:llvm::TargetPassConfig
setDiscriminator	MC/MCDwarf.h	/^    void setDiscriminator(unsigned discriminator) {$/;"	f	class:llvm::MCDwarfLoc
setDoesNotAccessMemory	Function.h	/^  void setDoesNotAccessMemory() {$/;"	f	class:llvm::Function
setDoesNotAccessMemory	Instructions.h	/^  void setDoesNotAccessMemory() {$/;"	f	class:llvm::CallInst
setDoesNotAccessMemory	Instructions.h	/^  void setDoesNotAccessMemory() {$/;"	f	class:llvm::InvokeInst
setDoesNotAccessMemory	Support/CallSite.h	/^  void setDoesNotAccessMemory() {$/;"	f	class:llvm::CallSiteBase
setDoesNotAlias	Function.h	/^  void setDoesNotAlias(unsigned n) {$/;"	f	class:llvm::Function
setDoesNotCapture	Function.h	/^  void setDoesNotCapture(unsigned n) {$/;"	f	class:llvm::Function
setDoesNotReturn	Function.h	/^  void setDoesNotReturn() {$/;"	f	class:llvm::Function
setDoesNotReturn	Instructions.h	/^  void setDoesNotReturn() {$/;"	f	class:llvm::CallInst
setDoesNotReturn	Instructions.h	/^  void setDoesNotReturn() {$/;"	f	class:llvm::InvokeInst
setDoesNotReturn	Support/CallSite.h	/^  void setDoesNotReturn() {$/;"	f	class:llvm::CallSiteBase
setDoesNotThrow	Function.h	/^  void setDoesNotThrow() {$/;"	f	class:llvm::Function
setDoesNotThrow	Instructions.h	/^  void setDoesNotThrow() {$/;"	f	class:llvm::CallInst
setDoesNotThrow	Instructions.h	/^  void setDoesNotThrow() {$/;"	f	class:llvm::InvokeInst
setDoesNotThrow	Support/CallSite.h	/^  void setDoesNotThrow() {$/;"	f	class:llvm::CallSiteBase
setDwarfDebugFlags	MC/MCContext.h	/^    void setDwarfDebugFlags(StringRef S) { DwarfDebugFlags = S; }$/;"	f	class:llvm::MCContext
setEdgeData	CodeGen/PBQP/Graph.h	/^    void setEdgeData(EdgeItr eItr, void *data) { getEdge(eItr).setData(data); }$/;"	f	class:PBQP::Graph
setEdgeWeight	Analysis/ProfileInfo.h	/^    void setEdgeWeight(Edge e, double w) {$/;"	f	class:llvm::ProfileInfoT
setEmitNops	MC/MCAssembler.h	/^  void setEmitNops(bool Value) { EmitNops = Value; }$/;"	f	class:llvm::MCAlignFragment
setEnableTailMerge	CodeGen/Passes.h	/^  void setEnableTailMerge(bool Enable) { setOpt(EnableTailMerge, Enable); }$/;"	f	class:llvm::TargetPassConfig
setEnd	ADT/SmallVector.h	/^  void setEnd(T *P) { this->EndX = P; }$/;"	f	class:llvm::SmallVectorTemplateCommon
setEngineKind	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setEngineKind(EngineKind::Kind w) {$/;"	f	class:llvm::EngineBuilder
setErrorStr	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setErrorStr(std::string *e) {$/;"	f	class:llvm::EngineBuilder
setExceptionPointerRegister	Target/TargetLowering.h	/^  void setExceptionPointerRegister(unsigned R) {$/;"	f	class:llvm::TargetLowering
setExceptionSelectorRegister	Target/TargetLowering.h	/^  void setExceptionSelectorRegister(unsigned R) {$/;"	f	class:llvm::TargetLowering
setExecutionDomain	Target/TargetInstrInfo.h	/^  virtual void setExecutionDomain(MachineInstr *MI, unsigned Domain) const {}$/;"	f	class:llvm::TargetInstrInfo
setExposesReturnsTwice	CodeGen/MachineFunction.h	/^  void setExposesReturnsTwice(bool B) {$/;"	f	class:llvm::MachineFunction
setExpr	MC/MCInst.h	/^  void setExpr(const MCExpr *Val) {$/;"	f	class:llvm::MCOperand
setExternal	MC/MCAssembler.h	/^  void setExternal(bool Value) { IsExternal = Value; }$/;"	f	class:llvm::MCSymbolData
setFPImm	MC/MCInst.h	/^  void setFPImm(double Val) {$/;"	f	class:llvm::MCOperand
setFastISel	Target/TargetMachine.h	/^  void setFastISel(bool Enable) { Options.EnableFastISel = Enable; }$/;"	f	class:llvm::TargetMachine
setFile	Support/FileUtilities.h	/^    void setFile(const Twine& filename, bool deleteIt = true) {$/;"	f	class:llvm::FileRemover
setFileNum	MC/MCDwarf.h	/^    void setFileNum(unsigned fileNum) { FileNum = fileNum; }$/;"	f	class:llvm::MCDwarfLoc
setFirstByValReg	CodeGen/CallingConvLower.h	/^  void setFirstByValReg(unsigned r) { FirstByValReg = r; FirstByValRegValid = true; }$/;"	f	class:llvm::CCState
setFlag	CodeGen/MachineInstr.h	/^  void setFlag(MIFlag Flag) {$/;"	f	class:llvm::MachineInstr
setFlags	Analysis/ScalarEvolution.h	/^    static SCEV::NoWrapFlags setFlags(SCEV::NoWrapFlags Flags,$/;"	f	class:llvm::ScalarEvolution
setFlags	CodeGen/MachineInstr.h	/^  void setFlags(unsigned flags) {$/;"	f	class:llvm::MachineInstr
setFlags	Linker.h	/^    void setFlags(unsigned flags) { Flags = flags; }$/;"	f	class:llvm::Linker
setFlags	MC/MCAssembler.h	/^  void setFlags(uint32_t Value) { Flags = Value; }$/;"	f	class:llvm::MCSymbolData
setFlags	MC/MCDwarf.h	/^    void setFlags(unsigned flags) { Flags = flags; }$/;"	f	class:llvm::MCDwarfLoc
setFormattingFlag	Support/CommandLine.h	/^  void setFormattingFlag(enum FormattingFlags V) { Formatting = V; }$/;"	f	class:llvm::cl::Option
setFragment	MC/MCAssembler.h	/^  void setFragment(MCFragment *Value) { Fragment = Value; }$/;"	f	class:llvm::MCSymbolData
setFrameAddressIsTaken	CodeGen/MachineFrameInfo.h	/^  void setFrameAddressIsTaken(bool T) { FrameAddressTaken = T; }$/;"	f	class:llvm::MachineFrameInfo
setFrameIdx	CodeGen/MachineFrameInfo.h	/^  void setFrameIdx(int FI)                       { FrameIdx = FI; }$/;"	f	class:llvm::CalleeSavedInfo
setFrameSize	CodeGen/GCMetadata.h	/^    void setFrameSize(uint64_t S) { FrameSize = S; }$/;"	f	class:llvm::GCFunctionInfo
setFromOpaqueValue	ADT/PointerIntPair.h	/^  void setFromOpaqueValue(void *Val) { Value = reinterpret_cast<intptr_t>(Val);}$/;"	f	class:llvm::PointerIntPair
setFunctionContextIndex	CodeGen/MachineFrameInfo.h	/^  void setFunctionContextIndex(int I) { FunctionContextIdx = I; }$/;"	f	class:llvm::MachineFrameInfo
setGOTIndex	CodeGen/MachineRelocation.h	/^  void setGOTIndex(unsigned idx) {$/;"	f	class:llvm::MachineRelocation
setGenDwarfForAssembly	MC/MCContext.h	/^    void setGenDwarfForAssembly(bool Value) { GenDwarfForAssembly = Value; }$/;"	f	class:llvm::MCContext
setGenDwarfSection	MC/MCContext.h	/^    void setGenDwarfSection(const MCSection *Sec) { GenDwarfSection = Sec; }$/;"	f	class:llvm::MCContext
setGenDwarfSectionEndSym	MC/MCContext.h	/^    void setGenDwarfSectionEndSym(MCSymbol *Sym) {$/;"	f	class:llvm::MCContext
setGenDwarfSectionStartSym	MC/MCContext.h	/^    void setGenDwarfSectionStartSym(MCSymbol *Sym) {$/;"	f	class:llvm::MCContext
setHasAddressTaken	CodeGen/MachineBasicBlock.h	/^  void setHasAddressTaken() { AddressTaken = true; }$/;"	f	class:llvm::MachineBasicBlock
setHasCalls	CodeGen/MachineFrameInfo.h	/^  void setHasCalls(bool V) { HasCalls = V; }$/;"	f	class:llvm::MachineFrameInfo
setHasDebugValue	CodeGen/SelectionDAGNodes.h	/^  void setHasDebugValue(bool b) { HasDebugValue = b; }$/;"	f	class:llvm::SDNode
setHasInstructions	MC/MCAssembler.h	/^  void setHasInstructions(bool Value) { HasInstructions = Value; }$/;"	f	class:llvm::MCSectionData
setHasMetadataHashEntry	Instruction.h	/^  void setHasMetadataHashEntry(bool V) {$/;"	f	class:llvm::Instruction
setHasNoSignedWrap	Operator.h	/^  void setHasNoSignedWrap(bool B) {$/;"	f	class:llvm::OverflowingBinaryOperator
setHasNoUnsignedWrap	Operator.h	/^  void setHasNoUnsignedWrap(bool B) {$/;"	f	class:llvm::OverflowingBinaryOperator
setHasUWTable	Function.h	/^  void setHasUWTable() {$/;"	f	class:llvm::Function
setHeight	ADT/ImmutableSet.h	/^  void setHeight(unsigned h) {$/;"	f	class:llvm::ImutAVLTree
setHiddenFlag	Support/CommandLine.h	/^  void setHiddenFlag(enum OptionHidden Val) { HiddenFlag = Val; }$/;"	f	class:llvm::cl::Option
setHintNameRVA	Support/COFF.h	/^    void setHintNameRVA(uint32_t rva) { data = rva; }$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
setIDom	Analysis/Dominators.h	/^  void setIDom(DomTreeNodeBase<NodeT> *NewIDom) {$/;"	f	class:llvm::DomTreeNodeBase
setIVIncInsertPos	Analysis/ScalarEvolutionExpander.h	/^    void setIVIncInsertPos(const Loop *L, Instruction *Pos) {$/;"	f	class:llvm::SCEVExpander
setImm	CodeGen/MachineOperand.h	/^  void setImm(int64_t immVal) {$/;"	f	class:llvm::MachineOperand
setImm	MC/MCInst.h	/^  void setImm(int64_t Val) {$/;"	f	class:llvm::MCOperand
setImplicit	CodeGen/MachineOperand.h	/^  void setImplicit(bool Val = true) {$/;"	f	class:llvm::MachineOperand
setInReg	Target/TargetCallingConv.h	/^    void setInReg() { Flags |= One << InRegOffs; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
setIncludeDirs	Support/SourceMgr.h	/^  void setIncludeDirs(const std::vector<std::string> &Dirs) {$/;"	f	class:llvm::SourceMgr
setIncomingBlock	Instructions.h	/^  void setIncomingBlock(unsigned i, BasicBlock *BB) {$/;"	f	class:llvm::PHINode
setIncomingValue	Instructions.h	/^  void setIncomingValue(unsigned i, Value *V) {$/;"	f	class:llvm::PHINode
setIncomplete	Analysis/ScalarEvolution.h	/^      void setIncomplete() { NextExit.setInt(1); }$/;"	f	struct:llvm::ScalarEvolution::ExitNotTakenInfo
setIndex	CodeGen/MachineOperand.h	/^  void setIndex(int Idx) {$/;"	f	class:llvm::MachineOperand
setIndex	CodeGen/SlotIndexes.h	/^    void setIndex(unsigned index) {$/;"	f	class:llvm::IndexListEntry
setIndex	MC/MCAssembler.h	/^  void setIndex(uint64_t Value) { Index = Value; }$/;"	f	class:llvm::MCSymbolData
setIndexedLoadAction	Target/TargetLowering.h	/^  void setIndexedLoadAction(unsigned IdxMode, MVT VT,$/;"	f	class:llvm::TargetLowering
setIndexedStoreAction	Target/TargetLowering.h	/^  void setIndexedStoreAction(unsigned IdxMode, MVT VT,$/;"	f	class:llvm::TargetLowering
setInitial	CodeGen/SelectionDAGNodes.h	/^inline void SDUse::setInitial(const SDValue &V) {$/;"	f	class:llvm::SDUse
setInitialValue	Support/CommandLine.h	/^  void setInitialValue(const DataType &V) { this->setValue(V, true); }$/;"	f	class:llvm::cl::opt
setInitialized	CodeGen/Passes.h	/^  void setInitialized() { Initialized = true; }$/;"	f	class:llvm::TargetPassConfig
setInsertFencesForAtomic	Target/TargetLowering.h	/^  void setInsertFencesForAtomic(bool fence) {$/;"	f	class:llvm::TargetLowering
setInst	MC/MCAssembler.h	/^  void setInst(const MCInst& Value) { Inst = Value; }$/;"	f	class:llvm::MCInstFragment
setInst	MC/MCInst.h	/^  void setInst(const MCInst *Val) {$/;"	f	class:llvm::MCOperand
setInstr	CodeGen/ScheduleDAG.h	/^    void setInstr(MachineInstr *MI) {$/;"	f	class:llvm::SUnit
setInstr	CodeGen/SlotIndexes.h	/^    void setInstr(MachineInstr *mi) {$/;"	f	class:llvm::IndexListEntry
setInstructionSubclassData	Instruction.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::Instruction
setInstructionSubclassData	Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::AllocaInst
setInstructionSubclassData	Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::AtomicCmpXchgInst
setInstructionSubclassData	Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::AtomicRMWInst
setInstructionSubclassData	Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::CallInst
setInstructionSubclassData	Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::FenceInst
setInstructionSubclassData	Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::InvokeInst
setInstructionSubclassData	Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::LoadInst
setInstructionSubclassData	Instructions.h	/^  void setInstructionSubclassData(unsigned short D) {$/;"	f	class:llvm::StoreInst
setInt	ADT/PointerIntPair.h	/^  void setInt(IntType Int) {$/;"	f	class:llvm::PointerIntPair
setIntDivIsCheap	Target/TargetLowering.h	/^  void setIntDivIsCheap(bool isCheap = true) { IntDivIsCheap = isCheap; }$/;"	f	class:llvm::TargetLowering
setIsDead	CodeGen/MachineOperand.h	/^  void setIsDead(bool Val = true) {$/;"	f	class:llvm::MachineOperand
setIsDebug	CodeGen/MachineOperand.h	/^  void setIsDebug(bool Val = true) {$/;"	f	class:llvm::MachineOperand
setIsEarlyClobber	CodeGen/MachineOperand.h	/^  void setIsEarlyClobber(bool Val = true) {$/;"	f	class:llvm::MachineOperand
setIsExact	Operator.h	/^  void setIsExact(bool B) {$/;"	f	class:llvm::PossiblyExactOperator
setIsInBounds	Operator.h	/^  void setIsInBounds(bool B) {$/;"	f	class:llvm::GEPOperator
setIsInsideBundle	CodeGen/MachineInstr.h	/^  void setIsInsideBundle(bool Val = true) {$/;"	f	class:llvm::MachineInstr
setIsInternalRead	CodeGen/MachineOperand.h	/^  void setIsInternalRead(bool Val = true) {$/;"	f	class:llvm::MachineOperand
setIsKill	CodeGen/MachineOperand.h	/^  void setIsKill(bool Val = true) {$/;"	f	class:llvm::MachineOperand
setIsLandingPad	CodeGen/MachineBasicBlock.h	/^  void setIsLandingPad(bool V = true) { IsLandingPad = V; }$/;"	f	class:llvm::MachineBasicBlock
setIsNoInline	Instructions.h	/^  void setIsNoInline() {$/;"	f	class:llvm::CallInst
setIsNoInline	Instructions.h	/^  void setIsNoInline() {$/;"	f	class:llvm::InvokeInst
setIsNoInline	Support/CallSite.h	/^  void setIsNoInline(bool Value = true) {$/;"	f	class:llvm::CallSiteBase
setIsRegister	MC/MachineLocation.h	/^  void setIsRegister(bool Is)  { IsRegister = Is; }$/;"	f	class:llvm::MachineLocation
setIsSigned	ADT/APSInt.h	/^  void setIsSigned(bool Val) { IsUnsigned = !Val; }$/;"	f	class:llvm::APSInt
setIsThumbFunc	MC/MCAssembler.h	/^  void setIsThumbFunc(const MCSymbol *Func) { ThumbFuncs.insert(Func); }$/;"	f	class:llvm::MCAssembler
setIsUndef	CodeGen/MachineOperand.h	/^  void setIsUndef(bool Val = true) {$/;"	f	class:llvm::MachineOperand
setIsUnsigned	ADT/APSInt.h	/^  void setIsUnsigned(bool Val) { IsUnsigned = Val; }$/;"	f	class:llvm::APSInt
setIsUse	CodeGen/MachineOperand.h	/^  void setIsUse(bool Val = true) { setIsDef(!Val); }$/;"	f	class:llvm::MachineOperand
setIsa	MC/MCDwarf.h	/^    void setIsa(unsigned isa) { Isa = isa; }$/;"	f	class:llvm::MCDwarfLoc
setJITMemoryManager	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setJITMemoryManager(JITMemoryManager *jmm) {$/;"	f	class:llvm::EngineBuilder
setJumpBufAlignment	Target/TargetLowering.h	/^  void setJumpBufAlignment(unsigned Align) {$/;"	f	class:llvm::TargetLowering
setJumpBufSize	Target/TargetLowering.h	/^  void setJumpBufSize(unsigned Size) {$/;"	f	class:llvm::TargetLowering
setJumpIsExpensive	Target/TargetLowering.h	/^  void setJumpIsExpensive(bool isExpensive = true) {$/;"	f	class:llvm::TargetLowering
setLanguageSpecificHandlerOffset	Support/Win64EH.h	/^  void setLanguageSpecificHandlerOffset(uint64_t offset) {$/;"	f	struct:llvm::Win64EH::UnwindInfo
setLastLocalValue	CodeGen/FastISel.h	/^  void setLastLocalValue(MachineInstr *I) {$/;"	f	class:llvm::FastISel
setLastValInScope	ADT/ScopedHashTable.h	/^  void setLastValInScope(ScopedHashTableVal<K, V> *Val) {$/;"	f	class:llvm::ScopedHashTableScope
setLatency	CodeGen/ScheduleDAG.h	/^    void setLatency(unsigned Lat) {$/;"	f	class:llvm::SDep
setLayoutOrder	MC/MCAssembler.h	/^  void setLayoutOrder(unsigned Value) { LayoutOrder = Value; }$/;"	f	class:llvm::MCFragment
setLayoutOrder	MC/MCAssembler.h	/^  void setLayoutOrder(unsigned Value) { LayoutOrder = Value; }$/;"	f	class:llvm::MCSectionData
setLength	IntrinsicInst.h	/^    void setLength(Value *L) {$/;"	f	class:llvm::MemIntrinsic
setLibcallCallingConv	Target/TargetLowering.h	/^  void setLibcallCallingConv(RTLIB::Libcall Call, CallingConv::ID CC) {$/;"	f	class:llvm::TargetLowering
setLibcallName	Target/TargetLowering.h	/^  void setLibcallName(RTLIB::Libcall Call, const char *Name) {$/;"	f	class:llvm::TargetLowering
setLine	MC/MCDwarf.h	/^    void setLine(unsigned line) { Line = line; }$/;"	f	class:llvm::MCDwarfLoc
setLinkage	GlobalValue.h	/^  void setLinkage(LinkageTypes LT) { Linkage = LT; }$/;"	f	class:llvm::GlobalValue
setListener	CodeGen/MachinePassRegistry.h	/^  void setListener(MachinePassRegistryListener *L)      { Listener = L; }$/;"	f	class:llvm::MachinePassRegistry
setListener	CodeGen/MachineScheduler.h	/^  static void setListener(MachinePassRegistryListener *L) {$/;"	f	class:llvm::MachineSchedRegistry
setListener	CodeGen/RegAllocRegistry.h	/^  static void setListener(MachinePassRegistryListener *L) {$/;"	f	class:llvm::RegisterRegAlloc
setListener	CodeGen/SchedulerRegistry.h	/^  static void setListener(MachinePassRegistryListener *L) {$/;"	f	class:llvm::RegisterScheduler
setLoadExtAction	Target/TargetLowering.h	/^  void setLoadExtAction(unsigned ExtType, MVT VT,$/;"	f	class:llvm::TargetLowering
setLoc	MC/MCInst.h	/^  void setLoc(SMLoc loc) { Loc = loc; }$/;"	f	class:llvm::MCInst
setLocalDifferenceRelocationType	MC/MCMachObjectWriter.h	/^  void setLocalDifferenceRelocationType(unsigned Type) {$/;"	f	class:llvm::MCMachObjectTargetWriter
setLocalFrameMaxAlign	CodeGen/MachineFrameInfo.h	/^  void setLocalFrameMaxAlign(unsigned Align) { LocalFrameMaxAlign = Align; }$/;"	f	class:llvm::MachineFrameInfo
setLocalFrameSize	CodeGen/MachineFrameInfo.h	/^  void setLocalFrameSize(int64_t sz) { LocalFrameSize = sz; }$/;"	f	class:llvm::MachineFrameInfo
setLocation	Support/CommandLine.h	/^  bool setLocation(Option &O, DataType &L) {$/;"	f	class:llvm::cl::opt_storage
setLocation	Support/CommandLine.h	/^  bool setLocation(Option &O, StorageClass &L) {$/;"	f	class:llvm::cl::list_storage
setLocation	Support/CommandLine.h	/^  bool setLocation(Option &O, unsigned &L) {$/;"	f	class:llvm::cl::bits_storage
setMArch	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setMArch(StringRef march) {$/;"	f	class:llvm::EngineBuilder
setMAttrs	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setMAttrs(const StringSequence &mattrs) {$/;"	f	class:llvm::EngineBuilder
setMBB	CodeGen/MachineOperand.h	/^  void setMBB(MachineBasicBlock *MBB) {$/;"	f	class:llvm::MachineOperand
setMCNoExecStack	Target/TargetMachine.h	/^  void setMCNoExecStack(bool Value) { MCNoExecStack = Value; }$/;"	f	class:llvm::TargetMachine
setMCOperandNum	MC/MCParser/MCParsedAsmOperand.h	/^  void setMCOperandNum (unsigned OpNum) { MCOperandNum = OpNum; }$/;"	f	class:llvm::MCParsedAsmOperand
setMCPU	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setMCPU(StringRef mcpu) {$/;"	f	class:llvm::EngineBuilder
setMCRelaxAll	Target/TargetMachine.h	/^  void setMCRelaxAll(bool Value) { MCRelaxAll = Value; }$/;"	f	class:llvm::TargetMachine
setMCSaveTempLabels	Target/TargetMachine.h	/^  void setMCSaveTempLabels(bool Value) { MCSaveTempLabels = Value; }$/;"	f	class:llvm::TargetMachine
setMCUseCFI	Target/TargetMachine.h	/^  void setMCUseCFI(bool Value) { MCUseCFI = Value; }$/;"	f	class:llvm::TargetMachine
setMCUseDwarfDirectory	Target/TargetMachine.h	/^  void setMCUseDwarfDirectory(bool Value) { MCUseDwarfDirectory = Value; }$/;"	f	class:llvm::TargetMachine
setMCUseLoc	Target/TargetMachine.h	/^  void setMCUseLoc(bool Value) { MCUseLoc = Value; }$/;"	f	class:llvm::TargetMachine
setMIFlag	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &setMIFlag(MachineInstr::MIFlag Flag) const {$/;"	f	class:llvm::MachineInstrBuilder
setMIFlags	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &setMIFlags(unsigned Flags) const {$/;"	f	class:llvm::MachineInstrBuilder
setMap	ADT/IntervalMap.h	/^  void setMap(const IntervalMap &m) { map = const_cast<IntervalMap*>(&m); }$/;"	f	class:llvm::IntervalMap::const_iterator
setMaxCallFrameSize	CodeGen/MachineFrameInfo.h	/^  void setMaxCallFrameSize(unsigned S) { MaxCallFrameSize = S; }$/;"	f	class:llvm::MachineFrameInfo
setMemRefs	CodeGen/MachineInstr.h	/^  void setMemRefs(mmo_iterator NewMemRefs, mmo_iterator NewMemRefsEnd) {$/;"	f	class:llvm::MachineInstr
setMemRefs	CodeGen/MachineInstrBuilder.h	/^  const MachineInstrBuilder &setMemRefs(MachineInstr::mmo_iterator b,$/;"	f	class:llvm::MachineInstrBuilder
setMemRefs	CodeGen/SelectionDAGNodes.h	/^  void setMemRefs(mmo_iterator NewMemRefs, mmo_iterator NewMemRefsEnd) {$/;"	f	class:llvm::MachineSDNode
setMinFunctionAlignment	Target/TargetLowering.h	/^  void setMinFunctionAlignment(unsigned Align) {$/;"	f	class:llvm::TargetLowering
setMinLatency	CodeGen/ScheduleDAG.h	/^    void setMinLatency(unsigned Lat) {$/;"	f	class:llvm::SDep
setMinStackArgumentAlignment	Target/TargetLowering.h	/^  void setMinStackArgumentAlignment(unsigned Align) {$/;"	f	class:llvm::TargetLowering
setMinimumJumpTableEntries	Target/TargetLowering.h	/^  void setMinimumJumpTableEntries(int Val) {$/;"	f	class:llvm::TargetLowering
setMiscFlag	Support/CommandLine.h	/^  void setMiscFlag(enum MiscFlags M) { Misc |= M; }$/;"	f	class:llvm::cl::Option
setModule	CodeGen/MachineModuleInfo.h	/^  void setModule(const Module *M) { TheModule = M; }$/;"	f	class:llvm::MachineModuleInfo
setModuleIdentifier	Module.h	/^  void setModuleIdentifier(StringRef ID) { ModuleID = ID; }$/;"	f	class:llvm::Module
setModuleInlineAsm	Module.h	/^  void setModuleInlineAsm(StringRef Asm) {$/;"	f	class:llvm::Module
setN1SolverEdgeItr	CodeGen/PBQP/HeuristicSolver.h	/^      void setN1SolverEdgeItr(SolverEdgeItr n1SolverEdgeItr) {$/;"	f	class:PBQP::HeuristicSolverImpl::EdgeData
setN2SolverEdgeItr	CodeGen/PBQP/HeuristicSolver.h	/^      void setN2SolverEdgeItr(SolverEdgeItr n2SolverEdgeItr){$/;"	f	class:PBQP::HeuristicSolverImpl::EdgeData
setName	Support/Timer.h	/^  void setName(StringRef name) { Name.assign(name.begin(), name.end()); }$/;"	f	class:llvm::TimerGroup
setNest	Target/TargetCallingConv.h	/^    void setNest()  { Flags |= One << NestOffs; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
setNext	ADT/EquivalenceClasses.h	/^    void setNext(const ECValue *NewNext) const {$/;"	f	class:llvm::EquivalenceClasses::ECValue
setNext	ADT/ilist.h	/^  static void setNext(NodeTy *N, NodeTy *Next) { N->setNext(Next); }$/;"	f	struct:llvm::ilist_nextprev_traits
setNext	ADT/ilist_node.h	/^  void setNext(NodeTy *N) { Next = N; }$/;"	f	class:llvm::ilist_node
setNext	CodeGen/MachinePassRegistry.h	/^  void setNext(MachinePassRegistryNode *N)      { Next = N; }$/;"	f	class:llvm::MachinePassRegistryNode
setNext	Support/Recycler.h	/^  static void setNext(RecyclerStruct *t, RecyclerStruct *n) { t->Next = n; }$/;"	f	struct:llvm::ilist_traits
setNextExit	Analysis/ScalarEvolution.h	/^      void setNextExit(ExitNotTakenInfo *ENT) { NextExit.setPointer(ENT); }$/;"	f	struct:llvm::ScalarEvolution::ExitNotTakenInfo
setNoExecStack	MC/MCAssembler.h	/^  void setNoExecStack(bool Value) { NoExecStack = Value; }$/;"	f	class:llvm::MCAssembler
setNoWrapFlags	Analysis/ScalarEvolutionExpressions.h	/^    void setNoWrapFlags(NoWrapFlags Flags) {$/;"	f	class:llvm::SCEVAddRecExpr
setNoWrapFlags	Analysis/ScalarEvolutionExpressions.h	/^    void setNoWrapFlags(NoWrapFlags Flags) {$/;"	f	class:llvm::SCEVCommutativeExpr
setNode	CodeGen/ScheduleDAG.h	/^    void setNode(SDNode *N) {$/;"	f	class:llvm::SUnit
setNode	CodeGen/SelectionDAGNodes.h	/^  void setNode(SDNode *N) { Node = N; }$/;"	f	class:llvm::SDValue
setNode	CodeGen/SelectionDAGNodes.h	/^inline void SDUse::setNode(SDNode *N) {$/;"	f	class:llvm::SDUse
setNode1AEItr	CodeGen/PBQP/Graph.h	/^      void setNode1AEItr(AdjEdgeItr ae) { node1AEItr = ae; }$/;"	f	class:PBQP::Graph::EdgeEntry
setNode2AEItr	CodeGen/PBQP/Graph.h	/^      void setNode2AEItr(AdjEdgeItr ae) { node2AEItr = ae; }$/;"	f	class:PBQP::Graph::EdgeEntry
setNodeData	CodeGen/PBQP/Graph.h	/^    void setNodeData(NodeItr nItr, void *data) { getNode(nItr).setData(data); }$/;"	f	class:PBQP::Graph
setNodeId	CodeGen/SelectionDAGNodes.h	/^  void setNodeId(int Id) { NodeId = Id; }$/;"	f	class:llvm::SDNode
setNodeStop	ADT/IntervalMap.h	/^iterator::setNodeStop(unsigned Level, KeyT Stop) {$/;"	f	class:llvm::IntervalMap::iterator
setNormalCtor	PassSupport.h	/^  void setNormalCtor(NormalCtor_t Ctor) {$/;"	f	class:llvm::PassInfo
setNormalDest	Instructions.h	/^  void setNormalDest(BasicBlock *B) {$/;"	f	class:llvm::InvokeInst
setNumAdditionalVals	Support/CommandLine.h	/^  inline void setNumAdditionalVals(unsigned n) { AdditionalVals = n; }$/;"	f	class:llvm::cl::Option
setNumAdditionalVals	Support/CommandLine.h	/^  void setNumAdditionalVals(unsigned n) {$/;"	f	class:llvm::cl::list
setNumEntries	ADT/DenseMap.h	/^  void setNumEntries(unsigned Num) {$/;"	f	class:llvm::DenseMap
setNumEntries	ADT/DenseMap.h	/^  void setNumEntries(unsigned Num) {$/;"	f	class:llvm::DenseMapBase
setNumEntries	ADT/DenseMap.h	/^  void setNumEntries(unsigned Num) {$/;"	f	class:llvm::SmallDenseMap
setNumOccurrencesFlag	Support/CommandLine.h	/^  void setNumOccurrencesFlag(enum NumOccurrencesFlag Val) {$/;"	f	class:llvm::cl::Option
setNumTombstones	ADT/DenseMap.h	/^  void setNumTombstones(unsigned Num) {$/;"	f	class:llvm::DenseMap
setNumTombstones	ADT/DenseMap.h	/^  void setNumTombstones(unsigned Num) {$/;"	f	class:llvm::DenseMapBase
setNumTombstones	ADT/DenseMap.h	/^  void setNumTombstones(unsigned Num) {$/;"	f	class:llvm::SmallDenseMap
setNumber	CodeGen/MachineBasicBlock.h	/^  void setNumber(int N) { Number = N; }$/;"	f	class:llvm::MachineBasicBlock
setObjectAlignment	CodeGen/MachineFrameInfo.h	/^  void setObjectAlignment(int ObjectIdx, unsigned Align) {$/;"	f	class:llvm::MachineFrameInfo
setObjectOffset	CodeGen/MachineFrameInfo.h	/^  void setObjectOffset(int ObjectIdx, int64_t SPOffset) {$/;"	f	class:llvm::MachineFrameInfo
setObjectSize	CodeGen/MachineFrameInfo.h	/^  void setObjectSize(int ObjectIdx, int64_t Size) {$/;"	f	class:llvm::MachineFrameInfo
setOffset	CodeGen/MachineMemOperand.h	/^  void setOffset(int64_t NewOffset) { PtrInfo.Offset = NewOffset; }$/;"	f	class:llvm::MachineMemOperand
setOffset	CodeGen/MachineOperand.h	/^  void setOffset(int64_t Offset) {$/;"	f	class:llvm::MachineOperand
setOffset	MC/MCAssembler.h	/^  void setOffset(uint64_t Value) { Offset = Value; }$/;"	f	class:llvm::MCSymbolData
setOffset	MC/MCFixup.h	/^  void setOffset(uint32_t Value) { Offset = Value; }$/;"	f	class:llvm::MCFixup
setOffset	MC/MachineLocation.h	/^  void setOffset(int O)        { Offset = O; }$/;"	f	class:llvm::MachineLocation
setOffsetAdjustment	CodeGen/MachineFrameInfo.h	/^  void setOffsetAdjustment(int Adj) { OffsetAdjustment = Adj; }$/;"	f	class:llvm::MachineFrameInfo
setOnlyReadsMemory	Function.h	/^  void setOnlyReadsMemory() {$/;"	f	class:llvm::Function
setOnlyReadsMemory	Instructions.h	/^  void setOnlyReadsMemory() {$/;"	f	class:llvm::CallInst
setOnlyReadsMemory	Instructions.h	/^  void setOnlyReadsMemory() {$/;"	f	class:llvm::InvokeInst
setOnlyReadsMemory	Support/CallSite.h	/^  void setOnlyReadsMemory() {$/;"	f	class:llvm::CallSiteBase
setOpcode	MC/MCInst.h	/^  void setOpcode(unsigned Op) { Opcode = Op; }$/;"	f	class:llvm::MCInst
setOperand	User.h	/^  void setOperand(unsigned i, Value *Val) {$/;"	f	class:llvm::User
setOperandValToReplace	Analysis/IVUsers.h	/^  void setOperandValToReplace(Value *Op) {$/;"	f	class:llvm::IVStrideUse
setOperation	Instructions.h	/^  void setOperation(BinOp Operation) {$/;"	f	class:llvm::AtomicRMWInst
setOperationAction	Target/TargetLowering.h	/^  void setOperationAction(unsigned Op, MVT VT,$/;"	f	class:llvm::TargetLowering
setOptLevel	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setOptLevel(CodeGenOpt::Level l) {$/;"	f	class:llvm::EngineBuilder
setOrdering	Instructions.h	/^  void setOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::AtomicCmpXchgInst
setOrdering	Instructions.h	/^  void setOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::AtomicRMWInst
setOrdering	Instructions.h	/^  void setOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::FenceInst
setOrdering	Instructions.h	/^  void setOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::LoadInst
setOrdering	Instructions.h	/^  void setOrdering(AtomicOrdering Ordering) {$/;"	f	class:llvm::StoreInst
setOrdinal	MC/MCAssembler.h	/^  void setOrdinal(unsigned Value) { Ordinal = Value; }$/;"	f	class:llvm::MCSectionData
setOrdinal	Support/COFF.h	/^    void setOrdinal(uint16_t o) {$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
setOrigAlign	Target/TargetCallingConv.h	/^    void setOrigAlign(unsigned A) {$/;"	f	struct:llvm::ISD::ArgFlagsTy
setPHIJoin	CodeGen/LiveVariables.h	/^  void setPHIJoin(unsigned Reg) { PHIJoins.set(Reg); }$/;"	f	class:llvm::LiveVariables
setParent	CodeGen/MachineInstr.h	/^  void setParent(MachineBasicBlock *P) { Parent = P; }$/;"	f	class:llvm::MachineInstr
setParent	MC/MCAssembler.h	/^  void setParent(MCSectionData *Value) { Parent = Value; }$/;"	f	class:llvm::MCFragment
setParent	Metadata.h	/^  void setParent(Module *M) { Parent = M; }$/;"	f	class:llvm::NamedMDNode
setParentLoop	Analysis/LoopInfo.h	/^  void setParentLoop(LoopT *L) { ParentLoop = L; }$/;"	f	class:llvm::LoopBase
setParsingInlineAsm	MC/MCTargetAsmParser.h	/^  void setParsingInlineAsm (bool Value) { ParsingInlineAsm = Value; }$/;"	f	class:llvm::MCTargetAsmParser
setPhysRegUnused	CodeGen/MachineRegisterInfo.h	/^  void setPhysRegUnused(unsigned Reg) {$/;"	f	class:llvm::MachineRegisterInfo
setPhysRegUsed	CodeGen/MachineRegisterInfo.h	/^  void setPhysRegUsed(unsigned Reg) {$/;"	f	class:llvm::MachineRegisterInfo
setPointer	ADT/PointerIntPair.h	/^  void setPointer(PointerTy Ptr) {$/;"	f	class:llvm::PointerIntPair
setPos	CodeGen/RegisterPressure.h	/^  void setPos(MachineBasicBlock::const_iterator Pos) { CurrPos = Pos; }$/;"	f	class:llvm::RegPressureTracker
setPosition	Support/CommandLine.h	/^  void setPosition(unsigned pos) { Position = pos; }$/;"	f	class:llvm::cl::Option
setPostInc	Analysis/ScalarEvolutionExpander.h	/^    void setPostInc(const PostIncLoopSet &L) {$/;"	f	class:llvm::SCEVExpander
setPow2DivIsCheap	Target/TargetLowering.h	/^  void setPow2DivIsCheap(bool isCheap = true) { Pow2DivIsCheap = isCheap; }$/;"	f	class:llvm::TargetLowering
setPredicate	InstrTypes.h	/^  void setPredicate(Predicate P) { setInstructionSubclassData(P); }$/;"	f	class:llvm::CmpInst
setPrefFunctionAlignment	Target/TargetLowering.h	/^  void setPrefFunctionAlignment(unsigned Align) {$/;"	f	class:llvm::TargetLowering
setPrefLoopAlignment	Target/TargetLowering.h	/^  void setPrefLoopAlignment(unsigned Align) {$/;"	f	class:llvm::TargetLowering
setPreservesAll	PassAnalysisSupport.h	/^  void setPreservesAll() { PreservesAll = true; }$/;"	f	class:llvm::AnalysisUsage
setPrev	ADT/ilist.h	/^  static void setPrev(NodeTy *N, NodeTy *Prev) { N->setPrev(Prev); }$/;"	f	struct:llvm::ilist_nextprev_traits
setPrev	ADT/ilist_node.h	/^  void setPrev(NodeTy *P) { Prev = P; }$/;"	f	class:llvm::ilist_half_node
setPrev	Support/Recycler.h	/^  static void setPrev(RecyclerStruct *t, RecyclerStruct *p) { t->Prev = p; }$/;"	f	struct:llvm::ilist_traits
setPrev	Use.h	/^  void setPrev(Use **NewPrev) {$/;"	f	class:llvm::Use
setPrevInList	Analysis/AliasSetTracker.h	/^    PointerRec** setPrevInList(PointerRec **PIL) {$/;"	f	class:llvm::AliasSet::PointerRec
setPrevPtr	Support/ValueHandle.h	/^  void setPrevPtr(ValueHandleBase **Ptr) { PrevPair.setPointer(Ptr); }$/;"	f	class:llvm::ValueHandleBase
setPrivateExtern	MC/MCAssembler.h	/^  void setPrivateExtern(bool Value) { IsPrivateExtern = Value; }$/;"	f	class:llvm::MCSymbolData
setRSsym	MC/MCELFObjectWriter.h	/^  unsigned setRSsym(unsigned Value, unsigned Type) const {$/;"	f	class:llvm::MCELFObjectTargetWriter
setRType	MC/MCELFObjectWriter.h	/^  unsigned setRType(unsigned Value, unsigned Type) const {$/;"	f	class:llvm::MCELFObjectTargetWriter
setRType2	MC/MCELFObjectWriter.h	/^  unsigned setRType2(unsigned Value, unsigned Type) const {$/;"	f	class:llvm::MCELFObjectTargetWriter
setRType3	MC/MCELFObjectWriter.h	/^  unsigned setRType3(unsigned Value, unsigned Type) const {$/;"	f	class:llvm::MCELFObjectTargetWriter
setReg	CodeGen/ScheduleDAG.h	/^    void setReg(unsigned Reg) {$/;"	f	class:llvm::SDep
setReg	MC/MCInst.h	/^  void setReg(unsigned Reg) {$/;"	f	class:llvm::MCOperand
setRegAllocationHint	CodeGen/MachineRegisterInfo.h	/^  void setRegAllocationHint(unsigned Reg, unsigned Type, unsigned PrefReg) {$/;"	f	class:llvm::MachineRegisterInfo
setRegister	MC/MachineLocation.h	/^  void setRegister(unsigned R) { Register = R; }$/;"	f	class:llvm::MachineLocation
setRelaxAll	MC/MCAssembler.h	/^  void setRelaxAll(bool Value) { RelaxAll = Value; }$/;"	f	class:llvm::MCAssembler
setRelocationModel	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setRelocationModel(Reloc::Model RM) {$/;"	f	class:llvm::EngineBuilder
setResult	Analysis/MemoryDependenceAnalysis.h	/^    void setResult(const MemDepResult &R) { Result = R; }$/;"	f	class:llvm::NonLocalDepEntry
setResult	Analysis/MemoryDependenceAnalysis.h	/^    void setResult(const MemDepResult &R, Value *Addr) {$/;"	f	class:llvm::NonLocalDepResult
setResultPointer	CodeGen/MachineRelocation.h	/^  void setResultPointer(void *Ptr) {$/;"	f	class:llvm::MachineRelocation
setReturnAddressIsTaken	CodeGen/MachineFrameInfo.h	/^  void setReturnAddressIsTaken(bool s) { ReturnAddressTaken = s; }$/;"	f	class:llvm::MachineFrameInfo
setRoot	ADT/IntervalMap.h	/^  void setRoot(unsigned Offset) {$/;"	f	class:llvm::IntervalMap::const_iterator
setRoot	ADT/IntervalMap.h	/^  void setRoot(void *Node, unsigned Size, unsigned Offset) {$/;"	f	class:llvm::IntervalMapImpl::Path
setRoot	CodeGen/SelectionDAG.h	/^  const SDValue &setRoot(SDValue N) {$/;"	f	class:llvm::SelectionDAG
setRow	CodeGen/PBQP/Math.h	/^    Matrix& setRow(unsigned r, PBQPNum val) {$/;"	f	class:PBQP::Matrix
setSExt	Target/TargetCallingConv.h	/^    void setSExt()  { Flags |= One << SExtOffs; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
setSRet	Target/TargetCallingConv.h	/^    void setSRet()  { Flags |= One << SRetOffs; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
setSUnit	CodeGen/ScheduleDAG.h	/^    void setSUnit(SUnit *SU) {$/;"	f	class:llvm::SDep
setScavengingFrameIndex	CodeGen/RegisterScavenging.h	/^  void setScavengingFrameIndex(int FI) { ScavengingFrameIndex = FI; }$/;"	f	class:llvm::RegScavenger
setSchedulingPreference	Target/TargetLowering.h	/^  void setSchedulingPreference(Sched::Preference Pref) {$/;"	f	class:llvm::TargetLowering
setSection	GlobalValue.h	/^  void setSection(StringRef S) { Section = S; }$/;"	f	class:llvm::GlobalValue
setSection	MC/MCSymbol.h	/^    void setSection(const MCSection &S) { Section = &S; }$/;"	f	class:llvm::MCSymbol
setSecureLog	MC/MCContext.h	/^    void setSecureLog(raw_ostream *Value) {$/;"	f	class:llvm::MCContext
setSecureLogUsed	MC/MCContext.h	/^    void setSecureLogUsed(bool Value) {$/;"	f	class:llvm::MCContext
setSelectIsExpensive	Target/TargetLowering.h	/^  void setSelectIsExpensive(bool isExpensive = true) {$/;"	f	class:llvm::TargetLowering
setSelection	CodeGen/PBQP/Solution.h	/^    void setSelection(Graph::NodeItr nItr, unsigned selection) {$/;"	f	class:PBQP::Solution
setSemaCallback	MC/MCTargetAsmParser.h	/^  void setSemaCallback(MCAsmParserSemaCallback *Callback) {$/;"	f	class:llvm::MCTargetAsmParser
setShouldFoldAtomicFences	Target/TargetLowering.h	/^  void setShouldFoldAtomicFences(bool fold) {$/;"	f	class:llvm::TargetLowering
setShowParsedOperands	MC/MCParser/MCAsmParser.h	/^  void setShowParsedOperands(bool Value) { ShowParsedOperands = Value; }$/;"	f	class:llvm::MCAsmParser
setSignedRange	Analysis/ScalarEvolution.h	/^    const ConstantRange &setSignedRange(const SCEV *S,$/;"	f	class:llvm::ScalarEvolution
setSize	ADT/IntervalMap.h	/^  void setSize(unsigned Level, unsigned Size) {$/;"	f	class:llvm::IntervalMapImpl::Path
setSize	ADT/IntervalMap.h	/^  void setSize(unsigned n) { pip.setInt(n - 1); }$/;"	f	class:llvm::IntervalMapImpl::NodeRef
setSize	CodeGen/MachineCodeInfo.h	/^  void setSize(size_t s) {$/;"	f	class:llvm::MachineCodeInfo
setSize	MC/MCAssembler.h	/^  void setSize(const MCExpr *SS) {$/;"	f	class:llvm::MCSymbolData
setSkipSpace	MC/MCParser/MCAsmLexer.h	/^  void setSkipSpace(bool val) { SkipSpace = val; }$/;"	f	class:llvm::MCAsmLexer
setSmallBits	ADT/SmallBitVector.h	/^  void setSmallBits(uintptr_t NewBits) {$/;"	f	class:llvm::SmallBitVector
setSmallRawBits	ADT/SmallBitVector.h	/^  void setSmallRawBits(uintptr_t NewRawBits) {$/;"	f	class:llvm::SmallBitVector
setSmallSize	ADT/SmallBitVector.h	/^  void setSmallSize(size_t Size) {$/;"	f	class:llvm::SmallBitVector
setSolution	CodeGen/PBQP/HeuristicSolver.h	/^    void setSolution(const Graph::NodeItr &nItr, unsigned selection) {$/;"	f	class:PBQP::HeuristicSolverImpl
setSource	IntrinsicInst.h	/^    void setSource(Value *Ptr) {$/;"	f	class:llvm::MemTransferInst
setSourceRange	Support/YAMLParser.h	/^  void setSourceRange(SMRange SR) { SourceRange = SR; }$/;"	f	class:llvm::yaml::Node
setSplit	Target/TargetCallingConv.h	/^    void setSplit()  { Flags |= One << SplitOffs; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
setStackPointerRegisterToSaveRestore	Target/TargetLowering.h	/^  void setStackPointerRegisterToSaveRestore(unsigned R) {$/;"	f	class:llvm::TargetLowering
setStackProtectorIndex	CodeGen/MachineFrameInfo.h	/^  void setStackProtectorIndex(int I) { StackProtectorIdx = I; }$/;"	f	class:llvm::MachineFrameInfo
setStackSize	CodeGen/MachineFrameInfo.h	/^  void setStackSize(uint64_t Size) { StackSize = Size; }$/;"	f	class:llvm::MachineFrameInfo
setStart	ADT/IntervalMap.h	/^iterator::setStart(KeyT a) {$/;"	f	class:llvm::IntervalMap::iterator
setStartStopPasses	CodeGen/Passes.h	/^  void setStartStopPasses(AnalysisID Start, AnalysisID Stop) {$/;"	f	class:llvm::TargetPassConfig
setStartUnchecked	ADT/IntervalMap.h	/^  void setStartUnchecked(KeyT a) { this->unsafeStart() = a; }$/;"	f	class:llvm::IntervalMap::iterator
setState	Target/TargetLibraryInfo.h	/^  void setState(LibFunc::Func F, AvailabilityState State) {$/;"	f	class:llvm::TargetLibraryInfo
setStop	ADT/IntervalMap.h	/^iterator::setStop(KeyT b) {$/;"	f	class:llvm::IntervalMap::iterator
setStopUnchecked	ADT/IntervalMap.h	/^  void setStopUnchecked(KeyT b) {$/;"	f	class:llvm::IntervalMap::iterator
setStream	Support/FormattedStream.h	/^    void setStream(raw_ostream &Stream, bool Delete = false) {$/;"	f	class:llvm::formatted_raw_ostream
setStream	Support/circular_raw_ostream.h	/^    void setStream(raw_ostream &Stream, bool Owns = REFERENCE_ONLY) {$/;"	f	class:llvm::circular_raw_ostream
setSubReg	CodeGen/MachineOperand.h	/^  void setSubReg(unsigned subReg) {$/;"	f	class:llvm::MachineOperand
setSubclassData	Type.h	/^  void setSubclassData(unsigned val) {$/;"	f	class:llvm::Type
setSubsectionsViaSymbols	MC/MCAssembler.h	/^  void setSubsectionsViaSymbols(bool Value) {$/;"	f	class:llvm::MCAssembler
setSuccessor	InstrTypes.h	/^  void setSuccessor(unsigned idx, BasicBlock *B) {$/;"	f	class:llvm::TerminatorInst
setSuccessor	Instructions.h	/^    void setSuccessor(BasicBlock *S) {$/;"	f	class:llvm::SwitchInst::CaseIt
setSuccessor	Instructions.h	/^  void setSuccessor(unsigned i, BasicBlock *NewSucc) {$/;"	f	class:llvm::IndirectBrInst
setSuccessor	Instructions.h	/^  void setSuccessor(unsigned idx, BasicBlock *NewSucc) {$/;"	f	class:llvm::BranchInst
setSuccessor	Instructions.h	/^  void setSuccessor(unsigned idx, BasicBlock *NewSucc) {$/;"	f	class:llvm::InvokeInst
setSuccessor	Instructions.h	/^  void setSuccessor(unsigned idx, BasicBlock *NewSucc) {$/;"	f	class:llvm::SwitchInst
setSupportJumpTables	Target/TargetLowering.h	/^  void setSupportJumpTables(bool Val) {$/;"	f	class:llvm::TargetLowering
setSymbol	Object/ELF.h	/^  void setSymbol(uint32_t s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::object::Elf_Rel_Impl
setSymbol	Object/ELF.h	/^  void setSymbol(uint64_t s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::object::Elf_Rel_Impl
setSymbol	Support/ELF.h	/^  void setSymbol(Elf32_Word s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::ELF::Elf32_Rel
setSymbol	Support/ELF.h	/^  void setSymbol(Elf32_Word s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::ELF::Elf32_Rela
setSymbol	Support/ELF.h	/^  void setSymbol(Elf32_Word s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::ELF::Elf64_Rel
setSymbol	Support/ELF.h	/^  void setSymbol(Elf64_Xword s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::ELF::Elf64_Rela
setSymbolAndType	Object/ELF.h	/^  void setSymbolAndType(uint32_t s, unsigned char t) {$/;"	f	struct:llvm::object::Elf_Rel_Impl
setSymbolAndType	Object/ELF.h	/^  void setSymbolAndType(uint64_t s, unsigned char t) {$/;"	f	struct:llvm::object::Elf_Rel_Impl
setSymbolAndType	Support/ELF.h	/^  void setSymbolAndType(Elf32_Word s, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf32_Rel
setSymbolAndType	Support/ELF.h	/^  void setSymbolAndType(Elf32_Word s, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf32_Rela
setSymbolAndType	Support/ELF.h	/^  void setSymbolAndType(Elf64_Xword s, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf64_Rel
setSymbolAndType	Support/ELF.h	/^  void setSymbolAndType(Elf64_Xword s, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf64_Rela
setSynchScope	Instructions.h	/^  void setSynchScope(SynchronizationScope SynchScope) {$/;"	f	class:llvm::AtomicCmpXchgInst
setSynchScope	Instructions.h	/^  void setSynchScope(SynchronizationScope SynchScope) {$/;"	f	class:llvm::AtomicRMWInst
setSynchScope	Instructions.h	/^  void setSynchScope(SynchronizationScope xthread) {$/;"	f	class:llvm::FenceInst
setSynchScope	Instructions.h	/^  void setSynchScope(SynchronizationScope xthread) {$/;"	f	class:llvm::LoadInst
setSynchScope	Instructions.h	/^  void setSynchScope(SynchronizationScope xthread) {$/;"	f	class:llvm::StoreInst
setTail	ADT/ilist.h	/^  void setTail(NodeTy *N) const { this->noteHead(Head, N); }$/;"	f	class:llvm::iplist
setTailCall	Instructions.h	/^  void setTailCall(bool isTC = true) {$/;"	f	class:llvm::CallInst
setTargetDAGCombine	Target/TargetLowering.h	/^  void setTargetDAGCombine(ISD::NodeType NT) {$/;"	f	class:llvm::TargetLowering
setTargetFlags	CodeGen/MachineOperand.h	/^  void setTargetFlags(unsigned char F) {$/;"	f	class:llvm::MachineOperand
setTargetOptions	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setTargetOptions(const TargetOptions &Opts) {$/;"	f	class:llvm::EngineBuilder
setTargetTriple	Module.h	/^  void setTargetTriple(StringRef T) { TargetTriple = T; }$/;"	f	class:llvm::Module
setThreadLocal	GlobalVariable.h	/^  void setThreadLocal(bool Val) {$/;"	f	class:llvm::GlobalVariable
setThreadLocalMode	GlobalVariable.h	/^  void setThreadLocalMode(ThreadLocalMode Val) { threadLocalMode = Val; }$/;"	f	class:llvm::GlobalVariable
setTopLevelManager	PassManagers.h	/^  void setTopLevelManager(PMTopLevelManager *T) { TPM = T; }$/;"	f	class:llvm::PMDataManager
setTruncStoreAction	Target/TargetLowering.h	/^  void setTruncStoreAction(MVT ValVT, MVT MemVT,$/;"	f	class:llvm::TargetLowering
setType	Object/ELF.h	/^  void setType(unsigned char t) { setBindingAndType(getBinding(), t); }$/;"	f	struct:llvm::object::Elf_Sym_Impl
setType	Object/ELF.h	/^  void setType(unsigned char t) { setSymbolAndType(getSymbol(), t); }$/;"	f	struct:llvm::object::Elf_Rel_Impl
setType	Support/ELF.h	/^  void setType(unsigned char t) { setBindingAndType(getBinding(), t); }$/;"	f	struct:llvm::ELF::Elf32_Sym
setType	Support/ELF.h	/^  void setType(unsigned char t) { setBindingAndType(getBinding(), t); }$/;"	f	struct:llvm::ELF::Elf64_Sym
setType	Support/ELF.h	/^  void setType(unsigned char t) { setSymbolAndType(getSymbol(), t); }$/;"	f	struct:llvm::ELF::Elf32_Rel
setType	Support/ELF.h	/^  void setType(unsigned char t) { setSymbolAndType(getSymbol(), t); }$/;"	f	struct:llvm::ELF::Elf32_Rela
setType	Support/ELF.h	/^  void setType(unsigned char t) { setSymbolAndType(getSymbol(), t); }$/;"	f	struct:llvm::ELF::Elf64_Rel
setType	Support/ELF.h	/^  void setType(unsigned char t) { setSymbolAndType(getSymbol(), t); }$/;"	f	struct:llvm::ELF::Elf64_Rela
setTypeAction	Target/TargetLowering.h	/^    void setTypeAction(EVT VT, LegalizeTypeAction Action) {$/;"	f	class:llvm::TargetLowering::ValueTypeActionImpl
setTypeID	Type.h	/^  void setTypeID(TypeID ID) {$/;"	f	class:llvm::Type
setUnavailable	Target/TargetLibraryInfo.h	/^  void setUnavailable(LibFunc::Func F) {$/;"	f	class:llvm::TargetLibraryInfo
setUndefined	MC/MCSymbol.h	/^    void setUndefined() {$/;"	f	class:llvm::MCSymbol
setUniverse	ADT/SparseSet.h	/^  void setUniverse(unsigned U) {$/;"	f	class:llvm::SparseSet
setUnnamedAddr	GlobalValue.h	/^  void setUnnamedAddr(bool Val) { UnnamedAddr = Val; }$/;"	f	class:llvm::GlobalValue
setUnsignedRange	Analysis/ScalarEvolution.h	/^    const ConstantRange &setUnsignedRange(const SCEV *S,$/;"	f	class:llvm::ScalarEvolution
setUnused	CodeGen/RegisterScavenging.h	/^  void setUnused(BitVector &Regs) {$/;"	f	class:llvm::RegScavenger
setUnwindDest	Instructions.h	/^  void setUnwindDest(BasicBlock *B) {$/;"	f	class:llvm::InvokeInst
setUseLocalStackAllocationBlock	CodeGen/MachineFrameInfo.h	/^  void setUseLocalStackAllocationBlock(bool v) {$/;"	f	class:llvm::MachineFrameInfo
setUseMCJIT	ExecutionEngine/ExecutionEngine.h	/^  EngineBuilder &setUseMCJIT(bool Value) {$/;"	f	class:llvm::EngineBuilder
setUseUnderscoreLongJmp	Target/TargetLowering.h	/^  void setUseUnderscoreLongJmp(bool Val) {$/;"	f	class:llvm::TargetLowering
setUseUnderscoreSetJmp	Target/TargetLowering.h	/^  void setUseUnderscoreSetJmp(bool Val) {$/;"	f	class:llvm::TargetLowering
setUsed	CodeGen/RegisterScavenging.h	/^  void setUsed(BitVector &Regs) {$/;"	f	class:llvm::RegScavenger
setUsed	MC/MCSymbol.h	/^    void setUsed(bool Value) const { IsUsed = Value; }$/;"	f	class:llvm::MCSymbol
setUser	Analysis/IVUsers.h	/^  void setUser(Instruction *NewUser) {$/;"	f	class:llvm::IVStrideUse
setUser	CodeGen/SelectionDAGNodes.h	/^  void setUser(SDNode *p) { User = p; }$/;"	f	class:llvm::SDUse
setUsesVAFloatArgument	CodeGen/MachineModuleInfo.h	/^  void setUsesVAFloatArgument(bool b) {$/;"	f	class:llvm::MachineModuleInfo
setValPtr	Support/ValueHandle.h	/^  void setValPtr(Value *P) {$/;"	f	class:llvm::CallbackVH
setValPtr	Support/ValueHandle.h	/^  void setValPtr(ValueTy *P) {$/;"	f	class:llvm::AssertingVH
setValPtr	Support/ValueHandle.h	/^  void setValPtr(ValueTy *P) {$/;"	f	class:llvm::TrackingVH
setValPtrInt	Support/ValueHandle.h	/^  void setValPtrInt(unsigned K) { VP.setInt(K); }$/;"	f	class:llvm::ValueHandleBase
setValue	ADT/IntervalMap.h	/^iterator::setValue(ValT x) {$/;"	f	class:llvm::IntervalMap::iterator
setValue	ADT/PackedVector.h	/^  static void setValue(BitVectorTy &Bits, unsigned Idx, T val) {$/;"	f	class:llvm::PackedVectorBase
setValue	ADT/StringMap.h	/^  void setValue(const ValueTy &V) { second = V; }$/;"	f	class:llvm::StringMapEntry
setValue	CodeGen/MachineMemOperand.h	/^  void setValue(const Value *NewSV) { PtrInfo.V = NewSV; }$/;"	f	class:llvm::MachineMemOperand
setValue	Instructions.h	/^    void setValue(ConstantInt *V) {$/;"	f	class:llvm::SwitchInst::CaseIt
setValue	IntrinsicInst.h	/^    void setValue(Value *Val) {$/;"	f	class:llvm::MemSetInst
setValue	Support/CommandLine.h	/^  void setValue(const DT& \/*V*\/) {}$/;"	f	struct:llvm::cl::OptionValueBase
setValue	Support/CommandLine.h	/^  void setValue(const DataType &V) { Valid = true; Value = V; }$/;"	f	class:llvm::cl::OptionValueCopy
setValue	Support/CommandLine.h	/^  void setValue(const T &V, bool initial = false) {$/;"	f	class:llvm::cl::opt_storage
setValue	TableGen/Record.h	/^  bool setValue(Init *V) {$/;"	f	class:llvm::RecordVal
setValueEx	Instructions.h	/^    void setValueEx(IntegersSubset& V) {$/;"	f	class:llvm::SwitchInst::CaseIt
setValueExpectedFlag	Support/CommandLine.h	/^  void setValueExpectedFlag(enum ValueExpected Val) { Value = Val; }$/;"	f	class:llvm::cl::Option
setValueName	Value.h	/^  void setValueName(ValueName *VN) { Name = VN; }$/;"	f	class:llvm::Value
setValueStr	Support/CommandLine.h	/^  void setValueStr(const char *S) { ValueStr = S; }$/;"	f	class:llvm::cl::Option
setValueSubclassData	BasicBlock.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::BasicBlock
setValueSubclassData	Constants.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::ConstantExpr
setValueSubclassData	Function.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::Function
setValueSubclassData	InstrTypes.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::CmpInst
setValueSubclassData	Instruction.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::Instruction
setValueSubclassData	Metadata.h	/^  void setValueSubclassData(unsigned short D) {$/;"	f	class:llvm::MDNode
setValueSubclassData	Value.h	/^  void setValueSubclassData(unsigned short D) { SubclassData = D; }$/;"	f	class:llvm::Value
setValueUnchecked	ADT/IntervalMap.h	/^  void setValueUnchecked(ValT x) { this->unsafeValue() = x; }$/;"	f	class:llvm::IntervalMap::iterator
setVariableDbgInfo	CodeGen/MachineModuleInfo.h	/^  void setVariableDbgInfo(MDNode *N, unsigned Slot, DebugLoc Loc) {$/;"	f	class:llvm::MachineModuleInfo
setVisibility	GlobalValue.h	/^  void setVisibility(VisibilityTypes V) { Visibility = V; }$/;"	f	class:llvm::GlobalValue
setVolatile	Analysis/AliasSetTracker.h	/^  void setVolatile() { Volatile = true; }$/;"	f	class:llvm::AliasSet
setVolatile	Instructions.h	/^  void setVolatile(bool V) {$/;"	f	class:llvm::AtomicCmpXchgInst
setVolatile	Instructions.h	/^  void setVolatile(bool V) {$/;"	f	class:llvm::AtomicRMWInst
setVolatile	Instructions.h	/^  void setVolatile(bool V) {$/;"	f	class:llvm::LoadInst
setVolatile	Instructions.h	/^  void setVolatile(bool V) {$/;"	f	class:llvm::StoreInst
setVolatile	IntrinsicInst.h	/^    void setVolatile(Constant* V) {$/;"	f	class:llvm::MemIntrinsic
setZExt	Target/TargetCallingConv.h	/^    void setZExt()  { Flags |= One << ZExtOffs; }$/;"	f	struct:llvm::ISD::ArgFlagsTy
set_	ADT/SetVector.h	/^    set_type &set_;$/;"	m	class:llvm::SetVector::TestAndEraseFromSet
set_	ADT/SetVector.h	/^  set_type set_;         \/\/\/< The set.$/;"	m	class:llvm::SetVector
set_difference	ADT/SetOperations.h	/^S1Ty set_difference(const S1Ty &S1, const S2Ty &S2) {$/;"	f	namespace:llvm
set_gid_on_exe	Support/FileSystem.h	/^  set_gid_on_exe  = 02000, $/;"	e	enum:llvm::sys::fs::perms
set_intersect	ADT/SetOperations.h	/^void set_intersect(S1Ty &S1, const S2Ty &S2) {$/;"	f	namespace:llvm
set_size	ADT/SmallVector.h	/^  void set_size(unsigned N) {$/;"	f	class:llvm::SmallVectorImpl
set_subtract	ADT/SetOperations.h	/^void set_subtract(S1Ty &S1, const S2Ty &S2) {$/;"	f	namespace:llvm
set_type	ADT/SetVector.h	/^  typedef Set set_type;$/;"	t	class:llvm::SetVector
set_uid_on_exe	Support/FileSystem.h	/^  set_uid_on_exe  = 04000, $/;"	e	enum:llvm::sys::fs::perms
set_union	ADT/SetOperations.h	/^bool set_union(S1Ty &S1, const S2Ty &S2) {$/;"	f	namespace:llvm
set_unused_bits	ADT/BitVector.h	/^  void set_unused_bits(bool t = true) {$/;"	f	class:llvm::BitVector
setup	CodeGen/PBQP/HeuristicBase.h	/^    void setup() {$/;"	f	class:PBQP::HeuristicBase
setup	CodeGen/PBQP/HeuristicSolver.h	/^    void setup() {$/;"	f	class:PBQP::HeuristicSolverImpl
setupForSymbolicDisassembly	MC/MCDisassembler.h	/^  void setupForSymbolicDisassembly(LLVMOpInfoCallback getOpInfo,$/;"	f	class:llvm::MCDisassembler
sge	ADT/APInt.h	/^  bool sge(const APInt& RHS) const {$/;"	f	class:llvm::APInt
sge	ADT/APInt.h	/^  bool sge(uint64_t RHS) const {$/;"	f	class:llvm::APInt
sgt	ADT/APInt.h	/^  bool sgt(const APInt& RHS) const {$/;"	f	class:llvm::APInt
sgt	ADT/APInt.h	/^  bool sgt(uint64_t RHS) const {$/;"	f	class:llvm::APInt
sh_addr	Object/ELF.h	/^  Elf_Addr  sh_addr;     \/\/ Address where section is to be loaded$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_addr	Object/ELF.h	/^  Elf_Addr sh_addr;     \/\/ Address where section is to be loaded$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_addr	Support/ELF.h	/^  Elf32_Addr sh_addr;      \/\/ Address where section is to be loaded$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_addr	Support/ELF.h	/^  Elf64_Addr  sh_addr;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_addralign	Object/ELF.h	/^  Elf_Word sh_addralign;\/\/ Section address alignment$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_addralign	Object/ELF.h	/^  Elf_Xword sh_addralign;\/\/ Section address alignment$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_addralign	Support/ELF.h	/^  Elf32_Word sh_addralign; \/\/ Section address alignment$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_addralign	Support/ELF.h	/^  Elf64_Xword sh_addralign;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_entsize	Object/ELF.h	/^  Elf_Word sh_entsize;  \/\/ Size of records contained within the section$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_entsize	Object/ELF.h	/^  Elf_Xword sh_entsize;  \/\/ Size of records contained within the section$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_entsize	Support/ELF.h	/^  Elf32_Word sh_entsize;   \/\/ Size of records contained within the section$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_entsize	Support/ELF.h	/^  Elf64_Xword sh_entsize;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_flags	Object/ELF.h	/^  Elf_Word sh_flags;    \/\/ Section flags (SHF_*)$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_flags	Object/ELF.h	/^  Elf_Xword sh_flags;    \/\/ Section flags (SHF_*)$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_flags	Support/ELF.h	/^  Elf32_Word sh_flags;     \/\/ Section flags (SHF_*)$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_flags	Support/ELF.h	/^  Elf64_Xword sh_flags;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_info	Object/ELF.h	/^  Elf_Word  sh_info;     \/\/ Section type-specific extra information$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_info	Object/ELF.h	/^  Elf_Word sh_info;     \/\/ Section type-specific extra information$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_info	Support/ELF.h	/^  Elf32_Word sh_info;      \/\/ Section type-specific extra information$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_info	Support/ELF.h	/^  Elf64_Word  sh_info;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_link	Object/ELF.h	/^  Elf_Word  sh_link;     \/\/ Section type-specific header table index link$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_link	Object/ELF.h	/^  Elf_Word sh_link;     \/\/ Section type-specific header table index link$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_link	Support/ELF.h	/^  Elf32_Word sh_link;      \/\/ Section type-specific header table index link$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_link	Support/ELF.h	/^  Elf64_Word  sh_link;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_name	Object/ELF.h	/^  Elf_Word  sh_name;     \/\/ Section name (index into string table)$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_name	Object/ELF.h	/^  Elf_Word sh_name;     \/\/ Section name (index into string table)$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_name	Support/ELF.h	/^  Elf32_Word sh_name;      \/\/ Section name (index into string table)$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_name	Support/ELF.h	/^  Elf64_Word  sh_name;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_offset	Object/ELF.h	/^  Elf_Off   sh_offset;   \/\/ File offset of section data, in bytes$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_offset	Object/ELF.h	/^  Elf_Off  sh_offset;   \/\/ File offset of section data, in bytes$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_offset	Support/ELF.h	/^  Elf32_Off  sh_offset;    \/\/ File offset of section data, in bytes$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_offset	Support/ELF.h	/^  Elf64_Off   sh_offset;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_size	Object/ELF.h	/^  Elf_Word sh_size;     \/\/ Size of section, in bytes$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_size	Object/ELF.h	/^  Elf_Xword sh_size;     \/\/ Size of section, in bytes$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_size	Support/ELF.h	/^  Elf32_Word sh_size;      \/\/ Size of section, in bytes$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_size	Support/ELF.h	/^  Elf64_Xword sh_size;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_type	Object/ELF.h	/^  Elf_Word  sh_type;     \/\/ Section type (SHT_*)$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_type	Object/ELF.h	/^  Elf_Word sh_type;     \/\/ Section type (SHT_*)$/;"	m	struct:llvm::object::Elf_Shdr_Base
sh_type	Support/ELF.h	/^  Elf32_Word sh_type;      \/\/ Section type (SHT_*)$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_type	Support/ELF.h	/^  Elf64_Word  sh_type;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sharing_buffer_exceeded	Support/system_error.h	/^  sharing_buffer_exceeded = 36, \/\/ ERROR_SHARING_BUFFER_EXCEEDED,$/;"	e	enum:llvm::windows_error::_
sharing_violation	Support/system_error.h	/^  sharing_violation       = 32, \/\/ ERROR_SHARING_VIOLATION,$/;"	e	enum:llvm::windows_error::_
shift	ADT/IntervalMap.h	/^  void shift(unsigned i, unsigned Size) {$/;"	f	class:llvm::IntervalMapImpl::NodeBase
shift_mix	ADT/Hashing.h	/^inline uint64_t shift_mix(uint64_t val) {$/;"	f	namespace:llvm::hashing::detail
shl	ADT/APInt.h	/^  APInt shl(unsigned shiftAmt) const {$/;"	f	class:llvm::APInt
shl	ADT/APInt.h	/^inline APInt shl(const APInt& LHS, unsigned shiftAmt) {$/;"	f	namespace:llvm::APIntOps
shouldEmitUsedDirectiveFor	Target/TargetLoweringObjectFile.h	/^  virtual bool shouldEmitUsedDirectiveFor(const GlobalValue *GV,$/;"	f	class:llvm::TargetLoweringObjectFile
shouldOptimallyReduce	CodeGen/PBQP/HeuristicBase.h	/^    bool shouldOptimallyReduce(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicBase
shouldOptimallyReduce	CodeGen/PBQP/Heuristics/Briggs.h	/^      bool shouldOptimallyReduce(Graph::NodeItr nItr) {$/;"	f	class:PBQP::Heuristics::Briggs
shouldOptimizeCodePlacement	Target/TargetLowering.h	/^  bool shouldOptimizeCodePlacement() const {$/;"	f	class:llvm::TargetLowering
shouldPrintMachineCode	Target/TargetMachine.h	/^  bool shouldPrintMachineCode() const { return Options.PrintMachineCode; }$/;"	f	class:llvm::TargetMachine
shouldScheduleLoadsNear	Target/TargetInstrInfo.h	/^  virtual bool shouldScheduleLoadsNear(SDNode *Load1, SDNode *Load2,$/;"	f	class:llvm::TargetInstrInfo
shrink_and_clear	ADT/DenseMap.h	/^  void shrink_and_clear() {$/;"	f	class:llvm::DenseMap
shrink_and_clear	ADT/DenseMap.h	/^  void shrink_and_clear() {$/;"	f	class:llvm::DenseMapBase
shrink_and_clear	ADT/DenseMap.h	/^  void shrink_and_clear() {$/;"	f	class:llvm::SmallDenseMap
signedRoundToDouble	ADT/APInt.h	/^  double signedRoundToDouble() const {$/;"	f	class:llvm::APInt
significand	ADT/APFloat.h	/^    } significand;$/;"	m	class:llvm::APFloat	typeref:union:llvm::APFloat::Significand
simplify	CodeGen/PBQP/HeuristicSolver.h	/^    void simplify() {$/;"	f	class:PBQP::HeuristicSolverImpl
simplify_type	ADT/IntrusiveRefCntPtr.h	/^  template<class T> struct simplify_type<IntrusiveRefCntPtr<T> > {$/;"	s	namespace:llvm
simplify_type	ADT/IntrusiveRefCntPtr.h	/^  template<class T> struct simplify_type<const IntrusiveRefCntPtr<T> > {$/;"	s	namespace:llvm
simplify_type	ADT/Optional.h	/^struct simplify_type<Optional<T> >$/;"	s	namespace:llvm
simplify_type	ADT/Optional.h	/^struct simplify_type<const Optional<T> > {$/;"	s	namespace:llvm
simplify_type	ADT/ilist.h	/^template<typename NodeTy> struct simplify_type<const ilist_iterator<NodeTy> > {$/;"	s	namespace:llvm
simplify_type	ADT/ilist.h	/^template<typename NodeTy> struct simplify_type<ilist_iterator<NodeTy> > {$/;"	s	namespace:llvm
simplify_type	CodeGen/SelectionDAGNodes.h	/^template<> struct simplify_type<SDUse> {$/;"	s	namespace:llvm
simplify_type	CodeGen/SelectionDAGNodes.h	/^template<> struct simplify_type<SDValue> {$/;"	s	namespace:llvm
simplify_type	CodeGen/SelectionDAGNodes.h	/^template<> struct simplify_type<const SDUse> {$/;"	s	namespace:llvm
simplify_type	CodeGen/SelectionDAGNodes.h	/^template<> struct simplify_type<const SDValue> {$/;"	s	namespace:llvm
simplify_type	Support/Casting.h	/^template<typename From> struct simplify_type {$/;"	s	namespace:llvm
simplify_type	Support/Casting.h	/^template<typename From> struct simplify_type<const From> {$/;"	s	namespace:llvm
simplify_type	Support/ValueHandle.h	/^template<> struct simplify_type<AssertingVH<Value> >$/;"	s	namespace:llvm
simplify_type	Support/ValueHandle.h	/^template<> struct simplify_type<CallbackVH>$/;"	s	namespace:llvm
simplify_type	Support/ValueHandle.h	/^template<> struct simplify_type<TrackingVH<Value> >$/;"	s	namespace:llvm
simplify_type	Support/ValueHandle.h	/^template<> struct simplify_type<WeakVH> : public simplify_type<const WeakVH> {};$/;"	s	namespace:llvm
simplify_type	Support/ValueHandle.h	/^template<> struct simplify_type<const AssertingVH<Value> > {$/;"	s	namespace:llvm
simplify_type	Support/ValueHandle.h	/^template<> struct simplify_type<const CallbackVH> {$/;"	s	namespace:llvm
simplify_type	Support/ValueHandle.h	/^template<> struct simplify_type<const TrackingVH<Value> > {$/;"	s	namespace:llvm
simplify_type	Support/ValueHandle.h	/^template<> struct simplify_type<const WeakVH> {$/;"	s	namespace:llvm
simplify_type	Use.h	/^template<> struct simplify_type<Use> {$/;"	s	namespace:llvm
simplify_type	Use.h	/^template<> struct simplify_type<const Use> {$/;"	s	namespace:llvm
simplify_type	User.h	/^template<> struct simplify_type<User::const_op_iterator> {$/;"	s	namespace:llvm
simplify_type	User.h	/^template<> struct simplify_type<User::op_iterator> {$/;"	s	namespace:llvm
simplify_type	User.h	/^template<> struct simplify_type<const User::const_op_iterator>$/;"	s	namespace:llvm
simplify_type	User.h	/^template<> struct simplify_type<const User::op_iterator>$/;"	s	namespace:llvm
sin	Target/TargetLibraryInfo.h	/^      sin,$/;"	e	enum:llvm::LibFunc::Func
sinf	Target/TargetLibraryInfo.h	/^      sinf,$/;"	e	enum:llvm::LibFunc::Func
sinh	Target/TargetLibraryInfo.h	/^      sinh,$/;"	e	enum:llvm::LibFunc::Func
sinhf	Target/TargetLibraryInfo.h	/^      sinhf,$/;"	e	enum:llvm::LibFunc::Func
sinhl	Target/TargetLibraryInfo.h	/^      sinhl,$/;"	e	enum:llvm::LibFunc::Func
sinkLineNo	LDDProfilingCommon.h	/^    int sinkLineNo;$/;"	m	struct:dep
sinkVarName	LDDProfilingCommon.h	/^    char sinkVarName[64];$/;"	m	struct:dep
sinl	Target/TargetLibraryInfo.h	/^      sinl,$/;"	e	enum:llvm::LibFunc::Func
siprintf	Target/TargetLibraryInfo.h	/^      siprintf,$/;"	e	enum:llvm::LibFunc::Func
size	ADT/ArrayRef.h	/^    size_t size() const { return Length; }$/;"	f	class:llvm::ArrayRef
size	ADT/BitVector.h	/^  unsigned size() const { return Size; }$/;"	f	class:llvm::BitVector
size	ADT/DenseMap.h	/^  unsigned size() const { return getNumEntries(); }$/;"	f	class:llvm::DenseMapBase
size	ADT/DenseSet.h	/^  unsigned size() const { return TheMap.size(); }$/;"	f	class:llvm::DenseSet
size	ADT/FoldingSet.h	/^  unsigned size() const { return NumNodes; }$/;"	f	class:llvm::FoldingSetImpl
size	ADT/FoldingSet.h	/^  unsigned size() const { return Set.size(); }$/;"	f	class:llvm::FoldingSetVector
size	ADT/ImmutableSet.h	/^  unsigned size() const {$/;"	f	class:llvm::ImutAVLTree
size	ADT/IndexedMap.h	/^    typename StorageT::size_type size() const {$/;"	f	class:llvm::IndexedMap
size	ADT/IntervalMap.h	/^    unsigned size;$/;"	m	struct:llvm::IntervalMapImpl::Path::Entry
size	ADT/IntervalMap.h	/^  unsigned size() const { return pip.getInt() + 1; }$/;"	f	class:llvm::IntervalMapImpl::NodeRef
size	ADT/IntervalMap.h	/^  unsigned size(unsigned Level) const { return path[Level].size; }$/;"	f	class:llvm::IntervalMapImpl::Path
size	ADT/MapVector.h	/^  SizeType size() const {$/;"	f	class:llvm::MapVector
size	ADT/PackedVector.h	/^  unsigned size() const { return Bits.size() >> (BitNum-1); }$/;"	f	class:llvm::PackedVector
size	ADT/SetVector.h	/^  size_type size() const {$/;"	f	class:llvm::SetVector
size	ADT/SmallBitVector.h	/^  size_t size() const {$/;"	f	class:llvm::SmallBitVector
size	ADT/SmallPtrSet.h	/^  unsigned size() const { return NumElements; }$/;"	f	class:llvm::SmallPtrSetImpl
size	ADT/SmallSet.h	/^  unsigned size() const {$/;"	f	class:llvm::SmallSet
size	ADT/SmallVector.h	/^  size_type size() const { return end()-begin(); }$/;"	f	class:llvm::SmallVectorTemplateCommon
size	ADT/SparseSet.h	/^  unsigned size() const { return Dense.size(); }$/;"	f	class:llvm::SparseSet
size	ADT/StringMap.h	/^  unsigned size() const { return NumItems; }$/;"	f	class:llvm::StringMapImpl
size	ADT/StringRef.h	/^    size_t size() const { return Length; }$/;"	f	class:llvm::StringRef
size	ADT/TinyPtrVector.h	/^  unsigned size() const {$/;"	f	class:llvm::TinyPtrVector
size	ADT/UniqueVector.h	/^  size_t size() const { return Vector.size(); }$/;"	f	class:llvm::UniqueVector
size	ADT/ValueMap.h	/^  unsigned size() const { return Map.size(); }$/;"	f	class:llvm::ValueMap
size	ADT/ilist.h	/^  size_type size() const {$/;"	f	class:llvm::iplist
size	Analysis/CallGraph.h	/^  inline unsigned size() const { return (unsigned)CalledFunctions.size(); }$/;"	f	class:llvm::CallGraphNode
size	Analysis/Trace.h	/^  unsigned                 size() const { return BasicBlocks.size(); }$/;"	f	class:llvm::Trace
size	BasicBlock.h	/^  inline size_t                   size() const { return InstList.size();  }$/;"	f	class:llvm::BasicBlock
size	Bitcode/Archive.h	/^    inline size_t                 size()   const { return members.size();   }$/;"	f	class:llvm::Archive
size	CallGraphSCCPass.h	/^  unsigned size() const { return Nodes.size(); }$/;"	f	class:llvm::CallGraphSCC
size	CodeGen/GCMetadata.h	/^    size_t size() const { return SafePoints.size(); }$/;"	f	class:llvm::GCFunctionInfo
size	CodeGen/LiveRangeEdit.h	/^  unsigned size() const { return NewRegs.size()-FirstNew; }$/;"	f	class:llvm::LiveRangeEdit
size	CodeGen/MachineBasicBlock.h	/^  unsigned size() const { return (unsigned)Insts.size(); }$/;"	f	class:llvm::MachineBasicBlock
size	CodeGen/MachineCodeInfo.h	/^  size_t size() const {$/;"	f	class:llvm::MachineCodeInfo
size	CodeGen/MachineFunction.h	/^  static unsigned       size       (MachineFunction *F) { return F->size(); }$/;"	f	struct:llvm::GraphTraits
size	CodeGen/MachineFunction.h	/^  static unsigned       size       (const MachineFunction *F)  {$/;"	f	struct:llvm::GraphTraits
size	CodeGen/MachineFunction.h	/^  unsigned                  size() const { return (unsigned)BasicBlocks.size();}$/;"	f	class:llvm::MachineFunction
size	CodeGen/MachineScheduler.h	/^  unsigned size() const { return Queue.size(); }$/;"	f	class:llvm::ReadyQueue
size	Function.h	/^  size_t                   size() const { return BasicBlocks.size();  }$/;"	f	class:llvm::Function
size	LDDProfilingCommon.h	/^    size_t size;$/;"	m	struct:memRW
size	MC/MCAssembler.h	/^  size_t size() const { return Fragments.size(); }$/;"	f	class:llvm::MCSectionData
size	MC/MCAssembler.h	/^  size_t size() const { return Sections.size(); }$/;"	f	class:llvm::MCAssembler
size	MC/MCInst.h	/^  size_t size() { return Operands.size(); }$/;"	f	class:llvm::MCInst
size	Module.h	/^  size_t                  size() const  { return FunctionList.size(); }$/;"	f	class:llvm::Module
size	Support/CFG.h	/^  static unsigned       size       (Function *F) { return F->size(); }$/;"	f	struct:llvm::GraphTraits
size	Support/CFG.h	/^  static unsigned       size       (const Function *F) { return F->size(); }$/;"	f	struct:llvm::GraphTraits
size	Support/IntegersSubsetMapping.h	/^  unsigned size() const {$/;"	f	class:llvm::IntegersSubsetMapping
size	Support/MachO.h	/^      uint32_t size;$/;"	m	struct:llvm::MachO::fat_arch
size	Support/MachO.h	/^      uint32_t size;$/;"	m	struct:llvm::MachO::section
size	Support/MachO.h	/^      uint32_t size;$/;"	m	struct:llvm::MachO::symseg_command
size	Support/MachO.h	/^      uint64_t size;$/;"	m	struct:llvm::MachO::section_64
size	Support/Memory.h	/^    size_t size() const { return Size; }$/;"	f	class:llvm::sys::MemoryBlock
size	Support/PathV1.h	/^      size_t size() const { return path.size(); }$/;"	f	class:llvm::sys::Path
size	Support/StringPool.h	/^    inline unsigned size() const {$/;"	f	class:llvm::PooledStringPtr
size	TableGen/Record.h	/^  inline size_t         size () const { return Values.size();  }$/;"	f	class:llvm::ListInit
size	TypeFinder.h	/^  size_t size() const { return StructTypes.size(); }$/;"	f	class:llvm::TypeFinder
size	ValueSymbolTable.h	/^  inline unsigned size() const { return unsigned(vmap.size()); }$/;"	f	class:llvm::ValueSymbolTable
size_in_bytes	ADT/SmallVector.h	/^  size_t size_in_bytes() const {$/;"	f	class:llvm::SmallVectorBase
size_type	ADT/ArrayRef.h	/^    typedef size_t size_type;$/;"	t	class:llvm::ArrayRef
size_type	ADT/EquivalenceClasses.h	/^    typedef size_t size_type;$/;"	t	class:llvm::EquivalenceClasses::member_iterator
size_type	ADT/SetVector.h	/^  typedef typename vector_type::size_type size_type;$/;"	t	class:llvm::SetVector
size_type	ADT/SmallVector.h	/^  typedef size_t size_type;$/;"	t	class:llvm::SmallVectorTemplateCommon
size_type	ADT/SmallVector.h	/^  typedef typename SuperClass::size_type size_type;$/;"	t	class:llvm::SmallVectorImpl
size_type	ADT/StringMap.h	/^  typedef size_t size_type;$/;"	t	class:llvm::StringMap
size_type	ADT/StringRef.h	/^    typedef size_t size_type;$/;"	t	class:llvm::StringRef
size_type	ADT/ilist.h	/^  typedef size_t size_type;$/;"	t	class:llvm::iplist
size_type	ADT/ilist.h	/^  typedef typename iplist<NodeTy>::size_type size_type;$/;"	t	struct:llvm::ilist
sizeofcmds	Support/MachO.h	/^      uint32_t sizeofcmds;$/;"	m	struct:llvm::MachO::mach_header
sizeofcmds	Support/MachO.h	/^      uint32_t sizeofcmds;$/;"	m	struct:llvm::MachO::mach_header_64
skip	Support/YAMLParser.h	/^  virtual void skip() {}$/;"	f	class:llvm::yaml::Node
skip	Support/YAMLParser.h	/^void skip(CollectionType &C) {$/;"	f	namespace:llvm::yaml
skipA	ADT/IntervalMap.h	/^  void skipA() {$/;"	f	class:llvm::IntervalMapOverlaps
skipB	ADT/IntervalMap.h	/^  void skipB() {$/;"	f	class:llvm::IntervalMapOverlaps
skipBundle	CodeGen/MachineRegisterInfo.h	/^    MachineInstr *skipBundle() {$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
skipChildren	ADT/DepthFirstIterator.h	/^  inline _Self& skipChildren() {  $/;"	f	class:llvm::df_iterator
skipInstruction	CodeGen/MachineRegisterInfo.h	/^    MachineInstr *skipInstruction() {$/;"	f	class:llvm::MachineRegisterInfo::defusechain_iterator
skipSubTree	ADT/ImmutableSet.h	/^  inline void skipSubTree() {$/;"	f	class:llvm::ImutAVLTreeInOrderIterator
skipThisLoop	Analysis/LoopPass.h	/^  bool skipThisLoop;$/;"	m	class:llvm::LPPassManager
skipThisRegion	Analysis/RegionPass.h	/^  bool skipThisRegion;$/;"	m	class:llvm::RGPassManager
skipTo	CodeGen/RegisterScavenging.h	/^  void skipTo(MachineBasicBlock::iterator I) { MBBI = I; }$/;"	f	class:llvm::RegScavenger
skipToParent	ADT/ImmutableSet.h	/^  void skipToParent() {$/;"	f	class:llvm::ImutAVLTreeGenericIterator
sle	ADT/APInt.h	/^  bool sle(const APInt& RHS) const {$/;"	f	class:llvm::APInt
sle	ADT/APInt.h	/^  bool sle(uint64_t RHS) const {$/;"	f	class:llvm::APInt
slice	ADT/ArrayRef.h	/^    ArrayRef<T> slice(unsigned N) const {$/;"	f	class:llvm::ArrayRef
slice	ADT/ArrayRef.h	/^    ArrayRef<T> slice(unsigned N, unsigned M) const {$/;"	f	class:llvm::ArrayRef
slice	ADT/ArrayRef.h	/^    MutableArrayRef<T> slice(unsigned N) const {$/;"	f	class:llvm::MutableArrayRef
slice	ADT/ArrayRef.h	/^    MutableArrayRef<T> slice(unsigned N, unsigned M) const {$/;"	f	class:llvm::MutableArrayRef
slice	ADT/SmallString.h	/^  StringRef slice(size_t Start, size_t End) const {$/;"	f	class:llvm::SmallString
slice	ADT/StringRef.h	/^    StringRef slice(size_t Start, size_t End) const {$/;"	f	class:llvm::StringRef
slt	ADT/APInt.h	/^  bool slt(uint64_t RHS) const {$/;"	f	class:llvm::APInt
smax	ADT/APInt.h	/^inline APInt smax(const APInt &A, const APInt &B) {$/;"	f	namespace:llvm::APIntOps
smax_pred_ty	Support/PatternMatch.h	/^struct smax_pred_ty {$/;"	s	namespace:llvm::PatternMatch
smin	ADT/APInt.h	/^inline APInt smin(const APInt &A, const APInt &B) {$/;"	f	namespace:llvm::APIntOps
smin_pred_ty	Support/PatternMatch.h	/^struct smin_pred_ty {$/;"	s	namespace:llvm::PatternMatch
snprint	Support/Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object1
snprint	Support/Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object2
snprint	Support/Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object3
snprint	Support/Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object4
snprint	Support/Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object5
snprintf	Support/Format.h	34;"	d
socket_file	Support/FileSystem.h	/^    socket_file,$/;"	e	enum:llvm::sys::fs::file_type::_
solve	CodeGen/PBQP/HeuristicSolver.h	/^    static Solution solve(Graph &g) {$/;"	f	class:PBQP::HeuristicSolver
solverDegree	CodeGen/PBQP/HeuristicSolver.h	/^      unsigned solverDegree;$/;"	m	class:PBQP::HeuristicSolverImpl::NodeData
solverEdges	CodeGen/PBQP/HeuristicSolver.h	/^      SolverEdges solverEdges;$/;"	m	class:PBQP::HeuristicSolverImpl::NodeData
solverEdgesBegin	CodeGen/PBQP/HeuristicSolver.h	/^      SolverEdgeItr solverEdgesBegin() { return solverEdges.begin(); }$/;"	f	class:PBQP::HeuristicSolverImpl::NodeData
solverEdgesBegin	CodeGen/PBQP/HeuristicSolver.h	/^    SolverEdgeItr solverEdgesBegin(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
solverEdgesEnd	CodeGen/PBQP/HeuristicSolver.h	/^      SolverEdgeItr solverEdgesEnd() { return solverEdges.end(); }$/;"	f	class:PBQP::HeuristicSolverImpl::NodeData
solverEdgesEnd	CodeGen/PBQP/HeuristicSolver.h	/^    SolverEdgeItr solverEdgesEnd(Graph::NodeItr nItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
solverRunSimplify	CodeGen/PBQP/HeuristicBase.h	/^    bool solverRunSimplify() const { return true; }$/;"	f	class:PBQP::HeuristicBase
sort	ADT/ilist.h	/^  void sort() { sort(op_less); }$/;"	f	class:llvm::iplist
sort	Support/IntegersSubsetMapping.h	/^  void sort() {$/;"	f	class:llvm::IntegersSubsetMapping
space_info	Support/FileSystem.h	/^struct space_info {$/;"	s	namespace:llvm::sys::fs
sparc	ADT/Triple.h	/^    sparc,   \/\/ Sparc: sparc$/;"	e	enum:llvm::Triple::ArchType
sparc	ADT/Triple.h	18;"	d
sparcv9	ADT/Triple.h	/^    sparcv9, \/\/ Sparcv9: Sparcv9$/;"	e	enum:llvm::Triple::ArchType
specificval_ty	Support/PatternMatch.h	/^  specificval_ty(const Value *V) : Val(V) {}$/;"	f	struct:llvm::PatternMatch::specificval_ty
specificval_ty	Support/PatternMatch.h	/^struct specificval_ty {$/;"	s	namespace:llvm::PatternMatch
spillCalleeSavedRegisters	Target/TargetFrameLowering.h	/^  virtual bool spillCalleeSavedRegisters(MachineBasicBlock &MBB,$/;"	f	class:llvm::TargetFrameLowering
spir	ADT/Triple.h	/^    spir     \/\/ SPIR: standard portable IR for OpenCL$/;"	e	enum:llvm::Triple::ArchType
splice	ADT/ilist.h	/^  void splice(iterator where, iplist &L2) {$/;"	f	class:llvm::iplist
splice	ADT/ilist.h	/^  void splice(iterator where, iplist &L2, iterator first) {$/;"	f	class:llvm::iplist
splice	ADT/ilist.h	/^  void splice(iterator where, iplist &L2, iterator first, iterator last) {$/;"	f	class:llvm::iplist
splice	Bitcode/Archive.h	/^    inline void splice(iterator dest, Archive& arch, iterator src)$/;"	f	class:llvm::Archive
splice	CodeGen/MachineBasicBlock.h	/^  void splice(instr_iterator where, MachineBasicBlock *Other, instr_iterator From,$/;"	f	class:llvm::MachineBasicBlock
splice	CodeGen/MachineBasicBlock.h	/^  void splice(instr_iterator where, MachineBasicBlock *Other,$/;"	f	class:llvm::MachineBasicBlock
splice	CodeGen/MachineBasicBlock.h	/^  void splice(iterator where, MachineBasicBlock *Other, iterator From,$/;"	f	class:llvm::MachineBasicBlock
splice	CodeGen/MachineFunction.h	/^  void splice(iterator InsertPt, iterator MBBI) {$/;"	f	class:llvm::MachineFunction
splice	CodeGen/MachineFunction.h	/^  void splice(iterator InsertPt, iterator MBBI, iterator MBBE) {$/;"	f	class:llvm::MachineFunction
split	ADT/StringRef.h	/^    std::pair<StringRef, StringRef> split(StringRef Separator) const {$/;"	f	class:llvm::StringRef
split	ADT/StringRef.h	/^    std::pair<StringRef, StringRef> split(char Separator) const {$/;"	f	class:llvm::StringRef
splitBlock	Analysis/Dominators.h	/^  inline void splitBlock(BasicBlock* NewBB) {$/;"	f	class:llvm::DominatorTree
splitBlock	Analysis/Dominators.h	/^  void splitBlock(NodeT* NewBB) {$/;"	f	class:llvm::DominatorTreeBase
splitBlock	CodeGen/MachineDominators.h	/^  inline void splitBlock(MachineBasicBlock* NewBB) {$/;"	f	class:llvm::MachineDominatorTree
splitRoot	ADT/IntervalMap.h	/^splitRoot(unsigned Position) {$/;"	f	class:llvm::IntervalMap
sqrt	Target/TargetLibraryInfo.h	/^      sqrt,$/;"	e	enum:llvm::LibFunc::Func
sqrtf	Target/TargetLibraryInfo.h	/^      sqrtf,$/;"	e	enum:llvm::LibFunc::Func
sqrtl	Target/TargetLibraryInfo.h	/^      sqrtl,$/;"	e	enum:llvm::LibFunc::Func
srcLineNo	LDDProfilingCommon.h	/^    int srcLineNo;$/;"	m	struct:dep
srcVarName	LDDProfilingCommon.h	/^    char srcVarName[64];$/;"	m	struct:dep
srem	ADT/APInt.h	/^  APInt srem(const APInt &RHS) const {$/;"	f	class:llvm::APInt
srem	ADT/APInt.h	/^inline APInt srem(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
st_info	Object/ELF.h	/^  unsigned char st_info;  \/\/ Symbol's type and binding attributes$/;"	m	struct:llvm::object::Elf_Sym_Base
st_info	Support/ELF.h	/^  unsigned char   st_info;  \/\/ Symbol's type and binding attributes$/;"	m	struct:llvm::ELF::Elf64_Sym
st_info	Support/ELF.h	/^  unsigned char st_info;  \/\/ Symbol's type and binding attributes$/;"	m	struct:llvm::ELF::Elf32_Sym
st_name	Object/ELF.h	/^  Elf_Word      st_name;  \/\/ Symbol name (index into string table)$/;"	m	struct:llvm::object::Elf_Sym_Base
st_name	Support/ELF.h	/^  Elf32_Word    st_name;  \/\/ Symbol name (index into string table)$/;"	m	struct:llvm::ELF::Elf32_Sym
st_name	Support/ELF.h	/^  Elf64_Word      st_name;  \/\/ Symbol name (index into string table)$/;"	m	struct:llvm::ELF::Elf64_Sym
st_other	Object/ELF.h	/^  unsigned char st_other; \/\/ Must be zero; reserved$/;"	m	struct:llvm::object::Elf_Sym_Base
st_other	Support/ELF.h	/^  unsigned char   st_other; \/\/ Must be zero; reserved$/;"	m	struct:llvm::ELF::Elf64_Sym
st_other	Support/ELF.h	/^  unsigned char st_other; \/\/ Must be zero; reserved$/;"	m	struct:llvm::ELF::Elf32_Sym
st_shndx	Object/ELF.h	/^  Elf_Half      st_shndx; \/\/ Which section (header table index) it's defined in$/;"	m	struct:llvm::object::Elf_Sym_Base
st_shndx	Support/ELF.h	/^  Elf32_Half    st_shndx; \/\/ Which section (header table index) it's defined in$/;"	m	struct:llvm::ELF::Elf32_Sym
st_shndx	Support/ELF.h	/^  Elf64_Half      st_shndx; \/\/ Which section (header table index) it's defined in$/;"	m	struct:llvm::ELF::Elf64_Sym
st_size	Object/ELF.h	/^  Elf_Word      st_size;  \/\/ Size of the symbol$/;"	m	struct:llvm::object::Elf_Sym_Base
st_size	Object/ELF.h	/^  Elf_Xword     st_size;  \/\/ Size of the symbol$/;"	m	struct:llvm::object::Elf_Sym_Base
st_size	Support/ELF.h	/^  Elf32_Word    st_size;  \/\/ Size of the symbol$/;"	m	struct:llvm::ELF::Elf32_Sym
st_size	Support/ELF.h	/^  Elf64_Xword     st_size;  \/\/ Size of the symbol$/;"	m	struct:llvm::ELF::Elf64_Sym
st_value	Object/ELF.h	/^  Elf_Addr      st_value; \/\/ Value or address associated with the symbol$/;"	m	struct:llvm::object::Elf_Sym_Base
st_value	Support/ELF.h	/^  Elf32_Addr    st_value; \/\/ Value or address associated with the symbol$/;"	m	struct:llvm::ELF::Elf32_Sym
st_value	Support/ELF.h	/^  Elf64_Addr      st_value; \/\/ Value or address associated with the symbol$/;"	m	struct:llvm::ELF::Elf64_Sym
stack	ADT/ImmutableSet.h	/^  SmallVector<uintptr_t,20> stack;$/;"	m	class:llvm::ImutAVLTreeGenericIterator
stack	CodeGen/PBQP/HeuristicSolver.h	/^    std::vector<Graph::NodeItr> stack;$/;"	m	class:PBQP::HeuristicSolverImpl
stackSlot2Index	Target/TargetRegisterInfo.h	/^  static int stackSlot2Index(unsigned Reg) {$/;"	f	class:llvm::TargetRegisterInfo
start	ADT/IntervalMap.h	/^    KeyT start;$/;"	m	struct:llvm::IntervalMap::RootBranchData
start	ADT/IntervalMap.h	/^  KeyT &start(unsigned i) { return this->first[i].first; }$/;"	f	class:llvm::IntervalMapImpl::LeafNode
start	ADT/IntervalMap.h	/^  KeyT start() const {$/;"	f	class:llvm::IntervalMap
start	ADT/IntervalMap.h	/^  KeyType start() const {$/;"	f	class:llvm::IntervalMapOverlaps
start	ADT/IntervalMap.h	/^  const KeyT &start() const { return unsafeStart(); }$/;"	f	class:llvm::IntervalMap::const_iterator
start	ADT/IntervalMap.h	/^  const KeyT &start(unsigned i) const { return this->first[i].first; }$/;"	f	class:llvm::IntervalMapImpl::LeafNode
start	CodeGen/LiveInterval.h	/^    SlotIndex start;  \/\/ Start point of the interval (inclusive)$/;"	m	struct:llvm::LiveRange
startAddress	Support/Win64EH.h	/^  uint64_t startAddress;$/;"	m	struct:llvm::Win64EH::RuntimeFunction
startLess	ADT/IntervalMap.h	/^  static inline bool startLess(const T &x, const T &a) {$/;"	f	struct:llvm::IntervalMapInfo
startLess	CodeGen/SlotIndexes.h	/^    static inline bool startLess(const SlotIndex &x, const SlotIndex &a) {$/;"	f	struct:llvm::IntervalMapInfo
startswith	ADT/SmallString.h	/^  bool startswith(StringRef Prefix) const {$/;"	f	class:llvm::SmallString
startswith	ADT/StringRef.h	/^    bool startswith(StringRef Prefix) const {$/;"	f	class:llvm::StringRef
state	ADT/Hashing.h	/^  hash_state state;$/;"	m	struct:llvm::hashing::detail::hash_combine_recursive_helper
state_not_recoverable	Support/system_error.h	/^  state_not_recoverable               = ENOTRECOVERABLE,$/;"	e	enum:llvm::errc::_
status	Support/PathV1.h	/^      mutable FileStatus status; \/\/\/< Status information.$/;"	m	class:llvm::sys::PathWithStatus
status_error	Support/FileSystem.h	/^    status_error,$/;"	e	enum:llvm::sys::fs::file_type::_
std	ADT/BitVector.h	/^namespace std {$/;"	n
std	ADT/SmallBitVector.h	/^namespace std {$/;"	n
std	ADT/SmallPtrSet.h	/^namespace std {$/;"	n
std	ADT/SmallVector.h	/^namespace std {$/;"	n
std	ADT/ilist.h	/^namespace std {$/;"	n
stdString	ADT/Twine.h	/^      const std::string *stdString;$/;"	m	union:llvm::Twine::Child
stealCalledFunctionsFrom	Analysis/CallGraph.h	/^  void stealCalledFunctionsFrom(CallGraphNode *N) {$/;"	f	class:llvm::CallGraphNode
sticky_bit	Support/FileSystem.h	/^  sticky_bit      = 01000,$/;"	e	enum:llvm::sys::fs::perms
stop	ADT/IntervalMap.h	/^  KeyT &stop(unsigned i) { return this->first[i].second; }$/;"	f	class:llvm::IntervalMapImpl::LeafNode
stop	ADT/IntervalMap.h	/^  KeyT &stop(unsigned i) { return this->second[i]; }$/;"	f	class:llvm::IntervalMapImpl::BranchNode
stop	ADT/IntervalMap.h	/^  KeyT stop() const {$/;"	f	class:llvm::IntervalMap
stop	ADT/IntervalMap.h	/^  KeyType stop() const {$/;"	f	class:llvm::IntervalMapOverlaps
stop	ADT/IntervalMap.h	/^  const KeyT &stop() const { return unsafeStop(); }$/;"	f	class:llvm::IntervalMap::const_iterator
stop	ADT/IntervalMap.h	/^  const KeyT &stop(unsigned i) const { return this->first[i].second; }$/;"	f	class:llvm::IntervalMapImpl::LeafNode
stop	ADT/IntervalMap.h	/^  const KeyT &stop(unsigned i) const { return this->second[i]; }$/;"	f	class:llvm::IntervalMapImpl::BranchNode
stopLess	ADT/IntervalMap.h	/^  static inline bool stopLess(const T &b, const T &x) {$/;"	f	struct:llvm::IntervalMapInfo
stopLess	CodeGen/SlotIndexes.h	/^    static inline bool stopLess(const SlotIndex &b, const SlotIndex &x) {$/;"	f	struct:llvm::IntervalMapInfo
stopTag	Use.h	/^                  , stopTag$/;"	e	enum:llvm::Use::PrevPtrTag
storage	ADT/DenseMap.h	/^  AlignedCharArrayUnion<BucketT[InlineBuckets], LargeRep> storage;$/;"	m	class:llvm::SmallDenseMap
storage_	ADT/IndexedMap.h	/^    StorageT storage_;$/;"	m	class:llvm::IndexedMap
storeRegToStackSlot	Target/TargetInstrInfo.h	/^  virtual void storeRegToStackSlot(MachineBasicBlock &MBB,$/;"	f	class:llvm::TargetInstrInfo
store_and_advance	ADT/Hashing.h	/^bool store_and_advance(char *&buffer_ptr, char *buffer_end, const T& value,$/;"	f	namespace:llvm::hashing::detail
str	ADT/SmallString.h	/^  StringRef str() const { return StringRef(this->begin(), this->size()); }$/;"	f	class:llvm::SmallString
str	ADT/StringRef.h	/^    std::string str() const {$/;"	f	class:llvm::StringRef
str	ADT/Triple.h	/^  const std::string &str() const { return Data; }$/;"	f	class:llvm::Triple
str	Support/PathV1.h	/^      const std::string &str() const { return path; }$/;"	f	class:llvm::sys::Path
str	Support/raw_ostream.h	/^  std::string& str() {$/;"	f	class:llvm::raw_string_ostream
strategy_map_type	CodeGen/GCMetadata.h	/^    typedef StringMap<GCStrategy*> strategy_map_type;$/;"	t	class:llvm::GCModuleInfo
strcat	Target/TargetLibraryInfo.h	/^      strcat,$/;"	e	enum:llvm::LibFunc::Func
strchr	Target/TargetLibraryInfo.h	/^      strchr,$/;"	e	enum:llvm::LibFunc::Func
strcpy	Target/TargetLibraryInfo.h	/^      strcpy,$/;"	e	enum:llvm::LibFunc::Func
strdup	Target/TargetLibraryInfo.h	/^      strdup,$/;"	e	enum:llvm::LibFunc::Func
stream	Support/YAMLParser.h	/^  Stream &stream;$/;"	m	class:llvm::yaml::Document
stream_timeout	Support/system_error.h	/^  stream_timeout                      = ETIME,$/;"	e	enum:llvm::errc::_
stringRef	ADT/Twine.h	/^      const StringRef *stringRef;$/;"	m	union:llvm::Twine::Child
stripInBoundsConstantOffsets	Value.h	/^  const Value *stripInBoundsConstantOffsets() const {$/;"	f	class:llvm::Value
stripInBoundsOffsets	Value.h	/^  const Value *stripInBoundsOffsets() const {$/;"	f	class:llvm::Value
stripPointerCasts	Value.h	/^  const Value *stripPointerCasts() const {$/;"	f	class:llvm::Value
strlen	Target/TargetLibraryInfo.h	/^      strlen,$/;"	e	enum:llvm::LibFunc::Func
strncat	Target/TargetLibraryInfo.h	/^      strncat,$/;"	e	enum:llvm::LibFunc::Func
strncmp	Target/TargetLibraryInfo.h	/^      strncmp,$/;"	e	enum:llvm::LibFunc::Func
strncpy	Target/TargetLibraryInfo.h	/^      strncpy,$/;"	e	enum:llvm::LibFunc::Func
strndup	Target/TargetLibraryInfo.h	/^      strndup,$/;"	e	enum:llvm::LibFunc::Func
strnlen	Target/TargetLibraryInfo.h	/^      strnlen,$/;"	e	enum:llvm::LibFunc::Func
stroff	Support/MachO.h	/^      uint32_t stroff;$/;"	m	struct:llvm::MachO::symtab_command
strsize	Support/MachO.h	/^      uint32_t strsize;$/;"	m	struct:llvm::MachO::symtab_command
strtab	Bitcode/Archive.h	/^    std::string strtab;       \/\/\/< The string table for long file names$/;"	m	class:llvm::Archive
sub	ADT/APInt.h	/^inline APInt sub(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
sub	Support/IntegersSubset.h	/^    SubRes sub(const self &RHS) const {$/;"	f	class:llvm::IntRange
subFromCol	CodeGen/PBQP/Math.h	/^    Matrix& subFromCol(unsigned c, PBQPNum val) {$/;"	f	class:PBQP::Matrix
subFromRow	CodeGen/PBQP/Math.h	/^    Matrix& subFromRow(unsigned r, PBQPNum val) {$/;"	f	class:PBQP::Matrix
sub_client_command	Support/MachO.h	/^    struct sub_client_command {$/;"	s	namespace:llvm::MachO
sub_framework_command	Support/MachO.h	/^    struct sub_framework_command {$/;"	s	namespace:llvm::MachO
sub_library	Support/MachO.h	/^      uint32_t sub_library;$/;"	m	struct:llvm::MachO::sub_library_command
sub_library_command	Support/MachO.h	/^    struct sub_library_command {$/;"	s	namespace:llvm::MachO
sub_umbrella	Support/MachO.h	/^      uint32_t sub_umbrella;$/;"	m	struct:llvm::MachO::sub_umbrella_command
sub_umbrella_command	Support/MachO.h	/^    struct sub_umbrella_command {$/;"	s	namespace:llvm::MachO
subprogram_begin	DebugInfo.h	/^    iterator subprogram_begin()      const { return SPs.begin(); }$/;"	f	class:llvm::DebugInfoFinder
subprogram_count	DebugInfo.h	/^    unsigned subprogram_count()      const { return SPs.size(); }$/;"	f	class:llvm::DebugInfoFinder
subprogram_end	DebugInfo.h	/^    iterator subprogram_end()        const { return SPs.end(); }$/;"	f	class:llvm::DebugInfoFinder
substr	ADT/SmallString.h	/^  StringRef substr(size_t Start, size_t N = StringRef::npos) const {$/;"	f	class:llvm::SmallString
substr	ADT/StringRef.h	/^    StringRef substr(size_t Start, size_t N = npos) const {$/;"	f	class:llvm::StringRef
subtractEdgeContributions	CodeGen/PBQP/Heuristics/Briggs.h	/^      void subtractEdgeContributions(Graph::EdgeItr eItr, Graph::NodeItr nItr) {$/;"	f	class:PBQP::Heuristics::Briggs
subtree	ADT/IntervalMap.h	/^    NodeRef &subtree(unsigned i) const {$/;"	f	struct:llvm::IntervalMapImpl::Path::Entry
subtree	ADT/IntervalMap.h	/^  NodeRef &subtree(unsigned Level) const {$/;"	f	class:llvm::IntervalMapImpl::Path
subtree	ADT/IntervalMap.h	/^  NodeRef &subtree(unsigned i) const {$/;"	f	class:llvm::IntervalMapImpl::NodeRef
subtree	ADT/IntervalMap.h	/^  NodeRef &subtree(unsigned i) { return this->first[i]; }$/;"	f	class:llvm::IntervalMapImpl::BranchNode
subtree	ADT/IntervalMap.h	/^  const NodeRef &subtree(unsigned i) const { return this->first[i]; }$/;"	f	class:llvm::IntervalMapImpl::BranchNode
subtype_begin	Type.h	/^  subtype_iterator subtype_begin() const { return ContainedTys; }$/;"	f	class:llvm::Type
subtype_end	Type.h	/^  subtype_iterator subtype_end() const { return &ContainedTys[NumContainedTys];}$/;"	f	class:llvm::Type
subtype_iterator	Type.h	/^  typedef Type * const *subtype_iterator;$/;"	t	class:llvm::Type
succ_begin	Analysis/Interval.h	/^inline Interval::succ_iterator succ_begin(Interval *I) {$/;"	f	namespace:llvm
succ_begin	Analysis/RegionIterator.h	/^inline RNSuccIterator<NodeType> succ_begin(NodeType* Node) {$/;"	f	namespace:llvm
succ_begin	CodeGen/MachineBasicBlock.h	/^  const_succ_iterator  succ_begin() const { return Successors.begin();   }$/;"	f	class:llvm::MachineBasicBlock
succ_begin	CodeGen/MachineBasicBlock.h	/^  succ_iterator        succ_begin()       { return Successors.begin();   }$/;"	f	class:llvm::MachineBasicBlock
succ_begin	Support/CFG.h	/^inline succ_const_iterator succ_begin(const BasicBlock *BB) {$/;"	f	namespace:llvm
succ_begin	Support/CFG.h	/^inline succ_iterator succ_begin(BasicBlock *BB) {$/;"	f	namespace:llvm
succ_const_iterator	Support/CFG.h	/^                     const BasicBlock> succ_const_iterator;$/;"	t	namespace:llvm
succ_empty	CodeGen/MachineBasicBlock.h	/^  bool                 succ_empty() const { return Successors.empty();   }$/;"	f	class:llvm::MachineBasicBlock
succ_end	Analysis/Interval.h	/^inline Interval::succ_iterator succ_end(Interval *I)   {$/;"	f	namespace:llvm
succ_end	Analysis/RegionIterator.h	/^inline RNSuccIterator<NodeType> succ_end(NodeType* Node) {$/;"	f	namespace:llvm
succ_end	CodeGen/MachineBasicBlock.h	/^  const_succ_iterator  succ_end()   const { return Successors.end();     }$/;"	f	class:llvm::MachineBasicBlock
succ_end	CodeGen/MachineBasicBlock.h	/^  succ_iterator        succ_end()         { return Successors.end();     }$/;"	f	class:llvm::MachineBasicBlock
succ_end	Support/CFG.h	/^inline succ_const_iterator succ_end(const BasicBlock *BB) {$/;"	f	namespace:llvm
succ_end	Support/CFG.h	/^inline succ_iterator succ_end(BasicBlock *BB) {$/;"	f	namespace:llvm
succ_iterator	Analysis/Interval.h	/^  typedef std::vector<BasicBlock*>::iterator succ_iterator;$/;"	t	class:llvm::Interval
succ_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::vector<MachineBasicBlock *>::iterator       succ_iterator;$/;"	t	class:llvm::MachineBasicBlock
succ_iterator	CodeGen/ScheduleDAG.h	/^    typedef SmallVector<SDep, 4>::iterator succ_iterator;$/;"	t	class:llvm::SUnit
succ_iterator	Support/CFG.h	/^typedef SuccIterator<TerminatorInst*, BasicBlock> succ_iterator;$/;"	t	namespace:llvm
succ_rbegin	CodeGen/MachineBasicBlock.h	/^  const_succ_reverse_iterator  succ_rbegin() const$/;"	f	class:llvm::MachineBasicBlock
succ_rbegin	CodeGen/MachineBasicBlock.h	/^  succ_reverse_iterator        succ_rbegin()$/;"	f	class:llvm::MachineBasicBlock
succ_rend	CodeGen/MachineBasicBlock.h	/^  const_succ_reverse_iterator  succ_rend()   const$/;"	f	class:llvm::MachineBasicBlock
succ_rend	CodeGen/MachineBasicBlock.h	/^  succ_reverse_iterator        succ_rend()$/;"	f	class:llvm::MachineBasicBlock
succ_reverse_iterator	CodeGen/MachineBasicBlock.h	/^                                                         succ_reverse_iterator;$/;"	t	class:llvm::MachineBasicBlock
succ_size	CodeGen/MachineBasicBlock.h	/^  unsigned             succ_size()  const {$/;"	f	class:llvm::MachineBasicBlock
success	Object/Error.h	/^  success = 0,$/;"	e	enum:llvm::object::object_error::_
success	Support/system_error.h	/^  static error_code success() {$/;"	f	class:llvm::error_code
success	Support/system_error.h	/^  success                             = 0,$/;"	e	enum:llvm::errc::_
success	Support/system_error.h	/^  success = 0,$/;"	e	enum:llvm::windows_error::_
super	ADT/DepthFirstIterator.h	/^                        typename GT::NodeType, ptrdiff_t> super;$/;"	t	class:llvm::df_iterator
super	ADT/EquivalenceClasses.h	/^                          const ElemTy, ptrdiff_t> super;$/;"	t	class:llvm::EquivalenceClasses::member_iterator
super	ADT/PostOrderIterator.h	/^                        typename GT::NodeType, ptrdiff_t> super;$/;"	t	class:llvm::po_iterator
super	ADT/SCCIterator.h	/^                        std::vector<typename GT::NodeType>, ptrdiff_t> super;$/;"	t	class:llvm::scc_iterator
super	ADT/ilist.h	/^                        NodeTy, ptrdiff_t> super;$/;"	t	class:llvm::ilist_iterator
super	Analysis/RegionInfo.h	/^      super;$/;"	t	class:llvm::Region::block_iterator_wrapper
super	Analysis/RegionIterator.h	/^  typedef std::iterator<std::forward_iterator_tag, NodeType, ptrdiff_t> super;$/;"	t	class:llvm::RNSuccIterator
super	Support/CFG.h	/^  typedef std::iterator<std::bidirectional_iterator_tag, BB_, ptrdiff_t> super;$/;"	t	class:llvm::SuccIterator
super	Support/CFG.h	/^  typedef std::iterator<std::forward_iterator_tag, Ptr, ptrdiff_t> super;$/;"	t	class:llvm::PredIterator
super	Support/GetElementPtrTypeIterator.h	/^                          Type *, ptrdiff_t> super;$/;"	t	class:llvm::generic_gep_type_iterator
super	Use.h	/^  typedef std::iterator<std::forward_iterator_tag, UserTy*, ptrdiff_t> super;$/;"	t	class:llvm::value_use_iterator
support	Support/Endian.h	/^namespace support {$/;"	n	namespace:llvm
supportJumpTables	Target/TargetLowering.h	/^  bool supportJumpTables() const {$/;"	f	class:llvm::TargetLowering
swap	ADT/BitVector.h	/^  swap(llvm::BitVector &LHS, llvm::BitVector &RHS) {$/;"	f	namespace:std
swap	ADT/BitVector.h	/^  void swap(BitVector &RHS) {$/;"	f	class:llvm::BitVector
swap	ADT/DenseMap.h	/^  void swap(DenseMap& RHS) {$/;"	f	class:llvm::DenseMap
swap	ADT/DenseMap.h	/^  void swap(DenseMapBase& RHS) {$/;"	f	class:llvm::DenseMapBase
swap	ADT/DenseMap.h	/^  void swap(SmallDenseMap& RHS) {$/;"	f	class:llvm::SmallDenseMap
swap	ADT/DenseSet.h	/^  void swap(DenseSet& RHS) {$/;"	f	class:llvm::DenseSet
swap	ADT/IntrusiveRefCntPtr.h	/^    void swap(IntrusiveRefCntPtr& other) {$/;"	f	class:llvm::IntrusiveRefCntPtr
swap	ADT/OwningPtr.h	/^  void swap(OwningArrayPtr &RHS) {$/;"	f	class:llvm::OwningArrayPtr
swap	ADT/OwningPtr.h	/^  void swap(OwningPtr &RHS) {$/;"	f	class:llvm::OwningPtr
swap	ADT/OwningPtr.h	/^inline void swap(OwningArrayPtr<T> &a, OwningArrayPtr<T> &b) {$/;"	f	namespace:llvm
swap	ADT/OwningPtr.h	/^inline void swap(OwningPtr<T> &a, OwningPtr<T> &b) {$/;"	f	namespace:llvm
swap	ADT/PackedVector.h	/^  void swap(PackedVector &RHS) {$/;"	f	class:llvm::PackedVector
swap	ADT/SmallBitVector.h	/^  swap(llvm::SmallBitVector &LHS, llvm::SmallBitVector &RHS) {$/;"	f	namespace:std
swap	ADT/SmallBitVector.h	/^  void swap(SmallBitVector &RHS) {$/;"	f	class:llvm::SmallBitVector
swap	ADT/SmallPtrSet.h	/^  inline void swap(llvm::SmallPtrSet<T, N> &LHS, llvm::SmallPtrSet<T, N> &RHS) {$/;"	f	namespace:std
swap	ADT/SmallPtrSet.h	/^  void swap(SmallPtrSet<PtrType, SmallSize> &RHS) {$/;"	f	class:llvm::SmallPtrSet
swap	ADT/SmallVector.h	/^  swap(llvm::SmallVector<T, N> &LHS, llvm::SmallVector<T, N> &RHS) {$/;"	f	namespace:std
swap	ADT/SmallVector.h	/^  swap(llvm::SmallVectorImpl<T> &LHS, llvm::SmallVectorImpl<T> &RHS) {$/;"	f	namespace:std
swap	ADT/SmallVector.h	/^void SmallVectorImpl<T>::swap(SmallVectorImpl<T> &RHS) {$/;"	f	class:llvm::SmallVectorImpl
swap	ADT/ilist.h	/^  void swap(iplist &RHS) {$/;"	f	class:llvm::iplist
swap	ADT/ilist.h	/^  void swap(llvm::iplist<Ty> &Left, llvm::iplist<Ty> &Right) {$/;"	f	namespace:std
swapOperands	Instructions.h	/^  void swapOperands() {$/;"	f	class:llvm::FCmpInst
swapOperands	Instructions.h	/^  void swapOperands() {$/;"	f	class:llvm::ICmpInst
switchRootToBranch	ADT/IntervalMap.h	/^  void switchRootToBranch() {$/;"	f	class:llvm::IntervalMap
switchRootToLeaf	ADT/IntervalMap.h	/^  void switchRootToLeaf() {$/;"	f	class:llvm::IntervalMap
switchToLarge	ADT/SmallBitVector.h	/^  void switchToLarge(BitVector *BV) {$/;"	f	class:llvm::SmallBitVector
switchToSmall	ADT/SmallBitVector.h	/^  void switchToSmall(uintptr_t NewSmallBits, size_t NewSize) {$/;"	f	class:llvm::SmallBitVector
symTab	Bitcode/Archive.h	/^    SymTabType symTab;        \/\/\/< The symbol table$/;"	m	class:llvm::Archive
symTabSize	Bitcode/Archive.h	/^    unsigned symTabSize;      \/\/\/< Size in bytes of symbol table$/;"	m	class:llvm::Archive
symbol	Object/Archive.h	/^    Symbol symbol;$/;"	m	class:llvm::object::Archive::symbol_iterator
symbol	Support/COFF.h	/^  struct symbol {$/;"	s	namespace:llvm::COFF
symbol_begin	MC/MCAssembler.h	/^  const_symbol_iterator symbol_begin() const { return Symbols.begin(); }$/;"	f	class:llvm::MCAssembler
symbol_begin	MC/MCAssembler.h	/^  symbol_iterator symbol_begin() { return Symbols.begin(); }$/;"	f	class:llvm::MCAssembler
symbol_end	MC/MCAssembler.h	/^  const_symbol_iterator symbol_end() const { return Symbols.end(); }$/;"	f	class:llvm::MCAssembler
symbol_end	MC/MCAssembler.h	/^  symbol_iterator symbol_end() { return Symbols.end(); }$/;"	f	class:llvm::MCAssembler
symbol_index	Support/MachO.h	/^      uint32_t symbol_index;$/;"	m	struct:llvm::MachO::dylib_table_of_contents
symbol_iterator	MC/MCAssembler.h	/^  typedef SymbolDataListType::iterator symbol_iterator;$/;"	t	class:llvm::MCAssembler
symbol_iterator	Object/Archive.h	/^    symbol_iterator(const Symbol &s) : symbol(s) {}$/;"	f	class:llvm::object::Archive::symbol_iterator
symbol_iterator	Object/Archive.h	/^  class symbol_iterator {$/;"	c	class:llvm::object::Archive
symbol_iterator	Object/ObjectFile.h	/^typedef content_iterator<SymbolRef> symbol_iterator;$/;"	t	namespace:llvm::object
symbol_size	MC/MCAssembler.h	/^  size_t symbol_size() const { return Symbols.size(); }$/;"	f	class:llvm::MCAssembler
symlink_file	Support/FileSystem.h	/^    symlink_file,$/;"	e	enum:llvm::sys::fs::file_type::_
symlink_perms	Support/FileSystem.h	/^  symlink_perms   = 0x4000$/;"	e	enum:llvm::sys::fs::perms
symoff	Support/MachO.h	/^      uint32_t symoff;$/;"	m	struct:llvm::MachO::symtab_command
symseg_command	Support/MachO.h	/^    struct symseg_command {$/;"	s	namespace:llvm::MachO
symtab_command	Support/MachO.h	/^    struct symtab_command {$/;"	s	namespace:llvm::MachO
sys	Linker.h	/^  namespace sys { class Path; }$/;"	n	namespace:llvm
sys	Support/Atomic.h	/^  namespace sys {$/;"	n	namespace:llvm
sys	Support/Disassembler.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/DynamicLibrary.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/Errno.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/FEnv.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/FileSystem.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/Host.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/Locale.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/Memory.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/Mutex.h	/^  namespace sys$/;"	n	namespace:llvm
sys	Support/PathV1.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/PathV2.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/Process.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/Program.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/RWMutex.h	/^  namespace sys$/;"	n	namespace:llvm
sys	Support/Signals.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/SwapByteOrder.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/SystemUtils.h	/^  namespace sys { class Path; }$/;"	n	namespace:llvm
sys	Support/ThreadLocal.h	/^  namespace sys {$/;"	n	namespace:llvm
sys	Support/TimeValue.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Support/Valgrind.h	/^namespace sys {$/;"	n	namespace:llvm
t	Support/AlignOf.h	/^  T t;$/;"	m	struct:llvm::AlignmentCalcImpl
t1	Support/AlignOf.h	/^    T1 t1; T2 t2; T3 t3; T4 t4;$/;"	m	class:llvm::AlignedCharArrayUnion::AlignerImpl
t2	Support/AlignOf.h	/^    T1 t1; T2 t2; T3 t3; T4 t4;$/;"	m	class:llvm::AlignedCharArrayUnion::AlignerImpl
t3	Support/AlignOf.h	/^    T1 t1; T2 t2; T3 t3; T4 t4;$/;"	m	class:llvm::AlignedCharArrayUnion::AlignerImpl
t4	Support/AlignOf.h	/^    T1 t1; T2 t2; T3 t3; T4 t4;$/;"	m	class:llvm::AlignedCharArrayUnion::AlignerImpl
table_t	Support/StringPool.h	/^    typedef StringMap<PooledString> table_t;$/;"	t	class:llvm::StringPool
take	ADT/OwningPtr.h	/^  T *take() {$/;"	f	class:llvm::OwningArrayPtr
take	ADT/OwningPtr.h	/^  T *take() {$/;"	f	class:llvm::OwningPtr
tan	Target/TargetLibraryInfo.h	/^      tan,$/;"	e	enum:llvm::LibFunc::Func
tanf	Target/TargetLibraryInfo.h	/^      tanf,$/;"	e	enum:llvm::LibFunc::Func
tanh	Target/TargetLibraryInfo.h	/^      tanh,$/;"	e	enum:llvm::LibFunc::Func
tanhf	Target/TargetLibraryInfo.h	/^      tanhf,$/;"	e	enum:llvm::LibFunc::Func
tanhl	Target/TargetLibraryInfo.h	/^      tanhl,$/;"	e	enum:llvm::LibFunc::Func
tanl	Target/TargetLibraryInfo.h	/^      tanl,$/;"	e	enum:llvm::LibFunc::Func
targetHandlesStackFrameRounding	Target/TargetFrameLowering.h	/^  virtual bool targetHandlesStackFrameRounding() const {$/;"	f	class:llvm::TargetFrameLowering
tce	ADT/Triple.h	/^    tce,     \/\/ TCE (http:\/\/tce.cs.tut.fi\/): tce$/;"	e	enum:llvm::Triple::ArchType
tell	Support/raw_ostream.h	/^  uint64_t tell() const { return current_pos() + GetNumBytesInBuffer(); }$/;"	f	class:llvm::raw_ostream
test	ADT/BitVector.h	/^  bool test(const BitVector &RHS) const {$/;"	f	class:llvm::BitVector
test	ADT/BitVector.h	/^  bool test(unsigned Idx) const {$/;"	f	class:llvm::BitVector
test	ADT/SmallBitVector.h	/^  bool test(unsigned Idx) const {$/;"	f	class:llvm::SmallBitVector
test	ADT/SparseBitVector.h	/^  bool test(unsigned Idx) const {$/;"	f	struct:llvm::SparseBitVectorElement
test	ADT/SparseBitVector.h	/^  bool test(unsigned Idx) {$/;"	f	class:llvm::SparseBitVector
test_and_set	ADT/SparseBitVector.h	/^  bool test_and_set (unsigned Idx) {$/;"	f	class:llvm::SparseBitVector
test_and_set	ADT/SparseBitVector.h	/^  bool test_and_set (unsigned Idx) {$/;"	f	struct:llvm::SparseBitVectorElement
text_file_busy	Support/system_error.h	/^  text_file_busy                      = ETXTBSY,$/;"	e	enum:llvm::errc::_
this_type	ADT/IntrusiveRefCntPtr.h	/^    typedef IntrusiveRefCntPtr this_type;$/;"	t	class:llvm::IntrusiveRefCntPtr
thread_command	Support/MachO.h	/^    struct thread_command {$/;"	s	namespace:llvm::MachO
thumb	ADT/Triple.h	/^    thumb,   \/\/ Thumb: thumb, thumbv.*$/;"	e	enum:llvm::Triple::ArchType
tie	ADT/STLExtras.h	/^inline tier<T1, T2> tie(T1& f, T2& s) {$/;"	f	namespace:llvm
tier	ADT/STLExtras.h	/^  tier(first_type f, second_type s) : first(f), second(s) { }$/;"	f	struct:llvm::tier
tier	ADT/STLExtras.h	/^struct tier {$/;"	s	namespace:llvm
timed_out	Support/system_error.h	/^  timed_out                           = ETIMEDOUT,$/;"	e	enum:llvm::errc::_
times	LDDProfilingCommon.h	/^    size_t times;$/;"	m	struct:dep
timestamp	Support/MachO.h	/^      uint32_t timestamp;$/;"	m	struct:llvm::MachO::dylib
toConstantInt	Support/IntegersSubset.h	/^  ConstantInt *toConstantInt() const {$/;"	f	class:llvm::IntItem
toEpochTime	Support/TimeValue.h	/^    uint64_t toEpochTime() const {$/;"	f	class:llvm::sys::TimeValue
toIndex_	ADT/IndexedMap.h	/^    ToIndexT toIndex_;$/;"	m	class:llvm::IndexedMap
toNext	ADT/DepthFirstIterator.h	/^  inline void toNext() {$/;"	f	class:llvm::df_iterator
toPosixTime	Support/TimeValue.h	/^    uint64_t toPosixTime() const {$/;"	f	class:llvm::sys::TimeValue
toPtr	SymbolTableListTraits.h	/^  static ValueSymbolTable *toPtr(ValueSymbolTable &R) { return &R; }$/;"	f	class:llvm::SymbolTableListTraits
toPtr	SymbolTableListTraits.h	/^  static ValueSymbolTable *toPtr(ValueSymbolTable *P) { return P; }$/;"	f	class:llvm::SymbolTableListTraits
toString	ADT/APSInt.h	/^  std::string toString(unsigned Radix) const {$/;"	f	class:llvm::APSInt
toString	ADT/APSInt.h	/^  void toString(SmallVectorImpl<char> &Str, unsigned Radix = 10) const {$/;"	f	class:llvm::APSInt
toStringSigned	ADT/APInt.h	/^  void toStringSigned(SmallVectorImpl<char> &Str, unsigned Radix = 10) const {$/;"	f	class:llvm::APInt
toStringUnsigned	ADT/APInt.h	/^  void toStringUnsigned(SmallVectorImpl<char> &Str, unsigned Radix = 10) const {$/;"	f	class:llvm::APInt
toWin32Time	Support/TimeValue.h	/^    uint64_t toWin32Time() const {$/;"	f	class:llvm::sys::TimeValue
tocoff	Support/MachO.h	/^      uint32_t tocoff;$/;"	m	struct:llvm::MachO::dysymtab_command
too_many_files_open	Support/system_error.h	/^  too_many_files_open                 = EMFILE,$/;"	e	enum:llvm::errc::_
too_many_files_open_in_system	Support/system_error.h	/^  too_many_files_open_in_system       = ENFILE,$/;"	e	enum:llvm::errc::_
too_many_links	Support/system_error.h	/^  too_many_links                      = EMLINK,$/;"	e	enum:llvm::errc::_
too_many_open_files	Support/system_error.h	/^  too_many_open_files     = 4, \/\/ ERROR_TOO_MANY_OPEN_FILES,$/;"	e	enum:llvm::windows_error::_
too_many_symbolic_link_levels	Support/system_error.h	/^  too_many_symbolic_link_levels       = ELOOP,$/;"	e	enum:llvm::errc::_
tool_output_file	Support/ToolOutputFile.h	/^class tool_output_file {$/;"	c	namespace:llvm
top	CodeGen/MachineScheduler.h	/^  MachineBasicBlock::iterator top() const { return CurrentTop; }$/;"	f	class:llvm::ScheduleDAGMI
top	PassManagers.h	/^  PMDataManager *top() const { return S.back(); }$/;"	f	class:llvm::PMStack
trackLivenessAfterRegAlloc	Target/TargetRegisterInfo.h	/^  virtual bool trackLivenessAfterRegAlloc(const MachineFunction &MF) const {$/;"	f	class:llvm::TargetRegisterInfo
tracksLiveness	CodeGen/MachineRegisterInfo.h	/^  bool tracksLiveness() const { return TracksLiveness; }$/;"	f	class:llvm::MachineRegisterInfo
tracksRegPressure	CodeGen/ScheduleDAG.h	/^    virtual bool tracksRegPressure() const { return false; }$/;"	f	class:llvm::SchedulingPriorityQueue
traits	Support/Registry.h	/^    typedef U traits;$/;"	t	class:llvm::Registry
traits	Support/RegistryParser.h	/^    typedef U traits;$/;"	t	class:llvm::RegistryParser
transfer	ADT/ilist.h	/^  void transfer(iterator position, iplist &L2, iterator first, iterator last) {$/;"	f	class:llvm::iplist
transferNodesFromList	ADT/ilist.h	/^  void transferNodesFromList(ilist_node_traits &    \/*SrcTraits*\/,$/;"	f	struct:llvm::ilist_node_traits
transferToLeftSib	ADT/IntervalMap.h	/^  void transferToLeftSib(unsigned Size, NodeBase &Sib, unsigned SSize,$/;"	f	class:llvm::IntervalMapImpl::NodeBase
transferToRightSib	ADT/IntervalMap.h	/^  void transferToRightSib(unsigned Size, NodeBase &Sib, unsigned SSize,$/;"	f	class:llvm::IntervalMapImpl::NodeBase
transpose	CodeGen/PBQP/Math.h	/^    Matrix transpose() const {$/;"	f	class:PBQP::Matrix
traverse	Analysis/LoopInfoImpl.h	/^void PopulateLoopsDFS<BlockT, LoopT>::traverse(BlockT *EntryBlock) {$/;"	f	class:llvm::PopulateLoopsDFS
traverseChild	ADT/PostOrderIterator.h	/^  void traverseChild() {$/;"	f	class:llvm::po_iterator
treeAdvanceTo	ADT/IntervalMap.h	/^const_iterator::treeAdvanceTo(KeyT x) {$/;"	f	class:llvm::IntervalMap::const_iterator
treeErase	ADT/IntervalMap.h	/^iterator::treeErase(bool UpdateRoot) {$/;"	f	class:llvm::IntervalMap::iterator
treeFind	ADT/IntervalMap.h	/^const_iterator::treeFind(KeyT x) {$/;"	f	class:llvm::IntervalMap::const_iterator
treeInsert	ADT/IntervalMap.h	/^iterator::treeInsert(KeyT a, KeyT b, ValT y) {$/;"	f	class:llvm::IntervalMap::iterator
treeSafeLookup	ADT/IntervalMap.h	/^treeSafeLookup(KeyT x, ValT NotFound) const {$/;"	f	class:llvm::IntervalMap
trim	ADT/StringRef.h	/^    StringRef trim(StringRef Chars = " \\t\\n\\v\\f\\r") const {$/;"	f	class:llvm::StringRef
true_type	Support/type_traits.h	/^typedef integral_constant<bool, true> true_type;$/;"	t	namespace:llvm
trunc	ADT/APSInt.h	/^  APSInt trunc(uint32_t width) const {$/;"	f	class:llvm::APSInt
trunc	Target/TargetLibraryInfo.h	/^      trunc,$/;"	e	enum:llvm::LibFunc::Func
truncf	Target/TargetLibraryInfo.h	/^      truncf,$/;"	e	enum:llvm::LibFunc::Func
truncl	Target/TargetLibraryInfo.h	/^      truncl,$/;"	e	enum:llvm::LibFunc::Func
tryNormaliseEdgeMatrix	CodeGen/PBQP/HeuristicSolver.h	/^    bool tryNormaliseEdgeMatrix(Graph::EdgeItr &eItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
tryToEliminateEdge	CodeGen/PBQP/HeuristicSolver.h	/^    bool tryToEliminateEdge(Graph::EdgeItr eItr) {$/;"	f	class:PBQP::HeuristicSolverImpl
tryacquire	Support/Mutex.h	/^      bool tryacquire() {$/;"	f	class:llvm::sys::SmartMutex
twine	ADT/Twine.h	/^      const Twine *twine;$/;"	m	union:llvm::Twine::Child
twolevel_hint	Support/MachO.h	/^    struct twolevel_hint {$/;"	s	namespace:llvm::MachO
twolevel_hints_command	Support/MachO.h	/^    struct twolevel_hints_command {$/;"	s	namespace:llvm::MachO
type	Support/FileSystem.h	/^  file_type type() const { return Type; }$/;"	f	class:llvm::sys::fs::file_status
type	Support/FileSystem.h	/^  void type(file_type v) { Type = v; }$/;"	f	class:llvm::sys::fs::file_status
type	Support/type_traits.h	/^    typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	Support/type_traits.h	/^  typedef T type;$/;"	t	struct:llvm::enable_if_c
type	Support/type_traits.h	/^  typedef integral_constant<T,v> type;$/;"	t	struct:llvm::integral_constant
type	Support/type_traits.h	/^  typedef typename remove_const<typename remove_volatile<T>::type>::type type;$/;"	t	struct:llvm::remove_cv
type	Support/type_traits.h	/^struct conditional { typedef T type; };$/;"	t	struct:llvm::conditional
type	Support/type_traits.h	/^struct conditional<false, T, F> { typedef F type; };$/;"	t	struct:llvm::conditional
type	Support/type_traits.h	/^template <typename T> struct remove_const          { typedef T type; };$/;"	t	struct:llvm::remove_const
type	Support/type_traits.h	/^template <typename T> struct remove_const<const T> { typedef T type; };$/;"	t	struct:llvm::remove_const
type	Support/type_traits.h	/^template <typename T> struct remove_pointer { typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	Support/type_traits.h	/^template <typename T> struct remove_pointer<T*> { typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	Support/type_traits.h	/^template <typename T> struct remove_pointer<T*const> { typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	Support/type_traits.h	/^template <typename T> struct remove_pointer<T*volatile> { typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	Support/type_traits.h	/^template <typename T> struct remove_reference { typedef T type; };$/;"	t	struct:llvm::remove_reference
type	Support/type_traits.h	/^template <typename T> struct remove_reference<T&> { typedef T type; };$/;"	t	struct:llvm::remove_reference
type	Support/type_traits.h	/^template <typename T> struct remove_volatile             { typedef T type; };$/;"	t	struct:llvm::remove_volatile
type	Support/type_traits.h	/^template <typename T> struct remove_volatile<volatile T> { typedef T type; };$/;"	t	struct:llvm::remove_volatile
typeIsConvertibleTo	TableGen/Record.h	/^  virtual bool typeIsConvertibleTo(const RecTy *RHS) const {$/;"	f	class:llvm::BitRecTy
typeIsConvertibleTo	TableGen/Record.h	/^  virtual bool typeIsConvertibleTo(const RecTy *RHS) const {$/;"	f	class:llvm::BitsRecTy
typeIsConvertibleTo	TableGen/Record.h	/^  virtual bool typeIsConvertibleTo(const RecTy *RHS) const {$/;"	f	class:llvm::DagRecTy
typeIsConvertibleTo	TableGen/Record.h	/^  virtual bool typeIsConvertibleTo(const RecTy *RHS) const {$/;"	f	class:llvm::IntRecTy
typeIsConvertibleTo	TableGen/Record.h	/^  virtual bool typeIsConvertibleTo(const RecTy *RHS) const {$/;"	f	class:llvm::ListRecTy
typeIsConvertibleTo	TableGen/Record.h	/^  virtual bool typeIsConvertibleTo(const RecTy *RHS) const {$/;"	f	class:llvm::RecordRecTy
typeIsConvertibleTo	TableGen/Record.h	/^  virtual bool typeIsConvertibleTo(const RecTy *RHS) const {$/;"	f	class:llvm::StringRecTy
type_begin	DebugInfo.h	/^    iterator type_begin()            const { return TYs.begin(); }$/;"	f	class:llvm::DebugInfoFinder
type_count	DebugInfo.h	/^    unsigned type_count()            const { return TYs.size(); }$/;"	f	class:llvm::DebugInfoFinder
type_end	DebugInfo.h	/^    iterator type_end()              const { return TYs.end(); }$/;"	f	class:llvm::DebugInfoFinder
type_unknown	Support/FileSystem.h	/^    type_unknown$/;"	e	enum:llvm::sys::fs::file_type::_
types	TypeBuilder.h	/^namespace types {$/;"	n	namespace:llvm
u	Support/Win64EH.h	/^  } u;$/;"	m	union:llvm::Win64EH::UnwindCode	typeref:struct:llvm::Win64EH::UnwindCode::__anon137
uHex	ADT/Twine.h	/^      const uint64_t *uHex;$/;"	m	union:llvm::Twine::Child
ubig16_t	Support/Endian.h	/^                  <uint16_t, big, unaligned>    ubig16_t;$/;"	t	namespace:llvm::support
ubig32_t	Support/Endian.h	/^                  <uint32_t, big, unaligned>    ubig32_t;$/;"	t	namespace:llvm::support
ubig64_t	Support/Endian.h	/^                  <uint64_t, big, unaligned>    ubig64_t;$/;"	t	namespace:llvm::support
ubig8_t	Support/Endian.h	/^                  <uint8_t, big, unaligned>     ubig8_t;$/;"	t	namespace:llvm::support
udiv	ADT/APInt.h	/^inline APInt udiv(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
uge	ADT/APInt.h	/^  bool uge(const APInt& RHS) const {$/;"	f	class:llvm::APInt
uge	ADT/APInt.h	/^  bool uge(uint64_t RHS) const {$/;"	f	class:llvm::APInt
uge	Constants.h	/^  bool uge(uint64_t Num) const {$/;"	f	class:llvm::ConstantInt
ugt	ADT/APInt.h	/^  bool ugt(const APInt& RHS) const {$/;"	f	class:llvm::APInt
ugt	ADT/APInt.h	/^  bool ugt(uint64_t RHS) const {$/;"	f	class:llvm::APInt
ule	ADT/APInt.h	/^  bool ule(const APInt& RHS) const {$/;"	f	class:llvm::APInt
ule	ADT/APInt.h	/^  bool ule(uint64_t RHS) const {$/;"	f	class:llvm::APInt
ulittle16_t	Support/Endian.h	/^                  <uint16_t, little, unaligned> ulittle16_t;$/;"	t	namespace:llvm::support
ulittle32_t	Support/Endian.h	/^                  <uint32_t, little, unaligned> ulittle32_t;$/;"	t	namespace:llvm::support
ulittle64_t	Support/Endian.h	/^                  <uint64_t, little, unaligned> ulittle64_t;$/;"	t	namespace:llvm::support
ulittle8_t	Support/Endian.h	/^                  <uint8_t, little, unaligned>  ulittle8_t;$/;"	t	namespace:llvm::support
ult	ADT/APInt.h	/^  bool ult(uint64_t RHS) const {$/;"	f	class:llvm::APInt
umax	ADT/APInt.h	/^inline APInt umax(const APInt &A, const APInt &B) {$/;"	f	namespace:llvm::APIntOps
umax_pred_ty	Support/PatternMatch.h	/^struct umax_pred_ty {$/;"	s	namespace:llvm::PatternMatch
umbrella	Support/MachO.h	/^      uint32_t umbrella;$/;"	m	struct:llvm::MachO::sub_framework_command
umin	ADT/APInt.h	/^inline APInt umin(const APInt &A, const APInt &B) {$/;"	f	namespace:llvm::APIntOps
umin_pred_ty	Support/PatternMatch.h	/^struct umin_pred_ty {$/;"	s	namespace:llvm::PatternMatch
unaligned	Support/Endian.h	/^enum alignment {unaligned, aligned};$/;"	e	enum:llvm::support::alignment
unexpected_eof	Object/Error.h	/^  unexpected_eof$/;"	e	enum:llvm::object::object_error::_
unfoldMemoryOperand	Target/TargetInstrInfo.h	/^  virtual bool unfoldMemoryOperand(MachineFunction &MF, MachineInstr *MI,$/;"	f	class:llvm::TargetInstrInfo
unfoldMemoryOperand	Target/TargetInstrInfo.h	/^  virtual bool unfoldMemoryOperand(SelectionDAG &DAG, SDNode *N,$/;"	f	class:llvm::TargetInstrInfo
uninitialized	ADT/APFloat.h	/^      uninitialized$/;"	e	enum:llvm::APFloat::uninitializedTag
uninitializedTag	ADT/APFloat.h	/^    enum uninitializedTag {$/;"	g	class:llvm::APFloat
uninitialized_copy	ADT/SmallVector.h	/^  static void uninitialized_copy(It1 I, It1 E, It2 Dest) {$/;"	f	class:llvm::SmallVectorTemplateBase
uninitialized_copy	ADT/SmallVector.h	/^  static void uninitialized_copy(T1 *I, T1 *E, T2 *Dest) {$/;"	f	class:llvm::SmallVectorTemplateBase
uninitialized_move	ADT/SmallVector.h	/^  static void uninitialized_move(It1 I, It1 E, It2 Dest) {$/;"	f	class:llvm::SmallVectorTemplateBase
unionSets	ADT/EquivalenceClasses.h	/^  member_iterator unionSets(const ElemTy &V1, const ElemTy &V2) {$/;"	f	class:llvm::EquivalenceClasses
unionSets	ADT/EquivalenceClasses.h	/^  member_iterator unionSets(member_iterator L1, member_iterator L2) {$/;"	f	class:llvm::EquivalenceClasses
unionWith	ADT/SparseBitVector.h	/^  bool unionWith(const SparseBitVectorElement &RHS) {$/;"	f	struct:llvm::SparseBitVectorElement
unique	ADT/ilist.h	/^  template<class Pr2> void unique(Pr2 pred) {$/;"	f	class:llvm::iplist
unique	ADT/ilist.h	/^  void unique() { unique(op_equal); }$/;"	f	class:llvm::iplist
uniqueID	Support/PathV1.h	/^    uint64_t    uniqueID;   \/\/\/< A number to uniquely ID this file$/;"	m	class:llvm::sys::FileStatus
unknown	Analysis/MemoryBuiltins.h	/^  SizeOffsetEvalType unknown() {$/;"	f	class:llvm::ObjectSizeOffsetEvaluator
unknown	Analysis/MemoryBuiltins.h	/^  SizeOffsetType unknown() {$/;"	f	class:llvm::ObjectSizeOffsetVisitor
unknown	Support/FileSystem.h	/^    unknown = 0,              \/\/\/< Unrecognized file$/;"	e	enum:llvm::sys::fs::file_magic::_
unregister	Support/CrashRecoveryContext.h	/^  void unregister() {$/;"	f	class:llvm::CrashRecoveryContextCleanupRegistrar
unsafe	CodeGen/PBQP/Heuristics/Briggs.h	/^        UnsafeArray unsafe, reverseUnsafe;$/;"	m	struct:PBQP::Heuristics::Briggs::EdgeData
unsafeDegrees	CodeGen/PBQP/Heuristics/Briggs.h	/^        UnsafeDegreesArray unsafeDegrees;$/;"	m	struct:PBQP::Heuristics::Briggs::NodeData
unsafeStart	ADT/IntervalMap.h	/^  KeyT &unsafeStart() const {$/;"	f	class:llvm::IntervalMap::const_iterator
unsafeStop	ADT/IntervalMap.h	/^  KeyT &unsafeStop() const {$/;"	f	class:llvm::IntervalMap::const_iterator
unsafeValue	ADT/IntervalMap.h	/^  ValT &unsafeValue() const {$/;"	f	class:llvm::IntervalMap::const_iterator
unscheduledNode	CodeGen/ScheduleDAG.h	/^    virtual void unscheduledNode(SUnit *) {}$/;"	f	class:llvm::SchedulingPriorityQueue
unspecified_bool_true	Support/system_error.h	/^  static void unspecified_bool_true() {}$/;"	f	class:llvm::error_code
unspecified_bool_true	Support/system_error.h	/^  static void unspecified_bool_true() {}$/;"	f	class:llvm::error_condition
unspecified_bool_type	Support/system_error.h	/^  typedef void (*unspecified_bool_type)();$/;"	t	class:llvm::error_code
unspecified_bool_type	Support/system_error.h	/^  typedef void (*unspecified_bool_type)();$/;"	t	class:llvm::error_condition
untieRegOperand	CodeGen/MachineInstr.h	/^  void untieRegOperand(unsigned OpIdx) {$/;"	f	class:llvm::MachineInstr
unused	Support/COFF.h	/^    uint8_t  unused[10];$/;"	m	struct:llvm::COFF::AuxiliaryWeakExternal
unused	Support/COFF.h	/^    uint8_t  unused[2];$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
unused	Support/COFF.h	/^    uint8_t  unused[3];$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
unused1	Support/COFF.h	/^    uint8_t  unused1[4];$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
unused2	Support/COFF.h	/^    uint8_t  unused2[6];$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
unused3	Support/COFF.h	/^    uint8_t  unused3[2];$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
unwindCodes	Support/Win64EH.h	/^  UnwindCode unwindCodes[1];$/;"	m	struct:llvm::Win64EH::UnwindInfo
unwindInfoOffset	Support/Win64EH.h	/^  uint64_t unwindInfoOffset;$/;"	m	struct:llvm::Win64EH::RuntimeFunction
unwindOp	Support/Win64EH.h	/^    uint8_t unwindOp:4,$/;"	m	struct:llvm::Win64EH::UnwindCode::__anon137
updateAllocability	CodeGen/PBQP/Heuristics/Briggs.h	/^      void updateAllocability(Graph::NodeItr nItr) {$/;"	f	class:PBQP::Heuristics::Briggs
updateCaseValueOperand	Instructions.h	/^    void updateCaseValueOperand(IntegersSubset& V) {$/;"	f	class:llvm::SwitchInst::CaseIt
updateDFSNumbers	Analysis/Dominators.h	/^  void updateDFSNumbers() {$/;"	f	class:llvm::DominatorTreeBase
updateDebugInfo	Transforms/Utils/SSAUpdater.h	/^  virtual void updateDebugInfo(Instruction *I) const {$/;"	f	class:llvm::LoadAndStorePromoter
updateNode	CodeGen/LatencyPriorityQueue.h	/^    void updateNode(const SUnit *SU) {$/;"	f	class:llvm::LatencyPriorityQueue
updateNode	CodeGen/ResourcePriorityQueue.h	/^    void updateNode(const SUnit *SU) {}$/;"	f	class:llvm::ResourcePriorityQueue
updateSizeAndTBAAInfo	Analysis/AliasSetTracker.h	/^    void updateSizeAndTBAAInfo(uint64_t NewSize, const MDNode *NewTBAAInfo) {$/;"	f	class:llvm::AliasSet::PointerRec
urem	ADT/APInt.h	/^inline APInt urem(const APInt& LHS, const APInt& RHS) {$/;"	f	namespace:llvm::APIntOps
useAggressiveSymbolFolding	MC/MCMachObjectWriter.h	/^  bool useAggressiveSymbolFolding() const { return UseAggressiveSymbolFolding; }$/;"	f	class:llvm::MCMachObjectTargetWriter
useDwarfRegNumForCFI	MC/MCAsmInfo.h	/^    bool useDwarfRegNumForCFI() const {$/;"	f	class:llvm::MCAsmInfo
useFPForScavengingIndex	Target/TargetRegisterInfo.h	/^  virtual bool useFPForScavengingIndex(const MachineFunction &MF) const {$/;"	f	class:llvm::TargetRegisterInfo
useGOT	Target/TargetJITInfo.h	/^    bool useGOT;$/;"	m	class:llvm::TargetJITInfo
use_back	Instruction.h	/^  Instruction       *use_back()       { return cast<Instruction>(*use_begin());}$/;"	f	class:llvm::Instruction
use_back	Instruction.h	/^  const Instruction *use_back() const { return cast<Instruction>(*use_begin());}$/;"	f	class:llvm::Instruction
use_back	Value.h	/^  User              *use_back()        { return *use_begin(); }$/;"	f	class:llvm::Value
use_back	Value.h	/^  const User        *use_back()  const { return *use_begin(); }$/;"	f	class:llvm::Value
use_begin	CodeGen/MachineRegisterInfo.h	/^  use_iterator use_begin(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
use_begin	CodeGen/SelectionDAGNodes.h	/^  use_iterator use_begin() const {$/;"	f	class:llvm::SDNode
use_begin	Value.h	/^  const_use_iterator use_begin() const { return const_use_iterator(UseList); }$/;"	f	class:llvm::Value
use_begin	Value.h	/^  use_iterator       use_begin()       { return use_iterator(UseList); }$/;"	f	class:llvm::Value
use_empty	CodeGen/MachineRegisterInfo.h	/^  bool use_empty(unsigned RegNo) const { return use_begin(RegNo) == use_end(); }$/;"	f	class:llvm::MachineRegisterInfo
use_empty	CodeGen/SelectionDAGNodes.h	/^  bool use_empty() const { return UseList == NULL; }$/;"	f	class:llvm::SDNode
use_empty	CodeGen/SelectionDAGNodes.h	/^inline bool SDValue::use_empty() const {$/;"	f	class:llvm::SDValue
use_empty	Value.h	/^  bool               use_empty() const { return UseList == 0; }$/;"	f	class:llvm::Value
use_end	CodeGen/MachineRegisterInfo.h	/^  static use_iterator use_end() { return use_iterator(0); }$/;"	f	class:llvm::MachineRegisterInfo
use_end	CodeGen/SelectionDAGNodes.h	/^  static use_iterator use_end() { return use_iterator(0); }$/;"	f	class:llvm::SDNode
use_end	Value.h	/^  const_use_iterator use_end()   const { return const_use_iterator(0);   }$/;"	f	class:llvm::Value
use_end	Value.h	/^  use_iterator       use_end()         { return use_iterator(0);   }$/;"	f	class:llvm::Value
use_iterator	CodeGen/MachineRegisterInfo.h	/^  typedef defusechain_iterator<true,false,false> use_iterator;$/;"	t	class:llvm::MachineRegisterInfo
use_iterator	CodeGen/SelectionDAGNodes.h	/^    explicit use_iterator(SDUse *op) : Op(op) {$/;"	f	class:llvm::SDNode::use_iterator
use_iterator	CodeGen/SelectionDAGNodes.h	/^    use_iterator() : Op(0) {}$/;"	f	class:llvm::SDNode::use_iterator
use_iterator	CodeGen/SelectionDAGNodes.h	/^    use_iterator(const use_iterator &I) : Op(I.Op) {}$/;"	f	class:llvm::SDNode::use_iterator
use_iterator	CodeGen/SelectionDAGNodes.h	/^  class use_iterator$/;"	c	class:llvm::SDNode
use_iterator	Value.h	/^  typedef value_use_iterator<User>       use_iterator;$/;"	t	class:llvm::Value
use_nodbg_begin	CodeGen/MachineRegisterInfo.h	/^  use_nodbg_iterator use_nodbg_begin(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
use_nodbg_empty	CodeGen/MachineRegisterInfo.h	/^  bool use_nodbg_empty(unsigned RegNo) const {$/;"	f	class:llvm::MachineRegisterInfo
use_nodbg_end	CodeGen/MachineRegisterInfo.h	/^  static use_nodbg_iterator use_nodbg_end() { return use_nodbg_iterator(0); }$/;"	f	class:llvm::MachineRegisterInfo
use_nodbg_iterator	CodeGen/MachineRegisterInfo.h	/^  typedef defusechain_iterator<true,false,true> use_nodbg_iterator;$/;"	t	class:llvm::MachineRegisterInfo
use_size	CodeGen/SelectionDAGNodes.h	/^  size_t use_size() const { return std::distance(use_begin(), use_end()); }$/;"	f	class:llvm::SDNode
usec	Support/TimeValue.h	/^    uint64_t usec() const {$/;"	f	class:llvm::sys::TimeValue
usec	Support/TimeValue.h	/^    void usec( int64_t microseconds ) {$/;"	f	class:llvm::sys::TimeValue
user	Support/PathV1.h	/^    uint32_t    user;       \/\/\/< User ID of owner, if applicable$/;"	m	class:llvm::sys::FileStatus
usesCustomInsertionHook	CodeGen/MachineInstr.h	/^  bool usesCustomInsertionHook(QueryType Type = IgnoreBundle) const {$/;"	f	class:llvm::MachineInstr
usesCustomInsertionHook	MC/MCInstrDesc.h	/^  bool usesCustomInsertionHook() const {$/;"	f	class:llvm::MCInstrDesc
usesDynamicAlloca	Analysis/CodeMetrics.h	/^    bool usesDynamicAlloca;$/;"	m	struct:llvm::CodeMetrics
usesELFSectionDirectiveForBSS	MC/MCAsmInfo.h	/^    bool usesELFSectionDirectiveForBSS() const {$/;"	f	class:llvm::MCAsmInfo
usesMetadata	CodeGen/GCStrategy.h	/^    bool usesMetadata() const { return UsesMetadata; }$/;"	f	class:llvm::GCStrategy
usesSunStyleELFSectionSwitchSyntax	MC/MCAsmInfo.h	/^    bool usesSunStyleELFSectionSwitchSyntax() const {$/;"	f	class:llvm::MCAsmInfo
usesUnderscoreLongJmp	Target/TargetLowering.h	/^  bool usesUnderscoreLongJmp() const {$/;"	f	class:llvm::TargetLowering
usesUnderscoreSetJmp	Target/TargetLowering.h	/^  bool usesUnderscoreSetJmp() const {$/;"	f	class:llvm::TargetLowering
usesVAFloatArgument	CodeGen/MachineModuleInfo.h	/^  bool usesVAFloatArgument() const {$/;"	f	class:llvm::MachineModuleInfo
utohex_buffer	ADT/StringExtras.h	/^static inline char *utohex_buffer(IntTy X, char *BufferEnd) {$/;"	f	namespace:llvm
utohexstr	ADT/StringExtras.h	/^static inline std::string utohexstr(uint64_t X) {$/;"	f	namespace:llvm
utohexstr	ADT/Twine.h	/^    static Twine utohexstr(const uint64_t &Val) {$/;"	f	class:llvm::Twine
utostr	ADT/StringExtras.h	/^static inline std::string utostr(uint64_t X, bool isNeg = false) {$/;"	f	namespace:llvm
utostr_32	ADT/StringExtras.h	/^static inline std::string utostr_32(uint32_t X, bool isNeg = false) {$/;"	f	namespace:llvm
uuid	Support/MachO.h	/^      uint8_t uuid[16];$/;"	m	struct:llvm::MachO::uuid_command
uuid_command	Support/MachO.h	/^    struct uuid_command {$/;"	s	namespace:llvm::MachO
v16i1	CodeGen/ValueTypes.h	/^      v16i1          =  16,   \/\/ 16 x i1$/;"	e	enum:llvm::MVT::SimpleValueType
v16i16	CodeGen/ValueTypes.h	/^      v16i16         =  26,   \/\/ 16 x i16$/;"	e	enum:llvm::MVT::SimpleValueType
v16i32	CodeGen/ValueTypes.h	/^      v16i32         =  31,   \/\/ 16 x i32$/;"	e	enum:llvm::MVT::SimpleValueType
v16i64	CodeGen/ValueTypes.h	/^      v16i64         =  36,   \/\/ 16 x i64$/;"	e	enum:llvm::MVT::SimpleValueType
v16i8	CodeGen/ValueTypes.h	/^      v16i8          =  20,   \/\/ 16 x i8$/;"	e	enum:llvm::MVT::SimpleValueType
v1i16	CodeGen/ValueTypes.h	/^      v1i16          =  22,   \/\/  1 x i16$/;"	e	enum:llvm::MVT::SimpleValueType
v1i32	CodeGen/ValueTypes.h	/^      v1i32          =  27,   \/\/  1 x i32$/;"	e	enum:llvm::MVT::SimpleValueType
v1i64	CodeGen/ValueTypes.h	/^      v1i64          =  32,   \/\/  1 x i64$/;"	e	enum:llvm::MVT::SimpleValueType
v2f16	CodeGen/ValueTypes.h	/^      v2f16          =  37,   \/\/  2 x f16$/;"	e	enum:llvm::MVT::SimpleValueType
v2f32	CodeGen/ValueTypes.h	/^      v2f32          =  38,   \/\/  2 x f32$/;"	e	enum:llvm::MVT::SimpleValueType
v2f64	CodeGen/ValueTypes.h	/^      v2f64          =  41,   \/\/  2 x f64$/;"	e	enum:llvm::MVT::SimpleValueType
v2i1	CodeGen/ValueTypes.h	/^      v2i1           =  13,   \/\/  2 x i1$/;"	e	enum:llvm::MVT::SimpleValueType
v2i16	CodeGen/ValueTypes.h	/^      v2i16          =  23,   \/\/  2 x i16$/;"	e	enum:llvm::MVT::SimpleValueType
v2i32	CodeGen/ValueTypes.h	/^      v2i32          =  28,   \/\/  2 x i32$/;"	e	enum:llvm::MVT::SimpleValueType
v2i64	CodeGen/ValueTypes.h	/^      v2i64          =  33,   \/\/  2 x i64$/;"	e	enum:llvm::MVT::SimpleValueType
v2i8	CodeGen/ValueTypes.h	/^      v2i8           =  17,   \/\/  2 x i8$/;"	e	enum:llvm::MVT::SimpleValueType
v32i8	CodeGen/ValueTypes.h	/^      v32i8          =  21,   \/\/ 32 x i8$/;"	e	enum:llvm::MVT::SimpleValueType
v4f32	CodeGen/ValueTypes.h	/^      v4f32          =  39,   \/\/  4 x f32$/;"	e	enum:llvm::MVT::SimpleValueType
v4f64	CodeGen/ValueTypes.h	/^      v4f64          =  42,   \/\/  4 x f64$/;"	e	enum:llvm::MVT::SimpleValueType
v4i1	CodeGen/ValueTypes.h	/^      v4i1           =  14,   \/\/  4 x i1$/;"	e	enum:llvm::MVT::SimpleValueType
v4i16	CodeGen/ValueTypes.h	/^      v4i16          =  24,   \/\/  4 x i16$/;"	e	enum:llvm::MVT::SimpleValueType
v4i32	CodeGen/ValueTypes.h	/^      v4i32          =  29,   \/\/  4 x i32$/;"	e	enum:llvm::MVT::SimpleValueType
v4i64	CodeGen/ValueTypes.h	/^      v4i64          =  34,   \/\/  4 x i64$/;"	e	enum:llvm::MVT::SimpleValueType
v4i8	CodeGen/ValueTypes.h	/^      v4i8           =  18,   \/\/  4 x i8$/;"	e	enum:llvm::MVT::SimpleValueType
v8f32	CodeGen/ValueTypes.h	/^      v8f32          =  40,   \/\/  8 x f32$/;"	e	enum:llvm::MVT::SimpleValueType
v8i1	CodeGen/ValueTypes.h	/^      v8i1           =  15,   \/\/  8 x i1$/;"	e	enum:llvm::MVT::SimpleValueType
v8i16	CodeGen/ValueTypes.h	/^      v8i16          =  25,   \/\/  8 x i16$/;"	e	enum:llvm::MVT::SimpleValueType
v8i32	CodeGen/ValueTypes.h	/^      v8i32          =  30,   \/\/  8 x i32$/;"	e	enum:llvm::MVT::SimpleValueType
v8i64	CodeGen/ValueTypes.h	/^      v8i64          =  35,   \/\/  8 x i64$/;"	e	enum:llvm::MVT::SimpleValueType
v8i8	CodeGen/ValueTypes.h	/^      v8i8           =  19,   \/\/  8 x i8$/;"	e	enum:llvm::MVT::SimpleValueType
vAny	CodeGen/ValueTypes.h	/^      vAny           = 252,$/;"	e	enum:llvm::MVT::SimpleValueType
v_	Object/Error.h	/^  _ v_;$/;"	m	struct:llvm::object::object_error
v_	Support/FileSystem.h	/^  int v_;$/;"	m	struct:llvm::sys::fs::copy_option
v_	Support/FileSystem.h	/^  int v_;$/;"	m	struct:llvm::sys::fs::file_magic
v_	Support/FileSystem.h	/^  int v_;$/;"	m	struct:llvm::sys::fs::file_type
v_	Support/system_error.h	/^  _ v_;$/;"	m	struct:llvm::errc
v_	Support/system_error.h	/^  _ v_;$/;"	m	struct:llvm::windows_error
val	Support/Endian.h	/^  value_type val;$/;"	m	struct:llvm::support::detail::alignment_access_helper
valid	ADT/IntervalMap.h	/^  bool valid() const { return path.valid(); }$/;"	f	class:llvm::IntervalMap::const_iterator
valid	ADT/IntervalMap.h	/^  bool valid() const {$/;"	f	class:llvm::IntervalMapImpl::Path
valid	ADT/IntervalMap.h	/^  bool valid() const {$/;"	f	class:llvm::IntervalMapOverlaps
validAlignment	DataLayout.h	/^  bool validAlignment(const LayoutAlignElem &align) const {$/;"	f	class:llvm::DataLayout
validPointer	DataLayout.h	/^  bool validPointer(const PointerAlignElem &align) const {$/;"	f	class:llvm::DataLayout
validate	Support/YAMLParser.h	/^  bool validate() {$/;"	f	class:llvm::yaml::Stream
validateSymbol	Object/ELF.h	/^                  ::validateSymbol(DataRefImpl Symb) const {$/;"	f	class:llvm::object::ELFObjectFile
validateTree	ADT/ImmutableSet.h	/^  unsigned validateTree() const {$/;"	f	class:llvm::ImutAVLTree
validateTree	ADT/ImmutableSet.h	/^  void validateTree() const { if (Root) Root->validateTree(); }$/;"	f	class:llvm::ImmutableSet
validateTree	ADT/ImmutableSet.h	/^  void validateTree() const { if (Root) Root->validateTree(); }$/;"	f	class:llvm::ImmutableSetRef
valloc	Target/TargetLibraryInfo.h	/^      valloc,$/;"	e	enum:llvm::LibFunc::Func
valno	CodeGen/LiveInterval.h	/^    VNInfo *valno;   \/\/ identifier for the value contained in this interval.$/;"	m	struct:llvm::LiveRange
valnos	CodeGen/LiveInterval.h	/^    VNInfoList valnos;   \/\/ value#'s$/;"	m	class:llvm::LiveInterval
value	ADT/ArrayRef.h	/^    static const bool value = true;$/;"	m	struct:llvm::isPodLike
value	ADT/Hashing.h	/^  size_t value;$/;"	m	class:llvm::hash_code
value	ADT/ImmutableList.h	/^struct isPodLike<ImmutableList<T> > { static const bool value = true; };$/;"	m	struct:llvm::isPodLike
value	ADT/ImmutableSet.h	/^  value_type value;$/;"	m	class:llvm::ImutAVLTree
value	ADT/IntervalMap.h	/^  ValT &value(unsigned i) { return this->second[i]; }$/;"	f	class:llvm::IntervalMapImpl::LeafNode
value	ADT/IntervalMap.h	/^  const ValT &value() const { return unsafeValue(); }$/;"	f	class:llvm::IntervalMap::const_iterator
value	ADT/IntervalMap.h	/^  const ValT &value(unsigned i) const { return this->second[i]; }$/;"	f	class:llvm::IntervalMapImpl::LeafNode
value	ADT/PointerIntPair.h	/^   static const bool value = true;$/;"	m	struct:llvm::isPodLike
value	ADT/StringRef.h	/^  template <> struct isPodLike<StringRef> { static const bool value = true; };$/;"	m	struct:llvm::isPodLike
value	Bitcode/BitCodes.h	/^template <> struct isPodLike<BitCodeAbbrevOp> { static const bool value=true; };$/;"	m	struct:llvm::isPodLike
value	CodeGen/LiveInterval.h	/^  template <> struct isPodLike<LiveRange> { static const bool value = true; };$/;"	m	struct:llvm::isPodLike
value	CodeGen/ScheduleDAG.h	/^  struct isPodLike<SDep> { static const bool value = true; };$/;"	m	struct:llvm::isPodLike
value	CodeGen/SelectionDAGNodes.h	/^template <> struct isPodLike<SDValue> { static const bool value = true; };$/;"	m	struct:llvm::isPodLike
value	CodeGen/SlotIndexes.h	/^  template <> struct isPodLike<SlotIndex> { static const bool value = true; };$/;"	m	struct:llvm::isPodLike
value	MC/MCInst.h	/^template <> struct isPodLike<MCOperand> { static const bool value = true; };$/;"	m	struct:llvm::isPodLike
value	Support/ValueHandle.h	/^  static const bool value = true;$/;"	m	struct:llvm::isPodLike
value	Support/system_error.h	/^  int value() const {return _val_;}$/;"	f	class:llvm::error_code
value	Support/system_error.h	/^  int value() const {return _val_;}$/;"	f	class:llvm::error_condition
value	Support/type_traits.h	/^    value = (!is_class<UnderlyingT>::value && !is_pointer<UnderlyingT>::value &&$/;"	m	class:llvm::is_integral_or_enum
value	Support/type_traits.h	/^  static const bool value $/;"	m	struct:llvm::is_base_of
value	Support/type_traits.h	/^  static const bool value = __is_trivially_copyable(T);$/;"	m	struct:llvm::isPodLike
value	Support/type_traits.h	/^  static const bool value = isPodLike<T>::value && isPodLike<U>::value;$/;"	m	struct:llvm::isPodLike
value	Support/type_traits.h	/^  static const bool value =$/;"	m	struct:llvm::is_class
value	Support/type_traits.h	/^  static const value_type value = v;$/;"	m	struct:llvm::integral_constant
valueDefined	CodeGen/LiveInterval.h	/^    VNInfo *valueDefined() const {$/;"	f	class:llvm::LiveRangeQuery
valueIn	CodeGen/LiveInterval.h	/^    VNInfo *valueIn() const {$/;"	f	class:llvm::LiveRangeQuery
valueOut	CodeGen/LiveInterval.h	/^    VNInfo *valueOut() const {$/;"	f	class:llvm::LiveRangeQuery
value_begin	CodeGen/SelectionDAGNodes.h	/^  value_iterator value_begin() const { return ValueList; }$/;"	f	class:llvm::SDNode
value_desc	Support/CommandLine.h	/^  value_desc(const char *Str) : Desc(Str) {}$/;"	f	struct:llvm::cl::value_desc
value_desc	Support/CommandLine.h	/^struct value_desc {$/;"	s	namespace:llvm::cl
value_end	CodeGen/SelectionDAGNodes.h	/^  value_iterator value_end() const { return ValueList+NumValues; }$/;"	f	class:llvm::SDNode
value_iterator	CodeGen/SelectionDAGNodes.h	/^  typedef const EVT* value_iterator;$/;"	t	class:llvm::SDNode
value_op_begin	User.h	/^  inline value_op_iterator value_op_begin() {$/;"	f	class:llvm::User
value_op_end	User.h	/^  inline value_op_iterator value_op_end() {$/;"	f	class:llvm::User
value_op_iterator	User.h	/^    explicit value_op_iterator(Use *U) : OI(U) {}$/;"	f	class:llvm::User::value_op_iterator
value_op_iterator	User.h	/^  class value_op_iterator : public std::iterator<std::forward_iterator_tag,$/;"	c	class:llvm::User
value_too_large	Support/system_error.h	/^  value_too_large                     = EOVERFLOW,$/;"	e	enum:llvm::errc::_
value_type	ADT/DenseMap.h	/^  typedef BucketT value_type;$/;"	t	class:llvm::DenseMapBase
value_type	ADT/DenseMap.h	/^  typedef typename conditional<IsConst, const Bucket, Bucket>::type value_type;$/;"	t	class:llvm::DenseMapIterator
value_type	ADT/DenseSet.h	/^    typedef ValueT value_type;$/;"	t	class:llvm::DenseSet::ConstIterator
value_type	ADT/DenseSet.h	/^    typedef ValueT value_type;$/;"	t	class:llvm::DenseSet::Iterator
value_type	ADT/ImmutableIntervalMap.h	/^  typedef const std::pair<Interval, T> value_type;$/;"	t	struct:llvm::ImutIntervalInfo
value_type	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutInfo::value_type     value_type;$/;"	t	class:llvm::ImutIntervalAVLFactory
value_type	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutIntervalInfo<ValT>::value_type      value_type;$/;"	t	class:llvm::ImmutableIntervalMap
value_type	ADT/ImmutableList.h	/^  typedef T value_type;$/;"	t	class:llvm::ImmutableList
value_type	ADT/ImmutableMap.h	/^  typedef const std::pair<T,S> value_type;$/;"	t	struct:llvm::ImutKeyValueInfo
value_type	ADT/ImmutableMap.h	/^  typedef typename ValInfo::value_type      value_type;$/;"	t	class:llvm::ImmutableMap
value_type	ADT/ImmutableMap.h	/^  typedef typename ValInfo::value_type      value_type;$/;"	t	class:llvm::ImmutableMapRef
value_type	ADT/ImmutableSet.h	/^  typedef const T  value_type;$/;"	t	struct:llvm::ImutProfileInfo
value_type	ADT/ImmutableSet.h	/^  typedef const T  value_type;$/;"	t	struct:llvm::ImutProfileInteger
value_type	ADT/ImmutableSet.h	/^  typedef const T*   value_type;$/;"	t	struct:llvm::ImutProfileInfo
value_type	ADT/ImmutableSet.h	/^  typedef typename ImutInfo::value_type     value_type;$/;"	t	class:llvm::ImutAVLTree
value_type	ADT/ImmutableSet.h	/^  typedef typename ImutProfileInfo<T*>::value_type      value_type;$/;"	t	struct:llvm::ImutContainerInfo
value_type	ADT/ImmutableSet.h	/^  typedef typename ImutProfileInfo<T>::value_type      value_type;$/;"	t	struct:llvm::ImutContainerInfo
value_type	ADT/ImmutableSet.h	/^  typedef typename ValInfo::value_type      value_type;$/;"	t	class:llvm::ImmutableSet
value_type	ADT/ImmutableSet.h	/^  typedef typename ValInfo::value_type      value_type;$/;"	t	class:llvm::ImmutableSetRef
value_type	ADT/InMemoryStruct.h	/^  typedef T value_type;$/;"	t	class:llvm::InMemoryStruct
value_type	ADT/STLExtras.h	/^  typedef typename UnaryFunc::result_type value_type;$/;"	t	class:llvm::mapped_iterator
value_type	ADT/SetVector.h	/^  typedef T value_type;$/;"	t	class:llvm::SetVector
value_type	ADT/SmallPtrSet.h	/^  typedef PtrTy                     value_type;$/;"	t	class:llvm::SmallPtrSetIterator
value_type	ADT/SmallVector.h	/^  typedef T value_type;$/;"	t	class:llvm::SmallVectorTemplateCommon
value_type	ADT/SparseSet.h	/^  typedef ValueT value_type;$/;"	t	class:llvm::SparseSet
value_type	ADT/StringMap.h	/^  typedef StringMapEntry<ValueTy> value_type;$/;"	t	class:llvm::StringMap
value_type	ADT/StringMap.h	/^  typedef StringMapEntry<ValueTy> value_type;$/;"	t	class:llvm::StringMapConstIterator
value_type	ADT/TinyPtrVector.h	/^  typedef typename VecTy::value_type value_type;$/;"	t	class:llvm::TinyPtrVector
value_type	ADT/ValueMap.h	/^  typedef std::pair<KeyT, ValueT> value_type;$/;"	t	class:llvm::ValueMap
value_type	ADT/ilist.h	/^  typedef NodeTy value_type;$/;"	t	class:llvm::iplist
value_type	ADT/ilist.h	/^  typedef typename super::value_type value_type;$/;"	t	class:llvm::ilist_iterator
value_type	Object/ELF.h	/^    typedef const RelocT value_type;$/;"	t	class:llvm::object::ELFObjectFile::ELFRelocationIterator
value_type	Object/ELF.h	/^  typedef uint32_t value_type;$/;"	t	struct:llvm::object::ELFDataTypeTypedefHelper
value_type	Object/ELF.h	/^  typedef uint64_t value_type;$/;"	t	struct:llvm::object::ELFDataTypeTypedefHelper
value_type	Support/InstIterator.h	/^  typedef IIty                            value_type;$/;"	t	class:llvm::InstIterator
value_type	Support/PathV2.h	/^  typedef const StringRef value_type;$/;"	t	class:llvm::sys::path::const_iterator
value_type	Support/type_traits.h	/^  typedef T value_type;$/;"	t	struct:llvm::integral_constant
value_type_ref	ADT/ImmutableIntervalMap.h	/^  typedef const value_type &value_type_ref;$/;"	t	struct:llvm::ImutIntervalInfo
value_type_ref	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutInfo::value_type_ref value_type_ref;$/;"	t	class:llvm::ImutIntervalAVLFactory
value_type_ref	ADT/ImmutableIntervalMap.h	/^  typedef typename ImutIntervalInfo<ValT>::value_type_ref  value_type_ref;$/;"	t	class:llvm::ImmutableIntervalMap
value_type_ref	ADT/ImmutableMap.h	/^  typedef const value_type& value_type_ref;$/;"	t	struct:llvm::ImutKeyValueInfo
value_type_ref	ADT/ImmutableMap.h	/^  typedef typename ValInfo::value_type_ref  value_type_ref;$/;"	t	class:llvm::ImmutableMap
value_type_ref	ADT/ImmutableMap.h	/^  typedef typename ValInfo::value_type_ref  value_type_ref;$/;"	t	class:llvm::ImmutableMapRef
value_type_ref	ADT/ImmutableSet.h	/^  typedef const T& value_type_ref;$/;"	t	struct:llvm::ImutProfileInfo
value_type_ref	ADT/ImmutableSet.h	/^  typedef const T& value_type_ref;$/;"	t	struct:llvm::ImutProfileInteger
value_type_ref	ADT/ImmutableSet.h	/^  typedef typename ImutInfo::value_type_ref value_type_ref;$/;"	t	class:llvm::ImutAVLTree
value_type_ref	ADT/ImmutableSet.h	/^  typedef typename ImutProfileInfo<T*>::value_type_ref  value_type_ref;$/;"	t	struct:llvm::ImutContainerInfo
value_type_ref	ADT/ImmutableSet.h	/^  typedef typename ImutProfileInfo<T>::value_type_ref  value_type_ref;$/;"	t	struct:llvm::ImutContainerInfo
value_type_ref	ADT/ImmutableSet.h	/^  typedef typename TreeTy::value_type_ref value_type_ref;$/;"	t	class:llvm::ImutAVLFactory
value_type_ref	ADT/ImmutableSet.h	/^  typedef typename ValInfo::value_type_ref  value_type_ref;$/;"	t	class:llvm::ImmutableSet
value_type_ref	ADT/ImmutableSet.h	/^  typedef typename ValInfo::value_type_ref  value_type_ref;$/;"	t	class:llvm::ImmutableSetRef
value_type_ref	ADT/ImmutableSet.h	/^  typedef value_type value_type_ref;$/;"	t	struct:llvm::ImutProfileInfo
value_use_iterator	Use.h	/^  explicit value_use_iterator(Use *u) : U(u) {}$/;"	f	class:llvm::value_use_iterator
value_use_iterator	Use.h	/^  value_use_iterator() {}$/;"	f	class:llvm::value_use_iterator
value_use_iterator	Use.h	/^  value_use_iterator(const _Self &I) : U(I.U) {}$/;"	f	class:llvm::value_use_iterator
value_use_iterator	Use.h	/^class value_use_iterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
values	Support/CommandLine.h	/^ValuesClass<DataType> END_WITH_NULL values(const char *Arg, DataType Val,$/;"	f	namespace:llvm::cl
vd_aux	Object/ELF.h	/^  Elf_Word vd_aux;     \/\/ Offset to the first Verdaux entry (in bytes)$/;"	m	struct:llvm::object::Elf_Verdef_Impl
vd_cnt	Object/ELF.h	/^  Elf_Half vd_cnt;     \/\/ Number of Verdaux entries$/;"	m	struct:llvm::object::Elf_Verdef_Impl
vd_flags	Object/ELF.h	/^  Elf_Half vd_flags;   \/\/ Bitwise flags (VER_DEF_*)$/;"	m	struct:llvm::object::Elf_Verdef_Impl
vd_hash	Object/ELF.h	/^  Elf_Word vd_hash;    \/\/ Hash of name$/;"	m	struct:llvm::object::Elf_Verdef_Impl
vd_ndx	Object/ELF.h	/^  Elf_Half vd_ndx;     \/\/ Version index, used in .gnu.version entries$/;"	m	struct:llvm::object::Elf_Verdef_Impl
vd_next	Object/ELF.h	/^  Elf_Word vd_next;    \/\/ Offset to the next Verdef entry (in bytes)$/;"	m	struct:llvm::object::Elf_Verdef_Impl
vd_version	Object/ELF.h	/^  Elf_Half vd_version; \/\/ Version of this structure (e.g. VER_DEF_CURRENT)$/;"	m	struct:llvm::object::Elf_Verdef_Impl
vda_name	Object/ELF.h	/^  Elf_Word vda_name; \/\/ Version name (offset in string table)$/;"	m	struct:llvm::object::Elf_Verdaux_Impl
vda_next	Object/ELF.h	/^  Elf_Word vda_next; \/\/ Offset to next Verdaux entry (in bytes)$/;"	m	struct:llvm::object::Elf_Verdaux_Impl
vec	ADT/ArrayRef.h	/^    std::vector<T> vec() const {$/;"	f	class:llvm::ArrayRef
vector_	ADT/SetVector.h	/^  vector_type vector_;   \/\/\/< The vector.$/;"	m	class:llvm::SetVector
vector_type	ADT/SetVector.h	/^  typedef Vector vector_type;$/;"	t	class:llvm::SetVector
verify	ADT/ImmutableMap.h	/^  void verify() const { if (Root) Root->verify(); }$/;"	f	class:llvm::ImmutableMap
verify	ADT/ImmutableMap.h	/^  void verify() const { if (Root) Root->verify(); }$/;"	f	class:llvm::ImmutableMapRef
verify	CodeGen/LiveInterval.h	/^    void verify() const {}$/;"	f	class:llvm::LiveInterval
verify	Support/IntegersSubsetMapping.h	/^  bool verify() {$/;"	f	class:llvm::IntegersSubsetMapping
verify	Support/IntegersSubsetMapping.h	/^  bool verify(RangeIterator& errItem) {$/;"	f	class:llvm::IntegersSubsetMapping
verifyInstruction	Target/TargetInstrInfo.h	/^  bool verifyInstruction(const MachineInstr *MI, StringRef &ErrInfo) const {$/;"	f	class:llvm::TargetInstrInfo
verifyLoop	Analysis/LoopInfoImpl.h	/^void LoopBase<BlockT, LoopT>::verifyLoop() const {$/;"	f	class:llvm::LoopBase
verifyLoopNest	Analysis/LoopInfoImpl.h	/^void LoopBase<BlockT, LoopT>::verifyLoopNest($/;"	f	class:llvm::LoopBase
version	Support/MachO.h	/^      uint32_t version;$/;"	m	struct:llvm::MachO::version_min_command
version	Support/Win64EH.h	/^  uint8_t version:3,$/;"	m	struct:llvm::Win64EH::UnwindInfo
version_min_command	Support/MachO.h	/^    struct version_min_command {$/;"	s	namespace:llvm::MachO
vfind	ADT/SmallSet.h	/^  VIterator vfind(const T &V) const {$/;"	f	class:llvm::SmallSet
virtReg2Index	Target/TargetRegisterInfo.h	/^  static unsigned virtReg2Index(unsigned Reg) {$/;"	f	class:llvm::TargetRegisterInfo
visit	Analysis/ScalarEvolutionExpressions.h	/^    RetVal visit(const SCEV *S) {$/;"	f	struct:llvm::SCEVVisitor
visit	Support/InstVisitor.h	/^  RetTy visit(Instruction &I) {$/;"	f	class:llvm::InstVisitor
visit	Support/InstVisitor.h	/^  RetTy visit(Instruction *I)  { return visit(*I); }$/;"	f	class:llvm::InstVisitor
visit	Support/InstVisitor.h	/^  void visit(BasicBlock   *BB) { visit(*BB); }$/;"	f	class:llvm::InstVisitor
visit	Support/InstVisitor.h	/^  void visit(BasicBlock &BB) {$/;"	f	class:llvm::InstVisitor
visit	Support/InstVisitor.h	/^  void visit(Function     *F)  { visit(*F); }$/;"	f	class:llvm::InstVisitor
visit	Support/InstVisitor.h	/^  void visit(Function &F) {$/;"	f	class:llvm::InstVisitor
visit	Support/InstVisitor.h	/^  void visit(Iterator Start, Iterator End) {$/;"	f	class:llvm::InstVisitor
visit	Support/InstVisitor.h	/^  void visit(Module       *M)  { visit(*M); }$/;"	f	class:llvm::InstVisitor
visit	Support/InstVisitor.h	/^  void visit(Module &M) {$/;"	f	class:llvm::InstVisitor
visitAll	Analysis/ScalarEvolutionExpressions.h	/^    void visitAll(const SCEV *Root) {$/;"	f	class:llvm::SCEVTraversal
visitAll	Analysis/ScalarEvolutionExpressions.h	/^  void visitAll(const SCEV *Root, SV& Visitor) {$/;"	f	namespace:llvm
visitAllocaInst	Support/InstVisitor.h	/^  RetTy visitAllocaInst(AllocaInst &I)            { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitAtomicCmpXchgInst	Support/InstVisitor.h	/^  RetTy visitAtomicCmpXchgInst(AtomicCmpXchgInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitAtomicRMWInst	Support/InstVisitor.h	/^  RetTy visitAtomicRMWInst(AtomicRMWInst &I)      { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitBasicBlock	Support/InstVisitor.h	/^  void visitBasicBlock(BasicBlock &BB) {}$/;"	f	class:llvm::InstVisitor
visitBinaryOperator	Support/InstVisitor.h	/^  RetTy visitBinaryOperator(BinaryOperator &I)    { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitBitCastInst	Support/InstVisitor.h	/^  RetTy visitBitCastInst(BitCastInst &I)          { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitBranchInst	Support/InstVisitor.h	/^  RetTy visitBranchInst(BranchInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitCallInst	Support/InstVisitor.h	/^  RetTy visitCallInst(CallInst &I) {$/;"	f	class:llvm::InstVisitor
visitCallSite	Support/InstVisitor.h	/^  RetTy visitCallSite(CallSite CS) {$/;"	f	class:llvm::InstVisitor
visitCastInst	Support/InstVisitor.h	/^  RetTy visitCastInst(CastInst &I)                { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitCmpInst	Support/InstVisitor.h	/^  RetTy visitCmpInst(CmpInst &I)                  { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitConstant	Analysis/ScalarEvolutionExpander.h	/^    Value *visitConstant(const SCEVConstant *S) {$/;"	f	class:llvm::SCEVExpander
visitCouldNotCompute	Analysis/ScalarEvolutionExpressions.h	/^    RetVal visitCouldNotCompute(const SCEVCouldNotCompute *S) {$/;"	f	struct:llvm::SCEVVisitor
visitDbgDeclareInst	Support/InstVisitor.h	/^  RetTy visitDbgDeclareInst(DbgDeclareInst &I)    { DELEGATE(DbgInfoIntrinsic);}$/;"	f	class:llvm::InstVisitor
visitDbgInfoIntrinsic	Support/InstVisitor.h	/^  RetTy visitDbgInfoIntrinsic(DbgInfoIntrinsic &I) { DELEGATE(IntrinsicInst); }$/;"	f	class:llvm::InstVisitor
visitDbgValueInst	Support/InstVisitor.h	/^  RetTy visitDbgValueInst(DbgValueInst &I)        { DELEGATE(DbgInfoIntrinsic);}$/;"	f	class:llvm::InstVisitor
visitExtractElementInst	Support/InstVisitor.h	/^  RetTy visitExtractElementInst(ExtractElementInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitExtractValueInst	Support/InstVisitor.h	/^  RetTy visitExtractValueInst(ExtractValueInst &I){ DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitFCmpInst	Support/InstVisitor.h	/^  RetTy visitFCmpInst(FCmpInst &I)                { DELEGATE(CmpInst);}$/;"	f	class:llvm::InstVisitor
visitFPExtInst	Support/InstVisitor.h	/^  RetTy visitFPExtInst(FPExtInst &I)              { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFPToSIInst	Support/InstVisitor.h	/^  RetTy visitFPToSIInst(FPToSIInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFPToUIInst	Support/InstVisitor.h	/^  RetTy visitFPToUIInst(FPToUIInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFPTruncInst	Support/InstVisitor.h	/^  RetTy visitFPTruncInst(FPTruncInst &I)          { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFenceInst	Support/InstVisitor.h	/^  RetTy visitFenceInst(FenceInst   &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitFunction	Support/InstVisitor.h	/^  void visitFunction  (Function &F) {}$/;"	f	class:llvm::InstVisitor
visitGetElementPtrInst	Support/InstVisitor.h	/^  RetTy visitGetElementPtrInst(GetElementPtrInst &I){ DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitICmpInst	Support/InstVisitor.h	/^  RetTy visitICmpInst(ICmpInst &I)                { DELEGATE(CmpInst);}$/;"	f	class:llvm::InstVisitor
visitIndirectBrInst	Support/InstVisitor.h	/^  RetTy visitIndirectBrInst(IndirectBrInst &I)    { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitInsertElementInst	Support/InstVisitor.h	/^  RetTy visitInsertElementInst(InsertElementInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitInsertValueInst	Support/InstVisitor.h	/^  RetTy visitInsertValueInst(InsertValueInst &I)  { DELEGATE(Instruction); }$/;"	f	class:llvm::InstVisitor
visitInstruction	Support/InstVisitor.h	/^  void visitInstruction(Instruction &I) {}  \/\/ Ignore unhandled instructions$/;"	f	class:llvm::InstVisitor
visitIntToPtrInst	Support/InstVisitor.h	/^  RetTy visitIntToPtrInst(IntToPtrInst &I)        { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitIntrinsicInst	Support/InstVisitor.h	/^  RetTy visitIntrinsicInst(IntrinsicInst &I)      { DELEGATE(CallInst); }$/;"	f	class:llvm::InstVisitor
visitInvokeInst	Support/InstVisitor.h	/^  RetTy visitInvokeInst(InvokeInst &I) {$/;"	f	class:llvm::InstVisitor
visitLandingPadInst	Support/InstVisitor.h	/^  RetTy visitLandingPadInst(LandingPadInst &I)    { DELEGATE(Instruction); }$/;"	f	class:llvm::InstVisitor
visitLoadInst	Support/InstVisitor.h	/^  RetTy visitLoadInst(LoadInst     &I)            { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitMemCpyInst	Support/InstVisitor.h	/^  RetTy visitMemCpyInst(MemCpyInst &I)            { DELEGATE(MemTransferInst); }$/;"	f	class:llvm::InstVisitor
visitMemIntrinsic	Support/InstVisitor.h	/^  RetTy visitMemIntrinsic(MemIntrinsic &I)        { DELEGATE(IntrinsicInst); }$/;"	f	class:llvm::InstVisitor
visitMemMoveInst	Support/InstVisitor.h	/^  RetTy visitMemMoveInst(MemMoveInst &I)          { DELEGATE(MemTransferInst); }$/;"	f	class:llvm::InstVisitor
visitMemSetInst	Support/InstVisitor.h	/^  RetTy visitMemSetInst(MemSetInst &I)            { DELEGATE(MemIntrinsic); }$/;"	f	class:llvm::InstVisitor
visitMemTransferInst	Support/InstVisitor.h	/^  RetTy visitMemTransferInst(MemTransferInst &I)  { DELEGATE(MemIntrinsic); }$/;"	f	class:llvm::InstVisitor
visitModule	Support/InstVisitor.h	/^  void visitModule    (Module &M) {}$/;"	f	class:llvm::InstVisitor
visitNodes	ADT/IntervalMap.h	/^visitNodes(void (IntervalMap::*f)(IntervalMapImpl::NodeRef, unsigned Height)) {$/;"	f	class:llvm::IntervalMap
visitNum	ADT/SCCIterator.h	/^  unsigned visitNum;$/;"	m	class:llvm::scc_iterator
visitPHINode	Support/InstVisitor.h	/^  RetTy visitPHINode(PHINode       &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitPreorder	Analysis/LoopIterator.h	/^  bool visitPreorder(BasicBlock *BB) {$/;"	f	class:llvm::LoopBlocksTraversal
visitPtrToIntInst	Support/InstVisitor.h	/^  RetTy visitPtrToIntInst(PtrToIntInst &I)        { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitResumeInst	Support/InstVisitor.h	/^  RetTy visitResumeInst(ResumeInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitReturnInst	Support/InstVisitor.h	/^  RetTy visitReturnInst(ReturnInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitSExtInst	Support/InstVisitor.h	/^  RetTy visitSExtInst(SExtInst &I)                { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitSIToFPInst	Support/InstVisitor.h	/^  RetTy visitSIToFPInst(SIToFPInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitSelectInst	Support/InstVisitor.h	/^  RetTy visitSelectInst(SelectInst &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitShuffleVectorInst	Support/InstVisitor.h	/^  RetTy visitShuffleVectorInst(ShuffleVectorInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitStoreInst	Support/InstVisitor.h	/^  RetTy visitStoreInst(StoreInst   &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitSwitchInst	Support/InstVisitor.h	/^  RetTy visitSwitchInst(SwitchInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitTerminatorInst	Support/InstVisitor.h	/^  RetTy visitTerminatorInst(TerminatorInst &I)    { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitTruncInst	Support/InstVisitor.h	/^  RetTy visitTruncInst(TruncInst &I)              { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitUIToFPInst	Support/InstVisitor.h	/^  RetTy visitUIToFPInst(UIToFPInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitUnaryInstruction	Support/InstVisitor.h	/^  RetTy visitUnaryInstruction(UnaryInstruction &I){ DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitUnknown	Analysis/ScalarEvolutionExpander.h	/^    Value *visitUnknown(const SCEVUnknown *S) {$/;"	f	class:llvm::SCEVExpander
visitUnreachableInst	Support/InstVisitor.h	/^  RetTy visitUnreachableInst(UnreachableInst &I)  { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitVAArgInst	Support/InstVisitor.h	/^  RetTy visitVAArgInst(VAArgInst   &I)            { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitZExtInst	Support/InstVisitor.h	/^  RetTy visitZExtInst(ZExtInst &I)                { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
vmaddr	Support/MachO.h	/^      uint32_t vmaddr;$/;"	m	struct:llvm::MachO::segment_command
vmaddr	Support/MachO.h	/^      uint64_t vmaddr;$/;"	m	struct:llvm::MachO::segment_command_64
vmap	ValueSymbolTable.h	/^  ValueMap vmap;                    \/\/\/< The map that holds the symbol table.$/;"	m	class:llvm::ValueSymbolTable
vmsize	Support/MachO.h	/^      uint32_t vmsize;$/;"	m	struct:llvm::MachO::segment_command
vmsize	Support/MachO.h	/^      uint64_t vmsize;$/;"	m	struct:llvm::MachO::segment_command_64
vn_aux	Object/ELF.h	/^  Elf_Word vn_aux;     \/\/ Offset to first Vernaux entry (in bytes)$/;"	m	struct:llvm::object::Elf_Verneed_Impl
vn_cnt	Object/ELF.h	/^  Elf_Half vn_cnt;     \/\/ Number of associated Vernaux entries$/;"	m	struct:llvm::object::Elf_Verneed_Impl
vn_file	Object/ELF.h	/^  Elf_Word vn_file;    \/\/ Library name (string table offset)$/;"	m	struct:llvm::object::Elf_Verneed_Impl
vn_next	Object/ELF.h	/^  Elf_Word vn_next;    \/\/ Offset to next Verneed entry (in bytes)$/;"	m	struct:llvm::object::Elf_Verneed_Impl
vn_version	Object/ELF.h	/^  Elf_Half vn_version; \/\/ Version of this structure (e.g. VER_NEED_CURRENT)$/;"	m	struct:llvm::object::Elf_Verneed_Impl
vna_flags	Object/ELF.h	/^  Elf_Half vna_flags; \/\/ Bitwise Flags (VER_FLAG_*)$/;"	m	struct:llvm::object::Elf_Vernaux_Impl
vna_hash	Object/ELF.h	/^  Elf_Word vna_hash;  \/\/ Hash of dependency name$/;"	m	struct:llvm::object::Elf_Vernaux_Impl
vna_name	Object/ELF.h	/^  Elf_Word vna_name;  \/\/ Dependency name$/;"	m	struct:llvm::object::Elf_Vernaux_Impl
vna_next	Object/ELF.h	/^  Elf_Word vna_next;  \/\/ Offset to next Vernaux entry (in bytes)$/;"	m	struct:llvm::object::Elf_Vernaux_Impl
vna_other	Object/ELF.h	/^  Elf_Half vna_other; \/\/ Version index, used in .gnu.version entries$/;"	m	struct:llvm::object::Elf_Vernaux_Impl
vni_begin	CodeGen/LiveInterval.h	/^    const_vni_iterator vni_begin() const { return valnos.begin(); }$/;"	f	class:llvm::LiveInterval
vni_begin	CodeGen/LiveInterval.h	/^    vni_iterator vni_begin() { return valnos.begin(); }$/;"	f	class:llvm::LiveInterval
vni_end	CodeGen/LiveInterval.h	/^    const_vni_iterator vni_end() const { return valnos.end(); }$/;"	f	class:llvm::LiveInterval
vni_end	CodeGen/LiveInterval.h	/^    vni_iterator vni_end() { return valnos.end(); }$/;"	f	class:llvm::LiveInterval
vni_iterator	CodeGen/LiveInterval.h	/^    typedef VNInfoList::iterator vni_iterator;$/;"	t	class:llvm::LiveInterval
vol	Target/TargetLowering.h	/^    bool         vol;         \/\/ is volatile?$/;"	m	struct:llvm::TargetLowering::IntrinsicInfo
vreg2Node	CodeGen/RegAllocPBQP.h	/^    VReg2Node vreg2Node;$/;"	m	class:llvm::PBQPRAProblem
vs_index	Object/ELF.h	/^  Elf_Half vs_index;   \/\/ Version index with flags (e.g. VERSYM_HIDDEN)$/;"	m	struct:llvm::object::Elf_Versym_Impl
vt_begin	Target/TargetRegisterInfo.h	/^  vt_iterator vt_begin() const {$/;"	f	class:llvm::TargetRegisterClass
vt_end	Target/TargetRegisterInfo.h	/^  vt_iterator vt_end() const {$/;"	f	class:llvm::TargetRegisterClass
vt_iterator	Target/TargetRegisterInfo.h	/^  typedef const MVT::SimpleValueType* vt_iterator;$/;"	t	class:llvm::TargetRegisterClass
w	Object/ObjectFile.h	/^  } w;$/;"	m	union:llvm::object::DataRefImpl	typeref:struct:llvm::object::DataRefImpl::__anon75
weak_bind_off	Support/MachO.h	/^      uint32_t weak_bind_off;$/;"	m	struct:llvm::MachO::dyld_info_command
weak_bind_size	Support/MachO.h	/^      uint32_t weak_bind_size;$/;"	m	struct:llvm::MachO::dyld_info_command
weight	CodeGen/LiveInterval.h	/^    float weight;        \/\/ weight of this interval$/;"	m	class:llvm::LiveInterval
weight_iterator	CodeGen/MachineBasicBlock.h	/^  typedef std::vector<uint32_t>::iterator weight_iterator;$/;"	t	class:llvm::MachineBasicBlock
whichBit	ADT/APInt.h	/^  static unsigned whichBit(unsigned bitPosition) {$/;"	f	class:llvm::APInt
whichWord	ADT/APInt.h	/^  static unsigned whichWord(unsigned bitPosition) {$/;"	f	class:llvm::APInt
windows_error	Support/system_error.h	/^  explicit windows_error(int v) : v_(_(v)) {}$/;"	f	struct:llvm::windows_error
windows_error	Support/system_error.h	/^  windows_error(_ v) : v_(v) {}$/;"	f	struct:llvm::windows_error
windows_error	Support/system_error.h	/^struct windows_error {$/;"	s	namespace:llvm
withImplLikeThis	Support/IntegersSubset.h	/^  static IntItem withImplLikeThis(const IntItem& LikeThis, const APInt& V) {$/;"	f	class:llvm::IntItem
word	ADT/SparseBitVector.h	/^  BitWord word(unsigned Idx) const {$/;"	f	struct:llvm::SparseBitVectorElement
worst	CodeGen/PBQP/Heuristics/Briggs.h	/^        unsigned worst, reverseWorst;$/;"	m	struct:PBQP::Heuristics::Briggs::EdgeData
writeEdge	Support/GraphWriter.h	/^  void writeEdge(NodeType *Node, unsigned edgeidx, child_iterator EI) {$/;"	f	class:llvm::GraphWriter
writeFooter	Support/GraphWriter.h	/^  void writeFooter() {$/;"	f	class:llvm::GraphWriter
writeGraph	Support/GraphWriter.h	/^  void writeGraph(const std::string &Title = "") {$/;"	f	class:llvm::GraphWriter
writeHeader	Support/GraphWriter.h	/^  void writeHeader(const std::string &Title) {$/;"	f	class:llvm::GraphWriter
writeMem	CodeGen/SelectionDAGNodes.h	/^  bool writeMem() const { return MMO->isStore(); }$/;"	f	class:llvm::MemSDNode
writeMem	Target/TargetLowering.h	/^    bool         writeMem;    \/\/ writes memory?$/;"	m	struct:llvm::TargetLowering::IntrinsicInfo
writeNode	Support/GraphWriter.h	/^  void writeNode(NodeType *Node) {$/;"	f	class:llvm::GraphWriter
writeNode	Support/GraphWriter.h	/^  void writeNode(NodeType *const *Node) {$/;"	f	class:llvm::GraphWriter
writeNode	Support/GraphWriter.h	/^  void writeNode(NodeType& Node) {$/;"	f	class:llvm::GraphWriter
writeNodes	Support/GraphWriter.h	/^  void writeNodes() {$/;"	f	class:llvm::GraphWriter
write_be	Support/Endian.h	/^  inline void write_be(void *memory, value_type value) {$/;"	f	namespace:llvm::support::endian
write_fault	Support/system_error.h	/^  write_fault             = 29, \/\/ ERROR_WRITE_FAULT,$/;"	e	enum:llvm::windows_error::_
write_le	Support/Endian.h	/^  inline void write_le(void *memory, value_type value) {$/;"	f	namespace:llvm::support::endian
write_protect	Support/system_error.h	/^  write_protect           = 19, \/\/ ERROR_WRITE_PROTECT,$/;"	e	enum:llvm::windows_error::_
writer_acquire	Support/RWMutex.h	/^      bool writer_acquire() {$/;"	f	class:llvm::sys::SmartRWMutex
writer_release	Support/RWMutex.h	/^      bool writer_release() {$/;"	f	class:llvm::sys::SmartRWMutex
writers	Support/RWMutex.h	/^      unsigned readers, writers;$/;"	m	class:llvm::sys::SmartRWMutex
wrong_disk	Support/system_error.h	/^  wrong_disk              = 34, \/\/ ERROR_WRONG_DISK,$/;"	e	enum:llvm::windows_error::_
wrong_protocol_type	Support/system_error.h	/^  wrong_protocol_type                 = EPROTOTYPE$/;"	e	enum:llvm::errc::_
x	ADT/Optional.h	/^  T x;$/;"	m	class:llvm::Optional
x	Support/AlignOf.h	/^  char x;$/;"	m	struct:llvm::AlignmentCalcImpl
x86	ADT/Triple.h	/^    x86,     \/\/ X86: i[3-9]86$/;"	e	enum:llvm::Triple::ArchType
x86_64	ADT/Triple.h	/^    x86_64,  \/\/ X86-64: amd64, x86_64$/;"	e	enum:llvm::Triple::ArchType
x86_fp80	TypeBuilder.h	/^class x86_fp80 {};$/;"	c	namespace:llvm::types
x86_mmx	TypeBuilder.h	/^class x86_mmx {};$/;"	c	namespace:llvm::types
x86mmx	CodeGen/ValueTypes.h	/^      x86mmx         =  43,   \/\/ This is an X86 MMX value$/;"	e	enum:llvm::MVT::SimpleValueType
x87DoubleExtended	ADT/APFloat.h	/^    static const fltSemantics x87DoubleExtended;$/;"	m	class:llvm::APFloat
xParent	CodeGen/MachineBasicBlock.h	/^  MachineFunction *xParent;$/;"	m	class:llvm::MachineBasicBlock
xcore	ADT/Triple.h	/^    xcore,   \/\/ XCore: xcore$/;"	e	enum:llvm::Triple::ArchType
yaml	Support/YAMLParser.h	/^namespace yaml {$/;"	n	namespace:llvm
zeroDigitTag	Use.h	/^  enum PrevPtrTag { zeroDigitTag$/;"	e	enum:llvm::Use::PrevPtrTag
~APInt	ADT/APInt.h	/^  ~APInt() {$/;"	f	class:llvm::APInt
~AliasSetTracker	Analysis/AliasSetTracker.h	/^  ~AliasSetTracker() { clear(); }$/;"	f	class:llvm::AliasSetTracker
~BitCodeAbbrev	Bitcode/BitCodes.h	/^  ~BitCodeAbbrev() {}$/;"	f	class:llvm::BitCodeAbbrev
~BitVector	ADT/BitVector.h	/^  ~BitVector() {$/;"	f	class:llvm::BitVector
~BitstreamCursor	Bitcode/BitstreamReader.h	/^  ~BitstreamCursor() {$/;"	f	class:llvm::BitstreamCursor
~BitstreamReader	Bitcode/BitstreamReader.h	/^  ~BitstreamReader() {$/;"	f	class:llvm::BitstreamReader
~BitstreamWriter	Bitcode/BitstreamWriter.h	/^  ~BitstreamWriter() {$/;"	f	class:llvm::BitstreamWriter
~CallGraph	Analysis/CallGraph.h	/^  virtual ~CallGraph() { destroy(); }$/;"	f	class:llvm::CallGraph
~CallGraphNode	Analysis/CallGraph.h	/^  ~CallGraphNode() {$/;"	f	class:llvm::CallGraphNode
~CallbackVH	Support/ValueHandle.h	/^  virtual ~CallbackVH() {}$/;"	f	class:llvm::CallbackVH
~ConstantDataSequential	Constants.h	/^  ~ConstantDataSequential() { delete Next; }$/;"	f	class:llvm::ConstantDataSequential
~CrashRecoveryContextCleanupRegistrar	Support/CrashRecoveryContext.h	/^  ~CrashRecoveryContextCleanupRegistrar() {$/;"	f	class:llvm::CrashRecoveryContextCleanupRegistrar
~DAGDeltaAlgorithm	ADT/DAGDeltaAlgorithm.h	/^  virtual ~DAGDeltaAlgorithm() {}$/;"	f	class:llvm::DAGDeltaAlgorithm
~DAGUpdateListener	CodeGen/SelectionDAG.h	/^    virtual ~DAGUpdateListener() {$/;"	f	struct:llvm::SelectionDAG::DAGUpdateListener
~Delegate	CodeGen/LiveRangeEdit.h	/^    virtual ~Delegate() {}$/;"	f	class:llvm::LiveRangeEdit::Delegate
~DenseMap	ADT/DenseMap.h	/^  ~DenseMap() {$/;"	f	class:llvm::DenseMap
~Dependence	Analysis/DependenceAnalysis.h	/^    virtual ~Dependence() {}$/;"	f	class:llvm::Dependence
~DirIterState	Support/FileSystem.h	/^    ~DirIterState() {$/;"	f	struct:llvm::sys::fs::detail::DirIterState
~DominatorTree	Analysis/Dominators.h	/^  ~DominatorTree() {$/;"	f	class:llvm::DominatorTree
~DominatorTreeBase	Analysis/Dominators.h	/^  virtual ~DominatorTreeBase() { reset(); }$/;"	f	class:llvm::DominatorTreeBase
~FileRemover	Support/FileUtilities.h	/^    ~FileRemover() {$/;"	f	class:llvm::FileRemover
~FoldingSetNodeWrapper	ADT/FoldingSet.h	/^  virtual ~FoldingSetNodeWrapper() {}$/;"	f	class:llvm::FoldingSetNodeWrapper
~FullDependence	Analysis/DependenceAnalysis.h	/^    ~FullDependence() {$/;"	f	class:llvm::FullDependence
~GCOVLines	Support/GCOV.h	/^  ~GCOVLines() { Lines.clear(); }$/;"	f	class:llvm::GCOVLines
~GenericOptionValue	Support/CommandLine.h	/^  virtual ~GenericOptionValue() {}$/;"	f	struct:llvm::cl::GenericOptionValue
~GlobalValue	GlobalValue.h	/^  ~GlobalValue() {$/;"	f	class:llvm::GlobalValue
~GlobalVariable	GlobalVariable.h	/^  ~GlobalVariable() {$/;"	f	class:llvm::GlobalVariable
~IVVisitor	Transforms/Utils/SimplifyIndVar.h	/^  virtual ~IVVisitor() {}$/;"	f	class:llvm::IVVisitor
~ImmutableListFactory	ADT/ImmutableList.h	/^  ~ImmutableListFactory() {$/;"	f	class:llvm::ImmutableListFactory
~ImmutableMap	ADT/ImmutableMap.h	/^  ~ImmutableMap() {$/;"	f	class:llvm::ImmutableMap
~ImmutableMapRef	ADT/ImmutableMap.h	/^  ~ImmutableMapRef() {$/;"	f	class:llvm::ImmutableMapRef
~ImmutableSet	ADT/ImmutableSet.h	/^  ~ImmutableSet() {$/;"	f	class:llvm::ImmutableSet
~ImmutableSetRef	ADT/ImmutableSet.h	/^  ~ImmutableSetRef() {$/;"	f	class:llvm::ImmutableSetRef
~ImutAVLFactory	ADT/ImmutableSet.h	/^  ~ImutAVLFactory() {$/;"	f	class:llvm::ImutAVLFactory
~Init	TableGen/Record.h	/^  virtual ~Init() {}$/;"	f	class:llvm::Init
~IntervalIterator	Analysis/IntervalIterator.h	/^  inline ~IntervalIterator() {$/;"	f	class:llvm::IntervalIterator
~IntervalMap	ADT/IntervalMap.h	/^  ~IntervalMap() {$/;"	f	class:llvm::IntervalMap
~IntrusiveRefCntPtr	ADT/IntrusiveRefCntPtr.h	/^    ~IntrusiveRefCntPtr() { release(); }$/;"	f	class:llvm::IntrusiveRefCntPtr
~JITCodeEmitter	CodeGen/JITCodeEmitter.h	/^  virtual ~JITCodeEmitter() {}$/;"	f	class:llvm::JITCodeEmitter
~LazyValueInfo	Analysis/LazyValueInfo.h	/^  ~LazyValueInfo() { assert(PImpl == 0 && "releaseMemory not called"); }$/;"	f	class:llvm::LazyValueInfo
~LexicalScope	CodeGen/LexicalScopes.h	/^  virtual ~LexicalScope() {}$/;"	f	class:llvm::LexicalScope
~LoadAndStorePromoter	Transforms/Utils/SSAUpdater.h	/^  virtual ~LoadAndStorePromoter() {}$/;"	f	class:llvm::LoadAndStorePromoter
~LoopBase	Analysis/LoopInfo.h	/^  ~LoopBase() {$/;"	f	class:llvm::LoopBase
~LoopInfoBase	Analysis/LoopInfo.h	/^  ~LoopInfoBase() { releaseMemory(); }$/;"	f	class:llvm::LoopInfoBase
~MCELFObjectTargetWriter	MC/MCELFObjectWriter.h	/^  virtual ~MCELFObjectTargetWriter() {}$/;"	f	class:llvm::MCELFObjectTargetWriter
~MCInstrAnalysis	MC/MCInstrAnalysis.h	/^  virtual ~MCInstrAnalysis() {}$/;"	f	class:llvm::MCInstrAnalysis
~MCParsedAsmOperand	MC/MCParser/MCParsedAsmOperand.h	/^  virtual ~MCParsedAsmOperand() {}$/;"	f	class:llvm::MCParsedAsmOperand
~MCTargetExpr	MC/MCExpr.h	/^  virtual ~MCTargetExpr() {}$/;"	f	class:llvm::MCTargetExpr
~MCWinCOFFObjectTargetWriter	MC/MCWinCOFFObjectWriter.h	/^    virtual ~MCWinCOFFObjectTargetWriter() {}$/;"	f	class:llvm::MCWinCOFFObjectTargetWriter
~MachineCodeEmitter	CodeGen/MachineCodeEmitter.h	/^  virtual ~MachineCodeEmitter() {}$/;"	f	class:llvm::MachineCodeEmitter
~MachineConstantPoolValue	CodeGen/MachineConstantPool.h	/^  virtual ~MachineConstantPoolValue() {}$/;"	f	class:llvm::MachineConstantPoolValue
~MachineLoopRanges	CodeGen/MachineLoopRanges.h	/^  ~MachineLoopRanges() { releaseMemory(); }$/;"	f	class:llvm::MachineLoopRanges
~MachinePassRegistryListener	CodeGen/MachinePassRegistry.h	/^  virtual ~MachinePassRegistryListener() {}$/;"	f	class:llvm::MachinePassRegistryListener
~MachineSchedRegistry	CodeGen/MachineScheduler.h	/^  ~MachineSchedRegistry() { Registry.Remove(this); }$/;"	f	class:llvm::MachineSchedRegistry
~MachineSchedStrategy	CodeGen/MachineScheduler.h	/^  virtual ~MachineSchedStrategy() {}$/;"	f	class:llvm::MachineSchedStrategy
~MallocAllocator	Support/Allocator.h	/^  ~MallocAllocator() {}$/;"	f	class:llvm::MallocAllocator
~Matrix	CodeGen/PBQP/Math.h	/^    ~Matrix() { delete[] data; }$/;"	f	class:PBQP::Matrix
~MutexGuard	Support/MutexGuard.h	/^    ~MutexGuard() { M.release(); }$/;"	f	class:llvm::MutexGuard
~Node	Support/YAMLParser.h	/^  virtual ~Node() {}$/;"	f	class:llvm::yaml::Node
~ObjectBuffer	ExecutionEngine/ObjectBuffer.h	/^  virtual ~ObjectBuffer() {}$/;"	f	class:llvm::ObjectBuffer
~ObjectBufferStream	ExecutionEngine/ObjectBuffer.h	/^  virtual ~ObjectBufferStream() {}$/;"	f	class:llvm::ObjectBufferStream
~ObjectImage	ExecutionEngine/ObjectImage.h	/^  virtual ~ObjectImage() {}$/;"	f	class:llvm::ObjectImage
~Option	Support/CommandLine.h	/^  virtual ~Option() {}$/;"	f	class:llvm::cl::Option
~OwningArrayPtr	ADT/OwningPtr.h	/^  ~OwningArrayPtr() {$/;"	f	class:llvm::OwningArrayPtr
~OwningPtr	ADT/OwningPtr.h	/^  ~OwningPtr() {$/;"	f	class:llvm::OwningPtr
~PBQPBuilder	CodeGen/RegAllocPBQP.h	/^    virtual ~PBQPBuilder() {}$/;"	f	class:llvm::PBQPBuilder
~PooledStringPtr	Support/StringPool.h	/^    ~PooledStringPtr() { clear(); }$/;"	f	class:llvm::PooledStringPtr
~RecTy	TableGen/Record.h	/^  virtual ~RecTy() {}$/;"	f	class:llvm::RecTy
~Record	TableGen/Record.h	/^  ~Record() {}$/;"	f	class:llvm::Record
~RecordKeeper	TableGen/Record.h	/^  ~RecordKeeper() {$/;"	f	class:llvm::RecordKeeper
~Recycler	Support/Recycler.h	/^  ~Recycler() {$/;"	f	class:llvm::Recycler
~RecyclingAllocator	Support/RecyclingAllocator.h	/^  ~RecyclingAllocator() { Base.clear(Allocator); }$/;"	f	class:llvm::RecyclingAllocator
~RefCountedBaseVPTR	ADT/IntrusiveRefCntPtr.h	/^    virtual ~RefCountedBaseVPTR() {}$/;"	f	class:llvm::RefCountedBaseVPTR
~RegisterPassParser	CodeGen/MachinePassRegistry.h	/^  ~RegisterPassParser() { RegistryClass::setListener(NULL); }$/;"	f	class:llvm::RegisterPassParser
~RegisterRegAlloc	CodeGen/RegAllocRegistry.h	/^  ~RegisterRegAlloc() { Registry.Remove(this); }$/;"	f	class:llvm::RegisterRegAlloc
~RegisterScheduler	CodeGen/SchedulerRegistry.h	/^  ~RegisterScheduler() { Registry.Remove(this); }$/;"	f	class:llvm::RegisterScheduler
~ResourcePriorityQueue	CodeGen/ResourcePriorityQueue.h	/^    ~ResourcePriorityQueue() {$/;"	f	class:llvm::ResourcePriorityQueue
~SaveAndRestore	Support/SaveAndRestore.h	/^  ~SaveAndRestore() { X = old_value; }$/;"	f	struct:llvm::SaveAndRestore
~SaveOr	Support/SaveAndRestore.h	/^  ~SaveOr() { X |= old_value; }$/;"	f	struct:llvm::SaveOr
~ScalarTargetTransformInfo	TargetTransformInfo.h	/^  virtual ~ScalarTargetTransformInfo() {}$/;"	f	class:llvm::ScalarTargetTransformInfo
~ScheduleDAGInstrs	CodeGen/ScheduleDAGInstrs.h	/^    virtual ~ScheduleDAGInstrs() {}$/;"	f	class:llvm::ScheduleDAGInstrs
~ScheduleDAGMI	CodeGen/MachineScheduler.h	/^  virtual ~ScheduleDAGMI() {$/;"	f	class:llvm::ScheduleDAGMI
~ScheduleDAGMutation	CodeGen/MachineScheduler.h	/^  virtual ~ScheduleDAGMutation() {}$/;"	f	class:llvm::ScheduleDAGMutation
~SchedulingPriorityQueue	CodeGen/ScheduleDAG.h	/^    virtual ~SchedulingPriorityQueue() {}$/;"	f	class:llvm::SchedulingPriorityQueue
~ScopedFatalErrorHandler	Support/ErrorHandling.h	/^    ~ScopedFatalErrorHandler() { remove_fatal_error_handler(); }$/;"	f	struct:llvm::ScopedFatalErrorHandler
~ScopedHashTable	ADT/ScopedHashTable.h	/^  ~ScopedHashTable() {$/;"	f	class:llvm::ScopedHashTable
~ScopedHashTableScope	ADT/ScopedHashTable.h	/^ScopedHashTableScope<K, V, KInfo, Allocator>::~ScopedHashTableScope() {$/;"	f	class:llvm::ScopedHashTableScope
~Scoreboard	CodeGen/ScoreboardHazardRecognizer.h	/^    ~Scoreboard() {$/;"	f	class:llvm::ScoreboardHazardRecognizer::Scoreboard
~SmallBitVector	ADT/SmallBitVector.h	/^  ~SmallBitVector() {$/;"	f	class:llvm::SmallBitVector
~SmallDenseMap	ADT/DenseMap.h	/^  ~SmallDenseMap() {$/;"	f	class:llvm::SmallDenseMap
~SmallVectorImpl	ADT/SmallVector.h	/^  ~SmallVectorImpl() {$/;"	f	class:llvm::SmallVectorImpl
~SmartScopedLock	Support/Mutex.h	/^      ~SmartScopedLock() {$/;"	f	class:llvm::sys::SmartScopedLock
~SmartScopedReader	Support/RWMutex.h	/^      ~SmartScopedReader() {$/;"	f	struct:llvm::sys::SmartScopedReader
~SmartScopedWriter	Support/RWMutex.h	/^      ~SmartScopedWriter() {$/;"	f	struct:llvm::sys::SmartScopedWriter
~SparseBitVector	ADT/SparseBitVector.h	/^  ~SparseBitVector() {$/;"	f	class:llvm::SparseBitVector
~SparseSet	ADT/SparseSet.h	/^  ~SparseSet() { free(Sparse); }$/;"	f	class:llvm::SparseSet
~SparseSolver	Analysis/SparsePropagation.h	/^  ~SparseSolver() {$/;"	f	class:llvm::SparseSolver
~SpecificBumpPtrAllocator	Support/Allocator.h	/^  ~SpecificBumpPtrAllocator() {$/;"	f	class:llvm::SpecificBumpPtrAllocator
~StringMap	ADT/StringMap.h	/^  ~StringMap() {$/;"	f	class:llvm::StringMap
~StructType	DerivedTypes.h	/^  ~StructType() {$/;"	f	class:llvm::StructType
~TargetJITInfo	Target/TargetJITInfo.h	/^    virtual ~TargetJITInfo() {}$/;"	f	class:llvm::TargetJITInfo
~TargetLoweringObjectFileCOFF	CodeGen/TargetLoweringObjectFileImpl.h	/^  virtual ~TargetLoweringObjectFileCOFF() {}$/;"	f	class:llvm::TargetLoweringObjectFileCOFF
~TargetLoweringObjectFileELF	CodeGen/TargetLoweringObjectFileImpl.h	/^  virtual ~TargetLoweringObjectFileELF() {}$/;"	f	class:llvm::TargetLoweringObjectFileELF
~TargetLoweringObjectFileMachO	CodeGen/TargetLoweringObjectFileImpl.h	/^  virtual ~TargetLoweringObjectFileMachO() {}$/;"	f	class:llvm::TargetLoweringObjectFileMachO
~TimeRegion	Support/Timer.h	/^  ~TimeRegion() {$/;"	f	class:llvm::TimeRegion
~TinyPtrVector	ADT/TinyPtrVector.h	/^  ~TinyPtrVector() {$/;"	f	class:llvm::TinyPtrVector
~Type	Type.h	/^  ~Type() {}$/;"	f	class:llvm::Type
~Use	Use.h	/^  ~Use() {$/;"	f	class:llvm::Use
~User	User.h	/^  ~User() {$/;"	f	class:llvm::User
~ValueHandleBase	Support/ValueHandle.h	/^  ~ValueHandleBase() {$/;"	f	class:llvm::ValueHandleBase
~ValueMap	ADT/ValueMap.h	/^  ~ValueMap() {}$/;"	f	class:llvm::ValueMap
~ValueMapTypeRemapper	Transforms/Utils/ValueMapper.h	/^    virtual ~ValueMapTypeRemapper() {}$/;"	f	class:llvm::ValueMapTypeRemapper
~Vector	CodeGen/PBQP/Math.h	/^    ~Vector() { delete[] data; }$/;"	f	class:PBQP::Vector
~basic_parser_impl	Support/CommandLine.h	/^  virtual ~basic_parser_impl() {}$/;"	f	class:llvm::cl::basic_parser_impl
~circular_raw_ostream	Support/circular_raw_ostream.h	/^    ~circular_raw_ostream() {$/;"	f	class:llvm::circular_raw_ostream
~format_object_base	Support/Format.h	/^  virtual ~format_object_base() {}$/;"	f	class:llvm::format_object_base
~formatted_raw_ostream	Support/FormattedStream.h	/^    ~formatted_raw_ostream() {$/;"	f	class:llvm::formatted_raw_ostream
~generic_parser_base	Support/CommandLine.h	/^  virtual ~generic_parser_base() {}  \/\/ Base class should have virtual-dtor$/;"	f	class:llvm::cl::generic_parser_base
~iplist	ADT/ilist.h	/^  ~iplist() {$/;"	f	class:llvm::iplist
~listener	Support/Registry.h	/^      virtual ~listener() {$/;"	f	class:llvm::Registry::listener
~llvm_shutdown_obj	Support/ManagedStatic.h	/^  ~llvm_shutdown_obj() { llvm_shutdown(); }$/;"	f	struct:llvm::llvm_shutdown_obj
~reference	ADT/BitVector.h	/^    ~reference() {}$/;"	f	class:llvm::BitVector::reference
