!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALL_IS_CLOSED	IntegersSubsetMapping.h	/^    ALL_IS_CLOSED$/;"	e	enum:llvm::IntegersSubsetMapping::DiffProcessState
APIntVal	IntegersSubset.h	/^  const APInt* APIntVal;$/;"	m	class:llvm::IntItem
Add	Registry.h	/^      Add(const char *Name, const char *Desc)$/;"	f	class:llvm::Registry::Add
Add	Registry.h	/^    class Add {$/;"	c	class:llvm::Registry
AddNewSourceBuffer	SourceMgr.h	/^  unsigned AddNewSourceBuffer(MemoryBuffer *F, SMLoc IncludeLoc) {$/;"	f	class:llvm::SourceMgr
AdditionalVals	CommandLine.h	/^  unsigned AdditionalVals;$/;"	m	struct:llvm::cl::multi_val
AdditionalVals	CommandLine.h	/^  unsigned AdditionalVals;\/\/ Greater than 0 for multi-valued option.$/;"	m	class:llvm::cl::Option
Address	Memory.h	/^    void *Address;    \/\/\/< Address of first byte of memory area$/;"	m	class:llvm::sys::MemoryBlock
AddressOfEntryPoint	COFF.h	/^    uint32_t AddressOfEntryPoint; \/\/ RVA$/;"	m	struct:llvm::COFF::PEHeader
AddressOfNewExeHeader	COFF.h	/^    uint32_t AddressOfNewExeHeader;$/;"	m	struct:llvm::COFF::DOSHeader
AddressOfRelocationTable	COFF.h	/^    uint16_t AddressOfRelocationTable;$/;"	m	struct:llvm::COFF::DOSHeader
Aggressive	CodeGen.h	/^      Aggressive   \/\/ -O3$/;"	e	enum:llvm::CodeGenOpt::Level
AliasFor	CommandLine.h	/^  Option *AliasFor;$/;"	m	class:llvm::cl::alias
AliasNode	YAMLParser.h	/^  AliasNode(OwningPtr<Document> &D, StringRef Val)$/;"	f	class:llvm::yaml::AliasNode
AliasNode	YAMLParser.h	/^class AliasNode : public Node {$/;"	c	namespace:llvm::yaml
AlignOf	AlignOf.h	/^struct AlignOf {$/;"	s	namespace:llvm
AlignedCharArrayImpl	AlignOf.h	/^template <> struct AlignedCharArrayImpl<1> { char aligned; };$/;"	s	namespace:llvm
AlignedCharArrayImpl	AlignOf.h	/^template <> struct AlignedCharArrayImpl<2> { short aligned; };$/;"	s	namespace:llvm
AlignedCharArrayImpl	AlignOf.h	/^template <> struct AlignedCharArrayImpl<4> { int aligned; };$/;"	s	namespace:llvm
AlignedCharArrayImpl	AlignOf.h	/^template <> struct AlignedCharArrayImpl<8> { double aligned; };$/;"	s	namespace:llvm
AlignedCharArrayUnion	AlignOf.h	/^union AlignedCharArrayUnion {$/;"	u	namespace:llvm
AlignerImpl	AlignOf.h	/^  class AlignerImpl {$/;"	c	union:llvm::AlignedCharArrayUnion
Alignment	AlignOf.h	/^  enum { Alignment =$/;"	e	enum:llvm::AlignOf::__anon1
AlignmentCalcImpl	AlignOf.h	/^  AlignmentCalcImpl() {} \/\/ Never instantiate.$/;"	f	struct:llvm::AlignmentCalcImpl
AlignmentCalcImpl	AlignOf.h	/^struct AlignmentCalcImpl {$/;"	s	namespace:llvm
Alignment_GreaterEqual_16Bytes	AlignOf.h	/^  enum { Alignment_GreaterEqual_16Bytes = Alignment >= 16 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon5
Alignment_GreaterEqual_2Bytes	AlignOf.h	/^  enum { Alignment_GreaterEqual_2Bytes = Alignment >= 2 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon2
Alignment_GreaterEqual_4Bytes	AlignOf.h	/^  enum { Alignment_GreaterEqual_4Bytes = Alignment >= 4 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon3
Alignment_GreaterEqual_8Bytes	AlignOf.h	/^  enum { Alignment_GreaterEqual_8Bytes = Alignment >= 8 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon4
Alignment_LessEqual_16Bytes	AlignOf.h	/^  enum { Alignment_LessEqual_16Bytes = Alignment <= 16 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon9
Alignment_LessEqual_2Bytes	AlignOf.h	/^  enum { Alignment_LessEqual_2Bytes = Alignment <= 2 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon6
Alignment_LessEqual_4Bytes	AlignOf.h	/^  enum { Alignment_LessEqual_4Bytes = Alignment <= 4 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon7
Alignment_LessEqual_8Bytes	AlignOf.h	/^  enum { Alignment_LessEqual_8Bytes = Alignment <= 8 ? 1 : 0 };$/;"	e	enum:llvm::AlignOf::__anon8
Allocate	Allocator.h	/^  T *Allocate() { return static_cast<T*>(malloc(sizeof(T))); }$/;"	f	class:llvm::MallocAllocator
Allocate	Allocator.h	/^  T *Allocate() {$/;"	f	class:llvm::BumpPtrAllocator
Allocate	Allocator.h	/^  T *Allocate(size_t Num) {$/;"	f	class:llvm::BumpPtrAllocator
Allocate	Allocator.h	/^  T *Allocate(size_t Num) {$/;"	f	class:llvm::MallocAllocator
Allocate	Allocator.h	/^  T *Allocate(size_t Num, size_t Alignment) {$/;"	f	class:llvm::BumpPtrAllocator
Allocate	Allocator.h	/^  T *Allocate(size_t num = 1) {$/;"	f	class:llvm::SpecificBumpPtrAllocator
Allocate	Allocator.h	/^  void *Allocate(size_t Size, size_t \/*Alignment*\/) { return malloc(Size); }$/;"	f	class:llvm::MallocAllocator
Allocate	Recycler.h	/^  SubClass *Allocate(AllocatorType &Allocator) {$/;"	f	class:llvm::Recycler
Allocate	Recycler.h	/^  T *Allocate(AllocatorType &Allocator) {$/;"	f	class:llvm::Recycler
Allocate	RecyclingAllocator.h	/^  SubClass *Allocate() { return Base.template Allocate<SubClass>(Allocator); }$/;"	f	class:llvm::RecyclingAllocator
Allocate	RecyclingAllocator.h	/^  T *Allocate() { return Base.Allocate(Allocator); }$/;"	f	class:llvm::RecyclingAllocator
Allocator	Allocator.h	/^  BumpPtrAllocator Allocator;$/;"	m	class:llvm::SpecificBumpPtrAllocator
Allocator	Allocator.h	/^  MallocAllocator Allocator;$/;"	m	class:llvm::MallocSlabAllocator
Allocator	Allocator.h	/^  SlabAllocator &Allocator;$/;"	m	class:llvm::BumpPtrAllocator
Allocator	RecyclingAllocator.h	/^  AllocatorType Allocator;$/;"	m	class:llvm::RecyclingAllocator
Allocator	TargetRegistry.h	/^    static AsmPrinter *Allocator(TargetMachine &TM, MCStreamer &Streamer) {$/;"	f	struct:llvm::RegisterAsmPrinter
Allocator	TargetRegistry.h	/^    static MCAsmBackend *Allocator(const Target &T, StringRef Triple,$/;"	f	struct:llvm::RegisterMCAsmBackend
Allocator	TargetRegistry.h	/^    static MCAsmInfo *Allocator(const Target &T, StringRef TT) {$/;"	f	struct:llvm::RegisterMCAsmInfo
Allocator	TargetRegistry.h	/^    static MCCodeEmitter *Allocator(const MCInstrInfo &II,$/;"	f	struct:llvm::RegisterMCCodeEmitter
Allocator	TargetRegistry.h	/^    static MCCodeGenInfo *Allocator(StringRef TT, Reloc::Model RM,$/;"	f	struct:llvm::RegisterMCCodeGenInfo
Allocator	TargetRegistry.h	/^    static MCInstrAnalysis *Allocator(const MCInstrInfo *Info) {$/;"	f	struct:llvm::RegisterMCInstrAnalysis
Allocator	TargetRegistry.h	/^    static MCInstrInfo *Allocator() {$/;"	f	struct:llvm::RegisterMCInstrInfo
Allocator	TargetRegistry.h	/^    static MCRegisterInfo *Allocator(StringRef TT) {$/;"	f	struct:llvm::RegisterMCRegInfo
Allocator	TargetRegistry.h	/^    static MCSubtargetInfo *Allocator(StringRef TT, StringRef CPU,$/;"	f	struct:llvm::RegisterMCSubtargetInfo
Allocator	TargetRegistry.h	/^    static MCTargetAsmLexer *Allocator(const Target &T,$/;"	f	struct:llvm::RegisterMCAsmLexer
Allocator	TargetRegistry.h	/^    static MCTargetAsmParser *Allocator(MCSubtargetInfo &STI, MCAsmParser &P) {$/;"	f	struct:llvm::RegisterMCAsmParser
Allocator	TargetRegistry.h	/^    static TargetMachine *Allocator(const Target &T, StringRef TT,$/;"	f	struct:llvm::RegisterTargetMachine
Anchor	YAMLParser.h	/^  StringRef Anchor;$/;"	m	class:llvm::yaml::Node
Announce	Registry.h	/^    static void Announce(const entry &E) {$/;"	f	class:llvm::Registry
Archive_FileType	PathV1.h	/^    Archive_FileType,                  \/\/\/< ar style archive file$/;"	e	enum:llvm::sys::LLVMFileType
ArgC	PrettyStackTrace.h	/^    int ArgC;$/;"	m	class:llvm::PrettyStackTraceProgram
ArgStr	CommandLine.h	/^  const char *ArgStr;     \/\/ The argument string itself (ex: "help", "o")$/;"	m	class:llvm::cl::Option
ArgStr	CommandLine.h	/^  const char *ArgStr;$/;"	m	class:llvm::cl::parser
ArgV	PrettyStackTrace.h	/^    const char *const *ArgV;$/;"	m	class:llvm::PrettyStackTraceProgram
AsmPrinterCtorFn	TargetRegistry.h	/^    AsmPrinterCtorTy AsmPrinterCtorFn;$/;"	m	class:llvm::Target
AsmPrinterCtorTy	TargetRegistry.h	/^    typedef AsmPrinter *(*AsmPrinterCtorTy)(TargetMachine &TM,$/;"	t	class:llvm::Target
AsmStreamerCtorFn	TargetRegistry.h	/^    AsmStreamerCtorTy AsmStreamerCtorFn;$/;"	m	class:llvm::Target
AsmStreamerCtorTy	TargetRegistry.h	/^    typedef MCStreamer *(*AsmStreamerCtorTy)(MCContext &Ctx,$/;"	t	class:llvm::Target
Assert	ValueHandle.h	/^    Assert,$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
AssertingVH	ValueHandle.h	/^  AssertingVH() : ThePtr(0) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	ValueHandle.h	/^  AssertingVH() : ValueHandleBase(Assert) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	ValueHandle.h	/^  AssertingVH(ValueTy *P) : ThePtr(P) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	ValueHandle.h	/^  AssertingVH(ValueTy *P) : ValueHandleBase(Assert, GetAsValue(P)) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	ValueHandle.h	/^  AssertingVH(const AssertingVH &RHS) : ValueHandleBase(Assert, RHS) {}$/;"	f	class:llvm::AssertingVH
AssertingVH	ValueHandle.h	/^class AssertingVH$/;"	c	namespace:llvm
Auxiliary	COFF.h	/^  union Auxiliary {$/;"	u	namespace:llvm::COFF
AuxiliaryFile	COFF.h	/^  struct AuxiliaryFile {$/;"	s	namespace:llvm::COFF
AuxiliaryFunctionDefinition	COFF.h	/^  struct AuxiliaryFunctionDefinition {$/;"	s	namespace:llvm::COFF
AuxiliarySectionDefinition	COFF.h	/^  struct AuxiliarySectionDefinition {$/;"	s	namespace:llvm::COFF
AuxiliaryWeakExternal	COFF.h	/^  struct AuxiliaryWeakExternal {$/;"	s	namespace:llvm::COFF
AuxiliarybfAndefSymbol	COFF.h	/^  struct AuxiliarybfAndefSymbol {$/;"	s	namespace:llvm::COFF
BB	InstIterator.h	/^  _BB_i_t BB;       \/\/ BasicBlocksType::iterator$/;"	m	class:llvm::InstIterator
BBIty	InstIterator.h	/^  typedef _BB_i_t BBIty;$/;"	t	class:llvm::InstIterator
BBs	InstIterator.h	/^  _BB_t  *BBs;      \/\/ BasicBlocksType$/;"	m	class:llvm::InstIterator
BBty	InstIterator.h	/^  typedef _BB_t   BBty;$/;"	t	class:llvm::InstIterator
BI	InstIterator.h	/^  _BI_t   BI;       \/\/ BasicBlock::iterator$/;"	m	class:llvm::InstIterator
BIty	InstIterator.h	/^  typedef _BI_t   BIty;$/;"	t	class:llvm::InstIterator
BLACK	raw_ostream.h	/^    BLACK=0,$/;"	e	enum:llvm::raw_ostream::Colors
BLUE	raw_ostream.h	/^    BLUE,$/;"	e	enum:llvm::raw_ostream::Colors
BOU_FALSE	CommandLine.h	/^enum boolOrDefault { BOU_UNSET, BOU_TRUE, BOU_FALSE };$/;"	e	enum:llvm::cl::boolOrDefault
BOU_TRUE	CommandLine.h	/^enum boolOrDefault { BOU_UNSET, BOU_TRUE, BOU_FALSE };$/;"	e	enum:llvm::cl::boolOrDefault
BOU_UNSET	CommandLine.h	/^enum boolOrDefault { BOU_UNSET, BOU_TRUE, BOU_FALSE };$/;"	e	enum:llvm::cl::boolOrDefault
Banner	circular_raw_ostream.h	/^    const char *Banner;$/;"	m	class:llvm::circular_raw_ostream
Base	CallSite.h	/^                       CallInst, InvokeInst, User::op_iterator> Base;$/;"	t	class:llvm::CallSite
Base	CallSite.h	/^  typedef CallSiteBase<> Base;$/;"	t	class:llvm::ImmutableCallSite
Base	RecyclingAllocator.h	/^  Recycler<T, Size, Align> Base;$/;"	m	class:llvm::RecyclingAllocator
Base	YAMLParser.h	/^  BaseT *Base;$/;"	m	class:llvm::yaml::basic_collection_iterator
BaseOfCode	COFF.h	/^    uint32_t BaseOfCode; \/\/ RVA$/;"	m	struct:llvm::COFF::PEHeader
BaseOfData	COFF.h	/^    uint32_t BaseOfData; \/\/ RVA$/;"	m	struct:llvm::COFF::PEHeader
BaseRelocationType	COFF.h	/^  enum BaseRelocationType {$/;"	g	namespace:llvm::COFF
BinOp2_match	PatternMatch.h	/^  BinOp2_match(const LHS_t &LHS, const RHS_t &RHS) : L(LHS), R(RHS) {}$/;"	f	struct:llvm::PatternMatch::BinOp2_match
BinOp2_match	PatternMatch.h	/^struct BinOp2_match {$/;"	s	namespace:llvm::PatternMatch
BinaryOp_match	PatternMatch.h	/^  BinaryOp_match(const LHS_t &LHS, const RHS_t &RHS) : L(LHS), R(RHS) {}$/;"	f	struct:llvm::PatternMatch::BinaryOp_match
BinaryOp_match	PatternMatch.h	/^struct BinaryOp_match {$/;"	s	namespace:llvm::PatternMatch
BindImmediateMask	MachO.h	/^      BindImmediateMask                         = 0x0Fu, \/\/ BIND_IMMEDIATE_MASK$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeAddAddressULEB	MachO.h	/^      BindOpcodeAddAddressULEB                  = 0x80u, \/\/ BIND_OPCODE_ADD_ADDR_ULEB$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeDoBind	MachO.h	/^      BindOpcodeDoBind                          = 0x90u, \/\/ BIND_OPCODE_DO_BIND$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeDoBindAddAddressImmediateScaled	MachO.h	/^      BindOpcodeDoBindAddAddressImmediateScaled = 0xB0u, \/\/ BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeDoBindAddAddressULEB	MachO.h	/^      BindOpcodeDoBindAddAddressULEB            = 0xA0u, \/\/ BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeDoBindULEBTimesSkippingULEB	MachO.h	/^      BindOpcodeDoBindULEBTimesSkippingULEB     = 0xC0u, \/\/ BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeDone	MachO.h	/^      BindOpcodeDone                            = 0x00u, \/\/ BIND_OPCODE_DONE$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeMask	MachO.h	/^      BindOpcodeMask                            = 0xF0u, \/\/ BIND_OPCODE_MASK$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeSetAppendSLEB	MachO.h	/^      BindOpcodeSetAppendSLEB                   = 0x60u, \/\/ BIND_OPCODE_SET_ADDEND_SLEB$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeSetDylibOrdinalImmediate	MachO.h	/^      BindOpcodeSetDylibOrdinalImmediate        = 0x10u, \/\/ BIND_OPCODE_SET_DYLIB_ORDINAL_IMM$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeSetDylibOrdinalULEB	MachO.h	/^      BindOpcodeSetDylibOrdinalULEB             = 0x20u, \/\/ BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeSetDylibSpecialImmediate	MachO.h	/^      BindOpcodeSetDylibSpecialImmediate        = 0x30u, \/\/ BIND_OPCODE_SET_DYLIB_SPECIAL_IMM$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeSetSegmentAndOffsetULEB	MachO.h	/^      BindOpcodeSetSegmentAndOffsetULEB         = 0x70u, \/\/ BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeSetSymbolTrailingFlagsImmediate	MachO.h	/^      BindOpcodeSetSymbolTrailingFlagsImmediate = 0x40u, \/\/ BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM$/;"	e	enum:llvm::MachO::__anon49
BindOpcodeSetTypeImmediate	MachO.h	/^      BindOpcodeSetTypeImmediate                = 0x50u, \/\/ BIND_OPCODE_SET_TYPE_IMM$/;"	e	enum:llvm::MachO::__anon49
BindSpecialDylibFlatLookup	MachO.h	/^      BindSpecialDylibFlatLookup      = -2u, \/\/ BIND_SPECIAL_DYLIB_FLAT_LOOKUP$/;"	e	enum:llvm::MachO::__anon49
BindSpecialDylibMainExecutable	MachO.h	/^      BindSpecialDylibMainExecutable  = -1u, \/\/ BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE$/;"	e	enum:llvm::MachO::__anon49
BindSpecialDylibSelf	MachO.h	/^      BindSpecialDylibSelf            =  0u, \/\/ BIND_SPECIAL_DYLIB_SELF$/;"	e	enum:llvm::MachO::__anon49
BindSymbolFlagsNonWeakDefinition	MachO.h	/^      BindSymbolFlagsNonWeakDefinition  = 0x8u, \/\/ BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION$/;"	e	enum:llvm::MachO::__anon49
BindSymbolFlagsWeakImport	MachO.h	/^      BindSymbolFlagsWeakImport         = 0x1u, \/\/ BIND_SYMBOL_FLAGS_WEAK_IMPORT$/;"	e	enum:llvm::MachO::__anon49
BindTypePointer	MachO.h	/^      BindTypePointer           = 1u, \/\/ BIND_TYPE_POINTER$/;"	e	enum:llvm::MachO::__anon49
BindTypeTextAbsolute32	MachO.h	/^      BindTypeTextAbsolute32    = 2u, \/\/ BIND_TYPE_TEXT_ABSOLUTE32$/;"	e	enum:llvm::MachO::__anon49
BindTypeTextPCRelative32	MachO.h	/^      BindTypeTextPCRelative32  = 3u, \/\/ BIND_TYPE_TEXT_PCREL32$/;"	e	enum:llvm::MachO::__anon49
Bit	CommandLine.h	/^  static unsigned Bit(const T &V) {$/;"	f	class:llvm::cl::bits_storage
Bitcode_FileType	PathV1.h	/^    Bitcode_FileType,                  \/\/\/< Bitcode file$/;"	e	enum:llvm::sys::LLVMFileType
Bits	CommandLine.h	/^  unsigned Bits;   \/\/ Where to store the bits...$/;"	m	class:llvm::cl::bits_storage
BitsToDouble	MathExtras.h	/^inline double BitsToDouble(uint64_t Bits) {$/;"	f	namespace:llvm
BitsToFloat	MathExtras.h	/^inline float BitsToFloat(uint32_t Bits) {$/;"	f	namespace:llvm
BlockFrequency	BlockFrequency.h	/^  BlockFrequency(uint64_t Freq = 0) : Frequency(Freq) { }$/;"	f	class:llvm::BlockFrequency
BlockFrequency	BlockFrequency.h	/^class BlockFrequency {$/;"	c	namespace:llvm
BlockToPredCountMap	PredIteratorCache.h	/^    DenseMap<BasicBlock*, unsigned> BlockToPredCountMap;$/;"	m	class:llvm::PredIteratorCache
BlockToPredsMap	PredIteratorCache.h	/^    DenseMap<BasicBlock*, BasicBlock**> BlockToPredsMap;$/;"	m	class:llvm::PredIteratorCache
Blocks	GCOV.h	/^  SmallVector<GCOVBlock *, 16> Blocks;$/;"	m	class:llvm::GCOVFunction
BranchProbability	BranchProbability.h	/^  BranchProbability(uint32_t n, uint32_t d) : N(n), D(d) {$/;"	f	class:llvm::BranchProbability
BranchProbability	BranchProbability.h	/^class BranchProbability {$/;"	c	namespace:llvm
Buffer	GCOV.h	/^  MemoryBuffer *Buffer;$/;"	m	class:llvm::GCOVBuffer
Buffer	SourceMgr.h	/^    MemoryBuffer *Buffer;$/;"	m	struct:llvm::SourceMgr::SrcBuffer
BufferArray	circular_raw_ostream.h	/^    char *BufferArray;$/;"	m	class:llvm::circular_raw_ostream
BufferEnd	FileOutputBuffer.h	/^  uint8_t            *BufferEnd;$/;"	m	class:llvm::FileOutputBuffer
BufferEnd	MemoryBuffer.h	/^  const char *BufferEnd;   \/\/ End of the buffer.$/;"	m	class:llvm::MemoryBuffer
BufferKind	MemoryBuffer.h	/^  enum BufferKind {$/;"	g	class:llvm::MemoryBuffer
BufferKind	raw_ostream.h	/^  enum BufferKind {$/;"	g	class:llvm::raw_ostream
BufferMode	raw_ostream.h	/^  } BufferMode;$/;"	m	class:llvm::raw_ostream	typeref:enum:llvm::raw_ostream::BufferKind
BufferSize	circular_raw_ostream.h	/^    size_t BufferSize;$/;"	m	class:llvm::circular_raw_ostream
BufferStart	FileOutputBuffer.h	/^  uint8_t            *BufferStart;$/;"	m	class:llvm::FileOutputBuffer
BufferStart	MemoryBuffer.h	/^  const char *BufferStart; \/\/ Start of the buffer.$/;"	m	class:llvm::MemoryBuffer
Buffers	SourceMgr.h	/^  std::vector<SrcBuffer> Buffers;$/;"	m	class:llvm::SourceMgr
BumpPtrAllocator	Allocator.h	/^class BumpPtrAllocator {$/;"	c	namespace:llvm
ByteSwap_16	MathExtras.h	/^inline uint16_t ByteSwap_16(uint16_t Value) {$/;"	f	namespace:llvm
ByteSwap_32	MathExtras.h	/^inline uint32_t ByteSwap_32(uint32_t Value) {$/;"	f	namespace:llvm
ByteSwap_64	MathExtras.h	/^inline uint64_t ByteSwap_64(uint64_t Value) {$/;"	f	namespace:llvm
Bytes	StreamableMemoryObject.h	/^  mutable std::vector<unsigned char> Bytes;$/;"	m	class:llvm::StreamingMemoryObject
BytesAllocated	Allocator.h	/^  size_t BytesAllocated;$/;"	m	class:llvm::BumpPtrAllocator
BytesRead	StreamableMemoryObject.h	/^  mutable size_t BytesRead;   \/\/ Bytes read from stream$/;"	m	class:llvm::StreamingMemoryObject
BytesSkipped	StreamableMemoryObject.h	/^  size_t BytesSkipped;\/\/ Bytes skipped at start of stream (e.g. wrapper\/header)$/;"	m	class:llvm::StreamingMemoryObject
C	PatternMatch.h	/^  Cond_t C;$/;"	m	struct:llvm::PatternMatch::SelectClass_match
CALLSITE_DELEGATE_GETTER	CallSite.h	156;"	d
CALLSITE_DELEGATE_GETTER	CallSite.h	242;"	d
CALLSITE_DELEGATE_SETTER	CallSite.h	162;"	d
CALLSITE_DELEGATE_SETTER	CallSite.h	243;"	d
CIRCO	GraphWriter.h	/^      CIRCO$/;"	e	enum:llvm::GraphProgram::Name
COFF	COFF.h	/^namespace COFF {$/;"	n	namespace:llvm
COFFHeader	COFF.h	/^    header COFFHeader;$/;"	m	struct:llvm::COFF::PEHeader
COFF_FileType	PathV1.h	/^    COFF_FileType                      \/\/\/< COFF object file or lib$/;"	e	enum:llvm::sys::LLVMFileType
COMDATType	COFF.h	/^  enum COMDATType {$/;"	g	namespace:llvm::COFF
CONSTANTRANGESSET_H_	IntegersSubset.h	19;"	d
CPUArchABI64	MachO.h	/^      CPUArchABI64 = 0x01000000,  \/\/ 64 bit ABI$/;"	e	enum:llvm::MachO::__anon50
CPUArchMask	MachO.h	/^      CPUArchMask = 0xff000000,   \/\/ Mask for architecture bits$/;"	e	enum:llvm::MachO::__anon50
CPUSubType_ARM_ALL	MachO.h	/^      CPUSubType_ARM_ALL     = 0,$/;"	e	enum:llvm::MachO::__anon50
CPUSubType_ARM_V4T	MachO.h	/^      CPUSubType_ARM_V4T     = 5,$/;"	e	enum:llvm::MachO::__anon50
CPUSubType_ARM_V5	MachO.h	/^      CPUSubType_ARM_V5      = 7,$/;"	e	enum:llvm::MachO::__anon50
CPUSubType_ARM_V6	MachO.h	/^      CPUSubType_ARM_V6      = 6,$/;"	e	enum:llvm::MachO::__anon50
CPUSubType_ARM_V7	MachO.h	/^      CPUSubType_ARM_V7      = 9,$/;"	e	enum:llvm::MachO::__anon50
CPUSubType_I386_ALL	MachO.h	/^      CPUSubType_I386_ALL    = 3,$/;"	e	enum:llvm::MachO::__anon50
CPUSubType_POWERPC_ALL	MachO.h	/^      CPUSubType_POWERPC_ALL = 0,$/;"	e	enum:llvm::MachO::__anon50
CPUSubType_SPARC_ALL	MachO.h	/^      CPUSubType_SPARC_ALL   = 0$/;"	e	enum:llvm::MachO::__anon50
CPUSubType_X86_64_ALL	MachO.h	/^      CPUSubType_X86_64_ALL  = 3,$/;"	e	enum:llvm::MachO::__anon50
CPUTypeARM	MachO.h	/^      CPUTypeARM       = 12,$/;"	e	enum:llvm::MachO::__anon50
CPUTypeI386	MachO.h	/^      CPUTypeI386      = 7,$/;"	e	enum:llvm::MachO::__anon50
CPUTypePowerPC	MachO.h	/^      CPUTypePowerPC   = 18,$/;"	e	enum:llvm::MachO::__anon50
CPUTypePowerPC64	MachO.h	/^      CPUTypePowerPC64 = CPUTypePowerPC | CPUArchABI64,$/;"	e	enum:llvm::MachO::__anon50
CPUTypeSPARC	MachO.h	/^      CPUTypeSPARC     = 14,$/;"	e	enum:llvm::MachO::__anon50
CPUTypeX86_64	MachO.h	/^      CPUTypeX86_64    = CPUTypeI386 | CPUArchABI64,$/;"	e	enum:llvm::MachO::__anon50
CRSBUILDER_H_	IntegersSubsetMapping.h	21;"	d
CRSMap	IntegersSubsetMapping.h	/^  typedef std::map<SuccessorClass*, RangesCollection > CRSMap;$/;"	t	class:llvm::IntegersSubsetMapping
CRSMapIt	IntegersSubsetMapping.h	/^  typedef typename CRSMap::iterator CRSMapIt;$/;"	t	class:llvm::IntegersSubsetMapping
CS	Solaris.h	20;"	d
CYAN	raw_ostream.h	/^    CYAN,$/;"	e	enum:llvm::raw_ostream::Colors
C_Invalid	COFF.h	/^    C_Invalid = 0,$/;"	e	enum:llvm::COFF::Characteristics
CallSite	CallSite.h	/^  CallSite() {}$/;"	f	class:llvm::CallSite
CallSite	CallSite.h	/^  CallSite(Base B) : Base(B) {}$/;"	f	class:llvm::CallSite
CallSite	CallSite.h	/^  CallSite(CallInst *CI) : Base(CI) {}$/;"	f	class:llvm::CallSite
CallSite	CallSite.h	/^  CallSite(Instruction *II) : Base(II) {}$/;"	f	class:llvm::CallSite
CallSite	CallSite.h	/^  CallSite(InvokeInst *II) : Base(II) {}$/;"	f	class:llvm::CallSite
CallSite	CallSite.h	/^  CallSite(Value* V) : Base(V) {}$/;"	f	class:llvm::CallSite
CallSite	CallSite.h	/^class CallSite : public CallSiteBase<Function, Value, User, Instruction,$/;"	c	namespace:llvm
CallSiteBase	CallSite.h	/^  CallSiteBase() : I(0, false) {}$/;"	f	class:llvm::CallSiteBase
CallSiteBase	CallSite.h	/^  CallSiteBase(CallTy *CI) : I(CI, true) { assert(CI); }$/;"	f	class:llvm::CallSiteBase
CallSiteBase	CallSite.h	/^  CallSiteBase(InvokeTy *II) : I(II, false) { assert(II); }$/;"	f	class:llvm::CallSiteBase
CallSiteBase	CallSite.h	/^  CallSiteBase(ValTy *II) { *this = get(II); }$/;"	f	class:llvm::CallSiteBase
CallSiteBase	CallSite.h	/^class CallSiteBase {$/;"	c	namespace:llvm
Callback	ValueHandle.h	/^    Callback,$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
CallbackVH	ValueHandle.h	/^  CallbackVH() : ValueHandleBase(Callback) {}$/;"	f	class:llvm::CallbackVH
CallbackVH	ValueHandle.h	/^  CallbackVH(Value *P) : ValueHandleBase(Callback, P) {}$/;"	f	class:llvm::CallbackVH
CallbackVH	ValueHandle.h	/^  CallbackVH(const CallbackVH &RHS)$/;"	f	class:llvm::CallbackVH
CallbackVH	ValueHandle.h	/^class CallbackVH : public ValueHandleBase {$/;"	c	namespace:llvm
Case	IntegersSubsetMapping.h	/^  typedef std::pair<SuccessorClass*, IntegersSubsetTy> Case;$/;"	t	class:llvm::IntegersSubsetMapping
CaseItemConstIt	IntegersSubsetMapping.h	/^  typedef typename CaseItems::const_iterator CaseItemConstIt;$/;"	t	class:llvm::IntegersSubsetMapping
CaseItemIt	IntegersSubsetMapping.h	/^  typedef typename CaseItems::iterator CaseItemIt;$/;"	t	class:llvm::IntegersSubsetMapping
CaseItems	IntegersSubsetMapping.h	/^  typedef std::list<Cluster> CaseItems;$/;"	t	class:llvm::IntegersSubsetMapping
Cases	IntegersSubsetMapping.h	/^  typedef std::list<Case> Cases;$/;"	t	class:llvm::IntegersSubsetMapping
CasesIt	IntegersSubsetMapping.h	/^  typedef typename Cases::iterator CasesIt;$/;"	t	class:llvm::IntegersSubsetMapping
CastClass_match	PatternMatch.h	/^  CastClass_match(const Op_t &OpMatch) : Op(OpMatch) {}$/;"	f	struct:llvm::PatternMatch::CastClass_match
CastClass_match	PatternMatch.h	/^struct CastClass_match {$/;"	s	namespace:llvm::PatternMatch
Characteristics	COFF.h	/^    uint16_t Characteristics;$/;"	m	struct:llvm::COFF::header
Characteristics	COFF.h	/^    uint32_t Characteristics;$/;"	m	struct:llvm::COFF::AuxiliaryWeakExternal
Characteristics	COFF.h	/^    uint32_t Characteristics;$/;"	m	struct:llvm::COFF::section
Characteristics	COFF.h	/^  enum Characteristics {$/;"	g	namespace:llvm::COFF
CheckSum	COFF.h	/^    uint32_t CheckSum;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
CheckSum	COFF.h	/^    uint32_t CheckSum;$/;"	m	struct:llvm::COFF::PEHeader
CheckValidity	ValueHandle.h	/^  void CheckValidity() const {$/;"	f	class:llvm::TrackingVH
Checksum	COFF.h	/^    uint16_t Checksum;$/;"	m	struct:llvm::COFF::DOSHeader
ChildIteratorType	CFG.h	/^  typedef const_pred_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CFG.h	/^  typedef pred_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CFG.h	/^  typedef succ_const_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	CFG.h	/^  typedef succ_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	DataFlow.h	/^  typedef User::const_op_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	DataFlow.h	/^  typedef User::op_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	DataFlow.h	/^  typedef Value::const_use_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
ChildIteratorType	DataFlow.h	/^  typedef Value::use_iterator ChildIteratorType;$/;"	t	struct:llvm::GraphTraits
CleanupInstaller	ToolOutputFile.h	/^  class CleanupInstaller {$/;"	c	class:llvm::tool_output_file
Cluster	IntegersSubsetMapping.h	/^  typedef std::pair<RangeEx, SuccessorClass*> Cluster;$/;"	t	class:llvm::IntegersSubsetMapping
ClustersCmp	IntegersSubsetMapping.h	/^  struct ClustersCmp {$/;"	s	class:llvm::IntegersSubsetMapping
CmpClass_match	PatternMatch.h	/^  CmpClass_match(PredicateTy &Pred, const LHS_t &LHS, const RHS_t &RHS)$/;"	f	struct:llvm::PatternMatch::CmpClass_match
CmpClass_match	PatternMatch.h	/^struct CmpClass_match {$/;"	s	namespace:llvm::PatternMatch
CodeGenOpt	CodeGen.h	/^  namespace CodeGenOpt {$/;"	n	namespace:llvm
CodeModel	CodeGen.h	/^  namespace CodeModel {$/;"	n	namespace:llvm
Colors	raw_ostream.h	/^  enum Colors {$/;"	g	class:llvm::raw_ostream
ColumnNo	SourceMgr.h	/^  int LineNo, ColumnNo;$/;"	m	class:llvm::SMDiagnostic
ColumnScanned	FormattedStream.h	/^    unsigned ColumnScanned;$/;"	m	class:llvm::formatted_raw_ostream
CommaSeparated	CommandLine.h	/^  CommaSeparated     = 0x01,  \/\/ Should this cl::list split between commas?$/;"	e	enum:llvm::cl::MiscFlags
Component	PathV2.h	/^  StringRef Component; \/\/\/< The current component. Not necessarily in Path.$/;"	m	class:llvm::sys::path::const_iterator
Cond	PatternMatch.h	/^  Cond_t Cond;$/;"	m	struct:llvm::PatternMatch::brc_match
ConstantFolder	ConstantFolder.h	/^  explicit ConstantFolder() {}$/;"	f	class:llvm::ConstantFolder
ConstantFolder	ConstantFolder.h	/^class ConstantFolder {$/;"	c	namespace:llvm
ConstantIntVal	IntegersSubset.h	/^  ConstantInt *ConstantIntVal;$/;"	m	class:llvm::IntItem
ConstantRange	ConstantRange.h	/^class ConstantRange {$/;"	c	namespace:llvm
ConsumeAfter	CommandLine.h	/^  ConsumeAfter    = 0x04$/;"	e	enum:llvm::cl::NumOccurrencesFlag
CountLeadingOnes_32	MathExtras.h	/^inline unsigned CountLeadingOnes_32(uint32_t Value) {$/;"	f	namespace:llvm
CountLeadingOnes_64	MathExtras.h	/^inline unsigned CountLeadingOnes_64(uint64_t Value) {$/;"	f	namespace:llvm
CountLeadingZeros_32	MathExtras.h	/^inline unsigned CountLeadingZeros_32(uint32_t Value) {$/;"	f	namespace:llvm
CountLeadingZeros_64	MathExtras.h	/^inline unsigned CountLeadingZeros_64(uint64_t Value) {$/;"	f	namespace:llvm
CountPopulation_32	MathExtras.h	/^inline unsigned CountPopulation_32(uint32_t Value) {$/;"	f	namespace:llvm
CountPopulation_64	MathExtras.h	/^inline unsigned CountPopulation_64(uint64_t Value) {$/;"	f	namespace:llvm
CountTrailingOnes_32	MathExtras.h	/^inline unsigned CountTrailingOnes_32(uint32_t Value) {$/;"	f	namespace:llvm
CountTrailingOnes_64	MathExtras.h	/^inline unsigned CountTrailingOnes_64(uint64_t Value) {$/;"	f	namespace:llvm
CountTrailingZeros_32	MathExtras.h	/^inline unsigned CountTrailingZeros_32(uint32_t Value) {$/;"	f	namespace:llvm
CountTrailingZeros_64	MathExtras.h	/^inline unsigned CountTrailingZeros_64(uint64_t Value) {$/;"	f	namespace:llvm
Counter	GCOV.h	/^  uint64_t Counter;$/;"	m	class:llvm::GCOVBlock
CrashRecoveryContext	CrashRecoveryContext.h	/^  CrashRecoveryContext() : Impl(0), head(0) {}$/;"	f	class:llvm::CrashRecoveryContext
CrashRecoveryContext	CrashRecoveryContext.h	/^class CrashRecoveryContext {$/;"	c	namespace:llvm
CrashRecoveryContextCleanup	CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup(CrashRecoveryContext *context)$/;"	f	class:llvm::CrashRecoveryContextCleanup
CrashRecoveryContextCleanup	CrashRecoveryContext.h	/^class CrashRecoveryContextCleanup {$/;"	c	namespace:llvm
CrashRecoveryContextCleanupBase	CrashRecoveryContext.h	/^  CrashRecoveryContextCleanupBase(CrashRecoveryContext *context, T* resource)$/;"	f	class:llvm::CrashRecoveryContextCleanupBase
CrashRecoveryContextCleanupBase	CrashRecoveryContext.h	/^class CrashRecoveryContextCleanupBase : public CrashRecoveryContextCleanup {$/;"	c	namespace:llvm
CrashRecoveryContextCleanupRegistrar	CrashRecoveryContext.h	/^  CrashRecoveryContextCleanupRegistrar(T *x)$/;"	f	class:llvm::CrashRecoveryContextCleanupRegistrar
CrashRecoveryContextCleanupRegistrar	CrashRecoveryContext.h	/^class CrashRecoveryContextCleanupRegistrar {$/;"	c	namespace:llvm
CrashRecoveryContextDeleteCleanup	CrashRecoveryContext.h	/^  CrashRecoveryContextDeleteCleanup(CrashRecoveryContext *context, T *resource)$/;"	f	class:llvm::CrashRecoveryContextDeleteCleanup
CrashRecoveryContextDeleteCleanup	CrashRecoveryContext.h	/^class CrashRecoveryContextDeleteCleanup : public$/;"	c	namespace:llvm
CrashRecoveryContextDestructorCleanup	CrashRecoveryContext.h	/^  CrashRecoveryContextDestructorCleanup(CrashRecoveryContext *context,$/;"	f	class:llvm::CrashRecoveryContextDestructorCleanup
CrashRecoveryContextDestructorCleanup	CrashRecoveryContext.h	/^class CrashRecoveryContextDestructorCleanup : public$/;"	c	namespace:llvm
CrashRecoveryContextReleaseRefCleanup	CrashRecoveryContext.h	/^  CrashRecoveryContextReleaseRefCleanup(CrashRecoveryContext *context, $/;"	f	class:llvm::CrashRecoveryContextReleaseRefCleanup
CrashRecoveryContextReleaseRefCleanup	CrashRecoveryContext.h	/^class CrashRecoveryContextReleaseRefCleanup : public$/;"	c	namespace:llvm
CreateAShr	ConstantFolder.h	/^  Constant *CreateAShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateAShr	NoFolder.h	/^  Instruction *CreateAShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateAShr	TargetFolder.h	/^  Constant *CreateAShr(Constant *LHS, Constant *RHS, bool isExact = false)const{$/;"	f	class:llvm::TargetFolder
CreateAdd	ConstantFolder.h	/^  Constant *CreateAdd(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateAdd	NoFolder.h	/^  Instruction *CreateAdd(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateAdd	TargetFolder.h	/^  Constant *CreateAdd(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::TargetFolder
CreateAnd	ConstantFolder.h	/^  Constant *CreateAnd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateAnd	NoFolder.h	/^  Instruction *CreateAnd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateAnd	TargetFolder.h	/^  Constant *CreateAnd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateBinOp	ConstantFolder.h	/^  Constant *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::ConstantFolder
CreateBinOp	NoFolder.h	/^  Instruction *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::NoFolder
CreateBinOp	TargetFolder.h	/^  Constant *CreateBinOp(Instruction::BinaryOps Opc,$/;"	f	class:llvm::TargetFolder
CreateBitCast	ConstantFolder.h	/^  Constant *CreateBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateBitCast	NoFolder.h	/^  Instruction *CreateBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateBitCast	TargetFolder.h	/^  Constant *CreateBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateCast	ConstantFolder.h	/^  Constant *CreateCast(Instruction::CastOps Op, Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateCast	NoFolder.h	/^  Instruction *CreateCast(Instruction::CastOps Op, Constant *C,$/;"	f	class:llvm::NoFolder
CreateCast	TargetFolder.h	/^  Constant *CreateCast(Instruction::CastOps Op, Constant *C,$/;"	f	class:llvm::TargetFolder
CreateExactSDiv	NoFolder.h	/^  Instruction *CreateExactSDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateExactUDiv	NoFolder.h	/^  Instruction *CreateExactUDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateExtractElement	ConstantFolder.h	/^  Constant *CreateExtractElement(Constant *Vec, Constant *Idx) const {$/;"	f	class:llvm::ConstantFolder
CreateExtractElement	NoFolder.h	/^  Instruction *CreateExtractElement(Constant *Vec, Constant *Idx) const {$/;"	f	class:llvm::NoFolder
CreateExtractElement	TargetFolder.h	/^  Constant *CreateExtractElement(Constant *Vec, Constant *Idx) const {$/;"	f	class:llvm::TargetFolder
CreateExtractValue	ConstantFolder.h	/^  Constant *CreateExtractValue(Constant *Agg,$/;"	f	class:llvm::ConstantFolder
CreateExtractValue	NoFolder.h	/^  Instruction *CreateExtractValue(Constant *Agg,$/;"	f	class:llvm::NoFolder
CreateExtractValue	TargetFolder.h	/^  Constant *CreateExtractValue(Constant *Agg,$/;"	f	class:llvm::TargetFolder
CreateFAdd	ConstantFolder.h	/^  Constant *CreateFAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFAdd	NoFolder.h	/^  Instruction *CreateFAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFAdd	TargetFolder.h	/^  Constant *CreateFAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateFCmp	ConstantFolder.h	/^  Constant *CreateFCmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::ConstantFolder
CreateFCmp	NoFolder.h	/^  Instruction *CreateFCmp(CmpInst::Predicate P,$/;"	f	class:llvm::NoFolder
CreateFCmp	TargetFolder.h	/^  Constant *CreateFCmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::TargetFolder
CreateFDiv	ConstantFolder.h	/^  Constant *CreateFDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFDiv	NoFolder.h	/^  Instruction *CreateFDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFDiv	TargetFolder.h	/^  Constant *CreateFDiv(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateFMul	ConstantFolder.h	/^  Constant *CreateFMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFMul	NoFolder.h	/^  Instruction *CreateFMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFMul	TargetFolder.h	/^  Constant *CreateFMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateFNeg	ConstantFolder.h	/^  Constant *CreateFNeg(Constant *C) const {$/;"	f	class:llvm::ConstantFolder
CreateFNeg	NoFolder.h	/^  Instruction *CreateFNeg(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateFNeg	TargetFolder.h	/^  Constant *CreateFNeg(Constant *C) const {$/;"	f	class:llvm::TargetFolder
CreateFPCast	ConstantFolder.h	/^  Constant *CreateFPCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateFPCast	NoFolder.h	/^  Instruction *CreateFPCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateFPCast	TargetFolder.h	/^  Constant *CreateFPCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateFRem	ConstantFolder.h	/^  Constant *CreateFRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFRem	NoFolder.h	/^  Instruction *CreateFRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFRem	TargetFolder.h	/^  Constant *CreateFRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateFSub	ConstantFolder.h	/^  Constant *CreateFSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateFSub	NoFolder.h	/^  Instruction *CreateFSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateFSub	TargetFolder.h	/^  Constant *CreateFSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateGetElementPtr	ConstantFolder.h	/^  Constant *CreateGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::ConstantFolder
CreateGetElementPtr	ConstantFolder.h	/^  Constant *CreateGetElementPtr(Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateGetElementPtr	NoFolder.h	/^  Constant *CreateGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::NoFolder
CreateGetElementPtr	NoFolder.h	/^  Constant *CreateGetElementPtr(Constant *C,$/;"	f	class:llvm::NoFolder
CreateGetElementPtr	NoFolder.h	/^  Instruction *CreateGetElementPtr(Constant *C,$/;"	f	class:llvm::NoFolder
CreateGetElementPtr	TargetFolder.h	/^  Constant *CreateGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::TargetFolder
CreateGetElementPtr	TargetFolder.h	/^  Constant *CreateGetElementPtr(Constant *C,$/;"	f	class:llvm::TargetFolder
CreateICmp	ConstantFolder.h	/^  Constant *CreateICmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::ConstantFolder
CreateICmp	NoFolder.h	/^  Instruction *CreateICmp(CmpInst::Predicate P,$/;"	f	class:llvm::NoFolder
CreateICmp	TargetFolder.h	/^  Constant *CreateICmp(CmpInst::Predicate P, Constant *LHS,$/;"	f	class:llvm::TargetFolder
CreateInBoundsGetElementPtr	ConstantFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::ConstantFolder
CreateInBoundsGetElementPtr	ConstantFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateInBoundsGetElementPtr	NoFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::NoFolder
CreateInBoundsGetElementPtr	NoFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C,$/;"	f	class:llvm::NoFolder
CreateInBoundsGetElementPtr	NoFolder.h	/^  Instruction *CreateInBoundsGetElementPtr(Constant *C,$/;"	f	class:llvm::NoFolder
CreateInBoundsGetElementPtr	TargetFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C, Constant *Idx) const {$/;"	f	class:llvm::TargetFolder
CreateInBoundsGetElementPtr	TargetFolder.h	/^  Constant *CreateInBoundsGetElementPtr(Constant *C,$/;"	f	class:llvm::TargetFolder
CreateInsertElement	ConstantFolder.h	/^  Constant *CreateInsertElement(Constant *Vec, Constant *NewElt,$/;"	f	class:llvm::ConstantFolder
CreateInsertElement	NoFolder.h	/^  Instruction *CreateInsertElement(Constant *Vec, Constant *NewElt,$/;"	f	class:llvm::NoFolder
CreateInsertElement	TargetFolder.h	/^  Constant *CreateInsertElement(Constant *Vec, Constant *NewElt,$/;"	f	class:llvm::TargetFolder
CreateInsertValue	ConstantFolder.h	/^  Constant *CreateInsertValue(Constant *Agg, Constant *Val,$/;"	f	class:llvm::ConstantFolder
CreateInsertValue	NoFolder.h	/^  Instruction *CreateInsertValue(Constant *Agg, Constant *Val,$/;"	f	class:llvm::NoFolder
CreateInsertValue	TargetFolder.h	/^  Constant *CreateInsertValue(Constant *Agg, Constant *Val,$/;"	f	class:llvm::TargetFolder
CreateIntCast	ConstantFolder.h	/^  Constant *CreateIntCast(Constant *C, Type *DestTy,$/;"	f	class:llvm::ConstantFolder
CreateIntCast	NoFolder.h	/^  Instruction *CreateIntCast(Constant *C, Type *DestTy,$/;"	f	class:llvm::NoFolder
CreateIntCast	TargetFolder.h	/^  Constant *CreateIntCast(Constant *C, Type *DestTy,$/;"	f	class:llvm::TargetFolder
CreateIntToPtr	ConstantFolder.h	/^  Constant *CreateIntToPtr(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateIntToPtr	NoFolder.h	/^  Instruction *CreateIntToPtr(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateIntToPtr	TargetFolder.h	/^  Constant *CreateIntToPtr(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateLShr	ConstantFolder.h	/^  Constant *CreateLShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateLShr	NoFolder.h	/^  Instruction *CreateLShr(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateLShr	TargetFolder.h	/^  Constant *CreateLShr(Constant *LHS, Constant *RHS, bool isExact = false)const{$/;"	f	class:llvm::TargetFolder
CreateMul	ConstantFolder.h	/^  Constant *CreateMul(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateMul	NoFolder.h	/^  Instruction *CreateMul(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateMul	TargetFolder.h	/^  Constant *CreateMul(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::TargetFolder
CreateNSWAdd	NoFolder.h	/^  Instruction *CreateNSWAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNSWMul	NoFolder.h	/^  Instruction *CreateNSWMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNSWNeg	NoFolder.h	/^  Instruction *CreateNSWNeg(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateNSWSub	NoFolder.h	/^  Instruction *CreateNSWSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNUWAdd	NoFolder.h	/^  Instruction *CreateNUWAdd(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNUWMul	NoFolder.h	/^  Instruction *CreateNUWMul(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNUWNeg	NoFolder.h	/^  Instruction *CreateNUWNeg(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateNUWSub	NoFolder.h	/^  Instruction *CreateNUWSub(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateNeg	ConstantFolder.h	/^  Constant *CreateNeg(Constant *C,$/;"	f	class:llvm::ConstantFolder
CreateNeg	NoFolder.h	/^  Instruction *CreateNeg(Constant *C,$/;"	f	class:llvm::NoFolder
CreateNeg	TargetFolder.h	/^  Constant *CreateNeg(Constant *C,$/;"	f	class:llvm::TargetFolder
CreateNot	ConstantFolder.h	/^  Constant *CreateNot(Constant *C) const {$/;"	f	class:llvm::ConstantFolder
CreateNot	NoFolder.h	/^  Instruction *CreateNot(Constant *C) const {$/;"	f	class:llvm::NoFolder
CreateNot	TargetFolder.h	/^  Constant *CreateNot(Constant *C) const {$/;"	f	class:llvm::TargetFolder
CreateOr	ConstantFolder.h	/^  Constant *CreateOr(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateOr	NoFolder.h	/^  Instruction *CreateOr(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateOr	TargetFolder.h	/^  Constant *CreateOr(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreatePointerCast	ConstantFolder.h	/^  Constant *CreatePointerCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreatePointerCast	NoFolder.h	/^  Instruction *CreatePointerCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreatePointerCast	TargetFolder.h	/^  Constant *CreatePointerCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreatePtrToInt	ConstantFolder.h	/^  Constant *CreatePtrToInt(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreatePtrToInt	NoFolder.h	/^  Instruction *CreatePtrToInt(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreatePtrToInt	TargetFolder.h	/^  Constant *CreatePtrToInt(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateSDiv	ConstantFolder.h	/^  Constant *CreateSDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateSDiv	NoFolder.h	/^  Instruction *CreateSDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateSDiv	TargetFolder.h	/^  Constant *CreateSDiv(Constant *LHS, Constant *RHS, bool isExact = false)const{$/;"	f	class:llvm::TargetFolder
CreateSExtOrBitCast	ConstantFolder.h	/^  Constant *CreateSExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateSExtOrBitCast	NoFolder.h	/^  Instruction *CreateSExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateSExtOrBitCast	TargetFolder.h	/^  Constant *CreateSExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateSRem	ConstantFolder.h	/^  Constant *CreateSRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateSRem	NoFolder.h	/^  Instruction *CreateSRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateSRem	TargetFolder.h	/^  Constant *CreateSRem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateSelect	ConstantFolder.h	/^  Constant *CreateSelect(Constant *C, Constant *True, Constant *False) const {$/;"	f	class:llvm::ConstantFolder
CreateSelect	NoFolder.h	/^  Instruction *CreateSelect(Constant *C,$/;"	f	class:llvm::NoFolder
CreateSelect	TargetFolder.h	/^  Constant *CreateSelect(Constant *C, Constant *True, Constant *False) const {$/;"	f	class:llvm::TargetFolder
CreateShl	ConstantFolder.h	/^  Constant *CreateShl(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateShl	NoFolder.h	/^  Instruction *CreateShl(Constant *LHS, Constant *RHS, bool HasNUW = false,$/;"	f	class:llvm::NoFolder
CreateShl	TargetFolder.h	/^  Constant *CreateShl(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::TargetFolder
CreateShuffleVector	ConstantFolder.h	/^  Constant *CreateShuffleVector(Constant *V1, Constant *V2,$/;"	f	class:llvm::ConstantFolder
CreateShuffleVector	NoFolder.h	/^  Instruction *CreateShuffleVector(Constant *V1, Constant *V2,$/;"	f	class:llvm::NoFolder
CreateShuffleVector	TargetFolder.h	/^  Constant *CreateShuffleVector(Constant *V1, Constant *V2,$/;"	f	class:llvm::TargetFolder
CreateSub	ConstantFolder.h	/^  Constant *CreateSub(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateSub	NoFolder.h	/^  Instruction *CreateSub(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateSub	TargetFolder.h	/^  Constant *CreateSub(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::TargetFolder
CreateTruncOrBitCast	ConstantFolder.h	/^  Constant *CreateTruncOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateTruncOrBitCast	NoFolder.h	/^  Instruction *CreateTruncOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateTruncOrBitCast	TargetFolder.h	/^  Constant *CreateTruncOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
CreateUDiv	ConstantFolder.h	/^  Constant *CreateUDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::ConstantFolder
CreateUDiv	NoFolder.h	/^  Instruction *CreateUDiv(Constant *LHS, Constant *RHS,$/;"	f	class:llvm::NoFolder
CreateUDiv	TargetFolder.h	/^  Constant *CreateUDiv(Constant *LHS, Constant *RHS, bool isExact = false)const{$/;"	f	class:llvm::TargetFolder
CreateURem	ConstantFolder.h	/^  Constant *CreateURem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateURem	NoFolder.h	/^  Instruction *CreateURem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateURem	TargetFolder.h	/^  Constant *CreateURem(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateXor	ConstantFolder.h	/^  Constant *CreateXor(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::ConstantFolder
CreateXor	NoFolder.h	/^  Instruction *CreateXor(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::NoFolder
CreateXor	TargetFolder.h	/^  Constant *CreateXor(Constant *LHS, Constant *RHS) const {$/;"	f	class:llvm::TargetFolder
CreateZExtOrBitCast	ConstantFolder.h	/^  Constant *CreateZExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::ConstantFolder
CreateZExtOrBitCast	NoFolder.h	/^  Instruction *CreateZExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::NoFolder
CreateZExtOrBitCast	TargetFolder.h	/^  Constant *CreateZExtOrBitCast(Constant *C, Type *DestTy) const {$/;"	f	class:llvm::TargetFolder
Ctor	Registry.h	/^    T *(*Ctor)();$/;"	m	class:llvm::SimpleRegistryEntry
CtorFn	Registry.h	/^      static T *CtorFn() { return new V(); }$/;"	f	class:llvm::Registry::Add
Cur	Registry.h	/^      const node *Cur;$/;"	m	class:llvm::Registry::iterator
Cur	circular_raw_ostream.h	/^    char *Cur;$/;"	m	class:llvm::circular_raw_ostream
CurPtr	Allocator.h	/^  char *CurPtr;$/;"	m	class:llvm::BumpPtrAllocator
CurSlab	Allocator.h	/^  MemSlab *CurSlab;$/;"	m	class:llvm::BumpPtrAllocator
CurTy	GetElementPtrTypeIterator.h	/^    Type *CurTy;$/;"	m	class:llvm::generic_gep_type_iterator
Current	TargetRegistry.h	/^      const Target *Current;$/;"	m	class:llvm::TargetRegistry::iterator
CurrentDoc	YAMLParser.h	/^  OwningPtr<Document> CurrentDoc;$/;"	m	class:llvm::yaml::Stream
CurrentEntry	FileSystem.h	/^    directory_entry CurrentEntry;$/;"	m	struct:llvm::sys::fs::detail::DirIterState
CurrentEntry	YAMLParser.h	/^  KeyValueNode *CurrentEntry;$/;"	m	class:llvm::yaml::MappingNode
CurrentEntry	YAMLParser.h	/^  Node *CurrentEntry;$/;"	m	class:llvm::yaml::SequenceNode
CurrentLSuccessor	IntegersSubsetMapping.h	/^    SuccessorClass *CurrentLSuccessor;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
CurrentRSuccessor	IntegersSubsetMapping.h	/^    SuccessorClass *CurrentRSuccessor;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Cursor	GCOV.h	/^  uint64_t Cursor;$/;"	m	class:llvm::GCOVBuffer
D	BranchProbability.h	/^  uint32_t D;$/;"	m	class:llvm::BranchProbability
DEBUG	Debug.h	97;"	d
DEBUG_TYPE	Debug.h	36;"	d
DEBUG_WITH_TYPE	Debug.h	67;"	d
DEBUG_WITH_TYPE	Debug.h	74;"	d
DEFINING_FILE_FOR	IncludeFile.h	50;"	d
DELEGATE	InstVisitor.h	278;"	d
DELEGATE	InstVisitor.h	30;"	d
DELETE_STREAM	FormattedStream.h	/^    static const bool DELETE_STREAM = true;$/;"	m	class:llvm::formatted_raw_ostream
DF_1_CONFALT	ELF.h	/^  DF_1_CONFALT    = 0x00002000, \/\/ Configuration alternative created.$/;"	e	enum:llvm::ELF::__anon43
DF_1_DIRECT	ELF.h	/^  DF_1_DIRECT     = 0x00000100, \/\/ Direct binding enabled.$/;"	e	enum:llvm::ELF::__anon43
DF_1_DISPRELDNE	ELF.h	/^  DF_1_DISPRELDNE = 0x00008000, \/\/ Disp reloc applied at build time.$/;"	e	enum:llvm::ELF::__anon43
DF_1_DISPRELPND	ELF.h	/^  DF_1_DISPRELPND = 0x00010000  \/\/ Disp reloc applied at run-time.$/;"	e	enum:llvm::ELF::__anon43
DF_1_ENDFILTEE	ELF.h	/^  DF_1_ENDFILTEE  = 0x00004000, \/\/ Filtee terminates filters search.$/;"	e	enum:llvm::ELF::__anon43
DF_1_GLOBAL	ELF.h	/^  DF_1_GLOBAL     = 0x00000002, \/\/ Set RTLD_GLOBAL for this object.$/;"	e	enum:llvm::ELF::__anon43
DF_1_GROUP	ELF.h	/^  DF_1_GROUP      = 0x00000004, \/\/ Set RTLD_GROUP for this object.$/;"	e	enum:llvm::ELF::__anon43
DF_1_INITFIRST	ELF.h	/^  DF_1_INITFIRST  = 0x00000020, \/\/ Set RTLD_INITFIRST for this object.$/;"	e	enum:llvm::ELF::__anon43
DF_1_INTERPOSE	ELF.h	/^  DF_1_INTERPOSE  = 0x00000400, \/\/ Object is used to interpose.$/;"	e	enum:llvm::ELF::__anon43
DF_1_LOADFLTR	ELF.h	/^  DF_1_LOADFLTR   = 0x00000010, \/\/ Trigger filtee loading at runtime.$/;"	e	enum:llvm::ELF::__anon43
DF_1_NODEFLIB	ELF.h	/^  DF_1_NODEFLIB   = 0x00000800, \/\/ Ignore default lib search path.$/;"	e	enum:llvm::ELF::__anon43
DF_1_NODELETE	ELF.h	/^  DF_1_NODELETE   = 0x00000008, \/\/ Set RTLD_NODELETE for this object.$/;"	e	enum:llvm::ELF::__anon43
DF_1_NODUMP	ELF.h	/^  DF_1_NODUMP     = 0x00001000, \/\/ Object can't be dldump'ed.$/;"	e	enum:llvm::ELF::__anon43
DF_1_NOOPEN	ELF.h	/^  DF_1_NOOPEN     = 0x00000040, \/\/ Set RTLD_NOOPEN for this object.$/;"	e	enum:llvm::ELF::__anon43
DF_1_NOW	ELF.h	/^  DF_1_NOW        = 0x00000001, \/\/ Set RTLD_NOW for this object.$/;"	e	enum:llvm::ELF::__anon43
DF_1_ORIGIN	ELF.h	/^  DF_1_ORIGIN     = 0x00000080, \/\/ $ORIGIN must be handled.$/;"	e	enum:llvm::ELF::__anon43
DF_1_TRANS	ELF.h	/^  DF_1_TRANS      = 0x00000200,$/;"	e	enum:llvm::ELF::__anon43
DF_BIND_NOW	ELF.h	/^  DF_BIND_NOW   = 0x08, \/\/ Process all relocations on load.$/;"	e	enum:llvm::ELF::__anon42
DF_ORIGIN	ELF.h	/^  DF_ORIGIN     = 0x01, \/\/ The object may reference $ORIGIN.$/;"	e	enum:llvm::ELF::__anon42
DF_STATIC_TLS	ELF.h	/^  DF_STATIC_TLS = 0x10  \/\/ Reject attempts to load dynamically.$/;"	e	enum:llvm::ELF::__anon42
DF_SYMBOLIC	ELF.h	/^  DF_SYMBOLIC   = 0x02, \/\/ Search the shared lib before searching the exe.$/;"	e	enum:llvm::ELF::__anon42
DF_TEXTREL	ELF.h	/^  DF_TEXTREL    = 0x04, \/\/ Relocations may modify a non-writable segment.$/;"	e	enum:llvm::ELF::__anon42
DK_Error	SourceMgr.h	/^    DK_Error,$/;"	e	enum:llvm::SourceMgr::DiagKind
DK_Note	SourceMgr.h	/^    DK_Note$/;"	e	enum:llvm::SourceMgr::DiagKind
DK_Warning	SourceMgr.h	/^    DK_Warning,$/;"	e	enum:llvm::SourceMgr::DiagKind
DLLCharacteristics	COFF.h	/^    uint16_t DLLCharacteristics;$/;"	m	struct:llvm::COFF::PEHeader
DLLCharacteristics	COFF.h	/^  enum DLLCharacteristics {$/;"	g	namespace:llvm::COFF
DOSHeader	COFF.h	/^  struct DOSHeader {$/;"	s	namespace:llvm::COFF
DOT	GraphWriter.h	/^      DOT,$/;"	e	enum:llvm::GraphProgram::Name
DOT	GraphWriter.h	/^namespace DOT {  \/\/ Private functions...$/;"	n	namespace:llvm
DOTGraphTraits	DOTGraphTraits.h	/^  DOTGraphTraits (bool simple=false) : DefaultDOTGraphTraits (simple) {}$/;"	f	struct:llvm::DOTGraphTraits
DOTGraphTraits	DOTGraphTraits.h	/^struct DOTGraphTraits : public DefaultDOTGraphTraits {$/;"	s	namespace:llvm
DOTTraits	GraphWriter.h	/^  typedef DOTGraphTraits<GraphType>           DOTTraits;$/;"	t	class:llvm::GraphWriter
DS	Solaris.h	21;"	d
DT_BIND_NOW	ELF.h	/^  DT_BIND_NOW     = 24,       \/\/ Process all relocations before execution.$/;"	e	enum:llvm::ELF::__anon41
DT_DEBUG	ELF.h	/^  DT_DEBUG        = 21,       \/\/ Reserved for debugger.$/;"	e	enum:llvm::ELF::__anon41
DT_ENCODING	ELF.h	/^  DT_ENCODING     = 32,       \/\/ Values from here to DT_LOOS follow the rules$/;"	e	enum:llvm::ELF::__anon41
DT_FINI	ELF.h	/^  DT_FINI         = 13,       \/\/ Address of termination function.$/;"	e	enum:llvm::ELF::__anon41
DT_FINI_ARRAY	ELF.h	/^  DT_FINI_ARRAY   = 26,       \/\/ Pointer to array of termination functions.$/;"	e	enum:llvm::ELF::__anon41
DT_FINI_ARRAYSZ	ELF.h	/^  DT_FINI_ARRAYSZ = 28,       \/\/ Size of DT_FINI_ARRAY.$/;"	e	enum:llvm::ELF::__anon41
DT_FLAGS	ELF.h	/^  DT_FLAGS        = 30,       \/\/ Flags.$/;"	e	enum:llvm::ELF::__anon41
DT_FLAGS_1	ELF.h	/^  DT_FLAGS_1      = 0X6FFFFFFB, \/\/ Flags_1.$/;"	e	enum:llvm::ELF::__anon41
DT_HASH	ELF.h	/^  DT_HASH         = 4,        \/\/ Address of symbolic hash table.$/;"	e	enum:llvm::ELF::__anon41
DT_HIOS	ELF.h	/^  DT_HIOS         = 0x6FFFFFFF, \/\/ End of environment specific tags.$/;"	e	enum:llvm::ELF::__anon41
DT_HIPROC	ELF.h	/^  DT_HIPROC       = 0x7FFFFFFF, \/\/ End of processor specific tags.$/;"	e	enum:llvm::ELF::__anon41
DT_INIT	ELF.h	/^  DT_INIT         = 12,       \/\/ Address of initialization function.$/;"	e	enum:llvm::ELF::__anon41
DT_INIT_ARRAY	ELF.h	/^  DT_INIT_ARRAY   = 25,       \/\/ Pointer to array of initialization functions.$/;"	e	enum:llvm::ELF::__anon41
DT_INIT_ARRAYSZ	ELF.h	/^  DT_INIT_ARRAYSZ = 27,       \/\/ Size of DT_INIT_ARRAY.$/;"	e	enum:llvm::ELF::__anon41
DT_JMPREL	ELF.h	/^  DT_JMPREL       = 23,       \/\/ Address of relocations associated with PLT.$/;"	e	enum:llvm::ELF::__anon41
DT_LOOS	ELF.h	/^  DT_LOOS         = 0x60000000, \/\/ Start of environment specific tags.$/;"	e	enum:llvm::ELF::__anon41
DT_LOPROC	ELF.h	/^  DT_LOPROC       = 0x70000000, \/\/ Start of processor specific tags.$/;"	e	enum:llvm::ELF::__anon41
DT_NEEDED	ELF.h	/^  DT_NEEDED       = 1,        \/\/ String table offset of needed library.$/;"	e	enum:llvm::ELF::__anon41
DT_NULL	ELF.h	/^  DT_NULL         = 0,        \/\/ Marks end of dynamic array.$/;"	e	enum:llvm::ELF::__anon41
DT_PLTGOT	ELF.h	/^  DT_PLTGOT       = 3,        \/\/ Address associated with linkage table.$/;"	e	enum:llvm::ELF::__anon41
DT_PLTREL	ELF.h	/^  DT_PLTREL       = 20,       \/\/ Type of relocation entry used for linking.$/;"	e	enum:llvm::ELF::__anon41
DT_PLTRELSZ	ELF.h	/^  DT_PLTRELSZ     = 2,        \/\/ Size of relocation entries in PLT.$/;"	e	enum:llvm::ELF::__anon41
DT_PREINIT_ARRAY	ELF.h	/^  DT_PREINIT_ARRAY = 32,      \/\/ Pointer to array of preinit functions.$/;"	e	enum:llvm::ELF::__anon41
DT_PREINIT_ARRAYSZ	ELF.h	/^  DT_PREINIT_ARRAYSZ = 33,    \/\/ Size of the DT_PREINIT_ARRAY array.$/;"	e	enum:llvm::ELF::__anon41
DT_REL	ELF.h	/^  DT_REL          = 17,       \/\/ Address of relocation table (Rel entries).$/;"	e	enum:llvm::ELF::__anon41
DT_RELA	ELF.h	/^  DT_RELA         = 7,        \/\/ Address of relocation table (Rela entries).$/;"	e	enum:llvm::ELF::__anon41
DT_RELACOUNT	ELF.h	/^  DT_RELACOUNT    = 0x6FFFFFF9, \/\/ ELF32_Rela count.$/;"	e	enum:llvm::ELF::__anon41
DT_RELAENT	ELF.h	/^  DT_RELAENT      = 9,        \/\/ Size of a Rela relocation entry.$/;"	e	enum:llvm::ELF::__anon41
DT_RELASZ	ELF.h	/^  DT_RELASZ       = 8,        \/\/ Size of Rela relocation table.$/;"	e	enum:llvm::ELF::__anon41
DT_RELCOUNT	ELF.h	/^  DT_RELCOUNT     = 0x6FFFFFFA, \/\/ ELF32_Rel count.$/;"	e	enum:llvm::ELF::__anon41
DT_RELENT	ELF.h	/^  DT_RELENT       = 19,       \/\/ Size of a Rel relocation entry.$/;"	e	enum:llvm::ELF::__anon41
DT_RELSZ	ELF.h	/^  DT_RELSZ        = 18,       \/\/ Size of Rel relocation table.$/;"	e	enum:llvm::ELF::__anon41
DT_RPATH	ELF.h	/^  DT_RPATH        = 15,       \/\/ String table offset of library search path.$/;"	e	enum:llvm::ELF::__anon41
DT_RUNPATH	ELF.h	/^  DT_RUNPATH      = 29,       \/\/ String table offset of lib search path.$/;"	e	enum:llvm::ELF::__anon41
DT_SONAME	ELF.h	/^  DT_SONAME       = 14,       \/\/ String table offset of a shared objects name.$/;"	e	enum:llvm::ELF::__anon41
DT_STRSZ	ELF.h	/^  DT_STRSZ        = 10,       \/\/ Total size of the string table.$/;"	e	enum:llvm::ELF::__anon41
DT_STRTAB	ELF.h	/^  DT_STRTAB       = 5,        \/\/ Address of dynamic string table.$/;"	e	enum:llvm::ELF::__anon41
DT_SYMBOLIC	ELF.h	/^  DT_SYMBOLIC     = 16,       \/\/ Changes symbol resolution algorithm.$/;"	e	enum:llvm::ELF::__anon41
DT_SYMENT	ELF.h	/^  DT_SYMENT       = 11,       \/\/ Size of a symbol table entry.$/;"	e	enum:llvm::ELF::__anon41
DT_SYMTAB	ELF.h	/^  DT_SYMTAB       = 6,        \/\/ Address of dynamic symbol table.$/;"	e	enum:llvm::ELF::__anon41
DT_TEXTREL	ELF.h	/^  DT_TEXTREL      = 22,       \/\/ Relocations exist for non-writable segments.$/;"	e	enum:llvm::ELF::__anon41
DT_VERDEF	ELF.h	/^  DT_VERDEF       = 0X6FFFFFFC, \/\/ The address of the version definition table.$/;"	e	enum:llvm::ELF::__anon41
DT_VERDEFNUM	ELF.h	/^  DT_VERDEFNUM    = 0X6FFFFFFD, \/\/ The number of entries in DT_VERDEF.$/;"	e	enum:llvm::ELF::__anon41
DT_VERNEED	ELF.h	/^  DT_VERNEED      = 0X6FFFFFFE, \/\/ The address of the version Dependency table.$/;"	e	enum:llvm::ELF::__anon41
DT_VERNEEDNUM	ELF.h	/^  DT_VERNEEDNUM   = 0X6FFFFFFF  \/\/ The number of entries in DT_VERNEED.$/;"	e	enum:llvm::ELF::__anon41
DTraits	GraphWriter.h	/^  DOTTraits DTraits;$/;"	m	class:llvm::GraphWriter
DWARF_VERSION	Dwarf.h	/^  DWARF_VERSION = 2,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ACCESS_private	Dwarf.h	/^  DW_ACCESS_private = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ACCESS_protected	Dwarf.h	/^  DW_ACCESS_protected = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ACCESS_public	Dwarf.h	/^  DW_ACCESS_public = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_assign	Dwarf.h	/^  DW_APPLE_PROPERTY_assign = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_copy	Dwarf.h	/^  DW_APPLE_PROPERTY_copy = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_nonatomic	Dwarf.h	/^  DW_APPLE_PROPERTY_nonatomic = 0x20$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_readonly	Dwarf.h	/^  DW_APPLE_PROPERTY_readonly = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_readwrite	Dwarf.h	/^  DW_APPLE_PROPERTY_readwrite = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_APPLE_PROPERTY_retain	Dwarf.h	/^  DW_APPLE_PROPERTY_retain = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_UTF	Dwarf.h	/^  DW_ATE_UTF = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_address	Dwarf.h	/^  DW_ATE_address = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_boolean	Dwarf.h	/^  DW_ATE_boolean = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_complex_float	Dwarf.h	/^  DW_ATE_complex_float = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_decimal_float	Dwarf.h	/^  DW_ATE_decimal_float = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_edited	Dwarf.h	/^  DW_ATE_edited = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_float	Dwarf.h	/^  DW_ATE_float = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_hi_user	Dwarf.h	/^  DW_ATE_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_imaginary_float	Dwarf.h	/^  DW_ATE_imaginary_float = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_lo_user	Dwarf.h	/^  DW_ATE_lo_user = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_numeric_string	Dwarf.h	/^  DW_ATE_numeric_string = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_packed_decimal	Dwarf.h	/^  DW_ATE_packed_decimal = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_signed	Dwarf.h	/^  DW_ATE_signed = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_signed_char	Dwarf.h	/^  DW_ATE_signed_char = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_signed_fixed	Dwarf.h	/^  DW_ATE_signed_fixed = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_unsigned	Dwarf.h	/^  DW_ATE_unsigned = 0x07,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_unsigned_char	Dwarf.h	/^  DW_ATE_unsigned_char = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ATE_unsigned_fixed	Dwarf.h	/^  DW_ATE_unsigned_fixed = 0x0e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_block	Dwarf.h	/^  DW_AT_APPLE_block = 0x3fe4,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_flags	Dwarf.h	/^  DW_AT_APPLE_flags = 0x3fe2,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_isa	Dwarf.h	/^  DW_AT_APPLE_isa = 0x3fe3,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_major_runtime_vers	Dwarf.h	/^  DW_AT_APPLE_major_runtime_vers = 0x3fe5,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_objc_complete_type	Dwarf.h	/^  DW_AT_APPLE_objc_complete_type = 0x3fec,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_omit_frame_ptr	Dwarf.h	/^  DW_AT_APPLE_omit_frame_ptr = 0x3fe7,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_optimized	Dwarf.h	/^  DW_AT_APPLE_optimized = 0x3fe1,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property	Dwarf.h	/^  DW_AT_APPLE_property = 0x3fed,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property_attribute	Dwarf.h	/^  DW_AT_APPLE_property_attribute = 0x3feb,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property_getter	Dwarf.h	/^  DW_AT_APPLE_property_getter = 0x3fe9,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property_name	Dwarf.h	/^  DW_AT_APPLE_property_name = 0x3fe8,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_property_setter	Dwarf.h	/^  DW_AT_APPLE_property_setter = 0x3fea,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_APPLE_runtime_class	Dwarf.h	/^  DW_AT_APPLE_runtime_class = 0x3fe6,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_GNU_template_name	Dwarf.h	/^  DW_AT_GNU_template_name = 0x2110,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_GNU_vector	Dwarf.h	/^  DW_AT_GNU_vector = 0x2107,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_abstract_name	Dwarf.h	/^  DW_AT_MIPS_abstract_name = 0x2009,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_allocatable_dopetype	Dwarf.h	/^  DW_AT_MIPS_allocatable_dopetype = 0x200f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_assumed_shape_dopetype	Dwarf.h	/^  DW_AT_MIPS_assumed_shape_dopetype = 0x2010,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_assumed_size	Dwarf.h	/^  DW_AT_MIPS_assumed_size = 0x2011,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_clone_origin	Dwarf.h	/^  DW_AT_MIPS_clone_origin = 0x200a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_epilog_begin	Dwarf.h	/^  DW_AT_MIPS_epilog_begin = 0x2004,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_has_inlines	Dwarf.h	/^  DW_AT_MIPS_has_inlines = 0x200b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_linkage_name	Dwarf.h	/^  DW_AT_MIPS_linkage_name = 0x2007,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_loop_begin	Dwarf.h	/^  DW_AT_MIPS_loop_begin = 0x2002,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_loop_unroll_factor	Dwarf.h	/^  DW_AT_MIPS_loop_unroll_factor = 0x2005,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_ptr_dopetype	Dwarf.h	/^  DW_AT_MIPS_ptr_dopetype = 0x200e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_software_pipeline_depth	Dwarf.h	/^  DW_AT_MIPS_software_pipeline_depth = 0x2006,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_stride	Dwarf.h	/^  DW_AT_MIPS_stride = 0x2008,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_stride_byte	Dwarf.h	/^  DW_AT_MIPS_stride_byte = 0x200c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_stride_elem	Dwarf.h	/^  DW_AT_MIPS_stride_elem = 0x200d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_MIPS_tail_loop_begin	Dwarf.h	/^  DW_AT_MIPS_tail_loop_begin = 0x2003,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_abstract_origin	Dwarf.h	/^  DW_AT_abstract_origin = 0x31,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_accessibility	Dwarf.h	/^  DW_AT_accessibility = 0x32,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_address_class	Dwarf.h	/^  DW_AT_address_class = 0x33,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_allocated	Dwarf.h	/^  DW_AT_allocated = 0x4e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_artificial	Dwarf.h	/^  DW_AT_artificial = 0x34,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_associated	Dwarf.h	/^  DW_AT_associated = 0x4f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_base_types	Dwarf.h	/^  DW_AT_base_types = 0x35,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_binary_scale	Dwarf.h	/^  DW_AT_binary_scale = 0x5b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_bit_offset	Dwarf.h	/^  DW_AT_bit_offset = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_bit_size	Dwarf.h	/^  DW_AT_bit_size = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_bit_stride	Dwarf.h	/^  DW_AT_bit_stride = 0x2e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_body_begin	Dwarf.h	/^  DW_AT_body_begin = 0x2105,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_body_end	Dwarf.h	/^  DW_AT_body_end = 0x2106,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_byte_size	Dwarf.h	/^  DW_AT_byte_size = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_byte_stride	Dwarf.h	/^  DW_AT_byte_stride = 0x51,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_call_column	Dwarf.h	/^  DW_AT_call_column = 0x57,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_call_file	Dwarf.h	/^  DW_AT_call_file = 0x58,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_call_line	Dwarf.h	/^  DW_AT_call_line = 0x59,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_calling_convention	Dwarf.h	/^  DW_AT_calling_convention = 0x36,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_common_reference	Dwarf.h	/^  DW_AT_common_reference = 0x1a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_comp_dir	Dwarf.h	/^  DW_AT_comp_dir = 0x1b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_const_expr	Dwarf.h	/^  DW_AT_const_expr = 0x6c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_const_value	Dwarf.h	/^  DW_AT_const_value = 0x1c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_containing_type	Dwarf.h	/^  DW_AT_containing_type = 0x1d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_count	Dwarf.h	/^  DW_AT_count = 0x37,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_data_bit_offset	Dwarf.h	/^  DW_AT_data_bit_offset = 0x6b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_data_location	Dwarf.h	/^  DW_AT_data_location = 0x50,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_data_member_location	Dwarf.h	/^  DW_AT_data_member_location = 0x38,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decimal_scale	Dwarf.h	/^  DW_AT_decimal_scale = 0x5c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decimal_sign	Dwarf.h	/^  DW_AT_decimal_sign = 0x5e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decl_column	Dwarf.h	/^  DW_AT_decl_column = 0x39,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decl_file	Dwarf.h	/^  DW_AT_decl_file = 0x3a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_decl_line	Dwarf.h	/^  DW_AT_decl_line = 0x3b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_declaration	Dwarf.h	/^  DW_AT_declaration = 0x3c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_default_value	Dwarf.h	/^  DW_AT_default_value = 0x1e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_description	Dwarf.h	/^  DW_AT_description = 0x5a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_digit_count	Dwarf.h	/^  DW_AT_digit_count = 0x5f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_discr	Dwarf.h	/^  DW_AT_discr = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_discr_list	Dwarf.h	/^  DW_AT_discr_list = 0x3d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_discr_value	Dwarf.h	/^  DW_AT_discr_value = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_elemental	Dwarf.h	/^  DW_AT_elemental = 0x66,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_encoding	Dwarf.h	/^  DW_AT_encoding = 0x3e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_endianity	Dwarf.h	/^  DW_AT_endianity = 0x65,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_entry_pc	Dwarf.h	/^  DW_AT_entry_pc = 0x52,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_enum_class	Dwarf.h	/^  DW_AT_enum_class = 0x6d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_explicit	Dwarf.h	/^  DW_AT_explicit = 0x63,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_extension	Dwarf.h	/^  DW_AT_extension = 0x54,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_external	Dwarf.h	/^  DW_AT_external = 0x3f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_frame_base	Dwarf.h	/^  DW_AT_frame_base = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_friend	Dwarf.h	/^  DW_AT_friend = 0x41,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_hi_user	Dwarf.h	/^  DW_AT_hi_user = 0x3fff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_high_pc	Dwarf.h	/^  DW_AT_high_pc = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_identifier_case	Dwarf.h	/^  DW_AT_identifier_case = 0x42,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_import	Dwarf.h	/^  DW_AT_import = 0x18,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_inline	Dwarf.h	/^  DW_AT_inline = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_is_optional	Dwarf.h	/^  DW_AT_is_optional = 0x21,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_language	Dwarf.h	/^  DW_AT_language = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_linkage_name	Dwarf.h	/^  DW_AT_linkage_name = 0x6e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_lo_user	Dwarf.h	/^  DW_AT_lo_user = 0x2000,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_location	Dwarf.h	/^  DW_AT_location = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_low_pc	Dwarf.h	/^  DW_AT_low_pc = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_lower_bound	Dwarf.h	/^  DW_AT_lower_bound = 0x22,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_mac_info	Dwarf.h	/^  DW_AT_mac_info = 0x2103,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_macro_info	Dwarf.h	/^  DW_AT_macro_info = 0x43,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_main_subprogram	Dwarf.h	/^  DW_AT_main_subprogram = 0x6a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_mutable	Dwarf.h	/^  DW_AT_mutable = 0x61,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_name	Dwarf.h	/^  DW_AT_name = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_namelist_item	Dwarf.h	/^  DW_AT_namelist_item = 0x44,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_object_pointer	Dwarf.h	/^  DW_AT_object_pointer = 0x64,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_ordering	Dwarf.h	/^  DW_AT_ordering = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_picture_string	Dwarf.h	/^  DW_AT_picture_string = 0x60,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_priority	Dwarf.h	/^  DW_AT_priority = 0x45,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_producer	Dwarf.h	/^  DW_AT_producer = 0x25,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_prototyped	Dwarf.h	/^  DW_AT_prototyped = 0x27,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_pure	Dwarf.h	/^  DW_AT_pure = 0x67,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_ranges	Dwarf.h	/^  DW_AT_ranges = 0x55,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_recursive	Dwarf.h	/^  DW_AT_recursive = 0x68,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_return_addr	Dwarf.h	/^  DW_AT_return_addr = 0x2a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_segment	Dwarf.h	/^  DW_AT_segment = 0x46,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_sf_names	Dwarf.h	/^  DW_AT_sf_names = 0x2101,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_sibling	Dwarf.h	/^  DW_AT_sibling = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_signature	Dwarf.h	/^  DW_AT_signature = 0x69,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_small	Dwarf.h	/^  DW_AT_small = 0x5d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_specification	Dwarf.h	/^  DW_AT_specification = 0x47,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_src_coords	Dwarf.h	/^  DW_AT_src_coords = 0x2104,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_src_info	Dwarf.h	/^  DW_AT_src_info = 0x2102,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_start_scope	Dwarf.h	/^  DW_AT_start_scope = 0x2c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_static_link	Dwarf.h	/^  DW_AT_static_link = 0x48,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_stmt_list	Dwarf.h	/^  DW_AT_stmt_list = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_string_length	Dwarf.h	/^  DW_AT_string_length = 0x19,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_threads_scaled	Dwarf.h	/^  DW_AT_threads_scaled = 0x62,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_trampoline	Dwarf.h	/^  DW_AT_trampoline = 0x56,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_type	Dwarf.h	/^  DW_AT_type = 0x49,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_upper_bound	Dwarf.h	/^  DW_AT_upper_bound = 0x2f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_use_UTF8	Dwarf.h	/^  DW_AT_use_UTF8 = 0x53,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_use_location	Dwarf.h	/^  DW_AT_use_location = 0x4a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_variable_parameter	Dwarf.h	/^  DW_AT_variable_parameter = 0x4b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_virtuality	Dwarf.h	/^  DW_AT_virtuality = 0x4c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_visibility	Dwarf.h	/^  DW_AT_visibility = 0x17,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_AT_vtable_elem_location	Dwarf.h	/^  DW_AT_vtable_elem_location = 0x4d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_hi_user	Dwarf.h	/^  DW_CC_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_lo_user	Dwarf.h	/^  DW_CC_lo_user = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_nocall	Dwarf.h	/^  DW_CC_nocall = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_normal	Dwarf.h	/^  DW_CC_normal = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CC_program	Dwarf.h	/^  DW_CC_program = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_GNU_args_size	Dwarf.h	/^  DW_CFA_GNU_args_size = 0x2e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_GNU_window_save	Dwarf.h	/^  DW_CFA_GNU_window_save = 0x2d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_MIPS_advance_loc8	Dwarf.h	/^  DW_CFA_MIPS_advance_loc8 = 0x1d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_advance_loc	Dwarf.h	/^  DW_CFA_advance_loc = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_advance_loc1	Dwarf.h	/^  DW_CFA_advance_loc1 = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_advance_loc2	Dwarf.h	/^  DW_CFA_advance_loc2 = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_advance_loc4	Dwarf.h	/^  DW_CFA_advance_loc4 = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa	Dwarf.h	/^  DW_CFA_def_cfa = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_expression	Dwarf.h	/^  DW_CFA_def_cfa_expression = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_offset	Dwarf.h	/^  DW_CFA_def_cfa_offset = 0x0e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_offset_sf	Dwarf.h	/^  DW_CFA_def_cfa_offset_sf = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_register	Dwarf.h	/^  DW_CFA_def_cfa_register = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_def_cfa_sf	Dwarf.h	/^  DW_CFA_def_cfa_sf = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_expression	Dwarf.h	/^  DW_CFA_expression = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_extended	Dwarf.h	/^  DW_CFA_extended = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_hi_user	Dwarf.h	/^  DW_CFA_hi_user = 0x3f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_lo_user	Dwarf.h	/^  DW_CFA_lo_user = 0x1c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_nop	Dwarf.h	/^  DW_CFA_nop = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_offset	Dwarf.h	/^  DW_CFA_offset = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_offset_extended	Dwarf.h	/^  DW_CFA_offset_extended = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_offset_extended_sf	Dwarf.h	/^  DW_CFA_offset_extended_sf = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_register	Dwarf.h	/^  DW_CFA_register = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_remember_state	Dwarf.h	/^  DW_CFA_remember_state = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_restore	Dwarf.h	/^  DW_CFA_restore = 0xc0,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_restore_extended	Dwarf.h	/^  DW_CFA_restore_extended = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_restore_state	Dwarf.h	/^  DW_CFA_restore_state = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_same_value	Dwarf.h	/^  DW_CFA_same_value = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_set_loc	Dwarf.h	/^  DW_CFA_set_loc = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_undefined	Dwarf.h	/^  DW_CFA_undefined = 0x07,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_val_expression	Dwarf.h	/^  DW_CFA_val_expression = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_val_offset	Dwarf.h	/^  DW_CFA_val_offset = 0x14,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CFA_val_offset_sf	Dwarf.h	/^  DW_CFA_val_offset_sf = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CHILDREN_no	Dwarf.h	/^  DW_CHILDREN_no = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CHILDREN_yes	Dwarf.h	/^  DW_CHILDREN_yes = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_CIE_ID	Dwarf.h	/^  DW_CIE_ID       = 0xffffffff          \/\/ Common frame information mark.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_CIE_VERSION	Dwarf.h	/^  DW_CIE_VERSION = 1,                   \/\/ Common frame information version.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_DSC_label	Dwarf.h	/^  DW_DSC_label = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DSC_range	Dwarf.h	/^  DW_DSC_range = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_leading_overpunch	Dwarf.h	/^  DW_DS_leading_overpunch = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_leading_separate	Dwarf.h	/^  DW_DS_leading_separate = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_trailing_overpunch	Dwarf.h	/^  DW_DS_trailing_overpunch = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_trailing_separate	Dwarf.h	/^  DW_DS_trailing_separate = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_DS_unsigned	Dwarf.h	/^  DW_DS_unsigned = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_absptr	Dwarf.h	/^  DW_EH_PE_absptr = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_aligned	Dwarf.h	/^  DW_EH_PE_aligned = 0x50,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_datarel	Dwarf.h	/^  DW_EH_PE_datarel = 0x30,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_funcrel	Dwarf.h	/^  DW_EH_PE_funcrel = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_indirect	Dwarf.h	/^  DW_EH_PE_indirect = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_omit	Dwarf.h	/^  DW_EH_PE_omit = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_pcrel	Dwarf.h	/^  DW_EH_PE_pcrel = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_sdata2	Dwarf.h	/^  DW_EH_PE_sdata2 = 0x0A,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_sdata4	Dwarf.h	/^  DW_EH_PE_sdata4 = 0x0B,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_sdata8	Dwarf.h	/^  DW_EH_PE_sdata8 = 0x0C,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_signed	Dwarf.h	/^  DW_EH_PE_signed = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_sleb128	Dwarf.h	/^  DW_EH_PE_sleb128 = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_textrel	Dwarf.h	/^  DW_EH_PE_textrel = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_udata2	Dwarf.h	/^  DW_EH_PE_udata2 = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_udata4	Dwarf.h	/^  DW_EH_PE_udata4 = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_udata8	Dwarf.h	/^  DW_EH_PE_udata8 = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_EH_PE_uleb128	Dwarf.h	/^  DW_EH_PE_uleb128 = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_big	Dwarf.h	/^  DW_END_big = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_default	Dwarf.h	/^  DW_END_default = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_hi_user	Dwarf.h	/^  DW_END_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_little	Dwarf.h	/^  DW_END_little = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_END_lo_user	Dwarf.h	/^  DW_END_lo_user = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_addr	Dwarf.h	/^  DW_FORM_addr = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_block	Dwarf.h	/^  DW_FORM_block = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_block1	Dwarf.h	/^  DW_FORM_block1 = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_block2	Dwarf.h	/^  DW_FORM_block2 = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_block4	Dwarf.h	/^  DW_FORM_block4 = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_data1	Dwarf.h	/^  DW_FORM_data1 = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_data2	Dwarf.h	/^  DW_FORM_data2 = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_data4	Dwarf.h	/^  DW_FORM_data4 = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_data8	Dwarf.h	/^  DW_FORM_data8 = 0x07,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_exprloc	Dwarf.h	/^  DW_FORM_exprloc = 0x18,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_flag	Dwarf.h	/^  DW_FORM_flag = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_flag_present	Dwarf.h	/^  DW_FORM_flag_present = 0x19,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_indirect	Dwarf.h	/^  DW_FORM_indirect = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref1	Dwarf.h	/^  DW_FORM_ref1 = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref2	Dwarf.h	/^  DW_FORM_ref2 = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref4	Dwarf.h	/^  DW_FORM_ref4 = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref8	Dwarf.h	/^  DW_FORM_ref8 = 0x14,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref_addr	Dwarf.h	/^  DW_FORM_ref_addr = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref_sig8	Dwarf.h	/^  DW_FORM_ref_sig8 = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_ref_udata	Dwarf.h	/^  DW_FORM_ref_udata = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_sdata	Dwarf.h	/^  DW_FORM_sdata = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_sec_offset	Dwarf.h	/^  DW_FORM_sec_offset = 0x17,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_string	Dwarf.h	/^  DW_FORM_string = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_strp	Dwarf.h	/^  DW_FORM_strp = 0x0e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_FORM_udata	Dwarf.h	/^  DW_FORM_udata = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ID_case_insensitive	Dwarf.h	/^  DW_ID_case_insensitive = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ID_case_sensitive	Dwarf.h	/^  DW_ID_case_sensitive = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ID_down_case	Dwarf.h	/^  DW_ID_down_case = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ID_up_case	Dwarf.h	/^  DW_ID_up_case = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_INL_declared_inlined	Dwarf.h	/^  DW_INL_declared_inlined = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_INL_declared_not_inlined	Dwarf.h	/^  DW_INL_declared_not_inlined = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_INL_inlined	Dwarf.h	/^  DW_INL_inlined = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_INL_not_inlined	Dwarf.h	/^  DW_INL_not_inlined = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Ada83	Dwarf.h	/^  DW_LANG_Ada83 = 0x0003,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Ada95	Dwarf.h	/^  DW_LANG_Ada95 = 0x000d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_C	Dwarf.h	/^  DW_LANG_C = 0x0002,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_C89	Dwarf.h	/^  DW_LANG_C89 = 0x0001,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_C99	Dwarf.h	/^  DW_LANG_C99 = 0x000c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_C_plus_plus	Dwarf.h	/^  DW_LANG_C_plus_plus = 0x0004,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Cobol74	Dwarf.h	/^  DW_LANG_Cobol74 = 0x0005,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Cobol85	Dwarf.h	/^  DW_LANG_Cobol85 = 0x0006,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_D	Dwarf.h	/^  DW_LANG_D = 0x0013,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Fortran77	Dwarf.h	/^  DW_LANG_Fortran77 = 0x0007,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Fortran90	Dwarf.h	/^  DW_LANG_Fortran90 = 0x0008,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Fortran95	Dwarf.h	/^  DW_LANG_Fortran95 = 0x000e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Java	Dwarf.h	/^  DW_LANG_Java = 0x000b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Mips_Assembler	Dwarf.h	/^  DW_LANG_Mips_Assembler = 0x8001,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Modula2	Dwarf.h	/^  DW_LANG_Modula2 = 0x000a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_ObjC	Dwarf.h	/^  DW_LANG_ObjC = 0x0010,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_ObjC_plus_plus	Dwarf.h	/^  DW_LANG_ObjC_plus_plus = 0x0011,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_PLI	Dwarf.h	/^  DW_LANG_PLI = 0x000f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Pascal83	Dwarf.h	/^  DW_LANG_Pascal83 = 0x0009,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_Python	Dwarf.h	/^  DW_LANG_Python = 0x0014,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_UPC	Dwarf.h	/^  DW_LANG_UPC = 0x0012,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_hi_user	Dwarf.h	/^  DW_LANG_hi_user = 0xffff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LANG_lo_user	Dwarf.h	/^  DW_LANG_lo_user = 0x8000,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_define_file	Dwarf.h	/^  DW_LNE_define_file = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_end_sequence	Dwarf.h	/^  DW_LNE_end_sequence = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_hi_user	Dwarf.h	/^  DW_LNE_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_lo_user	Dwarf.h	/^  DW_LNE_lo_user = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_set_address	Dwarf.h	/^  DW_LNE_set_address = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNE_set_discriminator	Dwarf.h	/^  DW_LNE_set_discriminator = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_advance_line	Dwarf.h	/^  DW_LNS_advance_line = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_advance_pc	Dwarf.h	/^  DW_LNS_advance_pc = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_const_add_pc	Dwarf.h	/^  DW_LNS_const_add_pc = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_copy	Dwarf.h	/^  DW_LNS_copy = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_extended_op	Dwarf.h	/^  DW_LNS_extended_op = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_fixed_advance_pc	Dwarf.h	/^  DW_LNS_fixed_advance_pc = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_negate_stmt	Dwarf.h	/^  DW_LNS_negate_stmt = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_basic_block	Dwarf.h	/^  DW_LNS_set_basic_block = 0x07,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_column	Dwarf.h	/^  DW_LNS_set_column = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_epilogue_begin	Dwarf.h	/^  DW_LNS_set_epilogue_begin = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_file	Dwarf.h	/^  DW_LNS_set_file = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_isa	Dwarf.h	/^  DW_LNS_set_isa = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_LNS_set_prologue_end	Dwarf.h	/^  DW_LNS_set_prologue_end = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_define	Dwarf.h	/^  DW_MACINFO_define = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_end_file	Dwarf.h	/^  DW_MACINFO_end_file = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_start_file	Dwarf.h	/^  DW_MACINFO_start_file = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_undef	Dwarf.h	/^  DW_MACINFO_undef = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_MACINFO_vendor_ext	Dwarf.h	/^  DW_MACINFO_vendor_ext = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_abs	Dwarf.h	/^  DW_OP_abs = 0x19,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_addr	Dwarf.h	/^  DW_OP_addr = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_and	Dwarf.h	/^  DW_OP_and = 0x1a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_bit_piece	Dwarf.h	/^  DW_OP_bit_piece = 0x9d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_bra	Dwarf.h	/^  DW_OP_bra = 0x28,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg0	Dwarf.h	/^  DW_OP_breg0 = 0x70,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg1	Dwarf.h	/^  DW_OP_breg1 = 0x71,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg10	Dwarf.h	/^  DW_OP_breg10 = 0x7a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg11	Dwarf.h	/^  DW_OP_breg11 = 0x7b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg12	Dwarf.h	/^  DW_OP_breg12 = 0x7c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg13	Dwarf.h	/^  DW_OP_breg13 = 0x7d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg14	Dwarf.h	/^  DW_OP_breg14 = 0x7e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg15	Dwarf.h	/^  DW_OP_breg15 = 0x7f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg16	Dwarf.h	/^  DW_OP_breg16 = 0x80,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg17	Dwarf.h	/^  DW_OP_breg17 = 0x81,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg18	Dwarf.h	/^  DW_OP_breg18 = 0x82,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg19	Dwarf.h	/^  DW_OP_breg19 = 0x83,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg2	Dwarf.h	/^  DW_OP_breg2 = 0x72,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg20	Dwarf.h	/^  DW_OP_breg20 = 0x84,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg21	Dwarf.h	/^  DW_OP_breg21 = 0x85,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg22	Dwarf.h	/^  DW_OP_breg22 = 0x86,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg23	Dwarf.h	/^  DW_OP_breg23 = 0x87,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg24	Dwarf.h	/^  DW_OP_breg24 = 0x88,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg25	Dwarf.h	/^  DW_OP_breg25 = 0x89,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg26	Dwarf.h	/^  DW_OP_breg26 = 0x8a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg27	Dwarf.h	/^  DW_OP_breg27 = 0x8b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg28	Dwarf.h	/^  DW_OP_breg28 = 0x8c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg29	Dwarf.h	/^  DW_OP_breg29 = 0x8d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg3	Dwarf.h	/^  DW_OP_breg3 = 0x73,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg30	Dwarf.h	/^  DW_OP_breg30 = 0x8e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg31	Dwarf.h	/^  DW_OP_breg31 = 0x8f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg4	Dwarf.h	/^  DW_OP_breg4 = 0x74,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg5	Dwarf.h	/^  DW_OP_breg5 = 0x75,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg6	Dwarf.h	/^  DW_OP_breg6 = 0x76,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg7	Dwarf.h	/^  DW_OP_breg7 = 0x77,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg8	Dwarf.h	/^  DW_OP_breg8 = 0x78,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_breg9	Dwarf.h	/^  DW_OP_breg9 = 0x79,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_bregx	Dwarf.h	/^  DW_OP_bregx = 0x92,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_call2	Dwarf.h	/^  DW_OP_call2 = 0x98,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_call4	Dwarf.h	/^  DW_OP_call4 = 0x99,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_call_frame_cfa	Dwarf.h	/^  DW_OP_call_frame_cfa = 0x9c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_call_ref	Dwarf.h	/^  DW_OP_call_ref = 0x9a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const1s	Dwarf.h	/^  DW_OP_const1s = 0x09,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const1u	Dwarf.h	/^  DW_OP_const1u = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const2s	Dwarf.h	/^  DW_OP_const2s = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const2u	Dwarf.h	/^  DW_OP_const2u = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const4s	Dwarf.h	/^  DW_OP_const4s = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const4u	Dwarf.h	/^  DW_OP_const4u = 0x0c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const8s	Dwarf.h	/^  DW_OP_const8s = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_const8u	Dwarf.h	/^  DW_OP_const8u = 0x0e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_consts	Dwarf.h	/^  DW_OP_consts = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_constu	Dwarf.h	/^  DW_OP_constu = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_deref	Dwarf.h	/^  DW_OP_deref = 0x06,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_deref_size	Dwarf.h	/^  DW_OP_deref_size = 0x94,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_div	Dwarf.h	/^  DW_OP_div = 0x1b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_drop	Dwarf.h	/^  DW_OP_drop = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_dup	Dwarf.h	/^  DW_OP_dup = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_eq	Dwarf.h	/^  DW_OP_eq = 0x29,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_fbreg	Dwarf.h	/^  DW_OP_fbreg = 0x91,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_form_tls_address	Dwarf.h	/^  DW_OP_form_tls_address = 0x9b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_ge	Dwarf.h	/^  DW_OP_ge = 0x2a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_gt	Dwarf.h	/^  DW_OP_gt = 0x2b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_hi_user	Dwarf.h	/^  DW_OP_hi_user = 0xff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_implicit_value	Dwarf.h	/^  DW_OP_implicit_value = 0x9e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_le	Dwarf.h	/^  DW_OP_le = 0x2c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit0	Dwarf.h	/^  DW_OP_lit0 = 0x30,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit1	Dwarf.h	/^  DW_OP_lit1 = 0x31,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit10	Dwarf.h	/^  DW_OP_lit10 = 0x3a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit11	Dwarf.h	/^  DW_OP_lit11 = 0x3b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit12	Dwarf.h	/^  DW_OP_lit12 = 0x3c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit13	Dwarf.h	/^  DW_OP_lit13 = 0x3d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit14	Dwarf.h	/^  DW_OP_lit14 = 0x3e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit15	Dwarf.h	/^  DW_OP_lit15 = 0x3f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit16	Dwarf.h	/^  DW_OP_lit16 = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit17	Dwarf.h	/^  DW_OP_lit17 = 0x41,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit18	Dwarf.h	/^  DW_OP_lit18 = 0x42,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit19	Dwarf.h	/^  DW_OP_lit19 = 0x43,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit2	Dwarf.h	/^  DW_OP_lit2 = 0x32,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit20	Dwarf.h	/^  DW_OP_lit20 = 0x44,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit21	Dwarf.h	/^  DW_OP_lit21 = 0x45,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit22	Dwarf.h	/^  DW_OP_lit22 = 0x46,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit23	Dwarf.h	/^  DW_OP_lit23 = 0x47,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit24	Dwarf.h	/^  DW_OP_lit24 = 0x48,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit25	Dwarf.h	/^  DW_OP_lit25 = 0x49,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit26	Dwarf.h	/^  DW_OP_lit26 = 0x4a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit27	Dwarf.h	/^  DW_OP_lit27 = 0x4b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit28	Dwarf.h	/^  DW_OP_lit28 = 0x4c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit29	Dwarf.h	/^  DW_OP_lit29 = 0x4d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit3	Dwarf.h	/^  DW_OP_lit3 = 0x33,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit30	Dwarf.h	/^  DW_OP_lit30 = 0x4e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit31	Dwarf.h	/^  DW_OP_lit31 = 0x4f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit4	Dwarf.h	/^  DW_OP_lit4 = 0x34,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit5	Dwarf.h	/^  DW_OP_lit5 = 0x35,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit6	Dwarf.h	/^  DW_OP_lit6 = 0x36,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit7	Dwarf.h	/^  DW_OP_lit7 = 0x37,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit8	Dwarf.h	/^  DW_OP_lit8 = 0x38,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lit9	Dwarf.h	/^  DW_OP_lit9 = 0x39,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lo_user	Dwarf.h	/^  DW_OP_lo_user = 0xe0,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_lt	Dwarf.h	/^  DW_OP_lt = 0x2d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_minus	Dwarf.h	/^  DW_OP_minus = 0x1c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_mod	Dwarf.h	/^  DW_OP_mod = 0x1d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_mul	Dwarf.h	/^  DW_OP_mul = 0x1e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_ne	Dwarf.h	/^  DW_OP_ne = 0x2e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_neg	Dwarf.h	/^  DW_OP_neg = 0x1f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_nop	Dwarf.h	/^  DW_OP_nop = 0x96,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_not	Dwarf.h	/^  DW_OP_not = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_or	Dwarf.h	/^  DW_OP_or = 0x21,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_over	Dwarf.h	/^  DW_OP_over = 0x14,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_pick	Dwarf.h	/^  DW_OP_pick = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_piece	Dwarf.h	/^  DW_OP_piece = 0x93,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_plus	Dwarf.h	/^  DW_OP_plus = 0x22,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_plus_uconst	Dwarf.h	/^  DW_OP_plus_uconst = 0x23,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_push_object_address	Dwarf.h	/^  DW_OP_push_object_address = 0x97,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg0	Dwarf.h	/^  DW_OP_reg0 = 0x50,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg1	Dwarf.h	/^  DW_OP_reg1 = 0x51,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg10	Dwarf.h	/^  DW_OP_reg10 = 0x5a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg11	Dwarf.h	/^  DW_OP_reg11 = 0x5b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg12	Dwarf.h	/^  DW_OP_reg12 = 0x5c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg13	Dwarf.h	/^  DW_OP_reg13 = 0x5d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg14	Dwarf.h	/^  DW_OP_reg14 = 0x5e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg15	Dwarf.h	/^  DW_OP_reg15 = 0x5f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg16	Dwarf.h	/^  DW_OP_reg16 = 0x60,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg17	Dwarf.h	/^  DW_OP_reg17 = 0x61,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg18	Dwarf.h	/^  DW_OP_reg18 = 0x62,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg19	Dwarf.h	/^  DW_OP_reg19 = 0x63,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg2	Dwarf.h	/^  DW_OP_reg2 = 0x52,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg20	Dwarf.h	/^  DW_OP_reg20 = 0x64,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg21	Dwarf.h	/^  DW_OP_reg21 = 0x65,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg22	Dwarf.h	/^  DW_OP_reg22 = 0x66,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg23	Dwarf.h	/^  DW_OP_reg23 = 0x67,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg24	Dwarf.h	/^  DW_OP_reg24 = 0x68,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg25	Dwarf.h	/^  DW_OP_reg25 = 0x69,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg26	Dwarf.h	/^  DW_OP_reg26 = 0x6a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg27	Dwarf.h	/^  DW_OP_reg27 = 0x6b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg28	Dwarf.h	/^  DW_OP_reg28 = 0x6c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg29	Dwarf.h	/^  DW_OP_reg29 = 0x6d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg3	Dwarf.h	/^  DW_OP_reg3 = 0x53,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg30	Dwarf.h	/^  DW_OP_reg30 = 0x6e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg31	Dwarf.h	/^  DW_OP_reg31 = 0x6f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg4	Dwarf.h	/^  DW_OP_reg4 = 0x54,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg5	Dwarf.h	/^  DW_OP_reg5 = 0x55,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg6	Dwarf.h	/^  DW_OP_reg6 = 0x56,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg7	Dwarf.h	/^  DW_OP_reg7 = 0x57,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg8	Dwarf.h	/^  DW_OP_reg8 = 0x58,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_reg9	Dwarf.h	/^  DW_OP_reg9 = 0x59,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_regx	Dwarf.h	/^  DW_OP_regx = 0x90,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_rot	Dwarf.h	/^  DW_OP_rot = 0x17,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_shl	Dwarf.h	/^  DW_OP_shl = 0x24,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_shr	Dwarf.h	/^  DW_OP_shr = 0x25,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_shra	Dwarf.h	/^  DW_OP_shra = 0x26,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_skip	Dwarf.h	/^  DW_OP_skip = 0x2f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_stack_value	Dwarf.h	/^  DW_OP_stack_value = 0x9f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_swap	Dwarf.h	/^  DW_OP_swap = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_xderef	Dwarf.h	/^  DW_OP_xderef = 0x18,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_xderef_size	Dwarf.h	/^  DW_OP_xderef_size = 0x95,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_OP_xor	Dwarf.h	/^  DW_OP_xor = 0x27,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ORD_col_major	Dwarf.h	/^  DW_ORD_col_major = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_ORD_row_major	Dwarf.h	/^  DW_ORD_row_major = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_APPLE_property	Dwarf.h	/^  DW_TAG_APPLE_property = 0x4200,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_GNU_formal_parameter_pack	Dwarf.h	/^  DW_TAG_GNU_formal_parameter_pack = 0x4108,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_GNU_template_parameter_pack	Dwarf.h	/^  DW_TAG_GNU_template_parameter_pack = 0x4107,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_GNU_template_template_param	Dwarf.h	/^  DW_TAG_GNU_template_template_param = 0x4106,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_MIPS_loop	Dwarf.h	/^  DW_TAG_MIPS_loop = 0x4081,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_access_declaration	Dwarf.h	/^  DW_TAG_access_declaration = 0x23,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_arg_variable	Dwarf.h	/^  DW_TAG_arg_variable = 0x101,          \/\/ Tag for argument variables.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_array_type	Dwarf.h	/^  DW_TAG_array_type = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_auto_variable	Dwarf.h	/^  DW_TAG_auto_variable = 0x100,         \/\/ Tag for local (auto) variables.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_base_type	Dwarf.h	/^  DW_TAG_base_type = 0x24,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_catch_block	Dwarf.h	/^  DW_TAG_catch_block = 0x25,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_class_template	Dwarf.h	/^  DW_TAG_class_template = 0x4103,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_class_type	Dwarf.h	/^  DW_TAG_class_type = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_common_block	Dwarf.h	/^  DW_TAG_common_block = 0x1a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_common_inclusion	Dwarf.h	/^  DW_TAG_common_inclusion = 0x1b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_compile_unit	Dwarf.h	/^  DW_TAG_compile_unit = 0x11,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_condition	Dwarf.h	/^  DW_TAG_condition = 0x3f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_const_type	Dwarf.h	/^  DW_TAG_const_type = 0x26,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_constant	Dwarf.h	/^  DW_TAG_constant = 0x27,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_dwarf_procedure	Dwarf.h	/^  DW_TAG_dwarf_procedure = 0x36,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_entry_point	Dwarf.h	/^  DW_TAG_entry_point = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_enumeration_type	Dwarf.h	/^  DW_TAG_enumeration_type = 0x04,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_enumerator	Dwarf.h	/^  DW_TAG_enumerator = 0x28,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_file_type	Dwarf.h	/^  DW_TAG_file_type = 0x29,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_formal_parameter	Dwarf.h	/^  DW_TAG_formal_parameter = 0x05,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_format_label	Dwarf.h	/^  DW_TAG_format_label = 0x4101,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_friend	Dwarf.h	/^  DW_TAG_friend = 0x2a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_function_template	Dwarf.h	/^  DW_TAG_function_template = 0x4102,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_hi_user	Dwarf.h	/^  DW_TAG_hi_user = 0xffff,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_imported_declaration	Dwarf.h	/^  DW_TAG_imported_declaration = 0x08,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_imported_module	Dwarf.h	/^  DW_TAG_imported_module = 0x3a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_imported_unit	Dwarf.h	/^  DW_TAG_imported_unit = 0x3d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_inheritance	Dwarf.h	/^  DW_TAG_inheritance = 0x1c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_inlined_subroutine	Dwarf.h	/^  DW_TAG_inlined_subroutine = 0x1d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_interface_type	Dwarf.h	/^  DW_TAG_interface_type = 0x38,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_invalid	Dwarf.h	/^  DW_TAG_invalid = ~0U,                 \/\/ Tag for invalid results.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_label	Dwarf.h	/^  DW_TAG_label = 0x0a,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_lexical_block	Dwarf.h	/^  DW_TAG_lexical_block = 0x0b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_lo_user	Dwarf.h	/^  DW_TAG_lo_user = 0x4080,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_member	Dwarf.h	/^  DW_TAG_member = 0x0d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_module	Dwarf.h	/^  DW_TAG_module = 0x1e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_namelist	Dwarf.h	/^  DW_TAG_namelist = 0x2b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_namelist_item	Dwarf.h	/^  DW_TAG_namelist_item = 0x2c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_namespace	Dwarf.h	/^  DW_TAG_namespace = 0x39,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_packed_type	Dwarf.h	/^  DW_TAG_packed_type = 0x2d,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_partial_unit	Dwarf.h	/^  DW_TAG_partial_unit = 0x3c,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_pointer_type	Dwarf.h	/^  DW_TAG_pointer_type = 0x0f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_ptr_to_member_type	Dwarf.h	/^  DW_TAG_ptr_to_member_type = 0x1f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_reference_type	Dwarf.h	/^  DW_TAG_reference_type = 0x10,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_restrict_type	Dwarf.h	/^  DW_TAG_restrict_type = 0x37,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_return_variable	Dwarf.h	/^  DW_TAG_return_variable = 0x102,       \/\/ Tag for return variables.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_rvalue_reference_type	Dwarf.h	/^  DW_TAG_rvalue_reference_type = 0x42,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_set_type	Dwarf.h	/^  DW_TAG_set_type = 0x20,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_shared_type	Dwarf.h	/^  DW_TAG_shared_type = 0x40,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_string_type	Dwarf.h	/^  DW_TAG_string_type = 0x12,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_structure_type	Dwarf.h	/^  DW_TAG_structure_type = 0x13,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_subprogram	Dwarf.h	/^  DW_TAG_subprogram = 0x2e,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_subrange_type	Dwarf.h	/^  DW_TAG_subrange_type = 0x21,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_subroutine_type	Dwarf.h	/^  DW_TAG_subroutine_type = 0x15,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_template_alias	Dwarf.h	/^  DW_TAG_template_alias = 0x43,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_template_type_parameter	Dwarf.h	/^  DW_TAG_template_type_parameter = 0x2f,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_template_value_parameter	Dwarf.h	/^  DW_TAG_template_value_parameter = 0x30,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_thrown_type	Dwarf.h	/^  DW_TAG_thrown_type = 0x31,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_try_block	Dwarf.h	/^  DW_TAG_try_block = 0x32,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_type_unit	Dwarf.h	/^  DW_TAG_type_unit = 0x41,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_typedef	Dwarf.h	/^  DW_TAG_typedef = 0x16,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_union_type	Dwarf.h	/^  DW_TAG_union_type = 0x17,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_unspecified_parameters	Dwarf.h	/^  DW_TAG_unspecified_parameters = 0x18,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_unspecified_type	Dwarf.h	/^  DW_TAG_unspecified_type = 0x3b,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_user_base	Dwarf.h	/^  DW_TAG_user_base = 0x1000,            \/\/ Recommended base for user tags.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_variable	Dwarf.h	/^  DW_TAG_variable = 0x34,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_variant	Dwarf.h	/^  DW_TAG_variant = 0x19,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_variant_part	Dwarf.h	/^  DW_TAG_variant_part = 0x33,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_vector_type	Dwarf.h	/^  DW_TAG_vector_type = 0x103,           \/\/ Tag for vector types.$/;"	e	enum:llvm::dwarf::llvm_dwarf_constants
DW_TAG_volatile_type	Dwarf.h	/^  DW_TAG_volatile_type = 0x35,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_TAG_with_stmt	Dwarf.h	/^  DW_TAG_with_stmt = 0x22,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIRTUALITY_none	Dwarf.h	/^  DW_VIRTUALITY_none = 0x00,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIRTUALITY_pure_virtual	Dwarf.h	/^  DW_VIRTUALITY_pure_virtual = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIRTUALITY_virtual	Dwarf.h	/^  DW_VIRTUALITY_virtual = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIS_exported	Dwarf.h	/^  DW_VIS_exported = 0x02,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIS_local	Dwarf.h	/^  DW_VIS_local = 0x01,$/;"	e	enum:llvm::dwarf::dwarf_constants
DW_VIS_qualified	Dwarf.h	/^  DW_VIS_qualified = 0x03,$/;"	e	enum:llvm::dwarf::dwarf_constants
Data	DataExtractor.h	/^  StringRef Data;$/;"	m	class:llvm::DataExtractor
Data	DynamicLibrary.h	/^    void *Data;$/;"	m	class:llvm::sys::DynamicLibrary
DataDirectory	COFF.h	/^  struct DataDirectory {$/;"	s	namespace:llvm::COFF
DataExtractor	DataExtractor.h	/^  DataExtractor(StringRef Data, bool IsLittleEndian, uint8_t PointerSize)$/;"	f	class:llvm::DataExtractor
DataExtractor	DataExtractor.h	/^class DataExtractor {$/;"	c	namespace:llvm
DataStreamer	DataStream.h	/^class DataStreamer {$/;"	c	namespace:llvm
Data_	Program.h	/^    void *Data_;$/;"	m	class:llvm::sys::Program
Deallocate	Allocator.h	/^  void Deallocate(const void * \/*Ptr*\/) {}$/;"	f	class:llvm::BumpPtrAllocator
Deallocate	Allocator.h	/^  void Deallocate(const void *Ptr) { free(const_cast<void*>(Ptr)); }$/;"	f	class:llvm::MallocAllocator
Deallocate	Recycler.h	/^  void Deallocate(AllocatorType & \/*Allocator*\/, SubClass* Element) {$/;"	f	class:llvm::Recycler
Deallocate	RecyclingAllocator.h	/^  void Deallocate(SubClass* E) { return Base.Deallocate(Allocator, E); }$/;"	f	class:llvm::RecyclingAllocator
DebugLoc	DebugLoc.h	/^    DebugLoc() : LineCol(0), ScopeIdx(0) {}  \/\/ Defaults to unknown.$/;"	f	class:llvm::DebugLoc
DebugLoc	DebugLoc.h	/^  class DebugLoc {$/;"	c	namespace:llvm
DebugType	COFF.h	/^  enum DebugType {$/;"	g	namespace:llvm::COFF
Default	CodeGen.h	/^      Default,     \/\/ -O2, -Os$/;"	e	enum:llvm::CodeGenOpt::Level
Default	CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
Default	CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	e	enum:llvm::Reloc::Model
Default	CommandLine.h	/^  OptionValue<DataType> Default;$/;"	m	class:llvm::cl::opt_storage
DefaultDOTGraphTraits	DOTGraphTraits.h	/^  explicit DefaultDOTGraphTraits(bool simple=false) : IsSimple (simple) {}$/;"	f	struct:llvm::DefaultDOTGraphTraits
DefaultDOTGraphTraits	DOTGraphTraits.h	/^struct DefaultDOTGraphTraits {$/;"	s	namespace:llvm
DefaultSlabAllocator	Allocator.h	/^  static MallocSlabAllocator DefaultSlabAllocator;$/;"	m	class:llvm::BumpPtrAllocator
DeleteIt	FileUtilities.h	/^    bool DeleteIt;$/;"	m	class:llvm::FileRemover
DeleteStream	FormattedStream.h	/^    bool DeleteStream;$/;"	m	class:llvm::formatted_raw_ostream
DeleterFn	ManagedStatic.h	/^  mutable void (*DeleterFn)(void*);$/;"	m	class:llvm::ManagedStaticBase
DenseMapInfo	DebugLoc.h	/^  struct DenseMapInfo<DebugLoc> {$/;"	s	namespace:llvm
DenseMapInfo	ValueHandle.h	/^struct DenseMapInfo<AssertingVH<T> > {$/;"	s	namespace:llvm
Desc	CommandLine.h	/^  const char *Desc;$/;"	m	struct:llvm::cl::desc
Desc	CommandLine.h	/^  const char *Desc;$/;"	m	struct:llvm::cl::value_desc
Desc	Registry.h	/^    const char *Name, *Desc;$/;"	m	class:llvm::SimpleRegistryEntry
DestroyAll	Allocator.h	/^  void DestroyAll() {$/;"	f	class:llvm::SpecificBumpPtrAllocator
DiagContext	SourceMgr.h	/^  void *DiagContext;$/;"	m	class:llvm::SourceMgr
DiagHandler	SourceMgr.h	/^  DiagHandlerTy DiagHandler;$/;"	m	class:llvm::SourceMgr
DiagHandlerTy	SourceMgr.h	/^  typedef void (*DiagHandlerTy)(const SMDiagnostic &, void *Context);$/;"	t	class:llvm::SourceMgr
DiagKind	SourceMgr.h	/^  enum DiagKind {$/;"	g	class:llvm::SourceMgr
DiffProcessState	IntegersSubsetMapping.h	/^  enum DiffProcessState {$/;"	g	class:llvm::IntegersSubsetMapping
DiffStateMachine	IntegersSubsetMapping.h	/^    DiffStateMachine(MappingTy *L,$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
DiffStateMachine	IntegersSubsetMapping.h	/^  class DiffStateMachine {$/;"	c	class:llvm::IntegersSubsetMapping
DirIterState	FileSystem.h	/^    DirIterState()$/;"	f	struct:llvm::sys::fs::detail::DirIterState
DirIterState	FileSystem.h	/^  struct DirIterState : public RefCountedBase<DirIterState> {$/;"	s	namespace:llvm::sys::fs::detail
Doc	YAMLParser.h	/^  OwningPtr<Document> &Doc;$/;"	m	class:llvm::yaml::Node
Doc	YAMLParser.h	/^  OwningPtr<Document> *Doc;$/;"	m	class:llvm::yaml::document_iterator
Document	YAMLParser.h	/^class Document {$/;"	c	namespace:llvm::yaml
DoubleToBits	MathExtras.h	/^inline uint64_t DoubleToBits(double Double) {$/;"	f	namespace:llvm
DynamicLibrary	DynamicLibrary.h	/^    explicit DynamicLibrary(void *data = &Invalid) : Data(data) {}$/;"	f	class:llvm::sys::DynamicLibrary
DynamicLibrary	DynamicLibrary.h	/^  class DynamicLibrary {$/;"	c	namespace:llvm::sys
DynamicNoPIC	CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	e	enum:llvm::Reloc::Model
E2BIG	system_error.h	250;"	d
EACCES	system_error.h	421;"	d
EADDRINUSE	system_error.h	241;"	d
EADDRNOTAVAIL	system_error.h	244;"	d
EAFNOSUPPORT	system_error.h	238;"	d
EAGAIN	system_error.h	436;"	d
EALREADY	system_error.h	271;"	d
EAX	Solaris.h	26;"	d
EBADF	system_error.h	259;"	d
EBADMSG	system_error.h	262;"	d
EBP	Solaris.h	31;"	d
EBUSY	system_error.h	286;"	d
EBX	Solaris.h	29;"	d
ECANCELED	system_error.h	403;"	d
ECHILD	system_error.h	349;"	d
ECONNABORTED	system_error.h	268;"	d
ECONNREFUSED	system_error.h	274;"	d
ECONNRESET	system_error.h	277;"	d
ECX	Solaris.h	27;"	d
EDEADLK	system_error.h	433;"	d
EDESTADDRREQ	system_error.h	283;"	d
EDI	Solaris.h	33;"	d
EDOM	system_error.h	253;"	d
EDX	Solaris.h	28;"	d
EEXIST	system_error.h	295;"	d
EFAULT	system_error.h	256;"	d
EFBIG	system_error.h	298;"	d
EFL	Solaris.h	36;"	d
EF_ARM_EABIMASK	ELF.h	/^enum { EF_ARM_EABIMASK = 0xFF000000U };$/;"	e	enum:llvm::ELF::__anon24
EF_MIPS_ARCH	ELF.h	/^  EF_MIPS_ARCH      = 0xf0000000  \/\/ Mask for applying EF_MIPS_ARCH_ variant$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_ARCH_1	ELF.h	/^  EF_MIPS_ARCH_1    = 0x00000000, \/\/ MIPS1 instruction set$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_ARCH_2	ELF.h	/^  EF_MIPS_ARCH_2    = 0x10000000, \/\/ MIPS2 instruction set$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_ARCH_3	ELF.h	/^  EF_MIPS_ARCH_3    = 0x20000000, \/\/ MIPS3 instruction set$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_ARCH_32	ELF.h	/^  EF_MIPS_ARCH_32   = 0x50000000, \/\/ MIPS32 instruction set per linux not elf.h$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_ARCH_32R2	ELF.h	/^  EF_MIPS_ARCH_32R2 = 0x70000000, \/\/ mips32r2$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_ARCH_4	ELF.h	/^  EF_MIPS_ARCH_4    = 0x30000000, \/\/ MIPS4 instruction set$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_ARCH_5	ELF.h	/^  EF_MIPS_ARCH_5    = 0x40000000, \/\/ MIPS5 instruction set$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_ARCH_64	ELF.h	/^  EF_MIPS_ARCH_64   = 0x60000000, \/\/ MIPS64 instruction set per linux not elf.h$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_ARCH_64R2	ELF.h	/^  EF_MIPS_ARCH_64R2 = 0x80000000, \/\/ mips64r2$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_CPIC	ELF.h	/^  EF_MIPS_CPIC      = 0x00000004, \/\/ Call object with Position independent code$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_NOREORDER	ELF.h	/^  EF_MIPS_NOREORDER = 0x00000001, \/\/ Don't reorder instructions$/;"	e	enum:llvm::ELF::__anon26
EF_MIPS_PIC	ELF.h	/^  EF_MIPS_PIC       = 0x00000002, \/\/ Position independent code$/;"	e	enum:llvm::ELF::__anon26
EHOSTUNREACH	system_error.h	307;"	d
EIDRM	system_error.h	310;"	d
EILSEQ	system_error.h	313;"	d
EINPROGRESS	system_error.h	406;"	d
EINTR	system_error.h	319;"	d
EINVAL	system_error.h	322;"	d
EIO	system_error.h	328;"	d
EIP	Solaris.h	34;"	d
EISCONN	system_error.h	247;"	d
EISDIR	system_error.h	331;"	d
EI_ABIVERSION	ELF.h	/^  EI_ABIVERSION = 8,          \/\/ ABI version.$/;"	e	enum:llvm::ELF::__anon12
EI_CLASS	ELF.h	/^  EI_CLASS      = 4,          \/\/ File class.$/;"	e	enum:llvm::ELF::__anon12
EI_DATA	ELF.h	/^  EI_DATA       = 5,          \/\/ Data encoding.$/;"	e	enum:llvm::ELF::__anon12
EI_MAG0	ELF.h	/^  EI_MAG0       = 0,          \/\/ File identification index.$/;"	e	enum:llvm::ELF::__anon12
EI_MAG1	ELF.h	/^  EI_MAG1       = 1,          \/\/ File identification index.$/;"	e	enum:llvm::ELF::__anon12
EI_MAG2	ELF.h	/^  EI_MAG2       = 2,          \/\/ File identification index.$/;"	e	enum:llvm::ELF::__anon12
EI_MAG3	ELF.h	/^  EI_MAG3       = 3,          \/\/ File identification index.$/;"	e	enum:llvm::ELF::__anon12
EI_NIDENT	ELF.h	/^  EI_NIDENT     = 16          \/\/ Number of bytes in e_ident.$/;"	e	enum:llvm::ELF::__anon12
EI_OSABI	ELF.h	/^  EI_OSABI      = 7,          \/\/ OS\/ABI identification.$/;"	e	enum:llvm::ELF::__anon12
EI_PAD	ELF.h	/^  EI_PAD        = 9,          \/\/ Start of padding bytes.$/;"	e	enum:llvm::ELF::__anon12
EI_VERSION	ELF.h	/^  EI_VERSION    = 6,          \/\/ File version.$/;"	e	enum:llvm::ELF::__anon12
ELF	ELF.h	/^namespace ELF {$/;"	n	namespace:llvm
ELFCLASS32	ELF.h	/^  ELFCLASS32 = 1, \/\/ 32-bit object file$/;"	e	enum:llvm::ELF::__anon16
ELFCLASS64	ELF.h	/^  ELFCLASS64 = 2  \/\/ 64-bit object file$/;"	e	enum:llvm::ELF::__anon16
ELFCLASSNONE	ELF.h	/^  ELFCLASSNONE = 0,$/;"	e	enum:llvm::ELF::__anon16
ELFDATA2LSB	ELF.h	/^  ELFDATA2LSB = 1, \/\/ Little-endian object file$/;"	e	enum:llvm::ELF::__anon17
ELFDATA2MSB	ELF.h	/^  ELFDATA2MSB = 2  \/\/ Big-endian object file$/;"	e	enum:llvm::ELF::__anon17
ELFDATANONE	ELF.h	/^  ELFDATANONE = 0, \/\/ Invalid data encoding.$/;"	e	enum:llvm::ELF::__anon17
ELFOSABI_AIX	ELF.h	/^  ELFOSABI_AIX = 7,           \/\/ AIX$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_ARM	ELF.h	/^  ELFOSABI_ARM = 97,          \/\/ ARM$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_AROS	ELF.h	/^  ELFOSABI_AROS = 15,         \/\/ AROS$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_C6000_ELFABI	ELF.h	/^  ELFOSABI_C6000_ELFABI = 64, \/\/ Bare-metal TMS320C6000$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_C6000_LINUX	ELF.h	/^  ELFOSABI_C6000_LINUX = 65,  \/\/ Linux TMS320C6000$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_FENIXOS	ELF.h	/^  ELFOSABI_FENIXOS = 16,      \/\/ FenixOS$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_FREEBSD	ELF.h	/^  ELFOSABI_FREEBSD = 9,       \/\/ FreeBSD$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_HPUX	ELF.h	/^  ELFOSABI_HPUX = 1,          \/\/ HP-UX operating system$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_HURD	ELF.h	/^  ELFOSABI_HURD = 4,          \/\/ GNU\/Hurd$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_IRIX	ELF.h	/^  ELFOSABI_IRIX = 8,          \/\/ IRIX$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_LINUX	ELF.h	/^  ELFOSABI_LINUX = 3,         \/\/ GNU\/Linux$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_MODESTO	ELF.h	/^  ELFOSABI_MODESTO = 11,      \/\/ Novell Modesto$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_NETBSD	ELF.h	/^  ELFOSABI_NETBSD = 2,        \/\/ NetBSD$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_NONE	ELF.h	/^  ELFOSABI_NONE = 0,          \/\/ UNIX System V ABI$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_NSK	ELF.h	/^  ELFOSABI_NSK = 14,          \/\/ Hewlett-Packard Non-Stop Kernel$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_OPENBSD	ELF.h	/^  ELFOSABI_OPENBSD = 12,      \/\/ OpenBSD$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_OPENVMS	ELF.h	/^  ELFOSABI_OPENVMS = 13,      \/\/ OpenVMS$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_SOLARIS	ELF.h	/^  ELFOSABI_SOLARIS = 6,       \/\/ Solaris$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_STANDALONE	ELF.h	/^  ELFOSABI_STANDALONE = 255   \/\/ Standalone (embedded) application$/;"	e	enum:llvm::ELF::__anon18
ELFOSABI_TRU64	ELF.h	/^  ELFOSABI_TRU64 = 10,        \/\/ TRU64 UNIX$/;"	e	enum:llvm::ELF::__anon18
ELF_Core_FileType	PathV1.h	/^    ELF_Core_FileType,                 \/\/\/< ELF core image$/;"	e	enum:llvm::sys::LLVMFileType
ELF_Executable_FileType	PathV1.h	/^    ELF_Executable_FileType,           \/\/\/< ELF Executable image$/;"	e	enum:llvm::sys::LLVMFileType
ELF_Relocatable_FileType	PathV1.h	/^    ELF_Relocatable_FileType,          \/\/\/< ELF Relocatable object file$/;"	e	enum:llvm::sys::LLVMFileType
ELF_SharedObject_FileType	PathV1.h	/^    ELF_SharedObject_FileType,         \/\/\/< ELF dynamically linked shared lib$/;"	e	enum:llvm::sys::LLVMFileType
ELOOP	system_error.h	463;"	d
EMFILE	system_error.h	457;"	d
EMLINK	system_error.h	460;"	d
EMSGSIZE	system_error.h	334;"	d
EM_386	ELF.h	/^  EM_386           = 3, \/\/ Intel 386$/;"	e	enum:llvm::ELF::__anon15
EM_486	ELF.h	/^  EM_486           = 6, \/\/ Intel 486 (deprecated)$/;"	e	enum:llvm::ELF::__anon15
EM_56800EX	ELF.h	/^  EM_56800EX       = 200, \/\/ Freescale 56800EX Digital Signal Controller (DSC)$/;"	e	enum:llvm::ELF::__anon15
EM_68HC05	ELF.h	/^  EM_68HC05        = 72, \/\/ Motorola MC68HC05 Microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_68HC08	ELF.h	/^  EM_68HC08        = 71, \/\/ Motorola MC68HC08 Microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_68HC11	ELF.h	/^  EM_68HC11        = 70, \/\/ Motorola MC68HC11 Microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_68HC12	ELF.h	/^  EM_68HC12        = 53, \/\/ Motorola M68HC12$/;"	e	enum:llvm::ELF::__anon15
EM_68HC16	ELF.h	/^  EM_68HC16        = 69, \/\/ Motorola MC68HC16 Microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_68K	ELF.h	/^  EM_68K           = 4, \/\/ Motorola 68000$/;"	e	enum:llvm::ELF::__anon15
EM_78KOR	ELF.h	/^  EM_78KOR         = 199, \/\/ Renesas 78KOR family$/;"	e	enum:llvm::ELF::__anon15
EM_8051	ELF.h	/^  EM_8051          = 165, \/\/ Intel 8051 and variants$/;"	e	enum:llvm::ELF::__anon15
EM_860	ELF.h	/^  EM_860           = 7, \/\/ Intel 80860$/;"	e	enum:llvm::ELF::__anon15
EM_88K	ELF.h	/^  EM_88K           = 5, \/\/ Motorola 88000$/;"	e	enum:llvm::ELF::__anon15
EM_960	ELF.h	/^  EM_960           = 19, \/\/ Intel 80960$/;"	e	enum:llvm::ELF::__anon15
EM_ALPHA	ELF.h	/^  EM_ALPHA         = 41, \/\/ DEC Alpha$/;"	e	enum:llvm::ELF::__anon15
EM_ALTERA_NIOS2	ELF.h	/^  EM_ALTERA_NIOS2  = 113, \/\/ Altera Nios II soft-core processor$/;"	e	enum:llvm::ELF::__anon15
EM_ARC	ELF.h	/^  EM_ARC           = 45, \/\/ Argonaut RISC Core$/;"	e	enum:llvm::ELF::__anon15
EM_ARCA	ELF.h	/^  EM_ARCA          = 109, \/\/ Arca RISC Microprocessor$/;"	e	enum:llvm::ELF::__anon15
EM_ARC_COMPACT	ELF.h	/^  EM_ARC_COMPACT   = 93, \/\/ ARC International ARCompact processor (old$/;"	e	enum:llvm::ELF::__anon15
EM_ARC_COMPACT2	ELF.h	/^  EM_ARC_COMPACT2  = 195, \/\/ Synopsys ARCompact V2$/;"	e	enum:llvm::ELF::__anon15
EM_ARM	ELF.h	/^  EM_ARM           = 40, \/\/ ARM$/;"	e	enum:llvm::ELF::__anon15
EM_AVR	ELF.h	/^  EM_AVR           = 83, \/\/ Atmel AVR 8-bit microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_AVR32	ELF.h	/^  EM_AVR32         = 185, \/\/ Atmel Corporation 32-bit microprocessor family$/;"	e	enum:llvm::ELF::__anon15
EM_BLACKFIN	ELF.h	/^  EM_BLACKFIN      = 106, \/\/ Analog Devices Blackfin (DSP) processor$/;"	e	enum:llvm::ELF::__anon15
EM_C166	ELF.h	/^  EM_C166          = 116, \/\/ Infineon C16x\/XC16x processor$/;"	e	enum:llvm::ELF::__anon15
EM_CE	ELF.h	/^  EM_CE            = 119, \/\/ Freescale Communication Engine RISC core$/;"	e	enum:llvm::ELF::__anon15
EM_CLOUDSHIELD	ELF.h	/^  EM_CLOUDSHIELD   = 192, \/\/ CloudShield architecture family$/;"	e	enum:llvm::ELF::__anon15
EM_COLDFIRE	ELF.h	/^  EM_COLDFIRE      = 52, \/\/ Motorola ColdFire$/;"	e	enum:llvm::ELF::__anon15
EM_COREA_1ST	ELF.h	/^  EM_COREA_1ST     = 193, \/\/ KIPO-KAIST Core-A 1st generation processor family$/;"	e	enum:llvm::ELF::__anon15
EM_COREA_2ND	ELF.h	/^  EM_COREA_2ND     = 194, \/\/ KIPO-KAIST Core-A 2nd generation processor family$/;"	e	enum:llvm::ELF::__anon15
EM_CR	ELF.h	/^  EM_CR            = 103, \/\/ National Semiconductor CompactRISC microprocessor$/;"	e	enum:llvm::ELF::__anon15
EM_CR16	ELF.h	/^  EM_CR16          = 177, \/\/ National Semiconductor CompactRISC CR16 16-bit$/;"	e	enum:llvm::ELF::__anon15
EM_CRAYNV2	ELF.h	/^  EM_CRAYNV2       = 172, \/\/ Cray Inc. NV2 vector architecture$/;"	e	enum:llvm::ELF::__anon15
EM_CRIS	ELF.h	/^  EM_CRIS          = 76, \/\/ Axis Communications 32-bit embedded processor$/;"	e	enum:llvm::ELF::__anon15
EM_CRX	ELF.h	/^  EM_CRX           = 114, \/\/ National Semiconductor CompactRISC CRX$/;"	e	enum:llvm::ELF::__anon15
EM_CUDA	ELF.h	/^  EM_CUDA          = 190, \/\/ NVIDIA CUDA architecture$/;"	e	enum:llvm::ELF::__anon15
EM_CYPRESS_M8C	ELF.h	/^  EM_CYPRESS_M8C   = 161, \/\/ Cypress M8C microprocessor$/;"	e	enum:llvm::ELF::__anon15
EM_D10V	ELF.h	/^  EM_D10V          = 85, \/\/ Mitsubishi D10V$/;"	e	enum:llvm::ELF::__anon15
EM_D30V	ELF.h	/^  EM_D30V          = 86, \/\/ Mitsubishi D30V$/;"	e	enum:llvm::ELF::__anon15
EM_DSP24	ELF.h	/^  EM_DSP24         = 136, \/\/ New Japan Radio (NJR) 24-bit DSP Processor$/;"	e	enum:llvm::ELF::__anon15
EM_DSPIC30F	ELF.h	/^  EM_DSPIC30F      = 118, \/\/ Microchip Technology dsPIC30F Digital Signal$/;"	e	enum:llvm::ELF::__anon15
EM_DXP	ELF.h	/^  EM_DXP           = 112, \/\/ Icera Semiconductor Inc. Deep Execution Processor$/;"	e	enum:llvm::ELF::__anon15
EM_ECOG1	ELF.h	/^  EM_ECOG1         = 168, \/\/ Cyan Technology eCOG1X family$/;"	e	enum:llvm::ELF::__anon15
EM_ECOG16	ELF.h	/^  EM_ECOG16        = 176, \/\/ Cyan Technology eCOG16 family$/;"	e	enum:llvm::ELF::__anon15
EM_ECOG1X	ELF.h	/^  EM_ECOG1X        = 168, \/\/ Cyan Technology eCOG1X family$/;"	e	enum:llvm::ELF::__anon15
EM_ECOG2	ELF.h	/^  EM_ECOG2         = 134, \/\/ Cyan Technology eCOG2 microprocessor$/;"	e	enum:llvm::ELF::__anon15
EM_ETPU	ELF.h	/^  EM_ETPU          = 178, \/\/ Freescale Extended Time Processing Unit$/;"	e	enum:llvm::ELF::__anon15
EM_EXCESS	ELF.h	/^  EM_EXCESS        = 111, \/\/ eXcess: 16\/32\/64-bit configurable embedded CPU$/;"	e	enum:llvm::ELF::__anon15
EM_F2MC16	ELF.h	/^  EM_F2MC16        = 104, \/\/ Fujitsu F2MC16$/;"	e	enum:llvm::ELF::__anon15
EM_FIREPATH	ELF.h	/^  EM_FIREPATH      = 78, \/\/ Element 14 64-bit DSP Processor$/;"	e	enum:llvm::ELF::__anon15
EM_FR20	ELF.h	/^  EM_FR20          = 37, \/\/ Fujitsu FR20$/;"	e	enum:llvm::ELF::__anon15
EM_FR30	ELF.h	/^  EM_FR30          = 84, \/\/ Fujitsu FR30$/;"	e	enum:llvm::ELF::__anon15
EM_FX66	ELF.h	/^  EM_FX66          = 66, \/\/ Siemens FX66 microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_H8S	ELF.h	/^  EM_H8S           = 48, \/\/ Hitachi H8S$/;"	e	enum:llvm::ELF::__anon15
EM_H8_300	ELF.h	/^  EM_H8_300        = 46, \/\/ Hitachi H8\/300$/;"	e	enum:llvm::ELF::__anon15
EM_H8_300H	ELF.h	/^  EM_H8_300H       = 47, \/\/ Hitachi H8\/300H$/;"	e	enum:llvm::ELF::__anon15
EM_H8_500	ELF.h	/^  EM_H8_500        = 49, \/\/ Hitachi H8\/500$/;"	e	enum:llvm::ELF::__anon15
EM_HEXAGON	ELF.h	/^  EM_HEXAGON       = 164, \/\/ Qualcomm Hexagon processor$/;"	e	enum:llvm::ELF::__anon15
EM_HUANY	ELF.h	/^  EM_HUANY         = 81, \/\/ Harvard University machine-independent object files$/;"	e	enum:llvm::ELF::__anon15
EM_IA_64	ELF.h	/^  EM_IA_64         = 50, \/\/ Intel IA-64 processor architecture$/;"	e	enum:llvm::ELF::__anon15
EM_IP2K	ELF.h	/^  EM_IP2K          = 101, \/\/ Ubicom IP2xxx microcontroller family$/;"	e	enum:llvm::ELF::__anon15
EM_JAVELIN	ELF.h	/^  EM_JAVELIN       = 77, \/\/ Infineon Technologies 32-bit embedded processor$/;"	e	enum:llvm::ELF::__anon15
EM_K10M	ELF.h	/^  EM_K10M          = 181, \/\/ Intel K10M$/;"	e	enum:llvm::ELF::__anon15
EM_L10M	ELF.h	/^  EM_L10M          = 180, \/\/ Intel L10M$/;"	e	enum:llvm::ELF::__anon15
EM_LATTICEMICO32	ELF.h	/^  EM_LATTICEMICO32 = 138, \/\/ RISC processor for Lattice FPGA architecture$/;"	e	enum:llvm::ELF::__anon15
EM_M16C	ELF.h	/^  EM_M16C          = 117, \/\/ Renesas M16C series microprocessors$/;"	e	enum:llvm::ELF::__anon15
EM_M32	ELF.h	/^  EM_M32           = 1, \/\/ AT&T WE 32100$/;"	e	enum:llvm::ELF::__anon15
EM_M32C	ELF.h	/^  EM_M32C          = 120, \/\/ Renesas M32C series microprocessors$/;"	e	enum:llvm::ELF::__anon15
EM_M32R	ELF.h	/^  EM_M32R          = 88, \/\/ Mitsubishi M32R$/;"	e	enum:llvm::ELF::__anon15
EM_MANIK	ELF.h	/^  EM_MANIK         = 171, \/\/ M2000 Reconfigurable RISC Microprocessor$/;"	e	enum:llvm::ELF::__anon15
EM_MAX	ELF.h	/^  EM_MAX           = 102, \/\/ MAX Processor$/;"	e	enum:llvm::ELF::__anon15
EM_MAXQ30	ELF.h	/^  EM_MAXQ30        = 169, \/\/ Dallas Semiconductor MAXQ30 Core Micro-controllers$/;"	e	enum:llvm::ELF::__anon15
EM_MBLAZE	ELF.h	/^  EM_MBLAZE        = 47787 \/\/ Xilinx MicroBlaze$/;"	e	enum:llvm::ELF::__anon15
EM_MCST_ELBRUS	ELF.h	/^  EM_MCST_ELBRUS   = 175, \/\/ MCST Elbrus general purpose hardware architecture$/;"	e	enum:llvm::ELF::__anon15
EM_ME16	ELF.h	/^  EM_ME16          = 59, \/\/ Toyota ME16 processor$/;"	e	enum:llvm::ELF::__anon15
EM_METAG	ELF.h	/^  EM_METAG         = 174, \/\/ Imagination Technologies META processor$/;"	e	enum:llvm::ELF::__anon15
EM_MICROBLAZE	ELF.h	/^  EM_MICROBLAZE    = 189, \/\/ Xilinx MicroBlaze 32-bit RISC soft processor core$/;"	e	enum:llvm::ELF::__anon15
EM_MIPS	ELF.h	/^  EM_MIPS          = 8, \/\/ MIPS R3000$/;"	e	enum:llvm::ELF::__anon15
EM_MIPS_RS3_LE	ELF.h	/^  EM_MIPS_RS3_LE   = 10, \/\/ MIPS RS3000 Little-endian$/;"	e	enum:llvm::ELF::__anon15
EM_MIPS_X	ELF.h	/^  EM_MIPS_X        = 51, \/\/ Stanford MIPS-X$/;"	e	enum:llvm::ELF::__anon15
EM_MMA	ELF.h	/^  EM_MMA           = 54, \/\/ Fujitsu MMA Multimedia Accelerator$/;"	e	enum:llvm::ELF::__anon15
EM_MMDSP_PLUS	ELF.h	/^  EM_MMDSP_PLUS    = 160, \/\/ STMicroelectronics 64bit VLIW Data Signal Processor$/;"	e	enum:llvm::ELF::__anon15
EM_MMIX	ELF.h	/^  EM_MMIX          = 80, \/\/ Donald Knuth's educational 64-bit processor$/;"	e	enum:llvm::ELF::__anon15
EM_MN10200	ELF.h	/^  EM_MN10200       = 90, \/\/ Matsushita MN10200$/;"	e	enum:llvm::ELF::__anon15
EM_MN10300	ELF.h	/^  EM_MN10300       = 89, \/\/ Matsushita MN10300$/;"	e	enum:llvm::ELF::__anon15
EM_MSP430	ELF.h	/^  EM_MSP430        = 105, \/\/ Texas Instruments embedded microcontroller msp430$/;"	e	enum:llvm::ELF::__anon15
EM_NCPU	ELF.h	/^  EM_NCPU          = 56, \/\/ Sony nCPU embedded RISC processor$/;"	e	enum:llvm::ELF::__anon15
EM_NDR1	ELF.h	/^  EM_NDR1          = 57, \/\/ Denso NDR1 microprocessor$/;"	e	enum:llvm::ELF::__anon15
EM_NDS32	ELF.h	/^  EM_NDS32         = 167, \/\/ Andes Technology compact code size embedded RISC$/;"	e	enum:llvm::ELF::__anon15
EM_NONE	ELF.h	/^  EM_NONE          = 0, \/\/ No machine$/;"	e	enum:llvm::ELF::__anon15
EM_NS32K	ELF.h	/^  EM_NS32K         = 97, \/\/ National Semiconductor 32000 series$/;"	e	enum:llvm::ELF::__anon15
EM_OPEN8	ELF.h	/^  EM_OPEN8         = 196, \/\/ Open8 8-bit RISC soft processor core$/;"	e	enum:llvm::ELF::__anon15
EM_OPENRISC	ELF.h	/^  EM_OPENRISC      = 92, \/\/ OpenRISC 32-bit embedded processor$/;"	e	enum:llvm::ELF::__anon15
EM_PARISC	ELF.h	/^  EM_PARISC        = 15, \/\/ Hewlett-Packard PA-RISC$/;"	e	enum:llvm::ELF::__anon15
EM_PCP	ELF.h	/^  EM_PCP           = 55, \/\/ Siemens PCP$/;"	e	enum:llvm::ELF::__anon15
EM_PDP10	ELF.h	/^  EM_PDP10         = 64, \/\/ Digital Equipment Corp. PDP-10$/;"	e	enum:llvm::ELF::__anon15
EM_PDP11	ELF.h	/^  EM_PDP11         = 65, \/\/ Digital Equipment Corp. PDP-11$/;"	e	enum:llvm::ELF::__anon15
EM_PDSP	ELF.h	/^  EM_PDSP          = 63, \/\/ Sony DSP Processor$/;"	e	enum:llvm::ELF::__anon15
EM_PJ	ELF.h	/^  EM_PJ            = 91, \/\/ picoJava$/;"	e	enum:llvm::ELF::__anon15
EM_PPC	ELF.h	/^  EM_PPC           = 20, \/\/ PowerPC$/;"	e	enum:llvm::ELF::__anon15
EM_PPC64	ELF.h	/^  EM_PPC64         = 21, \/\/ PowerPC64$/;"	e	enum:llvm::ELF::__anon15
EM_PRISM	ELF.h	/^  EM_PRISM         = 82, \/\/ SiTera Prism$/;"	e	enum:llvm::ELF::__anon15
EM_R32C	ELF.h	/^  EM_R32C          = 162, \/\/ Renesas R32C series microprocessors$/;"	e	enum:llvm::ELF::__anon15
EM_RCE	ELF.h	/^  EM_RCE           = 39, \/\/ Motorola RCE$/;"	e	enum:llvm::ELF::__anon15
EM_RH32	ELF.h	/^  EM_RH32          = 38, \/\/ TRW RH-32$/;"	e	enum:llvm::ELF::__anon15
EM_RL78	ELF.h	/^  EM_RL78          = 197, \/\/ Renesas RL78 family$/;"	e	enum:llvm::ELF::__anon15
EM_RS08	ELF.h	/^  EM_RS08          = 132, \/\/ Freescale RS08 embedded processor$/;"	e	enum:llvm::ELF::__anon15
EM_RX	ELF.h	/^  EM_RX            = 173, \/\/ Renesas RX family$/;"	e	enum:llvm::ELF::__anon15
EM_S370	ELF.h	/^  EM_S370          = 9, \/\/ IBM System\/370$/;"	e	enum:llvm::ELF::__anon15
EM_S390	ELF.h	/^  EM_S390          = 22, \/\/ IBM System\/390$/;"	e	enum:llvm::ELF::__anon15
EM_SCORE7	ELF.h	/^  EM_SCORE7        = 135, \/\/ Sunplus S+core7 RISC processor$/;"	e	enum:llvm::ELF::__anon15
EM_SEP	ELF.h	/^  EM_SEP           = 108, \/\/ Sharp embedded microprocessor$/;"	e	enum:llvm::ELF::__anon15
EM_SE_C17	ELF.h	/^  EM_SE_C17        = 139, \/\/ Seiko Epson C17 family$/;"	e	enum:llvm::ELF::__anon15
EM_SE_C33	ELF.h	/^  EM_SE_C33        = 107, \/\/ S1C33 Family of Seiko Epson processors$/;"	e	enum:llvm::ELF::__anon15
EM_SH	ELF.h	/^  EM_SH            = 42, \/\/ Hitachi SH$/;"	e	enum:llvm::ELF::__anon15
EM_SHARC	ELF.h	/^  EM_SHARC         = 133, \/\/ Analog Devices SHARC family of 32-bit DSP$/;"	e	enum:llvm::ELF::__anon15
EM_SLE9X	ELF.h	/^  EM_SLE9X         = 179, \/\/ Infineon Technologies SLE9X core$/;"	e	enum:llvm::ELF::__anon15
EM_SNP1K	ELF.h	/^  EM_SNP1K         = 99, \/\/ Trebia SNP 1000 processor$/;"	e	enum:llvm::ELF::__anon15
EM_SPARC	ELF.h	/^  EM_SPARC         = 2, \/\/ SPARC$/;"	e	enum:llvm::ELF::__anon15
EM_SPARC32PLUS	ELF.h	/^  EM_SPARC32PLUS   = 18, \/\/ Enhanced instruction set SPARC$/;"	e	enum:llvm::ELF::__anon15
EM_SPARCV9	ELF.h	/^  EM_SPARCV9       = 43, \/\/ SPARC V9$/;"	e	enum:llvm::ELF::__anon15
EM_SPU	ELF.h	/^  EM_SPU           = 23, \/\/ IBM SPU\/SPC$/;"	e	enum:llvm::ELF::__anon15
EM_ST100	ELF.h	/^  EM_ST100         = 60, \/\/ STMicroelectronics ST100 processor$/;"	e	enum:llvm::ELF::__anon15
EM_ST19	ELF.h	/^  EM_ST19          = 74, \/\/ STMicroelectronics ST19 8-bit microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_ST200	ELF.h	/^  EM_ST200         = 100, \/\/ STMicroelectronics (www.st.com) ST200$/;"	e	enum:llvm::ELF::__anon15
EM_ST7	ELF.h	/^  EM_ST7           = 68, \/\/ STMicroelectronics ST7 8-bit microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_ST9PLUS	ELF.h	/^  EM_ST9PLUS       = 67, \/\/ STMicroelectronics ST9+ 8\/16 bit microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_STARCORE	ELF.h	/^  EM_STARCORE      = 58, \/\/ Motorola Star*Core processor$/;"	e	enum:llvm::ELF::__anon15
EM_STM8	ELF.h	/^  EM_STM8          = 186, \/\/ STMicroeletronics STM8 8-bit microcontroller$/;"	e	enum:llvm::ELF::__anon15
EM_STXP7X	ELF.h	/^  EM_STXP7X        = 166, \/\/ STMicroelectronics STxP7x family of configurable$/;"	e	enum:llvm::ELF::__anon15
EM_SVX	ELF.h	/^  EM_SVX           = 73, \/\/ Silicon Graphics SVx$/;"	e	enum:llvm::ELF::__anon15
EM_TILE64	ELF.h	/^  EM_TILE64        = 187, \/\/ Tilera TILE64 multicore architecture family$/;"	e	enum:llvm::ELF::__anon15
EM_TILEGX	ELF.h	/^  EM_TILEGX        = 191, \/\/ Tilera TILE-Gx multicore architecture family$/;"	e	enum:llvm::ELF::__anon15
EM_TILEPRO	ELF.h	/^  EM_TILEPRO       = 188, \/\/ Tilera TILEPro multicore architecture family$/;"	e	enum:llvm::ELF::__anon15
EM_TINYJ	ELF.h	/^  EM_TINYJ         = 61, \/\/ Advanced Logic Corp. TinyJ embedded processor family$/;"	e	enum:llvm::ELF::__anon15
EM_TI_C2000	ELF.h	/^  EM_TI_C2000      = 141, \/\/ The Texas Instruments TMS320C2000 DSP family$/;"	e	enum:llvm::ELF::__anon15
EM_TI_C5500	ELF.h	/^  EM_TI_C5500      = 142, \/\/ The Texas Instruments TMS320C55x DSP family$/;"	e	enum:llvm::ELF::__anon15
EM_TI_C6000	ELF.h	/^  EM_TI_C6000      = 140, \/\/ The Texas Instruments TMS320C6000 DSP family$/;"	e	enum:llvm::ELF::__anon15
EM_TMM_GPP	ELF.h	/^  EM_TMM_GPP       = 96, \/\/ Thompson Multimedia General Purpose Processor$/;"	e	enum:llvm::ELF::__anon15
EM_TPC	ELF.h	/^  EM_TPC           = 98, \/\/ Tenor Network TPC processor$/;"	e	enum:llvm::ELF::__anon15
EM_TRICORE	ELF.h	/^  EM_TRICORE       = 44, \/\/ Siemens TriCore$/;"	e	enum:llvm::ELF::__anon15
EM_TRIMEDIA	ELF.h	/^  EM_TRIMEDIA      = 163, \/\/ NXP Semiconductors TriMedia architecture family$/;"	e	enum:llvm::ELF::__anon15
EM_TSK3000	ELF.h	/^  EM_TSK3000       = 131, \/\/ Altium TSK3000 core$/;"	e	enum:llvm::ELF::__anon15
EM_UNICORE	ELF.h	/^  EM_UNICORE       = 110, \/\/ Microprocessor series from PKU-Unity Ltd. and MPRC$/;"	e	enum:llvm::ELF::__anon15
EM_V800	ELF.h	/^  EM_V800          = 36, \/\/ NEC V800$/;"	e	enum:llvm::ELF::__anon15
EM_V850	ELF.h	/^  EM_V850          = 87, \/\/ NEC v850$/;"	e	enum:llvm::ELF::__anon15
EM_VAX	ELF.h	/^  EM_VAX           = 75, \/\/ Digital VAX$/;"	e	enum:llvm::ELF::__anon15
EM_VIDEOCORE	ELF.h	/^  EM_VIDEOCORE     = 95, \/\/ Alphamosaic VideoCore processor$/;"	e	enum:llvm::ELF::__anon15
EM_VIDEOCORE3	ELF.h	/^  EM_VIDEOCORE3    = 137, \/\/ Broadcom VideoCore III processor$/;"	e	enum:llvm::ELF::__anon15
EM_VIDEOCORE5	ELF.h	/^  EM_VIDEOCORE5    = 198, \/\/ Broadcom VideoCore V processor$/;"	e	enum:llvm::ELF::__anon15
EM_VPP500	ELF.h	/^  EM_VPP500        = 17, \/\/ Fujitsu VPP500$/;"	e	enum:llvm::ELF::__anon15
EM_X86_64	ELF.h	/^  EM_X86_64        = 62, \/\/ AMD x86-64 architecture$/;"	e	enum:llvm::ELF::__anon15
EM_XGATE	ELF.h	/^  EM_XGATE         = 115, \/\/ Motorola XGATE embedded processor$/;"	e	enum:llvm::ELF::__anon15
EM_XIMO16	ELF.h	/^  EM_XIMO16        = 170, \/\/ New Japan Radio (NJR) 16-bit DSP Processor$/;"	e	enum:llvm::ELF::__anon15
EM_XTENSA	ELF.h	/^  EM_XTENSA        = 94, \/\/ Tensilica Xtensa Architecture$/;"	e	enum:llvm::ELF::__anon15
EM_ZSP	ELF.h	/^  EM_ZSP           = 79, \/\/ LSI Logic 16-bit DSP Processor$/;"	e	enum:llvm::ELF::__anon15
ENAMETOOLONG	system_error.h	301;"	d
ENETDOWN	system_error.h	337;"	d
ENETRESET	system_error.h	340;"	d
ENETUNREACH	system_error.h	343;"	d
ENFILE	system_error.h	454;"	d
ENOBUFS	system_error.h	346;"	d
ENODATA	system_error.h	358;"	d
ENODEV	system_error.h	376;"	d
ENOENT	system_error.h	379;"	d
ENOEXEC	system_error.h	292;"	d
ENOLCK	system_error.h	355;"	d
ENOLINK	system_error.h	352;"	d
ENOMEM	system_error.h	397;"	d
ENOMSG	system_error.h	361;"	d
ENOPROTOOPT	system_error.h	364;"	d
ENOSPC	system_error.h	367;"	d
ENOSR	system_error.h	370;"	d
ENOSTR	system_error.h	391;"	d
ENOSYS	system_error.h	304;"	d
ENOTCONN	system_error.h	394;"	d
ENOTDIR	system_error.h	385;"	d
ENOTEMPTY	system_error.h	289;"	d
ENOTRECOVERABLE	system_error.h	442;"	d
ENOTSOCK	system_error.h	388;"	d
ENOTSUP	system_error.h	400;"	d
ENOTTY	system_error.h	316;"	d
ENTRY_FREQ	BlockFrequency.h	/^  static const int64_t ENTRY_FREQ = 1024;$/;"	m	class:llvm::BlockFrequency
ENXIO	system_error.h	373;"	d
EOFReached	StreamableMemoryObject.h	/^  mutable bool EOFReached;$/;"	m	class:llvm::StreamingMemoryObject
EOPNOTSUPP	system_error.h	412;"	d
EOVERFLOW	system_error.h	466;"	d
EOWNERDEAD	system_error.h	418;"	d
EPERM	system_error.h	409;"	d
EPIPE	system_error.h	265;"	d
EPROTO	system_error.h	424;"	d
EPROTONOSUPPORT	system_error.h	427;"	d
EPROTOTYPE	system_error.h	469;"	d
ERANGE	system_error.h	439;"	d
EROFS	system_error.h	430;"	d
ERR	Solaris.h	37;"	d
ES	Solaris.h	22;"	d
ESI	Solaris.h	32;"	d
ESP	Solaris.h	30;"	d
ESPIPE	system_error.h	325;"	d
ESRCH	system_error.h	382;"	d
ETIME	system_error.h	445;"	d
ETIMEDOUT	system_error.h	451;"	d
ETXTBSY	system_error.h	448;"	d
ET_CORE	ELF.h	/^  ET_CORE   = 4,      \/\/ Core file$/;"	e	enum:llvm::ELF::__anon13
ET_DYN	ELF.h	/^  ET_DYN    = 3,      \/\/ Shared object file$/;"	e	enum:llvm::ELF::__anon13
ET_EXEC	ELF.h	/^  ET_EXEC   = 2,      \/\/ Executable file$/;"	e	enum:llvm::ELF::__anon13
ET_HIPROC	ELF.h	/^  ET_HIPROC = 0xffff  \/\/ Processor-specific$/;"	e	enum:llvm::ELF::__anon13
ET_LOPROC	ELF.h	/^  ET_LOPROC = 0xff00, \/\/ Beginning of processor-specific codes$/;"	e	enum:llvm::ELF::__anon13
ET_NONE	ELF.h	/^  ET_NONE   = 0,      \/\/ No file type$/;"	e	enum:llvm::ELF::__anon13
ET_REL	ELF.h	/^  ET_REL    = 1,      \/\/ Relocatable file$/;"	e	enum:llvm::ELF::__anon13
EV_CURRENT	ELF.h	/^  EV_CURRENT = 1$/;"	e	enum:llvm::ELF::__anon14
EV_NONE	ELF.h	/^  EV_NONE = 0,$/;"	e	enum:llvm::ELF::__anon14
EWOULDBLOCK	system_error.h	415;"	d
EXDEV	system_error.h	280;"	d
EXTERN_TEMPLATE_INSTANTIATION	Compiler.h	139;"	d
EXTERN_TEMPLATE_INSTANTIATION	Compiler.h	142;"	d
Edges	GCOV.h	/^  SmallVector<uint32_t, 16> Edges;$/;"	m	class:llvm::GCOVBlock
Elf32_Addr	ELF.h	/^typedef uint32_t Elf32_Addr; \/\/ Program address$/;"	t	namespace:llvm::ELF
Elf32_Dyn	ELF.h	/^struct Elf32_Dyn$/;"	s	namespace:llvm::ELF
Elf32_Ehdr	ELF.h	/^struct Elf32_Ehdr {$/;"	s	namespace:llvm::ELF
Elf32_Half	ELF.h	/^typedef uint16_t Elf32_Half;$/;"	t	namespace:llvm::ELF
Elf32_Off	ELF.h	/^typedef uint32_t Elf32_Off;  \/\/ File offset$/;"	t	namespace:llvm::ELF
Elf32_Phdr	ELF.h	/^struct Elf32_Phdr {$/;"	s	namespace:llvm::ELF
Elf32_Rel	ELF.h	/^struct Elf32_Rel {$/;"	s	namespace:llvm::ELF
Elf32_Rela	ELF.h	/^struct Elf32_Rela {$/;"	s	namespace:llvm::ELF
Elf32_Shdr	ELF.h	/^struct Elf32_Shdr {$/;"	s	namespace:llvm::ELF
Elf32_Sword	ELF.h	/^typedef int32_t  Elf32_Sword;$/;"	t	namespace:llvm::ELF
Elf32_Sym	ELF.h	/^struct Elf32_Sym {$/;"	s	namespace:llvm::ELF
Elf32_Word	ELF.h	/^typedef uint32_t Elf32_Word;$/;"	t	namespace:llvm::ELF
Elf64_Addr	ELF.h	/^typedef uint64_t Elf64_Addr;$/;"	t	namespace:llvm::ELF
Elf64_Dyn	ELF.h	/^struct Elf64_Dyn$/;"	s	namespace:llvm::ELF
Elf64_Ehdr	ELF.h	/^struct Elf64_Ehdr {$/;"	s	namespace:llvm::ELF
Elf64_Half	ELF.h	/^typedef uint16_t Elf64_Half;$/;"	t	namespace:llvm::ELF
Elf64_Off	ELF.h	/^typedef uint64_t Elf64_Off;$/;"	t	namespace:llvm::ELF
Elf64_Phdr	ELF.h	/^struct Elf64_Phdr {$/;"	s	namespace:llvm::ELF
Elf64_Rel	ELF.h	/^struct Elf64_Rel {$/;"	s	namespace:llvm::ELF
Elf64_Rela	ELF.h	/^struct Elf64_Rela {$/;"	s	namespace:llvm::ELF
Elf64_Shdr	ELF.h	/^struct Elf64_Shdr {$/;"	s	namespace:llvm::ELF
Elf64_Sword	ELF.h	/^typedef int32_t  Elf64_Sword;$/;"	t	namespace:llvm::ELF
Elf64_Sxword	ELF.h	/^typedef int64_t  Elf64_Sxword;$/;"	t	namespace:llvm::ELF
Elf64_Sym	ELF.h	/^struct Elf64_Sym {$/;"	s	namespace:llvm::ELF
Elf64_Word	ELF.h	/^typedef uint32_t Elf64_Word;$/;"	t	namespace:llvm::ELF
Elf64_Xword	ELF.h	/^typedef uint64_t Elf64_Xword;$/;"	t	namespace:llvm::ELF
ElfMagic	ELF.h	/^static const char ElfMagic[] = { 0x7f, 'E', 'L', 'F', '\\0' };$/;"	m	namespace:llvm::ELF
End	Allocator.h	/^  char *End;$/;"	m	class:llvm::BumpPtrAllocator
End	SMLoc.h	/^  SMLoc Start, End;$/;"	m	class:llvm::SMRange
Entry	Registry.h	/^      entry Entry;$/;"	m	class:llvm::Registry::Add
Error	LockFileManager.h	/^  Optional<error_code> Error;$/;"	m	class:llvm::LockFileManager
Error	raw_ostream.h	/^  bool Error;$/;"	m	class:llvm::raw_fd_ostream
Exact_match	PatternMatch.h	/^  Exact_match(const SubPattern_t &SP) : SubPattern(SP) {}$/;"	f	struct:llvm::PatternMatch::Exact_match
Exact_match	PatternMatch.h	/^struct Exact_match {$/;"	s	namespace:llvm::PatternMatch
ExportSymbolFlagsHasSpecializations	MachO.h	/^      ExportSymbolFlagsHasSpecializations = 0x10u, \/\/ EXPORT_SYMBOL_FLAGS_HAS_SPECIALIZATIONS$/;"	e	enum:llvm::MachO::__anon49
ExportSymbolFlagsIndirectDefinition	MachO.h	/^      ExportSymbolFlagsIndirectDefinition = 0x08u, \/\/ EXPORT_SYMBOL_FLAGS_INDIRECT_DEFINITION$/;"	e	enum:llvm::MachO::__anon49
ExportSymbolFlagsKindMask	MachO.h	/^      ExportSymbolFlagsKindMask           = 0x03u, \/\/ EXPORT_SYMBOL_FLAGS_KIND_MASK$/;"	e	enum:llvm::MachO::__anon49
ExportSymbolFlagsKindRegular	MachO.h	/^      ExportSymbolFlagsKindRegular        = 0x00u, \/\/ EXPORT_SYMBOL_FLAGS_KIND_REGULAR$/;"	e	enum:llvm::MachO::__anon49
ExportSymbolFlagsKindThreadLocal	MachO.h	/^      ExportSymbolFlagsKindThreadLocal    = 0x01u, \/\/ EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL$/;"	e	enum:llvm::MachO::__anon49
ExportSymbolFlagsWeakDefinition	MachO.h	/^      ExportSymbolFlagsWeakDefinition     = 0x04u, \/\/ EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION$/;"	e	enum:llvm::MachO::__anon49
ExternalBuffer	raw_ostream.h	/^    ExternalBuffer$/;"	e	enum:llvm::raw_ostream::BufferKind
F	PatternMatch.h	/^  BasicBlock *&T, *&F;$/;"	m	struct:llvm::PatternMatch::brc_match
FD	raw_ostream.h	/^  int FD;$/;"	m	class:llvm::raw_fd_ostream
FDP	GraphWriter.h	/^      FDP,$/;"	e	enum:llvm::GraphProgram::Name
FORCE_DEFINING_FILE_TO_BE_LINKED	IncludeFile.h	32;"	d
FORCE_DEFINING_FILE_TO_BE_LINKED	IncludeFile.h	40;"	d
FS	Solaris.h	23;"	d
F_Append	raw_ostream.h	/^    F_Append = 2,$/;"	e	enum:llvm::raw_fd_ostream::__anon54
F_Binary	raw_ostream.h	/^    F_Binary = 4$/;"	e	enum:llvm::raw_fd_ostream::__anon54
F_Excl	raw_ostream.h	/^    F_Excl  = 1,$/;"	e	enum:llvm::raw_fd_ostream::__anon54
F_executable	FileOutputBuffer.h	/^    F_executable = 1  \/\/\/ set the 'x' bit on the resulting file$/;"	e	enum:llvm::FileOutputBuffer::__anon48
File	COFF.h	/^    AuxiliaryFile               File;$/;"	m	union:llvm::COFF::Auxiliary
FileAlignment	COFF.h	/^    uint32_t FileAlignment;$/;"	m	struct:llvm::COFF::PEHeader
FileDescriptor	FileSystem.h	/^  int FileDescriptor;$/;"	m	class:llvm::sys::fs::mapped_file_region
FileHandle	FileSystem.h	/^  void *FileHandle;$/;"	m	class:llvm::sys::fs::mapped_file_region
FileInfo	GCOV.h	/^class FileInfo {$/;"	c	namespace:llvm
FileMappingHandle	FileSystem.h	/^  void *FileMappingHandle;$/;"	m	class:llvm::sys::fs::mapped_file_region
FileName	COFF.h	/^    uint8_t FileName[18];$/;"	m	struct:llvm::COFF::AuxiliaryFile
FileOutputBuffer	FileOutputBuffer.h	/^class FileOutputBuffer {$/;"	c	namespace:llvm
FileRemover	FileUtilities.h	/^    FileRemover() : DeleteIt(false) {}$/;"	f	class:llvm::FileRemover
FileRemover	FileUtilities.h	/^    explicit FileRemover(const Twine& filename, bool deleteIt = true)$/;"	f	class:llvm::FileRemover
FileRemover	FileUtilities.h	/^  class FileRemover {$/;"	c	namespace:llvm
FileSizeInPages	COFF.h	/^    uint16_t FileSizeInPages;$/;"	m	struct:llvm::COFF::DOSHeader
FileStatus	PathV1.h	/^    FileStatus() : fileSize(0), modTime(0,0), mode(0777), user(999),$/;"	f	class:llvm::sys::FileStatus
FileStatus	PathV1.h	/^  class FileStatus {$/;"	c	namespace:llvm::sys
Filename	FileUtilities.h	/^    SmallString<128> Filename;$/;"	m	class:llvm::FileRemover
Filename	GCOV.h	/^  StringRef Filename;$/;"	m	class:llvm::GCOVFunction
Filename	SourceMgr.h	/^  std::string Filename;$/;"	m	class:llvm::SMDiagnostic
Filename	ToolOutputFile.h	/^    std::string Filename;$/;"	m	class:llvm::tool_output_file::CleanupInstaller
Filled	circular_raw_ostream.h	/^    bool Filled;$/;"	m	class:llvm::circular_raw_ostream
FilteredPassNameParser	PassNameParser.h	/^class FilteredPassNameParser : public PassNameParser {$/;"	c	namespace:llvm
FinalPath	FileOutputBuffer.h	/^  SmallString<128>    FinalPath;$/;"	m	class:llvm::FileOutputBuffer
FindLineNumber	SourceMgr.h	/^  unsigned FindLineNumber(SMLoc Loc, int BufferID = -1) const {$/;"	f	class:llvm::SourceMgr
FirstTimer	Timer.h	/^  Timer *FirstTimer;   \/\/ First timer in the group.$/;"	m	class:llvm::TimerGroup
FlatCollection	IntegersSubset.h	/^  FlatCollectionTy FlatCollection;$/;"	m	class:llvm::IntegersSubsetGeneric
FlatCollectionTy	IntegersSubset.h	/^  typedef std::vector<IntTy> FlatCollectionTy;$/;"	t	class:llvm::IntegersSubsetGeneric
FloatToBits	MathExtras.h	/^inline uint32_t FloatToBits(float Float) {$/;"	f	namespace:llvm
Fmt	Format.h	/^  const char *Fmt;$/;"	m	class:llvm::format_object_base
Fold	TargetFolder.h	/^  Constant *Fold(Constant *C) const {$/;"	f	class:llvm::TargetFolder
FormattingFlags	CommandLine.h	/^enum FormattingFlags {$/;"	g	namespace:llvm::cl
ForwarderChain	COFF.h	/^    uint32_t ForwarderChain;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
FreeList	Recycler.h	/^  iplist<RecyclerStruct> FreeList;$/;"	m	class:llvm::Recycler
Frequency	BlockFrequency.h	/^  uint64_t Frequency;$/;"	m	class:llvm::BlockFrequency
FunctionDefinition	COFF.h	/^    AuxiliaryFunctionDefinition FunctionDefinition;$/;"	m	union:llvm::COFF::Auxiliary
Functions	GCOV.h	/^  SmallVector<GCOVFunction *, 16> Functions;$/;"	m	class:llvm::GCOVFile
G	GraphWriter.h	/^  const GraphType &G;$/;"	m	class:llvm::GraphWriter
GCDA_402	GCOV.h	/^    GCDA_402,$/;"	e	enum:llvm::GCOV::GCOVFormat
GCDA_404	GCOV.h	/^    GCDA_404$/;"	e	enum:llvm::GCOV::GCOVFormat
GCNO_402	GCOV.h	/^    GCNO_402,$/;"	e	enum:llvm::GCOV::GCOVFormat
GCNO_404	GCOV.h	/^    GCNO_404,$/;"	e	enum:llvm::GCOV::GCOVFormat
GCOV	GCOV.h	/^namespace GCOV {$/;"	n	namespace:llvm
GCOVBlock	GCOV.h	/^  GCOVBlock(uint32_t N) : Number(N), Counter(0) {}$/;"	f	class:llvm::GCOVBlock
GCOVBlock	GCOV.h	/^class GCOVBlock {$/;"	c	namespace:llvm
GCOVBuffer	GCOV.h	/^  GCOVBuffer(MemoryBuffer *B) : Buffer(B), Cursor(0) {}$/;"	f	class:llvm::GCOVBuffer
GCOVBuffer	GCOV.h	/^class GCOVBuffer {$/;"	c	namespace:llvm
GCOVFile	GCOV.h	/^  GCOVFile() {}$/;"	f	class:llvm::GCOVFile
GCOVFile	GCOV.h	/^class GCOVFile {$/;"	c	namespace:llvm
GCOVFormat	GCOV.h	/^  enum GCOVFormat {$/;"	g	namespace:llvm::GCOV
GCOVFunction	GCOV.h	/^  GCOVFunction() : Ident(0), LineNumber(0) {}$/;"	f	class:llvm::GCOVFunction
GCOVFunction	GCOV.h	/^class GCOVFunction {$/;"	c	namespace:llvm
GCOVLines	GCOV.h	/^class GCOVLines {$/;"	c	namespace:llvm
GET_COMM_ALIGN	MachO.h	/^    static inline uint8_t GET_COMM_ALIGN (uint16_t n_desc)$/;"	f	namespace:llvm::MachO
GET_LIBRARY_ORDINAL	MachO.h	/^    static inline uint16_t GET_LIBRARY_ORDINAL(uint16_t n_desc)$/;"	f	namespace:llvm::MachO
GREEN	raw_ostream.h	/^    GREEN,$/;"	e	enum:llvm::raw_ostream::Colors
GRP_COMDAT	ELF.h	/^  GRP_COMDAT = 0x1,$/;"	e	enum:llvm::ELF::__anon32
GRP_MASKOS	ELF.h	/^  GRP_MASKOS = 0x0ff00000,$/;"	e	enum:llvm::ELF::__anon32
GRP_MASKPROC	ELF.h	/^  GRP_MASKPROC = 0xf0000000$/;"	e	enum:llvm::ELF::__anon32
GS	Solaris.h	24;"	d
GTraits	GraphWriter.h	/^  typedef GraphTraits<GraphType>              GTraits;$/;"	t	class:llvm::GraphWriter
GeneralDynamic	CodeGen.h	/^      GeneralDynamic,$/;"	e	enum:llvm::TLSModel::Model
GenericOptionInfo	CommandLine.h	/^    GenericOptionInfo(const char *name, const char *helpStr) :$/;"	f	class:llvm::cl::generic_parser_base::GenericOptionInfo
GenericOptionInfo	CommandLine.h	/^  class GenericOptionInfo {$/;"	c	class:llvm::cl::generic_parser_base
GenericOptionValue	CommandLine.h	/^struct GenericOptionValue {$/;"	s	namespace:llvm::cl
GetAsValue	ValueHandle.h	/^  static Value *GetAsValue(Value *V) { return V; }$/;"	f	class:llvm::AssertingVH
GetAsValue	ValueHandle.h	/^  static Value *GetAsValue(Value *V) { return V; }$/;"	f	class:llvm::TrackingVH
GetAsValue	ValueHandle.h	/^  static Value *GetAsValue(const Value *V) { return const_cast<Value*>(V); }$/;"	f	class:llvm::AssertingVH
GetAsValue	ValueHandle.h	/^  static Value *GetAsValue(const Value *V) { return const_cast<Value*>(V); }$/;"	f	class:llvm::TrackingVH
GetBufferSize	raw_ostream.h	/^  size_t GetBufferSize() const {$/;"	f	class:llvm::raw_ostream
GetNumBytesInBuffer	raw_ostream.h	/^  size_t GetNumBytesInBuffer() const {$/;"	f	class:llvm::raw_ostream
GetNumPreds	PredIteratorCache.h	/^    unsigned GetNumPreds(BasicBlock *BB) {$/;"	f	class:llvm::PredIteratorCache
GetPreds	PredIteratorCache.h	/^    BasicBlock **GetPreds(BasicBlock *BB) {$/;"	f	class:llvm::PredIteratorCache
GraphProgram	GraphWriter.h	/^namespace GraphProgram {$/;"	n	namespace:llvm
GraphTraits	CFG.h	/^template <> struct GraphTraits<BasicBlock*> {$/;"	s	namespace:llvm
GraphTraits	CFG.h	/^template <> struct GraphTraits<Function*> : public GraphTraits<BasicBlock*> {$/;"	s	namespace:llvm
GraphTraits	CFG.h	/^template <> struct GraphTraits<Inverse<BasicBlock*> > {$/;"	s	namespace:llvm
GraphTraits	CFG.h	/^template <> struct GraphTraits<Inverse<Function*> > :$/;"	s	namespace:llvm
GraphTraits	CFG.h	/^template <> struct GraphTraits<Inverse<const BasicBlock*> > {$/;"	s	namespace:llvm
GraphTraits	CFG.h	/^template <> struct GraphTraits<Inverse<const Function*> > :$/;"	s	namespace:llvm
GraphTraits	CFG.h	/^template <> struct GraphTraits<const BasicBlock*> {$/;"	s	namespace:llvm
GraphTraits	CFG.h	/^template <> struct GraphTraits<const Function*> :$/;"	s	namespace:llvm
GraphTraits	DataFlow.h	/^template <> struct GraphTraits<Inverse<User*> > {$/;"	s	namespace:llvm
GraphTraits	DataFlow.h	/^template <> struct GraphTraits<Inverse<const User*> > {$/;"	s	namespace:llvm
GraphTraits	DataFlow.h	/^template <> struct GraphTraits<Value*> {$/;"	s	namespace:llvm
GraphTraits	DataFlow.h	/^template <> struct GraphTraits<const Value*> {$/;"	s	namespace:llvm
GraphWriter	GraphWriter.h	/^  GraphWriter(raw_ostream &o, const GraphType &g, bool SN) : O(o), G(g) {$/;"	f	class:llvm::GraphWriter
GraphWriter	GraphWriter.h	/^class GraphWriter {$/;"	c	namespace:llvm
GreatestCommonDivisor64	MathExtras.h	/^inline uint64_t GreatestCommonDivisor64(uint64_t A, uint64_t B) {$/;"	f	namespace:llvm
Grouping	CommandLine.h	/^  Grouping         = 0x03      \/\/ Can this option group with other options?$/;"	e	enum:llvm::cl::FormattingFlags
HANDLE_INST	InstVisitor.h	122;"	d
HANDLE_INST	InstVisitor.h	154;"	d
HANDLE_INST	InstVisitor.h	27;"	d
HAVE_FENV_H	FEnv.h	27;"	d
HandleBaseKind	ValueHandle.h	/^  enum HandleBaseKind {$/;"	g	class:llvm::ValueHandleBase
HasJIT	TargetRegistry.h	/^    bool HasJIT;$/;"	m	class:llvm::Target
HasNoPushRequest	FileSystem.h	/^    bool HasNoPushRequest;$/;"	m	struct:llvm::sys::fs::detail::RecDirIterState
Head	Registry.h	/^    static node *Head, *Tail;$/;"	m	class:llvm::Registry
Head	Registry.h	/^  typename Registry<T,U>::node *Registry<T,U>::Head;$/;"	m	class:llvm::Registry
HeaderFileTypeBundle	MachO.h	/^      HeaderFileTypeBundle              = 0x8u, \/\/ MH_BUNDLE$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypeCore	MachO.h	/^      HeaderFileTypeCore                = 0x4u, \/\/ MH_CORE$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypeDSYM	MachO.h	/^      HeaderFileTypeDSYM                = 0xAu, \/\/ MH_DSYM$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypeDynamicLinkEditor	MachO.h	/^      HeaderFileTypeDynamicLinkEditor   = 0x7u, \/\/ MH_DYLINKER$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypeDynamicShlib	MachO.h	/^      HeaderFileTypeDynamicShlib        = 0x6u, \/\/ MH_DYLIB$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypeDynamicShlibStub	MachO.h	/^      HeaderFileTypeDynamicShlibStub    = 0x9u, \/\/ MH_DYLIB_STUB$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypeExecutable	MachO.h	/^      HeaderFileTypeExecutable          = 0x2u, \/\/ MH_EXECUTE$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypeFixedVMShlib	MachO.h	/^      HeaderFileTypeFixedVMShlib        = 0x3u, \/\/ MH_FVMLIB$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypeKextBundle	MachO.h	/^      HeaderFileTypeKextBundle          = 0xBu, \/\/ MH_KEXT_BUNDLE$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypeObject	MachO.h	/^      HeaderFileTypeObject              = 0x1u, \/\/ MH_OBJECT$/;"	e	enum:llvm::MachO::__anon49
HeaderFileTypePreloadedExecutable	MachO.h	/^      HeaderFileTypePreloadedExecutable = 0x5u, \/\/ MH_PRELOAD$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitAllModulesBound	MachO.h	/^      HeaderFlagBitAllModulesBound        = 0x00001000u, \/\/ MH_ALLMODSBOUND$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitAllowStackExecution	MachO.h	/^      HeaderFlagBitAllowStackExecution    = 0x00020000u, \/\/ MH_ALLOW_STACK_EXECUTION$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitBindAtLoad	MachO.h	/^      HeaderFlagBitBindAtLoad             = 0x00000008u, \/\/ MH_BINDATLOAD$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitBindsToWeak	MachO.h	/^      HeaderFlagBitBindsToWeak            = 0x00010000u, \/\/ MH_BINDS_TO_WEAK$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitCanonical	MachO.h	/^      HeaderFlagBitCanonical              = 0x00004000u, \/\/ MH_CANONICAL$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitDeadStrippableDylib	MachO.h	/^      HeaderFlagBitDeadStrippableDylib    = 0x00400000u, \/\/ MH_DEAD_STRIPPABLE_DYLIB$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitForceFlatNamespace	MachO.h	/^      HeaderFlagBitForceFlatNamespace     = 0x00000100u, \/\/ MH_FORCE_FLAT$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitIsDynamicLinkObject	MachO.h	/^      HeaderFlagBitIsDynamicLinkObject    = 0x00000004u, \/\/ MH_DYLDLINK$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitIsIncrementalLinkObject	MachO.h	/^      HeaderFlagBitIsIncrementalLinkObject= 0x00000002u, \/\/ MH_INCRLINK$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitLazyInit	MachO.h	/^      HeaderFlagBitLazyInit               = 0x00000040u, \/\/ MH_LAZY_INIT$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitNoFixPrebinding	MachO.h	/^      HeaderFlagBitNoFixPrebinding        = 0x00000400u, \/\/ MH_NOFIXPREBINDING$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitNoMultipleDefintions	MachO.h	/^      HeaderFlagBitNoMultipleDefintions   = 0x00000200u, \/\/ MH_NOMULTIDEFS$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitNoReexportedDylibs	MachO.h	/^      HeaderFlagBitNoReexportedDylibs     = 0x00100000u, \/\/ MH_NO_REEXPORTED_DYLIBS$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitNoUndefinedSymbols	MachO.h	/^      HeaderFlagBitNoUndefinedSymbols     = 0x00000001u, \/\/ MH_NOUNDEFS$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitPIE	MachO.h	/^      HeaderFlagBitPIE                    = 0x00200000u, \/\/ MH_PIE$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitPrebindable	MachO.h	/^      HeaderFlagBitPrebindable            = 0x00000800u, \/\/ MH_PREBINDABLE$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitPrebound	MachO.h	/^      HeaderFlagBitPrebound               = 0x00000010u, \/\/ MH_PREBOUND$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitRootSafe	MachO.h	/^      HeaderFlagBitRootSafe               = 0x00040000u, \/\/ MH_ROOT_SAFE$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitSetUIDSafe	MachO.h	/^      HeaderFlagBitSetUIDSafe             = 0x00080000u, \/\/ MH_SETUID_SAFE$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitSplitSegments	MachO.h	/^      HeaderFlagBitSplitSegments          = 0x00000020u, \/\/ MH_SPLIT_SEGS$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitSubsectionsViaSymbols	MachO.h	/^      HeaderFlagBitSubsectionsViaSymbols  = 0x00002000u, \/\/ MH_SUBSECTIONS_VIA_SYMBOLS$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitTwoLevelNamespace	MachO.h	/^      HeaderFlagBitTwoLevelNamespace      = 0x00000080u, \/\/ MH_TWOLEVEL$/;"	e	enum:llvm::MachO::__anon49
HeaderFlagBitWeakDefines	MachO.h	/^      HeaderFlagBitWeakDefines            = 0x00008000u, \/\/ MH_WEAK_DEFINES$/;"	e	enum:llvm::MachO::__anon49
HeaderMagic32	MachO.h	/^      HeaderMagic32         = 0xFEEDFACEu, \/\/ MH_MAGIC$/;"	e	enum:llvm::MachO::__anon49
HeaderMagic32Swapped	MachO.h	/^      HeaderMagic32Swapped  = 0xCEFAEDFEu, \/\/ MH_CIGAM$/;"	e	enum:llvm::MachO::__anon49
HeaderMagic64	MachO.h	/^      HeaderMagic64         = 0xFEEDFACFu, \/\/ MH_MAGIC_64$/;"	e	enum:llvm::MachO::__anon49
HeaderMagic64Swapped	MachO.h	/^      HeaderMagic64Swapped  = 0xCFFAEDFEu, \/\/ MH_CIGAM_64$/;"	e	enum:llvm::MachO::__anon49
HeaderSize	COFF.h	/^    HeaderSize     = 20,$/;"	e	enum:llvm::COFF::__anon10
HeaderSizeInParagraphs	COFF.h	/^    uint16_t HeaderSizeInParagraphs;$/;"	m	struct:llvm::COFF::DOSHeader
HelpStr	CommandLine.h	/^    const char *HelpStr;$/;"	m	class:llvm::cl::generic_parser_base::GenericOptionInfo
HelpStr	CommandLine.h	/^  const char *HelpStr;    \/\/ The descriptive text message for -help$/;"	m	class:llvm::cl::Option
Hi_32	MathExtras.h	/^inline uint32_t Hi_32(uint64_t Value) {$/;"	f	namespace:llvm
Hidden	CommandLine.h	/^  Hidden          = 0x01,      \/\/ -help doesn't, but -help-hidden does$/;"	e	enum:llvm::cl::OptionHidden
High	IntegersSubset.h	/^    IntType High;$/;"	m	class:llvm::IntRange
Holder	IntegersSubset.h	/^  Constant *Holder;$/;"	m	class:llvm::IntegersSubset
I	CallSite.h	/^  PointerIntPair<InstrTy*, 1, bool> I;$/;"	m	class:llvm::CallSiteBase
IIty	InstIterator.h	/^  typedef _II_t   IIty;$/;"	t	class:llvm::InstIterator
IMAGE_COMDAT_SELECT_ANY	COFF.h	/^    IMAGE_COMDAT_SELECT_ANY,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_ASSOCIATIVE	COFF.h	/^    IMAGE_COMDAT_SELECT_ASSOCIATIVE,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_EXACT_MATCH	COFF.h	/^    IMAGE_COMDAT_SELECT_EXACT_MATCH,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_LARGEST	COFF.h	/^    IMAGE_COMDAT_SELECT_LARGEST$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_NODUPLICATES	COFF.h	/^    IMAGE_COMDAT_SELECT_NODUPLICATES = 1,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_COMDAT_SELECT_SAME_SIZE	COFF.h	/^    IMAGE_COMDAT_SELECT_SAME_SIZE,$/;"	e	enum:llvm::COFF::COMDATType
IMAGE_DEBUG_TYPE_BORLAND	COFF.h	/^    IMAGE_DEBUG_TYPE_BORLAND       = 9,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_CLSID	COFF.h	/^    IMAGE_DEBUG_TYPE_CLSID         = 11$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_CODEVIEW	COFF.h	/^    IMAGE_DEBUG_TYPE_CODEVIEW      = 2,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_COFF	COFF.h	/^    IMAGE_DEBUG_TYPE_COFF          = 1,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_EXCEPTION	COFF.h	/^    IMAGE_DEBUG_TYPE_EXCEPTION     = 5,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_FIXUP	COFF.h	/^    IMAGE_DEBUG_TYPE_FIXUP         = 6,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_FPO	COFF.h	/^    IMAGE_DEBUG_TYPE_FPO           = 3,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_MISC	COFF.h	/^    IMAGE_DEBUG_TYPE_MISC          = 4,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_OMAP_FROM_SRC	COFF.h	/^    IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_OMAP_TO_SRC	COFF.h	/^    IMAGE_DEBUG_TYPE_OMAP_TO_SRC   = 7,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DEBUG_TYPE_UNKNOWN	COFF.h	/^    IMAGE_DEBUG_TYPE_UNKNOWN       = 0,$/;"	e	enum:llvm::COFF::DebugType
IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE	COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE = 0x0040,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY	COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY = 0x0080,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_NO_BIND	COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_NO_BIND = 0x0800,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_NO_ISOLATION	COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_NO_ISOLATION = 0x0200,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_NO_SEH	COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_NO_SEH = 0x0400,$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_NX_COMPAT	COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_NX_COMPAT = 0x0100, \/\/\/< Image is NX compatible.$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_TERMINAL_SERVER_AWARE	COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_TERMINAL_SERVER_AWARE = 0x8000$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_DLL_CHARACTERISTICS_WDM_DRIVER	COFF.h	/^    IMAGE_DLL_CHARACTERISTICS_WDM_DRIVER = 0x2000, \/\/\/< A WDM driver.$/;"	e	enum:llvm::COFF::DLLCharacteristics
IMAGE_FILE_32BIT_MACHINE	COFF.h	/^    IMAGE_FILE_32BIT_MACHINE           = 0x0100,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_AGGRESSIVE_WS_TRIM	COFF.h	/^    IMAGE_FILE_AGGRESSIVE_WS_TRIM      = 0x0010,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_BYTES_REVERSED_HI	COFF.h	/^    IMAGE_FILE_BYTES_REVERSED_HI       = 0x8000$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_BYTES_REVERSED_LO	COFF.h	/^    IMAGE_FILE_BYTES_REVERSED_LO       = 0x0080,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_DEBUG_STRIPPED	COFF.h	/^    IMAGE_FILE_DEBUG_STRIPPED          = 0x0200,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_DLL	COFF.h	/^    IMAGE_FILE_DLL                     = 0x2000,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_EXECUTABLE_IMAGE	COFF.h	/^    IMAGE_FILE_EXECUTABLE_IMAGE        = 0x0002,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_LARGE_ADDRESS_AWARE	COFF.h	/^    IMAGE_FILE_LARGE_ADDRESS_AWARE     = 0x0020,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_LINE_NUMS_STRIPPED	COFF.h	/^    IMAGE_FILE_LINE_NUMS_STRIPPED      = 0x0004,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_LOCAL_SYMS_STRIPPED	COFF.h	/^    IMAGE_FILE_LOCAL_SYMS_STRIPPED     = 0x0008,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_MACHINE_AM33	COFF.h	/^    IMAGE_FILE_MACHINE_AM33      = 0x13,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_AMD64	COFF.h	/^    IMAGE_FILE_MACHINE_AMD64     = 0x8664,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_ARM	COFF.h	/^    IMAGE_FILE_MACHINE_ARM       = 0x1C0,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_ARMV7	COFF.h	/^    IMAGE_FILE_MACHINE_ARMV7     = 0x1C4,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_EBC	COFF.h	/^    IMAGE_FILE_MACHINE_EBC       = 0xEBC,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_I386	COFF.h	/^    IMAGE_FILE_MACHINE_I386      = 0x14C,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_IA64	COFF.h	/^    IMAGE_FILE_MACHINE_IA64      = 0x200,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_M32R	COFF.h	/^    IMAGE_FILE_MACHINE_M32R      = 0x9041,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_MIPS16	COFF.h	/^    IMAGE_FILE_MACHINE_MIPS16    = 0x266,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_MIPSFPU	COFF.h	/^    IMAGE_FILE_MACHINE_MIPSFPU   = 0x366,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_MIPSFPU16	COFF.h	/^    IMAGE_FILE_MACHINE_MIPSFPU16 = 0x466,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_POWERPC	COFF.h	/^    IMAGE_FILE_MACHINE_POWERPC   = 0x1F0,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_POWERPCFP	COFF.h	/^    IMAGE_FILE_MACHINE_POWERPCFP = 0x1F1,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_R4000	COFF.h	/^    IMAGE_FILE_MACHINE_R4000     = 0x166,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_SH3	COFF.h	/^    IMAGE_FILE_MACHINE_SH3       = 0x1A2,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_SH3DSP	COFF.h	/^    IMAGE_FILE_MACHINE_SH3DSP    = 0x1A3,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_SH4	COFF.h	/^    IMAGE_FILE_MACHINE_SH4       = 0x1A6,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_SH5	COFF.h	/^    IMAGE_FILE_MACHINE_SH5       = 0x1A8,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_THUMB	COFF.h	/^    IMAGE_FILE_MACHINE_THUMB     = 0x1C2,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_UNKNOWN	COFF.h	/^    IMAGE_FILE_MACHINE_UNKNOWN   = 0x0,$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_MACHINE_WCEMIPSV2	COFF.h	/^    IMAGE_FILE_MACHINE_WCEMIPSV2 = 0x169$/;"	e	enum:llvm::COFF::MachineTypes
IMAGE_FILE_NET_RUN_FROM_SWAP	COFF.h	/^    IMAGE_FILE_NET_RUN_FROM_SWAP       = 0x0800,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_RELOCS_STRIPPED	COFF.h	/^    IMAGE_FILE_RELOCS_STRIPPED         = 0x0001,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP	COFF.h	/^    IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x0400,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_SYSTEM	COFF.h	/^    IMAGE_FILE_SYSTEM                  = 0x1000,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_FILE_UP_SYSTEM_ONLY	COFF.h	/^    IMAGE_FILE_UP_SYSTEM_ONLY          = 0x4000,$/;"	e	enum:llvm::COFF::Characteristics
IMAGE_REL_AMD64_ABSOLUTE	COFF.h	/^    IMAGE_REL_AMD64_ABSOLUTE  = 0x0000,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_ADDR32	COFF.h	/^    IMAGE_REL_AMD64_ADDR32    = 0x0002,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_ADDR32NB	COFF.h	/^    IMAGE_REL_AMD64_ADDR32NB  = 0x0003,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_ADDR64	COFF.h	/^    IMAGE_REL_AMD64_ADDR64    = 0x0001,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_PAIR	COFF.h	/^    IMAGE_REL_AMD64_PAIR      = 0x000F,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32	COFF.h	/^    IMAGE_REL_AMD64_REL32     = 0x0004,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_1	COFF.h	/^    IMAGE_REL_AMD64_REL32_1   = 0x0005,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_2	COFF.h	/^    IMAGE_REL_AMD64_REL32_2   = 0x0006,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_3	COFF.h	/^    IMAGE_REL_AMD64_REL32_3   = 0x0007,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_4	COFF.h	/^    IMAGE_REL_AMD64_REL32_4   = 0x0008,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_REL32_5	COFF.h	/^    IMAGE_REL_AMD64_REL32_5   = 0x0009,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SECREL	COFF.h	/^    IMAGE_REL_AMD64_SECREL    = 0x000B,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SECREL7	COFF.h	/^    IMAGE_REL_AMD64_SECREL7   = 0x000C,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SECTION	COFF.h	/^    IMAGE_REL_AMD64_SECTION   = 0x000A,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SREL32	COFF.h	/^    IMAGE_REL_AMD64_SREL32    = 0x000E,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_SSPAN32	COFF.h	/^    IMAGE_REL_AMD64_SSPAN32   = 0x0010$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_AMD64_TOKEN	COFF.h	/^    IMAGE_REL_AMD64_TOKEN     = 0x000D,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_ARM_ABSOLUTE	COFF.h	/^    IMAGE_REL_ARM_ABSOLUTE  = 0x0000,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_ADDR32	COFF.h	/^    IMAGE_REL_ARM_ADDR32    = 0x0001,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_ADDR32NB	COFF.h	/^    IMAGE_REL_ARM_ADDR32NB  = 0x0002,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BLX11	COFF.h	/^    IMAGE_REL_ARM_BLX11     = 0x0009,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BLX23T	COFF.h	/^    IMAGE_REL_ARM_BLX23T    = 0x0015$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BLX24	COFF.h	/^    IMAGE_REL_ARM_BLX24     = 0x0008,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BRANCH11	COFF.h	/^    IMAGE_REL_ARM_BRANCH11  = 0x0004,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BRANCH20T	COFF.h	/^    IMAGE_REL_ARM_BRANCH20T = 0x0012,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BRANCH24	COFF.h	/^    IMAGE_REL_ARM_BRANCH24  = 0x0003,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_BRANCH24T	COFF.h	/^    IMAGE_REL_ARM_BRANCH24T = 0x0014,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_MOV32A	COFF.h	/^    IMAGE_REL_ARM_MOV32A    = 0x0010,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_MOV32T	COFF.h	/^    IMAGE_REL_ARM_MOV32T    = 0x0011,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_SECREL	COFF.h	/^    IMAGE_REL_ARM_SECREL    = 0x000F,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_SECTION	COFF.h	/^    IMAGE_REL_ARM_SECTION   = 0x000E,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_ARM_TOKEN	COFF.h	/^    IMAGE_REL_ARM_TOKEN     = 0x0005,$/;"	e	enum:llvm::COFF::RelocationTypesARM
IMAGE_REL_BASED_ABSOLUTE	COFF.h	/^    IMAGE_REL_BASED_ABSOLUTE       = 0,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_ARM_MOV32A	COFF.h	/^    IMAGE_REL_BASED_ARM_MOV32A     = 5,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_ARM_MOV32T	COFF.h	/^    IMAGE_REL_BASED_ARM_MOV32T     = 7,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_DIR64	COFF.h	/^    IMAGE_REL_BASED_DIR64          = 10$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_HIGH	COFF.h	/^    IMAGE_REL_BASED_HIGH           = 1,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_HIGHADJ	COFF.h	/^    IMAGE_REL_BASED_HIGHADJ        = 4,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_HIGHLOW	COFF.h	/^    IMAGE_REL_BASED_HIGHLOW        = 3,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_LOW	COFF.h	/^    IMAGE_REL_BASED_LOW            = 2,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_MIPS_JMPADDR	COFF.h	/^    IMAGE_REL_BASED_MIPS_JMPADDR   = 5,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_BASED_MIPS_JMPADDR16	COFF.h	/^    IMAGE_REL_BASED_MIPS_JMPADDR16 = 9,$/;"	e	enum:llvm::COFF::BaseRelocationType
IMAGE_REL_I386_ABSOLUTE	COFF.h	/^    IMAGE_REL_I386_ABSOLUTE = 0x0000,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_DIR16	COFF.h	/^    IMAGE_REL_I386_DIR16    = 0x0001,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_DIR32	COFF.h	/^    IMAGE_REL_I386_DIR32    = 0x0006,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_DIR32NB	COFF.h	/^    IMAGE_REL_I386_DIR32NB  = 0x0007,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_REL16	COFF.h	/^    IMAGE_REL_I386_REL16    = 0x0002,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_REL32	COFF.h	/^    IMAGE_REL_I386_REL32    = 0x0014,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_SECREL	COFF.h	/^    IMAGE_REL_I386_SECREL   = 0x000B,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_SECREL7	COFF.h	/^    IMAGE_REL_I386_SECREL7  = 0x000D,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_SECTION	COFF.h	/^    IMAGE_REL_I386_SECTION  = 0x000A,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_SEG12	COFF.h	/^    IMAGE_REL_I386_SEG12    = 0x0009,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_REL_I386_TOKEN	COFF.h	/^    IMAGE_REL_I386_TOKEN    = 0x000C,$/;"	e	enum:llvm::COFF::RelocationTypeX86
IMAGE_SCN_ALIGN_1024BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_1024BYTES        = 0x00B00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_128BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_128BYTES         = 0x00800000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_16BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_16BYTES          = 0x00500000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_1BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_1BYTES           = 0x00100000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_2048BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_2048BYTES        = 0x00C00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_256BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_256BYTES         = 0x00900000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_2BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_2BYTES           = 0x00200000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_32BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_32BYTES          = 0x00600000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_4096BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_4096BYTES        = 0x00D00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_4BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_4BYTES           = 0x00300000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_512BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_512BYTES         = 0x00A00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_64BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_64BYTES          = 0x00700000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_8192BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_8192BYTES        = 0x00E00000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_ALIGN_8BYTES	COFF.h	/^    IMAGE_SCN_ALIGN_8BYTES           = 0x00400000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_CNT_CODE	COFF.h	/^    IMAGE_SCN_CNT_CODE               = 0x00000020,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_CNT_INITIALIZED_DATA	COFF.h	/^    IMAGE_SCN_CNT_INITIALIZED_DATA   = 0x00000040,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_CNT_UNINITIALIZED_DATA	COFF.h	/^    IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x00000080,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_GPREL	COFF.h	/^    IMAGE_SCN_GPREL                  = 0x00008000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_COMDAT	COFF.h	/^    IMAGE_SCN_LNK_COMDAT             = 0x00001000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_INFO	COFF.h	/^    IMAGE_SCN_LNK_INFO               = 0x00000200,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_NRELOC_OVFL	COFF.h	/^    IMAGE_SCN_LNK_NRELOC_OVFL        = 0x01000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_OTHER	COFF.h	/^    IMAGE_SCN_LNK_OTHER              = 0x00000100,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_LNK_REMOVE	COFF.h	/^    IMAGE_SCN_LNK_REMOVE             = 0x00000800,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_16BIT	COFF.h	/^    IMAGE_SCN_MEM_16BIT              = 0x00020000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_DISCARDABLE	COFF.h	/^    IMAGE_SCN_MEM_DISCARDABLE        = 0x02000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_EXECUTE	COFF.h	/^    IMAGE_SCN_MEM_EXECUTE            = 0x20000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_LOCKED	COFF.h	/^    IMAGE_SCN_MEM_LOCKED             = 0x00040000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_NOT_CACHED	COFF.h	/^    IMAGE_SCN_MEM_NOT_CACHED         = 0x04000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_NOT_PAGED	COFF.h	/^    IMAGE_SCN_MEM_NOT_PAGED          = 0x08000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_PRELOAD	COFF.h	/^    IMAGE_SCN_MEM_PRELOAD            = 0x00080000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_PURGEABLE	COFF.h	/^    IMAGE_SCN_MEM_PURGEABLE          = 0x00020000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_READ	COFF.h	/^    IMAGE_SCN_MEM_READ               = 0x40000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_SHARED	COFF.h	/^    IMAGE_SCN_MEM_SHARED             = 0x10000000,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_MEM_WRITE	COFF.h	/^    IMAGE_SCN_MEM_WRITE              = 0x80000000$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SCN_TYPE_NO_PAD	COFF.h	/^    IMAGE_SCN_TYPE_NO_PAD            = 0x00000008,$/;"	e	enum:llvm::COFF::SectionCharacteristics
IMAGE_SUBSYSTEM_EFI_APPLICATION	COFF.h	/^    IMAGE_SUBSYSTEM_EFI_APPLICATION = 10, \/\/\/< An EFI application.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER	COFF.h	/^    IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11, \/\/\/< An EFI driver with boot$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_EFI_ROM	COFF.h	/^    IMAGE_SUBSYSTEM_EFI_ROM = 13, \/\/\/< An EFI ROM image.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER	COFF.h	/^    IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12, \/\/\/< An EFI driver with run-time$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_NATIVE	COFF.h	/^    IMAGE_SUBSYSTEM_NATIVE = 1, \/\/\/< Device drivers and native Windows processes$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_POSIX_CUI	COFF.h	/^    IMAGE_SUBSYSTEM_POSIX_CUI = 7, \/\/\/< The POSIX character subsystem.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_UNKNOWN	COFF.h	/^    IMAGE_SUBSYSTEM_UNKNOWN = 0, \/\/\/< An unknown subsystem.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_WINDOWS_CE_GUI	COFF.h	/^    IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9, \/\/\/< Windows CE.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_WINDOWS_CUI	COFF.h	/^    IMAGE_SUBSYSTEM_WINDOWS_CUI = 3, \/\/\/< The Windows character subsystem.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_WINDOWS_GUI	COFF.h	/^    IMAGE_SUBSYSTEM_WINDOWS_GUI = 2, \/\/\/< The Windows GUI subsystem.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SUBSYSTEM_XBOX	COFF.h	/^    IMAGE_SUBSYSTEM_XBOX = 14 \/\/\/< XBOX.$/;"	e	enum:llvm::COFF::WindowsSubsystem
IMAGE_SYM_ABSOLUTE	COFF.h	/^    IMAGE_SYM_ABSOLUTE  = -1,$/;"	e	enum:llvm::COFF::SymbolSectionNumber
IMAGE_SYM_CLASS_ARGUMENT	COFF.h	/^    IMAGE_SYM_CLASS_ARGUMENT         = 9,   \/\/\/< Function argument$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_AUTOMATIC	COFF.h	/^    IMAGE_SYM_CLASS_AUTOMATIC        = 1,   \/\/\/< Stack variable$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_BIT_FIELD	COFF.h	/^    IMAGE_SYM_CLASS_BIT_FIELD        = 18,  \/\/\/< Bit field$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_BLOCK	COFF.h	/^    IMAGE_SYM_CLASS_BLOCK            = 100,$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_CLR_TOKEN	COFF.h	/^    IMAGE_SYM_CLASS_CLR_TOKEN        = 107$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_END_OF_FUNCTION	COFF.h	/^    IMAGE_SYM_CLASS_END_OF_FUNCTION  = -1,  \/\/\/< Physical end of function$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_END_OF_STRUCT	COFF.h	/^    IMAGE_SYM_CLASS_END_OF_STRUCT    = 102, \/\/\/< End of structure$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_ENUM_TAG	COFF.h	/^    IMAGE_SYM_CLASS_ENUM_TAG         = 15,  \/\/\/< Enumeration tag$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_EXTERNAL	COFF.h	/^    IMAGE_SYM_CLASS_EXTERNAL         = 2,   \/\/\/< External symbol$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_EXTERNAL_DEF	COFF.h	/^    IMAGE_SYM_CLASS_EXTERNAL_DEF     = 5,   \/\/\/< External definition$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_FILE	COFF.h	/^    IMAGE_SYM_CLASS_FILE             = 103, \/\/\/< File name$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_FUNCTION	COFF.h	/^    IMAGE_SYM_CLASS_FUNCTION         = 101,$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_LABEL	COFF.h	/^    IMAGE_SYM_CLASS_LABEL            = 6,   \/\/\/< Label$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_MEMBER_OF_ENUM	COFF.h	/^    IMAGE_SYM_CLASS_MEMBER_OF_ENUM   = 16,  \/\/\/< Member of enumeration$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_MEMBER_OF_STRUCT	COFF.h	/^    IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8,   \/\/\/< Member of structure$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_MEMBER_OF_UNION	COFF.h	/^    IMAGE_SYM_CLASS_MEMBER_OF_UNION  = 11,  \/\/\/< Member of union$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_NULL	COFF.h	/^    IMAGE_SYM_CLASS_NULL             = 0,   \/\/\/< No symbol$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_REGISTER	COFF.h	/^    IMAGE_SYM_CLASS_REGISTER         = 4,   \/\/\/< Register variable$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_REGISTER_PARAM	COFF.h	/^    IMAGE_SYM_CLASS_REGISTER_PARAM   = 17,  \/\/\/< Register parameter$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_SECTION	COFF.h	/^    IMAGE_SYM_CLASS_SECTION          = 104,$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_STATIC	COFF.h	/^    IMAGE_SYM_CLASS_STATIC           = 3,   \/\/\/< Static$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_STRUCT_TAG	COFF.h	/^    IMAGE_SYM_CLASS_STRUCT_TAG       = 10,  \/\/\/< Structure tag$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_TYPE_DEFINITION	COFF.h	/^    IMAGE_SYM_CLASS_TYPE_DEFINITION  = 13,  \/\/\/< Type definition$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_UNDEFINED_LABEL	COFF.h	/^    IMAGE_SYM_CLASS_UNDEFINED_LABEL  = 7,   \/\/\/< Undefined label$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_UNDEFINED_STATIC	COFF.h	/^    IMAGE_SYM_CLASS_UNDEFINED_STATIC = 14,  \/\/\/< Undefined static$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_UNION_TAG	COFF.h	/^    IMAGE_SYM_CLASS_UNION_TAG        = 12,  \/\/\/< Union tag$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_CLASS_WEAK_EXTERNAL	COFF.h	/^    IMAGE_SYM_CLASS_WEAK_EXTERNAL    = 105, \/\/\/< Duplicate tag$/;"	e	enum:llvm::COFF::SymbolStorageClass
IMAGE_SYM_DEBUG	COFF.h	/^    IMAGE_SYM_DEBUG     = -2,$/;"	e	enum:llvm::COFF::SymbolSectionNumber
IMAGE_SYM_DTYPE_ARRAY	COFF.h	/^    IMAGE_SYM_DTYPE_ARRAY    = 3, \/\/\/< An array of base type.$/;"	e	enum:llvm::COFF::SymbolComplexType
IMAGE_SYM_DTYPE_FUNCTION	COFF.h	/^    IMAGE_SYM_DTYPE_FUNCTION = 2, \/\/\/< A function that returns a base type.$/;"	e	enum:llvm::COFF::SymbolComplexType
IMAGE_SYM_DTYPE_NULL	COFF.h	/^    IMAGE_SYM_DTYPE_NULL     = 0, \/\/\/< No complex type; simple scalar variable.$/;"	e	enum:llvm::COFF::SymbolComplexType
IMAGE_SYM_DTYPE_POINTER	COFF.h	/^    IMAGE_SYM_DTYPE_POINTER  = 1, \/\/\/< A pointer to base type.$/;"	e	enum:llvm::COFF::SymbolComplexType
IMAGE_SYM_TYPE_BYTE	COFF.h	/^    IMAGE_SYM_TYPE_BYTE   = 12, \/\/\/< A byte; unsigned 1-byte integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_CHAR	COFF.h	/^    IMAGE_SYM_TYPE_CHAR   = 2,  \/\/\/< A character (signed byte).$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_DOUBLE	COFF.h	/^    IMAGE_SYM_TYPE_DOUBLE = 7,  \/\/\/< An 8-byte floating-point number.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_DWORD	COFF.h	/^    IMAGE_SYM_TYPE_DWORD  = 15  \/\/\/< An unsigned 4-byte integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_ENUM	COFF.h	/^    IMAGE_SYM_TYPE_ENUM   = 10, \/\/\/< An enumerated type.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_FLOAT	COFF.h	/^    IMAGE_SYM_TYPE_FLOAT  = 6,  \/\/\/< A 4-byte floating-point number.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_INT	COFF.h	/^    IMAGE_SYM_TYPE_INT    = 4,  \/\/\/< A natural integer type on the target.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_LONG	COFF.h	/^    IMAGE_SYM_TYPE_LONG   = 5,  \/\/\/< A 4-byte signed integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_MOE	COFF.h	/^    IMAGE_SYM_TYPE_MOE    = 11, \/\/\/< A member of enumeration (a specific value).$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_NULL	COFF.h	/^    IMAGE_SYM_TYPE_NULL   = 0,  \/\/\/< No type information or unknown base type.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_SHORT	COFF.h	/^    IMAGE_SYM_TYPE_SHORT  = 3,  \/\/\/< A 2-byte signed integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_STRUCT	COFF.h	/^    IMAGE_SYM_TYPE_STRUCT = 8,  \/\/\/< A structure.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_UINT	COFF.h	/^    IMAGE_SYM_TYPE_UINT   = 14, \/\/\/< An unsigned integer of natural size.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_UNION	COFF.h	/^    IMAGE_SYM_TYPE_UNION  = 9,  \/\/\/< An union.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_VOID	COFF.h	/^    IMAGE_SYM_TYPE_VOID   = 1,  \/\/\/< Used with void pointers and functions.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_TYPE_WORD	COFF.h	/^    IMAGE_SYM_TYPE_WORD   = 13, \/\/\/< A word; unsigned 2-byte integer.$/;"	e	enum:llvm::COFF::SymbolBaseType
IMAGE_SYM_UNDEFINED	COFF.h	/^    IMAGE_SYM_UNDEFINED = 0$/;"	e	enum:llvm::COFF::SymbolSectionNumber
IMAGE_WEAK_EXTERN_SEARCH_ALIAS	COFF.h	/^    IMAGE_WEAK_EXTERN_SEARCH_ALIAS     = 3$/;"	e	enum:llvm::COFF::WeakExternalCharacteristics
IMAGE_WEAK_EXTERN_SEARCH_LIBRARY	COFF.h	/^    IMAGE_WEAK_EXTERN_SEARCH_LIBRARY   = 2,$/;"	e	enum:llvm::COFF::WeakExternalCharacteristics
IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY	COFF.h	/^    IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1,$/;"	e	enum:llvm::COFF::WeakExternalCharacteristics
IMPORT_CODE	COFF.h	/^    IMPORT_CODE  = 0,$/;"	e	enum:llvm::COFF::ImportType
IMPORT_CONST	COFF.h	/^    IMPORT_CONST = 2$/;"	e	enum:llvm::COFF::ImportType
IMPORT_DATA	COFF.h	/^    IMPORT_DATA  = 1,$/;"	e	enum:llvm::COFF::ImportType
IMPORT_NAME	COFF.h	/^    IMPORT_NAME            = 1,$/;"	e	enum:llvm::COFF::ImportNameType
IMPORT_NAME_NOPREFIX	COFF.h	/^    IMPORT_NAME_NOPREFIX   = 2,$/;"	e	enum:llvm::COFF::ImportNameType
IMPORT_NAME_UNDECORATE	COFF.h	/^    IMPORT_NAME_UNDECORATE = 3$/;"	e	enum:llvm::COFF::ImportNameType
IMPORT_ORDINAL	COFF.h	/^    IMPORT_ORDINAL         = 0,$/;"	e	enum:llvm::COFF::ImportNameType
INT64_MAX	AIXDataTypesFix.h	24;"	d
INT64_MIN	AIXDataTypesFix.h	25;"	d
INTERSECT_OPENED	IntegersSubsetMapping.h	/^    INTERSECT_OPENED,$/;"	e	enum:llvm::IntegersSubsetMapping::DiffProcessState
INT_ITEM_DEFINE_ASSIGNMENT_BY_OP	IntegersSubset.h	60;"	d
INT_ITEM_DEFINE_BINARY_OP	IntegersSubset.h	53;"	d
INT_ITEM_DEFINE_COMPARISON	IntegersSubset.h	41;"	d
INT_ITEM_DEFINE_OP_STANDARD_INT	IntegersSubset.h	88;"	d
INT_ITEM_DEFINE_POSTINCDEC	IntegersSubset.h	78;"	d
INT_ITEM_DEFINE_PREINCDEC	IntegersSubset.h	69;"	d
INT_ITEM_DEFINE_UNARY_OP	IntegersSubset.h	46;"	d
Ident	GCOV.h	/^  uint32_t Ident;$/;"	m	class:llvm::GCOVFunction
IgnoreCase	Regex.h	/^      IgnoreCase=1,$/;"	e	enum:llvm::Regex::__anon55
ImageBase	COFF.h	/^    uint64_t ImageBase;$/;"	m	struct:llvm::COFF::PEHeader
ImmutableCallSite	CallSite.h	/^  ImmutableCallSite(CallSite CS) : Base(CS.getInstruction()) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	CallSite.h	/^  ImmutableCallSite(const CallInst *CI) : Base(CI) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	CallSite.h	/^  ImmutableCallSite(const Instruction *II) : Base(II) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	CallSite.h	/^  ImmutableCallSite(const InvokeInst *II) : Base(II) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	CallSite.h	/^  ImmutableCallSite(const Value* V) : Base(V) {}$/;"	f	class:llvm::ImmutableCallSite
ImmutableCallSite	CallSite.h	/^class ImmutableCallSite : public CallSiteBase<> {$/;"	c	namespace:llvm
Impl	CrashRecoveryContext.h	/^  void *Impl;$/;"	m	class:llvm::CrashRecoveryContext
ImportAddressTableRVA	COFF.h	/^    uint32_t ImportAddressTableRVA;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
ImportDirectoryTableEntry	COFF.h	/^  struct ImportDirectoryTableEntry {$/;"	s	namespace:llvm::COFF
ImportHeader	COFF.h	/^  struct ImportHeader {$/;"	s	namespace:llvm::COFF
ImportLookupTableEntry32	COFF.h	/^  struct ImportLookupTableEntry32 {$/;"	s	namespace:llvm::COFF
ImportLookupTableRVA	COFF.h	/^    uint32_t ImportLookupTableRVA;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
ImportNameType	COFF.h	/^  enum ImportNameType {$/;"	g	namespace:llvm::COFF
ImportType	COFF.h	/^  enum ImportType {$/;"	g	namespace:llvm::COFF
IncludeDirectories	SourceMgr.h	/^  std::vector<std::string> IncludeDirectories;$/;"	m	class:llvm::SourceMgr
IncludeFile	IncludeFile.h	/^struct IncludeFile {$/;"	s	namespace:llvm
IncludeLoc	SourceMgr.h	/^    SMLoc IncludeLoc;$/;"	m	struct:llvm::SourceMgr::SrcBuffer
IndirectSymbolAbsolute	MachO.h	/^      IndirectSymbolAbsolute                = 0x40000000u, \/\/ INDIRECT_SYMBOL_ABS$/;"	e	enum:llvm::MachO::__anon49
IndirectSymbolLocal	MachO.h	/^      IndirectSymbolLocal                   = 0x80000000u, \/\/ INDIRECT_SYMBOL_LOCAL$/;"	e	enum:llvm::MachO::__anon49
Init	CommandLine.h	/^  const Ty &Init;$/;"	m	struct:llvm::cl::initializer
InitialExec	CodeGen.h	/^      InitialExec,$/;"	e	enum:llvm::TLSModel::Model
InitialIP	COFF.h	/^    uint16_t InitialIP;$/;"	m	struct:llvm::COFF::DOSHeader
InitialRelativeCS	COFF.h	/^    uint16_t InitialRelativeCS;$/;"	m	struct:llvm::COFF::DOSHeader
InitialRelativeSS	COFF.h	/^    uint16_t InitialRelativeSS;$/;"	m	struct:llvm::COFF::DOSHeader
InitialSP	COFF.h	/^    uint16_t InitialSP;$/;"	m	struct:llvm::COFF::DOSHeader
InitializeAllAsmParsers	TargetSelect.h	/^  inline void InitializeAllAsmParsers() {$/;"	f	namespace:llvm
InitializeAllAsmPrinters	TargetSelect.h	/^  inline void InitializeAllAsmPrinters() {$/;"	f	namespace:llvm
InitializeAllDisassemblers	TargetSelect.h	/^  inline void InitializeAllDisassemblers() {$/;"	f	namespace:llvm
InitializeAllTargetInfos	TargetSelect.h	/^  inline void InitializeAllTargetInfos() {$/;"	f	namespace:llvm
InitializeAllTargetMCs	TargetSelect.h	/^  inline void InitializeAllTargetMCs() {$/;"	f	namespace:llvm
InitializeAllTargets	TargetSelect.h	/^  inline void InitializeAllTargets() {$/;"	f	namespace:llvm
InitializeNativeTarget	TargetSelect.h	/^  inline bool InitializeNativeTarget() {$/;"	f	namespace:llvm
InitializeNativeTargetAsmParser	TargetSelect.h	/^  inline bool InitializeNativeTargetAsmParser() {$/;"	f	namespace:llvm
InitializeNativeTargetAsmPrinter	TargetSelect.h	/^  inline bool InitializeNativeTargetAsmPrinter() {$/;"	f	namespace:llvm
InitializeNativeTargetDisassembler	TargetSelect.h	/^  inline bool InitializeNativeTargetDisassembler() {$/;"	f	namespace:llvm
InstIterator	InstIterator.h	/^  InstIterator() {}$/;"	f	class:llvm::InstIterator
InstIterator	InstIterator.h	/^  InstIterator(InstIterator<A,B,C,D> &II)$/;"	f	class:llvm::InstIterator
InstIterator	InstIterator.h	/^  InstIterator(const InstIterator<A,B,C,D> &II)$/;"	f	class:llvm::InstIterator
InstIterator	InstIterator.h	/^  template<class M> InstIterator(M &m)$/;"	f	class:llvm::InstIterator
InstIterator	InstIterator.h	/^  template<class M> InstIterator(M &m, bool)$/;"	f	class:llvm::InstIterator
InstIterator	InstIterator.h	/^class InstIterator {$/;"	c	namespace:llvm
InstVisitor	InstVisitor.h	/^class InstVisitor {$/;"	c	namespace:llvm
Installer	ToolOutputFile.h	/^  } Installer;$/;"	m	class:llvm::tool_output_file	typeref:class:llvm::tool_output_file::CleanupInstaller
IntItem	IntegersSubset.h	/^  IntItem() {}$/;"	f	class:llvm::IntItem
IntItem	IntegersSubset.h	/^  IntItem(const ConstantInt *V) :$/;"	f	class:llvm::IntItem
IntItem	IntegersSubset.h	/^class IntItem {$/;"	c	namespace:llvm
IntRange	IntegersSubset.h	/^    IntRange() : IsEmpty(true) {}$/;"	f	class:llvm::IntRange
IntRange	IntegersSubset.h	/^    IntRange(const IntType &C) :$/;"	f	class:llvm::IntRange
IntRange	IntegersSubset.h	/^    IntRange(const IntType &L, const IntType &H) : Low(L), High(H),$/;"	f	class:llvm::IntRange
IntRange	IntegersSubset.h	/^    IntRange(const self &RHS) :$/;"	f	class:llvm::IntRange
IntRange	IntegersSubset.h	/^class IntRange {$/;"	c	namespace:llvm
IntegersSubset	IntegersSubset.h	/^  IntegersSubset(const IntegersSubset& RHS) :$/;"	f	class:llvm::IntegersSubset
IntegersSubset	IntegersSubset.h	/^  explicit IntegersSubset(Constant *C) : ParentTy(rangesFromConstant(C)),$/;"	f	class:llvm::IntegersSubset
IntegersSubset	IntegersSubset.h	/^  explicit IntegersSubset(const RangesCollectionTy& Src) : ParentTy(Src) {$/;"	f	class:llvm::IntegersSubset
IntegersSubset	IntegersSubset.h	/^class IntegersSubset : public IntegersSubsetGeneric<IntItem> {$/;"	c	namespace:llvm
IntegersSubsetGeneric	IntegersSubset.h	/^  IntegersSubsetGeneric(const self& RHS) {$/;"	f	class:llvm::IntegersSubsetGeneric
IntegersSubsetGeneric	IntegersSubset.h	/^  explicit IntegersSubsetGeneric(const RangesCollectionTy& Links) {$/;"	f	class:llvm::IntegersSubsetGeneric
IntegersSubsetGeneric	IntegersSubset.h	/^class IntegersSubsetGeneric {$/;"	c	namespace:llvm
IntegersSubsetMapping	IntegersSubsetMapping.h	/^  IntegersSubsetMapping() {$/;"	f	class:llvm::IntegersSubsetMapping
IntegersSubsetMapping	IntegersSubsetMapping.h	/^class IntegersSubsetMapping {$/;"	c	namespace:llvm
IntegersSubsetToBB	IntegersSubsetMapping.h	/^typedef IntegersSubsetMapping<BasicBlock> IntegersSubsetToBB;$/;"	t	namespace:llvm
InternTable	StringPool.h	/^    table_t InternTable;$/;"	m	class:llvm::StringPool
InternalBuffer	raw_ostream.h	/^    InternalBuffer,$/;"	e	enum:llvm::raw_ostream::BufferKind
IntersectionMapping	IntegersSubsetMapping.h	/^    self *IntersectionMapping;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Invalid	DynamicLibrary.h	/^    static char Invalid;$/;"	m	class:llvm::sys::DynamicLibrary
InvalidGCOV	GCOV.h	/^    InvalidGCOV,$/;"	e	enum:llvm::GCOV::GCOVFormat
IsAtBeginning	YAMLParser.h	/^  bool IsAtBeginning;$/;"	m	class:llvm::yaml::MappingNode
IsAtBeginning	YAMLParser.h	/^  bool IsAtBeginning;$/;"	m	class:llvm::yaml::SequenceNode
IsAtEnd	YAMLParser.h	/^  bool IsAtEnd;$/;"	m	class:llvm::yaml::MappingNode
IsAtEnd	YAMLParser.h	/^  bool IsAtEnd;$/;"	m	class:llvm::yaml::SequenceNode
IsLittleEndian	DataExtractor.h	/^  uint8_t IsLittleEndian;$/;"	m	class:llvm::DataExtractor
IsSimple	DOTGraphTraits.h	/^  bool IsSimple;$/;"	m	struct:llvm::DefaultDOTGraphTraits
IsSingleNumber	IntegersSubset.h	/^  bool IsSingleNumber;$/;"	m	class:llvm::IntegersSubsetGeneric
IsSingleNumbersOnly	IntegersSubset.h	/^  bool IsSingleNumbersOnly;$/;"	m	class:llvm::IntegersSubsetGeneric
It	CFG.h	/^  USE_iterator It;$/;"	m	class:llvm::PredIterator
Items	IntegersSubsetMapping.h	/^  CaseItems Items;$/;"	m	class:llvm::IntegersSubsetMapping
IterationHandle	FileSystem.h	/^    intptr_t IterationHandle;$/;"	m	struct:llvm::sys::fs::detail::DirIterState
JITDefault	CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
Keep	ToolOutputFile.h	/^    bool Keep;$/;"	m	class:llvm::tool_output_file::CleanupInstaller
Kernel	CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
Key	YAMLParser.h	/^  Node *Key;$/;"	m	class:llvm::yaml::KeyValueNode
KeyValueNode	YAMLParser.h	/^  KeyValueNode(OwningPtr<Document> &D)$/;"	f	class:llvm::yaml::KeyValueNode
KeyValueNode	YAMLParser.h	/^class KeyValueNode : public Node {$/;"	c	namespace:llvm::yaml
Kind	SourceMgr.h	/^  SourceMgr::DiagKind Kind;$/;"	m	class:llvm::SMDiagnostic
L	PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::BinOp2_match
L	PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::BinaryOp_match
L	PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::CmpClass_match
L	PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::MaxMin_match
L	PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::SelectClass_match
L	PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::fneg_match
L	PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::neg_match
L	PatternMatch.h	/^  LHS_t L;$/;"	m	struct:llvm::PatternMatch::not_match
LFS_Error	LockFileManager.h	/^    LFS_Error$/;"	e	enum:llvm::LockFileManager::LockFileState
LFS_Owned	LockFileManager.h	/^    LFS_Owned,$/;"	e	enum:llvm::LockFileManager::LockFileState
LFS_Shared	LockFileManager.h	/^    LFS_Shared,$/;"	e	enum:llvm::LockFileManager::LockFileState
LLVMDebugVersion	Dwarf.h	/^  LLVMDebugVersion = (12 << 16),        \/\/ Current version of debug information.$/;"	e	enum:llvm::__anon11
LLVMDebugVersion10	Dwarf.h	/^  LLVMDebugVersion10 = (10 << 16),      \/\/ Constant for version 10.$/;"	e	enum:llvm::__anon11
LLVMDebugVersion11	Dwarf.h	/^  LLVMDebugVersion11 = (11 << 16),      \/\/ Constant for version 11.$/;"	e	enum:llvm::__anon11
LLVMDebugVersion4	Dwarf.h	/^  LLVMDebugVersion4 = (4 << 16),        \/\/ Constant for version 4.$/;"	e	enum:llvm::__anon11
LLVMDebugVersion5	Dwarf.h	/^  LLVMDebugVersion5 = (5 << 16),        \/\/ Constant for version 5.$/;"	e	enum:llvm::__anon11
LLVMDebugVersion6	Dwarf.h	/^  LLVMDebugVersion6 = (6 << 16),        \/\/ Constant for version 6.$/;"	e	enum:llvm::__anon11
LLVMDebugVersion7	Dwarf.h	/^  LLVMDebugVersion7 = (7 << 16),        \/\/ Constant for version 7.$/;"	e	enum:llvm::__anon11
LLVMDebugVersion8	Dwarf.h	/^  LLVMDebugVersion8 = (8 << 16),        \/\/ Constant for version 8.$/;"	e	enum:llvm::__anon11
LLVMDebugVersion9	Dwarf.h	/^  LLVMDebugVersion9 = (9 << 16),        \/\/ Constant for version 9.$/;"	e	enum:llvm::__anon11
LLVMDebugVersionMask	Dwarf.h	/^  LLVMDebugVersionMask = 0xffff0000     \/\/ Mask for version number.$/;"	e	enum:llvm::__anon11
LLVMFileType	PathV1.h	/^  enum LLVMFileType {$/;"	g	namespace:llvm::sys
LLVM_ADT_SAVERESTORE	SaveAndRestore.h	16;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	AlignOf.h	104;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	AlignOf.h	117;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	AlignOf.h	131;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	AlignOf.h	77;"	d
LLVM_ALIGNEDCHARARRAY_TEMPLATE_ALIGNMENT	AlignOf.h	82;"	d
LLVM_ASM_PARSER	TargetSelect.h	38;"	d
LLVM_ASM_PARSER	TargetSelect.h	97;"	d
LLVM_ASM_PRINTER	TargetSelect.h	34;"	d
LLVM_ASM_PRINTER	TargetSelect.h	87;"	d
LLVM_ATTRIBUTE_ALWAYS_INLINE	Compiler.h	161;"	d
LLVM_ATTRIBUTE_ALWAYS_INLINE	Compiler.h	163;"	d
LLVM_ATTRIBUTE_ALWAYS_INLINE	Compiler.h	165;"	d
LLVM_ATTRIBUTE_DEPRECATED	Compiler.h	187;"	d
LLVM_ATTRIBUTE_DEPRECATED	Compiler.h	190;"	d
LLVM_ATTRIBUTE_DEPRECATED	Compiler.h	193;"	d
LLVM_ATTRIBUTE_DEPRECATED	Compiler.h	196;"	d
LLVM_ATTRIBUTE_NOINLINE	Compiler.h	149;"	d
LLVM_ATTRIBUTE_NOINLINE	Compiler.h	151;"	d
LLVM_ATTRIBUTE_NOINLINE	Compiler.h	153;"	d
LLVM_ATTRIBUTE_NORETURN	Compiler.h	170;"	d
LLVM_ATTRIBUTE_NORETURN	Compiler.h	172;"	d
LLVM_ATTRIBUTE_NORETURN	Compiler.h	174;"	d
LLVM_ATTRIBUTE_UNUSED	Compiler.h	101;"	d
LLVM_ATTRIBUTE_UNUSED	Compiler.h	103;"	d
LLVM_ATTRIBUTE_USED	Compiler.h	87;"	d
LLVM_ATTRIBUTE_USED	Compiler.h	89;"	d
LLVM_ATTRIBUTE_WEAK	Compiler.h	107;"	d
LLVM_ATTRIBUTE_WEAK	Compiler.h	109;"	d
LLVM_BUILTIN_TRAP	Compiler.h	212;"	d
LLVM_BUILTIN_TRAP	Compiler.h	214;"	d
LLVM_BUILTIN_UNREACHABLE	Compiler.h	205;"	d
LLVM_DEFINED_HAS_FEATURE	type_traits.h	25;"	d
LLVM_DELETED_FUNCTION	Allocator.h	/^  BumpPtrAllocator(const BumpPtrAllocator &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BumpPtrAllocator
LLVM_DELETED_FUNCTION	Allocator.h	/^  void operator=(const BumpPtrAllocator &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BumpPtrAllocator
LLVM_DELETED_FUNCTION	Compiler.h	55;"	d
LLVM_DELETED_FUNCTION	Compiler.h	57;"	d
LLVM_DELETED_FUNCTION	FileOutputBuffer.h	/^  FileOutputBuffer &operator=(const FileOutputBuffer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::FileOutputBuffer
LLVM_DELETED_FUNCTION	FileOutputBuffer.h	/^  FileOutputBuffer(const FileOutputBuffer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::FileOutputBuffer
LLVM_DELETED_FUNCTION	FileSystem.h	/^  mapped_file_region &operator =(mapped_file_region&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::fs::mapped_file_region
LLVM_DELETED_FUNCTION	FileSystem.h	/^  mapped_file_region() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::fs::mapped_file_region
LLVM_DELETED_FUNCTION	FileSystem.h	/^  mapped_file_region(mapped_file_region&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::fs::mapped_file_region
LLVM_DELETED_FUNCTION	LockFileManager.h	/^  LockFileManager &operator=(const LockFileManager &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LockFileManager
LLVM_DELETED_FUNCTION	LockFileManager.h	/^  LockFileManager(const LockFileManager &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::LockFileManager
LLVM_DELETED_FUNCTION	MemoryBuffer.h	/^  MemoryBuffer &operator=(const MemoryBuffer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MemoryBuffer
LLVM_DELETED_FUNCTION	MemoryBuffer.h	/^  MemoryBuffer(const MemoryBuffer &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MemoryBuffer
LLVM_DELETED_FUNCTION	Mutex.h	/^      MutexImpl(const MutexImpl &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::MutexImpl
LLVM_DELETED_FUNCTION	Mutex.h	/^      void operator=(const MutexImpl &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::MutexImpl
LLVM_DELETED_FUNCTION	MutexGuard.h	/^    MutexGuard(const MutexGuard &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MutexGuard
LLVM_DELETED_FUNCTION	MutexGuard.h	/^    void operator=(const MutexGuard &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::MutexGuard
LLVM_DELETED_FUNCTION	PrettyStackTrace.h	/^    PrettyStackTraceEntry(const PrettyStackTraceEntry &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PrettyStackTraceEntry
LLVM_DELETED_FUNCTION	PrettyStackTrace.h	/^    void operator=(const PrettyStackTraceEntry&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::PrettyStackTraceEntry
LLVM_DELETED_FUNCTION	Program.h	/^    Program& operator=(const Program& other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::Program
LLVM_DELETED_FUNCTION	Program.h	/^    Program(const Program& other) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::Program
LLVM_DELETED_FUNCTION	RWMutex.h	/^      RWMutexImpl(const RWMutexImpl & original) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::RWMutexImpl
LLVM_DELETED_FUNCTION	RWMutex.h	/^      void operator=(const RWMutexImpl &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::sys::RWMutexImpl
LLVM_DELETED_FUNCTION	Registry.h	/^    Registry() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::Registry
LLVM_DELETED_FUNCTION	Registry.h	/^    RegistryTraits() LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::RegistryTraits
LLVM_DELETED_FUNCTION	SourceMgr.h	/^  SourceMgr(const SourceMgr&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SourceMgr
LLVM_DELETED_FUNCTION	SourceMgr.h	/^  void operator=(const SourceMgr&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SourceMgr
LLVM_DELETED_FUNCTION	StreamableMemoryObject.h	/^  StreamingMemoryObject(const StreamingMemoryObject&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_DELETED_FUNCTION	StreamableMemoryObject.h	/^  void operator=(const StreamingMemoryObject&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_DELETED_FUNCTION	Timer.h	/^  TimeRegion(const TimeRegion &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TimeRegion
LLVM_DELETED_FUNCTION	Timer.h	/^  TimerGroup(const TimerGroup &TG) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TimerGroup
LLVM_DELETED_FUNCTION	Timer.h	/^  void operator=(const TimerGroup &TG) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::TimerGroup
LLVM_DELETED_FUNCTION	ValueHandle.h	/^  ValueHandleBase(const ValueHandleBase&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ValueHandleBase
LLVM_DELETED_FUNCTION	raw_ostream.h	/^  raw_ostream(const raw_ostream &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::raw_ostream
LLVM_DELETED_FUNCTION	raw_ostream.h	/^  void operator=(const raw_ostream &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::raw_ostream
LLVM_DELETED_FUNCTION	system_error.h	/^  error_category& operator=(const error_category&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::error_category
LLVM_DELETED_FUNCTION	system_error.h	/^  error_category(const error_category&) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::error_category
LLVM_DISASSEMBLER	TargetSelect.h	107;"	d
LLVM_DISASSEMBLER	TargetSelect.h	42;"	d
LLVM_EXTENSION	Compiler.h	180;"	d
LLVM_EXTENSION	Compiler.h	182;"	d
LLVM_FINAL	Compiler.h	63;"	d
LLVM_FINAL	Compiler.h	65;"	d
LLVM_GCOV_H	GCOV.h	16;"	d
LLVM_LIBRARY_VISIBILITY	Compiler.h	81;"	d
LLVM_LIBRARY_VISIBILITY	Compiler.h	83;"	d
LLVM_LIKELY	Compiler.h	125;"	d
LLVM_LIKELY	Compiler.h	128;"	d
LLVM_OVERRIDE	Allocator.h	/^  virtual MemSlab *Allocate(size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::MallocSlabAllocator
LLVM_OVERRIDE	Allocator.h	/^  virtual void Deallocate(MemSlab *Slab) LLVM_OVERRIDE;$/;"	m	class:llvm::MallocSlabAllocator
LLVM_OVERRIDE	CommandLine.h	/^  virtual size_t getOptionWidth() const LLVM_OVERRIDE;$/;"	m	class:llvm::cl::alias
LLVM_OVERRIDE	CommandLine.h	/^  virtual void printOptionInfo(size_t GlobalWidth) const LLVM_OVERRIDE;$/;"	m	class:llvm::cl::alias
LLVM_OVERRIDE	Compiler.h	71;"	d
LLVM_OVERRIDE	Compiler.h	73;"	d
LLVM_OVERRIDE	FormattedStream.h	/^    virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::formatted_raw_ostream
LLVM_OVERRIDE	PrettyStackTrace.h	/^    virtual void print(raw_ostream &OS) const LLVM_OVERRIDE;$/;"	m	class:llvm::PrettyStackTraceProgram
LLVM_OVERRIDE	PrettyStackTrace.h	/^    virtual void print(raw_ostream &OS) const LLVM_OVERRIDE;$/;"	m	class:llvm::PrettyStackTraceString
LLVM_OVERRIDE	StreamableMemoryObject.h	/^                        uint64_t* copied) const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	StreamableMemoryObject.h	/^  virtual bool isObjectEnd(uint64_t address) const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	StreamableMemoryObject.h	/^  virtual bool isValidAddress(uint64_t address) const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	StreamableMemoryObject.h	/^  virtual int readByte(uint64_t address, uint8_t* ptr) const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	StreamableMemoryObject.h	/^  virtual uint64_t getExtent() const LLVM_OVERRIDE;$/;"	m	class:llvm::StreamingMemoryObject
LLVM_OVERRIDE	circular_raw_ostream.h	/^    virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::circular_raw_ostream
LLVM_OVERRIDE	raw_os_ostream.h	/^  virtual uint64_t current_pos() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_os_ostream
LLVM_OVERRIDE	raw_os_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_os_ostream
LLVM_OVERRIDE	raw_ostream.h	/^                                   bool bg=false) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual bool has_colors() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual bool is_displayed() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual raw_ostream &resetColor() LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual raw_ostream &reverseColor() LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual size_t preferred_buffer_size() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual uint64_t current_pos() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_null_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual uint64_t current_pos() const LLVM_OVERRIDE;$/;"	m	class:llvm::raw_svector_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_fd_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_string_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t Size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_svector_ostream
LLVM_OVERRIDE	raw_ostream.h	/^  virtual void write_impl(const char *Ptr, size_t size) LLVM_OVERRIDE;$/;"	m	class:llvm::raw_null_ostream
LLVM_OVERRIDE	system_error.h	/^  virtual std::string message(int ev) const LLVM_OVERRIDE;$/;"	m	class:llvm::_do_message
LLVM_PATH_DEPRECATED_MSG	PathV1.h	24;"	d
LLVM_READNONE	Compiler.h	113;"	d
LLVM_READNONE	Compiler.h	115;"	d
LLVM_READONLY	Compiler.h	119;"	d
LLVM_READONLY	Compiler.h	121;"	d
LLVM_SUPPORT_ALIGNOF_H	AlignOf.h	16;"	d
LLVM_SUPPORT_ALLOCATOR_H	Allocator.h	15;"	d
LLVM_SUPPORT_BLOCKFREQUENCY_H	BlockFrequency.h	15;"	d
LLVM_SUPPORT_BRANCHPROBABILITY_H	BranchProbability.h	15;"	d
LLVM_SUPPORT_CALLSITE_H	CallSite.h	27;"	d
LLVM_SUPPORT_CAPACITY_H	Capacity.h	16;"	d
LLVM_SUPPORT_CASTING_H	Casting.h	16;"	d
LLVM_SUPPORT_CFG_H	CFG.h	16;"	d
LLVM_SUPPORT_CIRCULAR_RAW_OSTREAM_H	circular_raw_ostream.h	16;"	d
LLVM_SUPPORT_CODEGEN_H	CodeGen.h	16;"	d
LLVM_SUPPORT_COMMANDLINE_H	CommandLine.h	21;"	d
LLVM_SUPPORT_COMPILER_H	Compiler.h	16;"	d
LLVM_SUPPORT_CONSTANTFOLDER_H	ConstantFolder.h	18;"	d
LLVM_SUPPORT_CONSTANT_RANGE_H	ConstantRange.h	33;"	d
LLVM_SUPPORT_CRASHRECOVERYCONTEXT_H	CrashRecoveryContext.h	11;"	d
LLVM_SUPPORT_DATAEXTRACTOR_H	DataExtractor.h	11;"	d
LLVM_SUPPORT_DATAFLOW_H	DataFlow.h	15;"	d
LLVM_SUPPORT_DATASTREAM_H_	DataStream.h	18;"	d
LLVM_SUPPORT_DEBUGLOC_H	DebugLoc.h	16;"	d
LLVM_SUPPORT_DEBUG_H	Debug.h	27;"	d
LLVM_SUPPORT_DOTGRAPHTRAITS_H	DOTGraphTraits.h	18;"	d
LLVM_SUPPORT_DWARF_H	Dwarf.h	17;"	d
LLVM_SUPPORT_ELF_H	ELF.h	21;"	d
LLVM_SUPPORT_ENDIAN_H	Endian.h	15;"	d
LLVM_SUPPORT_ERRORHANDLING_H	ErrorHandling.h	16;"	d
LLVM_SUPPORT_FILEOUTPUTBUFFER_H	FileOutputBuffer.h	15;"	d
LLVM_SUPPORT_FILEUTILITIES_H	FileUtilities.h	16;"	d
LLVM_SUPPORT_FILE_SYSTEM_H	FileSystem.h	28;"	d
LLVM_SUPPORT_FORMATTEDSTREAM_H	FormattedStream.h	16;"	d
LLVM_SUPPORT_FORMAT_H	Format.h	24;"	d
LLVM_SUPPORT_GETELEMENTPTRTYPE_H	GetElementPtrTypeIterator.h	16;"	d
LLVM_SUPPORT_GRAPHWRITER_H	GraphWriter.h	24;"	d
LLVM_SUPPORT_INSTITERATOR_H	InstIterator.h	20;"	d
LLVM_SUPPORT_INSTVISITOR_H	InstVisitor.h	12;"	d
LLVM_SUPPORT_IRREADER_H	IRReader.h	20;"	d
LLVM_SUPPORT_LEAKDETECTOR_H	LeakDetector.h	23;"	d
LLVM_SUPPORT_LOCALE	Locale.h	2;"	d
LLVM_SUPPORT_LOCKFILEMANAGER_H	LockFileManager.h	10;"	d
LLVM_SUPPORT_MACHO_H	MachO.h	15;"	d
LLVM_SUPPORT_MANAGED_STATIC_H	ManagedStatic.h	15;"	d
LLVM_SUPPORT_MATHEXTRAS_H	MathExtras.h	15;"	d
LLVM_SUPPORT_MEMORYBUFFER_H	MemoryBuffer.h	15;"	d
LLVM_SUPPORT_MUTEXGUARD_H	MutexGuard.h	16;"	d
LLVM_SUPPORT_NOFOLDER_H	NoFolder.h	23;"	d
LLVM_SUPPORT_OUTPUTBUFFER_H	OutputBuffer.h	15;"	d
LLVM_SUPPORT_PASS_NAME_PARSER_H	PassNameParser.h	24;"	d
LLVM_SUPPORT_PATHV2_H	PathV2.h	17;"	d
LLVM_SUPPORT_PATTERNMATCH_H	PatternMatch.h	30;"	d
LLVM_SUPPORT_PLUGINLOADER_H	PluginLoader.h	18;"	d
LLVM_SUPPORT_POINTERLIKETYPETRAITS_H	PointerLikeTypeTraits.h	16;"	d
LLVM_SUPPORT_PREDITERATORCACHE_H	PredIteratorCache.h	20;"	d
LLVM_SUPPORT_PRETTYSTACKTRACE_H	PrettyStackTrace.h	17;"	d
LLVM_SUPPORT_RAW_OSTREAM_H	raw_ostream.h	15;"	d
LLVM_SUPPORT_RAW_OS_OSTREAM_H	raw_os_ostream.h	15;"	d
LLVM_SUPPORT_RECYCLER_H	Recycler.h	16;"	d
LLVM_SUPPORT_RECYCLINGALLOCATOR_H	RecyclingAllocator.h	16;"	d
LLVM_SUPPORT_REGEX_H	Regex.h	15;"	d
LLVM_SUPPORT_REGISTRY_H	Registry.h	15;"	d
LLVM_SUPPORT_REGISTRY_PARSER_H	RegistryParser.h	15;"	d
LLVM_SUPPORT_STRINGPOOL_H	StringPool.h	30;"	d
LLVM_SUPPORT_SYSTEMUTILS_H	SystemUtils.h	16;"	d
LLVM_SUPPORT_TARGETFOLDER_H	TargetFolder.h	20;"	d
LLVM_SUPPORT_TARGETREGISTRY_H	TargetRegistry.h	20;"	d
LLVM_SUPPORT_TARGETSELECT_H	TargetSelect.h	17;"	d
LLVM_SUPPORT_TIMER_H	Timer.h	16;"	d
LLVM_SUPPORT_TOOL_OUTPUT_FILE_H	ToolOutputFile.h	15;"	d
LLVM_SUPPORT_TYPE_TRAITS_H	type_traits.h	18;"	d
LLVM_SUPPORT_VALUEHANDLE_H	ValueHandle.h	15;"	d
LLVM_SUPPORT_WIN64EH_H	Win64EH.h	17;"	d
LLVM_SUPPORT_WIN_COFF_H	COFF.h	24;"	d
LLVM_SUPPORT_YAML_PARSER_H	YAMLParser.h	39;"	d
LLVM_SYSTEM_ATOMIC_H	Atomic.h	15;"	d
LLVM_SYSTEM_DISASSEMBLER_H	Disassembler.h	16;"	d
LLVM_SYSTEM_DYNAMIC_LIBRARY_H	DynamicLibrary.h	15;"	d
LLVM_SYSTEM_ERRNO_H	Errno.h	15;"	d
LLVM_SYSTEM_FENV_H	FEnv.h	16;"	d
LLVM_SYSTEM_HOST_H	Host.h	15;"	d
LLVM_SYSTEM_INCLUDEFILE_H	IncludeFile.h	16;"	d
LLVM_SYSTEM_LEB128_H	LEB128.h	16;"	d
LLVM_SYSTEM_MEMORY_H	Memory.h	15;"	d
LLVM_SYSTEM_MUTEX_H	Mutex.h	15;"	d
LLVM_SYSTEM_PATH_H	PathV1.h	15;"	d
LLVM_SYSTEM_PROCESS_H	Process.h	15;"	d
LLVM_SYSTEM_PROGRAM_H	Program.h	15;"	d
LLVM_SYSTEM_RWMUTEX_H	RWMutex.h	15;"	d
LLVM_SYSTEM_SIGNALS_H	Signals.h	16;"	d
LLVM_SYSTEM_SOLARIS_H	Solaris.h	15;"	d
LLVM_SYSTEM_SWAP_BYTE_ORDER_H	SwapByteOrder.h	16;"	d
LLVM_SYSTEM_SYSTEM_ERROR_H	system_error.h	18;"	d
LLVM_SYSTEM_THREADING_H	Threading.h	15;"	d
LLVM_SYSTEM_THREAD_LOCAL_H	ThreadLocal.h	15;"	d
LLVM_SYSTEM_TIMEVALUE_H	TimeValue.h	18;"	d
LLVM_SYSTEM_VALGRIND_H	Valgrind.h	17;"	d
LLVM_TARGET	TargetSelect.h	23;"	d
LLVM_TARGET	TargetSelect.h	26;"	d
LLVM_TARGET	TargetSelect.h	30;"	d
LLVM_TARGET	TargetSelect.h	54;"	d
LLVM_TARGET	TargetSelect.h	67;"	d
LLVM_TARGET	TargetSelect.h	77;"	d
LLVM_UNLIKELY	Compiler.h	126;"	d
LLVM_UNLIKELY	Compiler.h	129;"	d
LLVM_USE_RVALUE_REFERENCES	Compiler.h	28;"	d
LLVM_USE_RVALUE_REFERENCES	Compiler.h	30;"	d
L_OPENED	IntegersSubsetMapping.h	/^    L_OPENED,$/;"	e	enum:llvm::IntegersSubsetMapping::DiffProcessState
Large	CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
LeakDetector	LeakDetector.h	/^struct LeakDetector {$/;"	s	namespace:llvm
LeftMapping	IntegersSubsetMapping.h	/^    self *LeftMapping;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Length	COFF.h	/^    uint32_t Length;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
Less	CodeGen.h	/^      Less,        \/\/ -O1$/;"	e	enum:llvm::CodeGenOpt::Level
LessBySize	IntegersSubset.h	/^    static bool LessBySize(const self &LHS, const self &RHS) {$/;"	f	class:llvm::IntRange
Level	CodeGen.h	/^    enum Level {$/;"	g	namespace:llvm::CodeGenOpt
Level	FileSystem.h	/^    uint16_t Level;$/;"	m	struct:llvm::sys::fs::detail::RecDirIterState
LineCol	DebugLoc.h	/^    unsigned LineCol;$/;"	m	class:llvm::DebugLoc
LineContents	SourceMgr.h	/^  std::string Message, LineContents;$/;"	m	class:llvm::SMDiagnostic
LineCounts	GCOV.h	/^typedef SmallVector<uint32_t, 16> LineCounts;$/;"	t	namespace:llvm
LineInfo	GCOV.h	/^  StringMap<LineCounts> LineInfo;$/;"	m	class:llvm::FileInfo
LineNo	SourceMgr.h	/^  int LineNo, ColumnNo;$/;"	m	class:llvm::SMDiagnostic
LineNoCache	SourceMgr.h	/^  mutable void *LineNoCache;$/;"	m	class:llvm::SourceMgr
LineNumber	GCOV.h	/^  uint32_t LineNumber;$/;"	m	class:llvm::GCOVFunction
Linenumber	COFF.h	/^    uint16_t Linenumber;$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
Lines	GCOV.h	/^  SmallVector<uint32_t, 4> Lines;$/;"	m	class:llvm::GCOVLines
Lines	GCOV.h	/^  StringMap<GCOVLines *> Lines;$/;"	m	class:llvm::GCOVBlock
ListenerHead	Registry.h	/^    static listener *ListenerHead, *ListenerTail;$/;"	m	class:llvm::Registry
ListenerHead	Registry.h	/^  typename Registry<T,U>::listener *Registry<T,U>::ListenerHead;$/;"	m	class:llvm::Registry
ListenerTail	Registry.h	/^    static listener *ListenerHead, *ListenerTail;$/;"	m	class:llvm::Registry
ListenerTail	Registry.h	/^  typename Registry<T,U>::listener *Registry<T,U>::ListenerTail;$/;"	m	class:llvm::Registry
Lo_32	MathExtras.h	/^inline uint32_t Lo_32(uint64_t Value) {$/;"	f	namespace:llvm
LoadCommandCodeSignDRs	MachO.h	/^      LoadCommandCodeSignDRs              = 0x0000002Bu, \/\/ LC_DYLIB_CODE_SIGN_DRS$/;"	e	enum:llvm::MachO::__anon49
LoadCommandCodeSignature	MachO.h	/^      LoadCommandCodeSignature            = 0x0000001Du, \/\/ LC_CODE_SIGNATURE$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDataInCode	MachO.h	/^      LoadCommandDataInCode               = 0x00000029u, \/\/ LC_DATA_IN_CODE$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDyldEnvironment	MachO.h	/^      LoadCommandDyldEnvironment          = 0x00000027u, \/\/ LC_DYLD_ENVIRONMENT$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDylibIdent	MachO.h	/^      LoadCommandDylibIdent               = 0x0000000Du, \/\/ LC_ID_DYLIB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDylibLazyLoad	MachO.h	/^      LoadCommandDylibLazyLoad            = 0x00000020u, \/\/ LC_LAZY_LOAD_DYLIB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDylibLoad	MachO.h	/^      LoadCommandDylibLoad                = 0x0000000Cu, \/\/ LC_LOAD_DYLIB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDylibLoadUpward	MachO.h	/^      LoadCommandDylibLoadUpward          = 0x80000023u, \/\/ LC_LOAD_UPWARD_DYLIB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDylibLoadWeak	MachO.h	/^      LoadCommandDylibLoadWeak            = 0x80000018u, \/\/ LC_LOAD_WEAK_DYLIB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDylibPrebound	MachO.h	/^      LoadCommandDylibPrebound            = 0x00000010u, \/\/ LC_PREBOUND_DYLIB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDylibReexport	MachO.h	/^      LoadCommandDylibReexport            = 0x8000001Fu, \/\/ LC_REEXPORT_DYLIB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDynamicLinkerIdent	MachO.h	/^      LoadCommandDynamicLinkerIdent       = 0x0000000Fu, \/\/ LC_ID_DYLINKER$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDynamicLinkerInfo	MachO.h	/^      LoadCommandDynamicLinkerInfo        = 0x00000022u, \/\/ LC_DYLD_INFO$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDynamicLinkerInfoOnly	MachO.h	/^      LoadCommandDynamicLinkerInfoOnly    = 0x80000022u, \/\/ LC_DYLD_INFO_ONLY$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDynamicLinkerLoad	MachO.h	/^      LoadCommandDynamicLinkerLoad        = 0x0000000Eu, \/\/ LC_LOAD_DYLINKER$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDynamicLinkerRequired	MachO.h	/^      LoadCommandDynamicLinkerRequired    = 0x80000000u, \/\/ LC_REQ_DYLD$/;"	e	enum:llvm::MachO::__anon49
LoadCommandDynamicSymtabInfo	MachO.h	/^      LoadCommandDynamicSymtabInfo        = 0x0000000Bu, \/\/ LC_DYSYMTAB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandEncryptionInfo	MachO.h	/^      LoadCommandEncryptionInfo           = 0x00000021u, \/\/ LC_ENCRYPTION_INFO$/;"	e	enum:llvm::MachO::__anon49
LoadCommandFixedVMFileInclusion	MachO.h	/^      LoadCommandFixedVMFileInclusion     = 0x00000009u, \/\/ LC_FVMFILE$/;"	e	enum:llvm::MachO::__anon49
LoadCommandFixedVMShlibIdent	MachO.h	/^      LoadCommandFixedVMShlibIdent        = 0x00000007u, \/\/ LC_IDFVMLIB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandFixedVMShlibLoad	MachO.h	/^      LoadCommandFixedVMShlibLoad         = 0x00000006u, \/\/ LC_LOADFVMLIB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandFunctionStarts	MachO.h	/^      LoadCommandFunctionStarts           = 0x00000026u, \/\/ LC_FUNCTION_STARTS$/;"	e	enum:llvm::MachO::__anon49
LoadCommandIdent	MachO.h	/^      LoadCommandIdent                    = 0x00000008u, \/\/ LC_IDENT$/;"	e	enum:llvm::MachO::__anon49
LoadCommandMain	MachO.h	/^      LoadCommandMain                     = 0x80000028u, \/\/ LC_MAIN$/;"	e	enum:llvm::MachO::__anon49
LoadCommandPreBindChecksum	MachO.h	/^      LoadCommandPreBindChecksum          = 0x00000017u, \/\/ LC_PREBIND_CKSUM$/;"	e	enum:llvm::MachO::__anon49
LoadCommandPrePage	MachO.h	/^      LoadCommandPrePage                  = 0x0000000Au, \/\/ LC_PREPAGE$/;"	e	enum:llvm::MachO::__anon49
LoadCommandRoutines32	MachO.h	/^      LoadCommandRoutines32               = 0x00000011u, \/\/ LC_ROUTINES$/;"	e	enum:llvm::MachO::__anon49
LoadCommandRoutines64	MachO.h	/^      LoadCommandRoutines64               = 0x0000001Au, \/\/ LC_ROUTINES_64$/;"	e	enum:llvm::MachO::__anon49
LoadCommandRunpath	MachO.h	/^      LoadCommandRunpath                  = 0x8000001Cu, \/\/ LC_RPATH$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSegment32	MachO.h	/^      LoadCommandSegment32                = 0x00000001u, \/\/ LC_SEGMENT$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSegment64	MachO.h	/^      LoadCommandSegment64                = 0x00000019u, \/\/ LC_SEGMENT_64$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSegmentSplitInfo	MachO.h	/^      LoadCommandSegmentSplitInfo         = 0x0000001Eu, \/\/ LC_SEGMENT_SPLIT_INFO$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSourceVersion	MachO.h	/^      LoadCommandSourceVersion            = 0x0000002Au, \/\/ LC_SOURCE_VERSION$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSubClient	MachO.h	/^      LoadCommandSubClient                = 0x00000014u, \/\/ LC_SUB_CLIENT$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSubFramework	MachO.h	/^      LoadCommandSubFramework             = 0x00000012u, \/\/ LC_SUB_FRAMEWORK$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSubLibrary	MachO.h	/^      LoadCommandSubLibrary               = 0x00000015u, \/\/ LC_SUB_LIBRARY$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSubUmbrella	MachO.h	/^      LoadCommandSubUmbrella              = 0x00000013u, \/\/ LC_SUB_UMBRELLA$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSymSeg	MachO.h	/^      LoadCommandSymSeg                   = 0x00000003u, \/\/ LC_SYMSEG$/;"	e	enum:llvm::MachO::__anon49
LoadCommandSymtab	MachO.h	/^      LoadCommandSymtab                   = 0x00000002u, \/\/ LC_SYMTAB$/;"	e	enum:llvm::MachO::__anon49
LoadCommandThread	MachO.h	/^      LoadCommandThread                   = 0x00000004u, \/\/ LC_THREAD$/;"	e	enum:llvm::MachO::__anon49
LoadCommandTwoLevelHints	MachO.h	/^      LoadCommandTwoLevelHints            = 0x00000016u, \/\/ LC_TWOLEVEL_HINTS$/;"	e	enum:llvm::MachO::__anon49
LoadCommandUUID	MachO.h	/^      LoadCommandUUID                     = 0x0000001Bu, \/\/ LC_UUID$/;"	e	enum:llvm::MachO::__anon49
LoadCommandUnixThread	MachO.h	/^      LoadCommandUnixThread               = 0x00000005u, \/\/ LC_UNIXTHREAD$/;"	e	enum:llvm::MachO::__anon49
LoadCommandVersionMinIPhoneOS	MachO.h	/^      LoadCommandVersionMinIPhoneOS       = 0x00000025u, \/\/ LC_VERSION_MIN_IPHONEOS$/;"	e	enum:llvm::MachO::__anon49
LoadCommandVersionMinMacOSX	MachO.h	/^      LoadCommandVersionMinMacOSX         = 0x00000024u, \/\/ LC_VERSION_MIN_MACOSX$/;"	e	enum:llvm::MachO::__anon49
LoadLibraryPermanently	DynamicLibrary.h	/^    static bool LoadLibraryPermanently(const char *Filename,$/;"	f	class:llvm::sys::DynamicLibrary
LoaderFlags	COFF.h	/^    uint32_t LoaderFlags;$/;"	m	struct:llvm::COFF::PEHeader
Loc	CommandLine.h	/^  Ty &Loc;$/;"	m	struct:llvm::cl::LocationClass
Loc	SourceMgr.h	/^  SMLoc Loc;$/;"	m	class:llvm::SMDiagnostic
LocalDynamic	CodeGen.h	/^      LocalDynamic,$/;"	e	enum:llvm::TLSModel::Model
LocalExec	CodeGen.h	/^      LocalExec$/;"	e	enum:llvm::TLSModel::Model
Location	CommandLine.h	/^  DataType *Location;   \/\/ Where to store the object...$/;"	m	class:llvm::cl::opt_storage
Location	CommandLine.h	/^  StorageClass *Location;   \/\/ Where to store the object...$/;"	m	class:llvm::cl::list_storage
Location	CommandLine.h	/^  unsigned *Location;   \/\/ Where to store the bits...$/;"	m	class:llvm::cl::bits_storage
LocationClass	CommandLine.h	/^  LocationClass(Ty &L) : Loc(L) {}$/;"	f	struct:llvm::cl::LocationClass
LocationClass	CommandLine.h	/^struct LocationClass {$/;"	s	namespace:llvm::cl
LockFileManager	LockFileManager.h	/^class LockFileManager {$/;"	c	namespace:llvm
LockFileName	LockFileManager.h	/^  SmallString<128> LockFileName;$/;"	m	class:llvm::LockFileManager
LockFileState	LockFileManager.h	/^  enum LockFileState {$/;"	g	class:llvm::LockFileManager
Log2_32	MathExtras.h	/^inline unsigned Log2_32(uint32_t Value) {$/;"	f	namespace:llvm
Log2_32_Ceil	MathExtras.h	/^inline unsigned Log2_32_Ceil(uint32_t Value) {$/;"	f	namespace:llvm
Log2_64	MathExtras.h	/^inline unsigned Log2_64(uint64_t Value) {$/;"	f	namespace:llvm
Log2_64_Ceil	MathExtras.h	/^inline unsigned Log2_64_Ceil(uint64_t Value) {$/;"	f	namespace:llvm
Low	IntegersSubset.h	/^    IntType Low;$/;"	m	class:llvm::IntRange
Lower	ConstantRange.h	/^  APInt Lower, Upper;$/;"	m	class:llvm::ConstantRange
M	MutexGuard.h	/^    sys::Mutex &M;$/;"	m	class:llvm::MutexGuard
MAGENTA	raw_ostream.h	/^    MAGENTA,$/;"	e	enum:llvm::raw_ostream::Colors
MCAsmBackendCtorFn	TargetRegistry.h	/^    MCAsmBackendCtorTy MCAsmBackendCtorFn;$/;"	m	class:llvm::Target
MCAsmBackendCtorTy	TargetRegistry.h	/^    typedef MCAsmBackend *(*MCAsmBackendCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCAsmInfoCtorFn	TargetRegistry.h	/^    MCAsmInfoCtorFnTy MCAsmInfoCtorFn;$/;"	m	class:llvm::Target
MCAsmInfoCtorFnTy	TargetRegistry.h	/^    typedef MCAsmInfo *(*MCAsmInfoCtorFnTy)(const Target &T,$/;"	t	class:llvm::Target
MCAsmLexerCtorFn	TargetRegistry.h	/^    MCAsmLexerCtorTy MCAsmLexerCtorFn;$/;"	m	class:llvm::Target
MCAsmLexerCtorTy	TargetRegistry.h	/^    typedef MCTargetAsmLexer *(*MCAsmLexerCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCAsmParserCtorFn	TargetRegistry.h	/^    MCAsmParserCtorTy MCAsmParserCtorFn;$/;"	m	class:llvm::Target
MCAsmParserCtorTy	TargetRegistry.h	/^    typedef MCTargetAsmParser *(*MCAsmParserCtorTy)(MCSubtargetInfo &STI,$/;"	t	class:llvm::Target
MCCodeEmitterCtorFn	TargetRegistry.h	/^    MCCodeEmitterCtorTy MCCodeEmitterCtorFn;$/;"	m	class:llvm::Target
MCCodeEmitterCtorTy	TargetRegistry.h	/^    typedef MCCodeEmitter *(*MCCodeEmitterCtorTy)(const MCInstrInfo &II,$/;"	t	class:llvm::Target
MCCodeGenInfoCtorFn	TargetRegistry.h	/^    MCCodeGenInfoCtorFnTy MCCodeGenInfoCtorFn;$/;"	m	class:llvm::Target
MCCodeGenInfoCtorFnTy	TargetRegistry.h	/^    typedef MCCodeGenInfo *(*MCCodeGenInfoCtorFnTy)(StringRef TT,$/;"	t	class:llvm::Target
MCDisassemblerCtorFn	TargetRegistry.h	/^    MCDisassemblerCtorTy MCDisassemblerCtorFn;$/;"	m	class:llvm::Target
MCDisassemblerCtorTy	TargetRegistry.h	/^    typedef MCDisassembler *(*MCDisassemblerCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCInstPrinterCtorFn	TargetRegistry.h	/^    MCInstPrinterCtorTy MCInstPrinterCtorFn;$/;"	m	class:llvm::Target
MCInstPrinterCtorTy	TargetRegistry.h	/^    typedef MCInstPrinter *(*MCInstPrinterCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCInstrAnalysisCtorFn	TargetRegistry.h	/^    MCInstrAnalysisCtorFnTy MCInstrAnalysisCtorFn;$/;"	m	class:llvm::Target
MCInstrAnalysisCtorFnTy	TargetRegistry.h	/^    typedef MCInstrAnalysis *(*MCInstrAnalysisCtorFnTy)(const MCInstrInfo*Info);$/;"	t	class:llvm::Target
MCInstrInfoCtorFn	TargetRegistry.h	/^    MCInstrInfoCtorFnTy MCInstrInfoCtorFn;$/;"	m	class:llvm::Target
MCInstrInfoCtorFnTy	TargetRegistry.h	/^    typedef MCInstrInfo *(*MCInstrInfoCtorFnTy)(void);$/;"	t	class:llvm::Target
MCObjectStreamerCtorFn	TargetRegistry.h	/^    MCObjectStreamerCtorTy MCObjectStreamerCtorFn;$/;"	m	class:llvm::Target
MCObjectStreamerCtorTy	TargetRegistry.h	/^    typedef MCStreamer *(*MCObjectStreamerCtorTy)(const Target &T,$/;"	t	class:llvm::Target
MCRegInfoCtorFn	TargetRegistry.h	/^    MCRegInfoCtorFnTy MCRegInfoCtorFn;$/;"	m	class:llvm::Target
MCRegInfoCtorFnTy	TargetRegistry.h	/^    typedef MCRegisterInfo *(*MCRegInfoCtorFnTy)(StringRef TT);$/;"	t	class:llvm::Target
MCSubtargetInfoCtorFn	TargetRegistry.h	/^    MCSubtargetInfoCtorFnTy MCSubtargetInfoCtorFn;$/;"	m	class:llvm::Target
MCSubtargetInfoCtorFnTy	TargetRegistry.h	/^    typedef MCSubtargetInfo *(*MCSubtargetInfoCtorFnTy)(StringRef TT,$/;"	t	class:llvm::Target
MEMORYOBJECT_H	MemoryObject.h	11;"	d
MF_EXEC	Memory.h	/^      MF_EXEC  = 0x4000000$/;"	e	enum:llvm::sys::Memory::ProtectionFlags
MF_READ	Memory.h	/^      MF_READ  = 0x1000000,$/;"	e	enum:llvm::sys::Memory::ProtectionFlags
MF_WRITE	Memory.h	/^      MF_WRITE = 0x2000000,$/;"	e	enum:llvm::sys::Memory::ProtectionFlags
MICROSECONDS_PER_SECOND	TimeValue.h	/^      MICROSECONDS_PER_SECOND = 1000000,    \/\/\/< One Million$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
MILLISECONDS_PER_SECOND	TimeValue.h	/^      MILLISECONDS_PER_SECOND = 1000,       \/\/\/< One Thousand$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
MT_Block	YAMLParser.h	/^    MT_Block,$/;"	e	enum:llvm::yaml::MappingNode::MappingType
MT_Flow	YAMLParser.h	/^    MT_Flow,$/;"	e	enum:llvm::yaml::MappingNode::MappingType
MT_Inline	YAMLParser.h	/^    MT_Inline \/\/\/< An inline mapping node is used for "[key: value]".$/;"	e	enum:llvm::yaml::MappingNode::MappingType
MT_Invalid	COFF.h	/^    MT_Invalid = 0xffff,$/;"	e	enum:llvm::COFF::MachineTypes
MachO	MachO.h	/^  namespace MachO {$/;"	n	namespace:llvm
Mach_O_Bundle_FileType	PathV1.h	/^    Mach_O_Bundle_FileType,            \/\/\/< Mach-O Bundle file$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_Core_FileType	PathV1.h	/^    Mach_O_Core_FileType,              \/\/\/< Mach-O Core File$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_DSYMCompanion_FileType	PathV1.h	/^    Mach_O_DSYMCompanion_FileType,     \/\/\/< Mach-O dSYM companion file$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_DynamicLinker_FileType	PathV1.h	/^    Mach_O_DynamicLinker_FileType,     \/\/\/< The Mach-O dynamic linker$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_DynamicallyLinkedSharedLibStub_FileType	PathV1.h	/^    Mach_O_DynamicallyLinkedSharedLibStub_FileType, \/\/\/< Mach-O Shared lib stub$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_DynamicallyLinkedSharedLib_FileType	PathV1.h	/^    Mach_O_DynamicallyLinkedSharedLib_FileType, \/\/\/< Mach-O dynlinked shared lib$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_Executable_FileType	PathV1.h	/^    Mach_O_Executable_FileType,        \/\/\/< Mach-O Executable$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_FixedVirtualMemorySharedLib_FileType	PathV1.h	/^    Mach_O_FixedVirtualMemorySharedLib_FileType, \/\/\/< Mach-O Shared Lib, FVM$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_Object_FileType	PathV1.h	/^    Mach_O_Object_FileType,            \/\/\/< Mach-O Object file$/;"	e	enum:llvm::sys::LLVMFileType
Mach_O_PreloadExecutable_FileType	PathV1.h	/^    Mach_O_PreloadExecutable_FileType, \/\/\/< Mach-O Preloaded Executable$/;"	e	enum:llvm::sys::LLVMFileType
Machine	COFF.h	/^    uint16_t Machine;$/;"	m	struct:llvm::COFF::ImportHeader
Machine	COFF.h	/^    uint16_t Machine;$/;"	m	struct:llvm::COFF::header
MachineTypes	COFF.h	/^  enum MachineTypes {$/;"	g	namespace:llvm::COFF
Magic	COFF.h	/^    uint16_t Magic;$/;"	m	struct:llvm::COFF::DOSHeader
Magic	COFF.h	/^    uint16_t Magic;$/;"	m	struct:llvm::COFF::PEHeader
MajorImageVersion	COFF.h	/^    uint16_t MajorImageVersion;$/;"	m	struct:llvm::COFF::PEHeader
MajorLinkerVersion	COFF.h	/^    uint8_t  MajorLinkerVersion;$/;"	m	struct:llvm::COFF::PEHeader
MajorOperatingSystemVersion	COFF.h	/^    uint16_t MajorOperatingSystemVersion;$/;"	m	struct:llvm::COFF::PEHeader
MajorSubsystemVersion	COFF.h	/^    uint16_t MajorSubsystemVersion;$/;"	m	struct:llvm::COFF::PEHeader
MallocAllocator	Allocator.h	/^  MallocAllocator() {}$/;"	f	class:llvm::MallocAllocator
MallocAllocator	Allocator.h	/^class MallocAllocator {$/;"	c	namespace:llvm
MallocSlabAllocator	Allocator.h	/^  MallocSlabAllocator() : Allocator() { }$/;"	f	class:llvm::MallocSlabAllocator
MallocSlabAllocator	Allocator.h	/^class MallocSlabAllocator : public SlabAllocator {$/;"	c	namespace:llvm
ManagedStatic	ManagedStatic.h	/^class ManagedStatic : public ManagedStaticBase {$/;"	c	namespace:llvm
ManagedStaticBase	ManagedStatic.h	/^class ManagedStaticBase {$/;"	c	namespace:llvm
Mapping	FileSystem.h	/^  void *Mapping;$/;"	m	class:llvm::sys::fs::mapped_file_region
MappingNode	YAMLParser.h	/^  MappingNode(OwningPtr<Document> &D, StringRef Anchor, MappingType MT)$/;"	f	class:llvm::yaml::MappingNode
MappingNode	YAMLParser.h	/^class MappingNode : public Node {$/;"	c	namespace:llvm::yaml
MappingTy	IntegersSubsetMapping.h	/^      IntegersSubsetMapping<SuccessorClass, IntegersSubsetTy, IntTy> MappingTy;$/;"	t	class:llvm::IntegersSubsetMapping::DiffStateMachine
MappingType	YAMLParser.h	/^  enum MappingType {$/;"	g	class:llvm::yaml::MappingNode
MaxMin_match	PatternMatch.h	/^  MaxMin_match(const LHS_t &LHS, const RHS_t &RHS)$/;"	f	struct:llvm::PatternMatch::MaxMin_match
MaxMin_match	PatternMatch.h	/^struct MaxMin_match {$/;"	s	namespace:llvm::PatternMatch
MaxTime	TimeValue.h	/^    static const TimeValue MaxTime;$/;"	m	class:llvm::sys::TimeValue
MaximumExtraParagraphs	COFF.h	/^    uint16_t MaximumExtraParagraphs;$/;"	m	struct:llvm::COFF::DOSHeader
Medium	CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
MemSlab	Allocator.h	/^class MemSlab {$/;"	c	namespace:llvm
MemUsed	Timer.h	/^  ssize_t MemUsed;       \/\/ Memory allocated (in bytes)$/;"	m	class:llvm::TimeRecord
Memory	Memory.h	/^  class Memory {$/;"	c	namespace:llvm::sys
Memory	PredIteratorCache.h	/^    BumpPtrAllocator Memory;$/;"	m	class:llvm::PredIteratorCache
MemoryBlock	Memory.h	/^    MemoryBlock() : Address(0), Size(0) { }$/;"	f	class:llvm::sys::MemoryBlock
MemoryBlock	Memory.h	/^    MemoryBlock(void *addr, size_t size) : Address(addr), Size(size) { }$/;"	f	class:llvm::sys::MemoryBlock
MemoryBlock	Memory.h	/^  class MemoryBlock {$/;"	c	namespace:llvm::sys
MemoryBuffer	MemoryBuffer.h	/^  MemoryBuffer() {}$/;"	f	class:llvm::MemoryBuffer
MemoryBuffer	MemoryBuffer.h	/^class MemoryBuffer {$/;"	c	namespace:llvm
MemoryBuffer_MMap	MemoryBuffer.h	/^    MemoryBuffer_MMap$/;"	e	enum:llvm::MemoryBuffer::BufferKind
MemoryBuffer_Malloc	MemoryBuffer.h	/^    MemoryBuffer_Malloc,$/;"	e	enum:llvm::MemoryBuffer::BufferKind
MemoryObject	MemoryObject.h	/^class MemoryObject {$/;"	c	namespace:llvm
Message	SourceMgr.h	/^  std::string Message, LineContents;$/;"	m	class:llvm::SMDiagnostic
MinAlign	MathExtras.h	/^inline uint64_t MinAlign(uint64_t A, uint64_t B) {$/;"	f	namespace:llvm
MinTime	TimeValue.h	/^    static const TimeValue MinTime;$/;"	m	class:llvm::sys::TimeValue
MinimumExtraParagraphs	COFF.h	/^    uint16_t MinimumExtraParagraphs;$/;"	m	struct:llvm::COFF::DOSHeader
MinorImageVersion	COFF.h	/^    uint16_t MinorImageVersion;$/;"	m	struct:llvm::COFF::PEHeader
MinorLinkerVersion	COFF.h	/^    uint8_t  MinorLinkerVersion;$/;"	m	struct:llvm::COFF::PEHeader
MinorOperatingSystemVersion	COFF.h	/^    uint16_t MinorOperatingSystemVersion;$/;"	m	struct:llvm::COFF::PEHeader
MinorSubsystemVersion	COFF.h	/^    uint16_t MinorSubsystemVersion;$/;"	m	struct:llvm::COFF::PEHeader
MiscFlags	CommandLine.h	/^enum MiscFlags {               \/\/ Miscellaneous flags to adjust argument$/;"	g	namespace:llvm::cl
Mode	FileSystem.h	/^  mapmode Mode;$/;"	m	class:llvm::sys::fs::mapped_file_region
Model	CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	g	namespace:llvm::CodeModel
Model	CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	g	namespace:llvm::Reloc
Model	CodeGen.h	/^    enum Model {$/;"	g	namespace:llvm::TLSModel
Mutex	Mutex.h	/^    typedef SmartMutex<false> Mutex;$/;"	t	namespace:llvm::sys
MutexGuard	MutexGuard.h	/^    MutexGuard(sys::Mutex &m) : M(m) { M.acquire(); }$/;"	f	class:llvm::MutexGuard
MutexGuard	MutexGuard.h	/^  class MutexGuard {$/;"	c	namespace:llvm
MutexImpl	Mutex.h	/^    class MutexImpl$/;"	c	namespace:llvm::sys
N	BranchProbability.h	/^  uint32_t N;$/;"	m	class:llvm::BranchProbability
NANOSECONDS_PER_MICROSECOND	TimeValue.h	/^      NANOSECONDS_PER_MICROSECOND = 1000,   \/\/\/< One Thousand$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NANOSECONDS_PER_MILLISECOND	TimeValue.h	/^      NANOSECONDS_PER_MILLISECOND = 1000000,\/\/\/< One Million$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NANOSECONDS_PER_POSIX_TICK	TimeValue.h	/^      NANOSECONDS_PER_POSIX_TICK = 100,     \/\/\/< Posix tick is 100 Hz (10ms)$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NANOSECONDS_PER_SECOND	TimeValue.h	/^      NANOSECONDS_PER_SECOND = 1000000000,  \/\/\/< One Billion$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NANOSECONDS_PER_WIN32_TICK	TimeValue.h	/^      NANOSECONDS_PER_WIN32_TICK = 100      \/\/\/< Win32 tick is 100 Hz (10ms)$/;"	e	enum:llvm::sys::TimeValue::TimeConversions
NEATO	GraphWriter.h	/^      NEATO,$/;"	e	enum:llvm::GraphProgram::Name
NK_Alias	YAMLParser.h	/^    NK_Alias$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_KeyValue	YAMLParser.h	/^    NK_KeyValue,$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_Mapping	YAMLParser.h	/^    NK_Mapping,$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_Null	YAMLParser.h	/^    NK_Null,$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_Scalar	YAMLParser.h	/^    NK_Scalar,$/;"	e	enum:llvm::yaml::Node::NodeKind
NK_Sequence	YAMLParser.h	/^    NK_Sequence,$/;"	e	enum:llvm::yaml::Node::NodeKind
NListDescWeakDef	MachO.h	/^      NListDescWeakDef          = 0x80u,$/;"	e	enum:llvm::MachO::__anon49
NListDescWeakRef	MachO.h	/^      NListDescWeakRef          = 0x40u,$/;"	e	enum:llvm::MachO::__anon49
NListSectionMaxSection	MachO.h	/^      NListSectionMaxSection    = 0xffu, \/\/ MAX_SECT$/;"	e	enum:llvm::MachO::__anon49
NListSectionNoSection	MachO.h	/^      NListSectionNoSection     = 0u, \/\/ NO_SECT$/;"	e	enum:llvm::MachO::__anon49
NListTypeAbsolute	MachO.h	/^      NListTypeAbsolute           = 0x2u, \/\/ N_ABS$/;"	e	enum:llvm::MachO::__anon49
NListTypeIndirect	MachO.h	/^      NListTypeIndirect           = 0xau, \/\/ N_INDR$/;"	e	enum:llvm::MachO::__anon49
NListTypePreboundUndefined	MachO.h	/^      NListTypePreboundUndefined  = 0xcu, \/\/ N_PBUD$/;"	e	enum:llvm::MachO::__anon49
NListTypeSection	MachO.h	/^      NListTypeSection            = 0xeu, \/\/ N_SECT$/;"	e	enum:llvm::MachO::__anon49
NListTypeUndefined	MachO.h	/^      NListTypeUndefined          = 0x0u, \/\/ N_UNDF$/;"	e	enum:llvm::MachO::__anon49
Name	COFF.h	/^    char     Name[NameSize];$/;"	m	struct:llvm::COFF::section
Name	COFF.h	/^    char     Name[NameSize];$/;"	m	struct:llvm::COFF::symbol
Name	CommandLine.h	/^    const char *Name;$/;"	m	class:llvm::cl::generic_parser_base::GenericOptionInfo
Name	GCOV.h	/^  StringRef Name;$/;"	m	class:llvm::GCOVFunction
Name	GraphWriter.h	/^   enum Name {$/;"	g	namespace:llvm::GraphProgram
Name	Registry.h	/^    const char *Name, *Desc;$/;"	m	class:llvm::SimpleRegistryEntry
Name	TargetRegistry.h	/^    const char *Name;$/;"	m	class:llvm::Target
Name	Timer.h	/^  std::string Name;      \/\/ The name of this time variable.$/;"	m	class:llvm::Timer
Name	Timer.h	/^  std::string Name;$/;"	m	class:llvm::TimerGroup
Name	YAMLParser.h	/^  StringRef Name;$/;"	m	class:llvm::yaml::AliasNode
NameRVA	COFF.h	/^    uint32_t NameRVA;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
NameSize	COFF.h	/^    NameSize       = 8,$/;"	e	enum:llvm::COFF::__anon10
NamedRegionTimer	Timer.h	/^struct NamedRegionTimer : public TimeRegion {$/;"	s	namespace:llvm
NanoSecondsType	TimeValue.h	/^    typedef int32_t NanoSecondsType;\/\/\/< Type used for representing nanoseconds.$/;"	t	class:llvm::sys::TimeValue
Newline	Regex.h	/^      Newline=2$/;"	e	enum:llvm::Regex::__anon55
Next	ManagedStatic.h	/^  mutable const ManagedStaticBase *Next;$/;"	m	class:llvm::ManagedStaticBase
Next	Recycler.h	/^  RecyclerStruct *Prev, *Next;$/;"	m	struct:llvm::RecyclerStruct
Next	Registry.h	/^      listener *Prev, *Next;$/;"	m	class:llvm::Registry::listener
Next	Registry.h	/^      node *Next;$/;"	m	class:llvm::Registry::node
Next	TargetRegistry.h	/^    Target *Next;$/;"	m	class:llvm::Target
Next	Timer.h	/^  Timer **Prev, *Next;   \/\/ Doubly linked list of timers in the group.$/;"	m	class:llvm::Timer
Next	Timer.h	/^  TimerGroup **Prev, *Next; \/\/ Doubly linked list of TimerGroup's.$/;"	m	class:llvm::TimerGroup
Next	ValueHandle.h	/^  ValueHandleBase *Next;$/;"	m	class:llvm::ValueHandleBase
NextEntry	PrettyStackTrace.h	/^    const PrettyStackTraceEntry *NextEntry;$/;"	m	class:llvm::PrettyStackTraceEntry
NextPowerOf2	MathExtras.h	/^inline uint64_t NextPowerOf2(uint64_t A) {$/;"	f	namespace:llvm
NextPtr	Allocator.h	/^  MemSlab *NextPtr;$/;"	m	class:llvm::MemSlab
NextRegistered	CommandLine.h	/^  Option *NextRegistered; \/\/ Singly linked list of registered options.$/;"	m	class:llvm::cl::Option
NlistMaskExternal	MachO.h	/^      NlistMaskExternal         = 0x01, \/\/ N_EXT$/;"	e	enum:llvm::MachO::__anon49
NlistMaskPrivateExternal	MachO.h	/^      NlistMaskPrivateExternal  = 0x10, \/\/ N_PEXT$/;"	e	enum:llvm::MachO::__anon49
NlistMaskStab	MachO.h	/^      NlistMaskStab             = 0xe0, \/\/ N_STAB$/;"	e	enum:llvm::MachO::__anon49
NlistMaskType	MachO.h	/^      NlistMaskType             = 0x0e, \/\/ N_TYPE$/;"	e	enum:llvm::MachO::__anon49
NoFlags	Regex.h	/^      NoFlags=0,$/;"	e	enum:llvm::Regex::__anon55
NoFolder	NoFolder.h	/^  explicit NoFolder() {}$/;"	f	class:llvm::NoFolder
NoFolder	NoFolder.h	/^class NoFolder {$/;"	c	namespace:llvm
Node	Registry.h	/^      node Node;$/;"	m	class:llvm::Registry::Add
Node	YAMLParser.h	/^class Node {$/;"	c	namespace:llvm::yaml
NodeAllocator	YAMLParser.h	/^  BumpPtrAllocator NodeAllocator;$/;"	m	class:llvm::yaml::Document
NodeKind	YAMLParser.h	/^  enum NodeKind {$/;"	g	class:llvm::yaml::Node
NodeType	CFG.h	/^  typedef BasicBlock NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	CFG.h	/^  typedef const BasicBlock NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	DataFlow.h	/^  typedef Value NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	DataFlow.h	/^  typedef const Value NodeType;$/;"	t	struct:llvm::GraphTraits
NodeType	GraphWriter.h	/^  typedef typename GTraits::NodeType          NodeType;$/;"	t	class:llvm::GraphWriter
NonConst	PointerLikeTypeTraits.h	/^  typedef PointerLikeTypeTraits<T*> NonConst;$/;"	t	class:llvm::PointerLikeTypeTraits
None	CodeGen.h	/^      None,        \/\/ -O0$/;"	e	enum:llvm::CodeGenOpt::Level
NormalFormatting	CommandLine.h	/^  NormalFormatting = 0x00,     \/\/ Nothing special$/;"	e	enum:llvm::cl::FormattingFlags
NotHidden	CommandLine.h	/^  NotHidden       = 0x00,      \/\/ Option included in -help & -help-hidden$/;"	e	enum:llvm::cl::OptionHidden
NullNode	YAMLParser.h	/^  NullNode(OwningPtr<Document> &D) : Node(NK_Null, D, StringRef()) {}$/;"	f	class:llvm::yaml::NullNode
NullNode	YAMLParser.h	/^class NullNode : public Node {$/;"	c	namespace:llvm::yaml
NumLowBitsAvailable	PointerLikeTypeTraits.h	/^  enum { NumLowBitsAvailable = 0 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon53
NumLowBitsAvailable	PointerLikeTypeTraits.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon51
NumLowBitsAvailable	PointerLikeTypeTraits.h	/^  enum { NumLowBitsAvailable = NonConst::NumLowBitsAvailable };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon52
NumLowBitsAvailable	ValueHandle.h	/^  enum { NumLowBitsAvailable = 2 };$/;"	e	enum:llvm::PointerLikeTypeTraits::__anon57
NumOccurrences	CommandLine.h	/^  int NumOccurrences;     \/\/ The number of times specified$/;"	m	class:llvm::cl::Option
NumOccurrencesFlag	CommandLine.h	/^enum NumOccurrencesFlag {      \/\/ Flags for the number of occurrences allowed$/;"	g	namespace:llvm::cl
Number	COFF.h	/^    uint16_t Number;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
Number	GCOV.h	/^  uint32_t Number;$/;"	m	class:llvm::GCOVBlock
NumberOfAuxSymbols	COFF.h	/^    uint8_t  NumberOfAuxSymbols;$/;"	m	struct:llvm::COFF::symbol
NumberOfLineNumbers	COFF.h	/^    uint16_t NumberOfLineNumbers;$/;"	m	struct:llvm::COFF::section
NumberOfLinenumbers	COFF.h	/^    uint16_t NumberOfLinenumbers;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
NumberOfRelocationItems	COFF.h	/^    uint16_t NumberOfRelocationItems;$/;"	m	struct:llvm::COFF::DOSHeader
NumberOfRelocations	COFF.h	/^    uint16_t NumberOfRelocations;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
NumberOfRelocations	COFF.h	/^    uint16_t NumberOfRelocations;$/;"	m	struct:llvm::COFF::section
NumberOfRvaAndSize	COFF.h	/^    uint32_t NumberOfRvaAndSize;$/;"	m	struct:llvm::COFF::PEHeader
NumberOfSections	COFF.h	/^    uint16_t NumberOfSections;$/;"	m	struct:llvm::COFF::header
NumberOfSymbols	COFF.h	/^    uint32_t NumberOfSymbols;$/;"	m	struct:llvm::COFF::header
O	GraphWriter.h	/^  raw_ostream &O;$/;"	m	class:llvm::GraphWriter
OEMid	COFF.h	/^    uint16_t OEMid;$/;"	m	struct:llvm::COFF::DOSHeader
OEMinfo	COFF.h	/^    uint16_t OEMinfo;$/;"	m	struct:llvm::COFF::DOSHeader
OS	ToolOutputFile.h	/^  raw_fd_ostream OS;$/;"	m	class:llvm::tool_output_file
OS	raw_os_ostream.h	/^  std::ostream &OS;$/;"	m	class:llvm::raw_os_ostream
OS	raw_ostream.h	/^  SmallVectorImpl<char> &OS;$/;"	m	class:llvm::raw_svector_ostream
OS	raw_ostream.h	/^  std::string &OS;$/;"	m	class:llvm::raw_string_ostream
ObjectSize	StreamableMemoryObject.h	/^  mutable size_t ObjectSize; \/\/ 0 if unknown, set if wrapper seen or EOF reached$/;"	m	class:llvm::StreamingMemoryObject
OffsetToAlignment	MathExtras.h	/^inline uint64_t OffsetToAlignment(uint64_t Value, uint64_t Align) {$/;"	f	namespace:llvm
OneOrMore	CommandLine.h	/^  OneOrMore       = 0x03,      \/\/ One or more occurrences required$/;"	e	enum:llvm::cl::NumOccurrencesFlag
OneUse_match	PatternMatch.h	/^  OneUse_match(const SubPattern_t &SP) : SubPattern(SP) {}$/;"	f	struct:llvm::PatternMatch::OneUse_match
OneUse_match	PatternMatch.h	/^struct OneUse_match {$/;"	s	namespace:llvm::PatternMatch
Op	PatternMatch.h	/^  Op_t Op;$/;"	m	struct:llvm::PatternMatch::CastClass_match
OpIt	GetElementPtrTypeIterator.h	/^    ItTy OpIt;$/;"	m	class:llvm::generic_gep_type_iterator
OpenPt	IntegersSubsetMapping.h	/^    IntTy OpenPt;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Opt	CommandLine.h	/^  Option &Opt;$/;"	m	struct:llvm::cl::aliasopt
Opt	PassNameParser.h	/^  cl::Option *Opt;$/;"	m	class:llvm::PassNameParser
OptVal	CommandLine.h	/^  typedef OptionValue<DataType> OptVal;$/;"	t	class:llvm::cl::basic_parser
Option	CommandLine.h	/^  explicit Option(enum NumOccurrencesFlag OccurrencesFlag,$/;"	f	class:llvm::cl::Option
Option	CommandLine.h	/^class Option {$/;"	c	namespace:llvm::cl
OptionDiffPrinter	CommandLine.h	/^struct OptionDiffPrinter {$/;"	s	namespace:llvm::cl
OptionDiffPrinter	CommandLine.h	/^struct OptionDiffPrinter<DT, DT> {$/;"	s	namespace:llvm::cl
OptionHidden	CommandLine.h	/^enum OptionHidden {            \/\/ Control whether -help shows this option$/;"	g	namespace:llvm::cl
OptionInfo	CommandLine.h	/^    OptionInfo(const char *name, DataType v, const char *helpStr) :$/;"	f	class:llvm::cl::parser::OptionInfo
OptionInfo	CommandLine.h	/^  class OptionInfo : public GenericOptionInfo {$/;"	c	class:llvm::cl::parser
OptionValue	CommandLine.h	/^  OptionValue() {}$/;"	f	struct:llvm::cl::OptionValue
OptionValue	CommandLine.h	/^  OptionValue(const DataType& V) {$/;"	f	struct:llvm::cl::OptionValue
OptionValue	CommandLine.h	/^  OptionValue(const cl::boolOrDefault& V) {$/;"	f	struct:llvm::cl::OptionValue
OptionValue	CommandLine.h	/^  OptionValue(const std::string& V) {$/;"	f	struct:llvm::cl::OptionValue
OptionValue	CommandLine.h	/^struct OptionValue : OptionValueBase<DataType, is_class<DataType>::value> {$/;"	s	namespace:llvm::cl
OptionValue	CommandLine.h	/^struct OptionValue<cl::boolOrDefault> : OptionValueCopy<cl::boolOrDefault> {$/;"	s	namespace:llvm::cl
OptionValue	CommandLine.h	/^struct OptionValue<std::string> : OptionValueCopy<std::string> {$/;"	s	namespace:llvm::cl
OptionValueBase	CommandLine.h	/^struct OptionValueBase : public GenericOptionValue {$/;"	s	namespace:llvm::cl
OptionValueBase	CommandLine.h	/^struct OptionValueBase<DataType, false> : OptionValueCopy<DataType> {$/;"	s	namespace:llvm::cl
OptionValueCopy	CommandLine.h	/^  OptionValueCopy() : Valid(false) {}$/;"	f	class:llvm::cl::OptionValueCopy
OptionValueCopy	CommandLine.h	/^class OptionValueCopy : public GenericOptionValue {$/;"	c	namespace:llvm::cl
Optional	CommandLine.h	/^  Optional        = 0x00,      \/\/ Zero or One occurrence$/;"	e	enum:llvm::cl::NumOccurrencesFlag
OrdinalHint	COFF.h	/^    uint16_t OrdinalHint;$/;"	m	struct:llvm::COFF::ImportHeader
OutBufCur	raw_ostream.h	/^  char *OutBufStart, *OutBufEnd, *OutBufCur;$/;"	m	class:llvm::raw_ostream
OutBufEnd	raw_ostream.h	/^  char *OutBufStart, *OutBufEnd, *OutBufCur;$/;"	m	class:llvm::raw_ostream
OutBufStart	raw_ostream.h	/^  char *OutBufStart, *OutBufEnd, *OutBufCur;$/;"	m	class:llvm::raw_ostream
Output	OutputBuffer.h	/^    std::vector<unsigned char> &Output;$/;"	m	class:llvm::OutputBuffer
OutputBuffer	OutputBuffer.h	/^    OutputBuffer(std::vector<unsigned char> &Out,$/;"	f	class:llvm::OutputBuffer
OutputBuffer	OutputBuffer.h	/^  class OutputBuffer {$/;"	c	namespace:llvm
OverlayNumber	COFF.h	/^    uint16_t OverlayNumber;$/;"	m	struct:llvm::COFF::DOSHeader
Owner	LockFileManager.h	/^  Optional<std::pair<std::string, int> > Owner;$/;"	m	class:llvm::LockFileManager
OwnsStream	circular_raw_ostream.h	/^    bool OwnsStream;$/;"	m	class:llvm::circular_raw_ostream
PEHeader	COFF.h	/^  struct PEHeader {$/;"	s	namespace:llvm::COFF
PF_MASKOS	ELF.h	/^  PF_MASKOS   = 0x0ff00000,\/\/ Bits for operating system-specific semantics.$/;"	e	enum:llvm::ELF::__anon38
PF_MASKPROC	ELF.h	/^  PF_MASKPROC = 0xf0000000 \/\/ Bits for processor-specific semantics.$/;"	e	enum:llvm::ELF::__anon38
PF_R	ELF.h	/^  PF_R        = 4,         \/\/ Read$/;"	e	enum:llvm::ELF::__anon38
PF_W	ELF.h	/^  PF_W        = 2,         \/\/ Write$/;"	e	enum:llvm::ELF::__anon38
PF_X	ELF.h	/^  PF_X        = 1,         \/\/ Execute$/;"	e	enum:llvm::ELF::__anon38
PIC_	CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	e	enum:llvm::Reloc::Model
PRESERVE_STREAM	FormattedStream.h	/^    static const bool PRESERVE_STREAM = false;$/;"	m	class:llvm::formatted_raw_ostream
PT_DYNAMIC	ELF.h	/^  PT_DYNAMIC = 2, \/\/ Dynamic linking information.$/;"	e	enum:llvm::ELF::__anon37
PT_GNU_EH_FRAME	ELF.h	/^  PT_GNU_EH_FRAME  = 0x6474e550,$/;"	e	enum:llvm::ELF::__anon37
PT_GNU_RELRO	ELF.h	/^  PT_GNU_RELRO  = 0x6474e552, \/\/ Read-only after relocation.$/;"	e	enum:llvm::ELF::__anon37
PT_GNU_STACK	ELF.h	/^  PT_GNU_STACK  = 0x6474e551, \/\/ Indicates stack executability.$/;"	e	enum:llvm::ELF::__anon37
PT_HIOS	ELF.h	/^  PT_HIOS    = 0x6fffffff, \/\/ Highest operating system-specific pt entry type.$/;"	e	enum:llvm::ELF::__anon37
PT_HIPROC	ELF.h	/^  PT_HIPROC  = 0x7fffffff  \/\/ Highest processor-specific program hdr entry type.$/;"	e	enum:llvm::ELF::__anon37
PT_INTERP	ELF.h	/^  PT_INTERP  = 3, \/\/ Interpreter pathname.$/;"	e	enum:llvm::ELF::__anon37
PT_LOAD	ELF.h	/^  PT_LOAD    = 1, \/\/ Loadable segment.$/;"	e	enum:llvm::ELF::__anon37
PT_LOOS	ELF.h	/^  PT_LOOS    = 0x60000000, \/\/ Lowest operating system-specific pt entry type.$/;"	e	enum:llvm::ELF::__anon37
PT_LOPROC	ELF.h	/^  PT_LOPROC  = 0x70000000, \/\/ Lowest processor-specific program hdr entry type.$/;"	e	enum:llvm::ELF::__anon37
PT_NOTE	ELF.h	/^  PT_NOTE    = 4, \/\/ Auxiliary information.$/;"	e	enum:llvm::ELF::__anon37
PT_NULL	ELF.h	/^  PT_NULL    = 0, \/\/ Unused segment.$/;"	e	enum:llvm::ELF::__anon37
PT_PHDR	ELF.h	/^  PT_PHDR    = 6, \/\/ The program header table itself.$/;"	e	enum:llvm::ELF::__anon37
PT_SHLIB	ELF.h	/^  PT_SHLIB   = 5, \/\/ Reserved.$/;"	e	enum:llvm::ELF::__anon37
PT_SUNW_EH_FRAME	ELF.h	/^  PT_SUNW_EH_FRAME = 0x6474e550,$/;"	e	enum:llvm::ELF::__anon37
PT_SUNW_UNWIND	ELF.h	/^  PT_SUNW_UNWIND   = 0x6464e550,$/;"	e	enum:llvm::ELF::__anon37
PT_TLS	ELF.h	/^  PT_TLS     = 7, \/\/ The thread-local storage template.$/;"	e	enum:llvm::ELF::__anon37
ParentTy	IntegersSubset.h	/^  typedef IntegersSubsetGeneric<IntItem> ParentTy;$/;"	t	class:llvm::IntegersSubset
ParseIR	IRReader.h	/^  inline Module *ParseIR(MemoryBuffer *Buffer,$/;"	f	namespace:llvm
ParseIRFile	IRReader.h	/^  inline Module *ParseIRFile(const std::string &Filename,$/;"	f	namespace:llvm
Parser	CommandLine.h	/^  ParserClass Parser;$/;"	m	class:llvm::cl::bits
Parser	CommandLine.h	/^  ParserClass Parser;$/;"	m	class:llvm::cl::list
Parser	CommandLine.h	/^  ParserClass Parser;$/;"	m	class:llvm::cl::opt
PassArgFilter	PassNameParser.h	/^class PassArgFilter {$/;"	c	namespace:llvm
PassNameParser	PassNameParser.h	/^  PassNameParser() : Opt(0) {}$/;"	f	class:llvm::PassNameParser
PassNameParser	PassNameParser.h	/^class PassNameParser : public PassRegistrationListener,$/;"	c	namespace:llvm
Path	FileSystem.h	/^  std::string Path;$/;"	m	class:llvm::sys::fs::directory_entry
Path	PathV1.h	/^      Path() : path() {}$/;"	f	class:llvm::sys::Path
Path	PathV1.h	/^      Path(const Path &that) : path(that.path) {}$/;"	f	class:llvm::sys::Path
Path	PathV1.h	/^  class Path {$/;"	c	namespace:llvm::sys
Path	PathV2.h	/^  StringRef Path;      \/\/\/< The entire path.$/;"	m	class:llvm::sys::path::const_iterator
PathWithStatus	PathV1.h	/^      PathWithStatus() : Path(), status(), fsIsValid(false) {}$/;"	f	class:llvm::sys::PathWithStatus
PathWithStatus	PathV1.h	/^      PathWithStatus(const Path &other)$/;"	f	class:llvm::sys::PathWithStatus
PathWithStatus	PathV1.h	/^      PathWithStatus(const PathWithStatus &that)$/;"	f	class:llvm::sys::PathWithStatus
PathWithStatus	PathV1.h	/^      explicit PathWithStatus($/;"	f	class:llvm::sys::PathWithStatus
PathWithStatus	PathV1.h	/^  class PathWithStatus : public Path {$/;"	c	namespace:llvm::sys
PatternMatch	PatternMatch.h	/^namespace PatternMatch {$/;"	n	namespace:llvm
Perms	FileSystem.h	/^  perms Perms;$/;"	m	class:llvm::sys::fs::file_status
PluginLoader	PluginLoader.h	/^  struct PluginLoader {$/;"	s	namespace:llvm
PointerInfo	ValueHandle.h	/^  typedef DenseMapInfo<T*> PointerInfo;$/;"	t	struct:llvm::DenseMapInfo
PointerLikeTypeTraits	PointerLikeTypeTraits.h	/^class PointerLikeTypeTraits {$/;"	c	namespace:llvm
PointerLikeTypeTraits	PointerLikeTypeTraits.h	/^class PointerLikeTypeTraits<T*> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	PointerLikeTypeTraits.h	/^class PointerLikeTypeTraits<const T*> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	PointerLikeTypeTraits.h	/^class PointerLikeTypeTraits<uintptr_t> {$/;"	c	namespace:llvm
PointerLikeTypeTraits	ValueHandle.h	/^class PointerLikeTypeTraits<ValueHandleBase**> {$/;"	c	namespace:llvm
PointerSize	DataExtractor.h	/^  uint8_t PointerSize;$/;"	m	class:llvm::DataExtractor
PointerToLineNumbers	COFF.h	/^    uint32_t PointerToLineNumbers;$/;"	m	struct:llvm::COFF::section
PointerToLinenumber	COFF.h	/^    uint32_t PointerToLinenumber;$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
PointerToNextFunction	COFF.h	/^    uint32_t PointerToNextFunction;$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
PointerToNextFunction	COFF.h	/^    uint32_t PointerToNextFunction;$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
PointerToRawData	COFF.h	/^    uint32_t PointerToRawData;$/;"	m	struct:llvm::COFF::section
PointerToRelocations	COFF.h	/^    uint32_t PointerToRelocations;$/;"	m	struct:llvm::COFF::section
PointerToSymbolTable	COFF.h	/^    uint32_t PointerToSymbolTable;$/;"	m	struct:llvm::COFF::header
Pool	StringPool.h	/^      StringPool *Pool;  \/\/\/< So the string can remove itself.$/;"	m	struct:llvm::StringPool::PooledString
PooledString	StringPool.h	/^      PooledString() : Pool(0), Refcount(0) { }$/;"	f	struct:llvm::StringPool::PooledString
PooledString	StringPool.h	/^    struct PooledString {$/;"	s	class:llvm::StringPool
PooledStringPtr	StringPool.h	/^    PooledStringPtr() : S(0) {}$/;"	f	class:llvm::PooledStringPtr
PooledStringPtr	StringPool.h	/^    PooledStringPtr(const PooledStringPtr &That) : S(That.S) {$/;"	f	class:llvm::PooledStringPtr
PooledStringPtr	StringPool.h	/^    explicit PooledStringPtr(entry_t *E) : S(E) {$/;"	f	class:llvm::PooledStringPtr
PooledStringPtr	StringPool.h	/^  class PooledStringPtr {$/;"	c	namespace:llvm
Position	CommandLine.h	/^  unsigned Position;      \/\/ Position of last occurrence of the option$/;"	m	class:llvm::cl::Option
Position	PathV2.h	/^  size_t    Position;  \/\/\/< The iterators current position within Path.$/;"	m	class:llvm::sys::path::const_iterator
Positional	CommandLine.h	/^  Positional       = 0x01,     \/\/ Is a positional argument, no '-' required$/;"	e	enum:llvm::cl::FormattingFlags
PositionalEatsArgs	CommandLine.h	/^  PositionalEatsArgs = 0x02,  \/\/ Should this positional cl::list eat -args?$/;"	e	enum:llvm::cl::MiscFlags
Positions	CommandLine.h	/^  std::vector<unsigned> Positions;$/;"	m	class:llvm::cl::bits
Positions	CommandLine.h	/^  std::vector<unsigned> Positions;$/;"	m	class:llvm::cl::list
PosixZeroTime	TimeValue.h	/^    static const TimeValue PosixZeroTime;$/;"	m	class:llvm::sys::TimeValue
PredIterator	CFG.h	/^  PredIterator() {}$/;"	f	class:llvm::PredIterator
PredIterator	CFG.h	/^  explicit inline PredIterator(Ptr *bb) : It(bb->use_begin()) {$/;"	f	class:llvm::PredIterator
PredIterator	CFG.h	/^  inline PredIterator(Ptr *bb, bool) : It(bb->use_end()) {}$/;"	f	class:llvm::PredIterator
PredIterator	CFG.h	/^class PredIterator : public std::iterator<std::forward_iterator_tag,$/;"	c	namespace:llvm
PredIteratorCache	PredIteratorCache.h	/^  class PredIteratorCache {$/;"	c	namespace:llvm
Predicate	PatternMatch.h	/^  PredicateTy &Predicate;$/;"	m	struct:llvm::PatternMatch::CmpClass_match
Prefix	CommandLine.h	/^  Prefix           = 0x02,     \/\/ Can this option directly prefix its value?$/;"	e	enum:llvm::cl::FormattingFlags
PrettyStackTraceEntry	PrettyStackTrace.h	/^  class PrettyStackTraceEntry {$/;"	c	namespace:llvm
PrettyStackTraceProgram	PrettyStackTrace.h	/^    PrettyStackTraceProgram(int argc, const char * const*argv)$/;"	f	class:llvm::PrettyStackTraceProgram
PrettyStackTraceProgram	PrettyStackTrace.h	/^  class PrettyStackTraceProgram : public PrettyStackTraceEntry {$/;"	c	namespace:llvm
PrettyStackTraceString	PrettyStackTrace.h	/^    PrettyStackTraceString(const char *str) : Str(str) {}$/;"	f	class:llvm::PrettyStackTraceString
PrettyStackTraceString	PrettyStackTrace.h	/^  class PrettyStackTraceString : public PrettyStackTraceEntry {$/;"	c	namespace:llvm
Prev	Recycler.h	/^  RecyclerStruct *Prev, *Next;$/;"	m	struct:llvm::RecyclerStruct
Prev	Registry.h	/^      listener *Prev, *Next;$/;"	m	class:llvm::Registry::listener
Prev	Timer.h	/^  Timer **Prev, *Next;   \/\/ Doubly linked list of timers in the group.$/;"	m	class:llvm::Timer
Prev	Timer.h	/^  TimerGroup **Prev, *Next; \/\/ Doubly linked list of TimerGroup's.$/;"	m	class:llvm::TimerGroup
PrevPair	ValueHandle.h	/^  PointerIntPair<ValueHandleBase**, 2, HandleBaseKind> PrevPair;$/;"	m	class:llvm::ValueHandleBase
PrintStats	Allocator.h	/^  void PrintStats() const {}$/;"	f	class:llvm::MallocAllocator
PrintStats	Recycler.h	/^  void PrintStats() {$/;"	f	class:llvm::Recycler
PrintStats	RecyclingAllocator.h	/^  void PrintStats() { Base.PrintStats(); }$/;"	f	class:llvm::RecyclingAllocator
Process	Process.h	/^  class Process {$/;"	c	namespace:llvm::sys
Program	Program.h	/^  class Program {$/;"	c	namespace:llvm::sys
ProtectionFlags	Memory.h	/^    enum ProtectionFlags {$/;"	g	class:llvm::sys::Memory
Ptr	ManagedStatic.h	/^  mutable void *Ptr;$/;"	m	class:llvm::ManagedStaticBase
Ptr	SMLoc.h	/^  const char *Ptr;$/;"	m	class:llvm::SMLoc
R	PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::BinOp2_match
R	PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::BinaryOp_match
R	PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::CmpClass_match
R	PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::MaxMin_match
R	PatternMatch.h	/^  RHS_t R;$/;"	m	struct:llvm::PatternMatch::SelectClass_match
RED	raw_ostream.h	/^    RED,$/;"	e	enum:llvm::raw_ostream::Colors
REFERENCE_ONLY	circular_raw_ostream.h	/^    static const bool REFERENCE_ONLY = false;$/;"	m	class:llvm::circular_raw_ostream
RWMutex	RWMutex.h	/^    typedef SmartRWMutex<false> RWMutex;$/;"	t	namespace:llvm::sys
RWMutexImpl	RWMutex.h	/^    class RWMutexImpl$/;"	c	namespace:llvm::sys
R_386_16	ELF.h	/^  R_386_16            = 20,$/;"	e	enum:llvm::ELF::__anon20
R_386_32	ELF.h	/^  R_386_32            = 1,$/;"	e	enum:llvm::ELF::__anon20
R_386_32PLT	ELF.h	/^  R_386_32PLT         = 11,$/;"	e	enum:llvm::ELF::__anon20
R_386_8	ELF.h	/^  R_386_8             = 22,$/;"	e	enum:llvm::ELF::__anon20
R_386_COPY	ELF.h	/^  R_386_COPY          = 5,$/;"	e	enum:llvm::ELF::__anon20
R_386_GLOB_DAT	ELF.h	/^  R_386_GLOB_DAT      = 6,$/;"	e	enum:llvm::ELF::__anon20
R_386_GOT32	ELF.h	/^  R_386_GOT32         = 3,$/;"	e	enum:llvm::ELF::__anon20
R_386_GOTOFF	ELF.h	/^  R_386_GOTOFF        = 9,$/;"	e	enum:llvm::ELF::__anon20
R_386_GOTPC	ELF.h	/^  R_386_GOTPC         = 10,$/;"	e	enum:llvm::ELF::__anon20
R_386_IRELATIVE	ELF.h	/^  R_386_IRELATIVE     = 42,$/;"	e	enum:llvm::ELF::__anon20
R_386_JUMP_SLOT	ELF.h	/^  R_386_JUMP_SLOT     = 7,$/;"	e	enum:llvm::ELF::__anon20
R_386_NONE	ELF.h	/^  R_386_NONE          = 0,$/;"	e	enum:llvm::ELF::__anon20
R_386_NUM	ELF.h	/^  R_386_NUM           = 43$/;"	e	enum:llvm::ELF::__anon20
R_386_PC16	ELF.h	/^  R_386_PC16          = 21,$/;"	e	enum:llvm::ELF::__anon20
R_386_PC32	ELF.h	/^  R_386_PC32          = 2,$/;"	e	enum:llvm::ELF::__anon20
R_386_PC8	ELF.h	/^  R_386_PC8           = 23,$/;"	e	enum:llvm::ELF::__anon20
R_386_PLT32	ELF.h	/^  R_386_PLT32         = 4,$/;"	e	enum:llvm::ELF::__anon20
R_386_RELATIVE	ELF.h	/^  R_386_RELATIVE      = 8,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_DESC	ELF.h	/^  R_386_TLS_DESC      = 41,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_DESC_CALL	ELF.h	/^  R_386_TLS_DESC_CALL = 40,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_DTPMOD32	ELF.h	/^  R_386_TLS_DTPMOD32  = 35,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_DTPOFF32	ELF.h	/^  R_386_TLS_DTPOFF32  = 36,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_GD	ELF.h	/^  R_386_TLS_GD        = 18,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_GD_32	ELF.h	/^  R_386_TLS_GD_32     = 24,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_GD_CALL	ELF.h	/^  R_386_TLS_GD_CALL   = 26,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_GD_POP	ELF.h	/^  R_386_TLS_GD_POP    = 27,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_GD_PUSH	ELF.h	/^  R_386_TLS_GD_PUSH   = 25,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_GOTDESC	ELF.h	/^  R_386_TLS_GOTDESC   = 39,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_GOTIE	ELF.h	/^  R_386_TLS_GOTIE     = 16,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_IE	ELF.h	/^  R_386_TLS_IE        = 15,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_IE_32	ELF.h	/^  R_386_TLS_IE_32     = 33,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_LDM	ELF.h	/^  R_386_TLS_LDM       = 19,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_LDM_32	ELF.h	/^  R_386_TLS_LDM_32    = 28,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_LDM_CALL	ELF.h	/^  R_386_TLS_LDM_CALL  = 30,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_LDM_POP	ELF.h	/^  R_386_TLS_LDM_POP   = 31,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_LDM_PUSH	ELF.h	/^  R_386_TLS_LDM_PUSH  = 29,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_LDO_32	ELF.h	/^  R_386_TLS_LDO_32    = 32,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_LE	ELF.h	/^  R_386_TLS_LE        = 17,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_LE_32	ELF.h	/^  R_386_TLS_LE_32     = 34,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_TPOFF	ELF.h	/^  R_386_TLS_TPOFF     = 14,$/;"	e	enum:llvm::ELF::__anon20
R_386_TLS_TPOFF32	ELF.h	/^  R_386_TLS_TPOFF32   = 37,$/;"	e	enum:llvm::ELF::__anon20
R_ARM_ABS12	ELF.h	/^  R_ARM_ABS12                 = 0x06,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ABS16	ELF.h	/^  R_ARM_ABS16                 = 0x05,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ABS32	ELF.h	/^  R_ARM_ABS32                 = 0x02,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ABS32_NOI	ELF.h	/^  R_ARM_ABS32_NOI             = 0x37,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ABS8	ELF.h	/^  R_ARM_ABS8                  = 0x08,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_PCREL_15_8	ELF.h	/^  R_ARM_ALU_PCREL_15_8        = 0x21,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_PCREL_23_15	ELF.h	/^  R_ARM_ALU_PCREL_23_15       = 0x22,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_PCREL_7_0	ELF.h	/^  R_ARM_ALU_PCREL_7_0         = 0x20,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_PC_G0	ELF.h	/^  R_ARM_ALU_PC_G0             = 0x3a,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_PC_G0_NC	ELF.h	/^  R_ARM_ALU_PC_G0_NC          = 0x39,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_PC_G1	ELF.h	/^  R_ARM_ALU_PC_G1             = 0x3c,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_PC_G1_NC	ELF.h	/^  R_ARM_ALU_PC_G1_NC          = 0x3b,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_PC_G2	ELF.h	/^  R_ARM_ALU_PC_G2             = 0x3d,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_SBREL_19_12_NC	ELF.h	/^  R_ARM_ALU_SBREL_19_12_NC    = 0x24,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_SBREL_27_20_CK	ELF.h	/^  R_ARM_ALU_SBREL_27_20_CK    = 0x25,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_SB_G0	ELF.h	/^  R_ARM_ALU_SB_G0             = 0x47,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_SB_G0_NC	ELF.h	/^  R_ARM_ALU_SB_G0_NC          = 0x46,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_SB_G1	ELF.h	/^  R_ARM_ALU_SB_G1             = 0x49,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_SB_G1_NC	ELF.h	/^  R_ARM_ALU_SB_G1_NC          = 0x48,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ALU_SB_G2	ELF.h	/^  R_ARM_ALU_SB_G2             = 0x4a,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_BASE_ABS	ELF.h	/^  R_ARM_BASE_ABS              = 0x1f,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_BASE_PREL	ELF.h	/^  R_ARM_BASE_PREL             = 0x19,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_BREL_ADJ	ELF.h	/^  R_ARM_BREL_ADJ              = 0x0c,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_CALL	ELF.h	/^  R_ARM_CALL                  = 0x1c,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_COPY	ELF.h	/^  R_ARM_COPY                  = 0x14,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GLOB_DAT	ELF.h	/^  R_ARM_GLOB_DAT              = 0x15,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GNU_VTENTRY	ELF.h	/^  R_ARM_GNU_VTENTRY           = 0x64,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GNU_VTINHERIT	ELF.h	/^  R_ARM_GNU_VTINHERIT         = 0x65,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GOTOFF12	ELF.h	/^  R_ARM_GOTOFF12              = 0x62,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GOTOFF32	ELF.h	/^  R_ARM_GOTOFF32              = 0x18,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GOTRELAX	ELF.h	/^  R_ARM_GOTRELAX              = 0x63,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GOT_ABS	ELF.h	/^  R_ARM_GOT_ABS               = 0x5f,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GOT_BREL	ELF.h	/^  R_ARM_GOT_BREL              = 0x1a,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GOT_BREL12	ELF.h	/^  R_ARM_GOT_BREL12            = 0x61,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_GOT_PREL	ELF.h	/^  R_ARM_GOT_PREL              = 0x60,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_JUMP24	ELF.h	/^  R_ARM_JUMP24                = 0x1d,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_JUMP_SLOT	ELF.h	/^  R_ARM_JUMP_SLOT             = 0x16,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDC_PC_G0	ELF.h	/^  R_ARM_LDC_PC_G0             = 0x43,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDC_PC_G1	ELF.h	/^  R_ARM_LDC_PC_G1             = 0x44,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDC_PC_G2	ELF.h	/^  R_ARM_LDC_PC_G2             = 0x45,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDC_SB_G0	ELF.h	/^  R_ARM_LDC_SB_G0             = 0x51,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDC_SB_G1	ELF.h	/^  R_ARM_LDC_SB_G1             = 0x52,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDC_SB_G2	ELF.h	/^  R_ARM_LDC_SB_G2             = 0x53,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDRS_PC_G0	ELF.h	/^  R_ARM_LDRS_PC_G0            = 0x40,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDRS_PC_G1	ELF.h	/^  R_ARM_LDRS_PC_G1            = 0x41,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDRS_PC_G2	ELF.h	/^  R_ARM_LDRS_PC_G2            = 0x42,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDRS_SB_G0	ELF.h	/^  R_ARM_LDRS_SB_G0            = 0x4e,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDRS_SB_G1	ELF.h	/^  R_ARM_LDRS_SB_G1            = 0x4f,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDRS_SB_G2	ELF.h	/^  R_ARM_LDRS_SB_G2            = 0x50,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDR_PC_G0	ELF.h	/^  R_ARM_LDR_PC_G0             = 0x04,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDR_PC_G1	ELF.h	/^  R_ARM_LDR_PC_G1             = 0x3e,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDR_PC_G2	ELF.h	/^  R_ARM_LDR_PC_G2             = 0x3f,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDR_SBREL_11_0_NC	ELF.h	/^  R_ARM_LDR_SBREL_11_0_NC     = 0x23,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDR_SB_G0	ELF.h	/^  R_ARM_LDR_SB_G0             = 0x4b,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDR_SB_G1	ELF.h	/^  R_ARM_LDR_SB_G1             = 0x4c,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_LDR_SB_G2	ELF.h	/^  R_ARM_LDR_SB_G2             = 0x4d,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_ME_TOO	ELF.h	/^  R_ARM_ME_TOO                = 0x80,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_MOVT_ABS	ELF.h	/^  R_ARM_MOVT_ABS              = 0x2c,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_MOVT_BREL	ELF.h	/^  R_ARM_MOVT_BREL             = 0x55,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_MOVT_PREL	ELF.h	/^  R_ARM_MOVT_PREL             = 0x2e,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_MOVW_ABS_NC	ELF.h	/^  R_ARM_MOVW_ABS_NC           = 0x2b,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_MOVW_BREL	ELF.h	/^  R_ARM_MOVW_BREL             = 0x56,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_MOVW_BREL_NC	ELF.h	/^  R_ARM_MOVW_BREL_NC          = 0x54,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_MOVW_PREL_NC	ELF.h	/^  R_ARM_MOVW_PREL_NC          = 0x2d,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_NONE	ELF.h	/^  R_ARM_NONE                  = 0x00,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PC24	ELF.h	/^  R_ARM_PC24                  = 0x01,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PLT32	ELF.h	/^  R_ARM_PLT32                 = 0x1b,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PLT32_ABS	ELF.h	/^  R_ARM_PLT32_ABS             = 0x5e,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PREL31	ELF.h	/^  R_ARM_PREL31                = 0x2a,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_0	ELF.h	/^  R_ARM_PRIVATE_0             = 0x70,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_1	ELF.h	/^  R_ARM_PRIVATE_1             = 0x71,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_10	ELF.h	/^  R_ARM_PRIVATE_10            = 0x7a,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_11	ELF.h	/^  R_ARM_PRIVATE_11            = 0x7b,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_12	ELF.h	/^  R_ARM_PRIVATE_12            = 0x7c,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_13	ELF.h	/^  R_ARM_PRIVATE_13            = 0x7d,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_14	ELF.h	/^  R_ARM_PRIVATE_14            = 0x7e,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_15	ELF.h	/^  R_ARM_PRIVATE_15            = 0x7f,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_2	ELF.h	/^  R_ARM_PRIVATE_2             = 0x72,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_3	ELF.h	/^  R_ARM_PRIVATE_3             = 0x73,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_4	ELF.h	/^  R_ARM_PRIVATE_4             = 0x74,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_5	ELF.h	/^  R_ARM_PRIVATE_5             = 0x75,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_6	ELF.h	/^  R_ARM_PRIVATE_6             = 0x76,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_7	ELF.h	/^  R_ARM_PRIVATE_7             = 0x77,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_8	ELF.h	/^  R_ARM_PRIVATE_8             = 0x78,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_PRIVATE_9	ELF.h	/^  R_ARM_PRIVATE_9             = 0x79,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_REL32	ELF.h	/^  R_ARM_REL32                 = 0x03,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_REL32_NOI	ELF.h	/^  R_ARM_REL32_NOI             = 0x38,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_RELATIVE	ELF.h	/^  R_ARM_RELATIVE              = 0x17,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_SBREL31	ELF.h	/^  R_ARM_SBREL31               = 0x27,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_SBREL32	ELF.h	/^  R_ARM_SBREL32               = 0x09,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TARGET1	ELF.h	/^  R_ARM_TARGET1               = 0x26,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TARGET2	ELF.h	/^  R_ARM_TARGET2               = 0x29,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_ABS5	ELF.h	/^  R_ARM_THM_ABS5              = 0x07,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_ALU_PREL_11_0	ELF.h	/^  R_ARM_THM_ALU_PREL_11_0     = 0x35,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_CALL	ELF.h	/^  R_ARM_THM_CALL              = 0x0a,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_JUMP11	ELF.h	/^  R_ARM_THM_JUMP11            = 0x66,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_JUMP19	ELF.h	/^  R_ARM_THM_JUMP19            = 0x33,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_JUMP24	ELF.h	/^  R_ARM_THM_JUMP24            = 0x1e,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_JUMP6	ELF.h	/^  R_ARM_THM_JUMP6             = 0x34,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_JUMP8	ELF.h	/^  R_ARM_THM_JUMP8             = 0x67,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_MOVT_ABS	ELF.h	/^  R_ARM_THM_MOVT_ABS          = 0x30,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_MOVT_BREL	ELF.h	/^  R_ARM_THM_MOVT_BREL         = 0x58,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_MOVT_PREL	ELF.h	/^  R_ARM_THM_MOVT_PREL         = 0x32,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_MOVW_ABS_NC	ELF.h	/^  R_ARM_THM_MOVW_ABS_NC       = 0x2f,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_MOVW_BREL	ELF.h	/^  R_ARM_THM_MOVW_BREL         = 0x59,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_MOVW_BREL_NC	ELF.h	/^  R_ARM_THM_MOVW_BREL_NC      = 0x57,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_MOVW_PREL_NC	ELF.h	/^  R_ARM_THM_MOVW_PREL_NC      = 0x31,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_PC12	ELF.h	/^  R_ARM_THM_PC12              = 0x36,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_PC8	ELF.h	/^  R_ARM_THM_PC8               = 0x0b,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_SWI8	ELF.h	/^  R_ARM_THM_SWI8              = 0x0e,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_TLS_CALL	ELF.h	/^  R_ARM_THM_TLS_CALL          = 0x5d,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_TLS_DESCSEQ16	ELF.h	/^  R_ARM_THM_TLS_DESCSEQ16     = 0x81,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_TLS_DESCSEQ32	ELF.h	/^  R_ARM_THM_TLS_DESCSEQ32     = 0x82$/;"	e	enum:llvm::ELF::__anon25
R_ARM_THM_XPC22	ELF.h	/^  R_ARM_THM_XPC22             = 0x10,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_CALL	ELF.h	/^  R_ARM_TLS_CALL              = 0x5b,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_DESC	ELF.h	/^  R_ARM_TLS_DESC              = 0x0d,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_DESCSEQ	ELF.h	/^  R_ARM_TLS_DESCSEQ           = 0x5c,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_DTPMOD32	ELF.h	/^  R_ARM_TLS_DTPMOD32          = 0x11,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_DTPOFF32	ELF.h	/^  R_ARM_TLS_DTPOFF32          = 0x12,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_GD32	ELF.h	/^  R_ARM_TLS_GD32              = 0x68,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_GOTDESC	ELF.h	/^  R_ARM_TLS_GOTDESC           = 0x5a,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_IE12GP	ELF.h	/^  R_ARM_TLS_IE12GP            = 0x6f,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_IE32	ELF.h	/^  R_ARM_TLS_IE32              = 0x6b,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_LDM32	ELF.h	/^  R_ARM_TLS_LDM32             = 0x69,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_LDO12	ELF.h	/^  R_ARM_TLS_LDO12             = 0x6d,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_LDO32	ELF.h	/^  R_ARM_TLS_LDO32             = 0x6a,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_LE12	ELF.h	/^  R_ARM_TLS_LE12              = 0x6e,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_LE32	ELF.h	/^  R_ARM_TLS_LE32              = 0x6c,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_TLS_TPOFF32	ELF.h	/^  R_ARM_TLS_TPOFF32           = 0x13,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_V4BX	ELF.h	/^  R_ARM_V4BX                  = 0x28,$/;"	e	enum:llvm::ELF::__anon25
R_ARM_XPC25	ELF.h	/^  R_ARM_XPC25                 = 0x0f,$/;"	e	enum:llvm::ELF::__anon25
R_HEX_10_X	ELF.h	/^  R_HEX_10_X              =  26,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_11_X	ELF.h	/^  R_HEX_11_X              =  25,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_12_X	ELF.h	/^  R_HEX_12_X              =  24,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_16	ELF.h	/^  R_HEX_16                =  7,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_16_X	ELF.h	/^  R_HEX_16_X              =  23,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_32	ELF.h	/^  R_HEX_32                =  6,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_32_6_X	ELF.h	/^  R_HEX_32_6_X            =  17,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_32_PCREL	ELF.h	/^  R_HEX_32_PCREL          =  31,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_6_PCREL_X	ELF.h	/^  R_HEX_6_PCREL_X         =  65,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_6_X	ELF.h	/^  R_HEX_6_X               =  30,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_7_X	ELF.h	/^  R_HEX_7_X               =  29,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_8	ELF.h	/^  R_HEX_8                 =  8,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_8_X	ELF.h	/^  R_HEX_8_X               =  28,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_9_X	ELF.h	/^  R_HEX_9_X               =  27,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B13_PCREL	ELF.h	/^  R_HEX_B13_PCREL         =  14,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B13_PCREL_X	ELF.h	/^  R_HEX_B13_PCREL_X       =  20,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B15_PCREL	ELF.h	/^  R_HEX_B15_PCREL         =  2,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B15_PCREL_X	ELF.h	/^  R_HEX_B15_PCREL_X       =  19,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B22_PCREL	ELF.h	/^  R_HEX_B22_PCREL         =  1,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B22_PCREL_X	ELF.h	/^  R_HEX_B22_PCREL_X       =  18,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B32_PCREL_X	ELF.h	/^  R_HEX_B32_PCREL_X       =  16,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B7_PCREL	ELF.h	/^  R_HEX_B7_PCREL          =  3,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B7_PCREL_X	ELF.h	/^  R_HEX_B7_PCREL_X        =  22,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B9_PCREL	ELF.h	/^  R_HEX_B9_PCREL          =  15,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_B9_PCREL_X	ELF.h	/^  R_HEX_B9_PCREL_X        =  21,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_COPY	ELF.h	/^  R_HEX_COPY              =  32,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_DTPMOD_32	ELF.h	/^  R_HEX_DTPMOD_32         =  44,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_DTPREL_11_X	ELF.h	/^  R_HEX_DTPREL_11_X       =  74,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_DTPREL_16	ELF.h	/^  R_HEX_DTPREL_16         =  48,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_DTPREL_16_X	ELF.h	/^  R_HEX_DTPREL_16_X       =  73,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_DTPREL_32	ELF.h	/^  R_HEX_DTPREL_32         =  47,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_DTPREL_32_6_X	ELF.h	/^  R_HEX_DTPREL_32_6_X     =  72,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_DTPREL_HI16	ELF.h	/^  R_HEX_DTPREL_HI16       =  46,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_DTPREL_LO16	ELF.h	/^  R_HEX_DTPREL_LO16       =  45,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GD_GOT_11_X	ELF.h	/^  R_HEX_GD_GOT_11_X       =  77,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GD_GOT_16	ELF.h	/^  R_HEX_GD_GOT_16         =  53,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GD_GOT_16_X	ELF.h	/^  R_HEX_GD_GOT_16_X       =  76,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GD_GOT_32	ELF.h	/^  R_HEX_GD_GOT_32         =  52,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GD_GOT_32_6_X	ELF.h	/^  R_HEX_GD_GOT_32_6_X     =  75,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GD_GOT_HI16	ELF.h	/^  R_HEX_GD_GOT_HI16       =  51,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GD_GOT_LO16	ELF.h	/^  R_HEX_GD_GOT_LO16       =  50,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GD_PLT_B22_PCREL	ELF.h	/^  R_HEX_GD_PLT_B22_PCREL  =  49,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GLOB_DAT	ELF.h	/^  R_HEX_GLOB_DAT          =  33,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOTREL_11_X	ELF.h	/^  R_HEX_GOTREL_11_X       =  68,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOTREL_16_X	ELF.h	/^  R_HEX_GOTREL_16_X       =  67,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOTREL_32	ELF.h	/^  R_HEX_GOTREL_32         =  39,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOTREL_32_6_X	ELF.h	/^  R_HEX_GOTREL_32_6_X     =  66,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOTREL_HI16	ELF.h	/^  R_HEX_GOTREL_HI16       =  38,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOTREL_LO16	ELF.h	/^  R_HEX_GOTREL_LO16       =  37,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOT_11_X	ELF.h	/^  R_HEX_GOT_11_X          =  71,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOT_16	ELF.h	/^  R_HEX_GOT_16            =  43,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOT_16_X	ELF.h	/^  R_HEX_GOT_16_X          =  70,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOT_32	ELF.h	/^  R_HEX_GOT_32            =  42,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOT_32_6_X	ELF.h	/^  R_HEX_GOT_32_6_X        =  69,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOT_HI16	ELF.h	/^  R_HEX_GOT_HI16          =  41,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GOT_LO16	ELF.h	/^  R_HEX_GOT_LO16          =  40,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GPREL16_0	ELF.h	/^  R_HEX_GPREL16_0         =  9,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GPREL16_1	ELF.h	/^  R_HEX_GPREL16_1         =  10,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GPREL16_2	ELF.h	/^  R_HEX_GPREL16_2         =  11,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_GPREL16_3	ELF.h	/^  R_HEX_GPREL16_3         =  12,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_HI16	ELF.h	/^  R_HEX_HI16              =  5,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_HL16	ELF.h	/^  R_HEX_HL16              =  13,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_16_X	ELF.h	/^  R_HEX_IE_16_X           =  79,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_32	ELF.h	/^  R_HEX_IE_32             =  56,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_32_6_X	ELF.h	/^  R_HEX_IE_32_6_X         =  78,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_GOT_11_X	ELF.h	/^  R_HEX_IE_GOT_11_X       =  82,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_GOT_16	ELF.h	/^  R_HEX_IE_GOT_16         =  60,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_GOT_16_X	ELF.h	/^  R_HEX_IE_GOT_16_X       =  81,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_GOT_32	ELF.h	/^  R_HEX_IE_GOT_32         =  59,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_GOT_32_6_X	ELF.h	/^  R_HEX_IE_GOT_32_6_X     =  80,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_GOT_HI16	ELF.h	/^  R_HEX_IE_GOT_HI16       =  58,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_GOT_LO16	ELF.h	/^  R_HEX_IE_GOT_LO16       =  57,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_HI16	ELF.h	/^  R_HEX_IE_HI16           =  55,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_IE_LO16	ELF.h	/^  R_HEX_IE_LO16           =  54,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_JMP_SLOT	ELF.h	/^  R_HEX_JMP_SLOT          =  34,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_LO16	ELF.h	/^  R_HEX_LO16              =  4,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_NONE	ELF.h	/^  R_HEX_NONE              =  0,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_PLT_B22_PCREL	ELF.h	/^  R_HEX_PLT_B22_PCREL     =  36,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_RELATIVE	ELF.h	/^  R_HEX_RELATIVE          =  35,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_TPREL_11_X	ELF.h	/^  R_HEX_TPREL_11_X        =  85$/;"	e	enum:llvm::ELF::__anon28
R_HEX_TPREL_16	ELF.h	/^  R_HEX_TPREL_16          =  64,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_TPREL_16_X	ELF.h	/^  R_HEX_TPREL_16_X        =  84,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_TPREL_32	ELF.h	/^  R_HEX_TPREL_32          =  63,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_TPREL_32_6_X	ELF.h	/^  R_HEX_TPREL_32_6_X      =  83,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_TPREL_HI16	ELF.h	/^  R_HEX_TPREL_HI16        =  62,$/;"	e	enum:llvm::ELF::__anon28
R_HEX_TPREL_LO16	ELF.h	/^  R_HEX_TPREL_LO16        =  61,$/;"	e	enum:llvm::ELF::__anon28
R_MICROBLAZE_32	ELF.h	/^  R_MICROBLAZE_32             = 1,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_32_LO	ELF.h	/^  R_MICROBLAZE_32_LO          = 6,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_32_PCREL	ELF.h	/^  R_MICROBLAZE_32_PCREL       = 2,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_32_PCREL_LO	ELF.h	/^  R_MICROBLAZE_32_PCREL_LO    = 4,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_32_SYM_OP_SYM	ELF.h	/^  R_MICROBLAZE_32_SYM_OP_SYM  = 10,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_64	ELF.h	/^  R_MICROBLAZE_64             = 5,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_64_NONE	ELF.h	/^  R_MICROBLAZE_64_NONE        = 9,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_64_PCREL	ELF.h	/^  R_MICROBLAZE_64_PCREL       = 3,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_COPY	ELF.h	/^  R_MICROBLAZE_COPY           = 21$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_GLOB_DAT	ELF.h	/^  R_MICROBLAZE_GLOB_DAT       = 18,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_GNU_VTENTRY	ELF.h	/^  R_MICROBLAZE_GNU_VTENTRY    = 12,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_GNU_VTINHERIT	ELF.h	/^  R_MICROBLAZE_GNU_VTINHERIT  = 11,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_GOTOFF_32	ELF.h	/^  R_MICROBLAZE_GOTOFF_32      = 20,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_GOTOFF_64	ELF.h	/^  R_MICROBLAZE_GOTOFF_64      = 19,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_GOTPC_64	ELF.h	/^  R_MICROBLAZE_GOTPC_64       = 13,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_GOT_64	ELF.h	/^  R_MICROBLAZE_GOT_64         = 14,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_JUMP_SLOT	ELF.h	/^  R_MICROBLAZE_JUMP_SLOT      = 17,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_NONE	ELF.h	/^  R_MICROBLAZE_NONE           = 0,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_PLT_64	ELF.h	/^  R_MICROBLAZE_PLT_64         = 15,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_REL	ELF.h	/^  R_MICROBLAZE_REL            = 16,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_SRO32	ELF.h	/^  R_MICROBLAZE_SRO32          = 7,$/;"	e	enum:llvm::ELF::__anon21
R_MICROBLAZE_SRW32	ELF.h	/^  R_MICROBLAZE_SRW32          = 8,$/;"	e	enum:llvm::ELF::__anon21
R_MIPS_16	ELF.h	/^  R_MIPS_16                =  1,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_26	ELF.h	/^  R_MIPS_26                =  4,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_32	ELF.h	/^  R_MIPS_32                =  2,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_64	ELF.h	/^  R_MIPS_64                = 18,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_ADD_IMMEDIATE	ELF.h	/^  R_MIPS_ADD_IMMEDIATE     = 34,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_CALL16	ELF.h	/^  R_MIPS_CALL16            = 11,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_CALL_HI16	ELF.h	/^  R_MIPS_CALL_HI16         = 30,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_CALL_LO16	ELF.h	/^  R_MIPS_CALL_LO16         = 31,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_COPY	ELF.h	/^  R_MIPS_COPY              = 126,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_DELETE	ELF.h	/^  R_MIPS_DELETE            = 27,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GLOB_DAT	ELF.h	/^  R_MIPS_GLOB_DAT          = 51,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GOT	ELF.h	/^  R_MIPS_GOT               =  9,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GOT16	ELF.h	/^  R_MIPS_GOT16             =  9,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GOT_DISP	ELF.h	/^  R_MIPS_GOT_DISP          = 19,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GOT_HI16	ELF.h	/^  R_MIPS_GOT_HI16          = 22,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GOT_LO16	ELF.h	/^  R_MIPS_GOT_LO16          = 23,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GOT_OFST	ELF.h	/^  R_MIPS_GOT_OFST          = 21,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GOT_PAGE	ELF.h	/^  R_MIPS_GOT_PAGE          = 20,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GPREL16	ELF.h	/^  R_MIPS_GPREL16           =  7,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_GPREL32	ELF.h	/^  R_MIPS_GPREL32           = 12,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_HI16	ELF.h	/^  R_MIPS_HI16              =  5,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_HIGHER	ELF.h	/^  R_MIPS_HIGHER            = 28,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_HIGHEST	ELF.h	/^  R_MIPS_HIGHEST           = 29,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_INSERT_A	ELF.h	/^  R_MIPS_INSERT_A          = 25,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_INSERT_B	ELF.h	/^  R_MIPS_INSERT_B          = 26,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_JALR	ELF.h	/^  R_MIPS_JALR              = 37,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_JUMP_SLOT	ELF.h	/^  R_MIPS_JUMP_SLOT         = 127,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_LITERAL	ELF.h	/^  R_MIPS_LITERAL           =  8,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_LO16	ELF.h	/^  R_MIPS_LO16              =  6,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_NONE	ELF.h	/^  R_MIPS_NONE              =  0,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_NUM	ELF.h	/^  R_MIPS_NUM               = 218$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_PC16	ELF.h	/^  R_MIPS_PC16              = 10,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_PJUMP	ELF.h	/^  R_MIPS_PJUMP             = 35,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_REL16	ELF.h	/^  R_MIPS_REL16             = 33,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_REL32	ELF.h	/^  R_MIPS_REL32             =  3,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_RELGOT	ELF.h	/^  R_MIPS_RELGOT            = 36,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_SCN_DISP	ELF.h	/^  R_MIPS_SCN_DISP          = 32,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_SHIFT5	ELF.h	/^  R_MIPS_SHIFT5            = 16,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_SHIFT6	ELF.h	/^  R_MIPS_SHIFT6            = 17,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_SUB	ELF.h	/^  R_MIPS_SUB               = 24,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_DTPMOD32	ELF.h	/^  R_MIPS_TLS_DTPMOD32      = 38,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_DTPMOD64	ELF.h	/^  R_MIPS_TLS_DTPMOD64      = 40,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_DTPREL32	ELF.h	/^  R_MIPS_TLS_DTPREL32      = 39,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_DTPREL64	ELF.h	/^  R_MIPS_TLS_DTPREL64      = 41,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_DTPREL_HI16	ELF.h	/^  R_MIPS_TLS_DTPREL_HI16   = 44,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_DTPREL_LO16	ELF.h	/^  R_MIPS_TLS_DTPREL_LO16   = 45,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_GD	ELF.h	/^  R_MIPS_TLS_GD            = 42,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_GOTTPREL	ELF.h	/^  R_MIPS_TLS_GOTTPREL      = 46,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_LDM	ELF.h	/^  R_MIPS_TLS_LDM           = 43,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_TPREL32	ELF.h	/^  R_MIPS_TLS_TPREL32       = 47,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_TPREL64	ELF.h	/^  R_MIPS_TLS_TPREL64       = 48,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_TPREL_HI16	ELF.h	/^  R_MIPS_TLS_TPREL_HI16    = 49,$/;"	e	enum:llvm::ELF::__anon27
R_MIPS_TLS_TPREL_LO16	ELF.h	/^  R_MIPS_TLS_TPREL_LO16    = 50,$/;"	e	enum:llvm::ELF::__anon27
R_OPENED	IntegersSubsetMapping.h	/^    R_OPENED,$/;"	e	enum:llvm::IntegersSubsetMapping::DiffProcessState
R_PPC64_ADDR14	ELF.h	/^  R_PPC64_ADDR14              = 7,$/;"	e	enum:llvm::ELF::__anon23
R_PPC64_ADDR16_HI	ELF.h	/^  R_PPC64_ADDR16_HI           = 5,$/;"	e	enum:llvm::ELF::__anon23
R_PPC64_ADDR16_HIGHER	ELF.h	/^  R_PPC64_ADDR16_HIGHER       = 39,$/;"	e	enum:llvm::ELF::__anon23
R_PPC64_ADDR16_HIGHEST	ELF.h	/^  R_PPC64_ADDR16_HIGHEST      = 41,$/;"	e	enum:llvm::ELF::__anon23
R_PPC64_ADDR16_LO	ELF.h	/^  R_PPC64_ADDR16_LO           = 4,$/;"	e	enum:llvm::ELF::__anon23
R_PPC64_ADDR64	ELF.h	/^  R_PPC64_ADDR64              = 38,$/;"	e	enum:llvm::ELF::__anon23
R_PPC64_REL24	ELF.h	/^  R_PPC64_REL24               = 10,$/;"	e	enum:llvm::ELF::__anon23
R_PPC64_TOC	ELF.h	/^  R_PPC64_TOC                 = 51,$/;"	e	enum:llvm::ELF::__anon23
R_PPC64_TOC16	ELF.h	/^  R_PPC64_TOC16               = 47,$/;"	e	enum:llvm::ELF::__anon23
R_PPC64_TOC16_DS	ELF.h	/^  R_PPC64_TOC16_DS            = 63$/;"	e	enum:llvm::ELF::__anon23
R_PPC_ADDR14	ELF.h	/^  R_PPC_ADDR14                = 7,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_ADDR14_BRNTAKEN	ELF.h	/^  R_PPC_ADDR14_BRNTAKEN       = 9,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_ADDR14_BRTAKEN	ELF.h	/^  R_PPC_ADDR14_BRTAKEN        = 8,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_ADDR16	ELF.h	/^  R_PPC_ADDR16                = 3,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_ADDR16_HA	ELF.h	/^  R_PPC_ADDR16_HA             = 6,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_ADDR16_HI	ELF.h	/^  R_PPC_ADDR16_HI             = 5,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_ADDR16_LO	ELF.h	/^  R_PPC_ADDR16_LO             = 4,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_ADDR24	ELF.h	/^  R_PPC_ADDR24                = 2,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_ADDR32	ELF.h	/^  R_PPC_ADDR32                = 1,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_NONE	ELF.h	/^  R_PPC_NONE                  = 0,      \/* No relocation. *\/$/;"	e	enum:llvm::ELF::__anon22
R_PPC_REL14	ELF.h	/^  R_PPC_REL14                 = 11,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_REL14_BRNTAKEN	ELF.h	/^  R_PPC_REL14_BRNTAKEN        = 13,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_REL14_BRTAKEN	ELF.h	/^  R_PPC_REL14_BRTAKEN         = 12,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_REL24	ELF.h	/^  R_PPC_REL24                 = 10,$/;"	e	enum:llvm::ELF::__anon22
R_PPC_REL32	ELF.h	/^  R_PPC_REL32                 = 26$/;"	e	enum:llvm::ELF::__anon22
R_X86_64_16	ELF.h	/^  R_X86_64_16         = 12,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_32	ELF.h	/^  R_X86_64_32         = 10,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_32S	ELF.h	/^  R_X86_64_32S        = 11,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_64	ELF.h	/^  R_X86_64_64         = 1,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_8	ELF.h	/^  R_X86_64_8          = 14,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_COPY	ELF.h	/^  R_X86_64_COPY       = 5,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_DTPMOD64	ELF.h	/^  R_X86_64_DTPMOD64   = 16,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_DTPOFF32	ELF.h	/^  R_X86_64_DTPOFF32   = 21,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_DTPOFF64	ELF.h	/^  R_X86_64_DTPOFF64   = 17,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GLOB_DAT	ELF.h	/^  R_X86_64_GLOB_DAT   = 6,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOT32	ELF.h	/^  R_X86_64_GOT32      = 3,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOT64	ELF.h	/^  R_X86_64_GOT64      = 27,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOTOFF64	ELF.h	/^  R_X86_64_GOTOFF64   = 25,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOTPC32	ELF.h	/^  R_X86_64_GOTPC32    = 26,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOTPC32_TLSDESC	ELF.h	/^  R_X86_64_GOTPC32_TLSDESC = 34,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOTPC64	ELF.h	/^  R_X86_64_GOTPC64    = 29,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOTPCREL	ELF.h	/^  R_X86_64_GOTPCREL   = 9,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOTPCREL64	ELF.h	/^  R_X86_64_GOTPCREL64 = 28,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOTPLT64	ELF.h	/^  R_X86_64_GOTPLT64   = 30,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_GOTTPOFF	ELF.h	/^  R_X86_64_GOTTPOFF   = 22,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_JUMP_SLOT	ELF.h	/^  R_X86_64_JUMP_SLOT  = 7,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_NONE	ELF.h	/^  R_X86_64_NONE       = 0,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_PC16	ELF.h	/^  R_X86_64_PC16       = 13,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_PC32	ELF.h	/^  R_X86_64_PC32       = 2,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_PC64	ELF.h	/^  R_X86_64_PC64       = 24,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_PC8	ELF.h	/^  R_X86_64_PC8        = 15,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_PLT32	ELF.h	/^  R_X86_64_PLT32      = 4,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_PLTOFF64	ELF.h	/^  R_X86_64_PLTOFF64   = 31,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_RELATIVE	ELF.h	/^  R_X86_64_RELATIVE   = 8,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_SIZE32	ELF.h	/^  R_X86_64_SIZE32     = 32,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_SIZE64	ELF.h	/^  R_X86_64_SIZE64     = 33,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_TLSDESC	ELF.h	/^  R_X86_64_TLSDESC    = 36$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_TLSDESC_CALL	ELF.h	/^  R_X86_64_TLSDESC_CALL    = 35,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_TLSGD	ELF.h	/^  R_X86_64_TLSGD      = 19,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_TLSLD	ELF.h	/^  R_X86_64_TLSLD      = 20,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_TPOFF32	ELF.h	/^  R_X86_64_TPOFF32    = 23,$/;"	e	enum:llvm::ELF::__anon19
R_X86_64_TPOFF64	ELF.h	/^  R_X86_64_TPOFF64    = 18,$/;"	e	enum:llvm::ELF::__anon19
Range	IntegersSubset.h	/^  typedef IntRange<IntTy> Range;$/;"	t	class:llvm::IntegersSubsetGeneric
RangeEx	IntegersSubsetMapping.h	/^    RangeEx() : Weight(1) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	IntegersSubsetMapping.h	/^    RangeEx(const IntTy &C) : RangeTy(C), Weight(1) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	IntegersSubsetMapping.h	/^    RangeEx(const IntTy &L, const IntTy &H) : RangeTy(L, H), Weight(1) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	IntegersSubsetMapping.h	/^    RangeEx(const IntTy &L, const IntTy &H, unsigned W) :$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	IntegersSubsetMapping.h	/^    RangeEx(const RangeTy &R) : RangeTy(R), Weight(1) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	IntegersSubsetMapping.h	/^    RangeEx(const RangeTy &R, unsigned W) : RangeTy(R), Weight(W) {}$/;"	f	struct:llvm::IntegersSubsetMapping::RangeEx
RangeEx	IntegersSubsetMapping.h	/^  struct RangeEx : public RangeTy {$/;"	s	class:llvm::IntegersSubsetMapping
RangeIterator	IntegersSubsetMapping.h	/^  typedef CaseItemIt RangeIterator;$/;"	t	class:llvm::IntegersSubsetMapping
RangeLinkTy	IntegersSubset.h	/^  typedef std::pair<IntTy*, IntTy*> RangeLinkTy;$/;"	t	class:llvm::IntegersSubsetGeneric
RangeLinks	IntegersSubset.h	/^  RangeLinksTy RangeLinks;$/;"	m	class:llvm::IntegersSubsetGeneric
RangeLinksConstIt	IntegersSubset.h	/^  typedef typename RangeLinksTy::const_iterator RangeLinksConstIt;$/;"	t	class:llvm::IntegersSubsetGeneric
RangeLinksTy	IntegersSubset.h	/^  typedef std::vector<RangeLinkTy> RangeLinksTy;$/;"	t	class:llvm::IntegersSubsetGeneric
RangeTy	IntegersSubsetMapping.h	/^  typedef IntRange<IntTy> RangeTy;$/;"	t	class:llvm::IntegersSubsetMapping
Ranges	SourceMgr.h	/^  std::vector<std::pair<unsigned, unsigned> > Ranges;$/;"	m	class:llvm::SMDiagnostic
RangesCollection	IntegersSubsetMapping.h	/^  typedef std::list<RangeTy> RangesCollection;$/;"	t	class:llvm::IntegersSubsetMapping
RangesCollectionConstIt	IntegersSubsetMapping.h	/^  typedef typename RangesCollection::const_iterator RangesCollectionConstIt;$/;"	t	class:llvm::IntegersSubsetMapping
RangesCollectionIt	IntegersSubsetMapping.h	/^  typedef typename RangesCollection::iterator RangesCollectionIt;$/;"	t	class:llvm::IntegersSubsetMapping
ReallyHidden	CommandLine.h	/^  ReallyHidden    = 0x02       \/\/ Neither -help nor -help-hidden show this arg$/;"	e	enum:llvm::cl::OptionHidden
RebaseImmediateMask	MachO.h	/^      RebaseImmediateMask                       = 0x0Fu, \/\/ REBASE_IMMEDIATE_MASK$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeAddAddressImmediateScaled	MachO.h	/^      RebaseOpcodeAddAddressImmediateScaled     = 0x40u, \/\/ REBASE_OPCODE_ADD_ADDR_IMM_SCALED$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeAddAddressULEB	MachO.h	/^      RebaseOpcodeAddAddressULEB                = 0x30u, \/\/ REBASE_OPCODE_ADD_ADDR_ULEB$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeDoRebaseAddAddressULEB	MachO.h	/^      RebaseOpcodeDoRebaseAddAddressULEB        = 0x70u, \/\/ REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeDoRebaseImmediateTimes	MachO.h	/^      RebaseOpcodeDoRebaseImmediateTimes        = 0x50u, \/\/ REBASE_OPCODE_DO_REBASE_IMM_TIMES$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeDoRebaseULEBTimes	MachO.h	/^      RebaseOpcodeDoRebaseULEBTimes             = 0x60u, \/\/ REBASE_OPCODE_DO_REBASE_ULEB_TIMES$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeDoRebaseULEBTimesSkippingULEB	MachO.h	/^      RebaseOpcodeDoRebaseULEBTimesSkippingULEB = 0x80u, \/\/ REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeDone	MachO.h	/^      RebaseOpcodeDone                          = 0x00u, \/\/ REBASE_OPCODE_DONE$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeMask	MachO.h	/^      RebaseOpcodeMask                          = 0xF0u, \/\/ REBASE_OPCODE_MASK$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeSetSegmentAndOffsetULEB	MachO.h	/^      RebaseOpcodeSetSegmentAndOffsetULEB       = 0x20u, \/\/ REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB$/;"	e	enum:llvm::MachO::__anon49
RebaseOpcodeSetTypeImmediate	MachO.h	/^      RebaseOpcodeSetTypeImmediate              = 0x10u, \/\/ REBASE_OPCODE_SET_TYPE_IMM$/;"	e	enum:llvm::MachO::__anon49
RebaseTypePointer	MachO.h	/^      RebaseTypePointer                     = 1u, \/\/ REBASE_TYPE_POINTER$/;"	e	enum:llvm::MachO::__anon49
RebaseTypeTextAbsolute32	MachO.h	/^      RebaseTypeTextAbsolute32              = 2u, \/\/ REBASE_TYPE_TEXT_ABSOLUTE32$/;"	e	enum:llvm::MachO::__anon49
RebaseTypeTextPCRelative32	MachO.h	/^      RebaseTypeTextPCRelative32            = 3u, \/\/ REBASE_TYPE_TEXT_PCREL32$/;"	e	enum:llvm::MachO::__anon49
RecDirIterState	FileSystem.h	/^    RecDirIterState()$/;"	f	struct:llvm::sys::fs::detail::RecDirIterState
RecDirIterState	FileSystem.h	/^  struct RecDirIterState : public RefCountedBase<RecDirIterState> {$/;"	s	namespace:llvm::sys::fs::detail
Recycler	Recycler.h	/^class Recycler {$/;"	c	namespace:llvm
RecyclerStruct	Recycler.h	/^struct RecyclerStruct {$/;"	s	namespace:llvm
RecyclingAllocator	RecyclingAllocator.h	/^class RecyclingAllocator {$/;"	c	namespace:llvm
Refcount	StringPool.h	/^      unsigned Refcount; \/\/\/< Number of referencing PooledStringPtrs.$/;"	m	struct:llvm::StringPool::PooledString
ReferenceAdder	Allocator.h	/^template <typename T> struct ReferenceAdder { typedef T& result; };$/;"	s	namespace:llvm
ReferenceAdder	Allocator.h	/^template <typename T> struct ReferenceAdder<T&> { typedef T result; };$/;"	s	namespace:llvm
Regex	Regex.h	/^  class Regex {$/;"	c	namespace:llvm
RegisterAsmPrinter	TargetRegistry.h	/^    RegisterAsmPrinter(Target &T) {$/;"	f	struct:llvm::RegisterAsmPrinter
RegisterAsmPrinter	TargetRegistry.h	/^    static void RegisterAsmPrinter(Target &T, Target::AsmPrinterCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterAsmPrinter	TargetRegistry.h	/^  struct RegisterAsmPrinter {$/;"	s	namespace:llvm
RegisterAsmStreamer	TargetRegistry.h	/^    static void RegisterAsmStreamer(Target &T, Target::AsmStreamerCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCAsmBackend	TargetRegistry.h	/^    RegisterMCAsmBackend(Target &T) {$/;"	f	struct:llvm::RegisterMCAsmBackend
RegisterMCAsmBackend	TargetRegistry.h	/^    static void RegisterMCAsmBackend(Target &T, Target::MCAsmBackendCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCAsmBackend	TargetRegistry.h	/^  struct RegisterMCAsmBackend {$/;"	s	namespace:llvm
RegisterMCAsmInfo	TargetRegistry.h	/^    RegisterMCAsmInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCAsmInfo
RegisterMCAsmInfo	TargetRegistry.h	/^    static void RegisterMCAsmInfo(Target &T, Target::MCAsmInfoCtorFnTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCAsmInfo	TargetRegistry.h	/^  struct RegisterMCAsmInfo {$/;"	s	namespace:llvm
RegisterMCAsmInfoFn	TargetRegistry.h	/^    RegisterMCAsmInfoFn(Target &T, Target::MCAsmInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCAsmInfoFn
RegisterMCAsmInfoFn	TargetRegistry.h	/^  struct RegisterMCAsmInfoFn {$/;"	s	namespace:llvm
RegisterMCAsmLexer	TargetRegistry.h	/^    RegisterMCAsmLexer(Target &T) {$/;"	f	struct:llvm::RegisterMCAsmLexer
RegisterMCAsmLexer	TargetRegistry.h	/^    static void RegisterMCAsmLexer(Target &T, Target::MCAsmLexerCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCAsmLexer	TargetRegistry.h	/^  struct RegisterMCAsmLexer {$/;"	s	namespace:llvm
RegisterMCAsmParser	TargetRegistry.h	/^    RegisterMCAsmParser(Target &T) {$/;"	f	struct:llvm::RegisterMCAsmParser
RegisterMCAsmParser	TargetRegistry.h	/^    static void RegisterMCAsmParser(Target &T, Target::MCAsmParserCtorTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCAsmParser	TargetRegistry.h	/^  struct RegisterMCAsmParser {$/;"	s	namespace:llvm
RegisterMCCodeEmitter	TargetRegistry.h	/^    RegisterMCCodeEmitter(Target &T) {$/;"	f	struct:llvm::RegisterMCCodeEmitter
RegisterMCCodeEmitter	TargetRegistry.h	/^    static void RegisterMCCodeEmitter(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCCodeEmitter	TargetRegistry.h	/^  struct RegisterMCCodeEmitter {$/;"	s	namespace:llvm
RegisterMCCodeGenInfo	TargetRegistry.h	/^    RegisterMCCodeGenInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCCodeGenInfo
RegisterMCCodeGenInfo	TargetRegistry.h	/^    static void RegisterMCCodeGenInfo(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCCodeGenInfo	TargetRegistry.h	/^  struct RegisterMCCodeGenInfo {$/;"	s	namespace:llvm
RegisterMCCodeGenInfoFn	TargetRegistry.h	/^    RegisterMCCodeGenInfoFn(Target &T, Target::MCCodeGenInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCCodeGenInfoFn
RegisterMCCodeGenInfoFn	TargetRegistry.h	/^  struct RegisterMCCodeGenInfoFn {$/;"	s	namespace:llvm
RegisterMCDisassembler	TargetRegistry.h	/^    static void RegisterMCDisassembler(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCInstPrinter	TargetRegistry.h	/^    static void RegisterMCInstPrinter(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCInstrAnalysis	TargetRegistry.h	/^    RegisterMCInstrAnalysis(Target &T) {$/;"	f	struct:llvm::RegisterMCInstrAnalysis
RegisterMCInstrAnalysis	TargetRegistry.h	/^    static void RegisterMCInstrAnalysis(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCInstrAnalysis	TargetRegistry.h	/^  struct RegisterMCInstrAnalysis {$/;"	s	namespace:llvm
RegisterMCInstrAnalysisFn	TargetRegistry.h	/^    RegisterMCInstrAnalysisFn(Target &T, Target::MCInstrAnalysisCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCInstrAnalysisFn
RegisterMCInstrAnalysisFn	TargetRegistry.h	/^  struct RegisterMCInstrAnalysisFn {$/;"	s	namespace:llvm
RegisterMCInstrInfo	TargetRegistry.h	/^    RegisterMCInstrInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCInstrInfo
RegisterMCInstrInfo	TargetRegistry.h	/^    static void RegisterMCInstrInfo(Target &T, Target::MCInstrInfoCtorFnTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCInstrInfo	TargetRegistry.h	/^  struct RegisterMCInstrInfo {$/;"	s	namespace:llvm
RegisterMCInstrInfoFn	TargetRegistry.h	/^    RegisterMCInstrInfoFn(Target &T, Target::MCInstrInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCInstrInfoFn
RegisterMCInstrInfoFn	TargetRegistry.h	/^  struct RegisterMCInstrInfoFn {$/;"	s	namespace:llvm
RegisterMCObjectStreamer	TargetRegistry.h	/^    static void RegisterMCObjectStreamer(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCRegInfo	TargetRegistry.h	/^    RegisterMCRegInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCRegInfo
RegisterMCRegInfo	TargetRegistry.h	/^    static void RegisterMCRegInfo(Target &T, Target::MCRegInfoCtorFnTy Fn) {$/;"	f	struct:llvm::TargetRegistry
RegisterMCRegInfo	TargetRegistry.h	/^  struct RegisterMCRegInfo {$/;"	s	namespace:llvm
RegisterMCRegInfoFn	TargetRegistry.h	/^    RegisterMCRegInfoFn(Target &T, Target::MCRegInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCRegInfoFn
RegisterMCRegInfoFn	TargetRegistry.h	/^  struct RegisterMCRegInfoFn {$/;"	s	namespace:llvm
RegisterMCSubtargetInfo	TargetRegistry.h	/^    RegisterMCSubtargetInfo(Target &T) {$/;"	f	struct:llvm::RegisterMCSubtargetInfo
RegisterMCSubtargetInfo	TargetRegistry.h	/^    static void RegisterMCSubtargetInfo(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterMCSubtargetInfo	TargetRegistry.h	/^  struct RegisterMCSubtargetInfo {$/;"	s	namespace:llvm
RegisterMCSubtargetInfoFn	TargetRegistry.h	/^    RegisterMCSubtargetInfoFn(Target &T, Target::MCSubtargetInfoCtorFnTy Fn) {$/;"	f	struct:llvm::RegisterMCSubtargetInfoFn
RegisterMCSubtargetInfoFn	TargetRegistry.h	/^  struct RegisterMCSubtargetInfoFn {$/;"	s	namespace:llvm
RegisterTarget	TargetRegistry.h	/^    RegisterTarget(Target &T, const char *Name, const char *Desc) {$/;"	f	struct:llvm::RegisterTarget
RegisterTarget	TargetRegistry.h	/^  struct RegisterTarget {$/;"	s	namespace:llvm
RegisterTargetMachine	TargetRegistry.h	/^    RegisterTargetMachine(Target &T) {$/;"	f	struct:llvm::RegisterTargetMachine
RegisterTargetMachine	TargetRegistry.h	/^    static void RegisterTargetMachine(Target &T,$/;"	f	struct:llvm::TargetRegistry
RegisterTargetMachine	TargetRegistry.h	/^  struct RegisterTargetMachine {$/;"	s	namespace:llvm
Registry	Registry.h	/^  class Registry {$/;"	c	namespace:llvm
RegistryParser	RegistryParser.h	/^  class RegistryParser :$/;"	c	namespace:llvm
RegistryTraits	Registry.h	/^  class RegistryTraits {$/;"	c	namespace:llvm
RelativeVirtualAddress	COFF.h	/^    uint32_t RelativeVirtualAddress;$/;"	m	struct:llvm::COFF::DataDirectory
Reloc	CodeGen.h	/^  namespace Reloc {$/;"	n	namespace:llvm
RelocationSize	COFF.h	/^    RelocationSize = 10$/;"	e	enum:llvm::COFF::__anon10
RelocationTypeX86	COFF.h	/^  enum RelocationTypeX86 {$/;"	g	namespace:llvm::COFF
RelocationTypesARM	COFF.h	/^  enum RelocationTypesARM {$/;"	g	namespace:llvm::COFF
Required	CommandLine.h	/^  Required        = 0x02,      \/\/ One occurrence required$/;"	e	enum:llvm::cl::NumOccurrencesFlag
Res	PatternMatch.h	/^  const APInt *&Res;$/;"	m	struct:llvm::PatternMatch::api_pred_ty
Res	PatternMatch.h	/^  const APInt *&Res;$/;"	m	struct:llvm::PatternMatch::apint_match
Reserved	COFF.h	/^    uint16_t Reserved[4];$/;"	m	struct:llvm::COFF::DOSHeader
Reserved2	COFF.h	/^    uint16_t Reserved2[10];$/;"	m	struct:llvm::COFF::DOSHeader
Reset	Allocator.h	/^  void Reset() {}$/;"	f	class:llvm::MallocAllocator
RightMapping	IntegersSubsetMapping.h	/^    self *RightMapping;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Root	YAMLParser.h	/^  Node *Root;$/;"	m	class:llvm::yaml::Document
RoundUpToAlignment	MathExtras.h	/^inline uint64_t RoundUpToAlignment(uint64_t Value, uint64_t Align) {$/;"	f	namespace:llvm
RuntimeFunction	Win64EH.h	/^struct RuntimeFunction {$/;"	s	namespace:llvm::Win64EH
S	StringPool.h	/^    entry_t *S;$/;"	m	class:llvm::PooledStringPtr
SAVEDCOLOR	raw_ostream.h	/^    SAVEDCOLOR$/;"	e	enum:llvm::raw_ostream::Colors
SCT_COMPLEX_TYPE_SHIFT	COFF.h	/^    SCT_COMPLEX_TYPE_SHIFT   = 4$/;"	e	enum:llvm::COFF::SymbolComplexType
SC_Invalid	COFF.h	/^    SC_Invalid = 0xffffffff,$/;"	e	enum:llvm::COFF::SectionCharacteristics
SET_COMM_ALIGN	MachO.h	/^    static inline void SET_COMM_ALIGN (uint16_t &n_desc, uint8_t align)$/;"	f	namespace:llvm::MachO
SET_LIBRARY_ORDINAL	MachO.h	/^    static inline void SET_LIBRARY_ORDINAL(uint16_t &n_desc, uint8_t ordinal)$/;"	f	namespace:llvm::MachO
SF_ClassMask	COFF.h	/^    SF_ClassMask = 0x00FF0000,$/;"	e	enum:llvm::COFF::SymbolFlags
SF_ClassShift	COFF.h	/^    SF_ClassShift = 16,$/;"	e	enum:llvm::COFF::SymbolFlags
SF_TypeMask	COFF.h	/^    SF_TypeMask = 0x0000FFFF,$/;"	e	enum:llvm::COFF::SymbolFlags
SF_TypeShift	COFF.h	/^    SF_TypeShift = 0,$/;"	e	enum:llvm::COFF::SymbolFlags
SF_WeakExternal	COFF.h	/^    SF_WeakExternal = 0x01000000$/;"	e	enum:llvm::COFF::SymbolFlags
SHF_ALLOC	ELF.h	/^  SHF_ALLOC = 0x2,$/;"	e	enum:llvm::ELF::__anon31
SHF_EXECINSTR	ELF.h	/^  SHF_EXECINSTR = 0x4,$/;"	e	enum:llvm::ELF::__anon31
SHF_GROUP	ELF.h	/^  SHF_GROUP = 0x200U,$/;"	e	enum:llvm::ELF::__anon31
SHF_INFO_LINK	ELF.h	/^  SHF_INFO_LINK = 0x40U,$/;"	e	enum:llvm::ELF::__anon31
SHF_LINK_ORDER	ELF.h	/^  SHF_LINK_ORDER = 0x80U,$/;"	e	enum:llvm::ELF::__anon31
SHF_MASKOS	ELF.h	/^  SHF_MASKOS   = 0x0ff00000,$/;"	e	enum:llvm::ELF::__anon31
SHF_MASKPROC	ELF.h	/^  SHF_MASKPROC = 0xf0000000,$/;"	e	enum:llvm::ELF::__anon31
SHF_MERGE	ELF.h	/^  SHF_MERGE = 0x10,$/;"	e	enum:llvm::ELF::__anon31
SHF_OS_NONCONFORMING	ELF.h	/^  SHF_OS_NONCONFORMING = 0x100U,$/;"	e	enum:llvm::ELF::__anon31
SHF_STRINGS	ELF.h	/^  SHF_STRINGS = 0x20,$/;"	e	enum:llvm::ELF::__anon31
SHF_TLS	ELF.h	/^  SHF_TLS = 0x400U,$/;"	e	enum:llvm::ELF::__anon31
SHF_WRITE	ELF.h	/^  SHF_WRITE = 0x1,$/;"	e	enum:llvm::ELF::__anon31
SHF_X86_64_LARGE	ELF.h	/^  SHF_X86_64_LARGE = 0x10000000$/;"	e	enum:llvm::ELF::__anon31
SHN_ABS	ELF.h	/^  SHN_ABS       = 0xfff1, \/\/ Symbol has absolute value; does not need relocation$/;"	e	enum:llvm::ELF::__anon29
SHN_COMMON	ELF.h	/^  SHN_COMMON    = 0xfff2, \/\/ FORTRAN COMMON or C external global variables$/;"	e	enum:llvm::ELF::__anon29
SHN_HIOS	ELF.h	/^  SHN_HIOS      = 0xff3f, \/\/ Highest operating system-specific index$/;"	e	enum:llvm::ELF::__anon29
SHN_HIPROC	ELF.h	/^  SHN_HIPROC    = 0xff1f, \/\/ Highest processor-specific index$/;"	e	enum:llvm::ELF::__anon29
SHN_HIRESERVE	ELF.h	/^  SHN_HIRESERVE = 0xffff  \/\/ Highest reserved index$/;"	e	enum:llvm::ELF::__anon29
SHN_LOOS	ELF.h	/^  SHN_LOOS      = 0xff20, \/\/ Lowest operating system-specific index$/;"	e	enum:llvm::ELF::__anon29
SHN_LOPROC	ELF.h	/^  SHN_LOPROC    = 0xff00, \/\/ Lowest processor-specific index$/;"	e	enum:llvm::ELF::__anon29
SHN_LORESERVE	ELF.h	/^  SHN_LORESERVE = 0xff00, \/\/ Lowest reserved index$/;"	e	enum:llvm::ELF::__anon29
SHN_UNDEF	ELF.h	/^  SHN_UNDEF     = 0,      \/\/ Undefined, missing, irrelevant, or meaningless$/;"	e	enum:llvm::ELF::__anon29
SHN_XINDEX	ELF.h	/^  SHN_XINDEX    = 0xffff, \/\/ Mark that the index is >= SHN_LORESERVE$/;"	e	enum:llvm::ELF::__anon29
SHT_ARM_ATTRIBUTES	ELF.h	/^  SHT_ARM_ATTRIBUTES      = 0x70000003U,$/;"	e	enum:llvm::ELF::__anon30
SHT_ARM_DEBUGOVERLAY	ELF.h	/^  SHT_ARM_DEBUGOVERLAY    = 0x70000004U,$/;"	e	enum:llvm::ELF::__anon30
SHT_ARM_EXIDX	ELF.h	/^  SHT_ARM_EXIDX           = 0x70000001U,$/;"	e	enum:llvm::ELF::__anon30
SHT_ARM_OVERLAYSECTION	ELF.h	/^  SHT_ARM_OVERLAYSECTION  = 0x70000005U,$/;"	e	enum:llvm::ELF::__anon30
SHT_ARM_PREEMPTMAP	ELF.h	/^  SHT_ARM_PREEMPTMAP      = 0x70000002U,$/;"	e	enum:llvm::ELF::__anon30
SHT_DYNAMIC	ELF.h	/^  SHT_DYNAMIC       = 6,  \/\/ Information for dynamic linking.$/;"	e	enum:llvm::ELF::__anon30
SHT_DYNSYM	ELF.h	/^  SHT_DYNSYM        = 11, \/\/ Symbol table.$/;"	e	enum:llvm::ELF::__anon30
SHT_FINI_ARRAY	ELF.h	/^  SHT_FINI_ARRAY    = 15, \/\/ Pointers to termination functions.$/;"	e	enum:llvm::ELF::__anon30
SHT_GNU_ATTRIBUTES	ELF.h	/^  SHT_GNU_ATTRIBUTES= 0x6ffffff5, \/\/ Object attributes.$/;"	e	enum:llvm::ELF::__anon30
SHT_GNU_HASH	ELF.h	/^  SHT_GNU_HASH      = 0x6ffffff6, \/\/ GNU-style hash table.$/;"	e	enum:llvm::ELF::__anon30
SHT_GNU_verdef	ELF.h	/^  SHT_GNU_verdef    = 0x6ffffffd, \/\/ GNU version definitions.$/;"	e	enum:llvm::ELF::__anon30
SHT_GNU_verneed	ELF.h	/^  SHT_GNU_verneed   = 0x6ffffffe, \/\/ GNU version references.$/;"	e	enum:llvm::ELF::__anon30
SHT_GNU_versym	ELF.h	/^  SHT_GNU_versym    = 0x6fffffff, \/\/ GNU symbol versions table.$/;"	e	enum:llvm::ELF::__anon30
SHT_GROUP	ELF.h	/^  SHT_GROUP         = 17, \/\/ Section group.$/;"	e	enum:llvm::ELF::__anon30
SHT_HASH	ELF.h	/^  SHT_HASH          = 5,  \/\/ Symbol hash table.$/;"	e	enum:llvm::ELF::__anon30
SHT_HIOS	ELF.h	/^  SHT_HIOS          = 0x6fffffff, \/\/ Highest operating system-specific type.$/;"	e	enum:llvm::ELF::__anon30
SHT_HIPROC	ELF.h	/^  SHT_HIPROC        = 0x7fffffff, \/\/ Highest processor architecture-specific type.$/;"	e	enum:llvm::ELF::__anon30
SHT_HIUSER	ELF.h	/^  SHT_HIUSER        = 0xffffffff  \/\/ Highest type reserved for applications.$/;"	e	enum:llvm::ELF::__anon30
SHT_INIT_ARRAY	ELF.h	/^  SHT_INIT_ARRAY    = 14, \/\/ Pointers to initialization functions.$/;"	e	enum:llvm::ELF::__anon30
SHT_LOOS	ELF.h	/^  SHT_LOOS          = 0x60000000, \/\/ Lowest operating system-specific type.$/;"	e	enum:llvm::ELF::__anon30
SHT_LOPROC	ELF.h	/^  SHT_LOPROC        = 0x70000000, \/\/ Lowest processor architecture-specific type.$/;"	e	enum:llvm::ELF::__anon30
SHT_LOUSER	ELF.h	/^  SHT_LOUSER        = 0x80000000, \/\/ Lowest type reserved for applications.$/;"	e	enum:llvm::ELF::__anon30
SHT_NOBITS	ELF.h	/^  SHT_NOBITS        = 8,  \/\/ Data occupies no space in the file.$/;"	e	enum:llvm::ELF::__anon30
SHT_NOTE	ELF.h	/^  SHT_NOTE          = 7,  \/\/ Information about the file.$/;"	e	enum:llvm::ELF::__anon30
SHT_NULL	ELF.h	/^  SHT_NULL          = 0,  \/\/ No associated section (inactive entry).$/;"	e	enum:llvm::ELF::__anon30
SHT_PREINIT_ARRAY	ELF.h	/^  SHT_PREINIT_ARRAY = 16, \/\/ Pointers to pre-init functions.$/;"	e	enum:llvm::ELF::__anon30
SHT_PROGBITS	ELF.h	/^  SHT_PROGBITS      = 1,  \/\/ Program-defined contents.$/;"	e	enum:llvm::ELF::__anon30
SHT_REL	ELF.h	/^  SHT_REL           = 9,  \/\/ Relocation entries; no explicit addends.$/;"	e	enum:llvm::ELF::__anon30
SHT_RELA	ELF.h	/^  SHT_RELA          = 4,  \/\/ Relocation entries; explicit addends.$/;"	e	enum:llvm::ELF::__anon30
SHT_SHLIB	ELF.h	/^  SHT_SHLIB         = 10, \/\/ Reserved.$/;"	e	enum:llvm::ELF::__anon30
SHT_STRTAB	ELF.h	/^  SHT_STRTAB        = 3,  \/\/ String table.$/;"	e	enum:llvm::ELF::__anon30
SHT_SYMTAB	ELF.h	/^  SHT_SYMTAB        = 2,  \/\/ Symbol table.$/;"	e	enum:llvm::ELF::__anon30
SHT_SYMTAB_SHNDX	ELF.h	/^  SHT_SYMTAB_SHNDX  = 18, \/\/ Indices for SHN_XINDEX entries.$/;"	e	enum:llvm::ELF::__anon30
SHT_X86_64_UNWIND	ELF.h	/^  SHT_X86_64_UNWIND       = 0x70000001, \/\/ Unwind information$/;"	e	enum:llvm::ELF::__anon30
SM	SourceMgr.h	/^  const SourceMgr *SM;$/;"	m	class:llvm::SMDiagnostic
SMDiagnostic	SourceMgr.h	/^  SMDiagnostic()$/;"	f	class:llvm::SMDiagnostic
SMDiagnostic	SourceMgr.h	/^  SMDiagnostic(const std::string &filename, SourceMgr::DiagKind Knd,$/;"	f	class:llvm::SMDiagnostic
SMDiagnostic	SourceMgr.h	/^class SMDiagnostic {$/;"	c	namespace:llvm
SMLoc	SMLoc.h	/^  SMLoc() : Ptr(0) {}$/;"	f	class:llvm::SMLoc
SMLoc	SMLoc.h	/^class SMLoc {$/;"	c	namespace:llvm
SMRange	SMLoc.h	/^  SMRange() {}$/;"	f	class:llvm::SMRange
SMRange	SMLoc.h	/^  SMRange(SMLoc St, SMLoc En) : Start(St), End(En) {$/;"	f	class:llvm::SMRange
SMRange	SMLoc.h	/^class SMRange {$/;"	c	namespace:llvm
SS	Solaris.h	25;"	d
SSC_Invalid	COFF.h	/^    SSC_Invalid = 0xff,$/;"	e	enum:llvm::COFF::SymbolStorageClass
STB_GLOBAL	ELF.h	/^  STB_GLOBAL = 1,  \/\/ Global symbol, visible to all object files being combined$/;"	e	enum:llvm::ELF::__anon34
STB_HIOS	ELF.h	/^  STB_HIOS   = 12, \/\/ Highest operating system-specific binding type$/;"	e	enum:llvm::ELF::__anon34
STB_HIPROC	ELF.h	/^  STB_HIPROC = 15  \/\/ Highest processor-specific binding type$/;"	e	enum:llvm::ELF::__anon34
STB_LOCAL	ELF.h	/^  STB_LOCAL = 0,   \/\/ Local symbol, not visible outside obj file containing def$/;"	e	enum:llvm::ELF::__anon34
STB_LOOS	ELF.h	/^  STB_LOOS   = 10, \/\/ Lowest operating system-specific binding type$/;"	e	enum:llvm::ELF::__anon34
STB_LOPROC	ELF.h	/^  STB_LOPROC = 13, \/\/ Lowest processor-specific binding type$/;"	e	enum:llvm::ELF::__anon34
STB_WEAK	ELF.h	/^  STB_WEAK = 2,    \/\/ Weak symbol, like global but lower-precedence$/;"	e	enum:llvm::ELF::__anon34
STREAMABLEMEMORYOBJECT_H_	StreamableMemoryObject.h	12;"	d
STT_COMMON	ELF.h	/^  STT_COMMON  = 5,   \/\/ An uninitialized common block$/;"	e	enum:llvm::ELF::__anon35
STT_FILE	ELF.h	/^  STT_FILE    = 4,   \/\/ Local, absolute symbol that refers to a file$/;"	e	enum:llvm::ELF::__anon35
STT_FUNC	ELF.h	/^  STT_FUNC    = 2,   \/\/ Symbol is executable code (function, etc.)$/;"	e	enum:llvm::ELF::__anon35
STT_GNU_IFUNC	ELF.h	/^  STT_GNU_IFUNC = 10, \/\/ GNU indirect function$/;"	e	enum:llvm::ELF::__anon35
STT_HIOS	ELF.h	/^  STT_HIOS    = 8,   \/\/ Highest operating system-specific symbol type$/;"	e	enum:llvm::ELF::__anon35
STT_HIPROC	ELF.h	/^  STT_HIPROC  = 15   \/\/ Highest processor-specific symbol type$/;"	e	enum:llvm::ELF::__anon35
STT_LOOS	ELF.h	/^  STT_LOOS    = 7,   \/\/ Lowest operating system-specific symbol type$/;"	e	enum:llvm::ELF::__anon35
STT_LOPROC	ELF.h	/^  STT_LOPROC  = 13,  \/\/ Lowest processor-specific symbol type$/;"	e	enum:llvm::ELF::__anon35
STT_NOTYPE	ELF.h	/^  STT_NOTYPE  = 0,   \/\/ Symbol's type is not specified$/;"	e	enum:llvm::ELF::__anon35
STT_OBJECT	ELF.h	/^  STT_OBJECT  = 1,   \/\/ Symbol is a data object (variable, array, etc.)$/;"	e	enum:llvm::ELF::__anon35
STT_SECTION	ELF.h	/^  STT_SECTION = 3,   \/\/ Symbol refers to a section$/;"	e	enum:llvm::ELF::__anon35
STT_TLS	ELF.h	/^  STT_TLS     = 6,   \/\/ Thread local data object$/;"	e	enum:llvm::ELF::__anon35
STV_DEFAULT	ELF.h	/^  STV_DEFAULT   = 0,  \/\/ Visibility is specified by binding type$/;"	e	enum:llvm::ELF::__anon36
STV_HIDDEN	ELF.h	/^  STV_HIDDEN    = 2,  \/\/ Not visible to other components$/;"	e	enum:llvm::ELF::__anon36
STV_INTERNAL	ELF.h	/^  STV_INTERNAL  = 1,  \/\/ Defined by processor supplements$/;"	e	enum:llvm::ELF::__anon36
STV_PROTECTED	ELF.h	/^  STV_PROTECTED = 3   \/\/ Visible in other components but not preemptable$/;"	e	enum:llvm::ELF::__anon36
ST_Block	YAMLParser.h	/^    ST_Block,$/;"	e	enum:llvm::yaml::SequenceNode::SequenceType
ST_Flow	YAMLParser.h	/^    ST_Flow,$/;"	e	enum:llvm::yaml::SequenceNode::SequenceType
ST_Indentless	YAMLParser.h	/^    ST_Indentless$/;"	e	enum:llvm::yaml::SequenceNode::SequenceType
SUPPORT_SMLOC_H	SMLoc.h	16;"	d
SUPPORT_SOURCEMGR_H	SourceMgr.h	17;"	d
SYMENTRY_SIZE32	ELF.h	/^  SYMENTRY_SIZE32 = 16, \/\/ 32-bit symbol entry size$/;"	e	enum:llvm::ELF::__anon33
SYMENTRY_SIZE64	ELF.h	/^  SYMENTRY_SIZE64 = 24  \/\/ 64-bit symbol entry size.$/;"	e	enum:llvm::ELF::__anon33
SaveAndRestore	SaveAndRestore.h	/^  SaveAndRestore(T& x) : X(x), old_value(x) {}$/;"	f	struct:llvm::SaveAndRestore
SaveAndRestore	SaveAndRestore.h	/^  SaveAndRestore(T& x, const T &new_value) : X(x), old_value(x) {$/;"	f	struct:llvm::SaveAndRestore
SaveAndRestore	SaveAndRestore.h	/^struct SaveAndRestore {$/;"	s	namespace:llvm
SaveOr	SaveAndRestore.h	/^  SaveOr(bool& x) : X(x), old_value(x) { x = false; }$/;"	f	struct:llvm::SaveOr
SaveOr	SaveAndRestore.h	/^struct SaveOr {$/;"	s	namespace:llvm
ScalarNode	YAMLParser.h	/^  ScalarNode(OwningPtr<Document> &D, StringRef Anchor, StringRef Val)$/;"	f	class:llvm::yaml::ScalarNode
ScalarNode	YAMLParser.h	/^class ScalarNode : public Node {$/;"	c	namespace:llvm::yaml
Scanned	FormattedStream.h	/^    const char *Scanned;$/;"	m	class:llvm::formatted_raw_ostream
ScopeIdx	DebugLoc.h	/^    int ScopeIdx;$/;"	m	class:llvm::DebugLoc
ScopedFatalErrorHandler	ErrorHandling.h	/^    explicit ScopedFatalErrorHandler(fatal_error_handler_t handler,$/;"	f	struct:llvm::ScopedFatalErrorHandler
ScopedFatalErrorHandler	ErrorHandling.h	/^  struct ScopedFatalErrorHandler {$/;"	s	namespace:llvm
ScopedLock	Mutex.h	/^    typedef SmartScopedLock<false> ScopedLock;$/;"	t	namespace:llvm::sys
ScopedReader	RWMutex.h	/^    typedef SmartScopedReader<false> ScopedReader;$/;"	t	namespace:llvm::sys
ScopedWriter	RWMutex.h	/^    typedef SmartScopedWriter<false> ScopedWriter;$/;"	t	namespace:llvm::sys
SearchForAddressOfSymbol	DynamicLibrary.h	/^    static void *SearchForAddressOfSymbol(const std::string &symbolName) {$/;"	f	class:llvm::sys::DynamicLibrary
SecondsType	TimeValue.h	/^    typedef int64_t SecondsType;    \/\/\/< Type used for representing seconds.$/;"	t	class:llvm::sys::TimeValue
SectionAlignment	COFF.h	/^    uint32_t SectionAlignment;$/;"	m	struct:llvm::COFF::PEHeader
SectionAttrSytemHasExternalRelocations	MachO.h	/^      SectionAttrSytemHasExternalRelocations= 0x00000200u, \/\/ S_ATTR_EXT_RELOC$/;"	e	enum:llvm::MachO::__anon49
SectionAttrSytemHasLocalRelocations	MachO.h	/^      SectionAttrSytemHasLocalRelocations   = 0x00000100u, \/\/ S_ATTR_LOC_RELOC$/;"	e	enum:llvm::MachO::__anon49
SectionAttrSytemSomeInstructions	MachO.h	/^      SectionAttrSytemSomeInstructions      = 0x00000400u, \/\/ S_ATTR_SOME_INSTRUCTIONS$/;"	e	enum:llvm::MachO::__anon49
SectionAttrUserCanStripStaticSymbols	MachO.h	/^      SectionAttrUserCanStripStaticSymbols  = 0x20000000u, \/\/ S_ATTR_STRIP_STATIC_SYMS$/;"	e	enum:llvm::MachO::__anon49
SectionAttrUserDebug	MachO.h	/^      SectionAttrUserDebug                  = 0x02000000u, \/\/ S_ATTR_DEBUG$/;"	e	enum:llvm::MachO::__anon49
SectionAttrUserLiveSupport	MachO.h	/^      SectionAttrUserLiveSupport            = 0x08000000u, \/\/ S_ATTR_LIVE_SUPPORT$/;"	e	enum:llvm::MachO::__anon49
SectionAttrUserNoDeadStrip	MachO.h	/^      SectionAttrUserNoDeadStrip            = 0x10000000u, \/\/ S_ATTR_NO_DEAD_STRIP$/;"	e	enum:llvm::MachO::__anon49
SectionAttrUserNoTableOfContents	MachO.h	/^      SectionAttrUserNoTableOfContents      = 0x40000000u, \/\/ S_ATTR_NO_TOC$/;"	e	enum:llvm::MachO::__anon49
SectionAttrUserPureInstructions	MachO.h	/^      SectionAttrUserPureInstructions       = 0x80000000u, \/\/ S_ATTR_PURE_INSTRUCTIONS$/;"	e	enum:llvm::MachO::__anon49
SectionAttrUserSelfModifyingCode	MachO.h	/^      SectionAttrUserSelfModifyingCode      = 0x04000000u, \/\/ S_ATTR_SELF_MODIFYING_CODE$/;"	e	enum:llvm::MachO::__anon49
SectionCharacteristics	COFF.h	/^  enum SectionCharacteristics {$/;"	g	namespace:llvm::COFF
SectionDefinition	COFF.h	/^    AuxiliarySectionDefinition  SectionDefinition;$/;"	m	union:llvm::COFF::Auxiliary
SectionFlagMaskAllAttributes	MachO.h	/^      SectionFlagMaskAllAttributes    = 0xffffff00u, \/\/ SECTION_ATTRIBUTES$/;"	e	enum:llvm::MachO::__anon49
SectionFlagMaskSectionType	MachO.h	/^      SectionFlagMaskSectionType      = 0x000000ffu, \/\/ SECTION_TYPE$/;"	e	enum:llvm::MachO::__anon49
SectionFlagMaskSystemAttributes	MachO.h	/^      SectionFlagMaskSystemAttributes = 0x00ffff00u, \/\/ SECTION_ATTRIBUTES_SYS$/;"	e	enum:llvm::MachO::__anon49
SectionFlagMaskUserAttributes	MachO.h	/^      SectionFlagMaskUserAttributes   = 0xff000000u, \/\/ SECTION_ATTRIBUTES_USR$/;"	e	enum:llvm::MachO::__anon49
SectionNumber	COFF.h	/^    uint16_t SectionNumber;$/;"	m	struct:llvm::COFF::symbol
SectionSize	COFF.h	/^    SectionSize    = 40,$/;"	e	enum:llvm::COFF::__anon10
SectionType16ByteLiterals	MachO.h	/^      SectionType16ByteLiterals             = 0x0eu, \/\/ S_16BYTE_LITERALS$/;"	e	enum:llvm::MachO::__anon49
SectionType4ByteLiterals	MachO.h	/^      SectionType4ByteLiterals              = 0x03u, \/\/ S_4BYTE_LITERALS$/;"	e	enum:llvm::MachO::__anon49
SectionType8ByteLiterals	MachO.h	/^      SectionType8ByteLiterals              = 0x04u, \/\/ S_8BYTE_LITERALS$/;"	e	enum:llvm::MachO::__anon49
SectionTypeCStringLiterals	MachO.h	/^      SectionTypeCStringLiterals            = 0x02u, \/\/ S_CSTRING_LITERALS$/;"	e	enum:llvm::MachO::__anon49
SectionTypeCoalesced	MachO.h	/^      SectionTypeCoalesced                  = 0x0bu, \/\/ S_COALESCED$/;"	e	enum:llvm::MachO::__anon49
SectionTypeDTraceObjectFormat	MachO.h	/^      SectionTypeDTraceObjectFormat         = 0x0fu, \/\/ S_DTRACE_DOF$/;"	e	enum:llvm::MachO::__anon49
SectionTypeInterposing	MachO.h	/^      SectionTypeInterposing                = 0x0du, \/\/ S_INTERPOSING$/;"	e	enum:llvm::MachO::__anon49
SectionTypeLazyDylibSymbolPointers	MachO.h	/^      SectionTypeLazyDylibSymbolPointers    = 0x10u, \/\/ S_LAZY_DYLIB_SYMBOL_POINTERS$/;"	e	enum:llvm::MachO::__anon49
SectionTypeLazySymbolPointers	MachO.h	/^      SectionTypeLazySymbolPointers         = 0x07u, \/\/ S_LAZY_SYMBOL_POINTERS$/;"	e	enum:llvm::MachO::__anon49
SectionTypeLiteralPointers	MachO.h	/^      SectionTypeLiteralPointers            = 0x05u, \/\/ S_LITERAL_POINTERS$/;"	e	enum:llvm::MachO::__anon49
SectionTypeModuleInitFunctionPointers	MachO.h	/^      SectionTypeModuleInitFunctionPointers = 0x09u, \/\/ S_MOD_INIT_FUNC_POINTERS$/;"	e	enum:llvm::MachO::__anon49
SectionTypeModuleTermFunctionPointers	MachO.h	/^      SectionTypeModuleTermFunctionPointers = 0x0au, \/\/ S_MOD_TERM_FUNC_POINTERS$/;"	e	enum:llvm::MachO::__anon49
SectionTypeNonLazySymbolPointers	MachO.h	/^      SectionTypeNonLazySymbolPointers      = 0x06u, \/\/ S_NON_LAZY_SYMBOL_POINTERS$/;"	e	enum:llvm::MachO::__anon49
SectionTypeRegular	MachO.h	/^      SectionTypeRegular                    = 0x00u, \/\/ S_REGULAR$/;"	e	enum:llvm::MachO::__anon49
SectionTypeSymbolStubs	MachO.h	/^      SectionTypeSymbolStubs                = 0x08u, \/\/ S_SYMBOL_STUBS$/;"	e	enum:llvm::MachO::__anon49
SectionTypeZeroFill	MachO.h	/^      SectionTypeZeroFill                   = 0x01u, \/\/ S_ZEROFILL$/;"	e	enum:llvm::MachO::__anon49
SectionTypeZeroFillLarge	MachO.h	/^      SectionTypeZeroFillLarge              = 0x0cu, \/\/ S_GB_ZEROFILL$/;"	e	enum:llvm::MachO::__anon49
SegmentCommandFlagBitFixedVMLibrary	MachO.h	/^      SegmentCommandFlagBitFixedVMLibrary     = 0x2u, \/\/ SG_FVMLIB$/;"	e	enum:llvm::MachO::__anon49
SegmentCommandFlagBitHighVM	MachO.h	/^      SegmentCommandFlagBitHighVM             = 0x1u, \/\/ SG_HIGHVM$/;"	e	enum:llvm::MachO::__anon49
SegmentCommandFlagBitNoRelocations	MachO.h	/^      SegmentCommandFlagBitNoRelocations      = 0x4u, \/\/ SG_NORELOC$/;"	e	enum:llvm::MachO::__anon49
SegmentCommandFlagBitProtectedVersion1	MachO.h	/^      SegmentCommandFlagBitProtectedVersion1  = 0x8u, \/\/ SG_PROTECTED_VERSION_1$/;"	e	enum:llvm::MachO::__anon49
SelectClass_match	PatternMatch.h	/^  SelectClass_match(const Cond_t &Cond, const LHS_t &LHS,$/;"	f	struct:llvm::PatternMatch::SelectClass_match
SelectClass_match	PatternMatch.h	/^struct SelectClass_match {$/;"	s	namespace:llvm::PatternMatch
Selection	COFF.h	/^    uint8_t  Selection;$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
Self	CFG.h	/^  typedef PredIterator<Ptr, USE_iterator> Self;$/;"	t	class:llvm::PredIterator
Self	CFG.h	/^  typedef SuccIterator<Term_, BB_> Self;$/;"	t	class:llvm::SuccIterator
Sentinel	Recycler.h	/^  mutable RecyclerStruct Sentinel;$/;"	m	struct:llvm::ilist_traits
SeqType	YAMLParser.h	/^  SequenceType SeqType;$/;"	m	class:llvm::yaml::SequenceNode
SequenceNode	YAMLParser.h	/^  SequenceNode(OwningPtr<Document> &D, StringRef Anchor, SequenceType ST)$/;"	f	class:llvm::yaml::SequenceNode
SequenceNode	YAMLParser.h	/^class SequenceNode : public Node {$/;"	c	namespace:llvm::yaml
SequenceType	YAMLParser.h	/^  enum SequenceType {$/;"	g	class:llvm::yaml::SequenceNode
SetBuffer	raw_ostream.h	/^  void SetBuffer(char *BufferStart, size_t Size) {$/;"	f	class:llvm::raw_ostream
SetBufferSize	raw_ostream.h	/^  void SetBufferSize(size_t Size) {$/;"	f	class:llvm::raw_ostream
SetUnbuffered	raw_ostream.h	/^  void SetUnbuffered() {$/;"	f	class:llvm::raw_ostream
SetUseAtomicWrites	raw_ostream.h	/^  void SetUseAtomicWrites(bool Value) {$/;"	f	class:llvm::raw_fd_ostream
ShortDesc	TargetRegistry.h	/^    const char *ShortDesc;$/;"	m	class:llvm::Target
ShouldClose	raw_ostream.h	/^  bool ShouldClose;$/;"	m	class:llvm::raw_fd_ostream
Sig1	COFF.h	/^    uint16_t Sig1; \/\/\/< Must be IMAGE_FILE_MACHINE_UNKNOWN (0).$/;"	m	struct:llvm::COFF::ImportHeader
Sig2	COFF.h	/^    uint16_t Sig2; \/\/\/< Must be 0xFFFF.$/;"	m	struct:llvm::COFF::ImportHeader
SignExtend32	MathExtras.h	/^inline int32_t SignExtend32(uint32_t X, unsigned B) {$/;"	f	namespace:llvm
SignExtend32	MathExtras.h	/^template <unsigned B> inline int32_t SignExtend32(uint32_t x) {$/;"	f	namespace:llvm
SignExtend64	MathExtras.h	/^inline int64_t SignExtend64(uint64_t X, unsigned B) {$/;"	f	namespace:llvm
SignExtend64	MathExtras.h	/^template <unsigned B> inline int64_t SignExtend64(uint64_t x) {$/;"	f	namespace:llvm
Signature	COFF.h	/^    uint32_t Signature;$/;"	m	struct:llvm::COFF::PEHeader
SimpleRegistryEntry	Registry.h	/^    SimpleRegistryEntry(const char *N, const char *D, T *(*C)())$/;"	f	class:llvm::SimpleRegistryEntry
SimpleRegistryEntry	Registry.h	/^  class SimpleRegistryEntry {$/;"	c	namespace:llvm
SimpleType	Casting.h	/^  typedef       From SimpleType;        \/\/ The real type this represents...$/;"	t	struct:llvm::simplify_type
SimpleType	Casting.h	/^  typedef const From SimpleType;$/;"	t	struct:llvm::simplify_type
SimpleType	ValueHandle.h	/^  typedef Value* SimpleType;$/;"	t	struct:llvm::simplify_type
Sink	CommandLine.h	/^  Sink               = 0x04   \/\/ Should this cl::list eat all unknown options?$/;"	e	enum:llvm::cl::MiscFlags
Size	Allocator.h	/^  size_t Size;$/;"	m	class:llvm::MemSlab
Size	COFF.h	/^    uint32_t Size;$/;"	m	struct:llvm::COFF::DataDirectory
Size	FileSystem.h	/^  uint64_t Size;$/;"	m	class:llvm::sys::fs::mapped_file_region
Size	Memory.h	/^    size_t Size;      \/\/\/< Size, in bytes of the memory area$/;"	m	class:llvm::sys::MemoryBlock
SizeOfCode	COFF.h	/^    uint32_t SizeOfCode;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfData	COFF.h	/^    uint32_t SizeOfData;$/;"	m	struct:llvm::COFF::ImportHeader
SizeOfHeaders	COFF.h	/^    uint32_t SizeOfHeaders;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfHeapCommit	COFF.h	/^    uint64_t SizeOfHeapCommit;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfHeapReserve	COFF.h	/^    uint64_t SizeOfHeapReserve;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfImage	COFF.h	/^    uint32_t SizeOfImage;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfInitializedData	COFF.h	/^    uint32_t SizeOfInitializedData;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfOptionalHeader	COFF.h	/^    uint16_t SizeOfOptionalHeader;$/;"	m	struct:llvm::COFF::header
SizeOfRawData	COFF.h	/^    uint32_t SizeOfRawData;$/;"	m	struct:llvm::COFF::section
SizeOfStackCommit	COFF.h	/^    uint64_t SizeOfStackCommit;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfStackReserve	COFF.h	/^    uint64_t SizeOfStackReserve;$/;"	m	struct:llvm::COFF::PEHeader
SizeOfUninitializedData	COFF.h	/^    uint32_t SizeOfUninitializedData;$/;"	m	struct:llvm::COFF::PEHeader
SizeThreshold	Allocator.h	/^  size_t SizeThreshold;$/;"	m	class:llvm::BumpPtrAllocator
SizerImpl	AlignOf.h	/^  union SizerImpl {$/;"	u	union:llvm::AlignedCharArrayUnion
SlabAllocator	Allocator.h	/^class SlabAllocator {$/;"	c	namespace:llvm
SlabSize	Allocator.h	/^  size_t SlabSize;$/;"	m	class:llvm::BumpPtrAllocator
Small	CodeGen.h	/^    enum Model { Default, JITDefault, Small, Kernel, Medium, Large };$/;"	e	enum:llvm::CodeModel::Model
SmartMutex	Mutex.h	/^      explicit SmartMutex(bool rec = true) :$/;"	f	class:llvm::sys::SmartMutex
SmartMutex	Mutex.h	/^    class SmartMutex : public MutexImpl {$/;"	c	namespace:llvm::sys
SmartRWMutex	RWMutex.h	/^      explicit SmartRWMutex() : RWMutexImpl(), readers(0), writers(0) { }$/;"	f	class:llvm::sys::SmartRWMutex
SmartRWMutex	RWMutex.h	/^    class SmartRWMutex : public RWMutexImpl {$/;"	c	namespace:llvm::sys
SmartScopedLock	Mutex.h	/^      SmartScopedLock(SmartMutex<mt_only>& m) : mtx(m) {$/;"	f	class:llvm::sys::SmartScopedLock
SmartScopedLock	Mutex.h	/^    class SmartScopedLock  {$/;"	c	namespace:llvm::sys
SmartScopedReader	RWMutex.h	/^      explicit SmartScopedReader(SmartRWMutex<mt_only>& m) : mutex(m) {$/;"	f	struct:llvm::sys::SmartScopedReader
SmartScopedReader	RWMutex.h	/^    struct SmartScopedReader {$/;"	s	namespace:llvm::sys
SmartScopedWriter	RWMutex.h	/^      explicit SmartScopedWriter(SmartRWMutex<mt_only>& m) : mutex(m) {$/;"	f	struct:llvm::sys::SmartScopedWriter
SmartScopedWriter	RWMutex.h	/^    struct SmartScopedWriter {$/;"	s	namespace:llvm::sys
Sorted	IntegersSubsetMapping.h	/^  bool Sorted;$/;"	m	class:llvm::IntegersSubsetMapping
SourceMgr	SourceMgr.h	/^  SourceMgr() : LineNoCache(0), DiagHandler(0), DiagContext(0) {}$/;"	f	class:llvm::SourceMgr
SourceMgr	SourceMgr.h	/^class SourceMgr {$/;"	c	namespace:llvm
SourceRange	YAMLParser.h	/^  SMRange SourceRange;$/;"	m	class:llvm::yaml::Node
SpecificBumpPtrAllocator	Allocator.h	/^  SpecificBumpPtrAllocator(size_t size = 4096, size_t threshold = 4096,$/;"	f	class:llvm::SpecificBumpPtrAllocator
SpecificBumpPtrAllocator	Allocator.h	/^class SpecificBumpPtrAllocator {$/;"	c	namespace:llvm
SrcBuffer	SourceMgr.h	/^  struct SrcBuffer {$/;"	s	class:llvm::SourceMgr
StabAlternateEntry	MachO.h	/^      StabAlternateEntry        = 0xA4u,  \/\/ N_ENTRY$/;"	e	enum:llvm::MachO::__anon49
StabBeginCommon	MachO.h	/^      StabBeginCommon           = 0xE2u,  \/\/ N_BCOMM$/;"	e	enum:llvm::MachO::__anon49
StabBeginIncludeFileName	MachO.h	/^      StabBeginIncludeFileName  = 0x82u,  \/\/ N_BINCL$/;"	e	enum:llvm::MachO::__anon49
StabBeginSymbol	MachO.h	/^      StabBeginSymbol           = 0x2Eu,  \/\/ N_BNSYM$/;"	e	enum:llvm::MachO::__anon49
StabCompilerOptLevel	MachO.h	/^      StabCompilerOptLevel      = 0x8Au,  \/\/ N_OLEVEL$/;"	e	enum:llvm::MachO::__anon49
StabCompilerParameters	MachO.h	/^      StabCompilerParameters    = 0x86u,  \/\/ N_PARAMS$/;"	e	enum:llvm::MachO::__anon49
StabCompilerVersion	MachO.h	/^      StabCompilerVersion       = 0x88u,  \/\/ N_VERSION$/;"	e	enum:llvm::MachO::__anon49
StabDeletedIncludeFile	MachO.h	/^      StabDeletedIncludeFile    = 0xC2u,  \/\/ N_EXCL$/;"	e	enum:llvm::MachO::__anon49
StabEndCommon	MachO.h	/^      StabEndCommon             = 0xE4u,  \/\/ N_ECOMM$/;"	e	enum:llvm::MachO::__anon49
StabEndCommonLocal	MachO.h	/^      StabEndCommonLocal        = 0xE8u,  \/\/ N_ECOML$/;"	e	enum:llvm::MachO::__anon49
StabEndIncludeFile	MachO.h	/^      StabEndIncludeFile        = 0xA2u,  \/\/ N_EINCL$/;"	e	enum:llvm::MachO::__anon49
StabEndSymbol	MachO.h	/^      StabEndSymbol             = 0x4Eu,  \/\/ N_ENSYM$/;"	e	enum:llvm::MachO::__anon49
StabFunction	MachO.h	/^      StabFunction              = 0x24u,  \/\/ N_FUN$/;"	e	enum:llvm::MachO::__anon49
StabFunctionName	MachO.h	/^      StabFunctionName          = 0x22u,  \/\/ N_FNAME$/;"	e	enum:llvm::MachO::__anon49
StabGlobalSymbol	MachO.h	/^      StabGlobalSymbol          = 0x20u,  \/\/ N_GSYM$/;"	e	enum:llvm::MachO::__anon49
StabIncludeFileName	MachO.h	/^      StabIncludeFileName       = 0x84u,  \/\/ N_SOL$/;"	e	enum:llvm::MachO::__anon49
StabLeftBracket	MachO.h	/^      StabLeftBracket           = 0xC0u,  \/\/ N_LBRAC$/;"	e	enum:llvm::MachO::__anon49
StabLength	MachO.h	/^      StabLength                = 0xFEu   \/\/ N_LENG$/;"	e	enum:llvm::MachO::__anon49
StabLocalCommon	MachO.h	/^      StabLocalCommon           = 0x28u,  \/\/ N_LCSYM$/;"	e	enum:llvm::MachO::__anon49
StabLocalSymbol	MachO.h	/^      StabLocalSymbol           = 0x80u,  \/\/ N_LSYM$/;"	e	enum:llvm::MachO::__anon49
StabObjectFileName	MachO.h	/^      StabObjectFileName        = 0x66u,  \/\/ N_OSO$/;"	e	enum:llvm::MachO::__anon49
StabParameter	MachO.h	/^      StabParameter             = 0xA0u,  \/\/ N_PSYM$/;"	e	enum:llvm::MachO::__anon49
StabRegisterSymbol	MachO.h	/^      StabRegisterSymbol        = 0x40u,  \/\/ N_RSYM$/;"	e	enum:llvm::MachO::__anon49
StabRightBracket	MachO.h	/^      StabRightBracket          = 0xE0u,  \/\/ N_RBRAC$/;"	e	enum:llvm::MachO::__anon49
StabSourceFileName	MachO.h	/^      StabSourceFileName        = 0x64u,  \/\/ N_SO$/;"	e	enum:llvm::MachO::__anon49
StabSourceFileOptions	MachO.h	/^      StabSourceFileOptions     = 0x3Cu,  \/\/ N_OPT$/;"	e	enum:llvm::MachO::__anon49
StabSourceLine	MachO.h	/^      StabSourceLine            = 0x44u,  \/\/ N_SLINE$/;"	e	enum:llvm::MachO::__anon49
StabStaticSymbol	MachO.h	/^      StabStaticSymbol          = 0x26u,  \/\/ N_STSYM$/;"	e	enum:llvm::MachO::__anon49
StabStructureType	MachO.h	/^      StabStructureType         = 0x60u,  \/\/ N_SSYM$/;"	e	enum:llvm::MachO::__anon49
Stack	FileSystem.h	/^    std::stack<directory_iterator, std::vector<directory_iterator> > Stack;$/;"	m	struct:llvm::sys::fs::detail::RecDirIterState
Start	SMLoc.h	/^  SMLoc Start, End;$/;"	m	class:llvm::SMRange
Started	Timer.h	/^  bool Started;          \/\/ Has this time variable ever been started?$/;"	m	class:llvm::Timer
State	FileSystem.h	/^  IntrusiveRefCntPtr<detail::DirIterState> State;$/;"	m	class:llvm::sys::fs::directory_iterator
State	FileSystem.h	/^  IntrusiveRefCntPtr<detail::RecDirIterState> State;$/;"	m	class:llvm::sys::fs::recursive_directory_iterator
State	IntegersSubsetMapping.h	/^    DiffProcessState State;$/;"	m	class:llvm::IntegersSubsetMapping::DiffStateMachine
Static	CodeGen.h	/^    enum Model { Default, Static, PIC_, DynamicNoPIC };$/;"	e	enum:llvm::Reloc::Model
Status	FileSystem.h	/^  mutable file_status Status;$/;"	m	class:llvm::sys::fs::directory_entry
StorageClass	COFF.h	/^    uint8_t  StorageClass;$/;"	m	struct:llvm::COFF::symbol
Str	PrettyStackTrace.h	/^    const char *Str;$/;"	m	class:llvm::PrettyStackTraceString
Stream	YAMLParser.h	/^class Stream {$/;"	c	namespace:llvm::yaml
StreamableMemoryObject	StreamableMemoryObject.h	/^class StreamableMemoryObject : public MemoryObject {$/;"	c	namespace:llvm
Streamer	StreamableMemoryObject.h	/^  OwningPtr<DataStreamer> Streamer;$/;"	m	class:llvm::StreamingMemoryObject
StreamingMemoryObject	StreamableMemoryObject.h	/^class StreamingMemoryObject : public StreamableMemoryObject {$/;"	c	namespace:llvm
StringPool	StringPool.h	/^  class StringPool {$/;"	c	namespace:llvm
SubPattern	PatternMatch.h	/^  SubPattern_t SubPattern;$/;"	m	struct:llvm::PatternMatch::Exact_match
SubPattern	PatternMatch.h	/^  SubPattern_t SubPattern;$/;"	m	struct:llvm::PatternMatch::OneUse_match
SubRes	IntegersSubset.h	/^    typedef std::pair<self, self> SubRes;$/;"	t	class:llvm::IntRange
Subsystem	COFF.h	/^    uint16_t Subsystem;$/;"	m	struct:llvm::COFF::PEHeader
SuccIterator	CFG.h	/^  explicit inline SuccIterator(Term_ T) : Term(T), idx(0) {\/\/ begin iterator$/;"	f	class:llvm::SuccIterator
SuccIterator	CFG.h	/^  inline SuccIterator(Term_ T, bool)                       \/\/ end iterator$/;"	f	class:llvm::SuccIterator
SuccIterator	CFG.h	/^class SuccIterator : public std::iterator<std::bidirectional_iterator_tag,$/;"	c	namespace:llvm
SwapByteOrder	SwapByteOrder.h	/^inline          char  SwapByteOrder(char C) { return C; }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline   signed char  SwapByteOrder(signed char C) { return C; }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline   signed int   SwapByteOrder(  signed int   C) { return SwapByteOrder_32(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline   signed long  SwapByteOrder(  signed long  C) { return SwapByteOrder_32(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline   signed long  SwapByteOrder(  signed long  C) { return SwapByteOrder_64(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline   signed short SwapByteOrder(  signed short C) { return SwapByteOrder_16(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline signed long long SwapByteOrder(signed long long C) {$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline unsigned char  SwapByteOrder(unsigned char C) { return C; }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline unsigned int   SwapByteOrder(unsigned int   C) { return SwapByteOrder_32(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline unsigned long  SwapByteOrder(unsigned long  C) { return SwapByteOrder_32(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline unsigned long  SwapByteOrder(unsigned long  C) { return SwapByteOrder_64(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline unsigned long long SwapByteOrder(unsigned long long C) {$/;"	f	namespace:llvm::sys
SwapByteOrder	SwapByteOrder.h	/^inline unsigned short SwapByteOrder(unsigned short C) { return SwapByteOrder_16(C); }$/;"	f	namespace:llvm::sys
SwapByteOrder_16	SwapByteOrder.h	/^inline uint16_t SwapByteOrder_16(uint16_t value) {$/;"	f	namespace:llvm::sys
SwapByteOrder_32	SwapByteOrder.h	/^inline uint32_t SwapByteOrder_32(uint32_t value) {$/;"	f	namespace:llvm::sys
SwapByteOrder_64	SwapByteOrder.h	/^inline uint64_t SwapByteOrder_64(uint64_t value) {$/;"	f	namespace:llvm::sys
SymbolBaseType	COFF.h	/^  enum SymbolBaseType {$/;"	g	namespace:llvm::COFF
SymbolComplexType	COFF.h	/^  enum SymbolComplexType {$/;"	g	namespace:llvm::COFF
SymbolFlags	COFF.h	/^  enum SymbolFlags {$/;"	g	namespace:llvm::COFF
SymbolSectionNumber	COFF.h	/^  enum SymbolSectionNumber {$/;"	g	namespace:llvm::COFF
SymbolSize	COFF.h	/^    SymbolSize     = 18,$/;"	e	enum:llvm::COFF::__anon10
SymbolStorageClass	COFF.h	/^  enum SymbolStorageClass {$/;"	g	namespace:llvm::COFF
SymbolTableIndex	COFF.h	/^    uint32_t SymbolTableIndex;$/;"	m	struct:llvm::COFF::relocation
SystemTime	Timer.h	/^  double SystemTime;     \/\/ System time elapsed$/;"	m	class:llvm::TimeRecord
T	PatternMatch.h	/^  BasicBlock *&T, *&F;$/;"	m	struct:llvm::PatternMatch::brc_match
T	Timer.h	/^  Timer *T;$/;"	m	class:llvm::TimeRegion
TAKE_OWNERSHIP	circular_raw_ostream.h	/^    static const bool TAKE_OWNERSHIP = true;$/;"	m	class:llvm::circular_raw_ostream
TD	TargetFolder.h	/^  const DataLayout *TD;$/;"	m	class:llvm::TargetFolder
TEMPLATE_INSTANTIATION	Compiler.h	140;"	d
TEMPLATE_INSTANTIATION	Compiler.h	143;"	d
TG	Timer.h	/^  TimerGroup *TG;        \/\/ The TimerGroup this Timer is in.$/;"	m	class:llvm::Timer
TLSModel	CodeGen.h	/^  namespace TLSModel {$/;"	n	namespace:llvm
TRAPNO	Solaris.h	38;"	d
TWOPI	GraphWriter.h	/^      TWOPI,$/;"	e	enum:llvm::GraphProgram::Name
TagIndex	COFF.h	/^    uint32_t TagIndex;$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
TagIndex	COFF.h	/^    uint32_t TagIndex;$/;"	m	struct:llvm::COFF::AuxiliaryWeakExternal
Tail	Registry.h	/^    static node *Head, *Tail;$/;"	m	class:llvm::Registry
Tail	Registry.h	/^  typename Registry<T,U>::node *Registry<T,U>::Tail;$/;"	m	class:llvm::Registry
Target	TargetRegistry.h	/^    Target() : AsmStreamerCtorFn(llvm::createAsmStreamer) {}$/;"	f	class:llvm::Target
Target	TargetRegistry.h	/^  class Target {$/;"	c	namespace:llvm
TargetFolder	TargetFolder.h	/^  explicit TargetFolder(const DataLayout *TheTD) : TD(TheTD) {}$/;"	f	class:llvm::TargetFolder
TargetFolder	TargetFolder.h	/^class TargetFolder {$/;"	c	namespace:llvm
TargetMachineCtorFn	TargetRegistry.h	/^    TargetMachineCtorTy TargetMachineCtorFn;$/;"	m	class:llvm::Target
TargetMachineCtorTy	TargetRegistry.h	/^    typedef TargetMachine *(*TargetMachineCtorTy)(const Target &T,$/;"	t	class:llvm::Target
TargetRegistry	TargetRegistry.h	/^  struct TargetRegistry {$/;"	s	namespace:llvm
TempPath	FileOutputBuffer.h	/^  SmallString<128>    TempPath;$/;"	m	class:llvm::FileOutputBuffer
Term	CFG.h	/^  const Term_ Term;$/;"	m	class:llvm::SuccIterator
TheStream	FormattedStream.h	/^    raw_ostream *TheStream;$/;"	m	class:llvm::formatted_raw_ostream
TheStream	circular_raw_ostream.h	/^    raw_ostream *TheStream;$/;"	m	class:llvm::circular_raw_ostream
ThreadLocal	ThreadLocal.h	/^      ThreadLocal() : ThreadLocalImpl() { }$/;"	f	class:llvm::sys::ThreadLocal
ThreadLocal	ThreadLocal.h	/^    class ThreadLocal : public ThreadLocalImpl {$/;"	c	namespace:llvm::sys
ThreadLocalDataTy	ThreadLocal.h	/^      typedef uint64_t ThreadLocalDataTy;$/;"	t	class:llvm::sys::ThreadLocalImpl
ThreadLocalImpl	ThreadLocal.h	/^    class ThreadLocalImpl {$/;"	c	namespace:llvm::sys
Time	Timer.h	/^  TimeRecord Time;$/;"	m	class:llvm::Timer
TimeConversions	TimeValue.h	/^    enum TimeConversions {$/;"	g	class:llvm::sys::TimeValue
TimeDateStamp	COFF.h	/^    uint32_t TimeDateStamp;$/;"	m	struct:llvm::COFF::ImportDirectoryTableEntry
TimeDateStamp	COFF.h	/^    uint32_t TimeDateStamp;$/;"	m	struct:llvm::COFF::ImportHeader
TimeDateStamp	COFF.h	/^    uint32_t TimeDateStamp;$/;"	m	struct:llvm::COFF::header
TimeRecord	Timer.h	/^  TimeRecord() : WallTime(0), UserTime(0), SystemTime(0), MemUsed(0) {}$/;"	f	class:llvm::TimeRecord
TimeRecord	Timer.h	/^class TimeRecord {$/;"	c	namespace:llvm
TimeRegion	Timer.h	/^  explicit TimeRegion(Timer &t) : T(&t) {$/;"	f	class:llvm::TimeRegion
TimeRegion	Timer.h	/^  explicit TimeRegion(Timer *t) : T(t) {$/;"	f	class:llvm::TimeRegion
TimeRegion	Timer.h	/^class TimeRegion {$/;"	c	namespace:llvm
TimeValue	TimeValue.h	/^    explicit TimeValue (SecondsType seconds, NanoSecondsType nanos = 0)$/;"	f	class:llvm::sys::TimeValue
TimeValue	TimeValue.h	/^    explicit TimeValue( double new_time )$/;"	f	class:llvm::sys::TimeValue
TimeValue	TimeValue.h	/^  class TimeValue {$/;"	c	namespace:llvm::sys
Timer	Timer.h	/^  Timer(StringRef N, TimerGroup &tg) : TG(0) { init(N, tg); }$/;"	f	class:llvm::Timer
Timer	Timer.h	/^  Timer(const Timer &RHS) : TG(0) {$/;"	f	class:llvm::Timer
Timer	Timer.h	/^  explicit Timer() : TG(0) {}$/;"	f	class:llvm::Timer
Timer	Timer.h	/^  explicit Timer(StringRef N) : TG(0) { init(N); }$/;"	f	class:llvm::Timer
Timer	Timer.h	/^class Timer {$/;"	c	namespace:llvm
TimerGroup	Timer.h	/^class TimerGroup {$/;"	c	namespace:llvm
TimersToPrint	Timer.h	/^  std::vector<std::pair<TimeRecord, std::string> > TimersToPrint;$/;"	m	class:llvm::TimerGroup
TotalSize	COFF.h	/^    uint32_t TotalSize;$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
Tracking	ValueHandle.h	/^    Tracking,$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
TrackingVH	ValueHandle.h	/^  TrackingVH() : ValueHandleBase(Tracking) {}$/;"	f	class:llvm::TrackingVH
TrackingVH	ValueHandle.h	/^  TrackingVH(ValueTy *P) : ValueHandleBase(Tracking, GetAsValue(P)) {}$/;"	f	class:llvm::TrackingVH
TrackingVH	ValueHandle.h	/^  TrackingVH(const TrackingVH &RHS) : ValueHandleBase(Tracking, RHS) {}$/;"	f	class:llvm::TrackingVH
TrackingVH	ValueHandle.h	/^class TrackingVH : public ValueHandleBase {$/;"	c	namespace:llvm
TripleMatchQualityFn	TargetRegistry.h	/^    TripleMatchQualityFnTy TripleMatchQualityFn;$/;"	m	class:llvm::Target
TripleMatchQualityFnTy	TargetRegistry.h	/^    typedef unsigned (*TripleMatchQualityFnTy)(const std::string &TT);$/;"	t	class:llvm::Target
TsanHappensAfter	Valgrind.h	56;"	d
TsanHappensAfter	Valgrind.h	68;"	d
TsanHappensBefore	Valgrind.h	52;"	d
TsanHappensBefore	Valgrind.h	67;"	d
TsanIgnoreWritesBegin	Valgrind.h	60;"	d
TsanIgnoreWritesBegin	Valgrind.h	69;"	d
TsanIgnoreWritesEnd	Valgrind.h	64;"	d
TsanIgnoreWritesEnd	Valgrind.h	70;"	d
Type	COFF.h	/^    uint16_t Type;$/;"	m	struct:llvm::COFF::relocation
Type	COFF.h	/^    uint16_t Type;$/;"	m	struct:llvm::COFF::symbol
Type	FileSystem.h	/^  file_type Type;$/;"	m	class:llvm::sys::fs::file_status
Type	YAMLParser.h	/^  MappingType Type;$/;"	m	class:llvm::yaml::MappingNode
TypeID	YAMLParser.h	/^  unsigned int TypeID;$/;"	m	class:llvm::yaml::Node
TypeInfo	COFF.h	/^    uint16_t TypeInfo;$/;"	m	struct:llvm::COFF::ImportHeader
UESP	Solaris.h	35;"	d
UNW_ChainInfo	Win64EH.h	/^  UNW_ChainInfo = 0x04$/;"	e	enum:llvm::Win64EH::__anon59
UNW_ExceptionHandler	Win64EH.h	/^  UNW_ExceptionHandler = 0x01,$/;"	e	enum:llvm::Win64EH::__anon59
UNW_TerminateHandler	Win64EH.h	/^  UNW_TerminateHandler = 0x02,$/;"	e	enum:llvm::Win64EH::__anon59
UOP_AllocLarge	Win64EH.h	/^  UOP_AllocLarge,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_AllocSmall	Win64EH.h	/^  UOP_AllocSmall,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_PushMachFrame	Win64EH.h	/^  UOP_PushMachFrame$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_PushNonVol	Win64EH.h	/^  UOP_PushNonVol = 0,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SaveNonVol	Win64EH.h	/^  UOP_SaveNonVol,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SaveNonVolBig	Win64EH.h	/^  UOP_SaveNonVolBig,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SaveXMM128	Win64EH.h	/^  UOP_SaveXMM128 = 8,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SaveXMM128Big	Win64EH.h	/^  UOP_SaveXMM128Big,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
UOP_SetFPReg	Win64EH.h	/^  UOP_SetFPReg,$/;"	e	enum:llvm::Win64EH::UnwindOpcodes
Unbuffered	raw_ostream.h	/^    Unbuffered = 0,$/;"	e	enum:llvm::raw_ostream::BufferKind
UnderlyingT	type_traits.h	/^  typedef typename remove_reference<T>::type UnderlyingT;$/;"	t	class:llvm::is_integral_or_enum
UniqueLockFileName	LockFileManager.h	/^  SmallString<128> UniqueLockFileName;$/;"	m	class:llvm::LockFileManager
UniversalMagic	MachO.h	/^      UniversalMagic        = 0xCAFEBABEu, \/\/ FAT_MAGIC$/;"	e	enum:llvm::MachO::__anon49
UniversalMagicSwapped	MachO.h	/^      UniversalMagicSwapped = 0xBEBAFECAu, \/\/ FAT_CIGAM$/;"	e	enum:llvm::MachO::__anon49
Unknown_FileType	PathV1.h	/^    Unknown_FileType = 0,              \/\/\/< Unrecognized file$/;"	e	enum:llvm::sys::LLVMFileType
UnwindCode	Win64EH.h	/^union UnwindCode {$/;"	u	namespace:llvm::Win64EH
UnwindInfo	Win64EH.h	/^struct UnwindInfo {$/;"	s	namespace:llvm::Win64EH
UnwindOpcodes	Win64EH.h	/^enum UnwindOpcodes {$/;"	g	namespace:llvm::Win64EH
Upper	ConstantRange.h	/^  APInt Lower, Upper;$/;"	m	class:llvm::ConstantRange
UseAtomicWrites	raw_ostream.h	/^  bool UseAtomicWrites;$/;"	m	class:llvm::raw_fd_ostream
UsedBytesInTheLastPage	COFF.h	/^    uint16_t UsedBytesInTheLastPage;$/;"	m	struct:llvm::COFF::DOSHeader
UserTime	Timer.h	/^  double UserTime;       \/\/ User time elapsed$/;"	m	class:llvm::TimeRecord
V	CommandLine.h	/^    OptionValue<DataType> V;$/;"	m	class:llvm::cl::parser::OptionInfo
VERSYM_HIDDEN	ELF.h	/^  VERSYM_HIDDEN  = 0x8000  \/\/ Hidden bit (non-default version)$/;"	e	enum:llvm::ELF::__anon46
VERSYM_VERSION	ELF.h	/^  VERSYM_VERSION = 0x7fff, \/\/ Version Index mask$/;"	e	enum:llvm::ELF::__anon46
VER_DEF_CURRENT	ELF.h	/^  VER_DEF_CURRENT = 1$/;"	e	enum:llvm::ELF::__anon44
VER_DEF_NONE	ELF.h	/^  VER_DEF_NONE    = 0,$/;"	e	enum:llvm::ELF::__anon44
VER_FLG_BASE	ELF.h	/^  VER_FLG_BASE = 0x1,$/;"	e	enum:llvm::ELF::__anon45
VER_FLG_INFO	ELF.h	/^  VER_FLG_INFO = 0x4$/;"	e	enum:llvm::ELF::__anon45
VER_FLG_WEAK	ELF.h	/^  VER_FLG_WEAK = 0x2,$/;"	e	enum:llvm::ELF::__anon45
VER_NDX_GLOBAL	ELF.h	/^  VER_NDX_GLOBAL = 1,      \/\/ Unversioned global symbol$/;"	e	enum:llvm::ELF::__anon46
VER_NDX_LOCAL	ELF.h	/^  VER_NDX_LOCAL  = 0,      \/\/ Unversioned local symbol$/;"	e	enum:llvm::ELF::__anon46
VER_NEED_CURRENT	ELF.h	/^  VER_NEED_CURRENT = 1$/;"	e	enum:llvm::ELF::__anon47
VER_NEED_NONE	ELF.h	/^  VER_NEED_NONE = 0,$/;"	e	enum:llvm::ELF::__anon47
VP	ValueHandle.h	/^  PointerIntPair<Value*, 2> VP;$/;"	m	class:llvm::ValueHandleBase
VR	PatternMatch.h	/^  Class *&VR;$/;"	m	struct:llvm::PatternMatch::bind_ty
VR	PatternMatch.h	/^  uint64_t &VR;$/;"	m	struct:llvm::PatternMatch::bind_const_intval_ty
Val	Format.h	/^  T Val;$/;"	m	class:llvm::format_object1
Val	PatternMatch.h	/^  const Value *Val;$/;"	m	struct:llvm::PatternMatch::specificval_ty
Val	Registry.h	/^      const entry& Val;$/;"	m	class:llvm::Registry::node
Val1	Format.h	/^  T1 Val1;$/;"	m	class:llvm::format_object2
Val1	Format.h	/^  T1 Val1;$/;"	m	class:llvm::format_object3
Val1	Format.h	/^  T1 Val1;$/;"	m	class:llvm::format_object4
Val1	Format.h	/^  T1 Val1;$/;"	m	class:llvm::format_object5
Val2	Format.h	/^  T2 Val2;$/;"	m	class:llvm::format_object2
Val2	Format.h	/^  T2 Val2;$/;"	m	class:llvm::format_object3
Val2	Format.h	/^  T2 Val2;$/;"	m	class:llvm::format_object4
Val2	Format.h	/^  T2 Val2;$/;"	m	class:llvm::format_object5
Val3	Format.h	/^  T3 Val3;$/;"	m	class:llvm::format_object3
Val3	Format.h	/^  T3 Val3;$/;"	m	class:llvm::format_object4
Val3	Format.h	/^  T3 Val3;$/;"	m	class:llvm::format_object5
Val4	Format.h	/^  T4 Val4;$/;"	m	class:llvm::format_object4
Val4	Format.h	/^  T4 Val4;$/;"	m	class:llvm::format_object5
Val5	Format.h	/^  T5 Val5;$/;"	m	class:llvm::format_object5
ValLessThan	PassNameParser.h	/^  static int ValLessThan(const void *VT1, const void *VT2) {$/;"	f	class:llvm::PassNameParser
Valid	CommandLine.h	/^  bool Valid;$/;"	m	class:llvm::cl::OptionValueCopy
Value	COFF.h	/^    uint32_t Value;$/;"	m	struct:llvm::COFF::symbol
Value	CommandLine.h	/^  DataType Value;$/;"	m	class:llvm::cl::OptionValueCopy
Value	CommandLine.h	/^  DataType Value;$/;"	m	class:llvm::cl::opt_storage
Value	Endian.h	/^  uint8_t Value[sizeof(value_type)];$/;"	m	class:llvm::support::detail::packed_endian_specific_integral
Value	Endian.h	/^  value_type Value;$/;"	m	class:llvm::support::detail::packed_endian_specific_integral
Value	YAMLParser.h	/^  Node *Value;$/;"	m	class:llvm::yaml::KeyValueNode
Value	YAMLParser.h	/^  StringRef Value;$/;"	m	class:llvm::yaml::ScalarNode
ValueDisallowed	CommandLine.h	/^  ValueDisallowed = 0x03       \/\/ A value may not be specified (for flags)$/;"	e	enum:llvm::cl::ValueExpected
ValueExpected	CommandLine.h	/^enum ValueExpected {           \/\/ Is a value required for the option?$/;"	g	namespace:llvm::cl
ValueHandleBase	ValueHandle.h	/^  ValueHandleBase(HandleBaseKind Kind, Value *V)$/;"	f	class:llvm::ValueHandleBase
ValueHandleBase	ValueHandle.h	/^  ValueHandleBase(HandleBaseKind Kind, const ValueHandleBase &RHS)$/;"	f	class:llvm::ValueHandleBase
ValueHandleBase	ValueHandle.h	/^  explicit ValueHandleBase(HandleBaseKind Kind)$/;"	f	class:llvm::ValueHandleBase
ValueHandleBase	ValueHandle.h	/^class ValueHandleBase {$/;"	c	namespace:llvm
ValueOptional	CommandLine.h	/^  ValueOptional   = 0x01,      \/\/ The value can appear... or not$/;"	e	enum:llvm::cl::ValueExpected
ValueRequired	CommandLine.h	/^  ValueRequired   = 0x02,      \/\/ The value is required to appear!$/;"	e	enum:llvm::cl::ValueExpected
ValueStr	CommandLine.h	/^  const char *ValueStr;   \/\/ String describing what the value of this option is$/;"	m	class:llvm::cl::Option
Values	CommandLine.h	/^  SmallVector<OptionInfo, 8> Values;$/;"	m	class:llvm::cl::parser
Values	CommandLine.h	/^  SmallVector<std::pair<const char *, std::pair<int, const char *> >,4> Values;$/;"	m	class:llvm::cl::ValuesClass
ValuesClass	CommandLine.h	/^  ValuesClass(const char *EnumName, DataType Val, const char *Desc,$/;"	f	class:llvm::cl::ValuesClass
ValuesClass	CommandLine.h	/^class ValuesClass {$/;"	c	namespace:llvm::cl
Version	COFF.h	/^    uint16_t Version;$/;"	m	struct:llvm::COFF::ImportHeader
ViewGraph	GraphWriter.h	/^void ViewGraph(const GraphType &G, const Twine &Name,$/;"	f	namespace:llvm
VirtualAddress	COFF.h	/^    uint32_t VirtualAddress;$/;"	m	struct:llvm::COFF::relocation
VirtualAddress	COFF.h	/^    uint32_t VirtualAddress;$/;"	m	struct:llvm::COFF::section
VirtualSize	COFF.h	/^    uint32_t VirtualSize;$/;"	m	struct:llvm::COFF::section
WHITE	raw_ostream.h	/^    WHITE,$/;"	e	enum:llvm::raw_ostream::Colors
WallTime	Timer.h	/^  double WallTime;       \/\/ Wall clock time elapsed in seconds$/;"	m	class:llvm::TimeRecord
WasPreviousTokenFlowEntry	YAMLParser.h	/^  bool WasPreviousTokenFlowEntry;$/;"	m	class:llvm::yaml::SequenceNode
Weak	ValueHandle.h	/^    Weak$/;"	e	enum:llvm::ValueHandleBase::HandleBaseKind
WeakExternal	COFF.h	/^    AuxiliaryWeakExternal       WeakExternal;$/;"	m	union:llvm::COFF::Auxiliary
WeakExternalCharacteristics	COFF.h	/^  enum WeakExternalCharacteristics {$/;"	g	namespace:llvm::COFF
WeakVH	ValueHandle.h	/^  WeakVH() : ValueHandleBase(Weak) {}$/;"	f	class:llvm::WeakVH
WeakVH	ValueHandle.h	/^  WeakVH(Value *P) : ValueHandleBase(Weak, P) {}$/;"	f	class:llvm::WeakVH
WeakVH	ValueHandle.h	/^  WeakVH(const WeakVH &RHS)$/;"	f	class:llvm::WeakVH
WeakVH	ValueHandle.h	/^class WeakVH : public ValueHandleBase {$/;"	c	namespace:llvm
Weight	IntegersSubsetMapping.h	/^    unsigned Weight;$/;"	m	struct:llvm::IntegersSubsetMapping::RangeEx
Win32VersionValue	COFF.h	/^    uint32_t Win32VersionValue;$/;"	m	struct:llvm::COFF::PEHeader
Win32ZeroTime	TimeValue.h	/^    static const TimeValue Win32ZeroTime;$/;"	m	class:llvm::sys::TimeValue
Win64EH	Win64EH.h	/^namespace Win64EH {$/;"	n	namespace:llvm
WindowsSubsystem	COFF.h	/^  enum WindowsSubsystem {$/;"	g	namespace:llvm::COFF
WrapperType	CommandLine.h	/^  typedef DataType WrapperType;$/;"	t	struct:llvm::cl::OptionValueBase
WrapperType	CommandLine.h	/^  typedef OptionValue<DataType> WrapperType;$/;"	t	struct:llvm::cl::OptionValueBase
WrapperType	CommandLine.h	/^  typedef StringRef WrapperType;$/;"	t	struct:llvm::cl::OptionValue
WrapperType	CommandLine.h	/^  typedef cl::boolOrDefault WrapperType;$/;"	t	struct:llvm::cl::OptionValue
WriteGraph	GraphWriter.h	/^raw_ostream &WriteGraph(raw_ostream &O, const GraphType &G,$/;"	f	namespace:llvm
WriteGraph	GraphWriter.h	/^sys::Path WriteGraph(const GraphType &G, const Twine &Name,$/;"	f	namespace:llvm
X	SaveAndRestore.h	/^  T& X;$/;"	m	struct:llvm::SaveAndRestore
X	SaveAndRestore.h	/^  bool& X;$/;"	m	struct:llvm::SaveOr
XCORE_SHF_CP_SECTION	ELF.h	/^  XCORE_SHF_CP_SECTION = 0x800U,$/;"	e	enum:llvm::ELF::__anon31
XCORE_SHF_DP_SECTION	ELF.h	/^  XCORE_SHF_DP_SECTION = 0x1000U,$/;"	e	enum:llvm::ELF::__anon31
YELLOW	raw_ostream.h	/^    YELLOW,$/;"	e	enum:llvm::raw_ostream::Colors
ZeroOrMore	CommandLine.h	/^  ZeroOrMore      = 0x01,      \/\/ Zero or more occurrences allowed$/;"	e	enum:llvm::cl::NumOccurrencesFlag
ZeroTime	TimeValue.h	/^    static const TimeValue ZeroTime;$/;"	m	class:llvm::sys::TimeValue
_	FileSystem.h	/^  enum _ {$/;"	g	struct:llvm::sys::fs::copy_option
_	FileSystem.h	/^  enum _ {$/;"	g	struct:llvm::sys::fs::file_magic
_	FileSystem.h	/^  enum _ {$/;"	g	struct:llvm::sys::fs::file_type
_	system_error.h	/^enum _ {$/;"	g	struct:llvm::errc
_	system_error.h	/^enum _ {$/;"	g	struct:llvm::windows_error
__has_feature	Compiler.h	19;"	d
__has_feature	type_traits.h	217;"	d
__has_feature	type_traits.h	26;"	d
_cat_	system_error.h	/^  const error_category* _cat_;$/;"	m	class:llvm::error_code
_cat_	system_error.h	/^  const error_category* _cat_;$/;"	m	class:llvm::error_condition
_do_message	system_error.h	/^class _do_message : public error_category$/;"	c	namespace:llvm
_val_	system_error.h	/^  int _val_;$/;"	m	class:llvm::error_code
_val_	system_error.h	/^  int _val_;$/;"	m	class:llvm::error_condition
abs64	MathExtras.h	/^inline int64_t abs64(int64_t x) {$/;"	f	namespace:llvm
access_denied	system_error.h	/^  access_denied           = 5, \/\/ ERROR_ACCESS_DENIED,$/;"	e	enum:llvm::windows_error::_
acquire	Mutex.h	/^      bool acquire() {$/;"	f	class:llvm::sys::SmartMutex
acquired	Mutex.h	/^      unsigned acquired;$/;"	m	class:llvm::sys::SmartMutex
add	GCOV.h	/^  void add(uint32_t N) { Lines.push_back(N); }$/;"	f	class:llvm::GCOVLines
add	IntegersSubsetMapping.h	/^  void add(const IntTy &C, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	IntegersSubsetMapping.h	/^  void add(const IntTy &Low, const IntTy &High, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	IntegersSubsetMapping.h	/^  void add(const IntegersSubsetTy &CRS, SuccessorClass *S = 0,$/;"	f	class:llvm::IntegersSubsetMapping
add	IntegersSubsetMapping.h	/^  void add(const RangeEx &R, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	IntegersSubsetMapping.h	/^  void add(const RangeTy &R, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	IntegersSubsetMapping.h	/^  void add(const RangesCollection& RHS, SuccessorClass *S = 0) {$/;"	f	class:llvm::IntegersSubsetMapping
add	IntegersSubsetMapping.h	/^  void add(self& RHS) {$/;"	f	class:llvm::IntegersSubsetMapping
add	IntegersSubsetMapping.h	/^  void add(self& RHS, SuccessorClass *S) {$/;"	f	class:llvm::IntegersSubsetMapping
addCount	GCOV.h	/^  void addCount(uint64_t N) { Counter = N; }$/;"	f	class:llvm::GCOVBlock
addCustomGraphFeatures	DOTGraphTraits.h	/^  static void addCustomGraphFeatures(const GraphType &, GraphWriter &) {}$/;"	f	struct:llvm::DefaultDOTGraphTraits
addEdge	GCOV.h	/^  void addEdge(uint32_t N) { Edges.push_back(N); }$/;"	f	class:llvm::GCOVBlock
addGarbageObject	LeakDetector.h	/^  static void addGarbageObject(const Value *Object) {$/;"	f	struct:llvm::LeakDetector
addGarbageObject	LeakDetector.h	/^  static void addGarbageObject(void *Object) {$/;"	f	struct:llvm::LeakDetector
addLiteralOption	CommandLine.h	/^  void addLiteralOption(const char *Name, const DT &V, const char *HelpStr) {$/;"	f	class:llvm::cl::parser
addValue	CommandLine.h	/^  void addValue(const T &V) { std::vector<DataType>::push_back(V); }$/;"	f	class:llvm::cl::list_storage
addValue	CommandLine.h	/^  void addValue(const T &V) {$/;"	f	class:llvm::cl::bits_storage
addValue	CommandLine.h	/^  void addValue(const T &V) {$/;"	f	class:llvm::cl::list_storage
add_perms	FileSystem.h	/^  add_perms       = 0x1000,$/;"	e	enum:llvm::sys::fs::perms
addr	MachO.h	/^      uint32_t addr;$/;"	m	struct:llvm::MachO::section
addr	MachO.h	/^      uint64_t addr;$/;"	m	struct:llvm::MachO::section_64
address_family_not_supported	system_error.h	/^  address_family_not_supported        = EAFNOSUPPORT,$/;"	e	enum:llvm::errc::_
address_in_use	system_error.h	/^  address_in_use                      = EADDRINUSE,$/;"	e	enum:llvm::errc::_
address_not_available	system_error.h	/^  address_not_available               = EADDRNOTAVAIL,$/;"	e	enum:llvm::errc::_
advancePastNonTerminators	CFG.h	/^  inline void advancePastNonTerminators() {$/;"	f	class:llvm::PredIterator
advanceToNextBB	InstIterator.h	/^  inline void advanceToNextBB() {$/;"	f	class:llvm::InstIterator
alias	CommandLine.h	/^  alias(const M0t &M0, const M1t &M1) : Option(Optional, Hidden), AliasFor(0) {$/;"	f	class:llvm::cl::alias
alias	CommandLine.h	/^  alias(const M0t &M0, const M1t &M1, const M2t &M2)$/;"	f	class:llvm::cl::alias
alias	CommandLine.h	/^  alias(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3)$/;"	f	class:llvm::cl::alias
alias	CommandLine.h	/^  explicit alias(const M0t &M0) : Option(Optional, Hidden), AliasFor(0) {$/;"	f	class:llvm::cl::alias
alias	CommandLine.h	/^class alias : public Option {$/;"	c	namespace:llvm::cl
aliasopt	CommandLine.h	/^  explicit aliasopt(Option &O) : Opt(O) {}$/;"	f	struct:llvm::cl::aliasopt
aliasopt	CommandLine.h	/^struct aliasopt {$/;"	s	namespace:llvm::cl
align	MachO.h	/^      uint32_t align;$/;"	m	struct:llvm::MachO::fat_arch
align	MachO.h	/^      uint32_t align;$/;"	m	struct:llvm::MachO::section
align	MachO.h	/^      uint32_t align;$/;"	m	struct:llvm::MachO::section_64
align	OutputBuffer.h	/^    void align(unsigned Boundary) {$/;"	f	class:llvm::OutputBuffer
alignOf	AlignOf.h	/^inline unsigned alignOf() { return AlignOf<T>::Alignment; }$/;"	f	namespace:llvm
align_data	ThreadLocal.h	/^        ThreadLocalDataTy align_data;$/;"	m	union:llvm::sys::ThreadLocalImpl::__anon56
aligned	AlignOf.h	/^template <> struct AlignedCharArrayImpl<1> { char aligned; };$/;"	m	struct:llvm::AlignedCharArrayImpl
aligned	AlignOf.h	/^template <> struct AlignedCharArrayImpl<2> { short aligned; };$/;"	m	struct:llvm::AlignedCharArrayImpl
aligned	AlignOf.h	/^template <> struct AlignedCharArrayImpl<4> { int aligned; };$/;"	m	struct:llvm::AlignedCharArrayImpl
aligned	AlignOf.h	/^template <> struct AlignedCharArrayImpl<8> { double aligned; };$/;"	m	struct:llvm::AlignedCharArrayImpl
aligned	Endian.h	/^enum alignment {unaligned, aligned};$/;"	e	enum:llvm::support::alignment
aligned_big16_t	Endian.h	/^                     <int16_t, big, aligned>    aligned_big16_t;$/;"	t	namespace:llvm::support
aligned_big32_t	Endian.h	/^                     <int32_t, big, aligned>    aligned_big32_t;$/;"	t	namespace:llvm::support
aligned_big64_t	Endian.h	/^                     <int64_t, big, aligned>    aligned_big64_t;$/;"	t	namespace:llvm::support
aligned_big8_t	Endian.h	/^                     <int8_t, big, aligned>     aligned_big8_t;$/;"	t	namespace:llvm::support
aligned_little16_t	Endian.h	/^                     <int16_t, little, aligned> aligned_little16_t;$/;"	t	namespace:llvm::support
aligned_little32_t	Endian.h	/^                     <int32_t, little, aligned> aligned_little32_t;$/;"	t	namespace:llvm::support
aligned_little64_t	Endian.h	/^                     <int64_t, little, aligned> aligned_little64_t;$/;"	t	namespace:llvm::support
aligned_little8_t	Endian.h	/^                     <int8_t, little, aligned>  aligned_little8_t;$/;"	t	namespace:llvm::support
aligned_ubig16_t	Endian.h	/^                    <uint16_t, big, aligned>    aligned_ubig16_t;$/;"	t	namespace:llvm::support
aligned_ubig32_t	Endian.h	/^                    <uint32_t, big, aligned>    aligned_ubig32_t;$/;"	t	namespace:llvm::support
aligned_ubig64_t	Endian.h	/^                    <uint64_t, big, aligned>    aligned_ubig64_t;$/;"	t	namespace:llvm::support
aligned_ubig8_t	Endian.h	/^                    <uint8_t, big, aligned>     aligned_ubig8_t;$/;"	t	namespace:llvm::support
aligned_ulittle16_t	Endian.h	/^                    <uint16_t, little, aligned> aligned_ulittle16_t;$/;"	t	namespace:llvm::support
aligned_ulittle32_t	Endian.h	/^                    <uint32_t, little, aligned> aligned_ulittle32_t;$/;"	t	namespace:llvm::support
aligned_ulittle64_t	Endian.h	/^                    <uint64_t, little, aligned> aligned_ulittle64_t;$/;"	t	namespace:llvm::support
aligned_ulittle8_t	Endian.h	/^                    <uint8_t, little, aligned>  aligned_ulittle8_t;$/;"	t	namespace:llvm::support
alignment	Endian.h	/^enum alignment {unaligned, aligned};$/;"	g	namespace:llvm::support
alignment_access_helper	Endian.h	/^struct alignment_access_helper<value_type, aligned>$/;"	s	namespace:llvm::support::detail
alignment_access_helper	Endian.h	/^struct alignment_access_helper<value_type, unaligned>$/;"	s	namespace:llvm::support::detail
all_all	FileSystem.h	/^  all_all      = owner_all | group_all | others_all,$/;"	e	enum:llvm::sys::fs::perms
already_connected	system_error.h	/^  already_connected                   = EISCONN,$/;"	e	enum:llvm::errc::_
already_exists	system_error.h	/^  already_exists          = 183  \/\/ ERROR_ALREADY_EXISTS$/;"	e	enum:llvm::windows_error::_
api_pred_ty	PatternMatch.h	/^  api_pred_ty(const APInt *&R) : Res(R) {}$/;"	f	struct:llvm::PatternMatch::api_pred_ty
api_pred_ty	PatternMatch.h	/^struct api_pred_ty : public Predicate {$/;"	s	namespace:llvm::PatternMatch
apint_match	PatternMatch.h	/^  apint_match(const APInt *&R) : Res(R) {}$/;"	f	struct:llvm::PatternMatch::apint_match
apint_match	PatternMatch.h	/^struct apint_match {$/;"	s	namespace:llvm::PatternMatch
applicator	CommandLine.h	/^template<> struct applicator<FormattingFlags> {$/;"	s	namespace:llvm::cl
applicator	CommandLine.h	/^template<> struct applicator<MiscFlags> {$/;"	s	namespace:llvm::cl
applicator	CommandLine.h	/^template<> struct applicator<NumOccurrencesFlag> {$/;"	s	namespace:llvm::cl
applicator	CommandLine.h	/^template<> struct applicator<OptionHidden> {$/;"	s	namespace:llvm::cl
applicator	CommandLine.h	/^template<> struct applicator<ValueExpected> {$/;"	s	namespace:llvm::cl
applicator	CommandLine.h	/^template<> struct applicator<const char*> {$/;"	s	namespace:llvm::cl
applicator	CommandLine.h	/^template<class Mod> struct applicator {$/;"	s	namespace:llvm::cl
applicator	CommandLine.h	/^template<unsigned n> struct applicator<char[n]> {$/;"	s	namespace:llvm::cl
applicator	CommandLine.h	/^template<unsigned n> struct applicator<const char[n]> {$/;"	s	namespace:llvm::cl
apply	CommandLine.h	/^  void apply(Opt &O) const { O.setInitialValue(Init); }$/;"	f	struct:llvm::cl::initializer
apply	CommandLine.h	/^  void apply(Opt &O) const { O.setLocation(O, Loc); }$/;"	f	struct:llvm::cl::LocationClass
apply	CommandLine.h	/^  void apply(Opt &O) const {$/;"	f	class:llvm::cl::ValuesClass
apply	CommandLine.h	/^  void apply(Option &O) const { O.setDescription(Desc); }$/;"	f	struct:llvm::cl::desc
apply	CommandLine.h	/^  void apply(Option &O) const { O.setValueStr(Desc); }$/;"	f	struct:llvm::cl::value_desc
apply	CommandLine.h	/^  void apply(alias &A) const { A.setAliasFor(Opt); }$/;"	f	struct:llvm::cl::aliasopt
apply	CommandLine.h	/^  void apply(list<D, S, P> &L) const { L.setNumAdditionalVals(AdditionalVals); }$/;"	f	struct:llvm::cl::multi_val
apply	CommandLine.h	/^void apply(const Mod &M, Opt *O) {$/;"	f	namespace:llvm::cl
archive	FileSystem.h	/^    archive,                  \/\/\/< ar style archive file$/;"	e	enum:llvm::sys::fs::file_magic::_
arena_trashed	system_error.h	/^  arena_trashed           = 7, \/\/ ERROR_ARENA_TRASHED,$/;"	e	enum:llvm::windows_error::_
arg_begin	CallSite.h	/^  IterTy arg_begin() const {$/;"	f	class:llvm::CallSiteBase
arg_empty	CallSite.h	/^  bool arg_empty() const { return arg_end() == arg_begin(); }$/;"	f	class:llvm::CallSiteBase
arg_end	CallSite.h	/^  IterTy arg_end() const { return (*this)->op_end() - getArgumentEndOffset(); }$/;"	f	class:llvm::CallSiteBase
arg_iterator	CallSite.h	/^  typedef IterTy arg_iterator;$/;"	t	class:llvm::CallSiteBase
arg_size	CallSite.h	/^  unsigned arg_size() const { return unsigned(arg_end() - arg_begin()); }$/;"	f	class:llvm::CallSiteBase
argument_list_too_long	system_error.h	/^  argument_list_too_long              = E2BIG,$/;"	e	enum:llvm::errc::_
argument_out_of_domain	system_error.h	/^  argument_out_of_domain              = EDOM,$/;"	e	enum:llvm::errc::_
arr1	AlignOf.h	/^    char arr1[sizeof(T1)], arr2[sizeof(T2)], arr3[sizeof(T3)], arr4[sizeof(T4)];$/;"	m	union:llvm::AlignedCharArrayUnion::SizerImpl
arr2	AlignOf.h	/^    char arr1[sizeof(T1)], arr2[sizeof(T2)], arr3[sizeof(T3)], arr4[sizeof(T4)];$/;"	m	union:llvm::AlignedCharArrayUnion::SizerImpl
arr3	AlignOf.h	/^    char arr1[sizeof(T1)], arr2[sizeof(T2)], arr3[sizeof(T3)], arr4[sizeof(T4)];$/;"	m	union:llvm::AlignedCharArrayUnion::SizerImpl
arr4	AlignOf.h	/^    char arr1[sizeof(T1)], arr2[sizeof(T2)], arr3[sizeof(T3)], arr4[sizeof(T4)];$/;"	m	union:llvm::AlignedCharArrayUnion::SizerImpl
assign	FileSystem.h	/^  void assign(const Twine &path, file_status st = file_status()) {$/;"	f	class:llvm::sys::fs::directory_entry
assign	system_error.h	/^  void assign(int _val, const error_category& _cat) {$/;"	f	class:llvm::error_code
assign	system_error.h	/^  void assign(int _val, const error_category& _cat) {$/;"	f	class:llvm::error_condition
atEnd	InstIterator.h	/^  inline bool atEnd() const { return BB == BBs->end(); }$/;"	f	class:llvm::InstIterator
available	FileSystem.h	/^  uint64_t available;$/;"	m	struct:llvm::sys::fs::space_info
bad_address	system_error.h	/^  bad_address                         = EFAULT,$/;"	e	enum:llvm::errc::_
bad_command	system_error.h	/^  bad_command             = 22, \/\/ ERROR_BAD_COMMAND,$/;"	e	enum:llvm::windows_error::_
bad_environment	system_error.h	/^  bad_environment         = 10, \/\/ ERROR_BAD_ENVIRONMENT,$/;"	e	enum:llvm::windows_error::_
bad_file_descriptor	system_error.h	/^  bad_file_descriptor                 = EBADF,$/;"	e	enum:llvm::errc::_
bad_format	system_error.h	/^  bad_format              = 11, \/\/ ERROR_BAD_FORMAT,$/;"	e	enum:llvm::windows_error::_
bad_length	system_error.h	/^  bad_length              = 24, \/\/ ERROR_BAD_LENGTH,$/;"	e	enum:llvm::windows_error::_
bad_message	system_error.h	/^  bad_message                         = EBADMSG,$/;"	e	enum:llvm::errc::_
bad_net_path	system_error.h	/^  bad_net_path            = 53, \/\/ ERROR_BAD_NETPATH,$/;"	e	enum:llvm::windows_error::_
bad_unit	system_error.h	/^  bad_unit                = 20, \/\/ ERROR_BAD_UNIT,$/;"	e	enum:llvm::windows_error::_
base	Memory.h	/^    void *base() const { return Address; }$/;"	f	class:llvm::sys::MemoryBlock
basic_collection_iterator	YAMLParser.h	/^  basic_collection_iterator() : Base(0) {}$/;"	f	class:llvm::yaml::basic_collection_iterator
basic_collection_iterator	YAMLParser.h	/^  basic_collection_iterator(BaseT *B) : Base(B) {}$/;"	f	class:llvm::yaml::basic_collection_iterator
basic_collection_iterator	YAMLParser.h	/^class basic_collection_iterator$/;"	c	namespace:llvm::yaml
basic_parser	CommandLine.h	/^class basic_parser : public basic_parser_impl {$/;"	c	namespace:llvm::cl
basic_parser_impl	CommandLine.h	/^class basic_parser_impl {  \/\/ non-template implementation of basic_parser<t>$/;"	c	namespace:llvm::cl
begin	GetElementPtrTypeIterator.h	/^    static generic_gep_type_iterator begin(Type *Ty, ItTy It) {$/;"	f	class:llvm::generic_gep_type_iterator
begin	IntegersSubsetMapping.h	/^  RangeIterator begin() { return Items.begin(); }$/;"	f	class:llvm::IntegersSubsetMapping
begin	Registry.h	/^    static iterator begin() { return iterator(Head); }$/;"	f	class:llvm::Registry
begin	StringPool.h	/^    inline const char *begin() const {$/;"	f	class:llvm::PooledStringPtr
begin	YAMLParser.h	/^  iterator begin() {$/;"	f	class:llvm::yaml::MappingNode
begin	YAMLParser.h	/^  iterator begin() {$/;"	f	class:llvm::yaml::SequenceNode
begin	YAMLParser.h	/^typename CollectionType::iterator begin(CollectionType &C) {$/;"	f	namespace:llvm::yaml
bfAndefSymbol	COFF.h	/^    AuxiliarybfAndefSymbol      bfAndefSymbol;$/;"	m	union:llvm::COFF::Auxiliary
big	Endian.h	/^enum endianness {big, little};$/;"	e	enum:llvm::support::endianness
big16_t	Endian.h	/^                   <int16_t, big, unaligned>    big16_t;$/;"	t	namespace:llvm::support
big32_t	Endian.h	/^                   <int32_t, big, unaligned>    big32_t;$/;"	t	namespace:llvm::support
big64_t	Endian.h	/^                   <int64_t, big, unaligned>    big64_t;$/;"	t	namespace:llvm::support
big8_t	Endian.h	/^                   <int8_t, big, unaligned>     big8_t;$/;"	t	namespace:llvm::support
bind_const_intval_ty	PatternMatch.h	/^  bind_const_intval_ty(uint64_t &V) : VR(V) {}$/;"	f	struct:llvm::PatternMatch::bind_const_intval_ty
bind_const_intval_ty	PatternMatch.h	/^struct bind_const_intval_ty {$/;"	s	namespace:llvm::PatternMatch
bind_off	MachO.h	/^      uint32_t bind_off;$/;"	m	struct:llvm::MachO::dyld_info_command
bind_size	MachO.h	/^      uint32_t bind_size;$/;"	m	struct:llvm::MachO::dyld_info_command
bind_ty	PatternMatch.h	/^  bind_ty(Class *&V) : VR(V) {}$/;"	f	struct:llvm::PatternMatch::bind_ty
bind_ty	PatternMatch.h	/^struct bind_ty {$/;"	s	namespace:llvm::PatternMatch
bitcode	FileSystem.h	/^    bitcode,                  \/\/\/< Bitcode file$/;"	e	enum:llvm::sys::fs::file_magic::_
bits	CommandLine.h	/^  bits(const M0t &M0, const M1t &M1) : Option(ZeroOrMore, NotHidden) {$/;"	f	class:llvm::cl::bits
bits	CommandLine.h	/^  bits(const M0t &M0, const M1t &M1, const M2t &M2)$/;"	f	class:llvm::cl::bits
bits	CommandLine.h	/^  bits(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3)$/;"	f	class:llvm::cl::bits
bits	CommandLine.h	/^  bits(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3,$/;"	f	class:llvm::cl::bits
bits	CommandLine.h	/^  explicit bits(const M0t &M0) : Option(ZeroOrMore, NotHidden) {$/;"	f	class:llvm::cl::bits
bits	CommandLine.h	/^class bits : public Option, public bits_storage<DataType, Storage> {$/;"	c	namespace:llvm::cl
bits_storage	CommandLine.h	/^  bits_storage() : Location(0) {}$/;"	f	class:llvm::cl::bits_storage
bits_storage	CommandLine.h	/^class bits_storage {$/;"	c	namespace:llvm::cl
bits_storage	CommandLine.h	/^class bits_storage<DataType, bool> {$/;"	c	namespace:llvm::cl
block_file	FileSystem.h	/^    block_file,$/;"	e	enum:llvm::sys::fs::file_type::_
boolOrDefault	CommandLine.h	/^enum boolOrDefault { BOU_UNSET, BOU_TRUE, BOU_FALSE };$/;"	g	namespace:llvm::cl
brc_match	PatternMatch.h	/^  brc_match(const Cond_t &C, BasicBlock *&t, BasicBlock *&f)$/;"	f	struct:llvm::PatternMatch::brc_match
brc_match	PatternMatch.h	/^struct brc_match {$/;"	s	namespace:llvm::PatternMatch
broken_pipe	system_error.h	/^  broken_pipe                         = EPIPE,$/;"	e	enum:llvm::errc::_
broken_pipe	system_error.h	/^  broken_pipe             = 109, \/\/ ERROR_BROKEN_PIPE,$/;"	e	enum:llvm::windows_error::_
buffer	AlignOf.h	/^  char buffer[sizeof(SizerImpl)];$/;"	m	union:llvm::AlignedCharArrayUnion
buffer_overflow	system_error.h	/^  buffer_overflow         = 111, \/\/ ERROR_BUFFER_OVERFLOW,$/;"	e	enum:llvm::windows_error::_
busy	system_error.h	/^  busy                    = 170, \/\/ ERROR_BUSY,$/;"	e	enum:llvm::windows_error::_
c_str	PathV1.h	/^      const char *c_str() const { return path.c_str(); }$/;"	f	class:llvm::sys::Path
call	ManagedStatic.h	/^  static void call(void * Ptr) { delete (T*)Ptr; }$/;"	f	struct:llvm::object_deleter
call	ManagedStatic.h	/^  static void call(void * Ptr) { delete[] (T*)Ptr; }$/;"	f	struct:llvm::object_deleter
cancel_violation	system_error.h	/^  cancel_violation        = 173, \/\/ ERROR_CANCEL_VIOLATION,$/;"	e	enum:llvm::windows_error::_
cannot_make	system_error.h	/^  cannot_make             = 82, \/\/ ERROR_CANNOT_MAKE,$/;"	e	enum:llvm::windows_error::_
capacity	FileSystem.h	/^  uint64_t capacity;$/;"	m	struct:llvm::sys::fs::space_info
capacity_in_bytes	Capacity.h	/^static inline size_t capacity_in_bytes(const T &x) {$/;"	f	namespace:llvm
cas_flag	Atomic.h	/^    typedef long cas_flag;$/;"	t	namespace:llvm::sys
cas_flag	Atomic.h	/^    typedef uint32_t cas_flag;$/;"	t	namespace:llvm::sys
cast	Casting.h	/^inline typename cast_retty<X, Y>::ret_type cast(const Y &Val) {$/;"	f	namespace:llvm
cast_convert_val	Casting.h	/^template<class To, class From, class SimpleFrom> struct cast_convert_val {$/;"	s	namespace:llvm
cast_convert_val	Casting.h	/^template<class To, class FromTy> struct cast_convert_val<To,FromTy,FromTy> {$/;"	s	namespace:llvm
cast_or_null	Casting.h	/^inline typename cast_retty<X, Y*>::ret_type cast_or_null(Y *Val) {$/;"	f	namespace:llvm
cast_retty	Casting.h	/^struct cast_retty {$/;"	s	namespace:llvm
cast_retty_impl	Casting.h	/^template<class To, class From> struct cast_retty_impl {$/;"	s	namespace:llvm
cast_retty_impl	Casting.h	/^template<class To, class From> struct cast_retty_impl<To, From*> {$/;"	s	namespace:llvm
cast_retty_impl	Casting.h	/^template<class To, class From> struct cast_retty_impl<To, const From*> {$/;"	s	namespace:llvm
cast_retty_impl	Casting.h	/^template<class To, class From> struct cast_retty_impl<To, const From*const> {$/;"	s	namespace:llvm
cast_retty_impl	Casting.h	/^template<class To, class From> struct cast_retty_impl<To, const From> {$/;"	s	namespace:llvm
cast_retty_wrap	Casting.h	/^struct cast_retty_wrap {$/;"	s	namespace:llvm
cast_retty_wrap	Casting.h	/^struct cast_retty_wrap<To, FromTy, FromTy> {$/;"	s	namespace:llvm
category	system_error.h	/^  const error_category& category() const {return *_cat_;}$/;"	f	class:llvm::error_code
category	system_error.h	/^  const error_category& category() const {return *_cat_;}$/;"	f	class:llvm::error_condition
changeColor	raw_ostream.h	/^  virtual raw_ostream &changeColor(enum Colors Color,$/;"	f	class:llvm::raw_ostream
char_type	FileSystem.h	/^  typedef char char_type;$/;"	t	class:llvm::sys::fs::mapped_file_region
character_file	FileSystem.h	/^    character_file,$/;"	e	enum:llvm::sys::fs::file_type::_
check	CommandLine.h	/^  void check() const {$/;"	f	class:llvm::cl::opt_storage
checkForGarbage	LeakDetector.h	/^  static void checkForGarbage(LLVMContext &C, const std::string &Message) {$/;"	f	struct:llvm::LeakDetector
checkMagic	ELF.h	/^  bool checkMagic() const {$/;"	f	struct:llvm::ELF::Elf32_Ehdr
checkMagic	ELF.h	/^  bool checkMagic() const {$/;"	f	struct:llvm::ELF::Elf64_Ehdr
child_begin	CFG.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_begin	DataFlow.h	/^  static inline ChildIteratorType child_begin(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	CFG.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_end	DataFlow.h	/^  static inline ChildIteratorType child_end(NodeType *N) {$/;"	f	struct:llvm::GraphTraits
child_iterator	GraphWriter.h	/^  typedef typename GTraits::ChildIteratorType child_iterator;$/;"	t	class:llvm::GraphWriter
circular_raw_ostream	circular_raw_ostream.h	/^    circular_raw_ostream(raw_ostream &Stream, const char *Header,$/;"	f	class:llvm::circular_raw_ostream
circular_raw_ostream	circular_raw_ostream.h	/^    explicit circular_raw_ostream()$/;"	f	class:llvm::circular_raw_ostream
circular_raw_ostream	circular_raw_ostream.h	/^  class circular_raw_ostream : public raw_ostream {$/;"	c	namespace:llvm
cksum	MachO.h	/^      uint32_t cksum;$/;"	m	struct:llvm::MachO::prebind_cksum_command
cl	CommandLine.h	/^namespace cl {$/;"	n	namespace:llvm
clEnumVal	CommandLine.h	439;"	d
clEnumValEnd	CommandLine.h	441;"	d
clEnumValN	CommandLine.h	440;"	d
class_match	PatternMatch.h	/^struct class_match {$/;"	s	namespace:llvm::PatternMatch
classof	YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::AliasNode
classof	YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::KeyValueNode
classof	YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::MappingNode
classof	YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::NullNode
classof	YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::ScalarNode
classof	YAMLParser.h	/^  static inline bool classof(const Node *N) {$/;"	f	class:llvm::yaml::SequenceNode
cleanup	CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup *cleanup;$/;"	m	class:llvm::CrashRecoveryContextCleanupRegistrar
cleanupFired	CrashRecoveryContext.h	/^  bool cleanupFired;$/;"	m	class:llvm::CrashRecoveryContextCleanup
clear	IntegersSubsetMapping.h	/^  void clear() {$/;"	f	class:llvm::IntegersSubsetMapping
clear	PathV1.h	/^      void clear() { path.clear(); }$/;"	f	class:llvm::sys::Path
clear	PredIteratorCache.h	/^    void clear() {$/;"	f	class:llvm::PredIteratorCache
clear	Recycler.h	/^  void clear(AllocatorType &Allocator) {$/;"	f	class:llvm::Recycler
clear	StringPool.h	/^    void clear() {$/;"	f	class:llvm::PooledStringPtr
clear	system_error.h	/^  void clear() {$/;"	f	class:llvm::error_code
clear	system_error.h	/^  void clear() {$/;"	f	class:llvm::error_condition
clear_error	raw_ostream.h	/^  void clear_error() {$/;"	f	class:llvm::raw_fd_ostream
client	MachO.h	/^      uint32_t client;$/;"	m	struct:llvm::MachO::sub_client_command
cmd	MachO.h	/^      uint32_t  cmd;$/;"	m	struct:llvm::MachO::fvmlib_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::dyld_info_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::dylib_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::dylinker_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::dysymtab_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::encryption_info_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::fvmfile_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::ident_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::linkedit_data_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::load_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::prebind_cksum_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::prebound_dylib_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::routines_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::routines_command_64
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::rpath_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::segment_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::segment_command_64
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::sub_client_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::sub_framework_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::sub_library_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::sub_umbrella_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::symseg_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::symtab_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::thread_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::twolevel_hints_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::uuid_command
cmd	MachO.h	/^      uint32_t cmd;$/;"	m	struct:llvm::MachO::version_min_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::dyld_info_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::dylib_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::dylinker_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::dysymtab_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::encryption_info_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::fvmfile_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::fvmlib_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::ident_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::linkedit_data_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::load_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::prebind_cksum_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::prebound_dylib_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::routines_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::routines_command_64
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::rpath_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::segment_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::segment_command_64
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::sub_client_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::sub_framework_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::sub_library_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::sub_umbrella_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::symseg_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::symtab_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::thread_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::twolevel_hints_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::uuid_command
cmdsize	MachO.h	/^      uint32_t cmdsize;$/;"	m	struct:llvm::MachO::version_min_command
codeOffset	Win64EH.h	/^    uint8_t codeOffset;$/;"	m	struct:llvm::Win64EH::UnwindCode::__anon58
coff_object	FileSystem.h	/^    coff_object,              \/\/\/< COFF object file$/;"	e	enum:llvm::sys::fs::file_magic::_
compare	CommandLine.h	/^  bool compare(const DataType &V) const {$/;"	f	class:llvm::cl::OptionValueCopy
compare	CommandLine.h	/^  bool compare(const DataType &\/*V*\/) const { return false; }$/;"	f	struct:llvm::cl::OptionValueBase
compare	CommandLine.h	/^  virtual bool compare(const GenericOptionValue &V) const {$/;"	f	class:llvm::cl::OptionValueCopy
compare	CommandLine.h	/^  virtual bool compare(const GenericOptionValue& \/*V*\/) const { return false; }$/;"	f	struct:llvm::cl::OptionValueBase
compatibility_version	MachO.h	/^      uint32_t compatibility_version;$/;"	m	struct:llvm::MachO::dylib
conditional	type_traits.h	/^struct conditional { typedef T type; };$/;"	s	namespace:llvm
conditional	type_traits.h	/^struct conditional<false, T, F> { typedef F type; };$/;"	s	namespace:llvm
connection_aborted	system_error.h	/^  connection_aborted                  = ECONNABORTED,$/;"	e	enum:llvm::errc::_
connection_already_in_progress	system_error.h	/^  connection_already_in_progress      = EALREADY,$/;"	e	enum:llvm::errc::_
connection_refused	system_error.h	/^  connection_refused                  = ECONNREFUSED,$/;"	e	enum:llvm::errc::_
connection_reset	system_error.h	/^  connection_reset                    = ECONNRESET,$/;"	e	enum:llvm::errc::_
const_inst_iterator	InstIterator.h	/^                     const Instruction> const_inst_iterator;$/;"	t	namespace:llvm
const_iterator	PathV2.h	/^class const_iterator {$/;"	c	namespace:llvm::sys::path
const_pred_iterator	CFG.h	/^                     Value::const_use_iterator> const_pred_iterator;$/;"	t	namespace:llvm
constantint_match	PatternMatch.h	/^struct constantint_match {$/;"	s	namespace:llvm::PatternMatch
context	CrashRecoveryContext.h	/^  CrashRecoveryContext *context;$/;"	m	class:llvm::CrashRecoveryContextCleanup
copy_option	FileSystem.h	/^  copy_option(_ v) : v_(v) {}$/;"	f	struct:llvm::sys::fs::copy_option
copy_option	FileSystem.h	/^  explicit copy_option(int v) : v_(_(v)) {}$/;"	f	struct:llvm::sys::fs::copy_option
copy_option	FileSystem.h	/^struct copy_option {$/;"	s	namespace:llvm::sys::fs
cpusubtype	MachO.h	/^      uint32_t cpusubtype;$/;"	m	struct:llvm::MachO::fat_arch
cpusubtype	MachO.h	/^      uint32_t cpusubtype;$/;"	m	struct:llvm::MachO::mach_header
cpusubtype	MachO.h	/^      uint32_t cpusubtype;$/;"	m	struct:llvm::MachO::mach_header_64
cputype	MachO.h	/^      uint32_t cputype;$/;"	m	struct:llvm::MachO::fat_arch
cputype	MachO.h	/^      uint32_t cputype;$/;"	m	struct:llvm::MachO::mach_header
cputype	MachO.h	/^      uint32_t cputype;$/;"	m	struct:llvm::MachO::mach_header_64
crc	system_error.h	/^  crc                     = 23, \/\/ ERROR_CRC,$/;"	e	enum:llvm::windows_error::_
create	CrashRecoveryContext.h	/^  static DERIVED *create(T *x) {$/;"	f	class:llvm::CrashRecoveryContextCleanupBase
createAsmPrinter	TargetRegistry.h	/^    AsmPrinter *createAsmPrinter(TargetMachine &TM, MCStreamer &Streamer) const{$/;"	f	class:llvm::Target
createAsmStreamer	TargetRegistry.h	/^    MCStreamer *createAsmStreamer(MCContext &Ctx,$/;"	f	class:llvm::Target
createMCAsmBackend	TargetRegistry.h	/^    MCAsmBackend *createMCAsmBackend(StringRef Triple, StringRef CPU) const {$/;"	f	class:llvm::Target
createMCAsmInfo	TargetRegistry.h	/^    MCAsmInfo *createMCAsmInfo(StringRef Triple) const {$/;"	f	class:llvm::Target
createMCAsmLexer	TargetRegistry.h	/^    MCTargetAsmLexer *createMCAsmLexer(const MCRegisterInfo &MRI,$/;"	f	class:llvm::Target
createMCAsmParser	TargetRegistry.h	/^    MCTargetAsmParser *createMCAsmParser(MCSubtargetInfo &STI,$/;"	f	class:llvm::Target
createMCCodeEmitter	TargetRegistry.h	/^    MCCodeEmitter *createMCCodeEmitter(const MCInstrInfo &II,$/;"	f	class:llvm::Target
createMCCodeGenInfo	TargetRegistry.h	/^    MCCodeGenInfo *createMCCodeGenInfo(StringRef Triple, Reloc::Model RM,$/;"	f	class:llvm::Target
createMCDisassembler	TargetRegistry.h	/^    MCDisassembler *createMCDisassembler(const MCSubtargetInfo &STI) const {$/;"	f	class:llvm::Target
createMCInstPrinter	TargetRegistry.h	/^    MCInstPrinter *createMCInstPrinter(unsigned SyntaxVariant,$/;"	f	class:llvm::Target
createMCInstrAnalysis	TargetRegistry.h	/^    MCInstrAnalysis *createMCInstrAnalysis(const MCInstrInfo *Info) const {$/;"	f	class:llvm::Target
createMCInstrInfo	TargetRegistry.h	/^    MCInstrInfo *createMCInstrInfo() const {$/;"	f	class:llvm::Target
createMCObjectStreamer	TargetRegistry.h	/^    MCStreamer *createMCObjectStreamer(StringRef TT, MCContext &Ctx,$/;"	f	class:llvm::Target
createMCRegInfo	TargetRegistry.h	/^    MCRegisterInfo *createMCRegInfo(StringRef Triple) const {$/;"	f	class:llvm::Target
createMCSubtargetInfo	TargetRegistry.h	/^    MCSubtargetInfo *createMCSubtargetInfo(StringRef Triple, StringRef CPU,$/;"	f	class:llvm::Target
createSentinel	Recycler.h	/^  RecyclerStruct *createSentinel() const {$/;"	f	struct:llvm::ilist_traits
createTargetMachine	TargetRegistry.h	/^    TargetMachine *createTargetMachine(StringRef Triple, StringRef CPU,$/;"	f	class:llvm::Target
cross_device_link	system_error.h	/^  cross_device_link                   = EXDEV,$/;"	e	enum:llvm::errc::_
cryptid	MachO.h	/^      uint32_t cryptid;$/;"	m	struct:llvm::MachO::encryption_info_command
cryptoff	MachO.h	/^      uint32_t cryptoff;$/;"	m	struct:llvm::MachO::encryption_info_command
cryptsize	MachO.h	/^      uint32_t cryptsize;$/;"	m	struct:llvm::MachO::encryption_info_command
cst_pred_ty	PatternMatch.h	/^struct cst_pred_ty : public Predicate {$/;"	s	namespace:llvm::PatternMatch
current_directory	system_error.h	/^  current_directory       = 16, \/\/ ERROR_CURRENT_DIRECTORY,$/;"	e	enum:llvm::windows_error::_
current_version	MachO.h	/^      uint32_t current_version;$/;"	m	struct:llvm::MachO::dylib
d_ptr	ELF.h	/^      Elf32_Addr d_ptr;         \/\/ Pointer value of entry.$/;"	m	union:llvm::ELF::Elf32_Dyn::__anon39
d_ptr	ELF.h	/^      Elf64_Addr  d_ptr;        \/\/ Pointer value of entry.$/;"	m	union:llvm::ELF::Elf64_Dyn::__anon40
d_tag	ELF.h	/^  Elf32_Sword d_tag;            \/\/ Type of dynamic table entry.$/;"	m	struct:llvm::ELF::Elf32_Dyn
d_tag	ELF.h	/^  Elf64_Sxword d_tag;           \/\/ Type of dynamic table entry.$/;"	m	struct:llvm::ELF::Elf64_Dyn
d_un	ELF.h	/^  } d_un;$/;"	m	struct:llvm::ELF::Elf32_Dyn	typeref:union:llvm::ELF::Elf32_Dyn::__anon39
d_un	ELF.h	/^  } d_un;$/;"	m	struct:llvm::ELF::Elf64_Dyn	typeref:union:llvm::ELF::Elf64_Dyn::__anon40
d_val	ELF.h	/^      Elf32_Word d_val;         \/\/ Integer value of entry.$/;"	m	union:llvm::ELF::Elf32_Dyn::__anon39
d_val	ELF.h	/^      Elf64_Xword d_val;        \/\/ Integer value of entry.$/;"	m	union:llvm::ELF::Elf64_Dyn::__anon40
data	COFF.h	/^    uint32_t data;$/;"	m	struct:llvm::COFF::ImportLookupTableEntry32
data	ThreadLocal.h	/^        char data[sizeof(ThreadLocalDataTy)];$/;"	m	union:llvm::sys::ThreadLocalImpl::__anon56
data_	Mutex.h	/^      void* data_; \/\/\/< We don't know what the data will be$/;"	m	class:llvm::sys::MutexImpl
data_	RWMutex.h	/^      void* data_; \/\/\/< We don't know what the data will be$/;"	m	class:llvm::sys::RWMutexImpl
dataoff	MachO.h	/^      uint32_t dataoff;$/;"	m	struct:llvm::MachO::linkedit_data_command
datasize	MachO.h	/^      uint32_t datasize;$/;"	m	struct:llvm::MachO::linkedit_data_command
decodeULEB128	LEB128.h	/^static inline uint64_t decodeULEB128(const uint8_t *p, unsigned *n = 0) {$/;"	f	namespace:llvm
default_error_condition	system_error.h	/^  error_condition default_error_condition() const$/;"	f	class:llvm::error_code
delegateCallInst	InstVisitor.h	/^  RetTy delegateCallInst(CallInst &I) {$/;"	f	class:llvm::InstVisitor
delegateCallInst	InstVisitor.h	/^  RetTy delegateCallInst(Instruction &I) {$/;"	f	class:llvm::InstVisitor
deleteNode	Recycler.h	/^  static void deleteNode(RecyclerStruct *) {$/;"	f	struct:llvm::ilist_traits
desc	CommandLine.h	/^  desc(const char *Str) : Desc(Str) {}$/;"	f	struct:llvm::cl::desc
desc	CommandLine.h	/^struct desc {$/;"	s	namespace:llvm::cl
descof	Registry.h	/^    static const char *descof(const entry &Entry) { return Entry.getDesc(); }$/;"	f	class:llvm::RegistryTraits
destination_address_required	system_error.h	/^  destination_address_required        = EDESTADDRREQ,$/;"	e	enum:llvm::errc::_
destroySentinel	Recycler.h	/^  static void destroySentinel(RecyclerStruct *) {}$/;"	f	struct:llvm::ilist_traits
detachCase	IntegersSubsetMapping.h	/^  void detachCase(self& NewMapping, SuccessorClass *Succ) {$/;"	f	class:llvm::IntegersSubsetMapping
detail	Endian.h	/^namespace detail {$/;"	n	namespace:llvm::support
detail	FileSystem.h	/^namespace detail {$/;"	n	namespace:llvm::sys::fs
device_or_resource_busy	system_error.h	/^  device_or_resource_busy             = EBUSY,$/;"	e	enum:llvm::errc::_
diff	IntegersSubsetMapping.h	/^  void diff(self *LExclude, self *Intersection, self *RExclude,$/;"	f	class:llvm::IntegersSubsetMapping
difference_type	InstIterator.h	/^  typedef signed                        difference_type;$/;"	t	class:llvm::InstIterator
difference_type	PathV2.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:llvm::sys::path::const_iterator
directory_entry	FileSystem.h	/^  directory_entry() {}$/;"	f	class:llvm::sys::fs::directory_entry
directory_entry	FileSystem.h	/^  explicit directory_entry(const Twine &path, file_status st = file_status())$/;"	f	class:llvm::sys::fs::directory_entry
directory_entry	FileSystem.h	/^class directory_entry {$/;"	c	namespace:llvm::sys::fs
directory_file	FileSystem.h	/^    directory_file,$/;"	e	enum:llvm::sys::fs::file_type::_
directory_iterator	FileSystem.h	/^  directory_iterator() : State(new detail::DirIterState) {}$/;"	f	class:llvm::sys::fs::directory_iterator
directory_iterator	FileSystem.h	/^  explicit directory_iterator(const Twine &path, error_code &ec) {$/;"	f	class:llvm::sys::fs::directory_iterator
directory_iterator	FileSystem.h	/^  explicit directory_iterator(const directory_entry &de, error_code &ec) {$/;"	f	class:llvm::sys::fs::directory_iterator
directory_iterator	FileSystem.h	/^class directory_iterator {$/;"	c	namespace:llvm::sys::fs
directory_not_empty	system_error.h	/^  directory_not_empty                 = ENOTEMPTY,$/;"	e	enum:llvm::errc::_
disk_full	system_error.h	/^  disk_full               = 112, \/\/ ERROR_DISK_FULL,$/;"	e	enum:llvm::windows_error::_
document_iterator	YAMLParser.h	/^  document_iterator() : Doc(0) {}$/;"	f	class:llvm::yaml::document_iterator
document_iterator	YAMLParser.h	/^  document_iterator(OwningPtr<Document> &D) : Doc(&D) {}$/;"	f	class:llvm::yaml::document_iterator
document_iterator	YAMLParser.h	/^class document_iterator {$/;"	c	namespace:llvm::yaml
doesNotAccessMemory	CallSite.h	/^  bool doesNotAccessMemory() const {$/;"	f	class:llvm::CallSiteBase
doesNotCapture	CallSite.h	/^  bool doesNotCapture(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
doesNotReturn	CallSite.h	/^  bool doesNotReturn() const {$/;"	f	class:llvm::CallSiteBase
doesNotThrow	CallSite.h	/^  bool doesNotThrow() const {$/;"	f	class:llvm::CallSiteBase
doit	Casting.h	/^  static bool doit(const From &Val) {$/;"	f	struct:llvm::isa_impl_wrap
doit	Casting.h	/^  static bool doit(const FromTy &Val) {$/;"	f	struct:llvm::isa_impl_wrap
doit	Casting.h	/^  static inline bool doit(const From &) { return true; }$/;"	f	struct:llvm::isa_impl
doit	Casting.h	/^  static inline bool doit(const From &Val) {$/;"	f	struct:llvm::isa_impl
doit	Casting.h	/^  static inline bool doit(const From &Val) {$/;"	f	struct:llvm::isa_impl_cl
doit	Casting.h	/^  static inline bool doit(const From *Val) {$/;"	f	struct:llvm::isa_impl_cl
doit	Casting.h	/^  static typename cast_retty<To, From>::ret_type doit(const From &Val) {$/;"	f	struct:llvm::cast_convert_val
doit	Casting.h	/^  static typename cast_retty<To, FromTy>::ret_type doit(const FromTy &Val) {$/;"	f	struct:llvm::cast_convert_val
done	CommandLine.h	/^  void done() {$/;"	f	class:llvm::cl::alias
done	CommandLine.h	/^  void done() {$/;"	f	class:llvm::cl::bits
done	CommandLine.h	/^  void done() {$/;"	f	class:llvm::cl::list
done	CommandLine.h	/^  void done() {$/;"	f	class:llvm::cl::opt
dont_use	type_traits.h	/^namespace dont_use {$/;"	n	namespace:llvm
dont_use	type_traits.h	/^namespace dont_use$/;"	n	namespace:llvm
dup_name	system_error.h	/^  dup_name                = 52, \/\/ ERROR_DUP_NAME,$/;"	e	enum:llvm::windows_error::_
dwarf	Dwarf.h	/^namespace dwarf {$/;"	n	namespace:llvm
dwarf_constants	Dwarf.h	/^enum dwarf_constants {$/;"	g	namespace:llvm::dwarf
dyld_info_command	MachO.h	/^    struct dyld_info_command {$/;"	s	namespace:llvm::MachO
dylib	MachO.h	/^      struct dylib dylib;$/;"	m	struct:llvm::MachO::dylib_command	typeref:struct:llvm::MachO::dylib_command::dylib
dylib	MachO.h	/^    struct dylib {$/;"	s	namespace:llvm::MachO
dylib_command	MachO.h	/^    struct dylib_command {$/;"	s	namespace:llvm::MachO
dylib_module	MachO.h	/^    struct dylib_module {$/;"	s	namespace:llvm::MachO
dylib_module_64	MachO.h	/^    struct dylib_module_64 {$/;"	s	namespace:llvm::MachO
dylib_reference	MachO.h	/^    struct dylib_reference {$/;"	s	namespace:llvm::MachO
dylib_table_of_contents	MachO.h	/^    struct dylib_table_of_contents {$/;"	s	namespace:llvm::MachO
dylinker_command	MachO.h	/^    struct dylinker_command {$/;"	s	namespace:llvm::MachO
dyn_cast	Casting.h	/^inline typename cast_retty<X, Y>::ret_type dyn_cast(const Y &Val) {$/;"	f	namespace:llvm
dyn_cast_or_null	Casting.h	/^inline typename cast_retty<X, Y*>::ret_type dyn_cast_or_null(Y *Val) {$/;"	f	namespace:llvm
dysymtab_command	MachO.h	/^    struct dysymtab_command {$/;"	s	namespace:llvm::MachO
e_ehsize	ELF.h	/^  Elf32_Half    e_ehsize;    \/\/ Size of ELF header, in bytes$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_ehsize	ELF.h	/^  Elf64_Half    e_ehsize;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_entry	ELF.h	/^  Elf32_Addr    e_entry;     \/\/ Address to jump to in order to start program$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_entry	ELF.h	/^  Elf64_Addr    e_entry;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_flags	ELF.h	/^  Elf32_Word    e_flags;     \/\/ Processor-specific flags$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_flags	ELF.h	/^  Elf64_Word    e_flags;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_ident	ELF.h	/^  unsigned char e_ident[EI_NIDENT]; \/\/ ELF Identification bytes$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_ident	ELF.h	/^  unsigned char e_ident[EI_NIDENT];$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_machine	ELF.h	/^  Elf32_Half    e_machine;   \/\/ Required architecture for this file (see EM_*)$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_machine	ELF.h	/^  Elf64_Half    e_machine;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_phentsize	ELF.h	/^  Elf32_Half    e_phentsize; \/\/ Size of an entry in the program header table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_phentsize	ELF.h	/^  Elf64_Half    e_phentsize;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_phnum	ELF.h	/^  Elf32_Half    e_phnum;     \/\/ Number of entries in the program header table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_phnum	ELF.h	/^  Elf64_Half    e_phnum;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_phoff	ELF.h	/^  Elf32_Off     e_phoff;     \/\/ Program header table's file offset, in bytes$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_phoff	ELF.h	/^  Elf64_Off     e_phoff;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_shentsize	ELF.h	/^  Elf32_Half    e_shentsize; \/\/ Size of an entry in the section header table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_shentsize	ELF.h	/^  Elf64_Half    e_shentsize;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_shnum	ELF.h	/^  Elf32_Half    e_shnum;     \/\/ Number of entries in the section header table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_shnum	ELF.h	/^  Elf64_Half    e_shnum;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_shoff	ELF.h	/^  Elf32_Off     e_shoff;     \/\/ Section header table's file offset, in bytes$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_shoff	ELF.h	/^  Elf64_Off     e_shoff;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_shstrndx	ELF.h	/^  Elf32_Half    e_shstrndx;  \/\/ Sect hdr table index of sect name string table$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_shstrndx	ELF.h	/^  Elf64_Half    e_shstrndx;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_type	ELF.h	/^  Elf32_Half    e_type;      \/\/ Type of file (see ET_* below)$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_type	ELF.h	/^  Elf64_Half    e_type;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
e_version	ELF.h	/^  Elf32_Word    e_version;   \/\/ Must be equal to 1$/;"	m	struct:llvm::ELF::Elf32_Ehdr
e_version	ELF.h	/^  Elf64_Word    e_version;$/;"	m	struct:llvm::ELF::Elf64_Ehdr
edgeTargetsEdgeSource	DOTGraphTraits.h	/^  static bool edgeTargetsEdgeSource(const void *, EdgeIter) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
elf_core	FileSystem.h	/^    elf_core,                 \/\/\/< ELF core image$/;"	e	enum:llvm::sys::fs::file_magic::_
elf_executable	FileSystem.h	/^    elf_executable,           \/\/\/< ELF Executable image$/;"	e	enum:llvm::sys::fs::file_magic::_
elf_relocatable	FileSystem.h	/^    elf_relocatable,          \/\/\/< ELF Relocatable object file$/;"	e	enum:llvm::sys::fs::file_magic::_
elf_shared_object	FileSystem.h	/^    elf_shared_object,        \/\/\/< ELF dynamically linked shared lib$/;"	e	enum:llvm::sys::fs::file_magic::_
emitEdge	GraphWriter.h	/^  void emitEdge(const void *SrcNodeID, int SrcNodePort,$/;"	f	class:llvm::GraphWriter
emitSimpleNode	GraphWriter.h	/^  void emitSimpleNode(const void *ID, const std::string &Attr,$/;"	f	class:llvm::GraphWriter
empty	IntegersSubsetMapping.h	/^  bool empty() const { return Items.empty(); }$/;"	f	class:llvm::IntegersSubsetMapping
empty	PathV1.h	/^      unsigned empty() const { return path.empty(); }$/;"	f	class:llvm::sys::Path
empty	StringPool.h	/^    inline bool empty() const { return InternTable.empty(); }$/;"	f	class:llvm::StringPool
enable_if	type_traits.h	/^struct enable_if : public enable_if_c<Cond::value, T> { };$/;"	s	namespace:llvm
enable_if_c	type_traits.h	/^struct enable_if_c {$/;"	s	namespace:llvm
enable_if_c	type_traits.h	/^template<typename T> struct enable_if_c<false, T> { };$/;"	s	namespace:llvm
encodeSLEB128	LEB128.h	/^static inline void encodeSLEB128(int64_t Value, raw_ostream &OS) {$/;"	f	namespace:llvm
encodeULEB128	LEB128.h	/^static inline unsigned encodeULEB128(uint64_t Value, uint8_t *p,$/;"	f	namespace:llvm
encodeULEB128	LEB128.h	/^static inline void encodeULEB128(uint64_t Value, raw_ostream &OS,$/;"	f	namespace:llvm
encryption_info_command	MachO.h	/^    struct encryption_info_command {$/;"	s	namespace:llvm::MachO
end	GetElementPtrTypeIterator.h	/^    static generic_gep_type_iterator end(ItTy It) {$/;"	f	class:llvm::generic_gep_type_iterator
end	IntegersSubsetMapping.h	/^  RangeIterator end() { return Items.end(); }$/;"	f	class:llvm::IntegersSubsetMapping
end	Registry.h	/^    static iterator end()   { return iterator(0); }$/;"	f	class:llvm::Registry
end	StringPool.h	/^    inline const char *end() const {$/;"	f	class:llvm::PooledStringPtr
end	TargetRegistry.h	/^    static iterator end() { return iterator(); }$/;"	f	struct:llvm::TargetRegistry
end	YAMLParser.h	/^  iterator end() { return iterator(); }$/;"	f	class:llvm::yaml::MappingNode
end	YAMLParser.h	/^  iterator end() { return iterator(); }$/;"	f	class:llvm::yaml::SequenceNode
endAddress	Win64EH.h	/^  uint64_t endAddress;$/;"	m	struct:llvm::Win64EH::RuntimeFunction
endian	Endian.h	/^namespace endian {$/;"	n	namespace:llvm::support
endianness	Endian.h	/^enum endianness {big, little};$/;"	g	namespace:llvm::support
ensureHead	Recycler.h	/^  RecyclerStruct *ensureHead(RecyclerStruct*) const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
entry	Registry.h	/^    typedef SimpleRegistryEntry<T> entry;$/;"	t	class:llvm::RegistryTraits
entry	Registry.h	/^    typedef typename U::entry entry;$/;"	t	class:llvm::Registry
entry	RegistryParser.h	/^    typedef typename U::entry entry;$/;"	t	class:llvm::RegistryParser
entry_t	StringPool.h	/^    typedef StringMapEntry<PooledString> entry_t;$/;"	t	class:llvm::StringPool
entry_t	StringPool.h	/^    typedef StringPool::entry_t entry_t;$/;"	t	class:llvm::PooledStringPtr
equivalent	FileSystem.h	/^inline bool equivalent(const Twine &A, const Twine &B) {$/;"	f	namespace:llvm::sys::fs
erase	ThreadLocal.h	/^      void erase() { removeInstance(); }$/;"	f	class:llvm::sys::ThreadLocal
errc	system_error.h	/^  errc(_ v) : v_(v) {}$/;"	f	struct:llvm::errc
errc	system_error.h	/^struct errc {$/;"	s	namespace:llvm
error	Regex.h	/^    int error;$/;"	m	class:llvm::Regex
error_category	system_error.h	/^class error_category$/;"	c	namespace:llvm
error_code	system_error.h	/^  error_code() : _val_(0), _cat_(&system_category()) {}$/;"	f	class:llvm::error_code
error_code	system_error.h	/^  error_code(E _e, typename enable_if_c<$/;"	f	class:llvm::error_code
error_code	system_error.h	/^  error_code(int _val, const error_category& _cat)$/;"	f	class:llvm::error_code
error_code	system_error.h	/^class error_code {$/;"	c	namespace:llvm
error_condition	system_error.h	/^  error_condition() : _val_(0), _cat_(&generic_category()) {}$/;"	f	class:llvm::error_condition
error_condition	system_error.h	/^  error_condition(E _e, typename enable_if_c<$/;"	f	class:llvm::error_condition
error_condition	system_error.h	/^  error_condition(int _val, const error_category& _cat)$/;"	f	class:llvm::error_condition
error_condition	system_error.h	/^class error_condition$/;"	c	namespace:llvm
error_detected	raw_ostream.h	/^  void error_detected() { Error = true; }$/;"	f	class:llvm::raw_fd_ostream
executable_format_error	system_error.h	/^  executable_format_error             = ENOEXEC,$/;"	e	enum:llvm::errc::_
exists	FileSystem.h	/^inline bool exists(const Twine &path) {$/;"	f	namespace:llvm::sys::fs
export_off	MachO.h	/^      uint32_t export_off;$/;"	m	struct:llvm::MachO::dyld_info_command
export_size	MachO.h	/^      uint32_t export_size;$/;"	m	struct:llvm::MachO::dyld_info_command
extrahelp	CommandLine.h	/^struct extrahelp {$/;"	s	namespace:llvm::cl
extrefsymoff	MachO.h	/^      uint32_t extrefsymoff;$/;"	m	struct:llvm::MachO::dysymtab_command
extreloff	MachO.h	/^      uint32_t extreloff;$/;"	m	struct:llvm::MachO::dysymtab_command
fail_if_exists	FileSystem.h	/^    fail_if_exists,$/;"	e	enum:llvm::sys::fs::copy_option::_
false_type	type_traits.h	/^typedef integral_constant<bool, false> false_type;$/;"	t	namespace:llvm
fat_arch	MachO.h	/^    struct fat_arch {$/;"	s	namespace:llvm::MachO
fat_header	MachO.h	/^    struct fat_header {$/;"	s	namespace:llvm::MachO
fatal_error_handler_t	ErrorHandling.h	/^  typedef void (*fatal_error_handler_t)(void *user_data,$/;"	t	namespace:llvm
fetchToPos	StreamableMemoryObject.h	/^  bool fetchToPos(size_t Pos) const {$/;"	f	class:llvm::StreamingMemoryObject
fifo_file	FileSystem.h	/^    fifo_file,$/;"	e	enum:llvm::sys::fs::file_type::_
fileSize	PathV1.h	/^    uint64_t    fileSize;   \/\/\/< Size of the file in bytes$/;"	m	class:llvm::sys::FileStatus
file_exists	system_error.h	/^  file_exists                         = EEXIST,$/;"	e	enum:llvm::errc::_
file_exists	system_error.h	/^  file_exists             = 80, \/\/ ERROR_FILE_EXISTS,$/;"	e	enum:llvm::windows_error::_
file_magic	FileSystem.h	/^  explicit file_magic(int v) : v_(_(v)) {}$/;"	f	struct:llvm::sys::fs::file_magic
file_magic	FileSystem.h	/^  file_magic() : v_(unknown) {}$/;"	f	struct:llvm::sys::fs::file_magic
file_magic	FileSystem.h	/^  file_magic(_ v) : v_(v) {}$/;"	f	struct:llvm::sys::fs::file_magic
file_magic	FileSystem.h	/^struct file_magic {$/;"	s	namespace:llvm::sys::fs
file_not_found	FileSystem.h	/^    file_not_found,$/;"	e	enum:llvm::sys::fs::file_type::_
file_not_found	system_error.h	/^  file_not_found          = 2, \/\/ ERROR_FILE_NOT_FOUND,$/;"	e	enum:llvm::windows_error::_
file_status	FileSystem.h	/^  explicit file_status(file_type v=file_type::status_error, $/;"	f	class:llvm::sys::fs::file_status
file_status	FileSystem.h	/^class file_status$/;"	c	namespace:llvm::sys::fs
file_too_large	system_error.h	/^  file_too_large                      = EFBIG,$/;"	e	enum:llvm::errc::_
file_type	FileSystem.h	/^  explicit file_type(int v) : v_(_(v)) {}$/;"	f	struct:llvm::sys::fs::file_type
file_type	FileSystem.h	/^  file_type(_ v) : v_(v) {}$/;"	f	struct:llvm::sys::fs::file_type
file_type	FileSystem.h	/^struct file_type {$/;"	s	namespace:llvm::sys::fs
filename_too_long	system_error.h	/^  filename_too_long                   = ENAMETOOLONG,$/;"	e	enum:llvm::errc::_
fileoff	MachO.h	/^      uint32_t fileoff;$/;"	m	struct:llvm::MachO::segment_command
fileoff	MachO.h	/^      uint64_t fileoff;$/;"	m	struct:llvm::MachO::segment_command_64
filesize	MachO.h	/^      uint32_t filesize;$/;"	m	struct:llvm::MachO::segment_command
filesize	MachO.h	/^      uint64_t filesize;$/;"	m	struct:llvm::MachO::segment_command_64
filetype	MachO.h	/^      uint32_t filetype;$/;"	m	struct:llvm::MachO::mach_header
filetype	MachO.h	/^      uint32_t filetype;$/;"	m	struct:llvm::MachO::mach_header_64
filter	PassNameParser.h	/^  Filter filter;$/;"	m	class:llvm::FilteredPassNameParser
findSuccessor	IntegersSubsetMapping.h	/^  SuccessorClass *findSuccessor(const IntTy& Val) {$/;"	f	class:llvm::IntegersSubsetMapping
fixaddr	OutputBuffer.h	/^    void fixaddr(uint64_t X, unsigned Offset) {$/;"	f	class:llvm::OutputBuffer
fixhalf	OutputBuffer.h	/^    void fixhalf(unsigned short X, unsigned Offset) {$/;"	f	class:llvm::OutputBuffer
fixword	OutputBuffer.h	/^    void fixword(unsigned X, unsigned Offset) {$/;"	f	class:llvm::OutputBuffer
fixxword	OutputBuffer.h	/^    void fixxword(uint64_t X, unsigned Offset) {$/;"	f	class:llvm::OutputBuffer
flags	MachO.h	/^               flags:8;$/;"	m	struct:llvm::MachO::dylib_reference
flags	MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::mach_header
flags	MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::mach_header_64
flags	MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::section
flags	MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::section_64
flags	MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::segment_command
flags	MachO.h	/^      uint32_t flags;$/;"	m	struct:llvm::MachO::segment_command_64
flags	Win64EH.h	/^          flags:5;$/;"	m	struct:llvm::Win64EH::UnwindInfo
flush	raw_ostream.h	/^  void flush() {$/;"	f	class:llvm::raw_ostream
flushBuffer	circular_raw_ostream.h	/^    void flushBuffer(void) {$/;"	f	class:llvm::circular_raw_ostream
fneg_match	PatternMatch.h	/^  fneg_match(const LHS_t &LHS) : L(LHS) {}$/;"	f	struct:llvm::PatternMatch::fneg_match
fneg_match	PatternMatch.h	/^struct fneg_match {$/;"	s	namespace:llvm::PatternMatch
format	Format.h	/^  inline format_object3<T1, T2, T3> format(const char *Fmt, const T1 &Val1,$/;"	f	namespace:llvm
format	Format.h	/^inline format_object1<T> format(const char *Fmt, const T &Val) {$/;"	f	namespace:llvm
format	Format.h	/^inline format_object2<T1, T2> format(const char *Fmt, const T1 &Val1,$/;"	f	namespace:llvm
format	Format.h	/^inline format_object4<T1, T2, T3, T4> format(const char *Fmt, const T1 &Val1,$/;"	f	namespace:llvm
format	Format.h	/^inline format_object5<T1, T2, T3, T4, T5> format(const char *Fmt,const T1 &Val1,$/;"	f	namespace:llvm
format_object1	Format.h	/^  format_object1(const char *fmt, const T &val)$/;"	f	class:llvm::format_object1
format_object1	Format.h	/^class format_object1 : public format_object_base {$/;"	c	namespace:llvm
format_object2	Format.h	/^  format_object2(const char *fmt, const T1 &val1, const T2 &val2)$/;"	f	class:llvm::format_object2
format_object2	Format.h	/^class format_object2 : public format_object_base {$/;"	c	namespace:llvm
format_object3	Format.h	/^  format_object3(const char *fmt, const T1 &val1, const T2 &val2,const T3 &val3)$/;"	f	class:llvm::format_object3
format_object3	Format.h	/^class format_object3 : public format_object_base {$/;"	c	namespace:llvm
format_object4	Format.h	/^  format_object4(const char *fmt, const T1 &val1, const T2 &val2,$/;"	f	class:llvm::format_object4
format_object4	Format.h	/^class format_object4 : public format_object_base {$/;"	c	namespace:llvm
format_object5	Format.h	/^  format_object5(const char *fmt, const T1 &val1, const T2 &val2,$/;"	f	class:llvm::format_object5
format_object5	Format.h	/^class format_object5 : public format_object_base {$/;"	c	namespace:llvm
format_object_base	Format.h	/^  format_object_base(const char *fmt) : Fmt(fmt) {}$/;"	f	class:llvm::format_object_base
format_object_base	Format.h	/^class format_object_base {$/;"	c	namespace:llvm
formatted_raw_ostream	FormattedStream.h	/^    explicit formatted_raw_ostream()$/;"	f	class:llvm::formatted_raw_ostream
formatted_raw_ostream	FormattedStream.h	/^    formatted_raw_ostream(raw_ostream &Stream, bool Delete = false) $/;"	f	class:llvm::formatted_raw_ostream
formatted_raw_ostream	FormattedStream.h	/^  class formatted_raw_ostream : public raw_ostream {$/;"	c	namespace:llvm
frameOffset	Win64EH.h	/^          frameOffset:4;$/;"	m	struct:llvm::Win64EH::UnwindInfo
frameOffset	Win64EH.h	/^  uint16_t frameOffset;$/;"	m	union:llvm::Win64EH::UnwindCode
frameRegister	Win64EH.h	/^  uint8_t frameRegister:4,$/;"	m	struct:llvm::Win64EH::UnwindInfo
free	FileSystem.h	/^  uint64_t free;$/;"	m	struct:llvm::sys::fs::space_info
fromConstantInt	IntegersSubset.h	/^  static IntItem fromConstantInt(const ConstantInt *V) {$/;"	f	class:llvm::IntItem
fromEpochTime	TimeValue.h	/^    void fromEpochTime( SecondsType seconds ) {$/;"	f	class:llvm::sys::TimeValue
fromType	IntegersSubset.h	/^  static IntItem fromType(Type* Ty, const APInt& V) {$/;"	f	class:llvm::IntItem
fromWin32Time	TimeValue.h	/^    void fromWin32Time( uint64_t win32Time ) {$/;"	f	class:llvm::sys::TimeValue
fs	FileSystem.h	/^namespace fs {$/;"	n	namespace:llvm::sys
fsIsValid	PathV1.h	/^      mutable bool fsIsValid;    \/\/\/< Whether we've obtained it or not$/;"	m	class:llvm::sys::PathWithStatus
fs_st_dev	FileSystem.h	/^  dev_t fs_st_dev;$/;"	m	class:llvm::sys::fs::file_status
fs_st_ino	FileSystem.h	/^  ino_t fs_st_ino;$/;"	m	class:llvm::sys::fs::file_status
function_not_supported	system_error.h	/^  function_not_supported              = ENOSYS,$/;"	e	enum:llvm::errc::_
fvmfile_command	MachO.h	/^    struct fvmfile_command {$/;"	s	namespace:llvm::MachO
fvmlib	MachO.h	/^      struct fvmlib fvmlib;$/;"	m	struct:llvm::MachO::fvmlib_command	typeref:struct:llvm::MachO::fvmlib_command::fvmlib
fvmlib	MachO.h	/^    struct fvmlib {$/;"	s	namespace:llvm::MachO
fvmlib_command	MachO.h	/^    struct fvmlib_command {$/;"	s	namespace:llvm::MachO
gen_failure	system_error.h	/^  gen_failure             = 31, \/\/ ERROR_GEN_FAILURE,$/;"	e	enum:llvm::windows_error::_
generic_gep_type_iterator	GetElementPtrTypeIterator.h	/^    generic_gep_type_iterator() {}$/;"	f	class:llvm::generic_gep_type_iterator
generic_gep_type_iterator	GetElementPtrTypeIterator.h	/^  class generic_gep_type_iterator$/;"	c	namespace:llvm
generic_parser_base	CommandLine.h	/^class generic_parser_base {$/;"	c	namespace:llvm::cl
gep_type_begin	GetElementPtrTypeIterator.h	/^  gep_type_begin(Type *Op0, ArrayRef<T> A) {$/;"	f	namespace:llvm
gep_type_begin	GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_begin(const User &GEP) {$/;"	f	namespace:llvm
gep_type_begin	GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_begin(const User *GEP) {$/;"	f	namespace:llvm
gep_type_end	GetElementPtrTypeIterator.h	/^  gep_type_end(Type *Op0, ArrayRef<T> A) {$/;"	f	namespace:llvm
gep_type_end	GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_end(const User &GEP) {$/;"	f	namespace:llvm
gep_type_end	GetElementPtrTypeIterator.h	/^  inline gep_type_iterator gep_type_end(const User *GEP) {$/;"	f	namespace:llvm
gep_type_iterator	GetElementPtrTypeIterator.h	/^  typedef generic_gep_type_iterator<> gep_type_iterator;$/;"	t	namespace:llvm
get	CallSite.h	/^  static CallSiteBase get(ValTy *V) {$/;"	f	class:llvm::CallSiteBase
get	SaveAndRestore.h	/^  T get() { return old_value; }$/;"	f	struct:llvm::SaveAndRestore
get	ThreadLocal.h	/^      T* get() { return static_cast<T*>(getInstance()); }$/;"	f	class:llvm::sys::ThreadLocal
getAPIntValue	IntegersSubset.h	/^  const APInt& getAPIntValue() const {$/;"	f	class:llvm::IntItem
getAddress	DataExtractor.h	/^  uint64_t getAddress(uint32_t *offset_ptr) const {$/;"	f	class:llvm::DataExtractor
getAddressSize	DataExtractor.h	/^  uint8_t getAddressSize() const { return PointerSize; }$/;"	f	class:llvm::DataExtractor
getAnchor	YAMLParser.h	/^  StringRef getAnchor() const { return Anchor; }$/;"	f	class:llvm::yaml::Node
getArgument	CallSite.h	/^  ValTy *getArgument(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
getArgumentEndOffset	CallSite.h	/^  unsigned getArgumentEndOffset() const {$/;"	f	class:llvm::CallSiteBase
getArgumentNo	CallSite.h	/^  unsigned getArgumentNo(value_use_iterator<UserTy> I) const {$/;"	f	class:llvm::CallSiteBase
getAsVoidPointer	PointerLikeTypeTraits.h	/^  static inline const void *getAsVoidPointer(const T* P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	PointerLikeTypeTraits.h	/^  static inline void *getAsVoidPointer(T* P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	PointerLikeTypeTraits.h	/^  static inline void *getAsVoidPointer(uintptr_t P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getAsVoidPointer	ValueHandle.h	/^  static inline void *getAsVoidPointer(ValueHandleBase** P) { return P; }$/;"	f	class:llvm::PointerLikeTypeTraits
getAttributes	CallSite.h	/^  const AttrListPtr &getAttributes() const {$/;"	f	class:llvm::CallSiteBase
getBasicBlockIterator	InstIterator.h	/^  inline BBIty &getBasicBlockIterator()  { return BB; }$/;"	f	class:llvm::InstIterator
getBinding	ELF.h	/^  unsigned char getBinding() const { return st_info >> 4; }$/;"	f	struct:llvm::ELF::Elf32_Sym
getBinding	ELF.h	/^  unsigned char getBinding() const { return st_info >> 4; }$/;"	f	struct:llvm::ELF::Elf64_Sym
getBitWidth	ConstantRange.h	/^  uint32_t getBitWidth() const { return Lower.getBitWidth(); }$/;"	f	class:llvm::ConstantRange
getBits	CommandLine.h	/^  unsigned getBits() { return *Location; }$/;"	f	class:llvm::cl::bits_storage
getBits	CommandLine.h	/^  unsigned getBits() { return Bits; }$/;"	f	class:llvm::cl::bits_storage
getBuffer	MemoryBuffer.h	/^  StringRef getBuffer() const {$/;"	f	class:llvm::MemoryBuffer
getBufferEnd	FileOutputBuffer.h	/^  uint8_t *getBufferEnd() const {$/;"	f	class:llvm::FileOutputBuffer
getBufferEnd	MemoryBuffer.h	/^  const char *getBufferEnd() const   { return BufferEnd; }$/;"	f	class:llvm::MemoryBuffer
getBufferIdentifier	MemoryBuffer.h	/^  virtual const char *getBufferIdentifier() const {$/;"	f	class:llvm::MemoryBuffer
getBufferInfo	SourceMgr.h	/^  const SrcBuffer &getBufferInfo(unsigned i) const {$/;"	f	class:llvm::SourceMgr
getBufferSize	FileOutputBuffer.h	/^  size_t getBufferSize() const {$/;"	f	class:llvm::FileOutputBuffer
getBufferSize	MemoryBuffer.h	/^  size_t getBufferSize() const { return BufferEnd-BufferStart; }$/;"	f	class:llvm::MemoryBuffer
getBufferStart	FileOutputBuffer.h	/^  uint8_t *getBufferStart() const {$/;"	f	class:llvm::FileOutputBuffer
getBufferStart	MemoryBuffer.h	/^  const char *getBufferStart() const { return BufferStart; }$/;"	f	class:llvm::MemoryBuffer
getBufferStart	raw_ostream.h	/^  const char *getBufferStart() const { return OutBufStart; }$/;"	f	class:llvm::raw_ostream
getCalledFunction	CallSite.h	/^  FunTy *getCalledFunction() const {$/;"	f	class:llvm::CallSiteBase
getCalledValue	CallSite.h	/^  ValTy *getCalledValue() const {$/;"	f	class:llvm::CallSiteBase
getCallee	CallSite.h	/^  IterTy getCallee() const {$/;"	f	class:llvm::CallSiteBase
getCaller	CallSite.h	/^  FunTy *getCaller() const { return (*this)->getParent()->getParent(); }$/;"	f	class:llvm::CallSiteBase
getCallingConv	CallSite.h	/^  CallingConv::ID getCallingConv() const {$/;"	f	class:llvm::CallSiteBase
getCase	IntegersSubsetMapping.h	/^  IntegersSubsetTy getCase() {$/;"	f	class:llvm::IntegersSubsetMapping
getCaseSingleNumber	IntegersSubsetMapping.h	/^  const IntTy* getCaseSingleNumber(SuccessorClass *Succ) {$/;"	f	class:llvm::IntegersSubsetMapping
getCases	IntegersSubsetMapping.h	/^  void getCases(Cases& TheCases, bool PreventMerging = false) {$/;"	f	class:llvm::IntegersSubsetMapping
getChainedFunctionEntry	Win64EH.h	/^  RuntimeFunction *getChainedFunctionEntry() {$/;"	f	struct:llvm::Win64EH::UnwindInfo
getCol	DebugLoc.h	/^    unsigned getCol() const {$/;"	f	class:llvm::DebugLoc
getColumnNo	SourceMgr.h	/^  int getColumnNo() const { return ColumnNo; }$/;"	f	class:llvm::SMDiagnostic
getCompl	BranchProbability.h	/^  BranchProbability getCompl() const {$/;"	f	class:llvm::BranchProbability
getContext	CrashRecoveryContext.h	/^  CrashRecoveryContext *getContext() const {$/;"	f	class:llvm::CrashRecoveryContextCleanup
getCursor	GCOV.h	/^  uint64_t getCursor() const { return Cursor; }$/;"	f	class:llvm::GCOVBuffer
getData	DataExtractor.h	/^  StringRef getData() const { return Data; }$/;"	f	class:llvm::DataExtractor
getDataEncoding	ELF.h	/^  unsigned char getDataEncoding() const { return e_ident[EI_DATA]; }$/;"	f	struct:llvm::ELF::Elf32_Ehdr
getDataEncoding	ELF.h	/^  unsigned char getDataEncoding() const { return e_ident[EI_DATA]; }$/;"	f	struct:llvm::ELF::Elf64_Ehdr
getDefault	CommandLine.h	/^  const OptionValue<DataType> &getDefault() const { return Default; }$/;"	f	class:llvm::cl::opt_storage
getDenominator	BranchProbability.h	/^  uint32_t getDenominator() const { return D; }$/;"	f	class:llvm::BranchProbability
getDesc	Registry.h	/^    const char *getDesc() const { return Desc; }$/;"	f	class:llvm::SimpleRegistryEntry
getDescription	CommandLine.h	/^  const char *getDescription(unsigned N) const {$/;"	f	class:llvm::cl::parser
getDiagContext	SourceMgr.h	/^  void *getDiagContext() const { return DiagContext; }$/;"	f	class:llvm::SourceMgr
getDiagHandler	SourceMgr.h	/^  DiagHandlerTy getDiagHandler() const { return DiagHandler; }$/;"	f	class:llvm::SourceMgr
getEdgeAttributes	DOTGraphTraits.h	/^  static std::string getEdgeAttributes(const void *, EdgeIter,$/;"	f	struct:llvm::DefaultDOTGraphTraits
getEdgeDestLabel	DOTGraphTraits.h	/^  static std::string getEdgeDestLabel(const void *, unsigned) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getEdgeSourceLabel	DOTGraphTraits.h	/^  static std::string getEdgeSourceLabel(const void *, EdgeIter) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getEdgeSourceLabels	GraphWriter.h	/^  bool getEdgeSourceLabels(raw_ostream &O, NodeType *Node) {$/;"	f	class:llvm::GraphWriter
getEdgeTarget	DOTGraphTraits.h	/^  static EdgeIter getEdgeTarget(const void *, EdgeIter I) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getEmptyKey	DebugLoc.h	/^    static DebugLoc getEmptyKey() { return DebugLoc::getEmptyKey(); }$/;"	f	struct:llvm::DenseMapInfo
getEmptyKey	DebugLoc.h	/^    static DebugLoc getEmptyKey() {$/;"	f	class:llvm::DebugLoc
getEmptyKey	ValueHandle.h	/^  static inline AssertingVH<T> getEmptyKey() {$/;"	f	struct:llvm::DenseMapInfo
getEntryFrequency	BlockFrequency.h	/^  static uint64_t getEntryFrequency() { return ENTRY_FREQ; }$/;"	f	class:llvm::BlockFrequency
getEntryNode	CFG.h	/^  static NodeType *getEntryNode(BasicBlock *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	CFG.h	/^  static NodeType *getEntryNode(Function *F) { return &F->getEntryBlock(); }$/;"	f	struct:llvm::GraphTraits
getEntryNode	CFG.h	/^  static NodeType *getEntryNode(Inverse<BasicBlock *> G) { return G.Graph; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	CFG.h	/^  static NodeType *getEntryNode(Inverse<Function*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CFG.h	/^  static NodeType *getEntryNode(Inverse<const BasicBlock*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CFG.h	/^  static NodeType *getEntryNode(Inverse<const Function *> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	CFG.h	/^  static NodeType *getEntryNode(const BasicBlock *BB) { return BB; }$/;"	f	struct:llvm::GraphTraits
getEntryNode	CFG.h	/^  static NodeType *getEntryNode(const Function *F) {return &F->getEntryBlock();}$/;"	f	struct:llvm::GraphTraits
getEntryNode	DataFlow.h	/^  static NodeType *getEntryNode(Inverse<User*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	DataFlow.h	/^  static NodeType *getEntryNode(Inverse<const User*> G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	DataFlow.h	/^  static NodeType *getEntryNode(Value *G) {$/;"	f	struct:llvm::GraphTraits
getEntryNode	DataFlow.h	/^  static NodeType *getEntryNode(const Value *G) {$/;"	f	struct:llvm::GraphTraits
getExceptionData	Win64EH.h	/^  void *getExceptionData() {$/;"	f	struct:llvm::Win64EH::UnwindInfo
getExtraOptionNames	CommandLine.h	/^  virtual void getExtraOptionNames(SmallVectorImpl<const char*> &) {}$/;"	f	class:llvm::cl::Option
getExtraOptionNames	CommandLine.h	/^  virtual void getExtraOptionNames(SmallVectorImpl<const char*> &OptionNames) {$/;"	f	class:llvm::cl::bits
getExtraOptionNames	CommandLine.h	/^  virtual void getExtraOptionNames(SmallVectorImpl<const char*> &OptionNames) {$/;"	f	class:llvm::cl::list
getExtraOptionNames	CommandLine.h	/^  virtual void getExtraOptionNames(SmallVectorImpl<const char*> &OptionNames) {$/;"	f	class:llvm::cl::opt
getExtraOptionNames	CommandLine.h	/^  void getExtraOptionNames(SmallVectorImpl<const char*> &) {}$/;"	f	class:llvm::cl::basic_parser_impl
getExtraOptionNames	CommandLine.h	/^  void getExtraOptionNames(SmallVectorImpl<const char*> &OptionNames) {$/;"	f	class:llvm::cl::generic_parser_base
getFileClass	ELF.h	/^  unsigned char getFileClass() const { return e_ident[EI_CLASS]; }$/;"	f	struct:llvm::ELF::Elf32_Ehdr
getFileClass	ELF.h	/^  unsigned char getFileClass() const { return e_ident[EI_CLASS]; }$/;"	f	struct:llvm::ELF::Elf64_Ehdr
getFilename	SourceMgr.h	/^  const std::string &getFilename() const { return Filename; }$/;"	f	class:llvm::SMDiagnostic
getFormattingFlag	CommandLine.h	/^  inline enum FormattingFlags getFormattingFlag() const {$/;"	f	class:llvm::cl::Option
getFrequency	BlockFrequency.h	/^  uint64_t getFrequency() const { return Frequency; }$/;"	f	class:llvm::BlockFrequency
getFromPointer	SMLoc.h	/^  static SMLoc getFromPointer(const char *Ptr) {$/;"	f	class:llvm::SMLoc
getFromVoidPointer	PointerLikeTypeTraits.h	/^  static inline T *getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	PointerLikeTypeTraits.h	/^  static inline const T *getFromVoidPointer(const void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	PointerLikeTypeTraits.h	/^  static inline uintptr_t getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getFromVoidPointer	ValueHandle.h	/^  static inline ValueHandleBase **getFromVoidPointer(void *P) {$/;"	f	class:llvm::PointerLikeTypeTraits
getGraphName	DOTGraphTraits.h	/^  static std::string getGraphName(const GraphType &) { return ""; }$/;"	f	struct:llvm::DefaultDOTGraphTraits
getGraphProperties	DOTGraphTraits.h	/^  static std::string getGraphProperties(const GraphType &) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getGroup	PathV1.h	/^    uint32_t getGroup() const { return group; }$/;"	f	class:llvm::sys::FileStatus
getHashValue	ValueHandle.h	/^  static unsigned getHashValue(const AssertingVH<T> &Val) {$/;"	f	struct:llvm::DenseMapInfo
getHigh	IntegersSubset.h	/^    const IntType& getHigh() const {$/;"	f	class:llvm::IntRange
getHintNameRVA	COFF.h	/^    uint32_t getHintNameRVA() const {$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
getIndexedType	GetElementPtrTypeIterator.h	/^    Type *getIndexedType() const {$/;"	f	class:llvm::generic_gep_type_iterator
getInstruction	CallSite.h	/^  InstrTy *getInstruction() const { return I.getPointer(); }$/;"	f	class:llvm::CallSiteBase
getInstructionIterator	InstIterator.h	/^  inline BIty  &getInstructionIterator() { return BI; }$/;"	f	class:llvm::InstIterator
getItem	IntegersSubset.h	/^  Range getItem(unsigned idx) const {$/;"	f	class:llvm::IntegersSubsetGeneric
getItemFromConstant	IntegersSubset.h	/^  static Range getItemFromConstant(Constant *C, unsigned idx) {$/;"	f	class:llvm::IntegersSubset
getKind	SourceMgr.h	/^  SourceMgr::DiagKind getKind() const { return Kind; }$/;"	f	class:llvm::SMDiagnostic
getKind	ValueHandle.h	/^  HandleBaseKind getKind() const { return PrevPair.getInt(); }$/;"	f	class:llvm::ValueHandleBase
getLanguageSpecificData	Win64EH.h	/^  void *getLanguageSpecificData() {$/;"	f	struct:llvm::Win64EH::UnwindInfo
getLanguageSpecificHandlerOffset	Win64EH.h	/^  uint64_t getLanguageSpecificHandlerOffset() {$/;"	f	struct:llvm::Win64EH::UnwindInfo
getLazyIRFileModule	IRReader.h	/^  inline Module *getLazyIRFileModule(const std::string &Filename,$/;"	f	namespace:llvm
getLazyIRModule	IRReader.h	/^  inline Module *getLazyIRModule(MemoryBuffer *Buffer,$/;"	f	namespace:llvm
getLine	DebugLoc.h	/^    unsigned getLine() const {$/;"	f	class:llvm::DebugLoc
getLineContents	SourceMgr.h	/^  const std::string &getLineContents() const { return LineContents; }$/;"	f	class:llvm::SMDiagnostic
getLineNo	SourceMgr.h	/^  int getLineNo() const { return LineNo; }$/;"	f	class:llvm::SMDiagnostic
getLoc	SourceMgr.h	/^  SMLoc getLoc() const { return Loc; }$/;"	f	class:llvm::SMDiagnostic
getLow	IntegersSubset.h	/^    const IntType& getLow() const {$/;"	f	class:llvm::IntRange
getLower	ConstantRange.h	/^  const APInt &getLower() const { return Lower; }$/;"	f	class:llvm::ConstantRange
getMemUsed	Timer.h	/^  ssize_t getMemUsed() const { return MemUsed; }$/;"	f	class:llvm::TimeRecord
getMemoryBuffer	SourceMgr.h	/^  const MemoryBuffer *getMemoryBuffer(unsigned i) const {$/;"	f	class:llvm::SourceMgr
getMessage	SourceMgr.h	/^  const std::string &getMessage() const { return Message; }$/;"	f	class:llvm::SMDiagnostic
getMiscFlags	CommandLine.h	/^  inline unsigned getMiscFlags() const {$/;"	f	class:llvm::cl::Option
getMode	PathV1.h	/^    uint32_t getMode() const { return mode; }$/;"	f	class:llvm::sys::FileStatus
getName	Registry.h	/^    const char *getName() const { return Name; }$/;"	f	class:llvm::SimpleRegistryEntry
getName	TargetRegistry.h	/^    const char *getName() const { return Name; }$/;"	f	class:llvm::Target
getName	Timer.h	/^  const std::string &getName() const { return Name; }$/;"	f	class:llvm::Timer
getName	YAMLParser.h	/^  StringRef getName() const { return Name; }$/;"	f	class:llvm::yaml::AliasNode
getNameType	COFF.h	/^    ImportNameType getNameType() const {$/;"	f	struct:llvm::COFF::ImportHeader
getNext	Recycler.h	/^  static RecyclerStruct *getNext(const RecyclerStruct *t) { return t->Next; }$/;"	f	struct:llvm::ilist_traits
getNext	TargetRegistry.h	/^    const Target *getNext() const { return Next; }$/;"	f	class:llvm::Target
getNextEntry	PrettyStackTrace.h	/^    const PrettyStackTraceEntry *getNextEntry() const { return NextEntry; }$/;"	f	class:llvm::PrettyStackTraceEntry
getNextRegisteredOption	CommandLine.h	/^  Option *getNextRegisteredOption() const { return NextRegistered; }$/;"	f	class:llvm::cl::Option
getNodeAttributes	DOTGraphTraits.h	/^  static std::string getNodeAttributes(const void *,$/;"	f	struct:llvm::DefaultDOTGraphTraits
getNodeLabel	DOTGraphTraits.h	/^  std::string getNodeLabel(const void *, const GraphType &) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
getNumAdditionalVals	CommandLine.h	/^  inline unsigned getNumAdditionalVals() const { return AdditionalVals; }$/;"	f	class:llvm::cl::Option
getNumItems	IntegersSubset.h	/^  unsigned getNumItems() const {$/;"	f	class:llvm::IntegersSubsetGeneric
getNumItemsFromConstant	IntegersSubset.h	/^  static unsigned getNumItemsFromConstant(Constant *C) {$/;"	f	class:llvm::IntegersSubset
getNumOccurrences	CommandLine.h	/^  inline int getNumOccurrences() const { return NumOccurrences; }$/;"	f	class:llvm::cl::Option
getNumOccurrencesFlag	CommandLine.h	/^  inline enum NumOccurrencesFlag getNumOccurrencesFlag() const {$/;"	f	class:llvm::cl::Option
getNumOptions	CommandLine.h	/^  unsigned getNumOptions() const { return unsigned(Values.size()); }$/;"	f	class:llvm::cl::parser
getNumerator	BranchProbability.h	/^  uint32_t getNumerator() const { return N; }$/;"	f	class:llvm::BranchProbability
getOStream	GraphWriter.h	/^  raw_ostream &getOStream() {$/;"	f	class:llvm::GraphWriter
getOne	BranchProbability.h	/^  static BranchProbability getOne() { return BranchProbability(1, 1); }$/;"	f	class:llvm::BranchProbability
getOperand	GetElementPtrTypeIterator.h	/^    Value *getOperand() const { return *OpIt; }$/;"	f	class:llvm::generic_gep_type_iterator
getOperandNo	CFG.h	/^  unsigned getOperandNo() const {$/;"	f	class:llvm::PredIterator
getOption	CommandLine.h	/^  const char *getOption(unsigned N) const { return Values[N].Name; }$/;"	f	class:llvm::cl::parser
getOptionHiddenFlag	CommandLine.h	/^  inline enum OptionHidden getOptionHiddenFlag() const {$/;"	f	class:llvm::cl::Option
getOptionValue	CommandLine.h	/^  virtual const GenericOptionValue &getOptionValue(unsigned N) const {$/;"	f	class:llvm::cl::parser
getOptionWidth	CommandLine.h	/^  virtual size_t getOptionWidth() const {return Parser.getOptionWidth(*this);}$/;"	f	class:llvm::cl::bits
getOptionWidth	CommandLine.h	/^  virtual size_t getOptionWidth() const {return Parser.getOptionWidth(*this);}$/;"	f	class:llvm::cl::list
getOptionWidth	CommandLine.h	/^  virtual size_t getOptionWidth() const {return Parser.getOptionWidth(*this);}$/;"	f	class:llvm::cl::opt
getOrdinal	COFF.h	/^    uint16_t getOrdinal() const {$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
getParamAlignment	CallSite.h	/^  uint16_t getParamAlignment(uint16_t i) const {$/;"	f	class:llvm::CallSiteBase
getParentIncludeLoc	SourceMgr.h	/^  SMLoc getParentIncludeLoc(unsigned i) const {$/;"	f	class:llvm::SourceMgr
getParser	CommandLine.h	/^  ParserClass &getParser() { return Parser; }$/;"	f	class:llvm::cl::bits
getParser	CommandLine.h	/^  ParserClass &getParser() { return Parser; }$/;"	f	class:llvm::cl::list
getParser	CommandLine.h	/^  ParserClass &getParser() { return Parser; }$/;"	f	class:llvm::cl::opt
getPath	FileOutputBuffer.h	/^  StringRef getPath() const {$/;"	f	class:llvm::FileOutputBuffer
getPointer	SMLoc.h	/^  const char *getPointer() const { return Ptr; }$/;"	f	class:llvm::SMLoc
getPosition	CommandLine.h	/^  inline unsigned getPosition() const { return Position; }$/;"	f	class:llvm::cl::Option
getPosition	CommandLine.h	/^  unsigned getPosition(unsigned optnum) const {$/;"	f	class:llvm::cl::bits
getPosition	CommandLine.h	/^  unsigned getPosition(unsigned optnum) const {$/;"	f	class:llvm::cl::list
getPrev	Recycler.h	/^  static RecyclerStruct *getPrev(const RecyclerStruct *t) { return t->Prev; }$/;"	f	struct:llvm::ilist_traits
getPrevPtr	ValueHandle.h	/^  ValueHandleBase **getPrevPtr() const { return PrevPair.getPointer(); }$/;"	f	class:llvm::ValueHandleBase
getProcessTime	Timer.h	/^  double getProcessTime() const { return UserTime+SystemTime; }$/;"	f	class:llvm::TimeRecord
getRanges	SourceMgr.h	/^  const std::vector<std::pair<unsigned, unsigned> > &getRanges() const {$/;"	f	class:llvm::SMDiagnostic
getRawValue	YAMLParser.h	/^  StringRef getRawValue() const { return Value; }$/;"	f	class:llvm::yaml::ScalarNode
getRoot	YAMLParser.h	/^  Node *getRoot() {$/;"	f	class:llvm::yaml::Document
getShortDescription	TargetRegistry.h	/^    const char *getShortDescription() const { return ShortDesc; }$/;"	f	class:llvm::Target
getSimplifiedValue	Casting.h	/^  static SimpleType &getSimplifiedValue(From &Val) { return Val; }$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	Casting.h	/^  static SimpleType &getSimplifiedValue(const From &Val) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	ValueHandle.h	/^  static SimpleType getSimplifiedValue(const AssertingVH<Value> &AVH) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	ValueHandle.h	/^  static SimpleType getSimplifiedValue(const CallbackVH &CVH) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	ValueHandle.h	/^  static SimpleType getSimplifiedValue(const TrackingVH<Value> &AVH) {$/;"	f	struct:llvm::simplify_type
getSimplifiedValue	ValueHandle.h	/^  static SimpleType getSimplifiedValue(const WeakVH &WVH) {$/;"	f	struct:llvm::simplify_type
getSingleElement	ConstantRange.h	/^  const APInt *getSingleElement() const {$/;"	f	class:llvm::ConstantRange
getSingleNumber	IntegersSubset.h	/^  const IntTy& getSingleNumber(unsigned idx) const {$/;"	f	class:llvm::IntegersSubsetGeneric
getSingleValue	IntegersSubset.h	/^  APInt getSingleValue(unsigned idx) const {$/;"	f	class:llvm::IntegersSubsetGeneric
getSize	IntegersSubset.h	/^  unsigned getSize() const {$/;"	f	class:llvm::IntegersSubsetGeneric
getSize	PathV1.h	/^    uint64_t getSize() const { return fileSize; }$/;"	f	class:llvm::sys::FileStatus
getSource	CFG.h	/^  inline BB_ *getSource() {$/;"	f	class:llvm::SuccIterator
getSourceMgr	SourceMgr.h	/^  const SourceMgr *getSourceMgr() const { return SM; }$/;"	f	class:llvm::SMDiagnostic
getSourceRange	YAMLParser.h	/^  SMRange getSourceRange() const { return SourceRange; }$/;"	f	class:llvm::yaml::Node
getSuccessorIndex	CFG.h	/^  unsigned getSuccessorIndex() const { return idx; }$/;"	f	class:llvm::SuccIterator
getSymbol	ELF.h	/^  Elf32_Word getSymbol() const { return (r_info >> 8); }$/;"	f	struct:llvm::ELF::Elf32_Rel
getSymbol	ELF.h	/^  Elf32_Word getSymbol() const { return (r_info >> 8); }$/;"	f	struct:llvm::ELF::Elf32_Rela
getSymbol	ELF.h	/^  Elf64_Xword getSymbol() const { return (r_info >> 32); }$/;"	f	struct:llvm::ELF::Elf64_Rel
getSymbol	ELF.h	/^  Elf64_Xword getSymbol() const { return (r_info >> 32); }$/;"	f	struct:llvm::ELF::Elf64_Rela
getSystemTime	Timer.h	/^  double getSystemTime() const { return SystemTime; }$/;"	f	class:llvm::TimeRecord
getTimespecTime	TimeValue.h	/^    void getTimespecTime( uint64_t& seconds, uint32_t& nanos ) const {$/;"	f	class:llvm::sys::TimeValue
getTimestamp	PathV1.h	/^    TimeValue getTimestamp() const { return modTime; }$/;"	f	class:llvm::sys::FileStatus
getTombstoneKey	DebugLoc.h	/^    static DebugLoc getTombstoneKey() { return DebugLoc::getTombstoneKey(); }$/;"	f	struct:llvm::DenseMapInfo
getTombstoneKey	DebugLoc.h	/^    static DebugLoc getTombstoneKey() {$/;"	f	class:llvm::DebugLoc
getTombstoneKey	ValueHandle.h	/^  static inline T* getTombstoneKey() {$/;"	f	struct:llvm::DenseMapInfo
getTripleMatchQuality	TargetRegistry.h	/^    static unsigned getTripleMatchQuality(const std::string &TT) {$/;"	f	struct:llvm::RegisterTarget
getType	COFF.h	/^    ImportType getType() const {$/;"	f	struct:llvm::COFF::ImportHeader
getType	CallSite.h	/^  Type *getType() const { return (*this)->getType(); }$/;"	f	class:llvm::CallSiteBase
getType	ELF.h	/^  unsigned char getType() const { return (unsigned char) (r_info & 0x0ff); }$/;"	f	struct:llvm::ELF::Elf32_Rel
getType	ELF.h	/^  unsigned char getType() const { return (unsigned char) (r_info & 0x0ff); }$/;"	f	struct:llvm::ELF::Elf32_Rela
getType	ELF.h	/^  unsigned char getType() const { return st_info & 0x0f; }$/;"	f	struct:llvm::ELF::Elf32_Sym
getType	ELF.h	/^  unsigned char getType() const { return st_info & 0x0f; }$/;"	f	struct:llvm::ELF::Elf64_Sym
getType	ELF.h	/^  unsigned char getType() const {$/;"	f	struct:llvm::ELF::Elf64_Rel
getType	ELF.h	/^  unsigned char getType() const {$/;"	f	struct:llvm::ELF::Elf64_Rela
getType	YAMLParser.h	/^  unsigned int getType() const { return TypeID; }$/;"	f	class:llvm::yaml::Node
getUniqueID	PathV1.h	/^    uint64_t getUniqueID() const { return uniqueID; }$/;"	f	class:llvm::sys::FileStatus
getUpper	ConstantRange.h	/^  const APInt &getUpper() const { return Upper; }$/;"	f	class:llvm::ConstantRange
getUse	CFG.h	/^  Use &getUse() const {$/;"	f	class:llvm::PredIterator
getUser	PathV1.h	/^    uint32_t getUser() const { return user; }$/;"	f	class:llvm::sys::FileStatus
getUserTime	Timer.h	/^  double getUserTime() const { return UserTime; }$/;"	f	class:llvm::TimeRecord
getValPtr	ValueHandle.h	/^  Value *getValPtr() const { return VP.getPointer(); }$/;"	f	class:llvm::ValueHandleBase
getValPtr	ValueHandle.h	/^  ValueTy *getValPtr() const {$/;"	f	class:llvm::AssertingVH
getValPtr	ValueHandle.h	/^  ValueTy *getValPtr() const {$/;"	f	class:llvm::TrackingVH
getValPtrInt	ValueHandle.h	/^  unsigned getValPtrInt() const { return VP.getInt(); }$/;"	f	class:llvm::ValueHandleBase
getValue	CommandLine.h	/^  DataType &getValue() { check(); return *Location; }$/;"	f	class:llvm::cl::opt_storage
getValue	CommandLine.h	/^  DataType &getValue() { return *this; }$/;"	f	class:llvm::cl::opt_storage
getValue	CommandLine.h	/^  DataType &getValue() { return Value; }$/;"	f	class:llvm::cl::opt_storage
getValue	CommandLine.h	/^  DataType getValue() const { return Value; }$/;"	f	class:llvm::cl::opt_storage
getValue	CommandLine.h	/^  const DataType &getValue() const { check(); return *Location; }$/;"	f	class:llvm::cl::opt_storage
getValue	CommandLine.h	/^  const DataType &getValue() const { llvm_unreachable("no default value"); }$/;"	f	struct:llvm::cl::OptionValueBase
getValue	CommandLine.h	/^  const DataType &getValue() const { return *this; }$/;"	f	class:llvm::cl::opt_storage
getValue	CommandLine.h	/^  const DataType &getValue() const {$/;"	f	class:llvm::cl::OptionValueCopy
getValueExpectedFlag	CommandLine.h	/^  inline enum ValueExpected getValueExpectedFlag() const {$/;"	f	class:llvm::cl::Option
getValueExpectedFlagDefault	CommandLine.h	/^  enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::basic_parser_impl
getValueExpectedFlagDefault	CommandLine.h	/^  enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::generic_parser_base
getValueExpectedFlagDefault	CommandLine.h	/^  enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::parser
getValueExpectedFlagDefault	CommandLine.h	/^  virtual enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::Option
getValueExpectedFlagDefault	CommandLine.h	/^  virtual enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::bits
getValueExpectedFlagDefault	CommandLine.h	/^  virtual enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::list
getValueExpectedFlagDefault	CommandLine.h	/^  virtual enum ValueExpected getValueExpectedFlagDefault() const {$/;"	f	class:llvm::cl::opt
getValueName	CommandLine.h	/^  virtual const char *getValueName() const { return "char"; }$/;"	f	class:llvm::cl::parser
getValueName	CommandLine.h	/^  virtual const char *getValueName() const { return "int"; }$/;"	f	class:llvm::cl::parser
getValueName	CommandLine.h	/^  virtual const char *getValueName() const { return "number"; }$/;"	f	class:llvm::cl::parser
getValueName	CommandLine.h	/^  virtual const char *getValueName() const { return "string"; }$/;"	f	class:llvm::cl::parser
getValueName	CommandLine.h	/^  virtual const char *getValueName() const { return "uint"; }$/;"	f	class:llvm::cl::parser
getValueName	CommandLine.h	/^  virtual const char *getValueName() const { return "value"; }$/;"	f	class:llvm::cl::basic_parser_impl
getValueName	CommandLine.h	/^  virtual const char *getValueName() const { return 0; }$/;"	f	class:llvm::cl::parser
getWallTime	Timer.h	/^  double getWallTime() const { return WallTime; }$/;"	f	class:llvm::TimeRecord
getZero	BranchProbability.h	/^  static BranchProbability getZero() { return BranchProbability(0, 1); }$/;"	f	class:llvm::BranchProbability
group	PathV1.h	/^    uint32_t    group;      \/\/\/< Group ID of owner, if applicable$/;"	m	class:llvm::sys::FileStatus
group_all	FileSystem.h	/^  group_all    = group_read | group_write | group_exe,$/;"	e	enum:llvm::sys::fs::perms
group_exe	FileSystem.h	/^  group_exe    =  010, $/;"	e	enum:llvm::sys::fs::perms
group_read	FileSystem.h	/^  group_read   =  040, $/;"	e	enum:llvm::sys::fs::perms
group_write	FileSystem.h	/^  group_write  =  020, $/;"	e	enum:llvm::sys::fs::perms
handleOccurrence	CommandLine.h	/^  virtual bool handleOccurrence(unsigned pos, StringRef ArgName, StringRef Arg){$/;"	f	class:llvm::cl::bits
handleOccurrence	CommandLine.h	/^  virtual bool handleOccurrence(unsigned pos, StringRef ArgName, StringRef Arg){$/;"	f	class:llvm::cl::list
handleOccurrence	CommandLine.h	/^  virtual bool handleOccurrence(unsigned pos, StringRef ArgName,$/;"	f	class:llvm::cl::opt
handleTagDirective	YAMLParser.h	/^  void handleTagDirective(const Token &Tag) {$/;"	f	class:llvm::yaml::Document
handle_disk_full	system_error.h	/^  handle_disk_full        = 39, \/\/ ERROR_HANDLE_DISK_FULL,$/;"	e	enum:llvm::windows_error::_
handle_eof	system_error.h	/^  handle_eof              = 38, \/\/ ERROR_HANDLE_EOF,$/;"	e	enum:llvm::windows_error::_
hasArgStr	CommandLine.h	/^  bool hasArgStr() const { return ArgStr[0] != 0; }$/;"	f	class:llvm::cl::Option
hasArgStr	CommandLine.h	/^  bool hasArgStr;$/;"	m	class:llvm::cl::generic_parser_base
hasArgument	CallSite.h	/^  bool hasArgument(const Value *Arg) const {$/;"	f	class:llvm::CallSiteBase
hasAsmPrinter	TargetRegistry.h	/^    bool hasAsmPrinter() const { return AsmPrinterCtorFn != 0; }$/;"	f	class:llvm::Target
hasAsmStreamer	TargetRegistry.h	/^    bool hasAsmStreamer() const { return AsmStreamerCtorFn != 0; }$/;"	f	class:llvm::Target
hasEdgeDestLabels	DOTGraphTraits.h	/^  static bool hasEdgeDestLabels() {$/;"	f	struct:llvm::DefaultDOTGraphTraits
hasFnAttr	CallSite.h	/^  bool hasFnAttr(Attributes::AttrVal A) const {$/;"	f	class:llvm::CallSiteBase
hasJIT	TargetRegistry.h	/^    bool hasJIT() const { return HasJIT; }$/;"	f	class:llvm::Target
hasMCAsmBackend	TargetRegistry.h	/^    bool hasMCAsmBackend() const { return MCAsmBackendCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCAsmLexer	TargetRegistry.h	/^    bool hasMCAsmLexer() const { return MCAsmLexerCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCAsmParser	TargetRegistry.h	/^    bool hasMCAsmParser() const { return MCAsmParserCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCCodeEmitter	TargetRegistry.h	/^    bool hasMCCodeEmitter() const { return MCCodeEmitterCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCDisassembler	TargetRegistry.h	/^    bool hasMCDisassembler() const { return MCDisassemblerCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCInstPrinter	TargetRegistry.h	/^    bool hasMCInstPrinter() const { return MCInstPrinterCtorFn != 0; }$/;"	f	class:llvm::Target
hasMCObjectStreamer	TargetRegistry.h	/^    bool hasMCObjectStreamer() const { return MCObjectStreamerCtorFn != 0; }$/;"	f	class:llvm::Target
hasNodeAddressLabel	DOTGraphTraits.h	/^  static bool hasNodeAddressLabel(const void *, const GraphType &) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
hasTargetMachine	TargetRegistry.h	/^    bool hasTargetMachine() const { return TargetMachineCtorFn != 0; }$/;"	f	class:llvm::Target
hasValue	CommandLine.h	/^  bool hasValue() const { return Valid; }$/;"	f	class:llvm::cl::OptionValueCopy
hasValue	CommandLine.h	/^  bool hasValue() const { return false; }$/;"	f	struct:llvm::cl::OptionValueBase
has_colors	raw_ostream.h	/^  virtual bool has_colors() const { return is_displayed(); }$/;"	f	class:llvm::raw_ostream
has_error	raw_ostream.h	/^  bool has_error() const {$/;"	f	class:llvm::raw_fd_ostream
head	CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup *head;$/;"	m	class:llvm::CrashRecoveryContext
header	COFF.h	/^  struct header {$/;"	s	namespace:llvm::COFF
header_addr	MachO.h	/^      uint32_t header_addr;$/;"	m	struct:llvm::MachO::fvmfile_command
header_addr	MachO.h	/^      uint32_t header_addr;$/;"	m	struct:llvm::MachO::fvmlib
holds	MutexGuard.h	/^    bool holds(const sys::Mutex& lock) const { return &M == &lock; }$/;"	f	class:llvm::MutexGuard
host_unreachable	system_error.h	/^  host_unreachable                    = EHOSTUNREACH,$/;"	e	enum:llvm::errc::_
ident_command	MachO.h	/^    struct ident_command {$/;"	s	namespace:llvm::MachO
identifier_removed	system_error.h	/^  identifier_removed                  = EIDRM,$/;"	e	enum:llvm::errc::_
idx	CFG.h	/^  unsigned idx;$/;"	m	class:llvm::SuccIterator
iextdefsym	MachO.h	/^      uint32_t iextdefsym;$/;"	m	struct:llvm::MachO::dylib_module
iextdefsym	MachO.h	/^      uint32_t iextdefsym;$/;"	m	struct:llvm::MachO::dylib_module_64
iextdefsym	MachO.h	/^      uint32_t iextdefsym;$/;"	m	struct:llvm::MachO::dysymtab_command
iextrel	MachO.h	/^      uint32_t iextrel;$/;"	m	struct:llvm::MachO::dylib_module
iextrel	MachO.h	/^      uint32_t iextrel;$/;"	m	struct:llvm::MachO::dylib_module_64
ignorablePass	PassNameParser.h	/^  inline bool ignorablePass(const PassInfo *P) const {$/;"	f	class:llvm::PassNameParser
ignorablePassImpl	PassNameParser.h	/^  bool ignorablePassImpl(const PassInfo *P) const { return !filter(*P); }$/;"	f	class:llvm::FilteredPassNameParser
ignorablePassImpl	PassNameParser.h	/^  virtual bool ignorablePassImpl(const PassInfo *P) const { return false; }$/;"	f	class:llvm::PassNameParser
iinit_iterm	MachO.h	/^      uint32_t iinit_iterm;$/;"	m	struct:llvm::MachO::dylib_module
iinit_iterm	MachO.h	/^      uint32_t iinit_iterm;$/;"	m	struct:llvm::MachO::dylib_module_64
ilist_traits	Recycler.h	/^struct ilist_traits<RecyclerStruct> :$/;"	s	namespace:llvm
illegal_byte_sequence	system_error.h	/^  illegal_byte_sequence               = EILSEQ,$/;"	e	enum:llvm::errc::_
ilocalsym	MachO.h	/^      uint32_t ilocalsym;$/;"	m	struct:llvm::MachO::dylib_module
ilocalsym	MachO.h	/^      uint32_t ilocalsym;$/;"	m	struct:llvm::MachO::dylib_module_64
ilocalsym	MachO.h	/^      uint32_t ilocalsym;$/;"	m	struct:llvm::MachO::dysymtab_command
inappropriate_io_control_operation	system_error.h	/^  inappropriate_io_control_operation  = ENOTTY,$/;"	e	enum:llvm::errc::_
increment	FileSystem.h	/^  directory_iterator &increment(error_code &ec) {$/;"	f	class:llvm::sys::fs::directory_iterator
increment	FileSystem.h	/^  recursive_directory_iterator &increment(error_code &ec) {$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
index_is_valid	CFG.h	/^  inline bool index_is_valid(int idx) {$/;"	f	class:llvm::SuccIterator
indirectsymoff	MachO.h	/^      uint32_t indirectsymoff;$/;"	m	struct:llvm::MachO::dysymtab_command
init	CommandLine.h	/^initializer<Ty> init(const Ty &Val) {$/;"	f	namespace:llvm::cl
init	Registry.h	/^      void init() {$/;"	f	class:llvm::Registry::listener
init_address	MachO.h	/^      uint32_t init_address;$/;"	m	struct:llvm::MachO::routines_command
init_address	MachO.h	/^      uint64_t init_address;$/;"	m	struct:llvm::MachO::routines_command_64
init_module	MachO.h	/^      uint32_t init_module;$/;"	m	struct:llvm::MachO::routines_command
init_module	MachO.h	/^      uint64_t init_module;$/;"	m	struct:llvm::MachO::routines_command_64
initialize	CommandLine.h	/^  void initialize(Opt &O) {$/;"	f	class:llvm::cl::parser
initialize	CommandLine.h	/^  void initialize(Option &) {}$/;"	f	class:llvm::cl::basic_parser_impl
initialize	CommandLine.h	/^  void initialize(Option &O) {$/;"	f	class:llvm::cl::generic_parser_base
initialize	PassNameParser.h	/^  void initialize(cl::Option &O) {$/;"	f	class:llvm::PassNameParser
initialize	RegistryParser.h	/^    void initialize(cl::Option &O) {$/;"	f	class:llvm::RegistryParser
initializer	CommandLine.h	/^  initializer(const Ty &Val) : Init(Val) {}$/;"	f	struct:llvm::cl::initializer
initializer	CommandLine.h	/^struct initializer {$/;"	s	namespace:llvm::cl
initprot	MachO.h	/^      uint32_t initprot;$/;"	m	struct:llvm::MachO::segment_command
initprot	MachO.h	/^      uint32_t initprot;$/;"	m	struct:llvm::MachO::segment_command_64
inst_begin	InstIterator.h	/^inline const_inst_iterator inst_begin(const Function &F) {$/;"	f	namespace:llvm
inst_begin	InstIterator.h	/^inline const_inst_iterator inst_begin(const Function *F) {$/;"	f	namespace:llvm
inst_begin	InstIterator.h	/^inline inst_iterator inst_begin(Function &F) { return inst_iterator(F); }$/;"	f	namespace:llvm
inst_begin	InstIterator.h	/^inline inst_iterator inst_begin(Function *F) { return inst_iterator(*F); }$/;"	f	namespace:llvm
inst_end	InstIterator.h	/^inline const_inst_iterator inst_end(const Function &F) {$/;"	f	namespace:llvm
inst_end	InstIterator.h	/^inline const_inst_iterator inst_end(const Function *F) {$/;"	f	namespace:llvm
inst_end	InstIterator.h	/^inline inst_iterator inst_end(Function &F)   { return inst_iterator(F, true); }$/;"	f	namespace:llvm
inst_end	InstIterator.h	/^inline inst_iterator inst_end(Function *F)   { return inst_iterator(*F, true); }$/;"	f	namespace:llvm
inst_iterator	InstIterator.h	/^                     Instruction> inst_iterator;$/;"	t	namespace:llvm
instantiate	Registry.h	/^    T *instantiate() const { return Ctor(); }$/;"	f	class:llvm::SimpleRegistryEntry
insufficient_buffer	system_error.h	/^  insufficient_buffer     = 122, \/\/ ERROR_INSUFFICIENT_BUFFER,$/;"	e	enum:llvm::windows_error::_
integral_constant	type_traits.h	/^struct integral_constant {$/;"	s	namespace:llvm
interrupted	system_error.h	/^  interrupted                         = EINTR,$/;"	e	enum:llvm::errc::_
invalid_access	system_error.h	/^  invalid_access          = 12, \/\/ ERROR_INVALID_ACCESS,$/;"	e	enum:llvm::windows_error::_
invalid_argument	system_error.h	/^  invalid_argument                    = EINVAL,$/;"	e	enum:llvm::errc::_
invalid_block	system_error.h	/^  invalid_block           = 9, \/\/ ERROR_INVALID_BLOCK,$/;"	e	enum:llvm::windows_error::_
invalid_drive	system_error.h	/^  invalid_drive           = 15, \/\/ ERROR_INVALID_DRIVE,$/;"	e	enum:llvm::windows_error::_
invalid_function	system_error.h	/^  invalid_function        = 1, \/\/ ERROR_INVALID_FUNCTION,$/;"	e	enum:llvm::windows_error::_
invalid_handle	system_error.h	/^  invalid_handle          = 6, \/\/ ERROR_INVALID_HANDLE,$/;"	e	enum:llvm::windows_error::_
invalid_seek	system_error.h	/^  invalid_seek                        = ESPIPE,$/;"	e	enum:llvm::errc::_
io_error	system_error.h	/^  io_error                            = EIO,$/;"	e	enum:llvm::errc::_
irefsym	MachO.h	/^      uint32_t irefsym;$/;"	m	struct:llvm::MachO::dylib_module
irefsym	MachO.h	/^      uint32_t irefsym;$/;"	m	struct:llvm::MachO::dylib_module_64
is64Bit	OutputBuffer.h	/^    bool is64Bit, isLittleEndian;$/;"	m	class:llvm::OutputBuffer
isAtEnd	YAMLParser.h	/^  bool isAtEnd() const {$/;"	f	class:llvm::yaml::document_iterator
isBigEndianHost	Host.h	/^  inline bool isBigEndianHost() {$/;"	f	namespace:llvm::sys
isByValArgument	CallSite.h	/^  bool isByValArgument(unsigned ArgNo) const {$/;"	f	class:llvm::CallSiteBase
isCall	CallSite.h	/^  bool isCall() const { return I.getInt(); }$/;"	f	class:llvm::CallSiteBase
isCallee	CallSite.h	/^  bool isCallee(value_use_iterator<UserTy> UI) const {$/;"	f	class:llvm::CallSiteBase
isConstructed	ManagedStatic.h	/^  bool isConstructed() const { return Ptr != 0; }$/;"	f	class:llvm::ManagedStaticBase
isCurrentDebugType	Debug.h	72;"	d
isEmpty	IntegersSubset.h	/^    bool isEmpty() const { return IsEmpty; }$/;"	f	class:llvm::IntRange
isEmpty	PathV1.h	/^      bool isEmpty() const { return path.empty(); }$/;"	f	class:llvm::sys::Path
isEqual	DebugLoc.h	/^    static bool isEqual(DebugLoc LHS, DebugLoc RHS) { return LHS == RHS; }$/;"	f	struct:llvm::DenseMapInfo
isEqual	ValueHandle.h	/^  static bool isEqual(const AssertingVH<T> &LHS, const AssertingVH<T> &RHS) {$/;"	f	struct:llvm::DenseMapInfo
isInRange	IntegersSubset.h	/^    bool isInRange(const IntType &IntVal) const {$/;"	f	class:llvm::IntRange
isInitialized	Timer.h	/^  bool isInitialized() const { return TG != 0; }$/;"	f	class:llvm::Timer
isInt	MathExtras.h	/^inline bool isInt(int64_t x) {$/;"	f	namespace:llvm
isInt	MathExtras.h	/^inline bool isInt<16>(int64_t x) {$/;"	f	namespace:llvm
isInt	MathExtras.h	/^inline bool isInt<32>(int64_t x) {$/;"	f	namespace:llvm
isInt	MathExtras.h	/^inline bool isInt<8>(int64_t x) {$/;"	f	namespace:llvm
isIntN	MathExtras.h	/^inline bool isIntN(unsigned N, int64_t x) {$/;"	f	namespace:llvm
isIntersected	IntegersSubsetMapping.h	/^  bool isIntersected(CaseItemIt& LItem, CaseItemIt& RItem) {$/;"	f	class:llvm::IntegersSubsetMapping
isInvoke	CallSite.h	/^  bool isInvoke() const { return getInstruction() && !I.getInt(); }$/;"	f	class:llvm::CallSiteBase
isJoinable	IntegersSubsetMapping.h	/^  bool isJoinable(CaseItemIt& LItem, CaseItemIt& RItem) {$/;"	f	class:llvm::IntegersSubsetMapping
isLOpened	IntegersSubsetMapping.h	/^    bool isLOpened() { return State == L_OPENED; }$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
isLittleEndian	DataExtractor.h	/^  bool isLittleEndian() const { return IsLittleEndian; }$/;"	f	class:llvm::DataExtractor
isLittleEndian	OutputBuffer.h	/^    bool is64Bit, isLittleEndian;$/;"	m	class:llvm::OutputBuffer
isLittleEndianHost	Host.h	/^  inline bool isLittleEndianHost() {$/;"	f	namespace:llvm::sys
isMask_32	MathExtras.h	/^inline bool isMask_32(uint32_t Value) {$/;"	f	namespace:llvm
isMask_64	MathExtras.h	/^inline bool isMask_64(uint64_t Value) {$/;"	f	namespace:llvm
isNoInline	CallSite.h	/^  bool isNoInline() const {$/;"	f	class:llvm::CallSiteBase
isNodeHidden	DOTGraphTraits.h	/^  static bool isNodeHidden(const void *) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
isNodeHidden	GraphWriter.h	/^  bool isNodeHidden(NodeType &Node) {$/;"	f	class:llvm::GraphWriter
isNodeHidden	GraphWriter.h	/^  bool isNodeHidden(NodeType *Node) {$/;"	f	class:llvm::GraphWriter
isNodeHidden	GraphWriter.h	/^  bool isNodeHidden(NodeType *const *Node) {$/;"	f	class:llvm::GraphWriter
isOrdinal	COFF.h	/^    bool isOrdinal() const { return data & 0x80000000; }$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
isOverlapped	IntegersSubsetMapping.h	/^  bool isOverlapped(self &RHS) {$/;"	f	class:llvm::IntegersSubsetMapping
isPodLike	ValueHandle.h	/^struct isPodLike<AssertingVH<T> > {$/;"	s	namespace:llvm
isPodLike	type_traits.h	/^struct isPodLike {$/;"	s	namespace:llvm
isPodLike	type_traits.h	/^struct isPodLike<std::pair<T, U> > {$/;"	s	namespace:llvm
isPowerOf2_32	MathExtras.h	/^inline bool isPowerOf2_32(uint32_t Value) {$/;"	f	namespace:llvm
isPowerOf2_64	MathExtras.h	/^inline bool isPowerOf2_64(uint64_t Value) {$/;"	f	namespace:llvm
isROpened	IntegersSubsetMapping.h	/^    bool isROpened() { return State == R_OPENED; }$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
isSatisfies	IntegersSubset.h	/^  bool isSatisfies(const IntTy &CheckingVal) const {$/;"	f	class:llvm::IntegersSubsetGeneric
isSet	CommandLine.h	/^  bool isSet(const T &V) {$/;"	f	class:llvm::cl::bits_storage
isShiftedInt	MathExtras.h	/^inline bool isShiftedInt(int64_t x) {$/;"	f	namespace:llvm
isShiftedMask_32	MathExtras.h	/^inline bool isShiftedMask_32(uint32_t Value) {$/;"	f	namespace:llvm
isShiftedMask_64	MathExtras.h	/^inline bool isShiftedMask_64(uint64_t Value) {$/;"	f	namespace:llvm
isShiftedUInt	MathExtras.h	/^inline bool isShiftedUInt(uint64_t x) {$/;"	f	namespace:llvm
isSimple	DOTGraphTraits.h	/^  bool isSimple() {$/;"	f	struct:llvm::DefaultDOTGraphTraits
isSingleElement	ConstantRange.h	/^  bool isSingleElement() const { return getSingleElement() != 0; }$/;"	f	class:llvm::ConstantRange
isSingleNumber	IntegersSubset.h	/^    bool isSingleNumber() const { return IsSingleNumber; }$/;"	f	class:llvm::IntRange
isSingleNumber	IntegersSubset.h	/^  bool isSingleNumber() const {$/;"	f	class:llvm::IntegersSubsetGeneric
isSingleNumber	IntegersSubset.h	/^  bool isSingleNumber(unsigned idx) const {$/;"	f	class:llvm::IntegersSubsetGeneric
isSingleNumbersOnly	IntegersSubset.h	/^  bool isSingleNumbersOnly() const {$/;"	f	class:llvm::IntegersSubsetGeneric
isUInt	MathExtras.h	/^inline bool isUInt(uint64_t x) {$/;"	f	namespace:llvm
isUInt	MathExtras.h	/^inline bool isUInt<16>(uint64_t x) {$/;"	f	namespace:llvm
isUInt	MathExtras.h	/^inline bool isUInt<32>(uint64_t x) {$/;"	f	namespace:llvm
isUInt	MathExtras.h	/^inline bool isUInt<8>(uint64_t x) {$/;"	f	namespace:llvm
isUIntN	MathExtras.h	/^inline bool isUIntN(unsigned N, uint64_t x) {$/;"	f	namespace:llvm
isUnknown	DebugLoc.h	/^    bool isUnknown() const { return ScopeIdx == 0; }$/;"	f	class:llvm::DebugLoc
isValid	DynamicLibrary.h	/^    bool isValid() { return Data != &Invalid; }$/;"	f	class:llvm::sys::DynamicLibrary
isValid	SMLoc.h	/^  bool isValid() const { return Ptr != 0; }$/;"	f	class:llvm::SMLoc
isValid	SMLoc.h	/^  bool isValid() const { return Start.isValid(); }$/;"	f	class:llvm::SMRange
isValid	ValueHandle.h	/^  static bool isValid(Value *V) {$/;"	f	class:llvm::ValueHandleBase
isValidOffset	DataExtractor.h	/^  bool isValidOffset(uint32_t offset) const { return Data.size() > offset; }$/;"	f	class:llvm::DataExtractor
isValidOffsetForDataOfSize	DataExtractor.h	/^  bool isValidOffsetForDataOfSize(uint32_t offset, uint32_t length) const {$/;"	f	class:llvm::DataExtractor
isValue	PatternMatch.h	/^  bool isValue(const APInt &C) { return C == 1; }$/;"	f	struct:llvm::PatternMatch::is_one
isValue	PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isAllOnesValue(); }$/;"	f	struct:llvm::PatternMatch::is_all_ones
isValue	PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isPowerOf2(); }$/;"	f	struct:llvm::PatternMatch::is_power2
isValue	PatternMatch.h	/^  bool isValue(const APInt &C) { return C.isSignBit(); }$/;"	f	struct:llvm::PatternMatch::is_sign_bit
is_a_directory	system_error.h	/^  is_a_directory                      = EISDIR,$/;"	e	enum:llvm::errc::_
is_all_ones	PatternMatch.h	/^struct is_all_ones {$/;"	s	namespace:llvm::PatternMatch
is_base_of	type_traits.h	/^struct is_base_of {$/;"	s	namespace:llvm
is_class	type_traits.h	/^struct is_class$/;"	s	namespace:llvm
is_displayed	raw_ostream.h	/^  virtual bool is_displayed() const { return false; }$/;"	f	class:llvm::raw_ostream
is_error_code_enum	system_error.h	/^template <> struct is_error_code_enum<windows_error::_> : true_type { };$/;"	s	namespace:llvm
is_error_code_enum	system_error.h	/^template <> struct is_error_code_enum<windows_error> : true_type { };$/;"	s	namespace:llvm
is_error_code_enum	system_error.h	/^template <class Tp> struct is_error_code_enum : public false_type {};$/;"	s	namespace:llvm
is_error_condition_enum	system_error.h	/^template <> struct is_error_condition_enum<errc::_> : true_type { };$/;"	s	namespace:llvm
is_error_condition_enum	system_error.h	/^template <> struct is_error_condition_enum<errc> : true_type { };$/;"	s	namespace:llvm
is_error_condition_enum	system_error.h	/^template <class Tp> struct is_error_condition_enum : public false_type {};$/;"	s	namespace:llvm
is_integral	type_traits.h	/^struct is_integral : is_integral_impl<T> {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<         bool>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<         char>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<         int>       : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<         long long> : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<         long>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<         short>     : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<         wchar_t>   : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<  signed char>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<unsigned char>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<unsigned int>       : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<unsigned long long> : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<unsigned long>      : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <> struct is_integral_impl<unsigned short>     : true_type {};$/;"	s	namespace:llvm
is_integral_impl	type_traits.h	/^template <typename T> struct is_integral_impl           : false_type {};$/;"	s	namespace:llvm
is_integral_or_enum	type_traits.h	/^template <typename T> class is_integral_or_enum {$/;"	c	namespace:llvm
is_object	FileSystem.h	/^  bool is_object() const {$/;"	f	struct:llvm::sys::fs::file_magic
is_one	PatternMatch.h	/^struct is_one {$/;"	s	namespace:llvm::PatternMatch
is_pointer	type_traits.h	/^template <typename T> struct is_pointer : false_type {};$/;"	s	namespace:llvm
is_pointer	type_traits.h	/^template <typename T> struct is_pointer<T* const volatile> : true_type {};$/;"	s	namespace:llvm
is_pointer	type_traits.h	/^template <typename T> struct is_pointer<T* const> : true_type {};$/;"	s	namespace:llvm
is_pointer	type_traits.h	/^template <typename T> struct is_pointer<T* volatile> : true_type {};$/;"	s	namespace:llvm
is_pointer	type_traits.h	/^template <typename T> struct is_pointer<T*> : true_type {};$/;"	s	namespace:llvm
is_power2	PatternMatch.h	/^struct is_power2 {$/;"	s	namespace:llvm::PatternMatch
is_same	type_traits.h	/^template<typename T, typename U> struct is_same       : public false_type {};$/;"	s	namespace:llvm
is_same	type_traits.h	/^template<typename T>             struct is_same<T, T> : public true_type {};$/;"	s	namespace:llvm
is_sign_bit	PatternMatch.h	/^struct is_sign_bit {$/;"	s	namespace:llvm::PatternMatch
isa	Casting.h	/^inline bool isa(const Y &Val) {$/;"	f	namespace:llvm
isa_impl	Casting.h	/^struct isa_impl {$/;"	s	namespace:llvm
isa_impl	Casting.h	/^struct isa_impl<To, From,$/;"	s	namespace:llvm
isa_impl_cl	Casting.h	/^template <typename To, typename From> struct isa_impl_cl {$/;"	s	namespace:llvm
isa_impl_cl	Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, From*> {$/;"	s	namespace:llvm
isa_impl_cl	Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, const From*> {$/;"	s	namespace:llvm
isa_impl_cl	Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, const From*const> {$/;"	s	namespace:llvm
isa_impl_cl	Casting.h	/^template <typename To, typename From> struct isa_impl_cl<To, const From> {$/;"	s	namespace:llvm
isa_impl_wrap	Casting.h	/^struct isa_impl_wrap {$/;"	s	namespace:llvm
isa_impl_wrap	Casting.h	/^struct isa_impl_wrap<To, FromTy, FromTy> {$/;"	s	namespace:llvm
isub_image	MachO.h	/^      uint32_t isub_image:8,$/;"	m	struct:llvm::MachO::twolevel_hint
isym	MachO.h	/^      uint32_t isym:24,$/;"	m	struct:llvm::MachO::dylib_reference
iterator	Registry.h	/^      explicit iterator(const node *N) : Cur(N) {}$/;"	f	class:llvm::Registry::iterator
iterator	Registry.h	/^    class iterator {$/;"	c	class:llvm::Registry
iterator	TargetRegistry.h	/^      explicit iterator(Target *T) : Current(T) {}$/;"	f	class:llvm::TargetRegistry::iterator
iterator	TargetRegistry.h	/^      iterator() : Current(0) {}$/;"	f	class:llvm::TargetRegistry::iterator
iterator	TargetRegistry.h	/^      iterator(const iterator &I) : Current(I.Current) {}$/;"	f	class:llvm::TargetRegistry::iterator
iterator	TargetRegistry.h	/^    class iterator {$/;"	c	struct:llvm::TargetRegistry
iterator	YAMLParser.h	/^  typedef basic_collection_iterator<MappingNode, KeyValueNode> iterator;$/;"	t	class:llvm::yaml::MappingNode
iterator	YAMLParser.h	/^  typedef basic_collection_iterator<SequenceNode, Node> iterator;$/;"	t	class:llvm::yaml::SequenceNode
iterator_category	InstIterator.h	/^  typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:llvm::InstIterator
iterator_category	PathV2.h	/^  typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:llvm::sys::path::const_iterator
itoc	MachO.h	/^               itoc:24;$/;"	m	struct:llvm::MachO::twolevel_hint
iundefsym	MachO.h	/^      uint32_t iundefsym;$/;"	m	struct:llvm::MachO::dysymtab_command
kChunkSize	StreamableMemoryObject.h	/^  const static uint32_t kChunkSize = 4096 * 4;$/;"	m	class:llvm::StreamingMemoryObject
keep	ToolOutputFile.h	/^  void keep() { Installer.Keep = true; }$/;"	f	class:llvm::tool_output_file
lazy_bind_off	MachO.h	/^      uint32_t lazy_bind_off;$/;"	m	struct:llvm::MachO::dyld_info_command
lazy_bind_size	MachO.h	/^      uint32_t lazy_bind_size;$/;"	m	struct:llvm::MachO::dyld_info_command
level	FileSystem.h	/^  int level() const { return State->Level; }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
linked_modules	MachO.h	/^      uint32_t linked_modules;$/;"	m	struct:llvm::MachO::prebound_dylib_command
linkedit_data_command	MachO.h	/^    struct linkedit_data_command {$/;"	s	namespace:llvm::MachO
list	CommandLine.h	/^  explicit list(const M0t &M0) : Option(ZeroOrMore, NotHidden) {$/;"	f	class:llvm::cl::list
list	CommandLine.h	/^  list(const M0t &M0, const M1t &M1) : Option(ZeroOrMore, NotHidden) {$/;"	f	class:llvm::cl::list
list	CommandLine.h	/^  list(const M0t &M0, const M1t &M1, const M2t &M2)$/;"	f	class:llvm::cl::list
list	CommandLine.h	/^  list(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3)$/;"	f	class:llvm::cl::list
list	CommandLine.h	/^  list(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3,$/;"	f	class:llvm::cl::list
list	CommandLine.h	/^class list : public Option, public list_storage<DataType, Storage> {$/;"	c	namespace:llvm::cl
list_storage	CommandLine.h	/^  list_storage() : Location(0) {}$/;"	f	class:llvm::cl::list_storage
list_storage	CommandLine.h	/^class list_storage {$/;"	c	namespace:llvm::cl
list_storage	CommandLine.h	/^class list_storage<DataType, bool> : public std::vector<DataType> {$/;"	c	namespace:llvm::cl
listener	Registry.h	/^      listener() : Prev(ListenerTail), Next(0) {$/;"	f	class:llvm::Registry::listener
listener	Registry.h	/^    class listener {$/;"	c	class:llvm::Registry
listener	RegistryParser.h	/^    typedef typename Registry<T, U>::listener listener;$/;"	t	class:llvm::RegistryParser
little	Endian.h	/^enum endianness {big, little};$/;"	e	enum:llvm::support::endianness
little16_t	Endian.h	/^                   <int16_t, little, unaligned> little16_t;$/;"	t	namespace:llvm::support
little32_t	Endian.h	/^                   <int32_t, little, unaligned> little32_t;$/;"	t	namespace:llvm::support
little64_t	Endian.h	/^                   <int64_t, little, unaligned> little64_t;$/;"	t	namespace:llvm::support
little8_t	Endian.h	/^                   <int8_t, little, unaligned>  little8_t;$/;"	t	namespace:llvm::support
llvm	AlignOf.h	/^namespace llvm {$/;"	n
llvm	Allocator.h	/^namespace llvm {$/;"	n
llvm	Atomic.h	/^namespace llvm {$/;"	n
llvm	BlockFrequency.h	/^namespace llvm {$/;"	n
llvm	BranchProbability.h	/^namespace llvm {$/;"	n
llvm	CFG.h	/^namespace llvm {$/;"	n
llvm	COFF.h	/^namespace llvm {$/;"	n
llvm	CallSite.h	/^namespace llvm {$/;"	n
llvm	Capacity.h	/^namespace llvm {$/;"	n
llvm	Casting.h	/^namespace llvm {$/;"	n
llvm	CodeGen.h	/^namespace llvm {$/;"	n
llvm	CommandLine.h	/^namespace llvm {$/;"	n
llvm	ConstantFolder.h	/^namespace llvm {$/;"	n
llvm	ConstantRange.h	/^namespace llvm {$/;"	n
llvm	CrashRecoveryContext.h	/^namespace llvm {$/;"	n
llvm	DOTGraphTraits.h	/^namespace llvm {$/;"	n
llvm	DataExtractor.h	/^namespace llvm {$/;"	n
llvm	DataFlow.h	/^namespace llvm {$/;"	n
llvm	DataStream.h	/^namespace llvm {$/;"	n
llvm	Debug.h	/^namespace llvm {$/;"	n
llvm	DebugLoc.h	/^namespace llvm {$/;"	n
llvm	Disassembler.h	/^namespace llvm {$/;"	n
llvm	Dwarf.h	/^namespace llvm {$/;"	n
llvm	DynamicLibrary.h	/^namespace llvm {$/;"	n
llvm	ELF.h	/^namespace llvm {$/;"	n
llvm	Endian.h	/^namespace llvm {$/;"	n
llvm	Errno.h	/^namespace llvm {$/;"	n
llvm	ErrorHandling.h	/^namespace llvm {$/;"	n
llvm	FEnv.h	/^namespace llvm {$/;"	n
llvm	FileOutputBuffer.h	/^namespace llvm {$/;"	n
llvm	FileSystem.h	/^namespace llvm {$/;"	n
llvm	FileUtilities.h	/^namespace llvm {$/;"	n
llvm	Format.h	/^namespace llvm {$/;"	n
llvm	FormattedStream.h	/^namespace llvm $/;"	n
llvm	GCOV.h	/^namespace llvm {$/;"	n
llvm	GetElementPtrTypeIterator.h	/^namespace llvm {$/;"	n
llvm	GraphWriter.h	/^namespace llvm {$/;"	n
llvm	Host.h	/^namespace llvm {$/;"	n
llvm	IRReader.h	/^namespace llvm {$/;"	n
llvm	IncludeFile.h	/^namespace llvm {$/;"	n
llvm	InstIterator.h	/^namespace llvm {$/;"	n
llvm	InstVisitor.h	/^namespace llvm {$/;"	n
llvm	IntegersSubset.h	/^namespace llvm {$/;"	n
llvm	IntegersSubsetMapping.h	/^namespace llvm {$/;"	n
llvm	LEB128.h	/^namespace llvm {$/;"	n
llvm	LeakDetector.h	/^namespace llvm {$/;"	n
llvm	Locale.h	/^namespace llvm {$/;"	n
llvm	LockFileManager.h	/^namespace llvm {$/;"	n
llvm	MachO.h	/^namespace llvm {$/;"	n
llvm	ManagedStatic.h	/^namespace llvm {$/;"	n
llvm	MathExtras.h	/^namespace llvm {$/;"	n
llvm	Memory.h	/^namespace llvm {$/;"	n
llvm	MemoryBuffer.h	/^namespace llvm {$/;"	n
llvm	MemoryObject.h	/^namespace llvm {$/;"	n
llvm	Mutex.h	/^namespace llvm$/;"	n
llvm	MutexGuard.h	/^namespace llvm {$/;"	n
llvm	NoFolder.h	/^namespace llvm {$/;"	n
llvm	OutputBuffer.h	/^namespace llvm {$/;"	n
llvm	PassNameParser.h	/^namespace llvm {$/;"	n
llvm	PathV1.h	/^namespace llvm {$/;"	n
llvm	PathV2.h	/^namespace llvm {$/;"	n
llvm	PatternMatch.h	/^namespace llvm {$/;"	n
llvm	PluginLoader.h	/^namespace llvm {$/;"	n
llvm	PointerLikeTypeTraits.h	/^namespace llvm {$/;"	n
llvm	PredIteratorCache.h	/^namespace llvm {$/;"	n
llvm	PrettyStackTrace.h	/^namespace llvm {$/;"	n
llvm	Process.h	/^namespace llvm {$/;"	n
llvm	Program.h	/^namespace llvm {$/;"	n
llvm	RWMutex.h	/^namespace llvm$/;"	n
llvm	Recycler.h	/^namespace llvm {$/;"	n
llvm	RecyclingAllocator.h	/^namespace llvm {$/;"	n
llvm	Regex.h	/^namespace llvm {$/;"	n
llvm	Registry.h	/^namespace llvm {$/;"	n
llvm	RegistryParser.h	/^namespace llvm {$/;"	n
llvm	SMLoc.h	/^namespace llvm {$/;"	n
llvm	SaveAndRestore.h	/^namespace llvm {$/;"	n
llvm	Signals.h	/^namespace llvm {$/;"	n
llvm	SourceMgr.h	/^namespace llvm {$/;"	n
llvm	StreamableMemoryObject.h	/^namespace llvm {$/;"	n
llvm	StringPool.h	/^namespace llvm {$/;"	n
llvm	SwapByteOrder.h	/^namespace llvm {$/;"	n
llvm	SystemUtils.h	/^namespace llvm {$/;"	n
llvm	TargetFolder.h	/^namespace llvm {$/;"	n
llvm	TargetRegistry.h	/^namespace llvm {$/;"	n
llvm	TargetSelect.h	/^namespace llvm {$/;"	n
llvm	ThreadLocal.h	/^namespace llvm {$/;"	n
llvm	Threading.h	/^namespace llvm {$/;"	n
llvm	TimeValue.h	/^namespace llvm {$/;"	n
llvm	Timer.h	/^namespace llvm {$/;"	n
llvm	ToolOutputFile.h	/^namespace llvm {$/;"	n
llvm	Valgrind.h	/^namespace llvm {$/;"	n
llvm	ValueHandle.h	/^namespace llvm {$/;"	n
llvm	Win64EH.h	/^namespace llvm {$/;"	n
llvm	YAMLParser.h	/^namespace llvm {$/;"	n
llvm	circular_raw_ostream.h	/^namespace llvm $/;"	n
llvm	raw_os_ostream.h	/^namespace llvm {$/;"	n
llvm	raw_ostream.h	/^namespace llvm {$/;"	n
llvm	system_error.h	/^namespace llvm {$/;"	n
llvm	type_traits.h	/^namespace llvm {$/;"	n
llvm_dwarf_constants	Dwarf.h	/^enum llvm_dwarf_constants {$/;"	g	namespace:llvm::dwarf
llvm_fenv_clearexcept	FEnv.h	/^static inline void llvm_fenv_clearexcept() {$/;"	f	namespace:llvm::sys
llvm_fenv_testexcept	FEnv.h	/^static inline bool llvm_fenv_testexcept() {$/;"	f	namespace:llvm::sys
llvm_move	Compiler.h	36;"	d
llvm_move	Compiler.h	38;"	d
llvm_shutdown_obj	ManagedStatic.h	/^  explicit llvm_shutdown_obj(bool multithreaded) {$/;"	f	struct:llvm::llvm_shutdown_obj
llvm_shutdown_obj	ManagedStatic.h	/^  llvm_shutdown_obj() { }$/;"	f	struct:llvm::llvm_shutdown_obj
llvm_shutdown_obj	ManagedStatic.h	/^struct llvm_shutdown_obj {$/;"	s	namespace:llvm
llvm_unreachable	ErrorHandling.h	98;"	d
load_command	MachO.h	/^    struct load_command {$/;"	s	namespace:llvm::MachO
locale	Locale.h	/^namespace locale {$/;"	n	namespace:llvm::sys
location	CommandLine.h	/^LocationClass<Ty> location(Ty &L) { return LocationClass<Ty>(L); }$/;"	f	namespace:llvm::cl
lock_failed	system_error.h	/^  lock_failed             = 167, \/\/ ERROR_LOCK_FAILED,$/;"	e	enum:llvm::windows_error::_
lock_violation	system_error.h	/^  lock_violation          = 33, \/\/ ERROR_LOCK_VIOLATION,$/;"	e	enum:llvm::windows_error::_
locreloff	MachO.h	/^      uint32_t locreloff;$/;"	m	struct:llvm::MachO::dysymtab_command
m_APInt	PatternMatch.h	/^inline apint_match m_APInt(const APInt *&Res) { return Res; }$/;"	f	namespace:llvm::PatternMatch
m_AShr	PatternMatch.h	/^m_AShr(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Add	PatternMatch.h	/^m_Add(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_AllOnes	PatternMatch.h	/^inline api_pred_ty<is_all_ones> m_AllOnes(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_AllOnes	PatternMatch.h	/^inline cst_pred_ty<is_all_ones> m_AllOnes() {return cst_pred_ty<is_all_ones>();}$/;"	f	namespace:llvm::PatternMatch
m_And	PatternMatch.h	/^m_And(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_BitCast	PatternMatch.h	/^m_BitCast(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_Br	PatternMatch.h	/^inline brc_match<Cond_t> m_Br(const Cond_t &C, BasicBlock *&T, BasicBlock *&F) {$/;"	f	namespace:llvm::PatternMatch
m_Constant	PatternMatch.h	/^inline bind_ty<Constant> m_Constant(Constant *&C) { return C; }$/;"	f	namespace:llvm::PatternMatch
m_Constant	PatternMatch.h	/^inline class_match<Constant> m_Constant() { return class_match<Constant>(); }$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	PatternMatch.h	/^inline bind_const_intval_ty m_ConstantInt(uint64_t &V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	PatternMatch.h	/^inline bind_ty<ConstantInt> m_ConstantInt(ConstantInt *&CI) { return CI; }$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	PatternMatch.h	/^inline class_match<ConstantInt> m_ConstantInt() {$/;"	f	namespace:llvm::PatternMatch
m_ConstantInt	PatternMatch.h	/^inline constantint_match<Val> m_ConstantInt() {$/;"	f	namespace:llvm::PatternMatch
m_Exact	PatternMatch.h	/^inline Exact_match<T> m_Exact(const T &SubPattern) { return SubPattern; }$/;"	f	namespace:llvm::PatternMatch
m_FAdd	PatternMatch.h	/^m_FAdd(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FCmp	PatternMatch.h	/^m_FCmp(FCmpInst::Predicate &Pred, const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FDiv	PatternMatch.h	/^m_FDiv(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FMul	PatternMatch.h	/^m_FMul(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FNeg	PatternMatch.h	/^inline fneg_match<LHS> m_FNeg(const LHS &L) { return L; }$/;"	f	namespace:llvm::PatternMatch
m_FRem	PatternMatch.h	/^m_FRem(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_FSub	PatternMatch.h	/^m_FSub(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_ICmp	PatternMatch.h	/^m_ICmp(ICmpInst::Predicate &Pred, const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_IDiv	PatternMatch.h	/^m_IDiv(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_LShr	PatternMatch.h	/^m_LShr(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_LogicalShift	PatternMatch.h	/^m_LogicalShift(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Mul	PatternMatch.h	/^m_Mul(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Neg	PatternMatch.h	/^inline neg_match<LHS> m_Neg(const LHS &L) { return L; }$/;"	f	namespace:llvm::PatternMatch
m_Not	PatternMatch.h	/^inline not_match<LHS> m_Not(const LHS &L) { return L; }$/;"	f	namespace:llvm::PatternMatch
m_One	PatternMatch.h	/^inline api_pred_ty<is_one> m_One(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_One	PatternMatch.h	/^inline cst_pred_ty<is_one> m_One() { return cst_pred_ty<is_one>(); }$/;"	f	namespace:llvm::PatternMatch
m_OneUse	PatternMatch.h	/^inline OneUse_match<T> m_OneUse(const T &SubPattern) { return SubPattern; }$/;"	f	namespace:llvm::PatternMatch
m_Or	PatternMatch.h	/^m_Or(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Power2	PatternMatch.h	/^inline api_pred_ty<is_power2> m_Power2(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_Power2	PatternMatch.h	/^inline cst_pred_ty<is_power2> m_Power2() { return cst_pred_ty<is_power2>(); }$/;"	f	namespace:llvm::PatternMatch
m_PtrToInt	PatternMatch.h	/^m_PtrToInt(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_SDiv	PatternMatch.h	/^m_SDiv(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SExt	PatternMatch.h	/^m_SExt(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_SMax	PatternMatch.h	/^m_SMax(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SMin	PatternMatch.h	/^m_SMin(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SRem	PatternMatch.h	/^m_SRem(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Select	PatternMatch.h	/^m_Select(const Cond &C, const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SelectCst	PatternMatch.h	/^m_SelectCst(const Cond &C) {$/;"	f	namespace:llvm::PatternMatch
m_Shl	PatternMatch.h	/^m_Shl(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Shr	PatternMatch.h	/^m_Shr(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_SignBit	PatternMatch.h	/^inline api_pred_ty<is_sign_bit> m_SignBit(const APInt *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_SignBit	PatternMatch.h	/^inline cst_pred_ty<is_sign_bit> m_SignBit() {return cst_pred_ty<is_sign_bit>();}$/;"	f	namespace:llvm::PatternMatch
m_Specific	PatternMatch.h	/^inline specificval_ty m_Specific(const Value *V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_Sub	PatternMatch.h	/^m_Sub(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Trunc	PatternMatch.h	/^m_Trunc(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_UDiv	PatternMatch.h	/^m_UDiv(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_UMax	PatternMatch.h	/^m_UMax(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_UMin	PatternMatch.h	/^m_UMin(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_URem	PatternMatch.h	/^m_URem(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_Undef	PatternMatch.h	/^inline class_match<UndefValue> m_Undef() { return class_match<UndefValue>(); }$/;"	f	namespace:llvm::PatternMatch
m_Value	PatternMatch.h	/^inline bind_ty<Value> m_Value(Value *&V) { return V; }$/;"	f	namespace:llvm::PatternMatch
m_Value	PatternMatch.h	/^inline class_match<Value> m_Value() { return class_match<Value>(); }$/;"	f	namespace:llvm::PatternMatch
m_Xor	PatternMatch.h	/^m_Xor(const LHS &L, const RHS &R) {$/;"	f	namespace:llvm::PatternMatch
m_ZExt	PatternMatch.h	/^m_ZExt(const OpTy &Op) {$/;"	f	namespace:llvm::PatternMatch
m_Zero	PatternMatch.h	/^inline match_zero m_Zero() { return match_zero(); }$/;"	f	namespace:llvm::PatternMatch
mach_header	MachO.h	/^    struct mach_header {$/;"	s	namespace:llvm::MachO
mach_header_64	MachO.h	/^    struct mach_header_64 {$/;"	s	namespace:llvm::MachO
macho_bundle	FileSystem.h	/^    macho_bundle,             \/\/\/< Mach-O Bundle file$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_core	FileSystem.h	/^    macho_core,               \/\/\/< Mach-O Core File$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_dsym_companion	FileSystem.h	/^    macho_dsym_companion,     \/\/\/< Mach-O dSYM companion file$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_dynamic_linker	FileSystem.h	/^    macho_dynamic_linker,     \/\/\/< The Mach-O dynamic linker$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_dynamically_linked_shared_lib	FileSystem.h	/^    macho_dynamically_linked_shared_lib, \/\/\/< Mach-O dynlinked shared lib$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_dynamically_linked_shared_lib_stub	FileSystem.h	/^    macho_dynamically_linked_shared_lib_stub, \/\/\/< Mach-O Shared lib stub$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_executable	FileSystem.h	/^    macho_executable,         \/\/\/< Mach-O Executable$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_fixed_virtual_memory_shared_lib	FileSystem.h	/^    macho_fixed_virtual_memory_shared_lib, \/\/\/< Mach-O Shared Lib, FVM$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_object	FileSystem.h	/^    macho_object,             \/\/\/< Mach-O Object file$/;"	e	enum:llvm::sys::fs::file_magic::_
macho_preload_executabl	FileSystem.h	/^    macho_preload_executabl,  \/\/\/< Mach-O Preloaded Executable$/;"	e	enum:llvm::sys::fs::file_magic::_
magic	MachO.h	/^      uint32_t magic;$/;"	m	struct:llvm::MachO::fat_header
magic	MachO.h	/^      uint32_t magic;$/;"	m	struct:llvm::MachO::mach_header
magic	MachO.h	/^      uint32_t magic;$/;"	m	struct:llvm::MachO::mach_header_64
make_error_code	system_error.h	/^inline error_code make_error_code(errc _e) {$/;"	f	namespace:llvm
make_error_code	system_error.h	/^inline error_code make_error_code(windows_error e) {$/;"	f	namespace:llvm
make_error_condition	system_error.h	/^inline error_condition make_error_condition(errc _e) {$/;"	f	namespace:llvm
mapmode	FileSystem.h	/^  enum mapmode {$/;"	g	class:llvm::sys::fs::mapped_file_region
mapped_file_region	FileSystem.h	/^class mapped_file_region {$/;"	c	namespace:llvm::sys::fs
match	PatternMatch.h	/^  bool match(ITy *V) { return isa<Class>(V); }$/;"	f	struct:llvm::PatternMatch::class_match
match	PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::api_pred_ty
match	PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::apint_match
match	PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::bind_const_intval_ty
match	PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::bind_ty
match	PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::constantint_match
match	PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::cst_pred_ty
match	PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::match_zero
match	PatternMatch.h	/^  bool match(ITy *V) {$/;"	f	struct:llvm::PatternMatch::specificval_ty
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::BinOp2_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::BinaryOp_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::CastClass_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::CmpClass_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::Exact_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::MaxMin_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::OneUse_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::SelectClass_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::brc_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::fneg_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::neg_match
match	PatternMatch.h	/^  bool match(OpTy *V) {$/;"	f	struct:llvm::PatternMatch::not_match
match	PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::smax_pred_ty
match	PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::smin_pred_ty
match	PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::umax_pred_ty
match	PatternMatch.h	/^  static bool match(ICmpInst::Predicate Pred) {$/;"	f	struct:llvm::PatternMatch::umin_pred_ty
match	PatternMatch.h	/^bool match(Val *V, const Pattern &P) {$/;"	f	namespace:llvm::PatternMatch
matchIfFNeg	PatternMatch.h	/^  bool matchIfFNeg(Value *LHS, Value *RHS) {$/;"	f	struct:llvm::PatternMatch::fneg_match
matchIfNeg	PatternMatch.h	/^  bool matchIfNeg(Value *LHS, Value *RHS) {$/;"	f	struct:llvm::PatternMatch::neg_match
matchIfNot	PatternMatch.h	/^  bool matchIfNot(Value *LHS, Value *RHS) {$/;"	f	struct:llvm::PatternMatch::not_match
match_zero	PatternMatch.h	/^struct match_zero {$/;"	s	namespace:llvm::PatternMatch
maxprot	MachO.h	/^      uint32_t maxprot;$/;"	m	struct:llvm::MachO::segment_command
maxprot	MachO.h	/^      uint32_t maxprot;$/;"	m	struct:llvm::MachO::segment_command_64
message_size	system_error.h	/^  message_size                        = EMSGSIZE,$/;"	e	enum:llvm::errc::_
microseconds	TimeValue.h	/^    uint32_t microseconds() const {$/;"	f	class:llvm::sys::TimeValue
microseconds	TimeValue.h	/^    void microseconds ( int32_t micros ) {$/;"	f	class:llvm::sys::TimeValue
milliseconds	TimeValue.h	/^    uint32_t milliseconds() const {$/;"	f	class:llvm::sys::TimeValue
milliseconds	TimeValue.h	/^    void milliseconds ( int32_t millis ) {$/;"	f	class:llvm::sys::TimeValue
minor_version	MachO.h	/^      uint32_t minor_version;$/;"	m	struct:llvm::MachO::fvmlib
modTime	PathV1.h	/^    TimeValue   modTime;    \/\/\/< Time of file's modification$/;"	m	class:llvm::sys::FileStatus
mode	PathV1.h	/^    uint32_t    mode;       \/\/\/< Mode of the file, if applicable$/;"	m	class:llvm::sys::FileStatus
modtaboff	MachO.h	/^      uint32_t modtaboff;$/;"	m	struct:llvm::MachO::dysymtab_command
module_index	MachO.h	/^      uint32_t module_index;$/;"	m	struct:llvm::MachO::dylib_table_of_contents
module_name	MachO.h	/^      uint32_t module_name;$/;"	m	struct:llvm::MachO::dylib_module
module_name	MachO.h	/^      uint32_t module_name;$/;"	m	struct:llvm::MachO::dylib_module_64
morehelp	CommandLine.h	/^  const char * morehelp;$/;"	m	struct:llvm::cl::extrahelp
msec	TimeValue.h	/^    uint64_t msec() const {$/;"	f	class:llvm::sys::TimeValue
msec	TimeValue.h	/^    void msec( int64_t milliseconds ) {$/;"	f	class:llvm::sys::TimeValue
mtx	Mutex.h	/^      SmartMutex<mt_only>& mtx;$/;"	m	class:llvm::sys::SmartScopedLock
multi_val	CommandLine.h	/^  explicit multi_val(unsigned N) : AdditionalVals(N) {}$/;"	f	struct:llvm::cl::multi_val
multi_val	CommandLine.h	/^struct multi_val {$/;"	s	namespace:llvm::cl
mutex	RWMutex.h	/^      SmartRWMutex<mt_only>& mutex;$/;"	m	struct:llvm::sys::SmartScopedReader
mutex	RWMutex.h	/^      SmartRWMutex<mt_only>& mutex;$/;"	m	struct:llvm::sys::SmartScopedWriter
n_desc	MachO.h	/^      int16_t n_desc;$/;"	m	struct:llvm::MachO::nlist
n_desc	MachO.h	/^      uint16_t n_desc;$/;"	m	struct:llvm::MachO::nlist_64
n_sect	MachO.h	/^      uint8_t n_sect;$/;"	m	struct:llvm::MachO::nlist
n_sect	MachO.h	/^      uint8_t n_sect;$/;"	m	struct:llvm::MachO::nlist_64
n_strx	MachO.h	/^      uint32_t n_strx;$/;"	m	struct:llvm::MachO::nlist
n_strx	MachO.h	/^      uint32_t n_strx;$/;"	m	struct:llvm::MachO::nlist_64
n_type	MachO.h	/^      uint8_t n_type;$/;"	m	struct:llvm::MachO::nlist
n_type	MachO.h	/^      uint8_t n_type;$/;"	m	struct:llvm::MachO::nlist_64
n_value	MachO.h	/^      uint32_t n_value;$/;"	m	struct:llvm::MachO::nlist
n_value	MachO.h	/^      uint64_t n_value;$/;"	m	struct:llvm::MachO::nlist_64
name	MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::dylib
name	MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::dylinker_command
name	MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::fvmfile_command
name	MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::fvmlib
name	MachO.h	/^      uint32_t name;$/;"	m	struct:llvm::MachO::prebound_dylib_command
nameof	Registry.h	/^    static const char *nameof(const entry &Entry) { return Entry.getName(); }$/;"	f	class:llvm::RegistryTraits
nanos_	TimeValue.h	/^    NanoSecondsType  nanos_;  \/\/\/< Stores the nanoseconds part of the TimeVal$/;"	m	class:llvm::sys::TimeValue
nanoseconds	TimeValue.h	/^    NanoSecondsType nanoseconds() const { return nanos_; }$/;"	f	class:llvm::sys::TimeValue
nanoseconds	TimeValue.h	/^    void nanoseconds ( NanoSecondsType nanos ) {$/;"	f	class:llvm::sys::TimeValue
ncmds	MachO.h	/^      uint32_t ncmds;$/;"	m	struct:llvm::MachO::mach_header
ncmds	MachO.h	/^      uint32_t ncmds;$/;"	m	struct:llvm::MachO::mach_header_64
neg_match	PatternMatch.h	/^  neg_match(const LHS_t &LHS) : L(LHS) {}$/;"	f	struct:llvm::PatternMatch::neg_match
neg_match	PatternMatch.h	/^struct neg_match {$/;"	s	namespace:llvm::PatternMatch
network_busy	system_error.h	/^  network_busy            = 54, \/\/ ERROR_NETWORK_BUSY,$/;"	e	enum:llvm::windows_error::_
network_down	system_error.h	/^  network_down                        = ENETDOWN,$/;"	e	enum:llvm::errc::_
network_reset	system_error.h	/^  network_reset                       = ENETRESET,$/;"	e	enum:llvm::errc::_
network_unreachable	system_error.h	/^  network_unreachable                 = ENETUNREACH,$/;"	e	enum:llvm::errc::_
next	CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup *prev, *next;$/;"	m	class:llvm::CrashRecoveryContextCleanup
nextdefsym	MachO.h	/^      uint32_t nextdefsym;$/;"	m	struct:llvm::MachO::dylib_module
nextdefsym	MachO.h	/^      uint32_t nextdefsym;$/;"	m	struct:llvm::MachO::dylib_module_64
nextdefsym	MachO.h	/^      uint32_t nextdefsym;$/;"	m	struct:llvm::MachO::dysymtab_command
nextrefsyms	MachO.h	/^      uint32_t nextrefsyms;$/;"	m	struct:llvm::MachO::dysymtab_command
nextrel	MachO.h	/^      uint32_t nextrel;$/;"	m	struct:llvm::MachO::dylib_module
nextrel	MachO.h	/^      uint32_t nextrel;$/;"	m	struct:llvm::MachO::dylib_module_64
nextrel	MachO.h	/^      uint32_t nextrel;$/;"	m	struct:llvm::MachO::dysymtab_command
nfat_arch	MachO.h	/^      uint32_t nfat_arch;$/;"	m	struct:llvm::MachO::fat_header
nhints	MachO.h	/^      uint32_t nhints;$/;"	m	struct:llvm::MachO::twolevel_hints_command
nindirectsyms	MachO.h	/^      uint32_t nindirectsyms;$/;"	m	struct:llvm::MachO::dysymtab_command
ninit_nterm	MachO.h	/^      uint32_t ninit_nterm;$/;"	m	struct:llvm::MachO::dylib_module
ninit_nterm	MachO.h	/^      uint32_t ninit_nterm;$/;"	m	struct:llvm::MachO::dylib_module_64
nlist	MachO.h	/^    struct nlist {$/;"	s	namespace:llvm::MachO
nlist_64	MachO.h	/^    struct nlist_64 {$/;"	s	namespace:llvm::MachO
nlocalsym	MachO.h	/^      uint32_t nlocalsym;$/;"	m	struct:llvm::MachO::dylib_module
nlocalsym	MachO.h	/^      uint32_t nlocalsym;$/;"	m	struct:llvm::MachO::dylib_module_64
nlocalsym	MachO.h	/^      uint32_t nlocalsym;$/;"	m	struct:llvm::MachO::dysymtab_command
nlocrel	MachO.h	/^      uint32_t nlocrel;$/;"	m	struct:llvm::MachO::dysymtab_command
nmodtab	MachO.h	/^      uint32_t nmodtab;$/;"	m	struct:llvm::MachO::dysymtab_command
nmodules	MachO.h	/^      uint32_t nmodules;$/;"	m	struct:llvm::MachO::prebound_dylib_command
no_buffer_space	system_error.h	/^  no_buffer_space                     = ENOBUFS,$/;"	e	enum:llvm::errc::_
no_child_process	system_error.h	/^  no_child_process                    = ECHILD,$/;"	e	enum:llvm::errc::_
no_link	system_error.h	/^  no_link                             = ENOLINK,$/;"	e	enum:llvm::errc::_
no_lock_available	system_error.h	/^  no_lock_available                   = ENOLCK,$/;"	e	enum:llvm::errc::_
no_message	system_error.h	/^  no_message                          = ENOMSG,$/;"	e	enum:llvm::errc::_
no_message_available	system_error.h	/^  no_message_available                = ENODATA,$/;"	e	enum:llvm::errc::_
no_more_files	system_error.h	/^  no_more_files           = 18, \/\/ ERROR_NO_MORE_FILES,$/;"	e	enum:llvm::windows_error::_
no_perms	FileSystem.h	/^  no_perms     = 0,$/;"	e	enum:llvm::sys::fs::perms
no_protocol_option	system_error.h	/^  no_protocol_option                  = ENOPROTOOPT,$/;"	e	enum:llvm::errc::_
no_push	FileSystem.h	/^  void no_push() { State->HasNoPushRequest = true; }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
no_push_request	FileSystem.h	/^  bool no_push_request() const { return State->HasNoPushRequest; }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
no_space_on_device	system_error.h	/^  no_space_on_device                  = ENOSPC,$/;"	e	enum:llvm::errc::_
no_stream_resources	system_error.h	/^  no_stream_resources                 = ENOSR,$/;"	e	enum:llvm::errc::_
no_such_device	system_error.h	/^  no_such_device                      = ENODEV,$/;"	e	enum:llvm::errc::_
no_such_device_or_address	system_error.h	/^  no_such_device_or_address           = ENXIO,$/;"	e	enum:llvm::errc::_
no_such_file_or_directory	system_error.h	/^  no_such_file_or_directory           = ENOENT,$/;"	e	enum:llvm::errc::_
no_such_process	system_error.h	/^  no_such_process                     = ESRCH,$/;"	e	enum:llvm::errc::_
node	Registry.h	/^      node(const entry& V) : Next(0), Val(V) {$/;"	f	class:llvm::Registry::node
node	Registry.h	/^    class node {$/;"	c	class:llvm::Registry
node_iterator	GraphWriter.h	/^  typedef typename GTraits::nodes_iterator    node_iterator;$/;"	t	class:llvm::GraphWriter
nodes_begin	CFG.h	/^  static nodes_iterator nodes_begin(Function *F) { return F->begin(); }$/;"	f	struct:llvm::GraphTraits
nodes_begin	CFG.h	/^  static nodes_iterator nodes_begin(const Function *F) { return F->begin(); }$/;"	f	struct:llvm::GraphTraits
nodes_end	CFG.h	/^  static nodes_iterator nodes_end  (Function *F) { return F->end(); }$/;"	f	struct:llvm::GraphTraits
nodes_end	CFG.h	/^  static nodes_iterator nodes_end  (const Function *F) { return F->end(); }$/;"	f	struct:llvm::GraphTraits
nodes_iterator	CFG.h	/^  typedef Function::const_iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nodes_iterator	CFG.h	/^  typedef Function::iterator nodes_iterator;$/;"	t	struct:llvm::GraphTraits
nonce_instance	type_traits.h	/^  static UnderlyingT &nonce_instance;$/;"	m	class:llvm::is_integral_or_enum
nonce_member	AlignOf.h	/^  llvm::AlignedCharArrayImpl<AlignOf<AlignerImpl>::Alignment> nonce_member;$/;"	m	union:llvm::AlignedCharArrayUnion
not_a_directory	system_error.h	/^  not_a_directory                     = ENOTDIR,$/;"	e	enum:llvm::errc::_
not_a_socket	system_error.h	/^  not_a_socket                        = ENOTSOCK,$/;"	e	enum:llvm::errc::_
not_a_stream	system_error.h	/^  not_a_stream                        = ENOSTR,$/;"	e	enum:llvm::errc::_
not_connected	system_error.h	/^  not_connected                       = ENOTCONN,$/;"	e	enum:llvm::errc::_
not_dos_disk	system_error.h	/^  not_dos_disk            = 26, \/\/ ERROR_NOT_DOS_DISK,$/;"	e	enum:llvm::windows_error::_
not_enough_memory	system_error.h	/^  not_enough_memory                   = ENOMEM,$/;"	e	enum:llvm::errc::_
not_enough_memory	system_error.h	/^  not_enough_memory       = 8, \/\/ ERROR_NOT_ENOUGH_MEMORY,$/;"	e	enum:llvm::windows_error::_
not_match	PatternMatch.h	/^  not_match(const LHS_t &LHS) : L(LHS) {}$/;"	f	struct:llvm::PatternMatch::not_match
not_match	PatternMatch.h	/^struct not_match {$/;"	s	namespace:llvm::PatternMatch
not_ready	system_error.h	/^  not_ready               = 21, \/\/ ERROR_NOT_READY,$/;"	e	enum:llvm::windows_error::_
not_same_device	system_error.h	/^  not_same_device         = 17, \/\/ ERROR_NOT_SAME_DEVICE,$/;"	e	enum:llvm::windows_error::_
not_supported	system_error.h	/^  not_supported                       = ENOTSUP,$/;"	e	enum:llvm::errc::_
noteHead	Recycler.h	/^  static void noteHead(RecyclerStruct*, RecyclerStruct*) {}$/;"	f	struct:llvm::ilist_traits
nrefsym	MachO.h	/^      uint32_t nrefsym;$/;"	m	struct:llvm::MachO::dylib_module
nrefsym	MachO.h	/^      uint32_t nrefsym;$/;"	m	struct:llvm::MachO::dylib_module_64
nreloc	MachO.h	/^      uint32_t nreloc;$/;"	m	struct:llvm::MachO::section
nreloc	MachO.h	/^      uint32_t nreloc;$/;"	m	struct:llvm::MachO::section_64
nsects	MachO.h	/^      uint32_t nsects;$/;"	m	struct:llvm::MachO::segment_command
nsects	MachO.h	/^      uint32_t nsects;$/;"	m	struct:llvm::MachO::segment_command_64
nsyms	MachO.h	/^      uint32_t nsyms;$/;"	m	struct:llvm::MachO::symtab_command
ntoc	MachO.h	/^      uint32_t ntoc;$/;"	m	struct:llvm::MachO::dysymtab_command
numCodes	Win64EH.h	/^  uint8_t numCodes;$/;"	m	struct:llvm::Win64EH::UnwindInfo
numEdgeDestLabels	DOTGraphTraits.h	/^  static unsigned numEdgeDestLabels(const void *) {$/;"	f	struct:llvm::DefaultDOTGraphTraits
nundefsym	MachO.h	/^      uint32_t nundefsym;$/;"	m	struct:llvm::MachO::dysymtab_command
objc_module_info_addr	MachO.h	/^      uint32_t objc_module_info_addr;$/;"	m	struct:llvm::MachO::dylib_module
objc_module_info_addr	MachO.h	/^      uint64_t objc_module_info_addr;$/;"	m	struct:llvm::MachO::dylib_module_64
objc_module_info_size	MachO.h	/^      uint32_t objc_module_info_size;$/;"	m	struct:llvm::MachO::dylib_module
objc_module_info_size	MachO.h	/^      uint32_t objc_module_info_size;$/;"	m	struct:llvm::MachO::dylib_module_64
object_creator	ManagedStatic.h	/^void* object_creator() {$/;"	f	namespace:llvm
object_deleter	ManagedStatic.h	/^template<typename T, size_t N> struct object_deleter<T[N]> {$/;"	s	namespace:llvm
object_deleter	ManagedStatic.h	/^template<typename T> struct object_deleter {$/;"	s	namespace:llvm
offset	MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::fat_arch
offset	MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::section
offset	MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::section_64
offset	MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::symseg_command
offset	MachO.h	/^      uint32_t offset;$/;"	m	struct:llvm::MachO::twolevel_hints_command
old_value	SaveAndRestore.h	/^  T old_value;$/;"	m	struct:llvm::SaveAndRestore
old_value	SaveAndRestore.h	/^  const bool old_value;$/;"	m	struct:llvm::SaveOr
onLClose	IntegersSubsetMapping.h	/^    void onLClose(const IntTy &Pt) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onLOpen	IntegersSubsetMapping.h	/^    void onLOpen(const IntTy &Pt, SuccessorClass *S) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onLRClose	IntegersSubsetMapping.h	/^    void onLRClose(const IntTy &Pt) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onLROpen	IntegersSubsetMapping.h	/^    void onLROpen(const IntTy &Pt,$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onRClose	IntegersSubsetMapping.h	/^    void onRClose(const IntTy &Pt) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onROpen	IntegersSubsetMapping.h	/^    void onROpen(const IntTy &Pt, SuccessorClass *S) {$/;"	f	class:llvm::IntegersSubsetMapping::DiffStateMachine
onlyReadsMemory	CallSite.h	/^  bool onlyReadsMemory() const {$/;"	f	class:llvm::CallSiteBase
opInfo	Win64EH.h	/^            opInfo:4;$/;"	m	struct:llvm::Win64EH::UnwindCode::__anon58
open_failed	system_error.h	/^  open_failed             = 110, \/\/ ERROR_OPEN_FAILED,$/;"	e	enum:llvm::windows_error::_
operation_canceled	system_error.h	/^  operation_canceled                  = ECANCELED,$/;"	e	enum:llvm::errc::_
operation_in_progress	system_error.h	/^  operation_in_progress               = EINPROGRESS,$/;"	e	enum:llvm::errc::_
operation_not_permitted	system_error.h	/^  operation_not_permitted             = EPERM,$/;"	e	enum:llvm::errc::_
operation_not_supported	system_error.h	/^  operation_not_supported             = EOPNOTSUPP,$/;"	e	enum:llvm::errc::_
operation_would_block	system_error.h	/^  operation_would_block               = EWOULDBLOCK,$/;"	e	enum:llvm::errc::_
operator !=	BranchProbability.h	/^  bool operator!=(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator !=	CFG.h	/^  inline bool operator!=(const Self& x) const { return !operator==(x); }$/;"	f	class:llvm::PredIterator
operator !=	CFG.h	/^  inline bool operator!=(const Self& x) const { return !operator==(x); }$/;"	f	class:llvm::SuccIterator
operator !=	CallSite.h	/^  bool operator!=(const CallSite &CS) const { return I != CS.I; }$/;"	f	class:llvm::CallSite
operator !=	ConstantRange.h	/^  bool operator!=(const ConstantRange &CR) const {$/;"	f	class:llvm::ConstantRange
operator !=	DebugLoc.h	/^    bool operator!=(const DebugLoc &DL) const { return !(*this == DL); }$/;"	f	class:llvm::DebugLoc
operator !=	FileSystem.h	/^  bool operator!=(const directory_entry& rhs) const { return !(*this == rhs); }$/;"	f	class:llvm::sys::fs::directory_entry
operator !=	FileSystem.h	/^  bool operator!=(const directory_iterator &RHS) const {$/;"	f	class:llvm::sys::fs::directory_iterator
operator !=	FileSystem.h	/^  bool operator!=(const recursive_directory_iterator &RHS) const {$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
operator !=	GetElementPtrTypeIterator.h	/^    bool operator!=(const generic_gep_type_iterator& x) const {$/;"	f	class:llvm::generic_gep_type_iterator
operator !=	InstIterator.h	/^  inline bool operator!=(const InstIterator& y) const {$/;"	f	class:llvm::InstIterator
operator !=	IntegersSubset.h	/^    bool operator!=(const self &RHS) const {$/;"	f	class:llvm::IntRange
operator !=	PathV1.h	/^      bool operator!=(const Path &that) const { return !(*this == that); }$/;"	f	class:llvm::sys::Path
operator !=	Registry.h	/^      bool operator!=(const iterator &That) const { return Cur != That.Cur; }$/;"	f	class:llvm::Registry::iterator
operator !=	SMLoc.h	/^  bool operator!=(const SMLoc &RHS) const { return RHS.Ptr != Ptr; }$/;"	f	class:llvm::SMLoc
operator !=	StringPool.h	/^    inline bool operator!=(const PooledStringPtr &That) { return S != That.S; }$/;"	f	class:llvm::PooledStringPtr
operator !=	TargetRegistry.h	/^      bool operator!=(const iterator &x) const {$/;"	f	class:llvm::TargetRegistry::iterator
operator !=	TimeValue.h	/^    int operator != (const TimeValue &that) const { return !(*this == that); }$/;"	f	class:llvm::sys::TimeValue
operator !=	YAMLParser.h	/^  bool operator !=(const basic_collection_iterator &Other) const {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator !=	YAMLParser.h	/^  bool operator !=(const document_iterator &Other) {$/;"	f	class:llvm::yaml::document_iterator
operator !=	system_error.h	/^  bool operator!=(const error_category& _rhs) const {return !(*this == _rhs);}$/;"	f	class:llvm::error_category
operator !=	system_error.h	/^inline bool operator!=(const error_code& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator !=	system_error.h	/^inline bool operator!=(const error_code& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator !=	system_error.h	/^inline bool operator!=(const error_condition& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator !=	system_error.h	/^inline bool operator!=(const error_condition& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator &	FileSystem.h	/^inline perms operator&(perms l , perms r) {$/;"	f	namespace:llvm::sys::fs
operator &=	FileSystem.h	/^inline perms &operator&=(perms &l, perms r) {$/;"	f	namespace:llvm::sys::fs
operator ()	IntegersSubsetMapping.h	/^    bool operator()(const Cluster &C1, const Cluster &C2) {$/;"	f	struct:llvm::IntegersSubsetMapping::ClustersCmp
operator ()	PassNameParser.h	/^  bool operator()(const PassInfo &P) const {$/;"	f	class:llvm::PassArgFilter
operator *	CFG.h	/^  inline pointer operator*() const { return Term->getSuccessor(idx); }$/;"	f	class:llvm::SuccIterator
operator *	CFG.h	/^  inline pointer operator*() const {$/;"	f	class:llvm::PredIterator
operator *	FileSystem.h	/^  const directory_entry &operator*() const { return *State->Stack.top(); }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
operator *	FileSystem.h	/^  const directory_entry &operator*() const { return State->CurrentEntry; }$/;"	f	class:llvm::sys::fs::directory_iterator
operator *	GetElementPtrTypeIterator.h	/^    Type *operator*() const {$/;"	f	class:llvm::generic_gep_type_iterator
operator *	InstIterator.h	/^  inline reference operator*()  const { return *BI; }$/;"	f	class:llvm::InstIterator
operator *	ManagedStatic.h	/^  C &operator*() {$/;"	f	class:llvm::ManagedStatic
operator *	ManagedStatic.h	/^  const C &operator*() const {$/;"	f	class:llvm::ManagedStatic
operator *	PathV2.h	/^  reference operator*() const { return Component; }$/;"	f	class:llvm::sys::path::const_iterator
operator *	Registry.h	/^      const entry &operator*() const { return Cur->Val; }$/;"	f	class:llvm::Registry::iterator
operator *	StringPool.h	/^    inline const char *operator*() const { return begin(); }$/;"	f	class:llvm::PooledStringPtr
operator *	TargetRegistry.h	/^      const Target &operator*() const {$/;"	f	class:llvm::TargetRegistry::iterator
operator *	ValueHandle.h	/^  Value &operator*() const { return *getValPtr(); }$/;"	f	class:llvm::ValueHandleBase
operator *	ValueHandle.h	/^  ValueTy &operator*() const { return *getValPtr(); }$/;"	f	class:llvm::AssertingVH
operator *	ValueHandle.h	/^  ValueTy &operator*() const { return *getValPtr(); }$/;"	f	class:llvm::TrackingVH
operator *	YAMLParser.h	/^  Document &operator *() {$/;"	f	class:llvm::yaml::document_iterator
operator *	YAMLParser.h	/^  ValueT &operator *() const {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator +	CFG.h	/^  inline Self operator+(int Right) {$/;"	f	class:llvm::SuccIterator
operator +	TimeValue.h	/^inline TimeValue operator + (const TimeValue &tv1, const TimeValue &tv2) {$/;"	f	namespace:llvm::sys
operator ++	CFG.h	/^  inline Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::PredIterator
operator ++	CFG.h	/^  inline Self operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::SuccIterator
operator ++	CFG.h	/^  inline Self& operator++() {   \/\/ Preincrement$/;"	f	class:llvm::PredIterator
operator ++	CFG.h	/^  inline Self& operator++() { ++idx; return *this; } \/\/ Preincrement$/;"	f	class:llvm::SuccIterator
operator ++	GetElementPtrTypeIterator.h	/^    generic_gep_type_iterator operator++(int) { \/\/ Postincrement$/;"	f	class:llvm::generic_gep_type_iterator
operator ++	GetElementPtrTypeIterator.h	/^    generic_gep_type_iterator& operator++() {   \/\/ Preincrement$/;"	f	class:llvm::generic_gep_type_iterator
operator ++	InstIterator.h	/^  InstIterator& operator++() {$/;"	f	class:llvm::InstIterator
operator ++	InstIterator.h	/^  inline InstIterator operator++(int) {$/;"	f	class:llvm::InstIterator
operator ++	Registry.h	/^      iterator &operator++() { Cur = Cur->Next; return *this; }$/;"	f	class:llvm::Registry::iterator
operator ++	TargetRegistry.h	/^      iterator &operator++() {          \/\/ Preincrement$/;"	f	class:llvm::TargetRegistry::iterator
operator ++	TargetRegistry.h	/^      iterator operator++(int) {        \/\/ Postincrement$/;"	f	class:llvm::TargetRegistry::iterator
operator ++	YAMLParser.h	/^  basic_collection_iterator &operator++() {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator ++	YAMLParser.h	/^  document_iterator operator ++() {$/;"	f	class:llvm::yaml::document_iterator
operator +=	CFG.h	/^  inline Self& operator+=(int Right) {$/;"	f	class:llvm::SuccIterator
operator +=	TimeValue.h	/^    TimeValue& operator += (const TimeValue& that ) {$/;"	f	class:llvm::sys::TimeValue
operator +=	Timer.h	/^  void operator+=(const TimeRecord &RHS) {$/;"	f	class:llvm::TimeRecord
operator -	CFG.h	/^  inline Self operator-(int Right) {$/;"	f	class:llvm::SuccIterator
operator -	CFG.h	/^  inline int operator-(const Self& x) {$/;"	f	class:llvm::SuccIterator
operator -	TimeValue.h	/^inline TimeValue operator - (const TimeValue &tv1, const TimeValue &tv2) {$/;"	f	namespace:llvm::sys
operator --	CFG.h	/^  inline Self operator--(int) { \/\/ Postdecrement$/;"	f	class:llvm::SuccIterator
operator --	CFG.h	/^  inline Self& operator--() { --idx; return *this; }  \/\/ Predecrement$/;"	f	class:llvm::SuccIterator
operator --	InstIterator.h	/^  InstIterator& operator--() {$/;"	f	class:llvm::InstIterator
operator --	InstIterator.h	/^  inline InstIterator  operator--(int) {$/;"	f	class:llvm::InstIterator
operator -=	CFG.h	/^  inline Self& operator-=(int Right) {$/;"	f	class:llvm::SuccIterator
operator -=	TimeValue.h	/^    TimeValue& operator -= (const TimeValue &that ) {$/;"	f	class:llvm::sys::TimeValue
operator -=	Timer.h	/^  void operator-=(const TimeRecord &RHS) {$/;"	f	class:llvm::TimeRecord
operator ->	CFG.h	/^  inline pointer *operator->() const { return &operator*(); }$/;"	f	class:llvm::PredIterator
operator ->	CFG.h	/^  inline pointer operator->() const { return operator*(); }$/;"	f	class:llvm::SuccIterator
operator ->	CallSite.h	/^  InstrTy *operator->() const { return I.getPointer(); }$/;"	f	class:llvm::CallSiteBase
operator ->	CommandLine.h	/^  DataType operator->() const { return Value; }$/;"	f	class:llvm::cl::opt_storage
operator ->	FileSystem.h	/^  const directory_entry *operator->() const { return &*State->Stack.top(); }$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
operator ->	FileSystem.h	/^  const directory_entry *operator->() const { return &State->CurrentEntry; }$/;"	f	class:llvm::sys::fs::directory_iterator
operator ->	GetElementPtrTypeIterator.h	/^    Type *operator->() const { return operator*(); }$/;"	f	class:llvm::generic_gep_type_iterator
operator ->	InstIterator.h	/^  inline pointer operator->() const { return &operator*(); }$/;"	f	class:llvm::InstIterator
operator ->	IntegersSubset.h	/^  Constant *operator->() { return Holder; }$/;"	f	class:llvm::IntegersSubset
operator ->	IntegersSubset.h	/^  const Constant *operator->() const { return Holder; }$/;"	f	class:llvm::IntegersSubset
operator ->	ManagedStatic.h	/^  C *operator->() {$/;"	f	class:llvm::ManagedStatic
operator ->	ManagedStatic.h	/^  const C *operator->() const {$/;"	f	class:llvm::ManagedStatic
operator ->	PathV2.h	/^  pointer   operator->() const { return &Component; }$/;"	f	class:llvm::sys::path::const_iterator
operator ->	Registry.h	/^      const entry *operator->() const { return &Cur->Val; }$/;"	f	class:llvm::Registry::iterator
operator ->	TargetRegistry.h	/^      const Target *operator->() const {$/;"	f	class:llvm::TargetRegistry::iterator
operator ->	ValueHandle.h	/^  Value *operator->() const { return getValPtr(); }$/;"	f	class:llvm::ValueHandleBase
operator ->	ValueHandle.h	/^  ValueTy *operator->() const { return getValPtr(); }$/;"	f	class:llvm::AssertingVH
operator ->	ValueHandle.h	/^  ValueTy *operator->() const { return getValPtr(); }$/;"	f	class:llvm::TrackingVH
operator ->	YAMLParser.h	/^  OwningPtr<Document> &operator ->() {$/;"	f	class:llvm::yaml::document_iterator
operator ->	YAMLParser.h	/^  ValueT *operator ->() const {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator <	BlockFrequency.h	/^  bool operator<(const BlockFrequency &RHS) const {$/;"	f	class:llvm::BlockFrequency
operator <	BranchProbability.h	/^  bool operator<(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator <	CFG.h	/^  inline bool operator<(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator <	CallSite.h	/^  bool operator<(const CallSite &CS) const {$/;"	f	class:llvm::CallSite
operator <	IntegersSubset.h	/^    bool operator<(const self &RHS) const {$/;"	f	class:llvm::IntRange
operator <	TimeValue.h	/^    int operator < (const TimeValue &that) const { return that > *this; }$/;"	f	class:llvm::sys::TimeValue
operator <	Timer.h	/^  bool operator<(const TimeRecord &T) const {$/;"	f	class:llvm::TimeRecord
operator <	system_error.h	/^  bool operator< (const error_category& _rhs) const {return this < &_rhs;}$/;"	f	class:llvm::error_category
operator <	system_error.h	/^inline bool operator<(const error_code& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator <	system_error.h	/^inline bool operator<(const error_condition& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator <<	ConstantRange.h	/^inline raw_ostream &operator<<(raw_ostream &OS, const ConstantRange &CR) {$/;"	f	namespace:llvm
operator <<	raw_ostream.h	/^  raw_ostream &operator<<(StringRef Str) {$/;"	f	class:llvm::raw_ostream
operator <<	raw_ostream.h	/^  raw_ostream &operator<<(char C) {$/;"	f	class:llvm::raw_ostream
operator <<	raw_ostream.h	/^  raw_ostream &operator<<(const char *Str) {$/;"	f	class:llvm::raw_ostream
operator <<	raw_ostream.h	/^  raw_ostream &operator<<(const std::string &Str) {$/;"	f	class:llvm::raw_ostream
operator <<	raw_ostream.h	/^  raw_ostream &operator<<(int N) {$/;"	f	class:llvm::raw_ostream
operator <<	raw_ostream.h	/^  raw_ostream &operator<<(signed char C) {$/;"	f	class:llvm::raw_ostream
operator <<	raw_ostream.h	/^  raw_ostream &operator<<(unsigned char C) {$/;"	f	class:llvm::raw_ostream
operator <<	raw_ostream.h	/^  raw_ostream &operator<<(unsigned int N) {$/;"	f	class:llvm::raw_ostream
operator <<=	IntegersSubset.h	/^  IntItem& operator <<= (unsigned RHS) {$/;"	f	class:llvm::IntItem
operator <=	BlockFrequency.h	/^  bool operator<=(const BlockFrequency &RHS) const {$/;"	f	class:llvm::BlockFrequency
operator <=	BranchProbability.h	/^  bool operator<=(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator <=	CFG.h	/^  inline bool operator<=(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator <=	TimeValue.h	/^    int operator <= (const TimeValue &that) const { return that >= *this; }$/;"	f	class:llvm::sys::TimeValue
operator =	CFG.h	/^  inline const Self &operator=(const Self &I) {$/;"	f	class:llvm::SuccIterator
operator =	CommandLine.h	/^  DataType &operator=(const T &Val) {$/;"	f	class:llvm::cl::opt
operator =	CommandLine.h	/^  OptionValue<DataType> &operator=(const DT& V) {$/;"	f	struct:llvm::cl::OptionValue
operator =	CommandLine.h	/^  OptionValue<cl::boolOrDefault> &operator=(const cl::boolOrDefault& V) {$/;"	f	struct:llvm::cl::OptionValue
operator =	CommandLine.h	/^  OptionValue<std::string> &operator=(const std::string& V) {$/;"	f	struct:llvm::cl::OptionValue
operator =	Endian.h	/^  void operator=(value_type newValue) {$/;"	f	class:llvm::support::detail::packed_endian_specific_integral
operator =	IntegersSubset.h	/^  self& operator=(const self& RHS) {$/;"	f	class:llvm::IntegersSubsetGeneric
operator =	PathV1.h	/^      Path &operator=(const Path &that) {$/;"	f	class:llvm::sys::Path
operator =	PathV1.h	/^      PathWithStatus &operator=(const Path &that) {$/;"	f	class:llvm::sys::PathWithStatus
operator =	PathV1.h	/^      PathWithStatus &operator=(const PathWithStatus &that) {$/;"	f	class:llvm::sys::PathWithStatus
operator =	StringPool.h	/^    PooledStringPtr &operator=(const PooledStringPtr &That) {$/;"	f	class:llvm::PooledStringPtr
operator =	Timer.h	/^  const Timer &operator=(const Timer &T) {$/;"	f	class:llvm::Timer
operator =	ValueHandle.h	/^  Value *operator=(Value *RHS) {$/;"	f	class:llvm::ValueHandleBase
operator =	ValueHandle.h	/^  Value *operator=(Value *RHS) {$/;"	f	class:llvm::WeakVH
operator =	ValueHandle.h	/^  Value *operator=(const ValueHandleBase &RHS) {$/;"	f	class:llvm::ValueHandleBase
operator =	ValueHandle.h	/^  Value *operator=(const ValueHandleBase &RHS) {$/;"	f	class:llvm::WeakVH
operator =	ValueHandle.h	/^  ValueTy *operator=(ValueTy *RHS) {$/;"	f	class:llvm::AssertingVH
operator =	ValueHandle.h	/^  ValueTy *operator=(ValueTy *RHS) {$/;"	f	class:llvm::TrackingVH
operator =	ValueHandle.h	/^  ValueTy *operator=(const AssertingVH<ValueTy> &RHS) {$/;"	f	class:llvm::AssertingVH
operator =	ValueHandle.h	/^  ValueTy *operator=(const TrackingVH<ValueTy> &RHS) {$/;"	f	class:llvm::TrackingVH
operator =	system_error.h	/^    operator=(E _e)$/;"	f	class:llvm::error_code
operator =	system_error.h	/^    operator=(E _e)$/;"	f	class:llvm::error_condition
operator ==	BranchProbability.h	/^  bool operator==(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator ==	CFG.h	/^  inline bool operator==(const Self& x) const { return It == x.It; }$/;"	f	class:llvm::PredIterator
operator ==	CFG.h	/^  inline bool operator==(const Self& x) const { return idx == x.idx; }$/;"	f	class:llvm::SuccIterator
operator ==	CallSite.h	/^  bool operator==(const CallSite &CS) const { return I == CS.I; }$/;"	f	class:llvm::CallSite
operator ==	ConstantRange.h	/^  bool operator==(const ConstantRange &CR) const {$/;"	f	class:llvm::ConstantRange
operator ==	DebugLoc.h	/^    bool operator==(const DebugLoc &DL) const {$/;"	f	class:llvm::DebugLoc
operator ==	FileSystem.h	/^  bool operator==(const directory_entry& rhs) const { return Path == rhs.Path; }$/;"	f	class:llvm::sys::fs::directory_entry
operator ==	FileSystem.h	/^  bool operator==(const directory_iterator &RHS) const {$/;"	f	class:llvm::sys::fs::directory_iterator
operator ==	FileSystem.h	/^  bool operator==(const recursive_directory_iterator &RHS) const {$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
operator ==	GetElementPtrTypeIterator.h	/^    bool operator==(const generic_gep_type_iterator& x) const {$/;"	f	class:llvm::generic_gep_type_iterator
operator ==	InstIterator.h	/^  inline bool operator==(const InstIterator &y) const {$/;"	f	class:llvm::InstIterator
operator ==	IntegersSubset.h	/^    bool operator==(const self &RHS) const {$/;"	f	class:llvm::IntRange
operator ==	Registry.h	/^      bool operator==(const iterator &That) const { return Cur == That.Cur; }$/;"	f	class:llvm::Registry::iterator
operator ==	SMLoc.h	/^  bool operator==(const SMLoc &RHS) const { return RHS.Ptr == Ptr; }$/;"	f	class:llvm::SMLoc
operator ==	StringPool.h	/^    inline bool operator==(const PooledStringPtr &That) { return S == That.S; }$/;"	f	class:llvm::PooledStringPtr
operator ==	TargetRegistry.h	/^      bool operator==(const iterator &x) const {$/;"	f	class:llvm::TargetRegistry::iterator
operator ==	TimeValue.h	/^    int operator == (const TimeValue &that) const {$/;"	f	class:llvm::sys::TimeValue
operator ==	YAMLParser.h	/^  bool operator ==(const document_iterator &Other) {$/;"	f	class:llvm::yaml::document_iterator
operator ==	system_error.h	/^  bool operator==(const error_category& _rhs) const {return this == &_rhs;}$/;"	f	class:llvm::error_category
operator ==	system_error.h	/^inline bool operator==(const error_code& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator ==	system_error.h	/^inline bool operator==(const error_code& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator ==	system_error.h	/^inline bool operator==(const error_condition& _x, const error_code& _y) {$/;"	f	namespace:llvm
operator ==	system_error.h	/^inline bool operator==(const error_condition& _x, const error_condition& _y) {$/;"	f	namespace:llvm
operator >	BlockFrequency.h	/^  bool operator>(const BlockFrequency &RHS) const {$/;"	f	class:llvm::BlockFrequency
operator >	BranchProbability.h	/^  bool operator>(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator >	CFG.h	/^  inline bool operator>(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator >	TimeValue.h	/^    int operator > (const TimeValue &that) const {$/;"	f	class:llvm::sys::TimeValue
operator >=	BlockFrequency.h	/^  bool operator>=(const BlockFrequency &RHS) const {$/;"	f	class:llvm::BlockFrequency
operator >=	BranchProbability.h	/^  bool operator>=(BranchProbability RHS) const {$/;"	f	class:llvm::BranchProbability
operator >=	CFG.h	/^  inline bool operator>=(const Self& x) const {$/;"	f	class:llvm::SuccIterator
operator >=	TimeValue.h	/^    int operator >= (const TimeValue &that) const {$/;"	f	class:llvm::sys::TimeValue
operator Constant*	IntegersSubset.h	/^  operator Constant*() { return Holder; }$/;"	f	class:llvm::IntegersSubset
operator DataType	CommandLine.h	/^  operator DataType() const { return getValue(); }$/;"	f	class:llvm::cl::opt_storage
operator DataType	CommandLine.h	/^  operator DataType() const { return this->getValue(); }$/;"	f	class:llvm::cl::opt_storage
operator LockFileState	LockFileManager.h	/^  operator LockFileState() const { return getState(); }$/;"	f	class:llvm::LockFileManager
operator Value*	ValueHandle.h	/^  operator Value*() const {$/;"	f	class:llvm::CallbackVH
operator Value*	ValueHandle.h	/^  operator Value*() const {$/;"	f	class:llvm::WeakVH
operator ValueT*	YAMLParser.h	/^  operator ValueT*() const {$/;"	f	class:llvm::yaml::basic_collection_iterator
operator ValueTy*	ValueHandle.h	/^  operator ValueTy*() const {$/;"	f	class:llvm::AssertingVH
operator ValueTy*	ValueHandle.h	/^  operator ValueTy*() const {$/;"	f	class:llvm::TrackingVH
operator []	OutputBuffer.h	/^    const unsigned char &operator[](unsigned Index) const {$/;"	f	class:llvm::OutputBuffer
operator []	OutputBuffer.h	/^    unsigned char &operator[](unsigned Index) {$/;"	f	class:llvm::OutputBuffer
operator bool	CallSite.h	/^  operator bool() const { return I.getPointer(); }$/;"	f	class:llvm::CallSiteBase
operator bool	StringPool.h	/^    inline operator bool() const { return S != 0; }$/;"	f	class:llvm::PooledStringPtr
operator const APInt&	IntegersSubset.h	/^  operator const APInt&() const {$/;"	f	class:llvm::IntItem
operator const Constant*	IntegersSubset.h	/^  operator const Constant*() const { return Holder; }$/;"	f	class:llvm::IntegersSubset
operator delete	Allocator.h	/^inline void operator delete(void *, llvm::BumpPtrAllocator &) {}$/;"	f
operator delete	RecyclingAllocator.h	/^inline void operator delete(void *E,$/;"	f
operator delete	YAMLParser.h	/^  void operator delete(void *) throw() {}$/;"	f	class:llvm::yaml::Node
operator delete	YAMLParser.h	/^  void operator delete(void *Ptr, BumpPtrAllocator &Alloc, size_t) throw() {$/;"	f	class:llvm::yaml::Node
operator int	FileSystem.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::sys::fs::copy_option
operator int	FileSystem.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::sys::fs::file_magic
operator int	FileSystem.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::sys::fs::file_type
operator int	system_error.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::errc
operator int	system_error.h	/^  operator int() const {return v_;}$/;"	f	struct:llvm::windows_error
operator new	Allocator.h	/^inline void *operator new(size_t Size, llvm::BumpPtrAllocator &Allocator) {$/;"	f
operator new	RecyclingAllocator.h	/^inline void *operator new(size_t,$/;"	f
operator new	YAMLParser.h	/^  void *operator new ( size_t Size$/;"	f	class:llvm::yaml::Node
operator unspecified_bool_type	system_error.h	/^  operator unspecified_bool_type() const { \/\/ true if error$/;"	f	class:llvm::error_code
operator unspecified_bool_type	system_error.h	/^  operator unspecified_bool_type() const { \/\/ true if error$/;"	f	class:llvm::error_condition
operator value_type	Endian.h	/^  operator value_type() const {$/;"	f	class:llvm::support::detail::packed_endian_specific_integral
operator value_type	type_traits.h	/^  operator value_type() { return value; }$/;"	f	struct:llvm::integral_constant
operator |	FileSystem.h	/^inline perms operator|(perms l , perms r) {$/;"	f	namespace:llvm::sys::fs
operator |=	FileSystem.h	/^inline perms &operator|=(perms &l, perms r) {$/;"	f	namespace:llvm::sys::fs
operator ~	FileSystem.h	/^inline perms operator~(perms x) {$/;"	f	namespace:llvm::sys::fs
opt	CommandLine.h	/^  explicit opt(const M0t &M0) : Option(Optional, NotHidden) {$/;"	f	class:llvm::cl::opt
opt	CommandLine.h	/^  opt(const M0t &M0, const M1t &M1) : Option(Optional, NotHidden) {$/;"	f	class:llvm::cl::opt
opt	CommandLine.h	/^  opt(const M0t &M0, const M1t &M1, const M2t &M2, const M3t &M3,$/;"	f	class:llvm::cl::opt
opt	CommandLine.h	/^  opt(const M0t &M0, const M1t &M1, const M2t &M2,$/;"	f	class:llvm::cl::opt
opt	CommandLine.h	/^  opt(const M0t &M0, const M1t &M1,$/;"	f	class:llvm::cl::opt
opt	CommandLine.h	/^  static void opt(FormattingFlags FF, Option &O) { O.setFormattingFlag(FF); }$/;"	f	struct:llvm::cl::applicator
opt	CommandLine.h	/^  static void opt(MiscFlags MF, Option &O) { O.setMiscFlag(MF); }$/;"	f	struct:llvm::cl::applicator
opt	CommandLine.h	/^  static void opt(NumOccurrencesFlag NO, Option &O) {$/;"	f	struct:llvm::cl::applicator
opt	CommandLine.h	/^  static void opt(OptionHidden OH, Option &O) { O.setHiddenFlag(OH); }$/;"	f	struct:llvm::cl::applicator
opt	CommandLine.h	/^  static void opt(ValueExpected VE, Option &O) { O.setValueExpectedFlag(VE); }$/;"	f	struct:llvm::cl::applicator
opt	CommandLine.h	/^  static void opt(const Mod &M, Opt &O) { M.apply(O); }$/;"	f	struct:llvm::cl::applicator
opt	CommandLine.h	/^  static void opt(const char *Str, Opt &O) { O.setArgStr(Str); }$/;"	f	struct:llvm::cl::applicator
opt	CommandLine.h	/^class opt : public Option,$/;"	c	namespace:llvm::cl
opt_storage	CommandLine.h	/^  opt_storage() : Location(0) {}$/;"	f	class:llvm::cl::opt_storage
opt_storage	CommandLine.h	/^  opt_storage() : Value(DataType()) {}$/;"	f	class:llvm::cl::opt_storage
opt_storage	CommandLine.h	/^class opt_storage {$/;"	c	namespace:llvm::cl
opt_storage	CommandLine.h	/^class opt_storage<DataType, false, false> {$/;"	c	namespace:llvm::cl
opt_storage	CommandLine.h	/^class opt_storage<DataType,false,true> : public DataType {$/;"	c	namespace:llvm::cl
optimize	IntegersSubsetMapping.h	/^  void optimize() {$/;"	f	class:llvm::IntegersSubsetMapping
os	ToolOutputFile.h	/^  raw_fd_ostream &os() { return OS; }$/;"	f	class:llvm::tool_output_file
others_all	FileSystem.h	/^  others_all   = others_read | others_write | others_exe, $/;"	e	enum:llvm::sys::fs::perms
others_exe	FileSystem.h	/^  others_exe   =   01, $/;"	e	enum:llvm::sys::fs::perms
others_read	FileSystem.h	/^  others_read  =   04, $/;"	e	enum:llvm::sys::fs::perms
others_write	FileSystem.h	/^  others_write =   02, $/;"	e	enum:llvm::sys::fs::perms
out_of_paper	system_error.h	/^  out_of_paper            = 28, \/\/ ERROR_OUT_OF_PAPER,$/;"	e	enum:llvm::windows_error::_
outaddr	OutputBuffer.h	/^    void outaddr(uint64_t X) {$/;"	f	class:llvm::OutputBuffer
outaddr32	OutputBuffer.h	/^    void outaddr32(unsigned X) {$/;"	f	class:llvm::OutputBuffer
outaddr64	OutputBuffer.h	/^    void outaddr64(uint64_t X) {$/;"	f	class:llvm::OutputBuffer
outbyte	OutputBuffer.h	/^    void outbyte(unsigned char X) {$/;"	f	class:llvm::OutputBuffer
outhalf	OutputBuffer.h	/^    void outhalf(unsigned short X) {$/;"	f	class:llvm::OutputBuffer
outofmemory	system_error.h	/^  outofmemory             = 14, \/\/ ERROR_OUTOFMEMORY,$/;"	e	enum:llvm::windows_error::_
outstring	OutputBuffer.h	/^    void outstring(const std::string &S, unsigned Length) {$/;"	f	class:llvm::OutputBuffer
outword	OutputBuffer.h	/^    void outword(unsigned X) {$/;"	f	class:llvm::OutputBuffer
outxword	OutputBuffer.h	/^    void outxword(uint64_t X) {$/;"	f	class:llvm::OutputBuffer
overwrite_if_exists	FileSystem.h	/^    overwrite_if_exists$/;"	e	enum:llvm::sys::fs::copy_option::_
owner_all	FileSystem.h	/^  owner_all    = owner_read | owner_write | owner_exe,$/;"	e	enum:llvm::sys::fs::perms
owner_dead	system_error.h	/^  owner_dead                          = EOWNERDEAD,$/;"	e	enum:llvm::errc::_
owner_exe	FileSystem.h	/^  owner_exe    = 0100, $/;"	e	enum:llvm::sys::fs::perms
owner_read	FileSystem.h	/^  owner_read   = 0400, $/;"	e	enum:llvm::sys::fs::perms
owner_write	FileSystem.h	/^  owner_write  = 0200, $/;"	e	enum:llvm::sys::fs::perms
p_align	ELF.h	/^  Elf32_Word p_align;  \/\/ Segment alignment constraint$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_align	ELF.h	/^  Elf64_Xword  p_align;  \/\/ Segment alignment constraint$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_filesz	ELF.h	/^  Elf32_Word p_filesz; \/\/ Num. of bytes in file image of segment (may be zero)$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_filesz	ELF.h	/^  Elf64_Xword  p_filesz; \/\/ Num. of bytes in file image of segment (may be zero)$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_flags	ELF.h	/^  Elf32_Word p_flags;  \/\/ Segment flags$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_flags	ELF.h	/^  Elf64_Word   p_flags;  \/\/ Segment flags$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_memsz	ELF.h	/^  Elf32_Word p_memsz;  \/\/ Num. of bytes in mem image of segment (may be zero)$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_memsz	ELF.h	/^  Elf64_Xword  p_memsz;  \/\/ Num. of bytes in mem image of segment (may be zero)$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_offset	ELF.h	/^  Elf32_Off  p_offset; \/\/ File offset where segment is located, in bytes$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_offset	ELF.h	/^  Elf64_Off    p_offset; \/\/ File offset where segment is located, in bytes$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_paddr	ELF.h	/^  Elf32_Addr p_paddr;  \/\/ Physical address of beginning of segment (OS-specific)$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_paddr	ELF.h	/^  Elf64_Addr   p_paddr;  \/\/ Physical address of beginning of segment (OS-specific)$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_type	ELF.h	/^  Elf32_Word p_type;   \/\/ Type of segment$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_type	ELF.h	/^  Elf64_Word   p_type;   \/\/ Type of segment$/;"	m	struct:llvm::ELF::Elf64_Phdr
p_vaddr	ELF.h	/^  Elf32_Addr p_vaddr;  \/\/ Virtual address of beginning of segment$/;"	m	struct:llvm::ELF::Elf32_Phdr
p_vaddr	ELF.h	/^  Elf64_Addr   p_vaddr;  \/\/ Virtual address of beginning of segment$/;"	m	struct:llvm::ELF::Elf64_Phdr
packed_endian_specific_integral	Endian.h	/^class packed_endian_specific_integral<value_type, big, aligned> {$/;"	c	namespace:llvm::support::detail
packed_endian_specific_integral	Endian.h	/^class packed_endian_specific_integral<value_type, big, unaligned> {$/;"	c	namespace:llvm::support::detail
packed_endian_specific_integral	Endian.h	/^class packed_endian_specific_integral<value_type, little, aligned> {$/;"	c	namespace:llvm::support::detail
packed_endian_specific_integral	Endian.h	/^class packed_endian_specific_integral<value_type, little, unaligned> {$/;"	c	namespace:llvm::support::detail
paramHasAttr	CallSite.h	/^  bool paramHasAttr(unsigned i, Attributes::AttrVal A) const {$/;"	f	class:llvm::CallSiteBase
parse	CommandLine.h	/^  bool parse(Option &, StringRef, StringRef Arg, char &Value) {$/;"	f	class:llvm::cl::parser
parse	CommandLine.h	/^  bool parse(Option &, StringRef, StringRef Arg, std::string &Value) {$/;"	f	class:llvm::cl::parser
parse	CommandLine.h	/^  bool parse(Option &O, StringRef ArgName, StringRef Arg, DataType &V) {$/;"	f	class:llvm::cl::parser
parser	CommandLine.h	/^class parser : public generic_parser_base {$/;"	c	namespace:llvm::cl
parser	CommandLine.h	/^class parser<bool> : public basic_parser<bool> {$/;"	c	namespace:llvm::cl
parser	CommandLine.h	/^class parser<boolOrDefault> : public basic_parser<boolOrDefault> {$/;"	c	namespace:llvm::cl
parser	CommandLine.h	/^class parser<char> : public basic_parser<char> {$/;"	c	namespace:llvm::cl
parser	CommandLine.h	/^class parser<double> : public basic_parser<double> {$/;"	c	namespace:llvm::cl
parser	CommandLine.h	/^class parser<float> : public basic_parser<float> {$/;"	c	namespace:llvm::cl
parser	CommandLine.h	/^class parser<int> : public basic_parser<int> {$/;"	c	namespace:llvm::cl
parser	CommandLine.h	/^class parser<std::string> : public basic_parser<std::string> {$/;"	c	namespace:llvm::cl
parser	CommandLine.h	/^class parser<unsigned long long> : public basic_parser<unsigned long long> {$/;"	c	namespace:llvm::cl
parser	CommandLine.h	/^class parser<unsigned> : public basic_parser<unsigned> {$/;"	c	namespace:llvm::cl
parser_data_type	CommandLine.h	/^  typedef DataType parser_data_type;$/;"	t	class:llvm::cl::basic_parser
parser_data_type	CommandLine.h	/^  typedef DataType parser_data_type;$/;"	t	class:llvm::cl::parser
passEnumerate	PassNameParser.h	/^  virtual void passEnumerate(const PassInfo *P) { passRegistered(P); }$/;"	f	class:llvm::PassNameParser
passRegistered	PassNameParser.h	/^  virtual void passRegistered(const PassInfo *P) {$/;"	f	class:llvm::PassNameParser
path	FileSystem.h	/^  const std::string &path() const { return Path; }$/;"	f	class:llvm::sys::fs::directory_entry
path	MachO.h	/^      uint32_t path;$/;"	m	struct:llvm::MachO::rpath_command
path	PathV1.h	/^      mutable std::string path;   \/\/\/< Storage for the path name.$/;"	m	class:llvm::sys::Path
path	PathV2.h	/^namespace path {$/;"	n	namespace:llvm::sys
path_not_found	system_error.h	/^  path_not_found          = 3, \/\/ ERROR_PATH_NOT_FOUND,$/;"	e	enum:llvm::windows_error::_
pecoff_executable	FileSystem.h	/^    pecoff_executable         \/\/\/< PECOFF executable file$/;"	e	enum:llvm::sys::fs::file_magic::_
permission_denied	system_error.h	/^  permission_denied                   = EACCES,$/;"	e	enum:llvm::errc::_
permissions	FileSystem.h	/^  perms permissions() const { return Perms; }$/;"	f	class:llvm::sys::fs::file_status
permissions	FileSystem.h	/^  void permissions(perms p) { Perms = p; }$/;"	f	class:llvm::sys::fs::file_status
perms	FileSystem.h	/^enum perms {$/;"	g	namespace:llvm::sys::fs
perms_mask	FileSystem.h	/^  perms_mask      = all_all | set_uid_on_exe | set_gid_on_exe | sticky_bit, $/;"	e	enum:llvm::sys::fs::perms
perms_not_known	FileSystem.h	/^  perms_not_known = 0xFFFF,$/;"	e	enum:llvm::sys::fs::perms
pointer	CFG.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::PredIterator
pointer	CFG.h	/^  typedef typename super::pointer pointer;$/;"	t	class:llvm::SuccIterator
pointer	InstIterator.h	/^  typedef IIty*                           pointer;$/;"	t	class:llvm::InstIterator
pointer	PathV2.h	/^  typedef value_type *pointer;$/;"	t	class:llvm::sys::path::const_iterator
pop	FileSystem.h	/^  void pop() {$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
pos	raw_ostream.h	/^  uint64_t pos;$/;"	m	class:llvm::raw_fd_ostream
prebind_cksum_command	MachO.h	/^    struct prebind_cksum_command {$/;"	s	namespace:llvm::MachO
prebound_dylib_command	MachO.h	/^    struct prebound_dylib_command {$/;"	s	namespace:llvm::MachO
pred_begin	CFG.h	/^inline const_pred_iterator pred_begin(const BasicBlock *BB) {$/;"	f	namespace:llvm
pred_begin	CFG.h	/^inline pred_iterator pred_begin(BasicBlock *BB) { return pred_iterator(BB); }$/;"	f	namespace:llvm
pred_end	CFG.h	/^inline const_pred_iterator pred_end(const BasicBlock *BB) {$/;"	f	namespace:llvm
pred_end	CFG.h	/^inline pred_iterator pred_end(BasicBlock *BB) { return pred_iterator(BB, true);}$/;"	f	namespace:llvm
pred_iterator	CFG.h	/^typedef PredIterator<BasicBlock, Value::use_iterator> pred_iterator;$/;"	t	namespace:llvm
preg	Regex.h	/^    struct llvm_regex *preg;$/;"	m	class:llvm::Regex	typeref:struct:llvm::Regex::llvm_regex
prev	CrashRecoveryContext.h	/^  CrashRecoveryContextCleanup *prev, *next;$/;"	m	class:llvm::CrashRecoveryContextCleanup
print	CommandLine.h	/^  void print(const Option &O, const parser<DT> P, const DT &V,$/;"	f	struct:llvm::cl::OptionDiffPrinter
print	CommandLine.h	/^  void print(const Option &O, const parser<ParserDT> P, const ValDT &\/*V*\/,$/;"	f	struct:llvm::cl::OptionDiffPrinter
print	Format.h	/^  unsigned print(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object_base
printOptionDiff	CommandLine.h	/^  void printOptionDiff(const Option &O, const AnyOptionValue &V,$/;"	f	class:llvm::cl::generic_parser_base
printOptionDiff	CommandLine.h	/^void printOptionDiff($/;"	f	namespace:llvm::cl
printOptionDiff	CommandLine.h	/^void printOptionDiff(const Option &O, const generic_parser_base &P, const DT &V,$/;"	f	namespace:llvm::cl
printOptionInfo	CommandLine.h	/^  virtual void printOptionInfo(size_t GlobalWidth) const {$/;"	f	class:llvm::cl::bits
printOptionInfo	CommandLine.h	/^  virtual void printOptionInfo(size_t GlobalWidth) const {$/;"	f	class:llvm::cl::list
printOptionInfo	CommandLine.h	/^  virtual void printOptionInfo(size_t GlobalWidth) const {$/;"	f	class:llvm::cl::opt
printOptionInfo	PassNameParser.h	/^  virtual void printOptionInfo(const cl::Option &O, size_t GlobalWidth) const {$/;"	f	class:llvm::PassNameParser
printOptionValue	CommandLine.h	/^  virtual void printOptionValue(size_t GlobalWidth, bool Force) const {$/;"	f	class:llvm::cl::opt
printOptionValue	CommandLine.h	/^  virtual void printOptionValue(size_t \/*GlobalWidth*\/, bool \/*Force*\/) const {}$/;"	f	class:llvm::cl::bits
printOptionValue	CommandLine.h	/^  virtual void printOptionValue(size_t \/*GlobalWidth*\/, bool \/*Force*\/) const {}$/;"	f	class:llvm::cl::list
priv	FileSystem.h	/^    priv \/\/\/< May modify via data, but changes are lost on destruction.$/;"	e	enum:llvm::sys::fs::mapped_file_region::mapmode
prologSize	Win64EH.h	/^  uint8_t prologSize;$/;"	m	struct:llvm::Win64EH::UnwindInfo
protocol_error	system_error.h	/^  protocol_error                      = EPROTO,$/;"	e	enum:llvm::errc::_
protocol_not_supported	system_error.h	/^  protocol_not_supported              = EPROTONOSUPPORT,$/;"	e	enum:llvm::errc::_
provideInitialHead	Recycler.h	/^  RecyclerStruct *provideInitialHead() const { return createSentinel(); }$/;"	f	struct:llvm::ilist_traits
r_addend	ELF.h	/^  Elf32_Sword r_addend; \/\/ Compute value for relocatable field by adding this$/;"	m	struct:llvm::ELF::Elf32_Rela
r_addend	ELF.h	/^  Elf64_Sxword r_addend; \/\/ Compute value for relocatable field by adding this.$/;"	m	struct:llvm::ELF::Elf64_Rela
r_info	ELF.h	/^  Elf32_Word  r_info;   \/\/ Symbol table index and type of relocation to apply$/;"	m	struct:llvm::ELF::Elf32_Rela
r_info	ELF.h	/^  Elf32_Word r_info;   \/\/ Symbol table index and type of relocation to apply$/;"	m	struct:llvm::ELF::Elf32_Rel
r_info	ELF.h	/^  Elf64_Xword  r_info;   \/\/ Symbol table index and type of relocation to apply.$/;"	m	struct:llvm::ELF::Elf64_Rela
r_info	ELF.h	/^  Elf64_Xword r_info;   \/\/ Symbol table index and type of relocation to apply.$/;"	m	struct:llvm::ELF::Elf64_Rel
r_offset	ELF.h	/^  Elf32_Addr  r_offset; \/\/ Location (file byte offset, or program virtual addr)$/;"	m	struct:llvm::ELF::Elf32_Rela
r_offset	ELF.h	/^  Elf32_Addr r_offset; \/\/ Location (file byte offset, or program virtual addr)$/;"	m	struct:llvm::ELF::Elf32_Rel
r_offset	ELF.h	/^  Elf64_Addr  r_offset; \/\/ Location (file byte offset, or program virtual addr).$/;"	m	struct:llvm::ELF::Elf64_Rela
r_offset	ELF.h	/^  Elf64_Addr r_offset; \/\/ Location (file byte offset, or program virtual addr).$/;"	m	struct:llvm::ELF::Elf64_Rel
rangesFromConstant	IntegersSubset.h	/^  std::vector<Range> rangesFromConstant(Constant *C) {$/;"	f	class:llvm::IntegersSubset
raw_fd_ostream	raw_ostream.h	/^class raw_fd_ostream : public raw_ostream {$/;"	c	namespace:llvm
raw_null_ostream	raw_ostream.h	/^  explicit raw_null_ostream() {}$/;"	f	class:llvm::raw_null_ostream
raw_null_ostream	raw_ostream.h	/^class raw_null_ostream : public raw_ostream {$/;"	c	namespace:llvm
raw_os_ostream	raw_os_ostream.h	/^  raw_os_ostream(std::ostream &O) : OS(O) {}$/;"	f	class:llvm::raw_os_ostream
raw_os_ostream	raw_os_ostream.h	/^class raw_os_ostream : public raw_ostream {$/;"	c	namespace:llvm
raw_ostream	raw_ostream.h	/^  explicit raw_ostream(bool unbuffered=false)$/;"	f	class:llvm::raw_ostream
raw_ostream	raw_ostream.h	/^class raw_ostream {$/;"	c	namespace:llvm
raw_string_ostream	raw_ostream.h	/^  explicit raw_string_ostream(std::string &O) : OS(O) {}$/;"	f	class:llvm::raw_string_ostream
raw_string_ostream	raw_ostream.h	/^class raw_string_ostream : public raw_ostream {$/;"	c	namespace:llvm
raw_svector_ostream	raw_ostream.h	/^class raw_svector_ostream : public raw_ostream {$/;"	c	namespace:llvm
rbegin	PathV2.h	/^inline reverse_iterator rbegin(StringRef path) {$/;"	f	namespace:llvm::sys::path
readArcTag	GCOV.h	/^  bool readArcTag() {$/;"	f	class:llvm::GCOVBuffer
readBlockTag	GCOV.h	/^  bool readBlockTag() {$/;"	f	class:llvm::GCOVBuffer
readEdgeTag	GCOV.h	/^  bool readEdgeTag() {$/;"	f	class:llvm::GCOVBuffer
readFunctionTag	GCOV.h	/^  bool readFunctionTag() {$/;"	f	class:llvm::GCOVBuffer
readGCOVFormat	GCOV.h	/^  GCOV::GCOVFormat readGCOVFormat() {$/;"	f	class:llvm::GCOVBuffer
readInt	GCOV.h	/^  uint32_t readInt() {$/;"	f	class:llvm::GCOVBuffer
readInt64	GCOV.h	/^  uint64_t readInt64() {$/;"	f	class:llvm::GCOVBuffer
readLineTag	GCOV.h	/^  bool readLineTag() {$/;"	f	class:llvm::GCOVBuffer
readString	GCOV.h	/^  StringRef readString() {$/;"	f	class:llvm::GCOVBuffer
read_be	Endian.h	/^  inline value_type read_be(const void *memory) {$/;"	f	namespace:llvm::support::endian
read_fault	system_error.h	/^  read_fault              = 30, \/\/ ERROR_READ_FAULT,$/;"	e	enum:llvm::windows_error::_
read_le	Endian.h	/^  inline value_type read_le(const void *memory) {$/;"	f	namespace:llvm::support::endian
read_only_file_system	system_error.h	/^  read_only_file_system               = EROFS,$/;"	e	enum:llvm::errc::_
reader_acquire	RWMutex.h	/^      bool reader_acquire() {$/;"	f	class:llvm::sys::SmartRWMutex
reader_release	RWMutex.h	/^      bool reader_release() {$/;"	f	class:llvm::sys::SmartRWMutex
readers	RWMutex.h	/^      unsigned readers, writers;$/;"	m	class:llvm::sys::SmartRWMutex
readonly	FileSystem.h	/^    readonly, \/\/\/< May only access map via const_data as read only.$/;"	e	enum:llvm::sys::fs::mapped_file_region::mapmode
readwrite	FileSystem.h	/^    readwrite, \/\/\/< May access map via data and modify it. Written to path.$/;"	e	enum:llvm::sys::fs::mapped_file_region::mapmode
rebase_off	MachO.h	/^      uint32_t rebase_off;$/;"	m	struct:llvm::MachO::dyld_info_command
rebase_size	MachO.h	/^      uint32_t rebase_size;$/;"	m	struct:llvm::MachO::dyld_info_command
recoverResources	CrashRecoveryContext.h	/^  virtual void recoverResources() {$/;"	f	class:llvm::CrashRecoveryContextDeleteCleanup
recoverResources	CrashRecoveryContext.h	/^  virtual void recoverResources() {$/;"	f	class:llvm::CrashRecoveryContextDestructorCleanup
recoverResources	CrashRecoveryContext.h	/^  virtual void recoverResources() {$/;"	f	class:llvm::CrashRecoveryContextReleaseRefCleanup
recursive	Mutex.h	/^      bool recursive;$/;"	m	class:llvm::sys::SmartMutex
recursive_directory_iterator	FileSystem.h	/^  explicit recursive_directory_iterator(const Twine &path, error_code &ec)$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
recursive_directory_iterator	FileSystem.h	/^  recursive_directory_iterator() {}$/;"	f	class:llvm::sys::fs::recursive_directory_iterator
recursive_directory_iterator	FileSystem.h	/^class recursive_directory_iterator {$/;"	c	namespace:llvm::sys::fs
reference	InstIterator.h	/^  typedef IIty&                           reference;$/;"	t	class:llvm::InstIterator
reference	PathV2.h	/^  typedef value_type &reference;$/;"	t	class:llvm::sys::path::const_iterator
registered	RegistryParser.h	/^    void registered(const entry &E) {$/;"	f	class:llvm::RegistryParser
regular_file	FileSystem.h	/^    regular_file,$/;"	e	enum:llvm::sys::fs::file_type::_
release	Mutex.h	/^      bool release() {$/;"	f	class:llvm::sys::SmartMutex
releaseFile	FileUtilities.h	/^    void releaseFile() { DeleteIt = false; }$/;"	f	class:llvm::FileRemover
releaseStream	FormattedStream.h	/^    void releaseStream() {$/;"	f	class:llvm::formatted_raw_ostream
releaseStream	circular_raw_ostream.h	/^    void releaseStream() {$/;"	f	class:llvm::circular_raw_ostream
relocation	COFF.h	/^  struct relocation {$/;"	s	namespace:llvm::COFF
reloff	MachO.h	/^      uint32_t reloff;$/;"	m	struct:llvm::MachO::section
reloff	MachO.h	/^      uint32_t reloff;$/;"	m	struct:llvm::MachO::section_64
rem_not_list	system_error.h	/^  rem_not_list            = 51, \/\/ ERROR_REM_NOT_LIST,$/;"	e	enum:llvm::windows_error::_
removeCase	IntegersSubsetMapping.h	/^  void removeCase(SuccessorClass *Succ) {$/;"	f	class:llvm::IntegersSubsetMapping
removeGarbageObject	LeakDetector.h	/^  static void removeGarbageObject(const Value *Object) {$/;"	f	struct:llvm::LeakDetector
removeGarbageObject	LeakDetector.h	/^  static void removeGarbageObject(void *Object) {$/;"	f	struct:llvm::LeakDetector
removeItem	IntegersSubsetMapping.h	/^  void removeItem(RangeIterator i) { Items.erase(i); }$/;"	f	class:llvm::IntegersSubsetMapping
removeLiteralOption	CommandLine.h	/^  void removeLiteralOption(const char *Name) {$/;"	f	class:llvm::cl::parser
remove_const	type_traits.h	/^template <typename T> struct remove_const          { typedef T type; };$/;"	s	namespace:llvm
remove_const	type_traits.h	/^template <typename T> struct remove_const<const T> { typedef T type; };$/;"	s	namespace:llvm
remove_cv	type_traits.h	/^template <typename T> struct remove_cv {$/;"	s	namespace:llvm
remove_perms	FileSystem.h	/^  remove_perms    = 0x2000, $/;"	e	enum:llvm::sys::fs::perms
remove_pointer	type_traits.h	/^template <typename T> struct remove_pointer { typedef T type; };$/;"	s	namespace:llvm
remove_pointer	type_traits.h	/^template <typename T> struct remove_pointer<T*> { typedef T type; };$/;"	s	namespace:llvm
remove_pointer	type_traits.h	/^template <typename T> struct remove_pointer<T*const volatile> {$/;"	s	namespace:llvm
remove_pointer	type_traits.h	/^template <typename T> struct remove_pointer<T*const> { typedef T type; };$/;"	s	namespace:llvm
remove_pointer	type_traits.h	/^template <typename T> struct remove_pointer<T*volatile> { typedef T type; };$/;"	s	namespace:llvm
remove_reference	type_traits.h	/^template <typename T> struct remove_reference { typedef T type; };$/;"	s	namespace:llvm
remove_reference	type_traits.h	/^template <typename T> struct remove_reference<T&> { typedef T type; };$/;"	s	namespace:llvm
remove_volatile	type_traits.h	/^template <typename T> struct remove_volatile             { typedef T type; };$/;"	s	namespace:llvm
remove_volatile	type_traits.h	/^template <typename T> struct remove_volatile<volatile T> { typedef T type; };$/;"	s	namespace:llvm
rend	PathV2.h	/^inline reverse_iterator rend(StringRef path) {$/;"	f	namespace:llvm::sys::path
renderGraphFromBottomUp	DOTGraphTraits.h	/^  static bool renderGraphFromBottomUp() {$/;"	f	struct:llvm::DefaultDOTGraphTraits
reserved	MachO.h	/^      uint32_t reserved;$/;"	m	struct:llvm::MachO::mach_header_64
reserved	MachO.h	/^      uint32_t reserved;$/;"	m	struct:llvm::MachO::version_min_command
reserved1	MachO.h	/^      uint32_t reserved1;$/;"	m	struct:llvm::MachO::routines_command
reserved1	MachO.h	/^      uint32_t reserved1;$/;"	m	struct:llvm::MachO::section
reserved1	MachO.h	/^      uint32_t reserved1;$/;"	m	struct:llvm::MachO::section_64
reserved1	MachO.h	/^      uint64_t reserved1;$/;"	m	struct:llvm::MachO::routines_command_64
reserved2	MachO.h	/^      uint32_t reserved2;$/;"	m	struct:llvm::MachO::routines_command
reserved2	MachO.h	/^      uint32_t reserved2;$/;"	m	struct:llvm::MachO::section
reserved2	MachO.h	/^      uint32_t reserved2;$/;"	m	struct:llvm::MachO::section_64
reserved2	MachO.h	/^      uint64_t reserved2;$/;"	m	struct:llvm::MachO::routines_command_64
reserved3	MachO.h	/^      uint32_t reserved3;$/;"	m	struct:llvm::MachO::routines_command
reserved3	MachO.h	/^      uint32_t reserved3;$/;"	m	struct:llvm::MachO::section_64
reserved3	MachO.h	/^      uint64_t reserved3;$/;"	m	struct:llvm::MachO::routines_command_64
reserved4	MachO.h	/^      uint32_t reserved4;$/;"	m	struct:llvm::MachO::routines_command
reserved4	MachO.h	/^      uint64_t reserved4;$/;"	m	struct:llvm::MachO::routines_command_64
reserved5	MachO.h	/^      uint32_t reserved5;$/;"	m	struct:llvm::MachO::routines_command
reserved5	MachO.h	/^      uint64_t reserved5;$/;"	m	struct:llvm::MachO::routines_command_64
reserved6	MachO.h	/^      uint32_t reserved6;$/;"	m	struct:llvm::MachO::routines_command
reserved6	MachO.h	/^      uint64_t reserved6;$/;"	m	struct:llvm::MachO::routines_command_64
resetColor	raw_ostream.h	/^  virtual raw_ostream &resetColor() { return *this; }$/;"	f	class:llvm::raw_ostream
resource	CrashRecoveryContext.h	/^  T *resource;$/;"	m	class:llvm::CrashRecoveryContextCleanupBase
resource_deadlock_would_occur	system_error.h	/^  resource_deadlock_would_occur       = EDEADLK,$/;"	e	enum:llvm::errc::_
resource_unavailable_try_again	system_error.h	/^  resource_unavailable_try_again      = EAGAIN,$/;"	e	enum:llvm::errc::_
result	Allocator.h	/^template <typename T> struct ReferenceAdder { typedef T& result; };$/;"	t	struct:llvm::ReferenceAdder
result	Allocator.h	/^template <typename T> struct ReferenceAdder<T&> { typedef T result; };$/;"	t	struct:llvm::ReferenceAdder
result_out_of_range	system_error.h	/^  result_out_of_range                 = ERANGE,$/;"	e	enum:llvm::errc::_
ret_type	Casting.h	/^                   typename simplify_type<From>::SimpleType>::ret_type ret_type;$/;"	t	struct:llvm::cast_retty
ret_type	Casting.h	/^  typedef To& ret_type;         \/\/ Normal case, return Ty&$/;"	t	struct:llvm::cast_retty_impl
ret_type	Casting.h	/^  typedef To* ret_type;         \/\/ Pointer arg case, return Ty*$/;"	t	struct:llvm::cast_retty_impl
ret_type	Casting.h	/^  typedef const To &ret_type;   \/\/ Normal case, return Ty&$/;"	t	struct:llvm::cast_retty_impl
ret_type	Casting.h	/^  typedef const To* ret_type;   \/\/ Constant pointer arg case, return const Ty*$/;"	t	struct:llvm::cast_retty_impl
ret_type	Casting.h	/^  typedef typename cast_retty<To, SimpleFrom>::ret_type ret_type;$/;"	t	struct:llvm::cast_retty_wrap
ret_type	Casting.h	/^  typedef typename cast_retty_impl<To,FromTy>::ret_type ret_type;$/;"	t	struct:llvm::cast_retty_wrap
reverseColor	raw_ostream.h	/^  virtual raw_ostream &reverseColor() { return *this; }$/;"	f	class:llvm::raw_ostream
reverse_iterator	PathV2.h	/^typedef std::reverse_iterator<const_iterator> reverse_iterator;$/;"	t	namespace:llvm::sys::path
routines_command	MachO.h	/^    struct routines_command {$/;"	s	namespace:llvm::MachO
routines_command_64	MachO.h	/^    struct routines_command_64 {$/;"	s	namespace:llvm::MachO
rpath_command	MachO.h	/^    struct rpath_command {$/;"	s	namespace:llvm::MachO
scanner	YAMLParser.h	/^  OwningPtr<Scanner> scanner;$/;"	m	class:llvm::yaml::Stream
seconds	TimeValue.h	/^    SecondsType seconds() const { return seconds_; }$/;"	f	class:llvm::sys::TimeValue
seconds	TimeValue.h	/^    void seconds (SecondsType sec ) {$/;"	f	class:llvm::sys::TimeValue
seconds_	TimeValue.h	/^    SecondsType      seconds_;\/\/\/< Stores the seconds part of the TimeVal$/;"	m	class:llvm::sys::TimeValue
section	COFF.h	/^  struct section {$/;"	s	namespace:llvm::COFF
section	MachO.h	/^    struct section {$/;"	s	namespace:llvm::MachO
section_64	MachO.h	/^    struct section_64 {$/;"	s	namespace:llvm::MachO
sectname	MachO.h	/^      char sectname[16];$/;"	m	struct:llvm::MachO::section
sectname	MachO.h	/^      char sectname[16];$/;"	m	struct:llvm::MachO::section_64
sector_not_found	system_error.h	/^  sector_not_found        = 27, \/\/ ERROR_SECTOR_NOT_FOUND,$/;"	e	enum:llvm::windows_error::_
seek	system_error.h	/^  seek                    = 25, \/\/ ERROR_SEEK,$/;"	e	enum:llvm::windows_error::_
segment_command	MachO.h	/^    struct segment_command {$/;"	s	namespace:llvm::MachO
segment_command_64	MachO.h	/^    struct segment_command_64 {$/;"	s	namespace:llvm::MachO
segname	MachO.h	/^      char segname[16];$/;"	m	struct:llvm::MachO::section
segname	MachO.h	/^      char segname[16];$/;"	m	struct:llvm::MachO::section_64
segname	MachO.h	/^      char segname[16];$/;"	m	struct:llvm::MachO::segment_command
segname	MachO.h	/^      char segname[16];$/;"	m	struct:llvm::MachO::segment_command_64
self	IntegersSubset.h	/^    typedef IntRange<IntType> self;$/;"	t	class:llvm::IntRange
self	IntegersSubset.h	/^  typedef IntegersSubsetGeneric<IntTy> self;$/;"	t	class:llvm::IntegersSubsetGeneric
self	IntegersSubsetMapping.h	/^  typedef IntegersSubsetMapping<SuccessorClass, IntegersSubsetTy, IntTy> self;$/;"	t	class:llvm::IntegersSubsetMapping
set	ThreadLocal.h	/^      void set(T* d) { setInstance(d); }$/;"	f	class:llvm::sys::ThreadLocal
setAliasFor	CommandLine.h	/^  void setAliasFor(Option &O) {$/;"	f	class:llvm::cl::alias
setArgStr	CommandLine.h	/^  void setArgStr(const char *S) { ArgStr = S; }$/;"	f	class:llvm::cl::Option
setArgument	CallSite.h	/^  void setArgument(unsigned ArgNo, Value* newVal) {$/;"	f	class:llvm::CallSiteBase
setAttributes	CallSite.h	/^  void setAttributes(const AttrListPtr &PAL) {$/;"	f	class:llvm::CallSiteBase
setBinding	ELF.h	/^  void setBinding(unsigned char b) { setBindingAndType(b, getType()); }$/;"	f	struct:llvm::ELF::Elf32_Sym
setBinding	ELF.h	/^  void setBinding(unsigned char b) { setBindingAndType(b, getType()); }$/;"	f	struct:llvm::ELF::Elf64_Sym
setBindingAndType	ELF.h	/^  void setBindingAndType(unsigned char b, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf32_Sym
setBindingAndType	ELF.h	/^  void setBindingAndType(unsigned char b, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf64_Sym
setCalledFunction	CallSite.h	/^  void setCalledFunction(Value *V) {$/;"	f	class:llvm::CallSiteBase
setCallingConv	CallSite.h	/^  void setCallingConv(CallingConv::ID CC) {$/;"	f	class:llvm::CallSiteBase
setCurrentDebugType	Debug.h	73;"	d
setDescription	CommandLine.h	/^  void setDescription(const char *S) { HelpStr = S; }$/;"	f	class:llvm::cl::Option
setDiagHandler	SourceMgr.h	/^  void setDiagHandler(DiagHandlerTy DH, void *Ctx = 0) {$/;"	f	class:llvm::SourceMgr
setDoesNotAccessMemory	CallSite.h	/^  void setDoesNotAccessMemory() {$/;"	f	class:llvm::CallSiteBase
setDoesNotReturn	CallSite.h	/^  void setDoesNotReturn() {$/;"	f	class:llvm::CallSiteBase
setDoesNotThrow	CallSite.h	/^  void setDoesNotThrow() {$/;"	f	class:llvm::CallSiteBase
setFile	FileUtilities.h	/^    void setFile(const Twine& filename, bool deleteIt = true) {$/;"	f	class:llvm::FileRemover
setFormattingFlag	CommandLine.h	/^  void setFormattingFlag(enum FormattingFlags V) { Formatting = V; }$/;"	f	class:llvm::cl::Option
setHiddenFlag	CommandLine.h	/^  void setHiddenFlag(enum OptionHidden Val) { HiddenFlag = Val; }$/;"	f	class:llvm::cl::Option
setHintNameRVA	COFF.h	/^    void setHintNameRVA(uint32_t rva) { data = rva; }$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
setIncludeDirs	SourceMgr.h	/^  void setIncludeDirs(const std::vector<std::string> &Dirs) {$/;"	f	class:llvm::SourceMgr
setInitialValue	CommandLine.h	/^  void setInitialValue(const DataType &V) { this->setValue(V, true); }$/;"	f	class:llvm::cl::opt
setIsNoInline	CallSite.h	/^  void setIsNoInline(bool Value = true) {$/;"	f	class:llvm::CallSiteBase
setLanguageSpecificHandlerOffset	Win64EH.h	/^  void setLanguageSpecificHandlerOffset(uint64_t offset) {$/;"	f	struct:llvm::Win64EH::UnwindInfo
setLocation	CommandLine.h	/^  bool setLocation(Option &O, DataType &L) {$/;"	f	class:llvm::cl::opt_storage
setLocation	CommandLine.h	/^  bool setLocation(Option &O, StorageClass &L) {$/;"	f	class:llvm::cl::list_storage
setLocation	CommandLine.h	/^  bool setLocation(Option &O, unsigned &L) {$/;"	f	class:llvm::cl::bits_storage
setMiscFlag	CommandLine.h	/^  void setMiscFlag(enum MiscFlags M) { Misc |= M; }$/;"	f	class:llvm::cl::Option
setName	Timer.h	/^  void setName(StringRef name) { Name.assign(name.begin(), name.end()); }$/;"	f	class:llvm::TimerGroup
setNext	Recycler.h	/^  static void setNext(RecyclerStruct *t, RecyclerStruct *n) { t->Next = n; }$/;"	f	struct:llvm::ilist_traits
setNumAdditionalVals	CommandLine.h	/^  inline void setNumAdditionalVals(unsigned n) { AdditionalVals = n; }$/;"	f	class:llvm::cl::Option
setNumAdditionalVals	CommandLine.h	/^  void setNumAdditionalVals(unsigned n) {$/;"	f	class:llvm::cl::list
setNumOccurrencesFlag	CommandLine.h	/^  void setNumOccurrencesFlag(enum NumOccurrencesFlag Val) {$/;"	f	class:llvm::cl::Option
setOnlyReadsMemory	CallSite.h	/^  void setOnlyReadsMemory() {$/;"	f	class:llvm::CallSiteBase
setOrdinal	COFF.h	/^    void setOrdinal(uint16_t o) {$/;"	f	struct:llvm::COFF::ImportLookupTableEntry32
setPosition	CommandLine.h	/^  void setPosition(unsigned pos) { Position = pos; }$/;"	f	class:llvm::cl::Option
setPrev	Recycler.h	/^  static void setPrev(RecyclerStruct *t, RecyclerStruct *p) { t->Prev = p; }$/;"	f	struct:llvm::ilist_traits
setPrevPtr	ValueHandle.h	/^  void setPrevPtr(ValueHandleBase **Ptr) { PrevPair.setPointer(Ptr); }$/;"	f	class:llvm::ValueHandleBase
setSourceRange	YAMLParser.h	/^  void setSourceRange(SMRange SR) { SourceRange = SR; }$/;"	f	class:llvm::yaml::Node
setStream	FormattedStream.h	/^    void setStream(raw_ostream &Stream, bool Delete = false) {$/;"	f	class:llvm::formatted_raw_ostream
setStream	circular_raw_ostream.h	/^    void setStream(raw_ostream &Stream, bool Owns = REFERENCE_ONLY) {$/;"	f	class:llvm::circular_raw_ostream
setSymbol	ELF.h	/^  void setSymbol(Elf32_Word s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::ELF::Elf32_Rel
setSymbol	ELF.h	/^  void setSymbol(Elf32_Word s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::ELF::Elf32_Rela
setSymbol	ELF.h	/^  void setSymbol(Elf32_Word s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::ELF::Elf64_Rel
setSymbol	ELF.h	/^  void setSymbol(Elf64_Xword s) { setSymbolAndType(s, getType()); }$/;"	f	struct:llvm::ELF::Elf64_Rela
setSymbolAndType	ELF.h	/^  void setSymbolAndType(Elf32_Word s, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf32_Rel
setSymbolAndType	ELF.h	/^  void setSymbolAndType(Elf32_Word s, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf32_Rela
setSymbolAndType	ELF.h	/^  void setSymbolAndType(Elf64_Xword s, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf64_Rel
setSymbolAndType	ELF.h	/^  void setSymbolAndType(Elf64_Xword s, unsigned char t) {$/;"	f	struct:llvm::ELF::Elf64_Rela
setType	ELF.h	/^  void setType(unsigned char t) { setBindingAndType(getBinding(), t); }$/;"	f	struct:llvm::ELF::Elf32_Sym
setType	ELF.h	/^  void setType(unsigned char t) { setBindingAndType(getBinding(), t); }$/;"	f	struct:llvm::ELF::Elf64_Sym
setType	ELF.h	/^  void setType(unsigned char t) { setSymbolAndType(getSymbol(), t); }$/;"	f	struct:llvm::ELF::Elf32_Rel
setType	ELF.h	/^  void setType(unsigned char t) { setSymbolAndType(getSymbol(), t); }$/;"	f	struct:llvm::ELF::Elf32_Rela
setType	ELF.h	/^  void setType(unsigned char t) { setSymbolAndType(getSymbol(), t); }$/;"	f	struct:llvm::ELF::Elf64_Rel
setType	ELF.h	/^  void setType(unsigned char t) { setSymbolAndType(getSymbol(), t); }$/;"	f	struct:llvm::ELF::Elf64_Rela
setValPtr	ValueHandle.h	/^  void setValPtr(Value *P) {$/;"	f	class:llvm::CallbackVH
setValPtr	ValueHandle.h	/^  void setValPtr(ValueTy *P) {$/;"	f	class:llvm::AssertingVH
setValPtr	ValueHandle.h	/^  void setValPtr(ValueTy *P) {$/;"	f	class:llvm::TrackingVH
setValPtrInt	ValueHandle.h	/^  void setValPtrInt(unsigned K) { VP.setInt(K); }$/;"	f	class:llvm::ValueHandleBase
setValue	CommandLine.h	/^  void setValue(const DT& \/*V*\/) {}$/;"	f	struct:llvm::cl::OptionValueBase
setValue	CommandLine.h	/^  void setValue(const DataType &V) { Valid = true; Value = V; }$/;"	f	class:llvm::cl::OptionValueCopy
setValue	CommandLine.h	/^  void setValue(const T &V, bool initial = false) {$/;"	f	class:llvm::cl::opt_storage
setValueExpectedFlag	CommandLine.h	/^  void setValueExpectedFlag(enum ValueExpected Val) { Value = Val; }$/;"	f	class:llvm::cl::Option
setValueStr	CommandLine.h	/^  void setValueStr(const char *S) { ValueStr = S; }$/;"	f	class:llvm::cl::Option
set_gid_on_exe	FileSystem.h	/^  set_gid_on_exe  = 02000, $/;"	e	enum:llvm::sys::fs::perms
set_uid_on_exe	FileSystem.h	/^  set_uid_on_exe  = 04000, $/;"	e	enum:llvm::sys::fs::perms
sh_addr	ELF.h	/^  Elf32_Addr sh_addr;      \/\/ Address where section is to be loaded$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_addr	ELF.h	/^  Elf64_Addr  sh_addr;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_addralign	ELF.h	/^  Elf32_Word sh_addralign; \/\/ Section address alignment$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_addralign	ELF.h	/^  Elf64_Xword sh_addralign;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_entsize	ELF.h	/^  Elf32_Word sh_entsize;   \/\/ Size of records contained within the section$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_entsize	ELF.h	/^  Elf64_Xword sh_entsize;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_flags	ELF.h	/^  Elf32_Word sh_flags;     \/\/ Section flags (SHF_*)$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_flags	ELF.h	/^  Elf64_Xword sh_flags;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_info	ELF.h	/^  Elf32_Word sh_info;      \/\/ Section type-specific extra information$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_info	ELF.h	/^  Elf64_Word  sh_info;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_link	ELF.h	/^  Elf32_Word sh_link;      \/\/ Section type-specific header table index link$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_link	ELF.h	/^  Elf64_Word  sh_link;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_name	ELF.h	/^  Elf32_Word sh_name;      \/\/ Section name (index into string table)$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_name	ELF.h	/^  Elf64_Word  sh_name;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_offset	ELF.h	/^  Elf32_Off  sh_offset;    \/\/ File offset of section data, in bytes$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_offset	ELF.h	/^  Elf64_Off   sh_offset;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_size	ELF.h	/^  Elf32_Word sh_size;      \/\/ Size of section, in bytes$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_size	ELF.h	/^  Elf64_Xword sh_size;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sh_type	ELF.h	/^  Elf32_Word sh_type;      \/\/ Section type (SHT_*)$/;"	m	struct:llvm::ELF::Elf32_Shdr
sh_type	ELF.h	/^  Elf64_Word  sh_type;$/;"	m	struct:llvm::ELF::Elf64_Shdr
sharing_buffer_exceeded	system_error.h	/^  sharing_buffer_exceeded = 36, \/\/ ERROR_SHARING_BUFFER_EXCEEDED,$/;"	e	enum:llvm::windows_error::_
sharing_violation	system_error.h	/^  sharing_violation       = 32, \/\/ ERROR_SHARING_VIOLATION,$/;"	e	enum:llvm::windows_error::_
simplify_type	Casting.h	/^template<typename From> struct simplify_type {$/;"	s	namespace:llvm
simplify_type	Casting.h	/^template<typename From> struct simplify_type<const From> {$/;"	s	namespace:llvm
simplify_type	ValueHandle.h	/^template<> struct simplify_type<AssertingVH<Value> >$/;"	s	namespace:llvm
simplify_type	ValueHandle.h	/^template<> struct simplify_type<CallbackVH>$/;"	s	namespace:llvm
simplify_type	ValueHandle.h	/^template<> struct simplify_type<TrackingVH<Value> >$/;"	s	namespace:llvm
simplify_type	ValueHandle.h	/^template<> struct simplify_type<WeakVH> : public simplify_type<const WeakVH> {};$/;"	s	namespace:llvm
simplify_type	ValueHandle.h	/^template<> struct simplify_type<const AssertingVH<Value> > {$/;"	s	namespace:llvm
simplify_type	ValueHandle.h	/^template<> struct simplify_type<const CallbackVH> {$/;"	s	namespace:llvm
simplify_type	ValueHandle.h	/^template<> struct simplify_type<const TrackingVH<Value> > {$/;"	s	namespace:llvm
simplify_type	ValueHandle.h	/^template<> struct simplify_type<const WeakVH> {$/;"	s	namespace:llvm
size	CFG.h	/^  static unsigned       size       (Function *F) { return F->size(); }$/;"	f	struct:llvm::GraphTraits
size	CFG.h	/^  static unsigned       size       (const Function *F) { return F->size(); }$/;"	f	struct:llvm::GraphTraits
size	IntegersSubsetMapping.h	/^  unsigned size() const {$/;"	f	class:llvm::IntegersSubsetMapping
size	MachO.h	/^      uint32_t size;$/;"	m	struct:llvm::MachO::fat_arch
size	MachO.h	/^      uint32_t size;$/;"	m	struct:llvm::MachO::section
size	MachO.h	/^      uint32_t size;$/;"	m	struct:llvm::MachO::symseg_command
size	MachO.h	/^      uint64_t size;$/;"	m	struct:llvm::MachO::section_64
size	Memory.h	/^    size_t size() const { return Size; }$/;"	f	class:llvm::sys::MemoryBlock
size	PathV1.h	/^      size_t size() const { return path.size(); }$/;"	f	class:llvm::sys::Path
size	StringPool.h	/^    inline unsigned size() const {$/;"	f	class:llvm::PooledStringPtr
sizeofcmds	MachO.h	/^      uint32_t sizeofcmds;$/;"	m	struct:llvm::MachO::mach_header
sizeofcmds	MachO.h	/^      uint32_t sizeofcmds;$/;"	m	struct:llvm::MachO::mach_header_64
skip	YAMLParser.h	/^  virtual void skip() {}$/;"	f	class:llvm::yaml::Node
skip	YAMLParser.h	/^void skip(CollectionType &C) {$/;"	f	namespace:llvm::yaml
smax_pred_ty	PatternMatch.h	/^struct smax_pred_ty {$/;"	s	namespace:llvm::PatternMatch
smin_pred_ty	PatternMatch.h	/^struct smin_pred_ty {$/;"	s	namespace:llvm::PatternMatch
snprint	Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object1
snprint	Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object2
snprint	Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object3
snprint	Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object4
snprint	Format.h	/^  virtual int snprint(char *Buffer, unsigned BufferSize) const {$/;"	f	class:llvm::format_object5
snprintf	Format.h	34;"	d
socket_file	FileSystem.h	/^    socket_file,$/;"	e	enum:llvm::sys::fs::file_type::_
sort	IntegersSubsetMapping.h	/^  void sort() {$/;"	f	class:llvm::IntegersSubsetMapping
space_info	FileSystem.h	/^struct space_info {$/;"	s	namespace:llvm::sys::fs
specificval_ty	PatternMatch.h	/^  specificval_ty(const Value *V) : Val(V) {}$/;"	f	struct:llvm::PatternMatch::specificval_ty
specificval_ty	PatternMatch.h	/^struct specificval_ty {$/;"	s	namespace:llvm::PatternMatch
st_info	ELF.h	/^  unsigned char   st_info;  \/\/ Symbol's type and binding attributes$/;"	m	struct:llvm::ELF::Elf64_Sym
st_info	ELF.h	/^  unsigned char st_info;  \/\/ Symbol's type and binding attributes$/;"	m	struct:llvm::ELF::Elf32_Sym
st_name	ELF.h	/^  Elf32_Word    st_name;  \/\/ Symbol name (index into string table)$/;"	m	struct:llvm::ELF::Elf32_Sym
st_name	ELF.h	/^  Elf64_Word      st_name;  \/\/ Symbol name (index into string table)$/;"	m	struct:llvm::ELF::Elf64_Sym
st_other	ELF.h	/^  unsigned char   st_other; \/\/ Must be zero; reserved$/;"	m	struct:llvm::ELF::Elf64_Sym
st_other	ELF.h	/^  unsigned char st_other; \/\/ Must be zero; reserved$/;"	m	struct:llvm::ELF::Elf32_Sym
st_shndx	ELF.h	/^  Elf32_Half    st_shndx; \/\/ Which section (header table index) it's defined in$/;"	m	struct:llvm::ELF::Elf32_Sym
st_shndx	ELF.h	/^  Elf64_Half      st_shndx; \/\/ Which section (header table index) it's defined in$/;"	m	struct:llvm::ELF::Elf64_Sym
st_size	ELF.h	/^  Elf32_Word    st_size;  \/\/ Size of the symbol$/;"	m	struct:llvm::ELF::Elf32_Sym
st_size	ELF.h	/^  Elf64_Xword     st_size;  \/\/ Size of the symbol$/;"	m	struct:llvm::ELF::Elf64_Sym
st_value	ELF.h	/^  Elf32_Addr    st_value; \/\/ Value or address associated with the symbol$/;"	m	struct:llvm::ELF::Elf32_Sym
st_value	ELF.h	/^  Elf64_Addr      st_value; \/\/ Value or address associated with the symbol$/;"	m	struct:llvm::ELF::Elf64_Sym
startAddress	Win64EH.h	/^  uint64_t startAddress;$/;"	m	struct:llvm::Win64EH::RuntimeFunction
state_not_recoverable	system_error.h	/^  state_not_recoverable               = ENOTRECOVERABLE,$/;"	e	enum:llvm::errc::_
status	PathV1.h	/^      mutable FileStatus status; \/\/\/< Status information.$/;"	m	class:llvm::sys::PathWithStatus
status_error	FileSystem.h	/^    status_error,$/;"	e	enum:llvm::sys::fs::file_type::_
sticky_bit	FileSystem.h	/^  sticky_bit      = 01000,$/;"	e	enum:llvm::sys::fs::perms
str	PathV1.h	/^      const std::string &str() const { return path; }$/;"	f	class:llvm::sys::Path
str	raw_ostream.h	/^  std::string& str() {$/;"	f	class:llvm::raw_string_ostream
stream	YAMLParser.h	/^  Stream &stream;$/;"	m	class:llvm::yaml::Document
stream_timeout	system_error.h	/^  stream_timeout                      = ETIME,$/;"	e	enum:llvm::errc::_
stroff	MachO.h	/^      uint32_t stroff;$/;"	m	struct:llvm::MachO::symtab_command
strsize	MachO.h	/^      uint32_t strsize;$/;"	m	struct:llvm::MachO::symtab_command
sub	IntegersSubset.h	/^    SubRes sub(const self &RHS) const {$/;"	f	class:llvm::IntRange
sub_client_command	MachO.h	/^    struct sub_client_command {$/;"	s	namespace:llvm::MachO
sub_framework_command	MachO.h	/^    struct sub_framework_command {$/;"	s	namespace:llvm::MachO
sub_library	MachO.h	/^      uint32_t sub_library;$/;"	m	struct:llvm::MachO::sub_library_command
sub_library_command	MachO.h	/^    struct sub_library_command {$/;"	s	namespace:llvm::MachO
sub_umbrella	MachO.h	/^      uint32_t sub_umbrella;$/;"	m	struct:llvm::MachO::sub_umbrella_command
sub_umbrella_command	MachO.h	/^    struct sub_umbrella_command {$/;"	s	namespace:llvm::MachO
succ_begin	CFG.h	/^inline succ_const_iterator succ_begin(const BasicBlock *BB) {$/;"	f	namespace:llvm
succ_begin	CFG.h	/^inline succ_iterator succ_begin(BasicBlock *BB) {$/;"	f	namespace:llvm
succ_const_iterator	CFG.h	/^                     const BasicBlock> succ_const_iterator;$/;"	t	namespace:llvm
succ_end	CFG.h	/^inline succ_const_iterator succ_end(const BasicBlock *BB) {$/;"	f	namespace:llvm
succ_end	CFG.h	/^inline succ_iterator succ_end(BasicBlock *BB) {$/;"	f	namespace:llvm
succ_iterator	CFG.h	/^typedef SuccIterator<TerminatorInst*, BasicBlock> succ_iterator;$/;"	t	namespace:llvm
success	system_error.h	/^  static error_code success() {$/;"	f	class:llvm::error_code
success	system_error.h	/^  success                             = 0,$/;"	e	enum:llvm::errc::_
success	system_error.h	/^  success = 0,$/;"	e	enum:llvm::windows_error::_
super	CFG.h	/^  typedef std::iterator<std::bidirectional_iterator_tag, BB_, ptrdiff_t> super;$/;"	t	class:llvm::SuccIterator
super	CFG.h	/^  typedef std::iterator<std::forward_iterator_tag, Ptr, ptrdiff_t> super;$/;"	t	class:llvm::PredIterator
super	GetElementPtrTypeIterator.h	/^                          Type *, ptrdiff_t> super;$/;"	t	class:llvm::generic_gep_type_iterator
support	Endian.h	/^namespace support {$/;"	n	namespace:llvm
symbol	COFF.h	/^  struct symbol {$/;"	s	namespace:llvm::COFF
symbol_index	MachO.h	/^      uint32_t symbol_index;$/;"	m	struct:llvm::MachO::dylib_table_of_contents
symlink_file	FileSystem.h	/^    symlink_file,$/;"	e	enum:llvm::sys::fs::file_type::_
symlink_perms	FileSystem.h	/^  symlink_perms   = 0x4000$/;"	e	enum:llvm::sys::fs::perms
symoff	MachO.h	/^      uint32_t symoff;$/;"	m	struct:llvm::MachO::symtab_command
symseg_command	MachO.h	/^    struct symseg_command {$/;"	s	namespace:llvm::MachO
symtab_command	MachO.h	/^    struct symtab_command {$/;"	s	namespace:llvm::MachO
sys	Atomic.h	/^  namespace sys {$/;"	n	namespace:llvm
sys	Disassembler.h	/^namespace sys {$/;"	n	namespace:llvm
sys	DynamicLibrary.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Errno.h	/^namespace sys {$/;"	n	namespace:llvm
sys	FEnv.h	/^namespace sys {$/;"	n	namespace:llvm
sys	FileSystem.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Host.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Locale.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Memory.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Mutex.h	/^  namespace sys$/;"	n	namespace:llvm
sys	PathV1.h	/^namespace sys {$/;"	n	namespace:llvm
sys	PathV2.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Process.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Program.h	/^namespace sys {$/;"	n	namespace:llvm
sys	RWMutex.h	/^  namespace sys$/;"	n	namespace:llvm
sys	Signals.h	/^namespace sys {$/;"	n	namespace:llvm
sys	SwapByteOrder.h	/^namespace sys {$/;"	n	namespace:llvm
sys	SystemUtils.h	/^  namespace sys { class Path; }$/;"	n	namespace:llvm
sys	ThreadLocal.h	/^  namespace sys {$/;"	n	namespace:llvm
sys	TimeValue.h	/^namespace sys {$/;"	n	namespace:llvm
sys	Valgrind.h	/^namespace sys {$/;"	n	namespace:llvm
t	AlignOf.h	/^  T t;$/;"	m	struct:llvm::AlignmentCalcImpl
t1	AlignOf.h	/^    T1 t1; T2 t2; T3 t3; T4 t4;$/;"	m	class:llvm::AlignedCharArrayUnion::AlignerImpl
t2	AlignOf.h	/^    T1 t1; T2 t2; T3 t3; T4 t4;$/;"	m	class:llvm::AlignedCharArrayUnion::AlignerImpl
t3	AlignOf.h	/^    T1 t1; T2 t2; T3 t3; T4 t4;$/;"	m	class:llvm::AlignedCharArrayUnion::AlignerImpl
t4	AlignOf.h	/^    T1 t1; T2 t2; T3 t3; T4 t4;$/;"	m	class:llvm::AlignedCharArrayUnion::AlignerImpl
table_t	StringPool.h	/^    typedef StringMap<PooledString> table_t;$/;"	t	class:llvm::StringPool
tell	raw_ostream.h	/^  uint64_t tell() const { return current_pos() + GetNumBytesInBuffer(); }$/;"	f	class:llvm::raw_ostream
text_file_busy	system_error.h	/^  text_file_busy                      = ETXTBSY,$/;"	e	enum:llvm::errc::_
thread_command	MachO.h	/^    struct thread_command {$/;"	s	namespace:llvm::MachO
timed_out	system_error.h	/^  timed_out                           = ETIMEDOUT,$/;"	e	enum:llvm::errc::_
timestamp	MachO.h	/^      uint32_t timestamp;$/;"	m	struct:llvm::MachO::dylib
toConstantInt	IntegersSubset.h	/^  ConstantInt *toConstantInt() const {$/;"	f	class:llvm::IntItem
toEpochTime	TimeValue.h	/^    uint64_t toEpochTime() const {$/;"	f	class:llvm::sys::TimeValue
toPosixTime	TimeValue.h	/^    uint64_t toPosixTime() const {$/;"	f	class:llvm::sys::TimeValue
toWin32Time	TimeValue.h	/^    uint64_t toWin32Time() const {$/;"	f	class:llvm::sys::TimeValue
tocoff	MachO.h	/^      uint32_t tocoff;$/;"	m	struct:llvm::MachO::dysymtab_command
too_many_files_open	system_error.h	/^  too_many_files_open                 = EMFILE,$/;"	e	enum:llvm::errc::_
too_many_files_open_in_system	system_error.h	/^  too_many_files_open_in_system       = ENFILE,$/;"	e	enum:llvm::errc::_
too_many_links	system_error.h	/^  too_many_links                      = EMLINK,$/;"	e	enum:llvm::errc::_
too_many_open_files	system_error.h	/^  too_many_open_files     = 4, \/\/ ERROR_TOO_MANY_OPEN_FILES,$/;"	e	enum:llvm::windows_error::_
too_many_symbolic_link_levels	system_error.h	/^  too_many_symbolic_link_levels       = ELOOP,$/;"	e	enum:llvm::errc::_
tool_output_file	ToolOutputFile.h	/^class tool_output_file {$/;"	c	namespace:llvm
traits	Registry.h	/^    typedef U traits;$/;"	t	class:llvm::Registry
traits	RegistryParser.h	/^    typedef U traits;$/;"	t	class:llvm::RegistryParser
true_type	type_traits.h	/^typedef integral_constant<bool, true> true_type;$/;"	t	namespace:llvm
tryacquire	Mutex.h	/^      bool tryacquire() {$/;"	f	class:llvm::sys::SmartMutex
twolevel_hint	MachO.h	/^    struct twolevel_hint {$/;"	s	namespace:llvm::MachO
twolevel_hints_command	MachO.h	/^    struct twolevel_hints_command {$/;"	s	namespace:llvm::MachO
type	FileSystem.h	/^  file_type type() const { return Type; }$/;"	f	class:llvm::sys::fs::file_status
type	FileSystem.h	/^  void type(file_type v) { Type = v; }$/;"	f	class:llvm::sys::fs::file_status
type	type_traits.h	/^    typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	type_traits.h	/^  typedef T type;$/;"	t	struct:llvm::enable_if_c
type	type_traits.h	/^  typedef integral_constant<T,v> type;$/;"	t	struct:llvm::integral_constant
type	type_traits.h	/^  typedef typename remove_const<typename remove_volatile<T>::type>::type type;$/;"	t	struct:llvm::remove_cv
type	type_traits.h	/^struct conditional { typedef T type; };$/;"	t	struct:llvm::conditional
type	type_traits.h	/^struct conditional<false, T, F> { typedef F type; };$/;"	t	struct:llvm::conditional
type	type_traits.h	/^template <typename T> struct remove_const          { typedef T type; };$/;"	t	struct:llvm::remove_const
type	type_traits.h	/^template <typename T> struct remove_const<const T> { typedef T type; };$/;"	t	struct:llvm::remove_const
type	type_traits.h	/^template <typename T> struct remove_pointer { typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	type_traits.h	/^template <typename T> struct remove_pointer<T*> { typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	type_traits.h	/^template <typename T> struct remove_pointer<T*const> { typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	type_traits.h	/^template <typename T> struct remove_pointer<T*volatile> { typedef T type; };$/;"	t	struct:llvm::remove_pointer
type	type_traits.h	/^template <typename T> struct remove_reference { typedef T type; };$/;"	t	struct:llvm::remove_reference
type	type_traits.h	/^template <typename T> struct remove_reference<T&> { typedef T type; };$/;"	t	struct:llvm::remove_reference
type	type_traits.h	/^template <typename T> struct remove_volatile             { typedef T type; };$/;"	t	struct:llvm::remove_volatile
type	type_traits.h	/^template <typename T> struct remove_volatile<volatile T> { typedef T type; };$/;"	t	struct:llvm::remove_volatile
type_unknown	FileSystem.h	/^    type_unknown$/;"	e	enum:llvm::sys::fs::file_type::_
u	Win64EH.h	/^  } u;$/;"	m	union:llvm::Win64EH::UnwindCode	typeref:struct:llvm::Win64EH::UnwindCode::__anon58
ubig16_t	Endian.h	/^                  <uint16_t, big, unaligned>    ubig16_t;$/;"	t	namespace:llvm::support
ubig32_t	Endian.h	/^                  <uint32_t, big, unaligned>    ubig32_t;$/;"	t	namespace:llvm::support
ubig64_t	Endian.h	/^                  <uint64_t, big, unaligned>    ubig64_t;$/;"	t	namespace:llvm::support
ubig8_t	Endian.h	/^                  <uint8_t, big, unaligned>     ubig8_t;$/;"	t	namespace:llvm::support
ulittle16_t	Endian.h	/^                  <uint16_t, little, unaligned> ulittle16_t;$/;"	t	namespace:llvm::support
ulittle32_t	Endian.h	/^                  <uint32_t, little, unaligned> ulittle32_t;$/;"	t	namespace:llvm::support
ulittle64_t	Endian.h	/^                  <uint64_t, little, unaligned> ulittle64_t;$/;"	t	namespace:llvm::support
ulittle8_t	Endian.h	/^                  <uint8_t, little, unaligned>  ulittle8_t;$/;"	t	namespace:llvm::support
umax_pred_ty	PatternMatch.h	/^struct umax_pred_ty {$/;"	s	namespace:llvm::PatternMatch
umbrella	MachO.h	/^      uint32_t umbrella;$/;"	m	struct:llvm::MachO::sub_framework_command
umin_pred_ty	PatternMatch.h	/^struct umin_pred_ty {$/;"	s	namespace:llvm::PatternMatch
unaligned	Endian.h	/^enum alignment {unaligned, aligned};$/;"	e	enum:llvm::support::alignment
uniqueID	PathV1.h	/^    uint64_t    uniqueID;   \/\/\/< A number to uniquely ID this file$/;"	m	class:llvm::sys::FileStatus
unknown	FileSystem.h	/^    unknown = 0,              \/\/\/< Unrecognized file$/;"	e	enum:llvm::sys::fs::file_magic::_
unregister	CrashRecoveryContext.h	/^  void unregister() {$/;"	f	class:llvm::CrashRecoveryContextCleanupRegistrar
unspecified_bool_true	system_error.h	/^  static void unspecified_bool_true() {}$/;"	f	class:llvm::error_code
unspecified_bool_true	system_error.h	/^  static void unspecified_bool_true() {}$/;"	f	class:llvm::error_condition
unspecified_bool_type	system_error.h	/^  typedef void (*unspecified_bool_type)();$/;"	t	class:llvm::error_code
unspecified_bool_type	system_error.h	/^  typedef void (*unspecified_bool_type)();$/;"	t	class:llvm::error_condition
unused	COFF.h	/^    uint8_t  unused[10];$/;"	m	struct:llvm::COFF::AuxiliaryWeakExternal
unused	COFF.h	/^    uint8_t  unused[2];$/;"	m	struct:llvm::COFF::AuxiliaryFunctionDefinition
unused	COFF.h	/^    uint8_t  unused[3];$/;"	m	struct:llvm::COFF::AuxiliarySectionDefinition
unused1	COFF.h	/^    uint8_t  unused1[4];$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
unused2	COFF.h	/^    uint8_t  unused2[6];$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
unused3	COFF.h	/^    uint8_t  unused3[2];$/;"	m	struct:llvm::COFF::AuxiliarybfAndefSymbol
unwindCodes	Win64EH.h	/^  UnwindCode unwindCodes[1];$/;"	m	struct:llvm::Win64EH::UnwindInfo
unwindInfoOffset	Win64EH.h	/^  uint64_t unwindInfoOffset;$/;"	m	struct:llvm::Win64EH::RuntimeFunction
unwindOp	Win64EH.h	/^    uint8_t unwindOp:4,$/;"	m	struct:llvm::Win64EH::UnwindCode::__anon58
usec	TimeValue.h	/^    uint64_t usec() const {$/;"	f	class:llvm::sys::TimeValue
usec	TimeValue.h	/^    void usec( int64_t microseconds ) {$/;"	f	class:llvm::sys::TimeValue
user	PathV1.h	/^    uint32_t    user;       \/\/\/< User ID of owner, if applicable$/;"	m	class:llvm::sys::FileStatus
uuid	MachO.h	/^      uint8_t uuid[16];$/;"	m	struct:llvm::MachO::uuid_command
uuid_command	MachO.h	/^    struct uuid_command {$/;"	s	namespace:llvm::MachO
v_	FileSystem.h	/^  int v_;$/;"	m	struct:llvm::sys::fs::copy_option
v_	FileSystem.h	/^  int v_;$/;"	m	struct:llvm::sys::fs::file_magic
v_	FileSystem.h	/^  int v_;$/;"	m	struct:llvm::sys::fs::file_type
v_	system_error.h	/^  _ v_;$/;"	m	struct:llvm::errc
v_	system_error.h	/^  _ v_;$/;"	m	struct:llvm::windows_error
val	Endian.h	/^  value_type val;$/;"	m	struct:llvm::support::detail::alignment_access_helper
validate	YAMLParser.h	/^  bool validate() {$/;"	f	class:llvm::yaml::Stream
value	ValueHandle.h	/^  static const bool value = true;$/;"	m	struct:llvm::isPodLike
value	system_error.h	/^  int value() const {return _val_;}$/;"	f	class:llvm::error_code
value	system_error.h	/^  int value() const {return _val_;}$/;"	f	class:llvm::error_condition
value	type_traits.h	/^    value = (!is_class<UnderlyingT>::value && !is_pointer<UnderlyingT>::value &&$/;"	m	class:llvm::is_integral_or_enum
value	type_traits.h	/^  static const bool value $/;"	m	struct:llvm::is_base_of
value	type_traits.h	/^  static const bool value = __is_trivially_copyable(T);$/;"	m	struct:llvm::isPodLike
value	type_traits.h	/^  static const bool value = isPodLike<T>::value && isPodLike<U>::value;$/;"	m	struct:llvm::isPodLike
value	type_traits.h	/^  static const bool value =$/;"	m	struct:llvm::is_class
value	type_traits.h	/^  static const value_type value = v;$/;"	m	struct:llvm::integral_constant
value_desc	CommandLine.h	/^  value_desc(const char *Str) : Desc(Str) {}$/;"	f	struct:llvm::cl::value_desc
value_desc	CommandLine.h	/^struct value_desc {$/;"	s	namespace:llvm::cl
value_too_large	system_error.h	/^  value_too_large                     = EOVERFLOW,$/;"	e	enum:llvm::errc::_
value_type	InstIterator.h	/^  typedef IIty                            value_type;$/;"	t	class:llvm::InstIterator
value_type	PathV2.h	/^  typedef const StringRef value_type;$/;"	t	class:llvm::sys::path::const_iterator
value_type	type_traits.h	/^  typedef T value_type;$/;"	t	struct:llvm::integral_constant
values	CommandLine.h	/^ValuesClass<DataType> END_WITH_NULL values(const char *Arg, DataType Val,$/;"	f	namespace:llvm::cl
verify	IntegersSubsetMapping.h	/^  bool verify() {$/;"	f	class:llvm::IntegersSubsetMapping
verify	IntegersSubsetMapping.h	/^  bool verify(RangeIterator& errItem) {$/;"	f	class:llvm::IntegersSubsetMapping
version	MachO.h	/^      uint32_t version;$/;"	m	struct:llvm::MachO::version_min_command
version	Win64EH.h	/^  uint8_t version:3,$/;"	m	struct:llvm::Win64EH::UnwindInfo
version_min_command	MachO.h	/^    struct version_min_command {$/;"	s	namespace:llvm::MachO
visit	InstVisitor.h	/^  RetTy visit(Instruction &I) {$/;"	f	class:llvm::InstVisitor
visit	InstVisitor.h	/^  RetTy visit(Instruction *I)  { return visit(*I); }$/;"	f	class:llvm::InstVisitor
visit	InstVisitor.h	/^  void visit(BasicBlock   *BB) { visit(*BB); }$/;"	f	class:llvm::InstVisitor
visit	InstVisitor.h	/^  void visit(BasicBlock &BB) {$/;"	f	class:llvm::InstVisitor
visit	InstVisitor.h	/^  void visit(Function     *F)  { visit(*F); }$/;"	f	class:llvm::InstVisitor
visit	InstVisitor.h	/^  void visit(Function &F) {$/;"	f	class:llvm::InstVisitor
visit	InstVisitor.h	/^  void visit(Iterator Start, Iterator End) {$/;"	f	class:llvm::InstVisitor
visit	InstVisitor.h	/^  void visit(Module       *M)  { visit(*M); }$/;"	f	class:llvm::InstVisitor
visit	InstVisitor.h	/^  void visit(Module &M) {$/;"	f	class:llvm::InstVisitor
visitAllocaInst	InstVisitor.h	/^  RetTy visitAllocaInst(AllocaInst &I)            { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitAtomicCmpXchgInst	InstVisitor.h	/^  RetTy visitAtomicCmpXchgInst(AtomicCmpXchgInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitAtomicRMWInst	InstVisitor.h	/^  RetTy visitAtomicRMWInst(AtomicRMWInst &I)      { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitBasicBlock	InstVisitor.h	/^  void visitBasicBlock(BasicBlock &BB) {}$/;"	f	class:llvm::InstVisitor
visitBinaryOperator	InstVisitor.h	/^  RetTy visitBinaryOperator(BinaryOperator &I)    { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitBitCastInst	InstVisitor.h	/^  RetTy visitBitCastInst(BitCastInst &I)          { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitBranchInst	InstVisitor.h	/^  RetTy visitBranchInst(BranchInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitCallInst	InstVisitor.h	/^  RetTy visitCallInst(CallInst &I) {$/;"	f	class:llvm::InstVisitor
visitCallSite	InstVisitor.h	/^  RetTy visitCallSite(CallSite CS) {$/;"	f	class:llvm::InstVisitor
visitCastInst	InstVisitor.h	/^  RetTy visitCastInst(CastInst &I)                { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitCmpInst	InstVisitor.h	/^  RetTy visitCmpInst(CmpInst &I)                  { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitDbgDeclareInst	InstVisitor.h	/^  RetTy visitDbgDeclareInst(DbgDeclareInst &I)    { DELEGATE(DbgInfoIntrinsic);}$/;"	f	class:llvm::InstVisitor
visitDbgInfoIntrinsic	InstVisitor.h	/^  RetTy visitDbgInfoIntrinsic(DbgInfoIntrinsic &I) { DELEGATE(IntrinsicInst); }$/;"	f	class:llvm::InstVisitor
visitDbgValueInst	InstVisitor.h	/^  RetTy visitDbgValueInst(DbgValueInst &I)        { DELEGATE(DbgInfoIntrinsic);}$/;"	f	class:llvm::InstVisitor
visitExtractElementInst	InstVisitor.h	/^  RetTy visitExtractElementInst(ExtractElementInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitExtractValueInst	InstVisitor.h	/^  RetTy visitExtractValueInst(ExtractValueInst &I){ DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitFCmpInst	InstVisitor.h	/^  RetTy visitFCmpInst(FCmpInst &I)                { DELEGATE(CmpInst);}$/;"	f	class:llvm::InstVisitor
visitFPExtInst	InstVisitor.h	/^  RetTy visitFPExtInst(FPExtInst &I)              { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFPToSIInst	InstVisitor.h	/^  RetTy visitFPToSIInst(FPToSIInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFPToUIInst	InstVisitor.h	/^  RetTy visitFPToUIInst(FPToUIInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFPTruncInst	InstVisitor.h	/^  RetTy visitFPTruncInst(FPTruncInst &I)          { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitFenceInst	InstVisitor.h	/^  RetTy visitFenceInst(FenceInst   &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitFunction	InstVisitor.h	/^  void visitFunction  (Function &F) {}$/;"	f	class:llvm::InstVisitor
visitGetElementPtrInst	InstVisitor.h	/^  RetTy visitGetElementPtrInst(GetElementPtrInst &I){ DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitICmpInst	InstVisitor.h	/^  RetTy visitICmpInst(ICmpInst &I)                { DELEGATE(CmpInst);}$/;"	f	class:llvm::InstVisitor
visitIndirectBrInst	InstVisitor.h	/^  RetTy visitIndirectBrInst(IndirectBrInst &I)    { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitInsertElementInst	InstVisitor.h	/^  RetTy visitInsertElementInst(InsertElementInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitInsertValueInst	InstVisitor.h	/^  RetTy visitInsertValueInst(InsertValueInst &I)  { DELEGATE(Instruction); }$/;"	f	class:llvm::InstVisitor
visitInstruction	InstVisitor.h	/^  void visitInstruction(Instruction &I) {}  \/\/ Ignore unhandled instructions$/;"	f	class:llvm::InstVisitor
visitIntToPtrInst	InstVisitor.h	/^  RetTy visitIntToPtrInst(IntToPtrInst &I)        { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitIntrinsicInst	InstVisitor.h	/^  RetTy visitIntrinsicInst(IntrinsicInst &I)      { DELEGATE(CallInst); }$/;"	f	class:llvm::InstVisitor
visitInvokeInst	InstVisitor.h	/^  RetTy visitInvokeInst(InvokeInst &I) {$/;"	f	class:llvm::InstVisitor
visitLandingPadInst	InstVisitor.h	/^  RetTy visitLandingPadInst(LandingPadInst &I)    { DELEGATE(Instruction); }$/;"	f	class:llvm::InstVisitor
visitLoadInst	InstVisitor.h	/^  RetTy visitLoadInst(LoadInst     &I)            { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitMemCpyInst	InstVisitor.h	/^  RetTy visitMemCpyInst(MemCpyInst &I)            { DELEGATE(MemTransferInst); }$/;"	f	class:llvm::InstVisitor
visitMemIntrinsic	InstVisitor.h	/^  RetTy visitMemIntrinsic(MemIntrinsic &I)        { DELEGATE(IntrinsicInst); }$/;"	f	class:llvm::InstVisitor
visitMemMoveInst	InstVisitor.h	/^  RetTy visitMemMoveInst(MemMoveInst &I)          { DELEGATE(MemTransferInst); }$/;"	f	class:llvm::InstVisitor
visitMemSetInst	InstVisitor.h	/^  RetTy visitMemSetInst(MemSetInst &I)            { DELEGATE(MemIntrinsic); }$/;"	f	class:llvm::InstVisitor
visitMemTransferInst	InstVisitor.h	/^  RetTy visitMemTransferInst(MemTransferInst &I)  { DELEGATE(MemIntrinsic); }$/;"	f	class:llvm::InstVisitor
visitModule	InstVisitor.h	/^  void visitModule    (Module &M) {}$/;"	f	class:llvm::InstVisitor
visitPHINode	InstVisitor.h	/^  RetTy visitPHINode(PHINode       &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitPtrToIntInst	InstVisitor.h	/^  RetTy visitPtrToIntInst(PtrToIntInst &I)        { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitResumeInst	InstVisitor.h	/^  RetTy visitResumeInst(ResumeInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitReturnInst	InstVisitor.h	/^  RetTy visitReturnInst(ReturnInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitSExtInst	InstVisitor.h	/^  RetTy visitSExtInst(SExtInst &I)                { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitSIToFPInst	InstVisitor.h	/^  RetTy visitSIToFPInst(SIToFPInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitSelectInst	InstVisitor.h	/^  RetTy visitSelectInst(SelectInst &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitShuffleVectorInst	InstVisitor.h	/^  RetTy visitShuffleVectorInst(ShuffleVectorInst &I) { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitStoreInst	InstVisitor.h	/^  RetTy visitStoreInst(StoreInst   &I)            { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitSwitchInst	InstVisitor.h	/^  RetTy visitSwitchInst(SwitchInst &I)            { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitTerminatorInst	InstVisitor.h	/^  RetTy visitTerminatorInst(TerminatorInst &I)    { DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitTruncInst	InstVisitor.h	/^  RetTy visitTruncInst(TruncInst &I)              { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitUIToFPInst	InstVisitor.h	/^  RetTy visitUIToFPInst(UIToFPInst &I)            { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
visitUnaryInstruction	InstVisitor.h	/^  RetTy visitUnaryInstruction(UnaryInstruction &I){ DELEGATE(Instruction);}$/;"	f	class:llvm::InstVisitor
visitUnreachableInst	InstVisitor.h	/^  RetTy visitUnreachableInst(UnreachableInst &I)  { DELEGATE(TerminatorInst);}$/;"	f	class:llvm::InstVisitor
visitVAArgInst	InstVisitor.h	/^  RetTy visitVAArgInst(VAArgInst   &I)            { DELEGATE(UnaryInstruction);}$/;"	f	class:llvm::InstVisitor
visitZExtInst	InstVisitor.h	/^  RetTy visitZExtInst(ZExtInst &I)                { DELEGATE(CastInst);}$/;"	f	class:llvm::InstVisitor
vmaddr	MachO.h	/^      uint32_t vmaddr;$/;"	m	struct:llvm::MachO::segment_command
vmaddr	MachO.h	/^      uint64_t vmaddr;$/;"	m	struct:llvm::MachO::segment_command_64
vmsize	MachO.h	/^      uint32_t vmsize;$/;"	m	struct:llvm::MachO::segment_command
vmsize	MachO.h	/^      uint64_t vmsize;$/;"	m	struct:llvm::MachO::segment_command_64
weak_bind_off	MachO.h	/^      uint32_t weak_bind_off;$/;"	m	struct:llvm::MachO::dyld_info_command
weak_bind_size	MachO.h	/^      uint32_t weak_bind_size;$/;"	m	struct:llvm::MachO::dyld_info_command
windows_error	system_error.h	/^  explicit windows_error(int v) : v_(_(v)) {}$/;"	f	struct:llvm::windows_error
windows_error	system_error.h	/^  windows_error(_ v) : v_(v) {}$/;"	f	struct:llvm::windows_error
windows_error	system_error.h	/^struct windows_error {$/;"	s	namespace:llvm
withImplLikeThis	IntegersSubset.h	/^  static IntItem withImplLikeThis(const IntItem& LikeThis, const APInt& V) {$/;"	f	class:llvm::IntItem
writeEdge	GraphWriter.h	/^  void writeEdge(NodeType *Node, unsigned edgeidx, child_iterator EI) {$/;"	f	class:llvm::GraphWriter
writeFooter	GraphWriter.h	/^  void writeFooter() {$/;"	f	class:llvm::GraphWriter
writeGraph	GraphWriter.h	/^  void writeGraph(const std::string &Title = "") {$/;"	f	class:llvm::GraphWriter
writeHeader	GraphWriter.h	/^  void writeHeader(const std::string &Title) {$/;"	f	class:llvm::GraphWriter
writeNode	GraphWriter.h	/^  void writeNode(NodeType *Node) {$/;"	f	class:llvm::GraphWriter
writeNode	GraphWriter.h	/^  void writeNode(NodeType *const *Node) {$/;"	f	class:llvm::GraphWriter
writeNode	GraphWriter.h	/^  void writeNode(NodeType& Node) {$/;"	f	class:llvm::GraphWriter
writeNodes	GraphWriter.h	/^  void writeNodes() {$/;"	f	class:llvm::GraphWriter
write_be	Endian.h	/^  inline void write_be(void *memory, value_type value) {$/;"	f	namespace:llvm::support::endian
write_fault	system_error.h	/^  write_fault             = 29, \/\/ ERROR_WRITE_FAULT,$/;"	e	enum:llvm::windows_error::_
write_le	Endian.h	/^  inline void write_le(void *memory, value_type value) {$/;"	f	namespace:llvm::support::endian
write_protect	system_error.h	/^  write_protect           = 19, \/\/ ERROR_WRITE_PROTECT,$/;"	e	enum:llvm::windows_error::_
writer_acquire	RWMutex.h	/^      bool writer_acquire() {$/;"	f	class:llvm::sys::SmartRWMutex
writer_release	RWMutex.h	/^      bool writer_release() {$/;"	f	class:llvm::sys::SmartRWMutex
writers	RWMutex.h	/^      unsigned readers, writers;$/;"	m	class:llvm::sys::SmartRWMutex
wrong_disk	system_error.h	/^  wrong_disk              = 34, \/\/ ERROR_WRONG_DISK,$/;"	e	enum:llvm::windows_error::_
wrong_protocol_type	system_error.h	/^  wrong_protocol_type                 = EPROTOTYPE$/;"	e	enum:llvm::errc::_
x	AlignOf.h	/^  char x;$/;"	m	struct:llvm::AlignmentCalcImpl
yaml	YAMLParser.h	/^namespace yaml {$/;"	n	namespace:llvm
~CallbackVH	ValueHandle.h	/^  virtual ~CallbackVH() {}$/;"	f	class:llvm::CallbackVH
~CrashRecoveryContextCleanupRegistrar	CrashRecoveryContext.h	/^  ~CrashRecoveryContextCleanupRegistrar() {$/;"	f	class:llvm::CrashRecoveryContextCleanupRegistrar
~DirIterState	FileSystem.h	/^    ~DirIterState() {$/;"	f	struct:llvm::sys::fs::detail::DirIterState
~FileRemover	FileUtilities.h	/^    ~FileRemover() {$/;"	f	class:llvm::FileRemover
~GCOVLines	GCOV.h	/^  ~GCOVLines() { Lines.clear(); }$/;"	f	class:llvm::GCOVLines
~GenericOptionValue	CommandLine.h	/^  virtual ~GenericOptionValue() {}$/;"	f	struct:llvm::cl::GenericOptionValue
~MallocAllocator	Allocator.h	/^  ~MallocAllocator() {}$/;"	f	class:llvm::MallocAllocator
~MutexGuard	MutexGuard.h	/^    ~MutexGuard() { M.release(); }$/;"	f	class:llvm::MutexGuard
~Node	YAMLParser.h	/^  virtual ~Node() {}$/;"	f	class:llvm::yaml::Node
~Option	CommandLine.h	/^  virtual ~Option() {}$/;"	f	class:llvm::cl::Option
~PooledStringPtr	StringPool.h	/^    ~PooledStringPtr() { clear(); }$/;"	f	class:llvm::PooledStringPtr
~Recycler	Recycler.h	/^  ~Recycler() {$/;"	f	class:llvm::Recycler
~RecyclingAllocator	RecyclingAllocator.h	/^  ~RecyclingAllocator() { Base.clear(Allocator); }$/;"	f	class:llvm::RecyclingAllocator
~SaveAndRestore	SaveAndRestore.h	/^  ~SaveAndRestore() { X = old_value; }$/;"	f	struct:llvm::SaveAndRestore
~SaveOr	SaveAndRestore.h	/^  ~SaveOr() { X |= old_value; }$/;"	f	struct:llvm::SaveOr
~ScopedFatalErrorHandler	ErrorHandling.h	/^    ~ScopedFatalErrorHandler() { remove_fatal_error_handler(); }$/;"	f	struct:llvm::ScopedFatalErrorHandler
~SmartScopedLock	Mutex.h	/^      ~SmartScopedLock() {$/;"	f	class:llvm::sys::SmartScopedLock
~SmartScopedReader	RWMutex.h	/^      ~SmartScopedReader() {$/;"	f	struct:llvm::sys::SmartScopedReader
~SmartScopedWriter	RWMutex.h	/^      ~SmartScopedWriter() {$/;"	f	struct:llvm::sys::SmartScopedWriter
~SpecificBumpPtrAllocator	Allocator.h	/^  ~SpecificBumpPtrAllocator() {$/;"	f	class:llvm::SpecificBumpPtrAllocator
~TimeRegion	Timer.h	/^  ~TimeRegion() {$/;"	f	class:llvm::TimeRegion
~ValueHandleBase	ValueHandle.h	/^  ~ValueHandleBase() {$/;"	f	class:llvm::ValueHandleBase
~basic_parser_impl	CommandLine.h	/^  virtual ~basic_parser_impl() {}$/;"	f	class:llvm::cl::basic_parser_impl
~circular_raw_ostream	circular_raw_ostream.h	/^    ~circular_raw_ostream() {$/;"	f	class:llvm::circular_raw_ostream
~format_object_base	Format.h	/^  virtual ~format_object_base() {}$/;"	f	class:llvm::format_object_base
~formatted_raw_ostream	FormattedStream.h	/^    ~formatted_raw_ostream() {$/;"	f	class:llvm::formatted_raw_ostream
~generic_parser_base	CommandLine.h	/^  virtual ~generic_parser_base() {}  \/\/ Base class should have virtual-dtor$/;"	f	class:llvm::cl::generic_parser_base
~listener	Registry.h	/^      virtual ~listener() {$/;"	f	class:llvm::Registry::listener
~llvm_shutdown_obj	ManagedStatic.h	/^  ~llvm_shutdown_obj() { llvm_shutdown(); }$/;"	f	struct:llvm::llvm_shutdown_obj
