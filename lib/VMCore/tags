!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALMutex	Attributes.cpp	/^static ManagedStatic<sys::SmartMutex<true> > ALMutex;$/;"	m	namespace:llvm	file:
ASPointerTypes	LLVMContextImpl.h	/^  DenseMap<std::pair<Type*, unsigned>, PointerType*> ASPointerTypes;$/;"	m	class:llvm::LLVMContextImpl
AddRef	Attributes.cpp	/^  void AddRef() {$/;"	f	class:llvm::AttributeListImpl
AddToExistingUseList	Value.cpp	/^void ValueHandleBase::AddToExistingUseList(ValueHandleBase **List) {$/;"	f	class:ValueHandleBase
AddToExistingUseListAfter	Value.cpp	/^void ValueHandleBase::AddToExistingUseListAfter(ValueHandleBase *List) {$/;"	f	class:ValueHandleBase
AddToUseList	Value.cpp	/^void ValueHandleBase::AddToUseList() {$/;"	f	class:ValueHandleBase
AllocaInst	Instructions.cpp	/^AllocaInst::AllocaInst(Type *Ty, Value *ArraySize, unsigned Align,$/;"	f	class:AllocaInst
AllocaInst	Instructions.cpp	/^AllocaInst::AllocaInst(Type *Ty, Value *ArraySize,$/;"	f	class:AllocaInst
AllocaInst	Instructions.cpp	/^AllocaInst::AllocaInst(Type *Ty, const Twine &Name,$/;"	f	class:AllocaInst
AnalysisGroupInfo	PassRegistry.cpp	/^  struct AnalysisGroupInfo {$/;"	s	struct:__anon9::PassRegistryImpl	file:
AnalysisGroupInfoMap	PassRegistry.cpp	/^  DenseMap<const PassInfo*, AnalysisGroupInfo> AnalysisGroupInfoMap;$/;"	m	struct:__anon9::PassRegistryImpl	file:
AnnotationWriter	AsmWriter.cpp	/^  AssemblyAnnotationWriter *AnnotationWriter;$/;"	m	class:__anon3::AssemblyWriter	file:
AnonStructTypeKeyInfo	LLVMContextImpl.h	/^struct AnonStructTypeKeyInfo {$/;"	s	namespace:llvm
AnonStructTypes	LLVMContextImpl.h	/^  StructTypeMap AnonStructTypes;$/;"	m	class:llvm::LLVMContextImpl
Argument	Function.cpp	/^Argument::Argument(Type *Ty, const Twine &Name, Function *Par)$/;"	f	class:Argument
Arguments	PassManager.cpp	/^  None, Arguments, Structure, Executions, Details$/;"	e	enum:llvm::PassDebugLevel	file:
ArrayConstants	LLVMContextImpl.h	/^  ArrayConstantsTy ArrayConstants;$/;"	m	class:llvm::LLVMContextImpl
ArrayConstantsTy	LLVMContextImpl.h	/^  typedef ConstantAggrUniqueMap<ArrayType, ConstantArray> ArrayConstantsTy;$/;"	t	class:llvm::LLVMContextImpl
ArrayType	Type.cpp	/^ArrayType::ArrayType(Type *ElType, uint64_t NumEl)$/;"	f	class:ArrayType
ArrayTypes	LLVMContextImpl.h	/^  DenseMap<std::pair<Type *, uint64_t>, ArrayType*> ArrayTypes;$/;"	m	class:llvm::LLVMContextImpl
AssemblyWriter	AsmWriter.cpp	/^  inline AssemblyWriter(formatted_raw_ostream &o, SlotTracker &Mac,$/;"	f	class:__anon3::AssemblyWriter
AssemblyWriter	AsmWriter.cpp	/^class AssemblyWriter {$/;"	c	namespace:__anon3	file:
Assert	Verifier.cpp	362;"	d	file:
Assert1	Verifier.cpp	364;"	d	file:
Assert2	Verifier.cpp	366;"	d	file:
Assert3	Verifier.cpp	368;"	d	file:
Assert4	Verifier.cpp	370;"	d	file:
AssertOK	Instructions.cpp	/^void BranchInst::AssertOK() {$/;"	f	class:BranchInst
AssertOK	Instructions.cpp	/^void LoadInst::AssertOK() {$/;"	f	class:LoadInst
AssertOK	Instructions.cpp	/^void StoreInst::AssertOK() {$/;"	f	class:StoreInst
AtomicCmpXchgInst	Instructions.cpp	/^AtomicCmpXchgInst::AtomicCmpXchgInst(Value *Ptr, Value *Cmp, Value *NewVal,$/;"	f	class:AtomicCmpXchgInst
AtomicRMWInst	Instructions.cpp	/^AtomicRMWInst::AtomicRMWInst(BinOp Operation, Value *Ptr, Value *Val,$/;"	f	class:AtomicRMWInst
AttrListPtr	Attributes.cpp	/^AttrListPtr::AttrListPtr(AttributeListImpl *LI) : AttrList(LI) {$/;"	f	class:AttrListPtr
AttrListPtr	Attributes.cpp	/^AttrListPtr::AttrListPtr(const AttrListPtr &P) : AttrList(P.AttrList) {$/;"	f	class:AttrListPtr
AttributeListImpl	Attributes.cpp	/^  AttributeListImpl(ArrayRef<AttributeWithIndex> attrs)$/;"	f	class:llvm::AttributeListImpl
AttributeListImpl	Attributes.cpp	/^class AttributeListImpl : public FoldingSetNode {$/;"	c	namespace:llvm	file:
AttributesImpl	AttributesImpl.h	/^  AttributesImpl(uint64_t bits) : Bits(bits) {}$/;"	f	class:llvm::AttributesImpl
AttributesImpl	AttributesImpl.h	/^class AttributesImpl : public FoldingSetNode {$/;"	c	namespace:llvm
AttributesLists	Attributes.cpp	/^static ManagedStatic<FoldingSet<AttributeListImpl> > AttributesLists;$/;"	v	file:
Attrs	Attributes.cpp	/^  SmallVector<AttributeWithIndex, 4> Attrs;$/;"	m	class:llvm::AttributeListImpl	file:
AttrsSet	LLVMContextImpl.h	/^  FoldingSet<AttributesImpl> AttrsSet;$/;"	m	class:llvm::LLVMContextImpl
BBPassManager	PassManager.cpp	/^  explicit BBPassManager()$/;"	f	class:__anon7::BBPassManager
BBPassManager	PassManager.cpp	/^class BBPassManager : public PMDataManager, public FunctionPass {$/;"	c	namespace:__anon7	file:
BUILD_ARCHIVE	Makefile	/^BUILD_ARCHIVE = 1$/;"	m
BUILT_SOURCES	Makefile	/^BUILT_SOURCES = $(PROJ_OBJ_ROOT)\/include\/llvm\/Intrinsics.gen$/;"	m
Banner	PrintModulePass.cpp	/^    std::string Banner;     \/\/ String to print before each function$/;"	m	class:__anon10::PrintFunctionPass	file:
Banner	PrintModulePass.cpp	/^    std::string Banner;$/;"	m	class:__anon10::PrintModulePass	file:
BasicBlock	BasicBlock.cpp	/^BasicBlock::BasicBlock(LLVMContext &C, const Twine &Name, Function *NewParent,$/;"	f	class:BasicBlock
BinaryConstantExpr	ConstantsContext.h	/^  BinaryConstantExpr(unsigned Opcode, Constant *C1, Constant *C2,$/;"	f	class:llvm::BinaryConstantExpr
BinaryConstantExpr	ConstantsContext.h	/^class BinaryConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
BinaryOperator	Instructions.cpp	/^BinaryOperator::BinaryOperator(BinaryOps iType, Value *S1, Value *S2, $/;"	f	class:BinaryOperator
BinaryOperator	Instructions.cpp	/^BinaryOperator::BinaryOperator(BinaryOps iType, Value *S1, Value *S2,$/;"	f	class:BinaryOperator
BitCastConstantVector	ConstantFold.cpp	/^static Constant *BitCastConstantVector(Constant *CV, VectorType *DstTy) {$/;"	f	file:
BitCastInst	Instructions.cpp	/^BitCastInst::BitCastInst($/;"	f	class:BitCastInst
Bits	AttributesImpl.h	/^  uint64_t Bits;                \/\/ FIXME: We will be expanding this.$/;"	m	class:llvm::AttributesImpl
BlockAddress	Constants.cpp	/^BlockAddress::BlockAddress(Function *F, BasicBlock *BB)$/;"	f	class:BlockAddress
BlockAddresses	LLVMContextImpl.h	/^  DenseMap<std::pair<Function*, BasicBlock*> , BlockAddress*> BlockAddresses;$/;"	m	class:llvm::LLVMContextImpl
BranchInst	Instructions.cpp	/^BranchInst::BranchInst(BasicBlock *IfTrue, BasicBlock *IfFalse, Value *Cond,$/;"	f	class:BranchInst
BranchInst	Instructions.cpp	/^BranchInst::BranchInst(BasicBlock *IfTrue, BasicBlock *InsertAtEnd)$/;"	f	class:BranchInst
BranchInst	Instructions.cpp	/^BranchInst::BranchInst(BasicBlock *IfTrue, Instruction *InsertBefore)$/;"	f	class:BranchInst
BranchInst	Instructions.cpp	/^BranchInst::BranchInst(const BranchInst &BI) :$/;"	f	class:BranchInst
Broken	Verifier.cpp	/^    bool Broken;          \/\/ Is this module found to be broken?$/;"	m	struct:__anon13::Verifier	file:
BuildLazyArguments	Function.cpp	/^void Function::BuildLazyArguments() const {$/;"	f	class:Function
CAZConstants	LLVMContextImpl.h	/^  DenseMap<Type*, ConstantAggregateZero*> CAZConstants;$/;"	m	class:llvm::LLVMContextImpl
CDSConstants	LLVMContextImpl.h	/^  StringMap<ConstantDataSequential*> CDSConstants;$/;"	m	class:llvm::LLVMContextImpl
CFGOnlyList	Pass.cpp	/^    VectorType &CFGOnlyList;$/;"	m	struct:__anon6::GetCFGOnlyPasses	file:
CONSTANTFOLDING_H	ConstantFold.h	20;"	d
CPNConstants	LLVMContextImpl.h	/^  DenseMap<PointerType*, ConstantPointerNull*> CPNConstants;$/;"	m	class:llvm::LLVMContextImpl
Cache	LeaksContext.h	/^  const T* Cache;$/;"	m	struct:llvm::LeakDetectorImpl
CallInst	Instructions.cpp	/^CallInst::CallInst(Value *Func, const Twine &Name,$/;"	f	class:CallInst
CallInst	Instructions.cpp	/^CallInst::CallInst(const CallInst &CI)$/;"	f	class:CallInst
CastOperand	IntrinsicInst.cpp	/^static Value *CastOperand(Value *C) {$/;"	f	file:
CheckFailed	Verifier.cpp	/^    void CheckFailed(const Twine &Message, Type *T1,$/;"	f	struct:__anon13::Verifier
CheckFailed	Verifier.cpp	/^    void CheckFailed(const Twine &Message, const Value *V1,$/;"	f	struct:__anon13::Verifier
CheckFailed	Verifier.cpp	/^    void CheckFailed(const Twine &Message,$/;"	f	struct:__anon13::Verifier
CmpInst	Instructions.cpp	/^CmpInst::CmpInst(Type *ty, OtherOps op, unsigned short predicate,$/;"	f	class:CmpInst
CompareConstantExpr	ConstantsContext.h	/^  CompareConstantExpr(Type *ty, Instruction::OtherOps opc,$/;"	f	class:llvm::CompareConstantExpr
CompareConstantExpr	ConstantsContext.h	/^class CompareConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
ComputeHash	LLVMContextImpl.h	/^  static unsigned ComputeHash(const MDNode &X, FoldingSetNodeID &) {$/;"	f	struct:llvm::FoldingSetTrait
ConstantAggrUniqueMap	ConstantsContext.h	/^class ConstantAggrUniqueMap {$/;"	c	namespace:llvm
ConstantArray	Constants.cpp	/^ConstantArray::ConstantArray(ArrayType *T, ArrayRef<Constant *> V)$/;"	f	class:ConstantArray
ConstantArrayCreator	ConstantsContext.h	/^struct ConstantArrayCreator {$/;"	s	namespace:llvm
ConstantClassInfo	ConstantsContext.h	/^    typedef DenseMapInfo<ConstantClass*> ConstantClassInfo;$/;"	t	struct:llvm::ConstantAggrUniqueMap::MapInfo
ConstantCreator	ConstantsContext.h	/^struct ConstantCreator {$/;"	s	namespace:llvm
ConstantCreator	ConstantsContext.h	/^struct ConstantCreator<ConstantExpr, Type, ExprMapKeyType> {$/;"	s	namespace:llvm
ConstantCreator	ConstantsContext.h	/^struct ConstantCreator<InlineAsm, PointerType, InlineAsmKeyType> {$/;"	s	namespace:llvm
ConstantFP	Constants.cpp	/^ConstantFP::ConstantFP(Type *Ty, const APFloat& V)$/;"	f	class:ConstantFP
ConstantFoldBinaryInstruction	ConstantFold.cpp	/^Constant *llvm::ConstantFoldBinaryInstruction(unsigned Opcode,$/;"	f	class:llvm
ConstantFoldCastInstruction	ConstantFold.cpp	/^Constant *llvm::ConstantFoldCastInstruction(unsigned opc, Constant *V,$/;"	f	class:llvm
ConstantFoldCompareInstruction	ConstantFold.cpp	/^Constant *llvm::ConstantFoldCompareInstruction(unsigned short pred, $/;"	f	class:llvm
ConstantFoldExtractElementInstruction	ConstantFold.cpp	/^Constant *llvm::ConstantFoldExtractElementInstruction(Constant *Val,$/;"	f	class:llvm
ConstantFoldExtractValueInstruction	ConstantFold.cpp	/^Constant *llvm::ConstantFoldExtractValueInstruction(Constant *Agg,$/;"	f	class:llvm
ConstantFoldGetElementPtr	ConstantFold.cpp	/^Constant *llvm::ConstantFoldGetElementPtr(Constant *C,$/;"	f	class:llvm
ConstantFoldGetElementPtrImpl	ConstantFold.cpp	/^static Constant *ConstantFoldGetElementPtrImpl(Constant *C,$/;"	f	file:
ConstantFoldInsertElementInstruction	ConstantFold.cpp	/^Constant *llvm::ConstantFoldInsertElementInstruction(Constant *Val,$/;"	f	class:llvm
ConstantFoldInsertValueInstruction	ConstantFold.cpp	/^Constant *llvm::ConstantFoldInsertValueInstruction(Constant *Agg,$/;"	f	class:llvm
ConstantFoldSelectInstruction	ConstantFold.cpp	/^Constant *llvm::ConstantFoldSelectInstruction(Constant *Cond,$/;"	f	class:llvm
ConstantFoldShuffleVectorInstruction	ConstantFold.cpp	/^Constant *llvm::ConstantFoldShuffleVectorInstruction(Constant *V1,$/;"	f	class:llvm
ConstantInfo	ConstantsContext.h	/^    typedef DenseMapInfo<Constant*> ConstantInfo;$/;"	t	struct:llvm::ConstantAggrUniqueMap::MapInfo
ConstantInt	Constants.cpp	/^ConstantInt::ConstantInt(IntegerType *Ty, const APInt& V)$/;"	f	class:ConstantInt
ConstantKeyData	ConstantsContext.h	/^struct ConstantKeyData {$/;"	s	namespace:llvm
ConstantKeyData	ConstantsContext.h	/^struct ConstantKeyData<ConstantExpr> {$/;"	s	namespace:llvm
ConstantKeyData	ConstantsContext.h	/^struct ConstantKeyData<InlineAsm> {$/;"	s	namespace:llvm
ConstantStruct	Constants.cpp	/^ConstantStruct::ConstantStruct(StructType *T, ArrayRef<Constant *> V)$/;"	f	class:ConstantStruct
ConstantTraits	ConstantsContext.h	/^struct ConstantTraits< std::vector<T, Alloc> > {$/;"	s	namespace:llvm
ConstantTraits	ConstantsContext.h	/^struct ConstantTraits<Constant *> {$/;"	s	namespace:llvm
ConstantUniqueMap	ConstantsContext.h	/^class ConstantUniqueMap {$/;"	c	namespace:llvm
ConstantVector	Constants.cpp	/^ConstantVector::ConstantVector(VectorType *T, ArrayRef<Constant *> V)$/;"	f	class:ConstantVector
ConstraintInfo	InlineAsm.cpp	/^InlineAsm::ConstraintInfo::ConstraintInfo() :$/;"	f	class:InlineAsm::ConstraintInfo
ConstraintInfo	InlineAsm.cpp	/^InlineAsm::ConstraintInfo::ConstraintInfo(const ConstraintInfo &other) :$/;"	f	class:InlineAsm::ConstraintInfo
Context	Verifier.cpp	/^    LLVMContext *Context; \/\/ Context within which we are verifying$/;"	m	struct:__anon13::Verifier	file:
Create	ConstantsContext.h	/^  ConstantClass *Create(TypeClass *Ty, Operands V, typename MapTy::iterator I) {$/;"	f	class:llvm::ConstantAggrUniqueMap
Create	ConstantsContext.h	/^  ConstantClass *Create(TypeClass *Ty, ValRefType V,$/;"	f	class:llvm::ConstantUniqueMap
Create	ConstantsContext.h	/^  static GetElementPtrConstantExpr *Create(Constant *C,$/;"	f	class:llvm::GetElementPtrConstantExpr
Create	Instructions.cpp	/^BinaryOperator *BinaryOperator::Create(BinaryOps Op, Value *S1, Value *S2,$/;"	f	class:BinaryOperator
Create	Instructions.cpp	/^CastInst *CastInst::Create(Instruction::CastOps op, Value *S, Type *Ty, $/;"	f	class:CastInst
Create	Instructions.cpp	/^CastInst *CastInst::Create(Instruction::CastOps op, Value *S, Type *Ty,$/;"	f	class:CastInst
Create	Instructions.cpp	/^CmpInst::Create(OtherOps Op, unsigned short predicate, Value *S1, Value *S2, $/;"	f	class:CmpInst
Create	Instructions.cpp	/^CmpInst::Create(OtherOps Op, unsigned short predicate,$/;"	f	class:CmpInst
Create	Instructions.cpp	/^LandingPadInst *LandingPadInst::Create(Type *RetTy, Value *PersonalityFn,$/;"	f	class:LandingPadInst
CreateFNeg	Instructions.cpp	/^BinaryOperator *BinaryOperator::CreateFNeg(Value *Op, const Twine &Name,$/;"	f	class:BinaryOperator
CreateFPCast	Instructions.cpp	/^CastInst *CastInst::CreateFPCast(Value *C, Type *Ty, $/;"	f	class:CastInst
CreateFree	Instructions.cpp	/^Instruction * CallInst::CreateFree(Value* Source, Instruction *InsertBefore) {$/;"	f	class:CallInst
CreateFree	Instructions.cpp	/^Instruction* CallInst::CreateFree(Value* Source, BasicBlock *InsertAtEnd) {$/;"	f	class:CallInst
CreateFunctionSlot	AsmWriter.cpp	/^void SlotTracker::CreateFunctionSlot(const Value *V) {$/;"	f	class:SlotTracker
CreateGlobalString	IRBuilder.cpp	/^Value *IRBuilderBase::CreateGlobalString(StringRef Str, const Twine &Name) {$/;"	f	class:IRBuilderBase
CreateIntegerCast	Instructions.cpp	/^CastInst *CastInst::CreateIntegerCast(Value *C, Type *Ty, $/;"	f	class:CastInst
CreateLifetimeEnd	IRBuilder.cpp	/^CallInst *IRBuilderBase::CreateLifetimeEnd(Value *Ptr, ConstantInt *Size) {$/;"	f	class:IRBuilderBase
CreateLifetimeStart	IRBuilder.cpp	/^CallInst *IRBuilderBase::CreateLifetimeStart(Value *Ptr, ConstantInt *Size) {$/;"	f	class:IRBuilderBase
CreateMalloc	Instructions.cpp	/^Instruction *CallInst::CreateMalloc(BasicBlock *InsertAtEnd,$/;"	f	class:CallInst
CreateMalloc	Instructions.cpp	/^Instruction *CallInst::CreateMalloc(Instruction *InsertBefore,$/;"	f	class:CallInst
CreateMemCpy	IRBuilder.cpp	/^CreateMemCpy(Value *Dst, Value *Src, Value *Size, unsigned Align,$/;"	f	class:IRBuilderBase
CreateMemMove	IRBuilder.cpp	/^CreateMemMove(Value *Dst, Value *Src, Value *Size, unsigned Align,$/;"	f	class:IRBuilderBase
CreateMemSet	IRBuilder.cpp	/^CreateMemSet(Value *Ptr, Value *Val, Value *Size, unsigned Align,$/;"	f	class:IRBuilderBase
CreateMetadataSlot	AsmWriter.cpp	/^void SlotTracker::CreateMetadataSlot(const MDNode *N) {$/;"	f	class:SlotTracker
CreateModuleSlot	AsmWriter.cpp	/^void SlotTracker::CreateModuleSlot(const GlobalValue *V) {$/;"	f	class:SlotTracker
CreateNSWNeg	Instructions.cpp	/^BinaryOperator *BinaryOperator::CreateNSWNeg(Value *Op, const Twine &Name,$/;"	f	class:BinaryOperator
CreateNUWNeg	Instructions.cpp	/^BinaryOperator *BinaryOperator::CreateNUWNeg(Value *Op, const Twine &Name,$/;"	f	class:BinaryOperator
CreateNeg	Instructions.cpp	/^BinaryOperator *BinaryOperator::CreateNeg(Value *Op, const Twine &Name,$/;"	f	class:BinaryOperator
CreateNot	Instructions.cpp	/^BinaryOperator *BinaryOperator::CreateNot(Value *Op, const Twine &Name,$/;"	f	class:BinaryOperator
CreatePointerCast	Instructions.cpp	/^CastInst *CastInst::CreatePointerCast(Value *S, Type *Ty, $/;"	f	class:CastInst
CreatePointerCast	Instructions.cpp	/^CastInst *CastInst::CreatePointerCast(Value *S, Type *Ty,$/;"	f	class:CastInst
CreateSExtOrBitCast	Instructions.cpp	/^CastInst *CastInst::CreateSExtOrBitCast(Value *S, Type *Ty, $/;"	f	class:CastInst
CreateTruncOrBitCast	Instructions.cpp	/^CastInst *CastInst::CreateTruncOrBitCast(Value *S, Type *Ty,$/;"	f	class:CastInst
CreateZExtOrBitCast	Instructions.cpp	/^CastInst *CastInst::CreateZExtOrBitCast(Value *S, Type *Ty, $/;"	f	class:CastInst
Ctx	LLVMContextImpl.h	/^  LLVMContextImpl *Ctx;$/;"	m	class:llvm::DebugRecVH
CustomMDKindNames	LLVMContextImpl.h	/^  StringMap<unsigned> CustomMDKindNames;$/;"	m	class:llvm::LLVMContextImpl
DEBUG_TYPE	ValueSymbolTable.cpp	14;"	d	file:
DIBuilder	DIBuilder.cpp	/^DIBuilder::DIBuilder(Module &m)$/;"	f	class:DIBuilder
DIDescriptor	DebugInfo.cpp	/^DIDescriptor::DIDescriptor(const DIFile F) : DbgNode(F.DbgNode) {$/;"	f	class:DIDescriptor
DIDescriptor	DebugInfo.cpp	/^DIDescriptor::DIDescriptor(const DILexicalBlock F) : DbgNode(F.DbgNode) {$/;"	f	class:DIDescriptor
DIDescriptor	DebugInfo.cpp	/^DIDescriptor::DIDescriptor(const DILexicalBlockFile F) : DbgNode(F.DbgNode) {$/;"	f	class:DIDescriptor
DIDescriptor	DebugInfo.cpp	/^DIDescriptor::DIDescriptor(const DISubprogram F) : DbgNode(F.DbgNode) {$/;"	f	class:DIDescriptor
DIDescriptor	DebugInfo.cpp	/^DIDescriptor::DIDescriptor(const DIType F) : DbgNode(F.DbgNode) {$/;"	f	class:DIDescriptor
DIDescriptor	DebugInfo.cpp	/^DIDescriptor::DIDescriptor(const DIVariable F) : DbgNode(F.DbgNode) {$/;"	f	class:DIDescriptor
DIType	DebugInfo.cpp	/^DIType::DIType(const MDNode *N) : DIScope(N) {$/;"	f	class:DIType
DT	Verifier.cpp	/^    DominatorTree *DT;    \/\/ Dominator Tree, caution can be null!$/;"	m	struct:__anon13::Verifier	file:
DataLayout	DataLayout.cpp	/^DataLayout::DataLayout() : ImmutablePass(ID) {$/;"	f	class:DataLayout
DataLayout	DataLayout.cpp	/^DataLayout::DataLayout(const Module *M)$/;"	f	class:DataLayout
DebugRecVH	LLVMContextImpl.h	/^  DebugRecVH(MDNode *n, LLVMContextImpl *ctx, int idx)$/;"	f	class:llvm::DebugRecVH
DebugRecVH	LLVMContextImpl.h	/^class DebugRecVH : public CallbackVH {$/;"	c	namespace:llvm
DecodeFixedType	Function.cpp	/^static Type *DecodeFixedType(ArrayRef<Intrinsic::IITDescriptor> &Infos,$/;"	f	file:
DecodeIITType	Function.cpp	/^static void DecodeIITType(unsigned &NextElt, ArrayRef<unsigned char> Infos,$/;"	f	file:
DeleteStream	PrintModulePass.cpp	/^    bool DeleteStream;      \/\/ Delete the ostream in our dtor?$/;"	m	class:__anon10::PrintFunctionPass	file:
DeleteStream	PrintModulePass.cpp	/^    bool DeleteStream;      \/\/ Delete the ostream in our dtor?$/;"	m	class:__anon10::PrintModulePass	file:
Dematerialize	Globals.cpp	/^void GlobalValue::Dematerialize() {$/;"	f	class:GlobalValue
Dematerialize	Module.cpp	/^void Module::Dematerialize(GlobalValue *GV) {$/;"	f	class:Module
DenseMapAPFloatKeyInfo	LLVMContextImpl.h	/^struct DenseMapAPFloatKeyInfo {$/;"	s	namespace:llvm
DenseMapAPIntKeyInfo	LLVMContextImpl.h	/^struct DenseMapAPIntKeyInfo {$/;"	s	namespace:llvm
Details	PassManager.cpp	/^  None, Arguments, Structure, Executions, Details$/;"	e	enum:llvm::PassDebugLevel	file:
DoPHITranslation	Value.cpp	/^Value *Value::DoPHITranslation(const BasicBlock *CurBB,$/;"	f	class:Value
DoubleTy	LLVMContextImpl.h	/^  Type VoidTy, LabelTy, HalfTy, FloatTy, DoubleTy, MetadataTy;$/;"	m	class:llvm::LLVMContextImpl
DropFirst	LLVMContextImpl.cpp	/^struct DropFirst {$/;"	s	namespace:__anon5	file:
DropRef	Attributes.cpp	/^  void DropRef() {$/;"	f	class:llvm::AttributeListImpl
DropReferences	LLVMContextImpl.cpp	/^struct DropReferences {$/;"	s	namespace:__anon5	file:
ETypes	LLVMContextImpl.h	/^    ArrayRef<Type*> ETypes;$/;"	m	struct:llvm::AnonStructTypeKeyInfo::KeyTy
Equals	LLVMContextImpl.h	/^  static bool Equals(const MDNode &X, const FoldingSetNodeID &ID,$/;"	f	struct:llvm::FoldingSetTrait
Executions	PassManager.cpp	/^  None, Arguments, Structure, Executions, Details$/;"	e	enum:llvm::PassDebugLevel	file:
ExprConstants	LLVMContextImpl.h	/^    ExprConstants;$/;"	m	class:llvm::LLVMContextImpl
ExprMapKeyType	ConstantsContext.h	/^  ExprMapKeyType(unsigned opc,$/;"	f	struct:llvm::ExprMapKeyType
ExprMapKeyType	ConstantsContext.h	/^struct ExprMapKeyType {$/;"	s	namespace:llvm
ExtractConstantBytes	ConstantFold.cpp	/^static Constant *ExtractConstantBytes(Constant *C, unsigned ByteStart,$/;"	f	file:
ExtractElementConstantExpr	ConstantsContext.h	/^  ExtractElementConstantExpr(Constant *C1, Constant *C2)$/;"	f	class:llvm::ExtractElementConstantExpr
ExtractElementConstantExpr	ConstantsContext.h	/^class ExtractElementConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
ExtractElementInst	Instructions.cpp	/^ExtractElementInst::ExtractElementInst(Value *Val, Value *Index,$/;"	f	class:ExtractElementInst
ExtractValueConstantExpr	ConstantsContext.h	/^  ExtractValueConstantExpr(Constant *Agg,$/;"	f	class:llvm::ExtractValueConstantExpr
ExtractValueConstantExpr	ConstantsContext.h	/^class ExtractValueConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
ExtractValueInst	Instructions.cpp	/^ExtractValueInst::ExtractValueInst(const ExtractValueInst &EVI)$/;"	f	class:ExtractValueInst
FP128Ty	LLVMContextImpl.h	/^  Type X86_FP80Ty, FP128Ty, PPC_FP128Ty, X86_MMXTy;$/;"	m	class:llvm::LLVMContextImpl
FPConstants	LLVMContextImpl.h	/^  FPMapTy FPConstants;$/;"	m	class:llvm::LLVMContextImpl
FPExtInst	Instructions.cpp	/^FPExtInst::FPExtInst($/;"	f	class:FPExtInst
FPMapTy	LLVMContextImpl.h	/^                         DenseMapAPFloatKeyInfo> FPMapTy;$/;"	t	class:llvm::LLVMContextImpl
FPToSIInst	Instructions.cpp	/^FPToSIInst::FPToSIInst($/;"	f	class:FPToSIInst
FPToUIInst	Instructions.cpp	/^FPToUIInst::FPToUIInst($/;"	f	class:FPToUIInst
FPTruncInst	Instructions.cpp	/^FPTruncInst::FPTruncInst($/;"	f	class:FPTruncInst
FenceInst	Instructions.cpp	/^FenceInst::FenceInst(LLVMContext &C, AtomicOrdering Ordering, $/;"	f	class:FenceInst
FindExistingElement	ConstantsContext.h	/^  typename MapTy::iterator FindExistingElement(ConstantClass *CP) {$/;"	f	class:llvm::ConstantUniqueMap
FloatTy	LLVMContextImpl.h	/^  Type VoidTy, LabelTy, HalfTy, FloatTy, DoubleTy, MetadataTy;$/;"	m	class:llvm::LLVMContextImpl
FoldBitCast	ConstantFold.cpp	/^static Constant *FoldBitCast(Constant *V, Type *DestTy) {$/;"	f	file:
FoldingSetTrait	LLVMContextImpl.h	/^template<> struct FoldingSetTrait<MDNode> : DefaultFoldingSetTrait<MDNode> {$/;"	s	namespace:llvm
Function	Function.cpp	/^Function::Function(FunctionType *Ty, LinkageTypes Linkage,$/;"	f	class:Function
FunctionPassManager	PassManager.cpp	/^FunctionPassManager::FunctionPassManager(Module *m) : M(m) {$/;"	f	class:FunctionPassManager
FunctionPassManagerImpl	PassManager.cpp	/^  explicit FunctionPassManagerImpl() :$/;"	f	class:llvm::FunctionPassManagerImpl
FunctionPassManagerImpl	PassManager.cpp	/^class FunctionPassManagerImpl : public Pass,$/;"	c	namespace:llvm	file:
FunctionProcessed	AsmWriter.cpp	/^  bool FunctionProcessed;$/;"	m	class:__anon2::SlotTracker	file:
FunctionType	Type.cpp	/^FunctionType::FunctionType(Type *Result, ArrayRef<Type*> Params,$/;"	f	class:FunctionType
FunctionTypeKeyInfo	LLVMContextImpl.h	/^struct FunctionTypeKeyInfo {$/;"	s	namespace:llvm
FunctionTypeMap	LLVMContextImpl.h	/^  typedef DenseMap<FunctionType*, bool, FunctionTypeKeyInfo> FunctionTypeMap;$/;"	t	class:llvm::LLVMContextImpl
FunctionTypes	LLVMContextImpl.h	/^  FunctionTypeMap FunctionTypes;$/;"	m	class:llvm::LLVMContextImpl
GCLock	Function.cpp	/^static ManagedStatic<sys::SmartRWMutex<true> > GCLock;$/;"	v	file:
GCNamePool	Function.cpp	/^static StringPool *GCNamePool;$/;"	v	file:
GCNames	Function.cpp	/^static DenseMap<const Function*,PooledStringPtr> *GCNames;$/;"	v	file:
GENFILE	Makefile	/^GENFILE:=$(PROJ_OBJ_ROOT)\/include\/llvm\/Intrinsics.gen$/;"	m
GET_FUNCTION_RECOGNIZER	Function.cpp	337;"	d	file:
GET_FUNCTION_RECOGNIZER	Function.cpp	339;"	d	file:
GET_INTRINSIC_ATTRIBUTES	Function.cpp	607;"	d	file:
GET_INTRINSIC_ATTRIBUTES	Function.cpp	609;"	d	file:
GET_INTRINSIC_GENERATOR_GLOBAL	Function.cpp	504;"	d	file:
GET_INTRINSIC_GENERATOR_GLOBAL	Function.cpp	506;"	d	file:
GET_INTRINSIC_NAME_TABLE	Function.cpp	347;"	d	file:
GET_INTRINSIC_NAME_TABLE	Function.cpp	349;"	d	file:
GET_INTRINSIC_OVERLOAD_TABLE	Function.cpp	601;"	d	file:
GET_INTRINSIC_OVERLOAD_TABLE	Function.cpp	603;"	d	file:
GET_LLVM_INTRINSIC_FOR_GCC_BUILTIN	Function.cpp	620;"	d	file:
GET_LLVM_INTRINSIC_FOR_GCC_BUILTIN	Function.cpp	622;"	d	file:
GetCFGOnlyPasses	Pass.cpp	/^    GetCFGOnlyPasses(VectorType &L) : CFGOnlyList(L) {}$/;"	f	struct:__anon6::GetCFGOnlyPasses
GetCFGOnlyPasses	Pass.cpp	/^  struct GetCFGOnlyPasses : public PassRegistrationListener {$/;"	s	namespace:__anon6	file:
GetElementPtrConstantExpr	Constants.cpp	/^GetElementPtrConstantExpr(Constant *C, ArrayRef<Constant*> IdxList,$/;"	f	class:GetElementPtrConstantExpr
GetElementPtrConstantExpr	ConstantsContext.h	/^class GetElementPtrConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
GetElementPtrInst	Instructions.cpp	/^GetElementPtrInst::GetElementPtrInst(const GetElementPtrInst &GEPI)$/;"	f	class:GetElementPtrInst
GetTagConstant	DIBuilder.cpp	/^static Constant *GetTagConstant(LLVMContext &VMContext, unsigned Tag) {$/;"	f	file:
GlobalAlias	Globals.cpp	/^GlobalAlias::GlobalAlias(Type *Ty, LinkageTypes Link,$/;"	f	class:GlobalAlias
GlobalContext	LLVMContext.cpp	/^static ManagedStatic<LLVMContext> GlobalContext;$/;"	v	file:
GlobalPrefix	AsmWriter.cpp	/^  GlobalPrefix,$/;"	e	enum:PrefixType	file:
GlobalVariable	Globals.cpp	/^GlobalVariable::GlobalVariable(Module &M, Type *Ty, bool constant,$/;"	f	class:GlobalVariable
GlobalVariable	Globals.cpp	/^GlobalVariable::GlobalVariable(Type *Ty, bool constant, LinkageTypes Link,$/;"	f	class:GlobalVariable
HANDLE_INST	Core.cpp	715;"	d	file:
HANDLE_INST	Core.cpp	717;"	d	file:
HANDLE_INST	Core.cpp	724;"	d	file:
HANDLE_INST	Core.cpp	726;"	d	file:
HalfTy	LLVMContextImpl.h	/^  Type VoidTy, LabelTy, HalfTy, FloatTy, DoubleTy, MetadataTy;$/;"	m	class:llvm::LLVMContextImpl
ID	DataLayout.cpp	/^char DataLayout::ID = 0;$/;"	m	class:DataLayout	file:
ID	Dominators.cpp	/^char DominatorTree::ID = 0;$/;"	m	class:DominatorTree	file:
ID	PassManager.cpp	/^  static char ID;$/;"	m	class:__anon7::BBPassManager	file:
ID	PassManager.cpp	/^  static char ID;$/;"	m	class:llvm::FunctionPassManagerImpl	file:
ID	PassManager.cpp	/^  static char ID;$/;"	m	class:llvm::MPPassManager	file:
ID	PassManager.cpp	/^  static char ID;$/;"	m	class:llvm::PassManagerImpl	file:
ID	PassManager.cpp	/^char BBPassManager::ID = 0;$/;"	m	class:__anon7::BBPassManager	file:
ID	PassManager.cpp	/^char FPPassManager::ID = 0;$/;"	m	class:FPPassManager	file:
ID	PassManager.cpp	/^char FunctionPassManagerImpl::ID = 0;$/;"	m	class:llvm::FunctionPassManagerImpl	file:
ID	PassManager.cpp	/^char MPPassManager::ID = 0;$/;"	m	class:llvm::MPPassManager	file:
ID	PassManager.cpp	/^char PassManagerImpl::ID = 0;$/;"	m	class:llvm::PassManagerImpl	file:
ID	PrintModulePass.cpp	/^    static char ID;$/;"	m	class:__anon10::PrintFunctionPass	file:
ID	PrintModulePass.cpp	/^    static char ID;$/;"	m	class:__anon10::PrintModulePass	file:
ID	PrintModulePass.cpp	/^char PrintFunctionPass::ID = 0;$/;"	m	class:PrintFunctionPass	file:
ID	PrintModulePass.cpp	/^char PrintModulePass::ID = 0;$/;"	m	class:PrintModulePass	file:
ID	TargetTransformInfo.cpp	/^char TargetTransformInfo::ID = 0;$/;"	m	class:TargetTransformInfo	file:
ID	Verifier.cpp	/^    static char ID; \/\/ Pass ID, replacement for typeid$/;"	m	struct:__anon12::PreVerifier	file:
ID	Verifier.cpp	/^    static char ID; \/\/ Pass ID, replacement for typeid$/;"	m	struct:__anon13::Verifier	file:
ID	Verifier.cpp	/^char PreVerifier::ID = 0;$/;"	m	class:PreVerifier	file:
ID	Verifier.cpp	/^char Verifier::ID = 0;$/;"	m	class:Verifier	file:
IIT_ANYPTR	Function.cpp	/^  IIT_ANYPTR = 24$/;"	e	enum:IIT_Info	file:
IIT_ARG	Function.cpp	/^  IIT_ARG  = 15,$/;"	e	enum:IIT_Info	file:
IIT_Done	Function.cpp	/^  IIT_Done = 0,$/;"	e	enum:IIT_Info	file:
IIT_EMPTYSTRUCT	Function.cpp	/^  IIT_EMPTYSTRUCT = 17,$/;"	e	enum:IIT_Info	file:
IIT_EXTEND_VEC_ARG	Function.cpp	/^  IIT_EXTEND_VEC_ARG = 22,$/;"	e	enum:IIT_Info	file:
IIT_F32	Function.cpp	/^  IIT_F32  = 6,$/;"	e	enum:IIT_Info	file:
IIT_F64	Function.cpp	/^  IIT_F64  = 7,$/;"	e	enum:IIT_Info	file:
IIT_I1	Function.cpp	/^  IIT_I1   = 1,$/;"	e	enum:IIT_Info	file:
IIT_I16	Function.cpp	/^  IIT_I16  = 3,$/;"	e	enum:IIT_Info	file:
IIT_I32	Function.cpp	/^  IIT_I32  = 4,$/;"	e	enum:IIT_Info	file:
IIT_I64	Function.cpp	/^  IIT_I64  = 5,$/;"	e	enum:IIT_Info	file:
IIT_I8	Function.cpp	/^  IIT_I8   = 2,$/;"	e	enum:IIT_Info	file:
IIT_Info	Function.cpp	/^enum IIT_Info {$/;"	g	file:
IIT_METADATA	Function.cpp	/^  IIT_METADATA = 16,$/;"	e	enum:IIT_Info	file:
IIT_MMX	Function.cpp	/^  IIT_MMX  = 13,$/;"	e	enum:IIT_Info	file:
IIT_PTR	Function.cpp	/^  IIT_PTR  = 14,$/;"	e	enum:IIT_Info	file:
IIT_STRUCT2	Function.cpp	/^  IIT_STRUCT2 = 18,$/;"	e	enum:IIT_Info	file:
IIT_STRUCT3	Function.cpp	/^  IIT_STRUCT3 = 19,$/;"	e	enum:IIT_Info	file:
IIT_STRUCT4	Function.cpp	/^  IIT_STRUCT4 = 20,$/;"	e	enum:IIT_Info	file:
IIT_STRUCT5	Function.cpp	/^  IIT_STRUCT5 = 21,$/;"	e	enum:IIT_Info	file:
IIT_TRUNC_VEC_ARG	Function.cpp	/^  IIT_TRUNC_VEC_ARG = 23,$/;"	e	enum:IIT_Info	file:
IIT_V16	Function.cpp	/^  IIT_V16  = 11,$/;"	e	enum:IIT_Info	file:
IIT_V2	Function.cpp	/^  IIT_V2   = 8,$/;"	e	enum:IIT_Info	file:
IIT_V32	Function.cpp	/^  IIT_V32  = 12,$/;"	e	enum:IIT_Info	file:
IIT_V4	Function.cpp	/^  IIT_V4   = 9,$/;"	e	enum:IIT_Info	file:
IIT_V8	Function.cpp	/^  IIT_V8   = 10,$/;"	e	enum:IIT_Info	file:
INTRINSICTD	Makefile	/^INTRINSICTD  := $(PROJ_SRC_ROOT)\/include\/llvm\/Intrinsics.td$/;"	m
INTRINSICTDS	Makefile	/^INTRINSICTDS := $(wildcard $(PROJ_SRC_ROOT)\/include\/llvm\/Intrinsics*.td)$/;"	m
Idx	LLVMContextImpl.h	/^  int Idx;$/;"	m	class:llvm::DebugRecVH
IdxCompare	ConstantFold.cpp	/^static int IdxCompare(Constant *C1, Constant *C2, Type *ElTy) {$/;"	f	file:
Implementations	PassRegistry.cpp	/^    SmallPtrSet<const PassInfo *, 8> Implementations;$/;"	m	struct:__anon9::PassRegistryImpl::AnalysisGroupInfo	file:
Indices	ConstantsContext.h	/^  const SmallVector<unsigned, 4> Indices;$/;"	m	class:llvm::ExtractValueConstantExpr
Indices	ConstantsContext.h	/^  const SmallVector<unsigned, 4> Indices;$/;"	m	class:llvm::InsertValueConstantExpr
IndirectBrInst	Instructions.cpp	/^IndirectBrInst::IndirectBrInst(Value *Address, unsigned NumCases,$/;"	f	class:IndirectBrInst
IndirectBrInst	Instructions.cpp	/^IndirectBrInst::IndirectBrInst(const IndirectBrInst &IBI)$/;"	f	class:IndirectBrInst
Init	Instructions.cpp	/^void AtomicCmpXchgInst::Init(Value *Ptr, Value *Cmp, Value *NewVal,$/;"	f	class:AtomicCmpXchgInst
Init	Instructions.cpp	/^void AtomicRMWInst::Init(BinOp Operation, Value *Ptr, Value *Val,$/;"	f	class:AtomicRMWInst
InlineAsm	InlineAsm.cpp	/^InlineAsm::InlineAsm(PointerType *Ty, const std::string &asmString,$/;"	f	class:InlineAsm
InlineAsmDiagContext	LLVMContextImpl.h	/^  void *InlineAsmDiagContext;$/;"	m	class:llvm::LLVMContextImpl
InlineAsmDiagHandler	LLVMContextImpl.h	/^  LLVMContext::InlineAsmDiagHandlerTy InlineAsmDiagHandler;$/;"	m	class:llvm::LLVMContextImpl
InlineAsmKeyType	ConstantsContext.h	/^  InlineAsmKeyType(StringRef AsmString,$/;"	f	struct:llvm::InlineAsmKeyType
InlineAsmKeyType	ConstantsContext.h	/^struct InlineAsmKeyType {$/;"	s	namespace:llvm
InlineAsms	LLVMContextImpl.h	/^                    InlineAsm> InlineAsms;$/;"	m	class:llvm::LLVMContextImpl
InsertElementConstantExpr	ConstantsContext.h	/^  InsertElementConstantExpr(Constant *C1, Constant *C2, Constant *C3)$/;"	f	class:llvm::InsertElementConstantExpr
InsertElementConstantExpr	ConstantsContext.h	/^class InsertElementConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
InsertElementInst	Instructions.cpp	/^InsertElementInst::InsertElementInst(Value *Vec, Value *Elt, Value *Index,$/;"	f	class:InsertElementInst
InsertOrGetItem	ConstantsContext.h	/^  typename MapTy::iterator InsertOrGetItem(std::pair<MapKey, ConstantClass *>$/;"	f	class:llvm::ConstantUniqueMap
InsertValueConstantExpr	ConstantsContext.h	/^  InsertValueConstantExpr(Constant *Agg, Constant *Val,$/;"	f	class:llvm::InsertValueConstantExpr
InsertValueConstantExpr	ConstantsContext.h	/^class InsertValueConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
InsertValueInst	Instructions.cpp	/^InsertValueInst::InsertValueInst(const InsertValueInst &IVI)$/;"	f	class:InsertValueInst
Instruction	Instruction.cpp	/^Instruction::Instruction(Type *ty, unsigned it, Use *Ops, unsigned NumOps,$/;"	f	class:Instruction
InstsInThisBlock	Verifier.cpp	/^    SmallPtrSet<Instruction*, 16> InstsInThisBlock;$/;"	m	struct:__anon13::Verifier	file:
Int16Ty	LLVMContextImpl.h	/^  IntegerType Int1Ty, Int8Ty, Int16Ty, Int32Ty, Int64Ty;$/;"	m	class:llvm::LLVMContextImpl
Int1Ty	LLVMContextImpl.h	/^  IntegerType Int1Ty, Int8Ty, Int16Ty, Int32Ty, Int64Ty;$/;"	m	class:llvm::LLVMContextImpl
Int32Ty	LLVMContextImpl.h	/^  IntegerType Int1Ty, Int8Ty, Int16Ty, Int32Ty, Int64Ty;$/;"	m	class:llvm::LLVMContextImpl
Int64Ty	LLVMContextImpl.h	/^  IntegerType Int1Ty, Int8Ty, Int16Ty, Int32Ty, Int64Ty;$/;"	m	class:llvm::LLVMContextImpl
Int8Ty	LLVMContextImpl.h	/^  IntegerType Int1Ty, Int8Ty, Int16Ty, Int32Ty, Int64Ty;$/;"	m	class:llvm::LLVMContextImpl
IntConstants	LLVMContextImpl.h	/^  IntMapTy IntConstants;$/;"	m	class:llvm::LLVMContextImpl
IntMapTy	LLVMContextImpl.h	/^                         DenseMapAPIntKeyInfo> IntMapTy;$/;"	t	class:llvm::LLVMContextImpl
IntToPtrInst	Instructions.cpp	/^IntToPtrInst::IntToPtrInst($/;"	f	class:IntToPtrInst
IntegerTypes	LLVMContextImpl.h	/^  DenseMap<unsigned, IntegerType*> IntegerTypes;$/;"	m	class:llvm::LLVMContextImpl
InvalidAlignmentElem	DataLayout.cpp	/^DataLayout::InvalidAlignmentElem =$/;"	m	class:DataLayout	file:
InvalidPointerElem	DataLayout.cpp	/^DataLayout::InvalidPointerElem = PointerAlignElem::get(~0U, 0U, 0U, 0U);$/;"	m	class:DataLayout	file:
InverseMap	ConstantsContext.h	/^  InverseMapTy InverseMap;$/;"	m	class:llvm::ConstantUniqueMap
InverseMapTy	ConstantsContext.h	/^  typedef std::map<ConstantClass *, typename MapTy::iterator> InverseMapTy;$/;"	t	class:llvm::ConstantUniqueMap
InvokeInst	Instructions.cpp	/^InvokeInst::InvokeInst(const InvokeInst &II)$/;"	f	class:InvokeInst
IsConstantOne	Instructions.cpp	/^static bool IsConstantOne(Value *val) {$/;"	f	file:
KeyTy	LLVMContextImpl.h	/^    KeyTy(const APFloat& V) : val(V){}$/;"	f	struct:llvm::DenseMapAPFloatKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^    KeyTy(const APInt& V, Type* Ty) : val(V), type(Ty) {}$/;"	f	struct:llvm::DenseMapAPIntKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^    KeyTy(const ArrayRef<Type*>& E, bool P) :$/;"	f	struct:llvm::AnonStructTypeKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^    KeyTy(const FunctionType* FT) :$/;"	f	struct:llvm::FunctionTypeKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^    KeyTy(const KeyTy& that) : val(that.val) {}$/;"	f	struct:llvm::DenseMapAPFloatKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^    KeyTy(const KeyTy& that) : val(that.val), type(that.type) {}$/;"	f	struct:llvm::DenseMapAPIntKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^    KeyTy(const KeyTy& that) :$/;"	f	struct:llvm::AnonStructTypeKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^    KeyTy(const KeyTy& that) :$/;"	f	struct:llvm::FunctionTypeKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^    KeyTy(const StructType* ST) :$/;"	f	struct:llvm::AnonStructTypeKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^    KeyTy(const Type* R, const ArrayRef<Type*>& P, bool V) :$/;"	f	struct:llvm::FunctionTypeKeyInfo::KeyTy
KeyTy	LLVMContextImpl.h	/^  struct KeyTy {$/;"	s	struct:llvm::AnonStructTypeKeyInfo
KeyTy	LLVMContextImpl.h	/^  struct KeyTy {$/;"	s	struct:llvm::DenseMapAPFloatKeyInfo
KeyTy	LLVMContextImpl.h	/^  struct KeyTy {$/;"	s	struct:llvm::DenseMapAPIntKeyInfo
KeyTy	LLVMContextImpl.h	/^  struct KeyTy {$/;"	s	struct:llvm::FunctionTypeKeyInfo
LEVEL	Makefile	/^LEVEL = ..\/..$/;"	m
LIBRARYNAME	Makefile	/^LIBRARYNAME = LLVMCore$/;"	m
LLVMAddAlias	Core.cpp	/^LLVMValueRef LLVMAddAlias(LLVMModuleRef M, LLVMTypeRef Ty, LLVMValueRef Aliasee,$/;"	f
LLVMAddAttribute	Core.cpp	/^void LLVMAddAttribute(LLVMValueRef Arg, LLVMAttribute PA) {$/;"	f
LLVMAddCase	Core.cpp	/^void LLVMAddCase(LLVMValueRef Switch, LLVMValueRef OnVal,$/;"	f
LLVMAddClause	Core.cpp	/^void LLVMAddClause(LLVMValueRef LandingPad, LLVMValueRef ClauseVal) {$/;"	f
LLVMAddDestination	Core.cpp	/^void LLVMAddDestination(LLVMValueRef IndirectBr, LLVMBasicBlockRef Dest) {$/;"	f
LLVMAddFunction	Core.cpp	/^LLVMValueRef LLVMAddFunction(LLVMModuleRef M, const char *Name,$/;"	f
LLVMAddFunctionAttr	Core.cpp	/^void LLVMAddFunctionAttr(LLVMValueRef Fn, LLVMAttribute PA) {$/;"	f
LLVMAddGlobal	Core.cpp	/^LLVMValueRef LLVMAddGlobal(LLVMModuleRef M, LLVMTypeRef Ty, const char *Name) {$/;"	f
LLVMAddGlobalInAddressSpace	Core.cpp	/^LLVMValueRef LLVMAddGlobalInAddressSpace(LLVMModuleRef M, LLVMTypeRef Ty,$/;"	f
LLVMAddIncoming	Core.cpp	/^void LLVMAddIncoming(LLVMValueRef PhiNode, LLVMValueRef *IncomingValues,$/;"	f
LLVMAddInstrAttribute	Core.cpp	/^void LLVMAddInstrAttribute(LLVMValueRef Instr, unsigned index, $/;"	f
LLVMAddNamedMetadataOperand	Core.cpp	/^void LLVMAddNamedMetadataOperand(LLVMModuleRef M, const char* name,$/;"	f
LLVMAlignOf	Core.cpp	/^LLVMValueRef LLVMAlignOf(LLVMTypeRef Ty) {$/;"	f
LLVMAppendBasicBlock	Core.cpp	/^LLVMBasicBlockRef LLVMAppendBasicBlock(LLVMValueRef FnRef, const char *Name) {$/;"	f
LLVMAppendBasicBlockInContext	Core.cpp	/^LLVMBasicBlockRef LLVMAppendBasicBlockInContext(LLVMContextRef C,$/;"	f
LLVMArrayType	Core.cpp	/^LLVMTypeRef LLVMArrayType(LLVMTypeRef ElementType, unsigned ElementCount) {$/;"	f
LLVMBasicBlockAsValue	Core.cpp	/^LLVMValueRef LLVMBasicBlockAsValue(LLVMBasicBlockRef BB) {$/;"	f
LLVMBlockAddress	Core.cpp	/^LLVMValueRef LLVMBlockAddress(LLVMValueRef F, LLVMBasicBlockRef BB) {$/;"	f
LLVMBuildAShr	Core.cpp	/^LLVMValueRef LLVMBuildAShr(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildAdd	Core.cpp	/^LLVMValueRef LLVMBuildAdd(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildAggregateRet	Core.cpp	/^LLVMValueRef LLVMBuildAggregateRet(LLVMBuilderRef B, LLVMValueRef *RetVals,$/;"	f
LLVMBuildAlloca	Core.cpp	/^LLVMValueRef LLVMBuildAlloca(LLVMBuilderRef B, LLVMTypeRef Ty,$/;"	f
LLVMBuildAnd	Core.cpp	/^LLVMValueRef LLVMBuildAnd(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildArrayAlloca	Core.cpp	/^LLVMValueRef LLVMBuildArrayAlloca(LLVMBuilderRef B, LLVMTypeRef Ty,$/;"	f
LLVMBuildArrayMalloc	Core.cpp	/^LLVMValueRef LLVMBuildArrayMalloc(LLVMBuilderRef B, LLVMTypeRef Ty,$/;"	f
LLVMBuildBinOp	Core.cpp	/^LLVMValueRef LLVMBuildBinOp(LLVMBuilderRef B, LLVMOpcode Op,$/;"	f
LLVMBuildBitCast	Core.cpp	/^LLVMValueRef LLVMBuildBitCast(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildBr	Core.cpp	/^LLVMValueRef LLVMBuildBr(LLVMBuilderRef B, LLVMBasicBlockRef Dest) {$/;"	f
LLVMBuildCall	Core.cpp	/^LLVMValueRef LLVMBuildCall(LLVMBuilderRef B, LLVMValueRef Fn,$/;"	f
LLVMBuildCast	Core.cpp	/^LLVMValueRef LLVMBuildCast(LLVMBuilderRef B, LLVMOpcode Op, LLVMValueRef Val,$/;"	f
LLVMBuildCondBr	Core.cpp	/^LLVMValueRef LLVMBuildCondBr(LLVMBuilderRef B, LLVMValueRef If,$/;"	f
LLVMBuildExactSDiv	Core.cpp	/^LLVMValueRef LLVMBuildExactSDiv(LLVMBuilderRef B, LLVMValueRef LHS,$/;"	f
LLVMBuildExtractElement	Core.cpp	/^LLVMValueRef LLVMBuildExtractElement(LLVMBuilderRef B, LLVMValueRef VecVal,$/;"	f
LLVMBuildExtractValue	Core.cpp	/^LLVMValueRef LLVMBuildExtractValue(LLVMBuilderRef B, LLVMValueRef AggVal,$/;"	f
LLVMBuildFAdd	Core.cpp	/^LLVMValueRef LLVMBuildFAdd(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildFCmp	Core.cpp	/^LLVMValueRef LLVMBuildFCmp(LLVMBuilderRef B, LLVMRealPredicate Op,$/;"	f
LLVMBuildFDiv	Core.cpp	/^LLVMValueRef LLVMBuildFDiv(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildFMul	Core.cpp	/^LLVMValueRef LLVMBuildFMul(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildFNeg	Core.cpp	/^LLVMValueRef LLVMBuildFNeg(LLVMBuilderRef B, LLVMValueRef V, const char *Name) {$/;"	f
LLVMBuildFPCast	Core.cpp	/^LLVMValueRef LLVMBuildFPCast(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildFPExt	Core.cpp	/^LLVMValueRef LLVMBuildFPExt(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildFPToSI	Core.cpp	/^LLVMValueRef LLVMBuildFPToSI(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildFPToUI	Core.cpp	/^LLVMValueRef LLVMBuildFPToUI(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildFPTrunc	Core.cpp	/^LLVMValueRef LLVMBuildFPTrunc(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildFRem	Core.cpp	/^LLVMValueRef LLVMBuildFRem(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildFSub	Core.cpp	/^LLVMValueRef LLVMBuildFSub(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildFree	Core.cpp	/^LLVMValueRef LLVMBuildFree(LLVMBuilderRef B, LLVMValueRef PointerVal) {$/;"	f
LLVMBuildGEP	Core.cpp	/^LLVMValueRef LLVMBuildGEP(LLVMBuilderRef B, LLVMValueRef Pointer,$/;"	f
LLVMBuildGlobalString	Core.cpp	/^LLVMValueRef LLVMBuildGlobalString(LLVMBuilderRef B, const char *Str,$/;"	f
LLVMBuildGlobalStringPtr	Core.cpp	/^LLVMValueRef LLVMBuildGlobalStringPtr(LLVMBuilderRef B, const char *Str,$/;"	f
LLVMBuildICmp	Core.cpp	/^LLVMValueRef LLVMBuildICmp(LLVMBuilderRef B, LLVMIntPredicate Op,$/;"	f
LLVMBuildInBoundsGEP	Core.cpp	/^LLVMValueRef LLVMBuildInBoundsGEP(LLVMBuilderRef B, LLVMValueRef Pointer,$/;"	f
LLVMBuildIndirectBr	Core.cpp	/^LLVMValueRef LLVMBuildIndirectBr(LLVMBuilderRef B, LLVMValueRef Addr,$/;"	f
LLVMBuildInsertElement	Core.cpp	/^LLVMValueRef LLVMBuildInsertElement(LLVMBuilderRef B, LLVMValueRef VecVal,$/;"	f
LLVMBuildInsertValue	Core.cpp	/^LLVMValueRef LLVMBuildInsertValue(LLVMBuilderRef B, LLVMValueRef AggVal,$/;"	f
LLVMBuildIntCast	Core.cpp	/^LLVMValueRef LLVMBuildIntCast(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildIntToPtr	Core.cpp	/^LLVMValueRef LLVMBuildIntToPtr(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildInvoke	Core.cpp	/^LLVMValueRef LLVMBuildInvoke(LLVMBuilderRef B, LLVMValueRef Fn,$/;"	f
LLVMBuildIsNotNull	Core.cpp	/^LLVMValueRef LLVMBuildIsNotNull(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildIsNull	Core.cpp	/^LLVMValueRef LLVMBuildIsNull(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildLShr	Core.cpp	/^LLVMValueRef LLVMBuildLShr(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildLandingPad	Core.cpp	/^LLVMValueRef LLVMBuildLandingPad(LLVMBuilderRef B, LLVMTypeRef Ty,$/;"	f
LLVMBuildLoad	Core.cpp	/^LLVMValueRef LLVMBuildLoad(LLVMBuilderRef B, LLVMValueRef PointerVal,$/;"	f
LLVMBuildMalloc	Core.cpp	/^LLVMValueRef LLVMBuildMalloc(LLVMBuilderRef B, LLVMTypeRef Ty,$/;"	f
LLVMBuildMul	Core.cpp	/^LLVMValueRef LLVMBuildMul(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildNSWAdd	Core.cpp	/^LLVMValueRef LLVMBuildNSWAdd(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildNSWMul	Core.cpp	/^LLVMValueRef LLVMBuildNSWMul(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildNSWNeg	Core.cpp	/^LLVMValueRef LLVMBuildNSWNeg(LLVMBuilderRef B, LLVMValueRef V,$/;"	f
LLVMBuildNSWSub	Core.cpp	/^LLVMValueRef LLVMBuildNSWSub(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildNUWAdd	Core.cpp	/^LLVMValueRef LLVMBuildNUWAdd(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildNUWMul	Core.cpp	/^LLVMValueRef LLVMBuildNUWMul(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildNUWNeg	Core.cpp	/^LLVMValueRef LLVMBuildNUWNeg(LLVMBuilderRef B, LLVMValueRef V,$/;"	f
LLVMBuildNUWSub	Core.cpp	/^LLVMValueRef LLVMBuildNUWSub(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildNeg	Core.cpp	/^LLVMValueRef LLVMBuildNeg(LLVMBuilderRef B, LLVMValueRef V, const char *Name) {$/;"	f
LLVMBuildNot	Core.cpp	/^LLVMValueRef LLVMBuildNot(LLVMBuilderRef B, LLVMValueRef V, const char *Name) {$/;"	f
LLVMBuildOr	Core.cpp	/^LLVMValueRef LLVMBuildOr(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildPhi	Core.cpp	/^LLVMValueRef LLVMBuildPhi(LLVMBuilderRef B, LLVMTypeRef Ty, const char *Name) {$/;"	f
LLVMBuildPointerCast	Core.cpp	/^LLVMValueRef LLVMBuildPointerCast(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildPtrDiff	Core.cpp	/^LLVMValueRef LLVMBuildPtrDiff(LLVMBuilderRef B, LLVMValueRef LHS,$/;"	f
LLVMBuildPtrToInt	Core.cpp	/^LLVMValueRef LLVMBuildPtrToInt(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildResume	Core.cpp	/^LLVMValueRef LLVMBuildResume(LLVMBuilderRef B, LLVMValueRef Exn) {$/;"	f
LLVMBuildRet	Core.cpp	/^LLVMValueRef LLVMBuildRet(LLVMBuilderRef B, LLVMValueRef V) {$/;"	f
LLVMBuildRetVoid	Core.cpp	/^LLVMValueRef LLVMBuildRetVoid(LLVMBuilderRef B) {$/;"	f
LLVMBuildSDiv	Core.cpp	/^LLVMValueRef LLVMBuildSDiv(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildSExt	Core.cpp	/^LLVMValueRef LLVMBuildSExt(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildSExtOrBitCast	Core.cpp	/^LLVMValueRef LLVMBuildSExtOrBitCast(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildSIToFP	Core.cpp	/^LLVMValueRef LLVMBuildSIToFP(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildSRem	Core.cpp	/^LLVMValueRef LLVMBuildSRem(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildSelect	Core.cpp	/^LLVMValueRef LLVMBuildSelect(LLVMBuilderRef B, LLVMValueRef If,$/;"	f
LLVMBuildShl	Core.cpp	/^LLVMValueRef LLVMBuildShl(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildShuffleVector	Core.cpp	/^LLVMValueRef LLVMBuildShuffleVector(LLVMBuilderRef B, LLVMValueRef V1,$/;"	f
LLVMBuildStore	Core.cpp	/^LLVMValueRef LLVMBuildStore(LLVMBuilderRef B, LLVMValueRef Val, $/;"	f
LLVMBuildStructGEP	Core.cpp	/^LLVMValueRef LLVMBuildStructGEP(LLVMBuilderRef B, LLVMValueRef Pointer,$/;"	f
LLVMBuildSub	Core.cpp	/^LLVMValueRef LLVMBuildSub(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildSwitch	Core.cpp	/^LLVMValueRef LLVMBuildSwitch(LLVMBuilderRef B, LLVMValueRef V,$/;"	f
LLVMBuildTrunc	Core.cpp	/^LLVMValueRef LLVMBuildTrunc(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildTruncOrBitCast	Core.cpp	/^LLVMValueRef LLVMBuildTruncOrBitCast(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildUDiv	Core.cpp	/^LLVMValueRef LLVMBuildUDiv(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildUIToFP	Core.cpp	/^LLVMValueRef LLVMBuildUIToFP(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildURem	Core.cpp	/^LLVMValueRef LLVMBuildURem(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildUnreachable	Core.cpp	/^LLVMValueRef LLVMBuildUnreachable(LLVMBuilderRef B) {$/;"	f
LLVMBuildVAArg	Core.cpp	/^LLVMValueRef LLVMBuildVAArg(LLVMBuilderRef B, LLVMValueRef List,$/;"	f
LLVMBuildXor	Core.cpp	/^LLVMValueRef LLVMBuildXor(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS,$/;"	f
LLVMBuildZExt	Core.cpp	/^LLVMValueRef LLVMBuildZExt(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMBuildZExtOrBitCast	Core.cpp	/^LLVMValueRef LLVMBuildZExtOrBitCast(LLVMBuilderRef B, LLVMValueRef Val,$/;"	f
LLVMClearInsertionPosition	Core.cpp	/^void LLVMClearInsertionPosition(LLVMBuilderRef Builder) {$/;"	f
LLVMConstAShr	Core.cpp	/^LLVMValueRef LLVMConstAShr(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstAdd	Core.cpp	/^LLVMValueRef LLVMConstAdd(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstAllOnes	Core.cpp	/^LLVMValueRef LLVMConstAllOnes(LLVMTypeRef Ty) {$/;"	f
LLVMConstAnd	Core.cpp	/^LLVMValueRef LLVMConstAnd(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstArray	Core.cpp	/^LLVMValueRef LLVMConstArray(LLVMTypeRef ElementTy,$/;"	f
LLVMConstBitCast	Core.cpp	/^LLVMValueRef LLVMConstBitCast(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstExactSDiv	Core.cpp	/^LLVMValueRef LLVMConstExactSDiv(LLVMValueRef LHSConstant,$/;"	f
LLVMConstExtractElement	Core.cpp	/^LLVMValueRef LLVMConstExtractElement(LLVMValueRef VectorConstant,$/;"	f
LLVMConstExtractValue	Core.cpp	/^LLVMValueRef LLVMConstExtractValue(LLVMValueRef AggConstant, unsigned *IdxList,$/;"	f
LLVMConstFAdd	Core.cpp	/^LLVMValueRef LLVMConstFAdd(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstFCmp	Core.cpp	/^LLVMValueRef LLVMConstFCmp(LLVMRealPredicate Predicate,$/;"	f
LLVMConstFDiv	Core.cpp	/^LLVMValueRef LLVMConstFDiv(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstFMul	Core.cpp	/^LLVMValueRef LLVMConstFMul(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstFNeg	Core.cpp	/^LLVMValueRef LLVMConstFNeg(LLVMValueRef ConstantVal) {$/;"	f
LLVMConstFPCast	Core.cpp	/^LLVMValueRef LLVMConstFPCast(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstFPExt	Core.cpp	/^LLVMValueRef LLVMConstFPExt(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstFPToSI	Core.cpp	/^LLVMValueRef LLVMConstFPToSI(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstFPToUI	Core.cpp	/^LLVMValueRef LLVMConstFPToUI(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstFPTrunc	Core.cpp	/^LLVMValueRef LLVMConstFPTrunc(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstFRem	Core.cpp	/^LLVMValueRef LLVMConstFRem(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstFSub	Core.cpp	/^LLVMValueRef LLVMConstFSub(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstGEP	Core.cpp	/^LLVMValueRef LLVMConstGEP(LLVMValueRef ConstantVal,$/;"	f
LLVMConstICmp	Core.cpp	/^LLVMValueRef LLVMConstICmp(LLVMIntPredicate Predicate,$/;"	f
LLVMConstInBoundsGEP	Core.cpp	/^LLVMValueRef LLVMConstInBoundsGEP(LLVMValueRef ConstantVal,$/;"	f
LLVMConstInlineAsm	Core.cpp	/^LLVMValueRef LLVMConstInlineAsm(LLVMTypeRef Ty, const char *AsmString,$/;"	f
LLVMConstInsertElement	Core.cpp	/^LLVMValueRef LLVMConstInsertElement(LLVMValueRef VectorConstant,$/;"	f
LLVMConstInsertValue	Core.cpp	/^LLVMValueRef LLVMConstInsertValue(LLVMValueRef AggConstant,$/;"	f
LLVMConstInt	Core.cpp	/^LLVMValueRef LLVMConstInt(LLVMTypeRef IntTy, unsigned long long N,$/;"	f
LLVMConstIntCast	Core.cpp	/^LLVMValueRef LLVMConstIntCast(LLVMValueRef ConstantVal, LLVMTypeRef ToType,$/;"	f
LLVMConstIntGetSExtValue	Core.cpp	/^long long LLVMConstIntGetSExtValue(LLVMValueRef ConstantVal) {$/;"	f
LLVMConstIntGetZExtValue	Core.cpp	/^unsigned long long LLVMConstIntGetZExtValue(LLVMValueRef ConstantVal) {$/;"	f
LLVMConstIntOfArbitraryPrecision	Core.cpp	/^LLVMValueRef LLVMConstIntOfArbitraryPrecision(LLVMTypeRef IntTy,$/;"	f
LLVMConstIntOfString	Core.cpp	/^LLVMValueRef LLVMConstIntOfString(LLVMTypeRef IntTy, const char Str[],$/;"	f
LLVMConstIntOfStringAndSize	Core.cpp	/^LLVMValueRef LLVMConstIntOfStringAndSize(LLVMTypeRef IntTy, const char Str[],$/;"	f
LLVMConstIntToPtr	Core.cpp	/^LLVMValueRef LLVMConstIntToPtr(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstLShr	Core.cpp	/^LLVMValueRef LLVMConstLShr(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstMul	Core.cpp	/^LLVMValueRef LLVMConstMul(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstNSWAdd	Core.cpp	/^LLVMValueRef LLVMConstNSWAdd(LLVMValueRef LHSConstant,$/;"	f
LLVMConstNSWMul	Core.cpp	/^LLVMValueRef LLVMConstNSWMul(LLVMValueRef LHSConstant,$/;"	f
LLVMConstNSWNeg	Core.cpp	/^LLVMValueRef LLVMConstNSWNeg(LLVMValueRef ConstantVal) {$/;"	f
LLVMConstNSWSub	Core.cpp	/^LLVMValueRef LLVMConstNSWSub(LLVMValueRef LHSConstant,$/;"	f
LLVMConstNUWAdd	Core.cpp	/^LLVMValueRef LLVMConstNUWAdd(LLVMValueRef LHSConstant,$/;"	f
LLVMConstNUWMul	Core.cpp	/^LLVMValueRef LLVMConstNUWMul(LLVMValueRef LHSConstant,$/;"	f
LLVMConstNUWNeg	Core.cpp	/^LLVMValueRef LLVMConstNUWNeg(LLVMValueRef ConstantVal) {$/;"	f
LLVMConstNUWSub	Core.cpp	/^LLVMValueRef LLVMConstNUWSub(LLVMValueRef LHSConstant,$/;"	f
LLVMConstNamedStruct	Core.cpp	/^LLVMValueRef LLVMConstNamedStruct(LLVMTypeRef StructTy,$/;"	f
LLVMConstNeg	Core.cpp	/^LLVMValueRef LLVMConstNeg(LLVMValueRef ConstantVal) {$/;"	f
LLVMConstNot	Core.cpp	/^LLVMValueRef LLVMConstNot(LLVMValueRef ConstantVal) {$/;"	f
LLVMConstNull	Core.cpp	/^LLVMValueRef LLVMConstNull(LLVMTypeRef Ty) {$/;"	f
LLVMConstOr	Core.cpp	/^LLVMValueRef LLVMConstOr(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstPointerCast	Core.cpp	/^LLVMValueRef LLVMConstPointerCast(LLVMValueRef ConstantVal,$/;"	f
LLVMConstPointerNull	Core.cpp	/^LLVMValueRef LLVMConstPointerNull(LLVMTypeRef Ty) {$/;"	f
LLVMConstPtrToInt	Core.cpp	/^LLVMValueRef LLVMConstPtrToInt(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstReal	Core.cpp	/^LLVMValueRef LLVMConstReal(LLVMTypeRef RealTy, double N) {$/;"	f
LLVMConstRealOfString	Core.cpp	/^LLVMValueRef LLVMConstRealOfString(LLVMTypeRef RealTy, const char *Text) {$/;"	f
LLVMConstRealOfStringAndSize	Core.cpp	/^LLVMValueRef LLVMConstRealOfStringAndSize(LLVMTypeRef RealTy, const char Str[],$/;"	f
LLVMConstSDiv	Core.cpp	/^LLVMValueRef LLVMConstSDiv(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstSExt	Core.cpp	/^LLVMValueRef LLVMConstSExt(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstSExtOrBitCast	Core.cpp	/^LLVMValueRef LLVMConstSExtOrBitCast(LLVMValueRef ConstantVal,$/;"	f
LLVMConstSIToFP	Core.cpp	/^LLVMValueRef LLVMConstSIToFP(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstSRem	Core.cpp	/^LLVMValueRef LLVMConstSRem(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstSelect	Core.cpp	/^LLVMValueRef LLVMConstSelect(LLVMValueRef ConstantCondition,$/;"	f
LLVMConstShl	Core.cpp	/^LLVMValueRef LLVMConstShl(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstShuffleVector	Core.cpp	/^LLVMValueRef LLVMConstShuffleVector(LLVMValueRef VectorAConstant,$/;"	f
LLVMConstString	Core.cpp	/^LLVMValueRef LLVMConstString(const char *Str, unsigned Length,$/;"	f
LLVMConstStringInContext	Core.cpp	/^LLVMValueRef LLVMConstStringInContext(LLVMContextRef C, const char *Str,$/;"	f
LLVMConstStruct	Core.cpp	/^LLVMValueRef LLVMConstStruct(LLVMValueRef *ConstantVals, unsigned Count,$/;"	f
LLVMConstStructInContext	Core.cpp	/^LLVMValueRef LLVMConstStructInContext(LLVMContextRef C, $/;"	f
LLVMConstSub	Core.cpp	/^LLVMValueRef LLVMConstSub(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstTrunc	Core.cpp	/^LLVMValueRef LLVMConstTrunc(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstTruncOrBitCast	Core.cpp	/^LLVMValueRef LLVMConstTruncOrBitCast(LLVMValueRef ConstantVal,$/;"	f
LLVMConstUDiv	Core.cpp	/^LLVMValueRef LLVMConstUDiv(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstUIToFP	Core.cpp	/^LLVMValueRef LLVMConstUIToFP(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstURem	Core.cpp	/^LLVMValueRef LLVMConstURem(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstVector	Core.cpp	/^LLVMValueRef LLVMConstVector(LLVMValueRef *ScalarConstantVals, unsigned Size) {$/;"	f
LLVMConstXor	Core.cpp	/^LLVMValueRef LLVMConstXor(LLVMValueRef LHSConstant, LLVMValueRef RHSConstant) {$/;"	f
LLVMConstZExt	Core.cpp	/^LLVMValueRef LLVMConstZExt(LLVMValueRef ConstantVal, LLVMTypeRef ToType) {$/;"	f
LLVMConstZExtOrBitCast	Core.cpp	/^LLVMValueRef LLVMConstZExtOrBitCast(LLVMValueRef ConstantVal,$/;"	f
LLVMContext	LLVMContext.cpp	/^LLVMContext::LLVMContext() : pImpl(new LLVMContextImpl(*this)) {$/;"	f	class:LLVMContext
LLVMContextCreate	Core.cpp	/^LLVMContextRef LLVMContextCreate() {$/;"	f
LLVMContextDispose	Core.cpp	/^void LLVMContextDispose(LLVMContextRef C) {$/;"	f
LLVMContextImpl	LLVMContextImpl.cpp	/^LLVMContextImpl::LLVMContextImpl(LLVMContext &C)$/;"	f	class:LLVMContextImpl
LLVMContextImpl	LLVMContextImpl.h	/^class LLVMContextImpl {$/;"	c	namespace:llvm
LLVMCountBasicBlocks	Core.cpp	/^unsigned LLVMCountBasicBlocks(LLVMValueRef FnRef) {$/;"	f
LLVMCountIncoming	Core.cpp	/^unsigned LLVMCountIncoming(LLVMValueRef PhiNode) {$/;"	f
LLVMCountParamTypes	Core.cpp	/^unsigned LLVMCountParamTypes(LLVMTypeRef FunctionTy) {$/;"	f
LLVMCountParams	Core.cpp	/^unsigned LLVMCountParams(LLVMValueRef FnRef) {$/;"	f
LLVMCountStructElementTypes	Core.cpp	/^unsigned LLVMCountStructElementTypes(LLVMTypeRef StructTy) {$/;"	f
LLVMCreateBuilder	Core.cpp	/^LLVMBuilderRef LLVMCreateBuilder(void) {$/;"	f
LLVMCreateBuilderInContext	Core.cpp	/^LLVMBuilderRef LLVMCreateBuilderInContext(LLVMContextRef C) {$/;"	f
LLVMCreateFunctionPassManager	Core.cpp	/^LLVMPassManagerRef LLVMCreateFunctionPassManager(LLVMModuleProviderRef P) {$/;"	f
LLVMCreateFunctionPassManagerForModule	Core.cpp	/^LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule(LLVMModuleRef M) {$/;"	f
LLVMCreateMemoryBufferWithContentsOfFile	Core.cpp	/^LLVMBool LLVMCreateMemoryBufferWithContentsOfFile($/;"	f
LLVMCreateMemoryBufferWithSTDIN	Core.cpp	/^LLVMBool LLVMCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef *OutMemBuf,$/;"	f
LLVMCreateModuleProviderForExistingModule	Core.cpp	/^LLVMCreateModuleProviderForExistingModule(LLVMModuleRef M) {$/;"	f
LLVMCreatePassManager	Core.cpp	/^LLVMPassManagerRef LLVMCreatePassManager() {$/;"	f
LLVMDeleteBasicBlock	Core.cpp	/^void LLVMDeleteBasicBlock(LLVMBasicBlockRef BBRef) {$/;"	f
LLVMDeleteFunction	Core.cpp	/^void LLVMDeleteFunction(LLVMValueRef Fn) {$/;"	f
LLVMDeleteGlobal	Core.cpp	/^void LLVMDeleteGlobal(LLVMValueRef GlobalVar) {$/;"	f
LLVMDisposeBuilder	Core.cpp	/^void LLVMDisposeBuilder(LLVMBuilderRef Builder) {$/;"	f
LLVMDisposeMemoryBuffer	Core.cpp	/^void LLVMDisposeMemoryBuffer(LLVMMemoryBufferRef MemBuf) {$/;"	f
LLVMDisposeMessage	Core.cpp	/^void LLVMDisposeMessage(char *Message) {$/;"	f
LLVMDisposeModule	Core.cpp	/^void LLVMDisposeModule(LLVMModuleRef M) {$/;"	f
LLVMDisposeModuleProvider	Core.cpp	/^void LLVMDisposeModuleProvider(LLVMModuleProviderRef MP) {$/;"	f
LLVMDisposePassManager	Core.cpp	/^void LLVMDisposePassManager(LLVMPassManagerRef PM) {$/;"	f
LLVMDoubleType	Core.cpp	/^LLVMTypeRef LLVMDoubleType(void) {$/;"	f
LLVMDoubleTypeInContext	Core.cpp	/^LLVMTypeRef LLVMDoubleTypeInContext(LLVMContextRef C) {$/;"	f
LLVMDumpModule	Core.cpp	/^void LLVMDumpModule(LLVMModuleRef M) {$/;"	f
LLVMDumpValue	Core.cpp	/^void LLVMDumpValue(LLVMValueRef Val) {$/;"	f
LLVMFP128Type	Core.cpp	/^LLVMTypeRef LLVMFP128Type(void) {$/;"	f
LLVMFP128TypeInContext	Core.cpp	/^LLVMTypeRef LLVMFP128TypeInContext(LLVMContextRef C) {$/;"	f
LLVMFinalizeFunctionPassManager	Core.cpp	/^LLVMBool LLVMFinalizeFunctionPassManager(LLVMPassManagerRef FPM) {$/;"	f
LLVMFloatType	Core.cpp	/^LLVMTypeRef LLVMFloatType(void) {$/;"	f
LLVMFloatTypeInContext	Core.cpp	/^LLVMTypeRef LLVMFloatTypeInContext(LLVMContextRef C) {$/;"	f
LLVMFunctionType	Core.cpp	/^LLVMTypeRef LLVMFunctionType(LLVMTypeRef ReturnType,$/;"	f
LLVMGetAlignment	Core.cpp	/^unsigned LLVMGetAlignment(LLVMValueRef Global) {$/;"	f
LLVMGetArrayLength	Core.cpp	/^unsigned LLVMGetArrayLength(LLVMTypeRef ArrayTy) {$/;"	f
LLVMGetAttribute	Core.cpp	/^LLVMAttribute LLVMGetAttribute(LLVMValueRef Arg) {$/;"	f
LLVMGetBasicBlockParent	Core.cpp	/^LLVMValueRef LLVMGetBasicBlockParent(LLVMBasicBlockRef BB) {$/;"	f
LLVMGetBasicBlockTerminator	Core.cpp	/^LLVMValueRef LLVMGetBasicBlockTerminator(LLVMBasicBlockRef BB) {$/;"	f
LLVMGetBasicBlocks	Core.cpp	/^void LLVMGetBasicBlocks(LLVMValueRef FnRef, LLVMBasicBlockRef *BasicBlocksRefs){$/;"	f
LLVMGetConstOpcode	Core.cpp	/^LLVMOpcode LLVMGetConstOpcode(LLVMValueRef ConstantVal) {$/;"	f
LLVMGetCurrentDebugLocation	Core.cpp	/^LLVMValueRef LLVMGetCurrentDebugLocation(LLVMBuilderRef Builder) {$/;"	f
LLVMGetDataLayout	Core.cpp	/^const char * LLVMGetDataLayout(LLVMModuleRef M) {$/;"	f
LLVMGetElementType	Core.cpp	/^LLVMTypeRef LLVMGetElementType(LLVMTypeRef Ty) {$/;"	f
LLVMGetEntryBasicBlock	Core.cpp	/^LLVMBasicBlockRef LLVMGetEntryBasicBlock(LLVMValueRef Fn) {$/;"	f
LLVMGetFirstBasicBlock	Core.cpp	/^LLVMBasicBlockRef LLVMGetFirstBasicBlock(LLVMValueRef Fn) {$/;"	f
LLVMGetFirstFunction	Core.cpp	/^LLVMValueRef LLVMGetFirstFunction(LLVMModuleRef M) {$/;"	f
LLVMGetFirstGlobal	Core.cpp	/^LLVMValueRef LLVMGetFirstGlobal(LLVMModuleRef M) {$/;"	f
LLVMGetFirstInstruction	Core.cpp	/^LLVMValueRef LLVMGetFirstInstruction(LLVMBasicBlockRef BB) {$/;"	f
LLVMGetFirstParam	Core.cpp	/^LLVMValueRef LLVMGetFirstParam(LLVMValueRef Fn) {$/;"	f
LLVMGetFirstUse	Core.cpp	/^LLVMUseRef LLVMGetFirstUse(LLVMValueRef Val) {$/;"	f
LLVMGetFunctionAttr	Core.cpp	/^LLVMAttribute LLVMGetFunctionAttr(LLVMValueRef Fn) {$/;"	f
LLVMGetFunctionCallConv	Core.cpp	/^unsigned LLVMGetFunctionCallConv(LLVMValueRef Fn) {$/;"	f
LLVMGetGC	Core.cpp	/^const char *LLVMGetGC(LLVMValueRef Fn) {$/;"	f
LLVMGetGlobalContext	Core.cpp	/^LLVMContextRef LLVMGetGlobalContext() {$/;"	f
LLVMGetGlobalParent	Core.cpp	/^LLVMModuleRef LLVMGetGlobalParent(LLVMValueRef Global) {$/;"	f
LLVMGetGlobalPassRegistry	Core.cpp	/^LLVMPassRegistryRef LLVMGetGlobalPassRegistry(void) {$/;"	f
LLVMGetICmpPredicate	Core.cpp	/^LLVMIntPredicate LLVMGetICmpPredicate(LLVMValueRef Inst) {$/;"	f
LLVMGetIncomingBlock	Core.cpp	/^LLVMBasicBlockRef LLVMGetIncomingBlock(LLVMValueRef PhiNode, unsigned Index) {$/;"	f
LLVMGetIncomingValue	Core.cpp	/^LLVMValueRef LLVMGetIncomingValue(LLVMValueRef PhiNode, unsigned Index) {$/;"	f
LLVMGetInitializer	Core.cpp	/^LLVMValueRef LLVMGetInitializer(LLVMValueRef GlobalVar) {$/;"	f
LLVMGetInsertBlock	Core.cpp	/^LLVMBasicBlockRef LLVMGetInsertBlock(LLVMBuilderRef Builder) {$/;"	f
LLVMGetInstructionCallConv	Core.cpp	/^unsigned LLVMGetInstructionCallConv(LLVMValueRef Instr) {$/;"	f
LLVMGetInstructionOpcode	Core.cpp	/^LLVMOpcode LLVMGetInstructionOpcode(LLVMValueRef Inst) {$/;"	f
LLVMGetInstructionParent	Core.cpp	/^LLVMBasicBlockRef LLVMGetInstructionParent(LLVMValueRef Inst) {$/;"	f
LLVMGetIntTypeWidth	Core.cpp	/^unsigned LLVMGetIntTypeWidth(LLVMTypeRef IntegerTy) {$/;"	f
LLVMGetIntrinsicID	Core.cpp	/^unsigned LLVMGetIntrinsicID(LLVMValueRef Fn) {$/;"	f
LLVMGetLastBasicBlock	Core.cpp	/^LLVMBasicBlockRef LLVMGetLastBasicBlock(LLVMValueRef Fn) {$/;"	f
LLVMGetLastFunction	Core.cpp	/^LLVMValueRef LLVMGetLastFunction(LLVMModuleRef M) {$/;"	f
LLVMGetLastGlobal	Core.cpp	/^LLVMValueRef LLVMGetLastGlobal(LLVMModuleRef M) {$/;"	f
LLVMGetLastInstruction	Core.cpp	/^LLVMValueRef LLVMGetLastInstruction(LLVMBasicBlockRef BB) {$/;"	f
LLVMGetLastParam	Core.cpp	/^LLVMValueRef LLVMGetLastParam(LLVMValueRef Fn) {$/;"	f
LLVMGetLinkage	Core.cpp	/^LLVMLinkage LLVMGetLinkage(LLVMValueRef Global) {$/;"	f
LLVMGetMDKindID	Core.cpp	/^unsigned LLVMGetMDKindID(const char* Name, unsigned SLen) {$/;"	f
LLVMGetMDKindIDInContext	Core.cpp	/^unsigned LLVMGetMDKindIDInContext(LLVMContextRef C, const char* Name,$/;"	f
LLVMGetMDNodeNumOperands	Core.cpp	/^unsigned LLVMGetMDNodeNumOperands(LLVMValueRef V)$/;"	f
LLVMGetMDNodeOperands	Core.cpp	/^void LLVMGetMDNodeOperands(LLVMValueRef V, LLVMValueRef *Dest)$/;"	f
LLVMGetMDString	Core.cpp	/^const char *LLVMGetMDString(LLVMValueRef V, unsigned* Len) {$/;"	f
LLVMGetMetadata	Core.cpp	/^LLVMValueRef LLVMGetMetadata(LLVMValueRef Inst, unsigned KindID) {$/;"	f
LLVMGetModuleContext	Core.cpp	/^LLVMContextRef LLVMGetModuleContext(LLVMModuleRef M) {$/;"	f
LLVMGetNamedFunction	Core.cpp	/^LLVMValueRef LLVMGetNamedFunction(LLVMModuleRef M, const char *Name) {$/;"	f
LLVMGetNamedGlobal	Core.cpp	/^LLVMValueRef LLVMGetNamedGlobal(LLVMModuleRef M, const char *Name) {$/;"	f
LLVMGetNamedMetadataNumOperands	Core.cpp	/^unsigned LLVMGetNamedMetadataNumOperands(LLVMModuleRef M, const char* name)$/;"	f
LLVMGetNamedMetadataOperands	Core.cpp	/^void LLVMGetNamedMetadataOperands(LLVMModuleRef M, const char* name, LLVMValueRef *Dest)$/;"	f
LLVMGetNextBasicBlock	Core.cpp	/^LLVMBasicBlockRef LLVMGetNextBasicBlock(LLVMBasicBlockRef BB) {$/;"	f
LLVMGetNextFunction	Core.cpp	/^LLVMValueRef LLVMGetNextFunction(LLVMValueRef Fn) {$/;"	f
LLVMGetNextGlobal	Core.cpp	/^LLVMValueRef LLVMGetNextGlobal(LLVMValueRef GlobalVar) {$/;"	f
LLVMGetNextInstruction	Core.cpp	/^LLVMValueRef LLVMGetNextInstruction(LLVMValueRef Inst) {$/;"	f
LLVMGetNextParam	Core.cpp	/^LLVMValueRef LLVMGetNextParam(LLVMValueRef Arg) {$/;"	f
LLVMGetNextUse	Core.cpp	/^LLVMUseRef LLVMGetNextUse(LLVMUseRef U) {$/;"	f
LLVMGetNumOperands	Core.cpp	/^int LLVMGetNumOperands(LLVMValueRef Val) {$/;"	f
LLVMGetOperand	Core.cpp	/^LLVMValueRef LLVMGetOperand(LLVMValueRef Val, unsigned Index) {$/;"	f
LLVMGetParam	Core.cpp	/^LLVMValueRef LLVMGetParam(LLVMValueRef FnRef, unsigned index) {$/;"	f
LLVMGetParamParent	Core.cpp	/^LLVMValueRef LLVMGetParamParent(LLVMValueRef V) {$/;"	f
LLVMGetParamTypes	Core.cpp	/^void LLVMGetParamTypes(LLVMTypeRef FunctionTy, LLVMTypeRef *Dest) {$/;"	f
LLVMGetParams	Core.cpp	/^void LLVMGetParams(LLVMValueRef FnRef, LLVMValueRef *ParamRefs) {$/;"	f
LLVMGetPointerAddressSpace	Core.cpp	/^unsigned LLVMGetPointerAddressSpace(LLVMTypeRef PointerTy) {$/;"	f
LLVMGetPreviousBasicBlock	Core.cpp	/^LLVMBasicBlockRef LLVMGetPreviousBasicBlock(LLVMBasicBlockRef BB) {$/;"	f
LLVMGetPreviousFunction	Core.cpp	/^LLVMValueRef LLVMGetPreviousFunction(LLVMValueRef Fn) {$/;"	f
LLVMGetPreviousGlobal	Core.cpp	/^LLVMValueRef LLVMGetPreviousGlobal(LLVMValueRef GlobalVar) {$/;"	f
LLVMGetPreviousInstruction	Core.cpp	/^LLVMValueRef LLVMGetPreviousInstruction(LLVMValueRef Inst) {$/;"	f
LLVMGetPreviousParam	Core.cpp	/^LLVMValueRef LLVMGetPreviousParam(LLVMValueRef Arg) {$/;"	f
LLVMGetReturnType	Core.cpp	/^LLVMTypeRef LLVMGetReturnType(LLVMTypeRef FunctionTy) {$/;"	f
LLVMGetSection	Core.cpp	/^const char *LLVMGetSection(LLVMValueRef Global) {$/;"	f
LLVMGetStructElementTypes	Core.cpp	/^void LLVMGetStructElementTypes(LLVMTypeRef StructTy, LLVMTypeRef *Dest) {$/;"	f
LLVMGetStructName	Core.cpp	/^const char *LLVMGetStructName(LLVMTypeRef Ty)$/;"	f
LLVMGetSwitchDefaultDest	Core.cpp	/^LLVMBasicBlockRef LLVMGetSwitchDefaultDest(LLVMValueRef Switch) {$/;"	f
LLVMGetTarget	Core.cpp	/^const char * LLVMGetTarget(LLVMModuleRef M) {$/;"	f
LLVMGetTypeByName	Core.cpp	/^LLVMTypeRef LLVMGetTypeByName(LLVMModuleRef M, const char *Name) {$/;"	f
LLVMGetTypeContext	Core.cpp	/^LLVMContextRef LLVMGetTypeContext(LLVMTypeRef Ty) {$/;"	f
LLVMGetTypeKind	Core.cpp	/^LLVMTypeKind LLVMGetTypeKind(LLVMTypeRef Ty) {$/;"	f
LLVMGetUndef	Core.cpp	/^LLVMValueRef LLVMGetUndef(LLVMTypeRef Ty) {$/;"	f
LLVMGetUsedValue	Core.cpp	/^LLVMValueRef LLVMGetUsedValue(LLVMUseRef U) {$/;"	f
LLVMGetUser	Core.cpp	/^LLVMValueRef LLVMGetUser(LLVMUseRef U) {$/;"	f
LLVMGetValueName	Core.cpp	/^const char *LLVMGetValueName(LLVMValueRef Val) {$/;"	f
LLVMGetVectorSize	Core.cpp	/^unsigned LLVMGetVectorSize(LLVMTypeRef VectorTy) {$/;"	f
LLVMGetVisibility	Core.cpp	/^LLVMVisibility LLVMGetVisibility(LLVMValueRef Global) {$/;"	f
LLVMGetVolatile	Core.cpp	/^LLVMBool LLVMGetVolatile(LLVMValueRef MemAccessInst) {$/;"	f
LLVMHalfType	Core.cpp	/^LLVMTypeRef LLVMHalfType(void) {$/;"	f
LLVMHalfTypeInContext	Core.cpp	/^LLVMTypeRef LLVMHalfTypeInContext(LLVMContextRef C) {$/;"	f
LLVMHasMetadata	Core.cpp	/^int LLVMHasMetadata(LLVMValueRef Inst) {$/;"	f
LLVMInitializeCore	Core.cpp	/^void LLVMInitializeCore(LLVMPassRegistryRef R) {$/;"	f
LLVMInitializeFunctionPassManager	Core.cpp	/^LLVMBool LLVMInitializeFunctionPassManager(LLVMPassManagerRef FPM) {$/;"	f
LLVMInsertBasicBlock	Core.cpp	/^LLVMBasicBlockRef LLVMInsertBasicBlock(LLVMBasicBlockRef BBRef,$/;"	f
LLVMInsertBasicBlockInContext	Core.cpp	/^LLVMBasicBlockRef LLVMInsertBasicBlockInContext(LLVMContextRef C,$/;"	f
LLVMInsertIntoBuilder	Core.cpp	/^void LLVMInsertIntoBuilder(LLVMBuilderRef Builder, LLVMValueRef Instr) {$/;"	f
LLVMInsertIntoBuilderWithName	Core.cpp	/^void LLVMInsertIntoBuilderWithName(LLVMBuilderRef Builder, LLVMValueRef Instr,$/;"	f
LLVMInstructionEraseFromParent	Core.cpp	/^void LLVMInstructionEraseFromParent(LLVMValueRef Inst) {$/;"	f
LLVMInt16Type	Core.cpp	/^LLVMTypeRef LLVMInt16Type(void) {$/;"	f
LLVMInt16TypeInContext	Core.cpp	/^LLVMTypeRef LLVMInt16TypeInContext(LLVMContextRef C) {$/;"	f
LLVMInt1Type	Core.cpp	/^LLVMTypeRef LLVMInt1Type(void)  {$/;"	f
LLVMInt1TypeInContext	Core.cpp	/^LLVMTypeRef LLVMInt1TypeInContext(LLVMContextRef C)  {$/;"	f
LLVMInt32Type	Core.cpp	/^LLVMTypeRef LLVMInt32Type(void) {$/;"	f
LLVMInt32TypeInContext	Core.cpp	/^LLVMTypeRef LLVMInt32TypeInContext(LLVMContextRef C) {$/;"	f
LLVMInt64Type	Core.cpp	/^LLVMTypeRef LLVMInt64Type(void) {$/;"	f
LLVMInt64TypeInContext	Core.cpp	/^LLVMTypeRef LLVMInt64TypeInContext(LLVMContextRef C) {$/;"	f
LLVMInt8Type	Core.cpp	/^LLVMTypeRef LLVMInt8Type(void)  {$/;"	f
LLVMInt8TypeInContext	Core.cpp	/^LLVMTypeRef LLVMInt8TypeInContext(LLVMContextRef C)  {$/;"	f
LLVMIntType	Core.cpp	/^LLVMTypeRef LLVMIntType(unsigned NumBits) {$/;"	f
LLVMIntTypeInContext	Core.cpp	/^LLVMTypeRef LLVMIntTypeInContext(LLVMContextRef C, unsigned NumBits) {$/;"	f
LLVMIsConstant	Core.cpp	/^LLVMBool LLVMIsConstant(LLVMValueRef Ty) {$/;"	f
LLVMIsDeclaration	Core.cpp	/^LLVMBool LLVMIsDeclaration(LLVMValueRef Global) {$/;"	f
LLVMIsFunctionVarArg	Core.cpp	/^LLVMBool LLVMIsFunctionVarArg(LLVMTypeRef FunctionTy) {$/;"	f
LLVMIsGlobalConstant	Core.cpp	/^LLVMBool LLVMIsGlobalConstant(LLVMValueRef GlobalVar) {$/;"	f
LLVMIsNull	Core.cpp	/^LLVMBool LLVMIsNull(LLVMValueRef Val) {$/;"	f
LLVMIsOpaqueStruct	Core.cpp	/^LLVMBool LLVMIsOpaqueStruct(LLVMTypeRef StructTy) {$/;"	f
LLVMIsPackedStruct	Core.cpp	/^LLVMBool LLVMIsPackedStruct(LLVMTypeRef StructTy) {$/;"	f
LLVMIsTailCall	Core.cpp	/^LLVMBool LLVMIsTailCall(LLVMValueRef Call) {$/;"	f
LLVMIsThreadLocal	Core.cpp	/^LLVMBool LLVMIsThreadLocal(LLVMValueRef GlobalVar) {$/;"	f
LLVMIsUndef	Core.cpp	/^LLVMBool LLVMIsUndef(LLVMValueRef Val) {$/;"	f
LLVMLabelType	Core.cpp	/^LLVMTypeRef LLVMLabelType(void) {$/;"	f
LLVMLabelTypeInContext	Core.cpp	/^LLVMTypeRef LLVMLabelTypeInContext(LLVMContextRef C) {$/;"	f
LLVMMDNode	Core.cpp	/^LLVMValueRef LLVMMDNode(LLVMValueRef *Vals, unsigned Count) {$/;"	f
LLVMMDNodeInContext	Core.cpp	/^LLVMValueRef LLVMMDNodeInContext(LLVMContextRef C, LLVMValueRef *Vals,$/;"	f
LLVMMDString	Core.cpp	/^LLVMValueRef LLVMMDString(const char *Str, unsigned SLen) {$/;"	f
LLVMMDStringInContext	Core.cpp	/^LLVMValueRef LLVMMDStringInContext(LLVMContextRef C, const char *Str,$/;"	f
LLVMModuleCreateWithName	Core.cpp	/^LLVMModuleRef LLVMModuleCreateWithName(const char *ModuleID) {$/;"	f
LLVMModuleCreateWithNameInContext	Core.cpp	/^LLVMModuleRef LLVMModuleCreateWithNameInContext(const char *ModuleID, $/;"	f
LLVMMoveBasicBlockAfter	Core.cpp	/^void LLVMMoveBasicBlockAfter(LLVMBasicBlockRef BB, LLVMBasicBlockRef MovePos) {$/;"	f
LLVMMoveBasicBlockBefore	Core.cpp	/^void LLVMMoveBasicBlockBefore(LLVMBasicBlockRef BB, LLVMBasicBlockRef MovePos) {$/;"	f
LLVMObjects	LLVMContextImpl.h	/^  LeakDetectorImpl<Value> LLVMObjects;$/;"	m	class:llvm::LLVMContextImpl
LLVMPPCFP128Type	Core.cpp	/^LLVMTypeRef LLVMPPCFP128Type(void) {$/;"	f
LLVMPPCFP128TypeInContext	Core.cpp	/^LLVMTypeRef LLVMPPCFP128TypeInContext(LLVMContextRef C) {$/;"	f
LLVMPointerType	Core.cpp	/^LLVMTypeRef LLVMPointerType(LLVMTypeRef ElementType, unsigned AddressSpace) {$/;"	f
LLVMPositionBuilder	Core.cpp	/^void LLVMPositionBuilder(LLVMBuilderRef Builder, LLVMBasicBlockRef Block,$/;"	f
LLVMPositionBuilderAtEnd	Core.cpp	/^void LLVMPositionBuilderAtEnd(LLVMBuilderRef Builder, LLVMBasicBlockRef Block) {$/;"	f
LLVMPositionBuilderBefore	Core.cpp	/^void LLVMPositionBuilderBefore(LLVMBuilderRef Builder, LLVMValueRef Instr) {$/;"	f
LLVMPrintModuleToFile	Core.cpp	/^LLVMBool LLVMPrintModuleToFile(LLVMModuleRef M, const char *Filename,$/;"	f
LLVMRemoveAttribute	Core.cpp	/^void LLVMRemoveAttribute(LLVMValueRef Arg, LLVMAttribute PA) {$/;"	f
LLVMRemoveBasicBlockFromParent	Core.cpp	/^void LLVMRemoveBasicBlockFromParent(LLVMBasicBlockRef BBRef) {$/;"	f
LLVMRemoveFunctionAttr	Core.cpp	/^void LLVMRemoveFunctionAttr(LLVMValueRef Fn, LLVMAttribute PA) {$/;"	f
LLVMRemoveInstrAttribute	Core.cpp	/^void LLVMRemoveInstrAttribute(LLVMValueRef Instr, unsigned index, $/;"	f
LLVMReplaceAllUsesWith	Core.cpp	/^void LLVMReplaceAllUsesWith(LLVMValueRef OldVal, LLVMValueRef NewVal) {$/;"	f
LLVMRunFunctionPassManager	Core.cpp	/^LLVMBool LLVMRunFunctionPassManager(LLVMPassManagerRef FPM, LLVMValueRef F) {$/;"	f
LLVMRunPassManager	Core.cpp	/^LLVMBool LLVMRunPassManager(LLVMPassManagerRef PM, LLVMModuleRef M) {$/;"	f
LLVMSetAlignment	Core.cpp	/^void LLVMSetAlignment(LLVMValueRef Global, unsigned Bytes) {$/;"	f
LLVMSetCleanup	Core.cpp	/^void LLVMSetCleanup(LLVMValueRef LandingPad, LLVMBool Val) {$/;"	f
LLVMSetCurrentDebugLocation	Core.cpp	/^void LLVMSetCurrentDebugLocation(LLVMBuilderRef Builder, LLVMValueRef L) {$/;"	f
LLVMSetDataLayout	Core.cpp	/^void LLVMSetDataLayout(LLVMModuleRef M, const char *Triple) {$/;"	f
LLVMSetFunctionCallConv	Core.cpp	/^void LLVMSetFunctionCallConv(LLVMValueRef Fn, unsigned CC) {$/;"	f
LLVMSetGC	Core.cpp	/^void LLVMSetGC(LLVMValueRef Fn, const char *GC) {$/;"	f
LLVMSetGlobalConstant	Core.cpp	/^void LLVMSetGlobalConstant(LLVMValueRef GlobalVar, LLVMBool IsConstant) {$/;"	f
LLVMSetInitializer	Core.cpp	/^void LLVMSetInitializer(LLVMValueRef GlobalVar, LLVMValueRef ConstantVal) {$/;"	f
LLVMSetInstDebugLocation	Core.cpp	/^void LLVMSetInstDebugLocation(LLVMBuilderRef Builder, LLVMValueRef Inst) {$/;"	f
LLVMSetInstrParamAlignment	Core.cpp	/^void LLVMSetInstrParamAlignment(LLVMValueRef Instr, unsigned index, $/;"	f
LLVMSetInstructionCallConv	Core.cpp	/^void LLVMSetInstructionCallConv(LLVMValueRef Instr, unsigned CC) {$/;"	f
LLVMSetLinkage	Core.cpp	/^void LLVMSetLinkage(LLVMValueRef Global, LLVMLinkage Linkage) {$/;"	f
LLVMSetMetadata	Core.cpp	/^void LLVMSetMetadata(LLVMValueRef Inst, unsigned KindID, LLVMValueRef MD) {$/;"	f
LLVMSetModuleInlineAsm	Core.cpp	/^void LLVMSetModuleInlineAsm(LLVMModuleRef M, const char *Asm) {$/;"	f
LLVMSetOperand	Core.cpp	/^void LLVMSetOperand(LLVMValueRef Val, unsigned Index, LLVMValueRef Op) {$/;"	f
LLVMSetParamAlignment	Core.cpp	/^void LLVMSetParamAlignment(LLVMValueRef Arg, unsigned align) {$/;"	f
LLVMSetSection	Core.cpp	/^void LLVMSetSection(LLVMValueRef Global, const char *Section) {$/;"	f
LLVMSetTailCall	Core.cpp	/^void LLVMSetTailCall(LLVMValueRef Call, LLVMBool isTailCall) {$/;"	f
LLVMSetTarget	Core.cpp	/^void LLVMSetTarget(LLVMModuleRef M, const char *Triple) {$/;"	f
LLVMSetThreadLocal	Core.cpp	/^void LLVMSetThreadLocal(LLVMValueRef GlobalVar, LLVMBool IsThreadLocal) {$/;"	f
LLVMSetValueName	Core.cpp	/^void LLVMSetValueName(LLVMValueRef Val, const char *Name) {$/;"	f
LLVMSetVisibility	Core.cpp	/^void LLVMSetVisibility(LLVMValueRef Global, LLVMVisibility Viz) {$/;"	f
LLVMSetVolatile	Core.cpp	/^void LLVMSetVolatile(LLVMValueRef MemAccessInst, LLVMBool isVolatile) {$/;"	f
LLVMSizeOf	Core.cpp	/^LLVMValueRef LLVMSizeOf(LLVMTypeRef Ty) {$/;"	f
LLVMStructCreateNamed	Core.cpp	/^LLVMTypeRef LLVMStructCreateNamed(LLVMContextRef C, const char *Name)$/;"	f
LLVMStructSetBody	Core.cpp	/^void LLVMStructSetBody(LLVMTypeRef StructTy, LLVMTypeRef *ElementTypes,$/;"	f
LLVMStructType	Core.cpp	/^LLVMTypeRef LLVMStructType(LLVMTypeRef *ElementTypes,$/;"	f
LLVMStructTypeInContext	Core.cpp	/^LLVMTypeRef LLVMStructTypeInContext(LLVMContextRef C, LLVMTypeRef *ElementTypes,$/;"	f
LLVMTypeIsSized	Core.cpp	/^LLVMBool LLVMTypeIsSized(LLVMTypeRef Ty)$/;"	f
LLVMTypeOf	Core.cpp	/^LLVMTypeRef LLVMTypeOf(LLVMValueRef Val) {$/;"	f
LLVMValueAsBasicBlock	Core.cpp	/^LLVMBasicBlockRef LLVMValueAsBasicBlock(LLVMValueRef Val) {$/;"	f
LLVMValueIsBasicBlock	Core.cpp	/^LLVMBool LLVMValueIsBasicBlock(LLVMValueRef Val) {$/;"	f
LLVMVectorType	Core.cpp	/^LLVMTypeRef LLVMVectorType(LLVMTypeRef ElementType, unsigned ElementCount) {$/;"	f
LLVMVoidType	Core.cpp	/^LLVMTypeRef LLVMVoidType(void)  {$/;"	f
LLVMVoidTypeInContext	Core.cpp	/^LLVMTypeRef LLVMVoidTypeInContext(LLVMContextRef C)  {$/;"	f
LLVMX86FP80Type	Core.cpp	/^LLVMTypeRef LLVMX86FP80Type(void) {$/;"	f
LLVMX86FP80TypeInContext	Core.cpp	/^LLVMTypeRef LLVMX86FP80TypeInContext(LLVMContextRef C) {$/;"	f
LLVMX86MMXType	Core.cpp	/^LLVMTypeRef LLVMX86MMXType(void) {$/;"	f
LLVMX86MMXTypeInContext	Core.cpp	/^LLVMTypeRef LLVMX86MMXTypeInContext(LLVMContextRef C) {$/;"	f
LLVM_ATTRIBUTESIMPL_H	AttributesImpl.h	16;"	d
LLVM_CONSTANTSCONTEXT_H	ConstantsContext.h	16;"	d
LLVM_DEFINE_VALUE_CAST	Core.cpp	458;"	d	file:
LLVM_DELETED_FUNCTION	AsmWriter.cpp	/^  SlotTracker(const SlotTracker &) LLVM_DELETED_FUNCTION;$/;"	m	class:__anon2::SlotTracker	file:
LLVM_DELETED_FUNCTION	AsmWriter.cpp	/^  TypePrinting(const TypePrinting &) LLVM_DELETED_FUNCTION;$/;"	m	class:__anon1::TypePrinting	file:
LLVM_DELETED_FUNCTION	AsmWriter.cpp	/^  void operator=(const SlotTracker &) LLVM_DELETED_FUNCTION;$/;"	m	class:__anon2::SlotTracker	file:
LLVM_DELETED_FUNCTION	AsmWriter.cpp	/^  void operator=(const TypePrinting&) LLVM_DELETED_FUNCTION;$/;"	m	class:__anon1::TypePrinting	file:
LLVM_DELETED_FUNCTION	Attributes.cpp	/^  AttributeListImpl(const AttributeListImpl &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::AttributeListImpl	file:
LLVM_DELETED_FUNCTION	Attributes.cpp	/^  void operator=(const AttributeListImpl &) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::AttributeListImpl	file:
LLVM_DELETED_FUNCTION	ConstantsContext.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::BinaryConstantExpr
LLVM_DELETED_FUNCTION	ConstantsContext.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::CompareConstantExpr
LLVM_DELETED_FUNCTION	ConstantsContext.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ExtractElementConstantExpr
LLVM_DELETED_FUNCTION	ConstantsContext.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ExtractValueConstantExpr
LLVM_DELETED_FUNCTION	ConstantsContext.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::InsertElementConstantExpr
LLVM_DELETED_FUNCTION	ConstantsContext.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::InsertValueConstantExpr
LLVM_DELETED_FUNCTION	ConstantsContext.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::SelectConstantExpr
LLVM_DELETED_FUNCTION	ConstantsContext.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::ShuffleVectorConstantExpr
LLVM_DELETED_FUNCTION	ConstantsContext.h	/^  void *operator new(size_t, unsigned) LLVM_DELETED_FUNCTION;$/;"	m	class:llvm::UnaryConstantExpr
LLVM_LLVMCONTEXT_IMPL_H	LLVMContextImpl.h	16;"	d
LLVM_SYMBOLTABLELISTTRAITS_IMPL_H	SymbolTableListTraitsImpl.h	17;"	d
LabelPrefix	AsmWriter.cpp	/^  LabelPrefix,$/;"	e	enum:PrefixType	file:
LabelTy	LLVMContextImpl.h	/^  Type VoidTy, LabelTy, HalfTy, FloatTy, DoubleTy, MetadataTy;$/;"	m	class:llvm::LLVMContextImpl
LandingPadInst	Instructions.cpp	/^LandingPadInst::LandingPadInst(Type *RetTy, Value *PersonalityFn,$/;"	f	class:LandingPadInst
LandingPadInst	Instructions.cpp	/^LandingPadInst::LandingPadInst(const LandingPadInst &LP)$/;"	f	class:LandingPadInst
LayoutInfo	DataLayout.cpp	/^  LayoutInfoTy LayoutInfo;$/;"	m	class:__anon4::StructLayoutMap	file:
LayoutInfoTy	DataLayout.cpp	/^  typedef DenseMap<StructType*, StructLayout*> LayoutInfoTy;$/;"	t	class:__anon4::StructLayoutMap	file:
LeakDetectorImpl	LeaksContext.h	/^  explicit LeakDetectorImpl(const char* const name = "") : $/;"	f	struct:llvm::LeakDetectorImpl
LeakDetectorImpl	LeaksContext.h	/^struct LeakDetectorImpl {$/;"	s	namespace:llvm
Listeners	PassRegistry.cpp	/^  std::vector<PassRegistrationListener*> Listeners;$/;"	m	struct:__anon9::PassRegistryImpl	file:
LoadInst	Instructions.cpp	/^LoadInst::LoadInst(Value *Ptr, const Twine &Name, BasicBlock *InsertAE)$/;"	f	class:LoadInst
LoadInst	Instructions.cpp	/^LoadInst::LoadInst(Value *Ptr, const Twine &Name, Instruction *InsertBef)$/;"	f	class:LoadInst
LoadInst	Instructions.cpp	/^LoadInst::LoadInst(Value *Ptr, const Twine &Name, bool isVolatile, $/;"	f	class:LoadInst
LoadInst	Instructions.cpp	/^LoadInst::LoadInst(Value *Ptr, const Twine &Name, bool isVolatile,$/;"	f	class:LoadInst
LoadInst	Instructions.cpp	/^LoadInst::LoadInst(Value *Ptr, const char *Name, BasicBlock *InsertAE)$/;"	f	class:LoadInst
LoadInst	Instructions.cpp	/^LoadInst::LoadInst(Value *Ptr, const char *Name, Instruction *InsertBef)$/;"	f	class:LoadInst
LoadInst	Instructions.cpp	/^LoadInst::LoadInst(Value *Ptr, const char *Name, bool isVolatile,$/;"	f	class:LoadInst
LocalPrefix	AsmWriter.cpp	/^  LocalPrefix,$/;"	e	enum:PrefixType	file:
Lock	PassRegistry.cpp	/^static ManagedStatic<sys::SmartMutex<true> > Lock;$/;"	v	file:
LookupKey	ConstantsContext.h	/^  typedef std::pair<TypeClass*, Operands> LookupKey;$/;"	t	class:llvm::ConstantAggrUniqueMap
MDMapTy	LLVMContextImpl.h	/^  typedef SmallVector<MDPairTy, 2> MDMapTy;$/;"	t	class:llvm::LLVMContextImpl
MDNode	Metadata.cpp	/^MDNode::MDNode(LLVMContext &C, ArrayRef<Value*> Vals, bool isFunctionLocal)$/;"	f	class:MDNode
MDNodeOperand	Metadata.cpp	/^  MDNodeOperand(Value *V) : CallbackVH(V) {}$/;"	f	class:llvm::MDNodeOperand
MDNodeOperand	Metadata.cpp	/^class MDNodeOperand : public CallbackVH {$/;"	c	namespace:llvm	file:
MDNodeSet	LLVMContextImpl.h	/^  FoldingSet<MDNode> MDNodeSet;$/;"	m	class:llvm::LLVMContextImpl
MDNodes	Verifier.cpp	/^    SmallPtrSet<MDNode *, 32> MDNodes;$/;"	m	struct:__anon13::Verifier	file:
MDPairTy	LLVMContextImpl.h	/^  typedef std::pair<unsigned, TrackingVH<MDNode> > MDPairTy;$/;"	t	class:llvm::LLVMContextImpl
MDString	Metadata.cpp	/^MDString::MDString(LLVMContext &C)$/;"	f	class:MDString
MDStringCache	LLVMContextImpl.h	/^  StringMap<Value*> MDStringCache;$/;"	m	class:llvm::LLVMContextImpl
MPPassManager	PassManager.cpp	/^  explicit MPPassManager() :$/;"	f	class:llvm::MPPassManager
MPPassManager	PassManager.cpp	/^class MPPassManager : public Pass, public PMDataManager {$/;"	c	namespace:llvm	file:
Machine	AsmWriter.cpp	/^  SlotTracker &Machine;$/;"	m	class:__anon3::AssemblyWriter	file:
Map	ConstantsContext.h	/^  MapTy Map;$/;"	m	class:llvm::ConstantAggrUniqueMap
Map	ConstantsContext.h	/^  MapTy Map;$/;"	m	class:llvm::ConstantUniqueMap
MapInfo	ConstantsContext.h	/^  struct MapInfo {$/;"	s	class:llvm::ConstantAggrUniqueMap
MapKey	ConstantsContext.h	/^  typedef std::pair<TypeClass*, ValType> MapKey;$/;"	t	class:llvm::ConstantUniqueMap
MapTy	ConstantsContext.h	/^  typedef DenseMap<ConstantClass *, char, MapInfo> MapTy;$/;"	t	class:llvm::ConstantAggrUniqueMap
MapTy	ConstantsContext.h	/^  typedef std::map<MapKey, ConstantClass *> MapTy;$/;"	t	class:llvm::ConstantUniqueMap
MapType	PassRegistry.cpp	/^  typedef DenseMap<const void*, const PassInfo*> MapType;$/;"	t	struct:__anon9::PassRegistryImpl	file:
Materialize	Globals.cpp	/^bool GlobalValue::Materialize(std::string *ErrInfo) {$/;"	f	class:GlobalValue
Materialize	Module.cpp	/^bool Module::Materialize(GlobalValue *GV, std::string *ErrInfo) {$/;"	f	class:Module
MaterializeAll	Module.cpp	/^bool Module::MaterializeAll(std::string *ErrInfo) {$/;"	f	class:Module
MaterializeAllPermanently	Module.cpp	/^bool Module::MaterializeAllPermanently(std::string *ErrInfo) {$/;"	f	class:Module
Messages	Verifier.cpp	/^    std::string Messages;$/;"	m	struct:__anon13::Verifier	file:
MessagesStr	Verifier.cpp	/^    raw_string_ostream MessagesStr;$/;"	m	struct:__anon13::Verifier	file:
MetadataStore	LLVMContextImpl.h	/^  DenseMap<const Instruction *, MDMapTy> MetadataStore;$/;"	m	class:llvm::LLVMContextImpl
MetadataTy	LLVMContextImpl.h	/^  Type VoidTy, LabelTy, HalfTy, FloatTy, DoubleTy, MetadataTy;$/;"	m	class:llvm::LLVMContextImpl
Mod	Verifier.cpp	/^    Module *Mod;          \/\/ Module we are verifying right now$/;"	m	struct:__anon13::Verifier	file:
Module	Module.cpp	/^Module::Module(StringRef MID, LLVMContext& C)$/;"	f	class:Module
MoveConstantToNewSlot	ConstantsContext.h	/^  void MoveConstantToNewSlot(ConstantClass *C, typename MapTy::iterator I) {$/;"	f	class:llvm::ConstantUniqueMap
Name	LeaksContext.h	/^  const char* Name;$/;"	m	struct:llvm::LeakDetectorImpl
NamedMDNode	Metadata.cpp	/^NamedMDNode::NamedMDNode(const Twine &N)$/;"	f	class:NamedMDNode
NamedStructTypes	LLVMContextImpl.h	/^  StringMap<StructType*> NamedStructTypes;$/;"	m	class:llvm::LLVMContextImpl
NamedStructTypesUniqueID	LLVMContextImpl.h	/^  unsigned NamedStructTypesUniqueID;$/;"	m	class:llvm::LLVMContextImpl
NamedTypes	AsmWriter.cpp	/^  TypeFinder NamedTypes;$/;"	m	class:__anon1::TypePrinting	file:
NoPrefix	AsmWriter.cpp	/^  NoPrefix$/;"	e	enum:PrefixType	file:
NonUniquedMDNodes	LLVMContextImpl.h	/^  SmallPtrSet<MDNode*, 1> NonUniquedMDNodes;$/;"	m	class:llvm::LLVMContextImpl
None	PassManager.cpp	/^  None, Arguments, Structure, Executions, Details$/;"	e	enum:llvm::PassDebugLevel	file:
NumberedTypes	AsmWriter.cpp	/^  DenseMap<StructType*, unsigned> NumberedTypes;$/;"	m	class:__anon1::TypePrinting	file:
Objects	LeakDetector.cpp	/^static ManagedStatic<LeakDetectorImpl<void> > Objects;$/;"	v	file:
ObjectsLock	LeakDetector.cpp	/^static ManagedStatic<sys::SmartMutex<true> > ObjectsLock;$/;"	v	file:
OnTheFlyManagers	PassManager.cpp	/^  std::map<Pass *, FunctionPassManagerImpl *> OnTheFlyManagers;$/;"	m	class:llvm::MPPassManager	file:
OperandTraits	ConstantsContext.h	/^struct OperandTraits<BinaryConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	ConstantsContext.h	/^struct OperandTraits<CompareConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	ConstantsContext.h	/^struct OperandTraits<ExtractElementConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	ConstantsContext.h	/^struct OperandTraits<ExtractValueConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	ConstantsContext.h	/^struct OperandTraits<GetElementPtrConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	ConstantsContext.h	/^struct OperandTraits<InsertElementConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	ConstantsContext.h	/^struct OperandTraits<InsertValueConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	ConstantsContext.h	/^struct OperandTraits<SelectConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	ConstantsContext.h	/^struct OperandTraits<ShuffleVectorConstantExpr> :$/;"	s	namespace:llvm
OperandTraits	ConstantsContext.h	/^struct OperandTraits<UnaryConstantExpr> :$/;"	s	namespace:llvm
Operands	ConstantsContext.h	/^  typedef ArrayRef<Constant*> Operands;$/;"	t	class:llvm::ConstantAggrUniqueMap
Out	AsmWriter.cpp	/^  formatted_raw_ostream &Out;$/;"	m	class:__anon3::AssemblyWriter	file:
Out	PrintModulePass.cpp	/^    raw_ostream *Out;       \/\/ raw_ostream to print on$/;"	m	class:__anon10::PrintFunctionPass	file:
Out	PrintModulePass.cpp	/^    raw_ostream *Out;       \/\/ raw_ostream to print on$/;"	m	class:__anon10::PrintModulePass	file:
OwnedModules	LLVMContextImpl.h	/^  SmallPtrSet<Module*, 4> OwnedModules;$/;"	m	class:llvm::LLVMContextImpl
PHINode	Instructions.cpp	/^PHINode::PHINode(const PHINode &PN)$/;"	f	class:PHINode
PMTopLevelManager	PassManager.cpp	/^PMTopLevelManager::PMTopLevelManager(PMDataManager *PMDM) {$/;"	f	class:PMTopLevelManager
PPC_FP128Ty	LLVMContextImpl.h	/^  Type X86_FP80Ty, FP128Ty, PPC_FP128Ty, X86_MMXTy;$/;"	m	class:llvm::LLVMContextImpl
PSK_InBounds	Value.cpp	/^  PSK_InBounds$/;"	e	enum:__anon11::PointerStripKind	file:
PSK_InBoundsConstantIndices	Value.cpp	/^  PSK_InBoundsConstantIndices,$/;"	e	enum:__anon11::PointerStripKind	file:
PSK_ZeroIndices	Value.cpp	/^  PSK_ZeroIndices,$/;"	e	enum:__anon11::PointerStripKind	file:
Params	LLVMContextImpl.h	/^    ArrayRef<Type*> Params;$/;"	m	struct:llvm::FunctionTypeKeyInfo::KeyTy
Parse	InlineAsm.cpp	/^bool InlineAsm::ConstraintInfo::Parse(StringRef Str,$/;"	f	class:InlineAsm::ConstraintInfo
ParseConstraints	InlineAsm.cpp	/^InlineAsm::ParseConstraints(StringRef Constraints) {$/;"	f	class:InlineAsm
PassDebugLevel	PassManager.cpp	/^enum PassDebugLevel {$/;"	g	namespace:llvm	file:
PassInfoMap	PassRegistry.cpp	/^  MapType PassInfoMap;$/;"	m	struct:__anon9::PassRegistryImpl	file:
PassInfoStringMap	PassRegistry.cpp	/^  StringMapType PassInfoStringMap;$/;"	m	struct:__anon9::PassRegistryImpl	file:
PassManager	PassManager.cpp	/^PassManager::PassManager() {$/;"	f	class:PassManager
PassManagerImpl	PassManager.cpp	/^  explicit PassManagerImpl() :$/;"	f	class:llvm::PassManagerImpl
PassManagerImpl	PassManager.cpp	/^class PassManagerImpl : public Pass,$/;"	c	namespace:llvm	file:
PassOptionList	PassManager.cpp	/^PassOptionList;$/;"	t	namespace:llvm	file:
PassRegistrationListener	Pass.cpp	/^PassRegistrationListener::PassRegistrationListener() {$/;"	f	class:PassRegistrationListener
PassRegistryImpl	PassRegistry.cpp	/^struct PassRegistryImpl {$/;"	s	namespace:__anon9	file:
PassRegistryObj	PassRegistry.cpp	/^static ManagedStatic<PassRegistry> PassRegistryObj;$/;"	v	file:
PersonalityFn	Verifier.cpp	/^    const Value *PersonalityFn;$/;"	m	struct:__anon13::Verifier	file:
PointerStripKind	Value.cpp	/^enum PointerStripKind {$/;"	g	namespace:__anon11	file:
PointerType	Type.cpp	/^PointerType::PointerType(Type *E, unsigned AddrSpace)$/;"	f	class:PointerType
PointerTypes	LLVMContextImpl.h	/^  DenseMap<Type*, PointerType*> PointerTypes;  \/\/ Pointers in AddrSpace = 0$/;"	m	class:llvm::LLVMContextImpl
PreVerifier	Verifier.cpp	/^    PreVerifier() : FunctionPass(ID) {$/;"	f	struct:__anon12::PreVerifier
PreVerifier	Verifier.cpp	/^  struct PreVerifier : public FunctionPass {$/;"	s	namespace:__anon12	file:
PreVerifyID	Verifier.cpp	/^static char &PreVerifyID = PreVerifier::ID;$/;"	v	file:
PrefixType	AsmWriter.cpp	/^enum PrefixType {$/;"	g	file:
PrintCallingConv	AsmWriter.cpp	/^static void PrintCallingConv(unsigned cc, raw_ostream &Out)$/;"	f	file:
PrintEscapedString	AsmWriter.cpp	/^static void PrintEscapedString(StringRef Name, raw_ostream &Out) {$/;"	f	file:
PrintFunctionPass	PrintModulePass.cpp	/^    PrintFunctionPass() : FunctionPass(ID), Banner(""), Out(&dbgs()), $/;"	f	class:__anon10::PrintFunctionPass
PrintFunctionPass	PrintModulePass.cpp	/^    PrintFunctionPass(const std::string &B, raw_ostream *o, bool DS)$/;"	f	class:__anon10::PrintFunctionPass
PrintFunctionPass	PrintModulePass.cpp	/^  class PrintFunctionPass : public FunctionPass {$/;"	c	namespace:__anon10	file:
PrintLLVMName	AsmWriter.cpp	/^static void PrintLLVMName(raw_ostream &OS, StringRef Name, PrefixType Prefix) {$/;"	f	file:
PrintLLVMName	AsmWriter.cpp	/^static void PrintLLVMName(raw_ostream &OS, const Value *V) {$/;"	f	file:
PrintLinkage	AsmWriter.cpp	/^static void PrintLinkage(GlobalValue::LinkageTypes LT,$/;"	f	file:
PrintModulePass	PrintModulePass.cpp	/^    PrintModulePass() : ModulePass(ID), Out(&dbgs()), $/;"	f	class:__anon10::PrintModulePass
PrintModulePass	PrintModulePass.cpp	/^    PrintModulePass(const std::string &B, raw_ostream *o, bool DS)$/;"	f	class:__anon10::PrintModulePass
PrintModulePass	PrintModulePass.cpp	/^  class PrintModulePass : public ModulePass {$/;"	c	namespace:__anon10	file:
PrintThreadLocalModel	AsmWriter.cpp	/^static void PrintThreadLocalModel(GlobalVariable::ThreadLocalMode TLM,$/;"	f	file:
PrintVisibility	AsmWriter.cpp	/^static void PrintVisibility(GlobalValue::VisibilityTypes Vis,$/;"	f	file:
PrinterTrait	LeaksContext.h	/^struct PrinterTrait {$/;"	s	namespace:llvm
PrinterTrait	LeaksContext.h	/^struct PrinterTrait<Value> {$/;"	s	namespace:llvm
Profile	Attributes.cpp	/^  static void Profile(FoldingSetNodeID &ID, ArrayRef<AttributeWithIndex> Attrs){$/;"	f	class:llvm::AttributeListImpl
Profile	Attributes.cpp	/^  void Profile(FoldingSetNodeID &ID) const {$/;"	f	class:llvm::AttributeListImpl
Profile	AttributesImpl.h	/^  static void Profile(FoldingSetNodeID &ID, uint64_t Bits) {$/;"	f	class:llvm::AttributesImpl
Profile	AttributesImpl.h	/^  void Profile(FoldingSetNodeID &ID) const {$/;"	f	class:llvm::AttributesImpl
Profile	Metadata.cpp	/^void MDNode::Profile(FoldingSetNodeID &ID) const {$/;"	f	class:MDNode
PtrToIntInst	Instructions.cpp	/^PtrToIntInst::PtrToIntInst($/;"	f	class:PtrToIntInst
REQUIRES_RTTI	Makefile	/^REQUIRES_RTTI = 1$/;"	m
Raw	Attributes.cpp	/^uint64_t Attributes::Raw() const {$/;"	f	class:Attributes
Raw	AttributesImpl.h	/^  uint64_t Raw() const { return Bits; } \/\/ FIXME: Remove.$/;"	f	class:llvm::AttributesImpl
RefCount	Attributes.cpp	/^  sys::cas_flag RefCount;$/;"	m	class:llvm::AttributeListImpl	file:
RegisterAGBase	Pass.cpp	/^RegisterAGBase::RegisterAGBase(const char *Name, const void *InterfaceID,$/;"	f	class:RegisterAGBase
RemoveFromUseList	Value.cpp	/^void ValueHandleBase::RemoveFromUseList() {$/;"	f	class:ValueHandleBase
ResumeInst	Instructions.cpp	/^ResumeInst::ResumeInst(Value *Exn, BasicBlock *InsertAtEnd)$/;"	f	class:ResumeInst
ResumeInst	Instructions.cpp	/^ResumeInst::ResumeInst(Value *Exn, Instruction *InsertBefore)$/;"	f	class:ResumeInst
ResumeInst	Instructions.cpp	/^ResumeInst::ResumeInst(const ResumeInst &RI)$/;"	f	class:ResumeInst
ReturnInst	Instructions.cpp	/^ReturnInst::ReturnInst(LLVMContext &C, Value *retVal, BasicBlock *InsertAtEnd)$/;"	f	class:ReturnInst
ReturnInst	Instructions.cpp	/^ReturnInst::ReturnInst(LLVMContext &C, Value *retVal, Instruction *InsertBefore)$/;"	f	class:ReturnInst
ReturnInst	Instructions.cpp	/^ReturnInst::ReturnInst(LLVMContext &Context, BasicBlock *InsertAtEnd)$/;"	f	class:ReturnInst
ReturnInst	Instructions.cpp	/^ReturnInst::ReturnInst(const ReturnInst &RI)$/;"	f	class:ReturnInst
ReturnType	LLVMContextImpl.h	/^    const Type *ReturnType;$/;"	m	struct:llvm::FunctionTypeKeyInfo::KeyTy
SExtInst	Instructions.cpp	/^SExtInst::SExtInst($/;"	f	class:SExtInst
SIToFPInst	Instructions.cpp	/^SIToFPInst::SIToFPInst($/;"	f	class:SIToFPInst
ST_DEBUG	AsmWriter.cpp	441;"	d	file:
ScopeInlinedAtIdx	LLVMContextImpl.h	/^  DenseMap<std::pair<MDNode*, MDNode*>, int> ScopeInlinedAtIdx;$/;"	m	class:llvm::LLVMContextImpl
ScopeInlinedAtRecords	LLVMContextImpl.h	/^  std::vector<std::pair<DebugRecVH, DebugRecVH> > ScopeInlinedAtRecords;$/;"	m	class:llvm::LLVMContextImpl
ScopeRecordIdx	LLVMContextImpl.h	/^  DenseMap<MDNode*, int> ScopeRecordIdx;$/;"	m	class:llvm::LLVMContextImpl
ScopeRecords	LLVMContextImpl.h	/^  std::vector<DebugRecVH> ScopeRecords;$/;"	m	class:llvm::LLVMContextImpl
SelectConstantExpr	ConstantsContext.h	/^  SelectConstantExpr(Constant *C1, Constant *C2, Constant *C3)$/;"	f	class:llvm::SelectConstantExpr
SelectConstantExpr	ConstantsContext.h	/^class SelectConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
ShouldPrintAfterPass	PassManager.cpp	/^static bool ShouldPrintAfterPass(const PassInfo *PI) {$/;"	f	namespace:llvm
ShouldPrintBeforeOrAfterPass	PassManager.cpp	/^static bool ShouldPrintBeforeOrAfterPass(const PassInfo *PI,$/;"	f	namespace:llvm
ShouldPrintBeforePass	PassManager.cpp	/^static bool ShouldPrintBeforePass(const PassInfo *PI) {$/;"	f	namespace:llvm
ShuffleVectorConstantExpr	ConstantsContext.h	/^  ShuffleVectorConstantExpr(Constant *C1, Constant *C2, Constant *C3)$/;"	f	class:llvm::ShuffleVectorConstantExpr
ShuffleVectorConstantExpr	ConstantsContext.h	/^class ShuffleVectorConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
ShuffleVectorInst	Instructions.cpp	/^ShuffleVectorInst::ShuffleVectorInst(Value *V1, Value *V2, Value *Mask,$/;"	f	class:ShuffleVectorInst
SlotTracker	AsmWriter.cpp	/^SlotTracker::SlotTracker(const Function *F)$/;"	f	class:SlotTracker
SlotTracker	AsmWriter.cpp	/^SlotTracker::SlotTracker(const Module *M)$/;"	f	class:SlotTracker
SlotTracker	AsmWriter.cpp	/^class SlotTracker {$/;"	c	namespace:__anon2	file:
StoreInst	Instructions.cpp	/^StoreInst::StoreInst(Value *val, Value *addr, BasicBlock *InsertAtEnd)$/;"	f	class:StoreInst
StoreInst	Instructions.cpp	/^StoreInst::StoreInst(Value *val, Value *addr, Instruction *InsertBefore)$/;"	f	class:StoreInst
StoreInst	Instructions.cpp	/^StoreInst::StoreInst(Value *val, Value *addr, bool isVolatile,$/;"	f	class:StoreInst
StringMapType	PassRegistry.cpp	/^  typedef StringMap<const PassInfo*> StringMapType;$/;"	t	struct:__anon9::PassRegistryImpl	file:
StripCast	IntrinsicInst.cpp	/^Value *DbgInfoIntrinsic::StripCast(Value *C) {$/;"	f	class:DbgInfoIntrinsic
StructConstants	LLVMContextImpl.h	/^  StructConstantsTy StructConstants;$/;"	m	class:llvm::LLVMContextImpl
StructConstantsTy	LLVMContextImpl.h	/^  typedef ConstantAggrUniqueMap<StructType, ConstantStruct> StructConstantsTy;$/;"	t	class:llvm::LLVMContextImpl
StructLayout	DataLayout.cpp	/^StructLayout::StructLayout(StructType *ST, const DataLayout &TD) {$/;"	f	class:StructLayout
StructLayoutMap	DataLayout.cpp	/^class StructLayoutMap {$/;"	c	namespace:__anon4	file:
StructTypeMap	LLVMContextImpl.h	/^  typedef DenseMap<StructType*, bool, AnonStructTypeKeyInfo> StructTypeMap;$/;"	t	class:llvm::LLVMContextImpl
Structure	PassManager.cpp	/^  None, Arguments, Structure, Executions, Details$/;"	e	enum:llvm::PassDebugLevel	file:
SwitchInst	Instructions.cpp	/^SwitchInst::SwitchInst(Value *Value, BasicBlock *Default, unsigned NumCases,$/;"	f	class:SwitchInst
SwitchInst	Instructions.cpp	/^SwitchInst::SwitchInst(const SwitchInst &SI)$/;"	f	class:SwitchInst
SymbolTableListTraits	BasicBlock.cpp	/^template class llvm::SymbolTableListTraits<Instruction, BasicBlock>;$/;"	m	class:llvm	typeref:class:llvm::	file:
SymbolTableListTraits	Function.cpp	/^template class llvm::SymbolTableListTraits<Argument, Function>;$/;"	m	class:llvm	typeref:class:llvm::	file:
SymbolTableListTraits	Function.cpp	/^template class llvm::SymbolTableListTraits<BasicBlock, Function>;$/;"	m	class:llvm	typeref:class:llvm::	file:
SymbolTableListTraits	Module.cpp	/^template class llvm::SymbolTableListTraits<Function, Module>;$/;"	m	class:llvm	typeref:class:llvm::	file:
SymbolTableListTraits	Module.cpp	/^template class llvm::SymbolTableListTraits<GlobalAlias, Module>;$/;"	m	class:llvm	typeref:class:llvm::	file:
SymbolTableListTraits	Module.cpp	/^template class llvm::SymbolTableListTraits<GlobalVariable, Module>;$/;"	m	class:llvm	typeref:class:llvm::	file:
TG	PassManager.cpp	/^  TimerGroup TG;$/;"	m	class:__anon8::TimingInfo	file:
TargetTransformInfo	TargetTransformInfo.cpp	/^TargetTransformInfo::TargetTransformInfo() : ImmutablePass(ID) {$/;"	f	class:TargetTransformInfo
TheFalseVal	LLVMContextImpl.h	/^  ConstantInt *TheFalseVal;$/;"	m	class:llvm::LLVMContextImpl
TheFunction	AsmWriter.cpp	/^  const Function* TheFunction;$/;"	m	class:__anon2::SlotTracker	file:
TheModule	AsmWriter.cpp	/^  const Module *TheModule;$/;"	m	class:__anon3::AssemblyWriter	file:
TheModule	AsmWriter.cpp	/^  const Module* TheModule;$/;"	m	class:__anon2::SlotTracker	file:
TheTimeInfo	PassManager.cpp	/^static TimingInfo *TheTimeInfo;$/;"	v	file:
TheTrueVal	LLVMContextImpl.h	/^  ConstantInt *TheTrueVal;$/;"	m	class:llvm::LLVMContextImpl
TimePassesIsEnabled	PassManager.cpp	/^bool llvm::TimePassesIsEnabled = false;$/;"	m	class:llvm	file:
TimingData	PassManager.cpp	/^  DenseMap<Pass*, Timer*> TimingData;$/;"	m	class:__anon8::TimingInfo	file:
TimingInfo	PassManager.cpp	/^  TimingInfo() : TG("... Pass execution timing report ...") {}$/;"	f	class:__anon8::TimingInfo
TimingInfo	PassManager.cpp	/^class TimingInfo {$/;"	c	namespace:__anon8	file:
TimingInfoMutex	PassManager.cpp	/^static ManagedStatic<sys::SmartMutex<true> > TimingInfoMutex;$/;"	m	namespace:__anon8	file:
ToFree	PassRegistry.cpp	/^  std::vector<const PassInfo*> ToFree;$/;"	m	struct:__anon9::PassRegistryImpl	file:
TruncInst	Instructions.cpp	/^TruncInst::TruncInst($/;"	f	class:TruncInst
Ts	LeaksContext.h	/^  SmallPtrSet<const T*, 8> Ts;$/;"	m	struct:llvm::LeakDetectorImpl
TypeAllocator	LLVMContextImpl.h	/^  BumpPtrAllocator TypeAllocator;$/;"	m	class:llvm::LLVMContextImpl
TypeClassInfo	ConstantsContext.h	/^    typedef DenseMapInfo<TypeClass*> TypeClassInfo;$/;"	t	struct:llvm::ConstantAggrUniqueMap::MapInfo
TypePrinter	AsmWriter.cpp	/^  TypePrinting TypePrinter;$/;"	m	class:__anon3::AssemblyWriter	file:
TypePrinting	AsmWriter.cpp	/^  TypePrinting() {}$/;"	f	class:__anon1::TypePrinting
TypePrinting	AsmWriter.cpp	/^class TypePrinting {$/;"	c	namespace:__anon1	file:
TypeToFloatSemantics	Constants.cpp	/^static const fltSemantics *TypeToFloatSemantics(Type *Ty) {$/;"	f	file:
UIToFPInst	Instructions.cpp	/^UIToFPInst::UIToFPInst($/;"	f	class:UIToFPInst
UVConstants	LLVMContextImpl.h	/^  DenseMap<Type*, UndefValue*> UVConstants;$/;"	m	class:llvm::LLVMContextImpl
UnaryConstantExpr	ConstantsContext.h	/^  UnaryConstantExpr(unsigned Opcode, Constant *C, Type *Ty)$/;"	f	class:llvm::UnaryConstantExpr
UnaryConstantExpr	ConstantsContext.h	/^class UnaryConstantExpr : public ConstantExpr {$/;"	c	namespace:llvm
UnreachableInst	Instructions.cpp	/^UnreachableInst::UnreachableInst(LLVMContext &Context, $/;"	f	class:UnreachableInst
UnreachableInst	Instructions.cpp	/^UnreachableInst::UnreachableInst(LLVMContext &Context, BasicBlock *InsertAtEnd)$/;"	f	class:UnreachableInst
UpgradeCallsToIntrinsic	AutoUpgrade.cpp	/^void llvm::UpgradeCallsToIntrinsic(Function* F) {$/;"	f	class:llvm
UpgradeGlobalVariable	AutoUpgrade.cpp	/^bool llvm::UpgradeGlobalVariable(GlobalVariable *GV) {$/;"	f	class:llvm
UpgradeIntrinsicCall	AutoUpgrade.cpp	/^void llvm::UpgradeIntrinsicCall(CallInst *CI, Function *NewFn) {$/;"	f	class:llvm
UpgradeIntrinsicFunction	AutoUpgrade.cpp	/^bool llvm::UpgradeIntrinsicFunction(Function *F, Function *&NewFn) {$/;"	f	class:llvm
UpgradeIntrinsicFunction1	AutoUpgrade.cpp	/^static bool UpgradeIntrinsicFunction1(Function *F, Function *&NewFn) {$/;"	f	file:
UpgradeSSE41Function	AutoUpgrade.cpp	/^static bool UpgradeSSE41Function(Function* F, Intrinsic::ID IID,$/;"	f	file:
ValType	ConstantsContext.h	/^  typedef ExprMapKeyType ValType;$/;"	t	struct:llvm::ConstantKeyData
ValType	ConstantsContext.h	/^  typedef InlineAsmKeyType ValType;$/;"	t	struct:llvm::ConstantKeyData
ValType	ConstantsContext.h	/^  typedef void ValType;$/;"	t	struct:llvm::ConstantKeyData
Value	Value.cpp	/^Value::Value(Type *ty, unsigned scid)$/;"	f	class:Value
ValueHandles	LLVMContextImpl.h	/^  ValueHandlesTy ValueHandles;$/;"	m	class:llvm::LLVMContextImpl
ValueHandlesTy	LLVMContextImpl.h	/^  typedef DenseMap<Value*, ValueHandleBase*> ValueHandlesTy;$/;"	t	class:llvm::LLVMContextImpl
ValueIsDeleted	Value.cpp	/^void ValueHandleBase::ValueIsDeleted(Value *V) {$/;"	f	class:ValueHandleBase
ValueIsRAUWd	Value.cpp	/^void ValueHandleBase::ValueIsRAUWd(Value *Old, Value *New) {$/;"	f	class:ValueHandleBase
ValueMap	AsmWriter.cpp	/^  typedef DenseMap<const Value*, unsigned> ValueMap;$/;"	t	class:__anon2::SlotTracker	file:
VectorConstants	LLVMContextImpl.h	/^  VectorConstantsTy VectorConstants;$/;"	m	class:llvm::LLVMContextImpl
VectorConstantsTy	LLVMContextImpl.h	/^  typedef ConstantAggrUniqueMap<VectorType, ConstantVector> VectorConstantsTy;$/;"	t	class:llvm::LLVMContextImpl
VectorType	Pass.cpp	/^    typedef AnalysisUsage::VectorType VectorType;$/;"	t	struct:__anon6::GetCFGOnlyPasses	file:
VectorType	Type.cpp	/^VectorType::VectorType(Type *ElType, unsigned NumEl)$/;"	f	class:VectorType
VectorTypes	LLVMContextImpl.h	/^  DenseMap<std::pair<Type *, unsigned>, VectorType*> VectorTypes;$/;"	m	class:llvm::LLVMContextImpl
Verifier	Verifier.cpp	/^    Verifier()$/;"	f	struct:__anon13::Verifier
Verifier	Verifier.cpp	/^    explicit Verifier(VerifierFailureAction ctn)$/;"	f	struct:__anon13::Verifier
Verifier	Verifier.cpp	/^  struct Verifier : public FunctionPass, public InstVisitor<Verifier> {$/;"	s	namespace:__anon13	file:
Verify	DebugInfo.cpp	/^bool DIBasicType::Verify() const {$/;"	f	class:DIBasicType
Verify	DebugInfo.cpp	/^bool DICompileUnit::Verify() const {$/;"	f	class:DICompileUnit
Verify	DebugInfo.cpp	/^bool DICompositeType::Verify() const {$/;"	f	class:DICompositeType
Verify	DebugInfo.cpp	/^bool DIDerivedType::Verify() const {$/;"	f	class:DIDerivedType
Verify	DebugInfo.cpp	/^bool DIGlobalVariable::Verify() const {$/;"	f	class:DIGlobalVariable
Verify	DebugInfo.cpp	/^bool DILocation::Verify() const {$/;"	f	class:DILocation
Verify	DebugInfo.cpp	/^bool DINameSpace::Verify() const {$/;"	f	class:DINameSpace
Verify	DebugInfo.cpp	/^bool DIObjCProperty::Verify() const {$/;"	f	class:DIObjCProperty
Verify	DebugInfo.cpp	/^bool DISubprogram::Verify() const {$/;"	f	class:DISubprogram
Verify	DebugInfo.cpp	/^bool DIType::Verify() const {$/;"	f	class:DIType
Verify	DebugInfo.cpp	/^bool DIVariable::Verify() const {$/;"	f	class:DIVariable
Verify	InlineAsm.cpp	/^bool InlineAsm::Verify(FunctionType *Ty, StringRef ConstStr) {$/;"	f	class:InlineAsm
VerifyAttributeCount	Verifier.cpp	/^static bool VerifyAttributeCount(const AttrListPtr &Attrs, unsigned Params) {$/;"	f	file:
VerifyCallSite	Verifier.cpp	/^void Verifier::VerifyCallSite(CallSite CS) {$/;"	f	class:Verifier
VerifyDomInfo	Dominators.cpp	/^static bool VerifyDomInfo = true;$/;"	v	file:
VerifyFunctionAttrs	Verifier.cpp	/^void Verifier::VerifyFunctionAttrs(FunctionType *FT,$/;"	f	class:Verifier
VerifyIntrinsicType	Verifier.cpp	/^bool Verifier::VerifyIntrinsicType(Type *Ty,$/;"	f	class:Verifier
VerifyParameterAttrs	Verifier.cpp	/^void Verifier::VerifyParameterAttrs(Attributes Attrs, Type *Ty,$/;"	f	class:Verifier
VoidTy	LLVMContextImpl.h	/^  Type VoidTy, LabelTy, HalfTy, FloatTy, DoubleTy, MetadataTy;$/;"	m	class:llvm::LLVMContextImpl
WriteAsOperand	AsmWriter.cpp	/^void llvm::WriteAsOperand(raw_ostream &Out, const Value *V,$/;"	f	class:llvm
WriteAsOperandInternal	AsmWriter.cpp	/^static void WriteAsOperandInternal(raw_ostream &Out, const Value *V,$/;"	f	file:
WriteConstantInternal	AsmWriter.cpp	/^static void WriteConstantInternal(raw_ostream &Out, const Constant *CV,$/;"	f	file:
WriteMDNodeBodyInternal	AsmWriter.cpp	/^static void WriteMDNodeBodyInternal(raw_ostream &Out, const MDNode *Node,$/;"	f	file:
WriteMDNodeComment	AsmWriter.cpp	/^static void WriteMDNodeComment(const MDNode *Node,$/;"	f	file:
WriteOptimizationInfo	AsmWriter.cpp	/^static void WriteOptimizationInfo(raw_ostream &Out, const User *U) {$/;"	f	file:
WriteType	Verifier.cpp	/^    void WriteType(Type *T) {$/;"	f	struct:__anon13::Verifier
WriteValue	Verifier.cpp	/^    void WriteValue(const Value *V) {$/;"	f	struct:__anon13::Verifier
X86_FP80Ty	LLVMContextImpl.h	/^  Type X86_FP80Ty, FP128Ty, PPC_FP128Ty, X86_MMXTy;$/;"	m	class:llvm::LLVMContextImpl
X86_MMXTy	LLVMContextImpl.h	/^  Type X86_FP80Ty, FP128Ty, PPC_FP128Ty, X86_MMXTy;$/;"	m	class:llvm::LLVMContextImpl
ZExtInst	Instructions.cpp	/^ZExtInst::ZExtInst($/;"	f	class:ZExtInst
abortIfBroken	Verifier.cpp	/^    bool abortIfBroken() {$/;"	f	struct:__anon13::Verifier
action	Verifier.cpp	/^    VerifierFailureAction action;$/;"	m	struct:__anon13::Verifier	file:
add	PassManager.cpp	/^  void add(Pass *P) {$/;"	f	class:llvm::FunctionPassManagerImpl
add	PassManager.cpp	/^  void add(Pass *P) {$/;"	f	class:llvm::PassManagerImpl
add	PassManager.cpp	/^void FunctionPassManager::add(Pass *P) {$/;"	f	class:FunctionPassManager
add	PassManager.cpp	/^void PMDataManager::add(Pass *P, bool ProcessAnalysis) {$/;"	f	class:PMDataManager
add	PassManager.cpp	/^void PassManager::add(Pass *P) {$/;"	f	class:PassManager
addAlignmentAttr	Attributes.cpp	/^AttrBuilder &AttrBuilder::addAlignmentAttr(unsigned Align) {$/;"	f	class:AttrBuilder
addAttr	Attributes.cpp	/^AttrListPtr AttrListPtr::addAttr(LLVMContext &C, unsigned Idx,$/;"	f	class:AttrListPtr
addAttr	Function.cpp	/^void Argument::addAttr(Attributes attr) {$/;"	f	class:Argument
addAttribute	Attributes.cpp	/^AttrBuilder &AttrBuilder::addAttribute(Attributes::AttrVal Val){$/;"	f	class:AttrBuilder
addAttribute	Function.cpp	/^void Function::addAttribute(unsigned i, Attributes attr) {$/;"	f	class:Function
addAttribute	Instructions.cpp	/^void CallInst::addAttribute(unsigned i, Attributes attr) {$/;"	f	class:CallInst
addAttribute	Instructions.cpp	/^void InvokeInst::addAttribute(unsigned i, Attributes attr) {$/;"	f	class:InvokeInst
addAttributes	Attributes.cpp	/^AttrBuilder &AttrBuilder::addAttributes(const Attributes &A) {$/;"	f	class:AttrBuilder
addCase	Instructions.cpp	/^void SwitchInst::addCase(ConstantInt *OnVal, BasicBlock *Dest) {$/;"	f	class:SwitchInst
addCase	Instructions.cpp	/^void SwitchInst::addCase(IntegersSubset& OnVal, BasicBlock *Dest) {$/;"	f	class:SwitchInst
addClause	Instructions.cpp	/^void LandingPadInst::addClause(Value *Val) {$/;"	f	class:LandingPadInst
addCompileUnit	DebugInfo.cpp	/^bool DebugInfoFinder::addCompileUnit(DICompileUnit CU) {$/;"	f	class:DebugInfoFinder
addDestination	Instructions.cpp	/^void IndirectBrInst::addDestination(BasicBlock *DestBB) {$/;"	f	class:IndirectBrInst
addGarbage	LeaksContext.h	/^  void addGarbage(const T* o) {$/;"	f	struct:llvm::LeakDetectorImpl
addGarbageObjectImpl	LeakDetector.cpp	/^void LeakDetector::addGarbageObjectImpl(const Value *Object) {$/;"	f	class:LeakDetector
addGarbageObjectImpl	LeakDetector.cpp	/^void LeakDetector::addGarbageObjectImpl(void *Object) {$/;"	f	class:LeakDetector
addGlobalVariable	DebugInfo.cpp	/^bool DebugInfoFinder::addGlobalVariable(DIGlobalVariable DIG) {$/;"	f	class:DebugInfoFinder
addLibrary	Module.cpp	/^void Module::addLibrary(StringRef Lib) {$/;"	f	class:Module
addLine	GCOV.cpp	/^void GCOVBlock::addLine(StringRef Filename, uint32_t LineNo) {$/;"	f	class:GCOVBlock
addLineCount	GCOV.cpp	/^void FileInfo::addLineCount(StringRef Filename, uint32_t Line, uint32_t Count) {$/;"	f	class:FileInfo
addLowerLevelRequiredPass	PassManager.cpp	/^void MPPassManager::addLowerLevelRequiredPass(Pass *P, Pass *RequiredPass) {$/;"	f	class:MPPassManager
addLowerLevelRequiredPass	PassManager.cpp	/^void PMDataManager::addLowerLevelRequiredPass(Pass *P, Pass *RequiredPass) {$/;"	f	class:PMDataManager
addModule	LLVMContext.cpp	/^void LLVMContext::addModule(Module *M) {$/;"	f	class:LLVMContext
addModuleFlag	Module.cpp	/^void Module::addModuleFlag(MDNode *Node) {$/;"	f	class:Module
addModuleFlag	Module.cpp	/^void Module::addModuleFlag(ModFlagBehavior Behavior, StringRef Key,$/;"	f	class:Module
addNodeToList	SymbolTableListTraitsImpl.h	/^::addNodeToList(ValueSubClass *V) {$/;"	f	class:llvm::SymbolTableListTraits
addOperand	Metadata.cpp	/^void NamedMDNode::addOperand(MDNode *M) {$/;"	f	class:NamedMDNode
addPreserved	Pass.cpp	/^AnalysisUsage &AnalysisUsage::addPreserved(StringRef Arg) {$/;"	f	class:AnalysisUsage
addRange	Metadata.cpp	/^static void addRange(SmallVector<Value*, 4> &EndPoints, ConstantInt *Low,$/;"	f	file:
addRawValue	Attributes.cpp	/^AttrBuilder &AttrBuilder::addRawValue(uint64_t Val) {$/;"	f	class:AttrBuilder
addRegistrationListener	PassRegistry.cpp	/^void PassRegistry::addRegistrationListener(PassRegistrationListener *L) {$/;"	f	class:PassRegistry
addRequiredID	Pass.cpp	/^AnalysisUsage &AnalysisUsage::addRequiredID(char &ID) {$/;"	f	class:AnalysisUsage
addRequiredID	Pass.cpp	/^AnalysisUsage &AnalysisUsage::addRequiredID(const void *ID) {$/;"	f	class:AnalysisUsage
addRequiredTransitiveID	Pass.cpp	/^AnalysisUsage &AnalysisUsage::addRequiredTransitiveID(char &ID) {$/;"	f	class:AnalysisUsage
addStackAlignmentAttr	Attributes.cpp	/^AttrBuilder &AttrBuilder::addStackAlignmentAttr(unsigned Align){$/;"	f	class:AttrBuilder
addSubprogram	DebugInfo.cpp	/^bool DebugInfoFinder::addSubprogram(DISubprogram SP) {$/;"	f	class:DebugInfoFinder
addType	DebugInfo.cpp	/^bool DebugInfoFinder::addType(DIType DT) {$/;"	f	class:DebugInfoFinder
allUsesReplacedWith	DebugLoc.cpp	/^void DebugRecVH::allUsesReplacedWith(Value *NewVa) {$/;"	f	class:DebugRecVH
allUsesReplacedWith	Metadata.cpp	/^void MDNodeOperand::allUsesReplacedWith(Value *NV) {$/;"	f	class:MDNodeOperand
allUsesReplacedWith	Value.cpp	/^void CallbackVH::allUsesReplacedWith(Value *) {}$/;"	f	class:CallbackVH
allocHungoffUses	Instructions.cpp	/^Use *PHINode::allocHungoffUses(unsigned N) const {$/;"	f	class:PHINode
allocHungoffUses	User.cpp	/^Use *User::allocHungoffUses(unsigned N) const {$/;"	f	class:llvm::User
anchor	Constants.cpp	/^void Constant::anchor() { }$/;"	f	class:Constant
anchor	Constants.cpp	/^void ConstantDataArray::anchor() {}$/;"	f	class:ConstantDataArray
anchor	Constants.cpp	/^void ConstantDataVector::anchor() {}$/;"	f	class:ConstantDataVector
anchor	Constants.cpp	/^void ConstantFP::anchor() { }$/;"	f	class:ConstantFP
anchor	Constants.cpp	/^void ConstantInt::anchor() { }$/;"	f	class:ConstantInt
anchor	Function.cpp	/^void Argument::anchor() { }$/;"	f	class:Argument
anchor	Instructions.cpp	/^void CastInst::anchor() {}$/;"	f	class:CastInst
anchor	Instructions.cpp	/^void CmpInst::anchor() {}$/;"	f	class:CmpInst
anchor	LLVMContextImpl.cpp	/^void BinaryConstantExpr::anchor() { }$/;"	f	class:BinaryConstantExpr
anchor	LLVMContextImpl.cpp	/^void CompareConstantExpr::anchor() { }$/;"	f	class:CompareConstantExpr
anchor	LLVMContextImpl.cpp	/^void ExtractElementConstantExpr::anchor() { }$/;"	f	class:ExtractElementConstantExpr
anchor	LLVMContextImpl.cpp	/^void ExtractValueConstantExpr::anchor() { }$/;"	f	class:ExtractValueConstantExpr
anchor	LLVMContextImpl.cpp	/^void GetElementPtrConstantExpr::anchor() { }$/;"	f	class:GetElementPtrConstantExpr
anchor	LLVMContextImpl.cpp	/^void InsertElementConstantExpr::anchor() { }$/;"	f	class:InsertElementConstantExpr
anchor	LLVMContextImpl.cpp	/^void InsertValueConstantExpr::anchor() { }$/;"	f	class:InsertValueConstantExpr
anchor	LLVMContextImpl.cpp	/^void SelectConstantExpr::anchor() { }$/;"	f	class:SelectConstantExpr
anchor	LLVMContextImpl.cpp	/^void ShuffleVectorConstantExpr::anchor() { }$/;"	f	class:ShuffleVectorConstantExpr
anchor	LLVMContextImpl.cpp	/^void UnaryConstantExpr::anchor() { }$/;"	f	class:UnaryConstantExpr
anchor	Metadata.cpp	/^void MDString::anchor() { }$/;"	f	class:MDString
anchor	PassManager.cpp	/^void FunctionPassManagerImpl::anchor() {}$/;"	f	class:llvm::FunctionPassManagerImpl
anchor	PassManager.cpp	/^void PassManagerImpl::anchor() {}$/;"	f	class:llvm::PassManagerImpl
anchor	User.cpp	/^void User::anchor() {}$/;"	f	class:llvm::User
areInvalidOperands	Instructions.cpp	/^const char *SelectInst::areInvalidOperands(Value *Op0, Value *Op1, Value *Op2) {$/;"	f	class:SelectInst
arg_empty	Function.cpp	/^bool Function::arg_empty() const {$/;"	f	class:Function
arg_size	Function.cpp	/^size_t Function::arg_size() const {$/;"	f	class:Function
asm_dialect	ConstantsContext.h	/^  InlineAsm::AsmDialect asm_dialect;$/;"	m	struct:llvm::InlineAsmKeyType
asm_string	ConstantsContext.h	/^  std::string asm_string;$/;"	m	struct:llvm::InlineAsmKeyType
assertLocalFunction	Metadata.cpp	/^static const Function *assertLocalFunction(const MDNode *N) {$/;"	f	file:
assignPassManager	PassManager.cpp	/^void BasicBlockPass::assignPassManager(PMStack &PMS,$/;"	f	class:BasicBlockPass
assignPassManager	PassManager.cpp	/^void FunctionPass::assignPassManager(PMStack &PMS,$/;"	f	class:FunctionPass
assignPassManager	PassManager.cpp	/^void ModulePass::assignPassManager(PMStack &PMS,$/;"	f	class:ModulePass
callsFunctionThatReturnsTwice	Function.cpp	/^bool Function::callsFunctionThatReturnsTwice() const {$/;"	f	class:Function
canBeMerged	Metadata.cpp	/^static bool canBeMerged(const ConstantRange &A, const ConstantRange &B) {$/;"	f	file:
canLosslesslyBitCastTo	Type.cpp	/^bool Type::canLosslesslyBitCastTo(Type *Ty) const {$/;"	f	class:Type
canTrap	Constants.cpp	/^bool Constant::canTrap() const {$/;"	f	class:Constant
castIsValid	Instructions.cpp	/^CastInst::castIsValid(Instruction::CastOps op, Value *S, Type *DstTy) {$/;"	f	class:CastInst
changeExtendedVectorElementTypeToInteger	ValueTypes.cpp	/^EVT EVT::changeExtendedVectorElementTypeToInteger() const {$/;"	f	class:EVT
checkForGarbageImpl	LeakDetector.cpp	/^void LeakDetector::checkForGarbageImpl(LLVMContext &Context, $/;"	f	class:LeakDetector
checkType	Value.cpp	/^static inline Type *checkType(Type *Ty) {$/;"	f	file:
cleanseInlinedVariable	DebugInfo.cpp	/^DIVariable llvm::cleanseInlinedVariable(MDNode *DV, LLVMContext &VMContext) {$/;"	f	class:llvm
cleanup	PassManager.cpp	/^void FPPassManager::cleanup() {$/;"	f	class:FPPassManager
clear	LeaksContext.h	/^  void clear() {$/;"	f	struct:llvm::LeakDetectorImpl
clear	TypeFinder.cpp	/^void TypeFinder::clear() {$/;"	f	class:TypeFinder
clearGC	Function.cpp	/^void Function::clearGC() {$/;"	f	class:Function
clearGarbage	LeakDetector.cpp	/^static void clearGarbage(LLVMContext &Context) {$/;"	f	file:
clearMetadataHashEntries	Metadata.cpp	/^void Instruction::clearMetadataHashEntries() {$/;"	f	class:Instruction
clone	Instruction.cpp	/^Instruction *Instruction::clone() const {$/;"	f	class:Instruction
clone_impl	Instructions.cpp	/^AllocaInst *AllocaInst::clone_impl() const {$/;"	f	class:AllocaInst
clone_impl	Instructions.cpp	/^AtomicCmpXchgInst *AtomicCmpXchgInst::clone_impl() const {$/;"	f	class:AtomicCmpXchgInst
clone_impl	Instructions.cpp	/^AtomicRMWInst *AtomicRMWInst::clone_impl() const {$/;"	f	class:AtomicRMWInst
clone_impl	Instructions.cpp	/^BinaryOperator *BinaryOperator::clone_impl() const {$/;"	f	class:BinaryOperator
clone_impl	Instructions.cpp	/^BitCastInst *BitCastInst::clone_impl() const {$/;"	f	class:BitCastInst
clone_impl	Instructions.cpp	/^BranchInst *BranchInst::clone_impl() const {$/;"	f	class:BranchInst
clone_impl	Instructions.cpp	/^CallInst *CallInst::clone_impl() const {$/;"	f	class:CallInst
clone_impl	Instructions.cpp	/^ExtractElementInst *ExtractElementInst::clone_impl() const {$/;"	f	class:ExtractElementInst
clone_impl	Instructions.cpp	/^ExtractValueInst *ExtractValueInst::clone_impl() const {$/;"	f	class:ExtractValueInst
clone_impl	Instructions.cpp	/^FCmpInst* FCmpInst::clone_impl() const {$/;"	f	class:FCmpInst
clone_impl	Instructions.cpp	/^FPExtInst *FPExtInst::clone_impl() const {$/;"	f	class:FPExtInst
clone_impl	Instructions.cpp	/^FPToSIInst *FPToSIInst::clone_impl() const {$/;"	f	class:FPToSIInst
clone_impl	Instructions.cpp	/^FPToUIInst *FPToUIInst::clone_impl() const {$/;"	f	class:FPToUIInst
clone_impl	Instructions.cpp	/^FPTruncInst *FPTruncInst::clone_impl() const {$/;"	f	class:FPTruncInst
clone_impl	Instructions.cpp	/^FenceInst *FenceInst::clone_impl() const {$/;"	f	class:FenceInst
clone_impl	Instructions.cpp	/^GetElementPtrInst *GetElementPtrInst::clone_impl() const {$/;"	f	class:GetElementPtrInst
clone_impl	Instructions.cpp	/^ICmpInst* ICmpInst::clone_impl() const {$/;"	f	class:ICmpInst
clone_impl	Instructions.cpp	/^IndirectBrInst *IndirectBrInst::clone_impl() const {$/;"	f	class:IndirectBrInst
clone_impl	Instructions.cpp	/^InsertElementInst *InsertElementInst::clone_impl() const {$/;"	f	class:InsertElementInst
clone_impl	Instructions.cpp	/^InsertValueInst *InsertValueInst::clone_impl() const {$/;"	f	class:InsertValueInst
clone_impl	Instructions.cpp	/^IntToPtrInst *IntToPtrInst::clone_impl() const {$/;"	f	class:IntToPtrInst
clone_impl	Instructions.cpp	/^InvokeInst *InvokeInst::clone_impl() const {$/;"	f	class:InvokeInst
clone_impl	Instructions.cpp	/^LandingPadInst *LandingPadInst::clone_impl() const {$/;"	f	class:LandingPadInst
clone_impl	Instructions.cpp	/^LoadInst *LoadInst::clone_impl() const {$/;"	f	class:LoadInst
clone_impl	Instructions.cpp	/^PHINode *PHINode::clone_impl() const {$/;"	f	class:PHINode
clone_impl	Instructions.cpp	/^PtrToIntInst *PtrToIntInst::clone_impl() const {$/;"	f	class:PtrToIntInst
clone_impl	Instructions.cpp	/^ResumeInst *ResumeInst::clone_impl() const {$/;"	f	class:ResumeInst
clone_impl	Instructions.cpp	/^ReturnInst *ReturnInst::clone_impl() const {$/;"	f	class:ReturnInst
clone_impl	Instructions.cpp	/^SExtInst *SExtInst::clone_impl() const {$/;"	f	class:SExtInst
clone_impl	Instructions.cpp	/^SIToFPInst *SIToFPInst::clone_impl() const {$/;"	f	class:SIToFPInst
clone_impl	Instructions.cpp	/^SelectInst *SelectInst::clone_impl() const {$/;"	f	class:SelectInst
clone_impl	Instructions.cpp	/^ShuffleVectorInst *ShuffleVectorInst::clone_impl() const {$/;"	f	class:ShuffleVectorInst
clone_impl	Instructions.cpp	/^StoreInst *StoreInst::clone_impl() const {$/;"	f	class:StoreInst
clone_impl	Instructions.cpp	/^SwitchInst *SwitchInst::clone_impl() const {$/;"	f	class:SwitchInst
clone_impl	Instructions.cpp	/^TruncInst *TruncInst::clone_impl() const {$/;"	f	class:TruncInst
clone_impl	Instructions.cpp	/^UIToFPInst *UIToFPInst::clone_impl() const {$/;"	f	class:UIToFPInst
clone_impl	Instructions.cpp	/^UnreachableInst *UnreachableInst::clone_impl() const {$/;"	f	class:UnreachableInst
clone_impl	Instructions.cpp	/^VAArgInst *VAArgInst::clone_impl() const {$/;"	f	class:VAArgInst
clone_impl	Instructions.cpp	/^ZExtInst *ZExtInst::clone_impl() const {$/;"	f	class:ZExtInst
collectLastUses	PassManager.cpp	/^void PMTopLevelManager::collectLastUses(SmallVectorImpl<Pass *> &LastUses,$/;"	f	class:PMTopLevelManager
collectLineCounts	GCOV.cpp	/^void GCOVBlock::collectLineCounts(FileInfo &FI) {$/;"	f	class:GCOVBlock
collectLineCounts	GCOV.cpp	/^void GCOVFile::collectLineCounts(FileInfo &FI) {$/;"	f	class:GCOVFile
collectLineCounts	GCOV.cpp	/^void GCOVFunction::collectLineCounts(FileInfo &FI) {$/;"	f	class:GCOVFunction
collectLineCounts	GCOV.cpp	/^void GCOVLines::collectLineCounts(FileInfo &FI, StringRef Filename, $/;"	f	class:GCOVLines
collectRequiredAnalysis	PassManager.cpp	/^void PMDataManager::collectRequiredAnalysis(SmallVectorImpl<Pass *> &RP,$/;"	f	class:PMDataManager
constraints	ConstantsContext.h	/^  std::string constraints;$/;"	m	struct:llvm::InlineAsmKeyType
copyAttributesFrom	Function.cpp	/^void Function::copyAttributesFrom(const GlobalValue *Src) {$/;"	f	class:Function
copyAttributesFrom	Globals.cpp	/^void GlobalValue::copyAttributesFrom(const GlobalValue *Src) {$/;"	f	class:GlobalValue
copyAttributesFrom	Globals.cpp	/^void GlobalVariable::copyAttributesFrom(const GlobalValue *Src) {$/;"	f	class:GlobalVariable
create	ConstantsContext.h	/^  static ConstantClass *create(TypeClass *Ty, ArrayRef<Constant*> V) {$/;"	f	struct:llvm::ConstantArrayCreator
create	ConstantsContext.h	/^  static ConstantClass *create(TypeClass *Ty, const ValType &V) {$/;"	f	struct:llvm::ConstantCreator
create	ConstantsContext.h	/^  static ConstantExpr *create(Type *Ty, const ExprMapKeyType &V,$/;"	f	struct:llvm::ConstantCreator
create	ConstantsContext.h	/^  static InlineAsm *create(PointerType *Ty, const InlineAsmKeyType &Key) {$/;"	f	struct:llvm::ConstantCreator
create	Type.cpp	/^StructType *StructType::create(ArrayRef<Type*> Elements) {$/;"	f	class:StructType
create	Type.cpp	/^StructType *StructType::create(ArrayRef<Type*> Elements, StringRef Name,$/;"	f	class:StructType
create	Type.cpp	/^StructType *StructType::create(LLVMContext &Context) {$/;"	f	class:StructType
create	Type.cpp	/^StructType *StructType::create(LLVMContext &Context, ArrayRef<Type*> Elements) {$/;"	f	class:StructType
create	Type.cpp	/^StructType *StructType::create(LLVMContext &Context, ArrayRef<Type*> Elements,$/;"	f	class:StructType
create	Type.cpp	/^StructType *StructType::create(LLVMContext &Context, StringRef Name) {$/;"	f	class:StructType
create	Type.cpp	/^StructType *StructType::create(StringRef Name, Type *type, ...) {$/;"	f	class:StructType
createArrayType	DIBuilder.cpp	/^DIType DIBuilder::createArrayType(uint64_t Size, uint64_t AlignInBits,$/;"	f	class:DIBuilder
createArtificialType	DIBuilder.cpp	/^DIType DIBuilder::createArtificialType(DIType Ty) {$/;"	f	class:DIBuilder
createBasicType	DIBuilder.cpp	/^DIType DIBuilder::createBasicType(StringRef Name, uint64_t SizeInBits,$/;"	f	class:DIBuilder
createCallHelper	IRBuilder.cpp	/^static CallInst *createCallHelper(Value *Callee, ArrayRef<Value *> Ops,$/;"	f	file:
createClassType	DIBuilder.cpp	/^DIType DIBuilder::createClassType(DIDescriptor Context, StringRef Name,$/;"	f	class:DIBuilder
createCompileUnit	DIBuilder.cpp	/^void DIBuilder::createCompileUnit(unsigned Lang, StringRef Filename,$/;"	f	class:DIBuilder
createComplexVariable	DIBuilder.cpp	/^DIVariable DIBuilder::createComplexVariable(unsigned Tag, DIDescriptor Scope,$/;"	f	class:DIBuilder
createEnumerationType	DIBuilder.cpp	/^DIType DIBuilder::createEnumerationType(DIDescriptor Scope, StringRef Name,$/;"	f	class:DIBuilder
createEnumerator	DIBuilder.cpp	/^DIEnumerator DIBuilder::createEnumerator(StringRef Name, uint64_t Val) {$/;"	f	class:DIBuilder
createFile	DIBuilder.cpp	/^DIFile DIBuilder::createFile(StringRef Filename, StringRef Directory) {$/;"	f	class:DIBuilder
createForwardDecl	DIBuilder.cpp	/^DIType DIBuilder::createForwardDecl(unsigned Tag, StringRef Name,$/;"	f	class:DIBuilder
createFree	Instructions.cpp	/^static Instruction* createFree(Value* Source, Instruction *InsertBefore,$/;"	f	file:
createFriend	DIBuilder.cpp	/^DIType DIBuilder::createFriend(DIType Ty, DIType FriendTy) {$/;"	f	class:DIBuilder
createFunction	DIBuilder.cpp	/^DISubprogram DIBuilder::createFunction(DIDescriptor Context,$/;"	f	class:DIBuilder
createGlobalVariable	DIBuilder.cpp	/^createGlobalVariable(StringRef Name, DIFile F, unsigned LineNumber,$/;"	f	class:DIBuilder
createInheritance	DIBuilder.cpp	/^DIType DIBuilder::createInheritance(DIType Ty, DIType BaseTy,$/;"	f	class:DIBuilder
createInlinedVariable	DebugInfo.cpp	/^DIVariable llvm::createInlinedVariable(MDNode *DV, MDNode *InlinedScope,$/;"	f	class:llvm
createLexicalBlock	DIBuilder.cpp	/^DILexicalBlock DIBuilder::createLexicalBlock(DIDescriptor Scope, DIFile File,$/;"	f	class:DIBuilder
createLexicalBlockFile	DIBuilder.cpp	/^DILexicalBlockFile DIBuilder::createLexicalBlockFile(DIDescriptor Scope,$/;"	f	class:DIBuilder
createLocalVariable	DIBuilder.cpp	/^DIVariable DIBuilder::createLocalVariable(unsigned Tag, DIDescriptor Scope,$/;"	f	class:DIBuilder
createMalloc	Instructions.cpp	/^static Instruction *createMalloc(Instruction *InsertBefore,$/;"	f	file:
createMemberType	DIBuilder.cpp	/^DIType DIBuilder::createMemberType(DIDescriptor Scope, StringRef Name,$/;"	f	class:DIBuilder
createMethod	DIBuilder.cpp	/^DISubprogram DIBuilder::createMethod(DIDescriptor Context,$/;"	f	class:DIBuilder
createNameSpace	DIBuilder.cpp	/^DINameSpace DIBuilder::createNameSpace(DIDescriptor Scope, StringRef Name,$/;"	f	class:DIBuilder
createNullPtrType	DIBuilder.cpp	/^DIType DIBuilder::createNullPtrType(StringRef Name) {$/;"	f	class:DIBuilder
createObjCIVar	DIBuilder.cpp	/^DIType DIBuilder::createObjCIVar(StringRef Name,$/;"	f	class:DIBuilder
createObjCProperty	DIBuilder.cpp	/^DIObjCProperty DIBuilder::createObjCProperty(StringRef Name,$/;"	f	class:DIBuilder
createObjectPointerType	DIBuilder.cpp	/^DIType DIBuilder::createObjectPointerType(DIType Ty) {$/;"	f	class:DIBuilder
createPass	Pass.cpp	/^Pass *Pass::createPass(AnalysisID ID) {$/;"	f	class:Pass
createPass	Pass.cpp	/^Pass *PassInfo::createPass() const {$/;"	f	class:PassInfo
createPointerType	DIBuilder.cpp	/^DIType DIBuilder::createPointerType(DIType PointeeTy, uint64_t SizeInBits,$/;"	f	class:DIBuilder
createPrintFunctionPass	PrintModulePass.cpp	/^FunctionPass *llvm::createPrintFunctionPass(const std::string &Banner,$/;"	f	class:llvm
createPrintModulePass	PrintModulePass.cpp	/^ModulePass *llvm::createPrintModulePass(llvm::raw_ostream *OS, $/;"	f	class:llvm
createPrinterPass	Pass.cpp	/^Pass *BasicBlockPass::createPrinterPass(raw_ostream &O,$/;"	f	class:BasicBlockPass
createPrinterPass	Pass.cpp	/^Pass *FunctionPass::createPrinterPass(raw_ostream &O,$/;"	f	class:FunctionPass
createPrinterPass	Pass.cpp	/^Pass *ModulePass::createPrinterPass(raw_ostream &O,$/;"	f	class:ModulePass
createPrinterPass	PassManager.cpp	/^  Pass *createPrinterPass(raw_ostream &O, const std::string &Banner) const {$/;"	f	class:llvm::FunctionPassManagerImpl
createPrinterPass	PassManager.cpp	/^  Pass *createPrinterPass(raw_ostream &O, const std::string &Banner) const {$/;"	f	class:llvm::MPPassManager
createPrinterPass	PassManager.cpp	/^  Pass *createPrinterPass(raw_ostream &O, const std::string &Banner) const {$/;"	f	class:llvm::PassManagerImpl
createQualifiedType	DIBuilder.cpp	/^DIType DIBuilder::createQualifiedType(unsigned Tag, DIType FromTy) {$/;"	f	class:DIBuilder
createReferenceType	DIBuilder.cpp	/^DIType DIBuilder::createReferenceType(unsigned Tag, DIType RTy) {$/;"	f	class:DIBuilder
createSlotTracker	AsmWriter.cpp	/^static SlotTracker *createSlotTracker(const Value *V) {$/;"	f	file:
createStaticVariable	DIBuilder.cpp	/^createStaticVariable(DIDescriptor Context, StringRef Name,$/;"	f	class:DIBuilder
createStructType	DIBuilder.cpp	/^DIType DIBuilder::createStructType(DIDescriptor Context, StringRef Name,$/;"	f	class:DIBuilder
createSubroutineType	DIBuilder.cpp	/^DIType DIBuilder::createSubroutineType(DIFile File, DIArray ParameterTypes) {$/;"	f	class:DIBuilder
createTemplateTypeParameter	DIBuilder.cpp	/^DIBuilder::createTemplateTypeParameter(DIDescriptor Context, StringRef Name,$/;"	f	class:DIBuilder
createTemplateValueParameter	DIBuilder.cpp	/^DIBuilder::createTemplateValueParameter(DIDescriptor Context, StringRef Name,$/;"	f	class:DIBuilder
createTemporaryType	DIBuilder.cpp	/^DIType DIBuilder::createTemporaryType() {$/;"	f	class:DIBuilder
createTemporaryType	DIBuilder.cpp	/^DIType DIBuilder::createTemporaryType(DIFile F) {$/;"	f	class:DIBuilder
createTheTimeInfo	PassManager.cpp	/^void TimingInfo::createTheTimeInfo() {$/;"	f	class:TimingInfo
createTypedef	DIBuilder.cpp	/^DIType DIBuilder::createTypedef(DIType Ty, StringRef Name, DIFile File,$/;"	f	class:DIBuilder
createUnionType	DIBuilder.cpp	/^DIType DIBuilder::createUnionType(DIDescriptor Scope, StringRef Name,$/;"	f	class:DIBuilder
createUnspecifiedParameter	DIBuilder.cpp	/^DIDescriptor DIBuilder::createUnspecifiedParameter() {$/;"	f	class:DIBuilder
createValueName	ValueSymbolTable.cpp	/^ValueName *ValueSymbolTable::createValueName(StringRef Name, Value *V) {$/;"	f	class:ValueSymbolTable
createVectorType	DIBuilder.cpp	/^DIType DIBuilder::createVectorType(uint64_t Size, uint64_t AlignInBits,$/;"	f	class:DIBuilder
createVerifierPass	Verifier.cpp	/^FunctionPass *llvm::createVerifierPass(VerifierFailureAction action) {$/;"	f	class:llvm
decodeLLVMAttributesForBitcode	Attributes.cpp	/^Attributes Attributes::decodeLLVMAttributesForBitcode(LLVMContext &C,$/;"	f	class:Attributes
deleteTemporary	Metadata.cpp	/^void MDNode::deleteTemporary(MDNode *N) {$/;"	f	class:MDNode
deleted	DebugLoc.cpp	/^void DebugRecVH::deleted() {$/;"	f	class:DebugRecVH
deleted	Metadata.cpp	/^void MDNodeOperand::deleted() {$/;"	f	class:MDNodeOperand
deleted	Value.cpp	/^void CallbackVH::deleted() {$/;"	f	class:CallbackVH
describes	DebugInfo.cpp	/^bool DISubprogram::describes(const Function *F) {$/;"	f	class:DISubprogram
destroy	Metadata.cpp	/^void MDNode::destroy() {$/;"	f	class:MDNode
destroyConstant	Constants.cpp	/^void BlockAddress::destroyConstant() {$/;"	f	class:BlockAddress
destroyConstant	Constants.cpp	/^void ConstantAggregateZero::destroyConstant() {$/;"	f	class:ConstantAggregateZero
destroyConstant	Constants.cpp	/^void ConstantArray::destroyConstant() {$/;"	f	class:ConstantArray
destroyConstant	Constants.cpp	/^void ConstantDataSequential::destroyConstant() {$/;"	f	class:ConstantDataSequential
destroyConstant	Constants.cpp	/^void ConstantExpr::destroyConstant() {$/;"	f	class:ConstantExpr
destroyConstant	Constants.cpp	/^void ConstantPointerNull::destroyConstant() {$/;"	f	class:ConstantPointerNull
destroyConstant	Constants.cpp	/^void ConstantStruct::destroyConstant() {$/;"	f	class:ConstantStruct
destroyConstant	Constants.cpp	/^void ConstantVector::destroyConstant() {$/;"	f	class:ConstantVector
destroyConstant	Constants.cpp	/^void UndefValue::destroyConstant() {$/;"	f	class:UndefValue
destroyConstant	Globals.cpp	/^void GlobalValue::destroyConstant() {$/;"	f	class:GlobalValue
destroyConstant	InlineAsm.cpp	/^void InlineAsm::destroyConstant() {$/;"	f	class:InlineAsm
destroyConstantImpl	Constants.cpp	/^void Constant::destroyConstantImpl() {$/;"	f	class:Constant
doFinalization	Pass.cpp	/^bool BasicBlockPass::doFinalization(Function &) {$/;"	f	class:BasicBlockPass
doFinalization	Pass.cpp	/^bool BasicBlockPass::doFinalization(Module &) {$/;"	f	class:BasicBlockPass
doFinalization	Pass.cpp	/^bool FunctionPass::doFinalization(Module &) {$/;"	f	class:FunctionPass
doFinalization	PassManager.cpp	/^bool BBPassManager::doFinalization(Function &F) {$/;"	f	class:BBPassManager
doFinalization	PassManager.cpp	/^bool BBPassManager::doFinalization(Module &M) {$/;"	f	class:BBPassManager
doFinalization	PassManager.cpp	/^bool FPPassManager::doFinalization(Module &M) {$/;"	f	class:FPPassManager
doFinalization	PassManager.cpp	/^bool FunctionPassManager::doFinalization() {$/;"	f	class:FunctionPassManager
doFinalization	PassManager.cpp	/^bool FunctionPassManagerImpl::doFinalization(Module &M) {$/;"	f	class:FunctionPassManagerImpl
doFinalization	Verifier.cpp	/^    bool doFinalization(Module &M) {$/;"	f	struct:__anon13::Verifier
doInitialization	Pass.cpp	/^bool BasicBlockPass::doInitialization(Function &) {$/;"	f	class:BasicBlockPass
doInitialization	Pass.cpp	/^bool BasicBlockPass::doInitialization(Module &) {$/;"	f	class:BasicBlockPass
doInitialization	Pass.cpp	/^bool FunctionPass::doInitialization(Module &) {$/;"	f	class:FunctionPass
doInitialization	PassManager.cpp	/^bool BBPassManager::doInitialization(Function &F) {$/;"	f	class:BBPassManager
doInitialization	PassManager.cpp	/^bool BBPassManager::doInitialization(Module &M) {$/;"	f	class:BBPassManager
doInitialization	PassManager.cpp	/^bool FPPassManager::doInitialization(Module &M) {$/;"	f	class:FPPassManager
doInitialization	PassManager.cpp	/^bool FunctionPassManager::doInitialization() {$/;"	f	class:FunctionPassManager
doInitialization	PassManager.cpp	/^bool FunctionPassManagerImpl::doInitialization(Module &M) {$/;"	f	class:FunctionPassManagerImpl
doInitialization	Verifier.cpp	/^    bool doInitialization(Module &M) {$/;"	f	struct:__anon13::Verifier
dominates	Dominators.cpp	/^bool DominatorTree::dominates(const BasicBlockEdge &BBE,$/;"	f	class:DominatorTree
dominates	Dominators.cpp	/^bool DominatorTree::dominates(const Instruction *Def,$/;"	f	class:DominatorTree
dropAllReferences	BasicBlock.cpp	/^void BasicBlock::dropAllReferences() {$/;"	f	class:BasicBlock
dropAllReferences	Function.cpp	/^void Function::dropAllReferences() {$/;"	f	class:Function
dropAllReferences	Metadata.cpp	/^void NamedMDNode::dropAllReferences() {$/;"	f	class:NamedMDNode
dropAllReferences	Module.cpp	/^void Module::dropAllReferences() {$/;"	f	class:Module
dump	AsmWriter.cpp	/^void Module::dump() const { print(dbgs(), 0); }$/;"	f	class:Module
dump	AsmWriter.cpp	/^void NamedMDNode::dump() const { print(dbgs(), 0); }$/;"	f	class:NamedMDNode
dump	AsmWriter.cpp	/^void Type::dump() const { print(dbgs()); }$/;"	f	class:Type
dump	AsmWriter.cpp	/^void Value::dump() const { print(dbgs()); dbgs() << '\\n'; }$/;"	f	class:Value
dump	Attributes.cpp	/^void AttrListPtr::dump() const {$/;"	f	class:AttrListPtr
dump	ConstantsContext.h	/^  void dump() const {$/;"	f	class:llvm::ConstantAggrUniqueMap
dump	ConstantsContext.h	/^  void dump() const {$/;"	f	class:llvm::ConstantUniqueMap
dump	DataLayout.cpp	/^  virtual void dump() const {}$/;"	f	class:__anon4::StructLayoutMap
dump	DebugInfo.cpp	/^void DIDescriptor::dump() const {$/;"	f	class:DIDescriptor
dump	DebugLoc.cpp	/^void DebugLoc::dump(const LLVMContext &Ctx) const {$/;"	f	class:DebugLoc
dump	GCOV.cpp	/^void GCOVBlock::dump() {$/;"	f	class:GCOVBlock
dump	GCOV.cpp	/^void GCOVFile::dump() {$/;"	f	class:GCOVFile
dump	GCOV.cpp	/^void GCOVFunction::dump() {$/;"	f	class:GCOVFunction
dump	GCOV.cpp	/^void GCOVLines::dump() {$/;"	f	class:GCOVLines
dump	Pass.cpp	/^void Pass::dump() const {$/;"	f	class:Pass
dump	PassManager.cpp	/^void PMStack::dump() const {$/;"	f	class:PMStack
dump	ValueSymbolTable.cpp	/^void ValueSymbolTable::dump() const {$/;"	f	class:ValueSymbolTable
dumpAnalysisUsage	PassManager.cpp	/^void PMDataManager::dumpAnalysisUsage(StringRef Msg, const Pass *P,$/;"	f	class:PMDataManager
dumpArguments	PassManager.cpp	/^void PMTopLevelManager::dumpArguments() const {$/;"	f	class:PMTopLevelManager
dumpLastUses	PassManager.cpp	/^void PMDataManager::dumpLastUses(Pass *P, unsigned Offset) const{$/;"	f	class:PMDataManager
dumpPassArguments	PassManager.cpp	/^void PMDataManager::dumpPassArguments() const {$/;"	f	class:PMDataManager
dumpPassInfo	PassManager.cpp	/^void PMDataManager::dumpPassInfo(Pass *P, enum PassDebuggingString S1,$/;"	f	class:PMDataManager
dumpPassStructure	Pass.cpp	/^void Pass::dumpPassStructure(unsigned Offset) {$/;"	f	class:Pass
dumpPassStructure	PassManager.cpp	/^  void dumpPassStructure(unsigned Offset) {$/;"	f	class:__anon7::BBPassManager
dumpPassStructure	PassManager.cpp	/^  void dumpPassStructure(unsigned Offset) {$/;"	f	class:llvm::MPPassManager
dumpPassStructure	PassManager.cpp	/^void FPPassManager::dumpPassStructure(unsigned Offset) {$/;"	f	class:FPPassManager
dumpPasses	PassManager.cpp	/^void PMTopLevelManager::dumpPasses() const {$/;"	f	class:PMTopLevelManager
dumpPreservedSet	PassManager.cpp	/^void PMDataManager::dumpPreservedSet(const Pass *P) const {$/;"	f	class:PMDataManager
dumpRequiredSet	PassManager.cpp	/^void PMDataManager::dumpRequiredSet(const Pass *P) const {$/;"	f	class:PMDataManager
emitError	LLVMContext.cpp	/^void LLVMContext::emitError(const Instruction *I, const Twine &ErrorStr) {$/;"	f	class:LLVMContext
emitError	LLVMContext.cpp	/^void LLVMContext::emitError(const Twine &ErrorStr) {$/;"	f	class:LLVMContext
emitError	LLVMContext.cpp	/^void LLVMContext::emitError(unsigned LocCookie, const Twine &ErrorStr) {$/;"	f	class:LLVMContext
encodeLLVMAttributesForBitcode	Attributes.cpp	/^uint64_t Attributes::encodeLLVMAttributesForBitcode(Attributes Attrs) {$/;"	f	class:Attributes
enumeratePasses	Pass.cpp	/^void PassRegistrationListener::enumeratePasses() {$/;"	f	class:PassRegistrationListener
enumerateWith	PassRegistry.cpp	/^void PassRegistry::enumerateWith(PassRegistrationListener *L) {$/;"	f	class:PassRegistry
eraseFromParent	BasicBlock.cpp	/^void BasicBlock::eraseFromParent() {$/;"	f	class:BasicBlock
eraseFromParent	Function.cpp	/^void Function::eraseFromParent() {$/;"	f	class:Function
eraseFromParent	Globals.cpp	/^void GlobalAlias::eraseFromParent() {$/;"	f	class:GlobalAlias
eraseFromParent	Globals.cpp	/^void GlobalVariable::eraseFromParent() {$/;"	f	class:GlobalVariable
eraseFromParent	Instruction.cpp	/^void Instruction::eraseFromParent() {$/;"	f	class:Instruction
eraseFromParent	Metadata.cpp	/^void NamedMDNode::eraseFromParent() {$/;"	f	class:NamedMDNode
eraseNamedMetadata	Module.cpp	/^void Module::eraseNamedMetadata(NamedMDNode *NMD) {$/;"	f	class:Module
evaluateFCmpRelation	ConstantFold.cpp	/^static FCmpInst::Predicate evaluateFCmpRelation(Constant *V1, Constant *V2) {$/;"	f	file:
evaluateICmpRelation	ConstantFold.cpp	/^static ICmpInst::Predicate evaluateICmpRelation(Constant *V1, Constant *V2,$/;"	f	file:
fMap	AsmWriter.cpp	/^  ValueMap fMap;$/;"	m	class:__anon2::SlotTracker	file:
fNext	AsmWriter.cpp	/^  unsigned fNext;$/;"	m	class:__anon2::SlotTracker	file:
finalize	DIBuilder.cpp	/^void DIBuilder::finalize() {$/;"	f	class:DIBuilder
find	ConstantsContext.h	/^  typename MapTy::iterator find(LookupKey Lookup) {$/;"	f	class:llvm::ConstantAggrUniqueMap
findAnalysisPass	PassManager.cpp	/^Pass *PMDataManager::findAnalysisPass(AnalysisID AID, bool SearchParent) {$/;"	f	class:PMDataManager
findAnalysisPass	PassManager.cpp	/^Pass *PMTopLevelManager::findAnalysisPass(AnalysisID AID) {$/;"	f	class:PMTopLevelManager
findAnalysisUsage	PassManager.cpp	/^AnalysisUsage *PMTopLevelManager::findAnalysisUsage(Pass *P) {$/;"	f	class:PMTopLevelManager
findExistingElement	ConstantsContext.h	/^  typename MapTy::iterator findExistingElement(ConstantClass *CP) {$/;"	f	class:llvm::ConstantAggrUniqueMap
findImplPass	PassManager.cpp	/^Pass *AnalysisResolver::findImplPass(Pass *P, AnalysisID AnalysisPI,$/;"	f	class:AnalysisResolver
fixupObjcLikeName	DebugInfo.cpp	/^static void fixupObjcLikeName(StringRef Str, SmallVectorImpl<char> &Out) {$/;"	f	file:
foldConstantCastPair	ConstantFold.cpp	/^foldConstantCastPair($/;"	f	file:
freeConstants	ConstantsContext.h	/^  void freeConstants() {$/;"	f	class:llvm::ConstantAggrUniqueMap
freeConstants	ConstantsContext.h	/^  void freeConstants() {$/;"	f	class:llvm::ConstantUniqueMap
freePass	PassManager.cpp	/^void PMDataManager::freePass(Pass *P, StringRef Msg,$/;"	f	class:PMDataManager
get	Attributes.cpp	/^AttrListPtr AttrListPtr::get(ArrayRef<AttributeWithIndex> Attrs) {$/;"	f	class:AttrListPtr
get	Attributes.cpp	/^Attributes Attributes::get(LLVMContext &Context, ArrayRef<AttrVal> Vals) {$/;"	f	class:Attributes
get	Attributes.cpp	/^Attributes Attributes::get(LLVMContext &Context, AttrBuilder &B) {$/;"	f	class:Attributes
get	Constants.cpp	/^BlockAddress *BlockAddress::get(BasicBlock *BB) {$/;"	f	class:BlockAddress
get	Constants.cpp	/^BlockAddress *BlockAddress::get(Function *F, BasicBlock *BB) {$/;"	f	class:BlockAddress
get	Constants.cpp	/^Constant *ConstantArray::get(ArrayType *Ty, ArrayRef<Constant*> V) {$/;"	f	class:ConstantArray
get	Constants.cpp	/^Constant *ConstantDataArray::get(LLVMContext &Context, ArrayRef<double> Elts) {$/;"	f	class:ConstantDataArray
get	Constants.cpp	/^Constant *ConstantDataArray::get(LLVMContext &Context, ArrayRef<float> Elts) {$/;"	f	class:ConstantDataArray
get	Constants.cpp	/^Constant *ConstantDataArray::get(LLVMContext &Context, ArrayRef<uint16_t> Elts){$/;"	f	class:ConstantDataArray
get	Constants.cpp	/^Constant *ConstantDataArray::get(LLVMContext &Context, ArrayRef<uint32_t> Elts){$/;"	f	class:ConstantDataArray
get	Constants.cpp	/^Constant *ConstantDataArray::get(LLVMContext &Context, ArrayRef<uint64_t> Elts){$/;"	f	class:ConstantDataArray
get	Constants.cpp	/^Constant *ConstantDataArray::get(LLVMContext &Context, ArrayRef<uint8_t> Elts) {$/;"	f	class:ConstantDataArray
get	Constants.cpp	/^Constant *ConstantDataVector::get(LLVMContext &Context, ArrayRef<double> Elts) {$/;"	f	class:ConstantDataVector
get	Constants.cpp	/^Constant *ConstantDataVector::get(LLVMContext &Context, ArrayRef<float> Elts) {$/;"	f	class:ConstantDataVector
get	Constants.cpp	/^Constant *ConstantDataVector::get(LLVMContext &Context, ArrayRef<uint16_t> Elts){$/;"	f	class:ConstantDataVector
get	Constants.cpp	/^Constant *ConstantDataVector::get(LLVMContext &Context, ArrayRef<uint32_t> Elts){$/;"	f	class:ConstantDataVector
get	Constants.cpp	/^Constant *ConstantDataVector::get(LLVMContext &Context, ArrayRef<uint64_t> Elts){$/;"	f	class:ConstantDataVector
get	Constants.cpp	/^Constant *ConstantDataVector::get(LLVMContext &Context, ArrayRef<uint8_t> Elts){$/;"	f	class:ConstantDataVector
get	Constants.cpp	/^Constant *ConstantExpr::get(unsigned Opcode, Constant *C1, Constant *C2,$/;"	f	class:ConstantExpr
get	Constants.cpp	/^Constant *ConstantFP::get(Type *Ty, StringRef Str) {$/;"	f	class:ConstantFP
get	Constants.cpp	/^Constant *ConstantFP::get(Type *Ty, double V) {$/;"	f	class:ConstantFP
get	Constants.cpp	/^Constant *ConstantInt::get(Type *Ty, const APInt& V) {$/;"	f	class:ConstantInt
get	Constants.cpp	/^Constant *ConstantInt::get(Type *Ty, uint64_t V, bool isSigned) {$/;"	f	class:ConstantInt
get	Constants.cpp	/^Constant *ConstantStruct::get(StructType *ST, ArrayRef<Constant*> V) {$/;"	f	class:ConstantStruct
get	Constants.cpp	/^Constant *ConstantStruct::get(StructType *T, ...) {$/;"	f	class:ConstantStruct
get	Constants.cpp	/^Constant *ConstantVector::get(ArrayRef<Constant*> V) {$/;"	f	class:ConstantVector
get	Constants.cpp	/^ConstantAggregateZero *ConstantAggregateZero::get(Type *Ty) {$/;"	f	class:ConstantAggregateZero
get	Constants.cpp	/^ConstantFP* ConstantFP::get(LLVMContext &Context, const APFloat& V) {$/;"	f	class:ConstantFP
get	Constants.cpp	/^ConstantInt *ConstantInt::get(IntegerType *Ty, uint64_t V, $/;"	f	class:ConstantInt
get	Constants.cpp	/^ConstantInt *ConstantInt::get(IntegerType* Ty, StringRef Str,$/;"	f	class:ConstantInt
get	Constants.cpp	/^ConstantInt *ConstantInt::get(LLVMContext &Context, const APInt &V) {$/;"	f	class:ConstantInt
get	Constants.cpp	/^ConstantPointerNull *ConstantPointerNull::get(PointerType *Ty) {$/;"	f	class:ConstantPointerNull
get	Constants.cpp	/^UndefValue *UndefValue::get(Type *Ty) {$/;"	f	class:UndefValue
get	DataLayout.cpp	/^LayoutAlignElem::get(AlignTypeEnum align_type, unsigned abi_align,$/;"	f	class:LayoutAlignElem
get	DataLayout.cpp	/^PointerAlignElem::get(uint32_t addr_space, unsigned abi_align,$/;"	f	class:PointerAlignElem
get	DebugLoc.cpp	/^DebugLoc DebugLoc::get(unsigned Line, unsigned Col,$/;"	f	class:DebugLoc
get	InlineAsm.cpp	/^InlineAsm *InlineAsm::get(FunctionType *Ty, StringRef AsmString,$/;"	f	class:InlineAsm
get	LLVMContextImpl.h	/^  MDNode *get() const {$/;"	f	class:llvm::DebugRecVH
get	Metadata.cpp	/^MDNode *MDNode::get(LLVMContext &Context, ArrayRef<Value*> Vals) {$/;"	f	class:MDNode
get	Metadata.cpp	/^MDString *MDString::get(LLVMContext &Context, StringRef Str) {$/;"	f	class:MDString
get	Type.cpp	/^ArrayType *ArrayType::get(Type *elementType, uint64_t NumElements) {$/;"	f	class:ArrayType
get	Type.cpp	/^FunctionType *FunctionType::get(Type *Result, bool isVarArg) {$/;"	f	class:FunctionType
get	Type.cpp	/^FunctionType *FunctionType::get(Type *ReturnType,$/;"	f	class:FunctionType
get	Type.cpp	/^IntegerType *IntegerType::get(LLVMContext &C, unsigned NumBits) {$/;"	f	class:IntegerType
get	Type.cpp	/^PointerType *PointerType::get(Type *EltTy, unsigned AddressSpace) {$/;"	f	class:PointerType
get	Type.cpp	/^StructType *StructType::get(LLVMContext &Context, ArrayRef<Type*> ETypes, $/;"	f	class:StructType
get	Type.cpp	/^StructType *StructType::get(LLVMContext &Context, bool isPacked) {$/;"	f	class:StructType
get	Type.cpp	/^StructType *StructType::get(Type *type, ...) {$/;"	f	class:StructType
get	Type.cpp	/^VectorType *VectorType::get(Type *elementType, unsigned NumElements) {$/;"	f	class:VectorType
getABIIntegerTypeAlignment	DataLayout.cpp	/^unsigned DataLayout::getABIIntegerTypeAlignment(unsigned BitWidth) const {$/;"	f	class:DataLayout
getABITypeAlignment	DataLayout.cpp	/^unsigned DataLayout::getABITypeAlignment(Type *Ty) const {$/;"	f	class:DataLayout
getAISize	Instructions.cpp	/^static Value *getAISize(LLVMContext &Context, Value *Amt) {$/;"	f	file:
getAShr	Constants.cpp	/^Constant *ConstantExpr::getAShr(Constant *C1, Constant *C2, bool isExact) {$/;"	f	class:ConstantExpr
getAdd	Constants.cpp	/^Constant *ConstantExpr::getAdd(Constant *C1, Constant *C2,$/;"	f	class:ConstantExpr
getAddress	IntrinsicInst.cpp	/^Value *DbgDeclareInst::getAddress() const {$/;"	f	class:DbgDeclareInst
getAddressSpace	Instructions.cpp	/^unsigned GetElementPtrInst::getAddressSpace(Value *Ptr) {$/;"	f	class:GetElementPtrInst
getAdjustedAnalysisPointer	Pass.cpp	/^void *Pass::getAdjustedAnalysisPointer(AnalysisID AID) {$/;"	f	class:Pass
getAggregateElement	Constants.cpp	/^Constant *Constant::getAggregateElement(Constant *Elt) const {$/;"	f	class:Constant
getAggregateElement	Constants.cpp	/^Constant *Constant::getAggregateElement(unsigned Elt) const {$/;"	f	class:Constant
getAliasedGlobal	Globals.cpp	/^const GlobalValue *GlobalAlias::getAliasedGlobal() const {$/;"	f	class:GlobalAlias
getAlignOf	Constants.cpp	/^Constant *ConstantExpr::getAlignOf(Type* Ty) {$/;"	f	class:ConstantExpr
getAlignment	Attributes.cpp	/^uint64_t AttrBuilder::getAlignment() const {$/;"	f	class:AttrBuilder
getAlignment	Attributes.cpp	/^uint64_t AttributesImpl::getAlignment() const {$/;"	f	class:AttributesImpl
getAlignment	Attributes.cpp	/^unsigned Attributes::getAlignment() const {$/;"	f	class:Attributes
getAlignment	DataLayout.cpp	/^unsigned DataLayout::getAlignment(Type *Ty, bool abi_or_pref) const {$/;"	f	class:DataLayout
getAlignmentInfo	DataLayout.cpp	/^unsigned DataLayout::getAlignmentInfo(AlignTypeEnum AlignType,$/;"	f	class:DataLayout
getAllMetadataImpl	Metadata.cpp	/^void Instruction::getAllMetadataImpl(SmallVectorImpl<std::pair<unsigned,$/;"	f	class:Instruction
getAllMetadataOtherThanDebugLocImpl	Metadata.cpp	/^getAllMetadataOtherThanDebugLocImpl(SmallVectorImpl<std::pair<unsigned,$/;"	f	class:Instruction
getAllOnesValue	Constants.cpp	/^Constant *Constant::getAllOnesValue(Type *Ty) {$/;"	f	class:Constant
getAllocatedType	Instructions.cpp	/^Type *AllocaInst::getAllocatedType() const {$/;"	f	class:AllocaInst
getAnalysisIfAvailable	PassManager.cpp	/^Pass *AnalysisResolver::getAnalysisIfAvailable(AnalysisID ID, bool dir) const {$/;"	f	class:AnalysisResolver
getAnalysisUsage	Pass.cpp	/^void Pass::getAnalysisUsage(AnalysisUsage &) const {$/;"	f	class:Pass
getAnalysisUsage	PassManager.cpp	/^  void getAnalysisUsage(AnalysisUsage &Info) const {$/;"	f	class:__anon7::BBPassManager
getAnalysisUsage	PassManager.cpp	/^  void getAnalysisUsage(AnalysisUsage &Info) const {$/;"	f	class:llvm::FunctionPassManagerImpl
getAnalysisUsage	PassManager.cpp	/^  void getAnalysisUsage(AnalysisUsage &Info) const {$/;"	f	class:llvm::MPPassManager
getAnalysisUsage	PassManager.cpp	/^  void getAnalysisUsage(AnalysisUsage &Info) const {$/;"	f	class:llvm::PassManagerImpl
getAnalysisUsage	PrintModulePass.cpp	/^    virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:__anon10::PrintFunctionPass
getAnalysisUsage	PrintModulePass.cpp	/^    virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	class:__anon10::PrintModulePass
getAnalysisUsage	Verifier.cpp	/^    virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	struct:__anon12::PreVerifier
getAnalysisUsage	Verifier.cpp	/^    virtual void getAnalysisUsage(AnalysisUsage &AU) const {$/;"	f	struct:__anon13::Verifier
getAnd	Constants.cpp	/^Constant *ConstantExpr::getAnd(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getArgNo	Function.cpp	/^unsigned Argument::getArgNo() const {$/;"	f	class:Argument
getArrayNumElements	Type.cpp	/^uint64_t Type::getArrayNumElements() const {$/;"	f	class:Type
getAsImmutablePass	Pass.cpp	/^ImmutablePass *Pass::getAsImmutablePass() {$/;"	f	class:Pass
getAsMDNode	DebugLoc.cpp	/^MDNode *DebugLoc::getAsMDNode(const LLVMContext &Ctx) const {$/;"	f	class:DebugLoc
getAsPMDataManager	Pass.cpp	/^PMDataManager *Pass::getAsPMDataManager() {$/;"	f	class:Pass
getAsPMDataManager	PassManager.cpp	/^  virtual PMDataManager *getAsPMDataManager() { return this; }$/;"	f	class:__anon7::BBPassManager
getAsPMDataManager	PassManager.cpp	/^  virtual PMDataManager *getAsPMDataManager() { return this; }$/;"	f	class:llvm::FunctionPassManagerImpl
getAsPMDataManager	PassManager.cpp	/^  virtual PMDataManager *getAsPMDataManager() { return this; }$/;"	f	class:llvm::MPPassManager
getAsPMDataManager	PassManager.cpp	/^  virtual PMDataManager *getAsPMDataManager() { return this; }$/;"	f	class:llvm::PassManagerImpl
getAsPass	PassManager.cpp	/^  virtual Pass *getAsPass() { return this; }$/;"	f	class:__anon7::BBPassManager
getAsPass	PassManager.cpp	/^  virtual Pass *getAsPass() { return this; }$/;"	f	class:llvm::FunctionPassManagerImpl
getAsPass	PassManager.cpp	/^  virtual Pass *getAsPass() { return this; }$/;"	f	class:llvm::MPPassManager
getAsPass	PassManager.cpp	/^  virtual Pass *getAsPass() { return this; }$/;"	f	class:llvm::PassManagerImpl
getAsString	Attributes.cpp	/^std::string Attributes::getAsString() const {$/;"	f	class:Attributes
getAttrMask	Attributes.cpp	/^uint64_t AttributesImpl::getAttrMask(uint64_t Val) {$/;"	f	class:AttributesImpl
getAttributes	Attributes.cpp	/^Attributes AttrListPtr::getAttributes(unsigned Idx) const {$/;"	f	class:AttrListPtr
getAttributesAtIndex	Attributes.cpp	/^Attributes &AttrListPtr::getAttributesAtIndex(unsigned i) const {$/;"	f	class:AttrListPtr
getBinOpAbsorber	Constants.cpp	/^Constant *ConstantExpr::getBinOpAbsorber(unsigned Opcode, Type *Ty) {$/;"	f	class:ConstantExpr
getBinOpIdentity	Constants.cpp	/^Constant *ConstantExpr::getBinOpIdentity(unsigned Opcode, Type *Ty) {$/;"	f	class:ConstantExpr
getBitCast	Constants.cpp	/^Constant *ConstantExpr::getBitCast(Constant *C, Type *DstTy) {$/;"	f	class:ConstantExpr
getCallFrameTypeAlignment	DataLayout.cpp	/^unsigned DataLayout::getCallFrameTypeAlignment(Type *Ty) const {$/;"	f	class:DataLayout
getCallee	Instructions.cpp	/^User::op_iterator CallSite::getCallee() const {$/;"	f	class:CallSite
getCast	Constants.cpp	/^Constant *ConstantExpr::getCast(unsigned oc, Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getCastOpcode	Instructions.cpp	/^CastInst::getCastOpcode($/;"	f	class:CastInst
getCastedInt8PtrValue	IRBuilder.cpp	/^Value *IRBuilderBase::getCastedInt8PtrValue(Value *Ptr) {$/;"	f	class:IRBuilderBase
getCompare	Constants.cpp	/^Constant *ConstantExpr::getCompare(unsigned short Predicate, $/;"	f	class:ConstantExpr
getConstantField	DebugInfo.cpp	/^Constant *DIDescriptor::getConstantField(unsigned Elt) const {$/;"	f	class:DIDescriptor
getContainedManager	PassManager.cpp	/^  FPPassManager *getContainedManager(unsigned N) {$/;"	f	class:llvm::FunctionPassManagerImpl
getContainedManager	PassManager.cpp	/^  MPPassManager *getContainedManager(unsigned N) {$/;"	f	class:llvm::PassManagerImpl
getContainedPass	PassManager.cpp	/^  BasicBlockPass *getContainedPass(unsigned N) {$/;"	f	class:__anon7::BBPassManager
getContainedPass	PassManager.cpp	/^  ModulePass *getContainedPass(unsigned N) {$/;"	f	class:llvm::MPPassManager
getContext	BasicBlock.cpp	/^LLVMContext &BasicBlock::getContext() const {$/;"	f	class:BasicBlock
getContext	Function.cpp	/^LLVMContext &Function::getContext() const {$/;"	f	class:Function
getContext	Value.cpp	/^LLVMContext &Value::getContext() const { return VTy->getContext(); }$/;"	f	class:Value
getCurrentFunctionReturnType	IRBuilder.cpp	/^Type *IRBuilderBase::getCurrentFunctionReturnType() const {$/;"	f	class:IRBuilderBase
getDICompositeType	DebugInfo.cpp	/^DICompositeType llvm::getDICompositeType(DIType T) {$/;"	f	class:llvm
getDISubprogram	DebugInfo.cpp	/^DISubprogram llvm::getDISubprogram(const MDNode *Scope) {$/;"	f	class:llvm
getDeclaration	Function.cpp	/^Function *Intrinsic::getDeclaration(Module *M, ID id, ArrayRef<Type*> Tys) {$/;"	f	class:Intrinsic
getDescriptorField	DebugInfo.cpp	/^DIDescriptor DIDescriptor::getDescriptorField(unsigned Elt) const {$/;"	f	class:DIDescriptor
getDirectory	DebugInfo.cpp	/^StringRef DIScope::getDirectory() const {$/;"	f	class:DIScope
getDoublePtrTy	Type.cpp	/^PointerType *Type::getDoublePtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getDoubleTy	Type.cpp	/^Type *Type::getDoubleTy(LLVMContext &C) { return &C.pImpl->DoubleTy; }$/;"	f	class:Type
getEVT	ValueTypes.cpp	/^EVT EVT::getEVT(Type *Ty, bool HandleUnknown){$/;"	f	class:EVT
getEVTString	ValueTypes.cpp	/^std::string EVT::getEVTString() const {$/;"	f	class:EVT
getElementAsAPFloat	Constants.cpp	/^APFloat ConstantDataSequential::getElementAsAPFloat(unsigned Elt) const {$/;"	f	class:ConstantDataSequential
getElementAsConstant	Constants.cpp	/^Constant *ConstantDataSequential::getElementAsConstant(unsigned Elt) const {$/;"	f	class:ConstantDataSequential
getElementAsDouble	Constants.cpp	/^double ConstantDataSequential::getElementAsDouble(unsigned Elt) const {$/;"	f	class:ConstantDataSequential
getElementAsFloat	Constants.cpp	/^float ConstantDataSequential::getElementAsFloat(unsigned Elt) const {$/;"	f	class:ConstantDataSequential
getElementAsInteger	Constants.cpp	/^uint64_t ConstantDataSequential::getElementAsInteger(unsigned Elt) const {$/;"	f	class:ConstantDataSequential
getElementByteSize	Constants.cpp	/^uint64_t ConstantDataSequential::getElementByteSize() const {$/;"	f	class:ConstantDataSequential
getElementContainingOffset	DataLayout.cpp	/^unsigned StructLayout::getElementContainingOffset(uint64_t Offset) const {$/;"	f	class:StructLayout
getElementPointer	Constants.cpp	/^const char *ConstantDataSequential::getElementPointer(unsigned Elt) const {$/;"	f	class:ConstantDataSequential
getElementType	Constants.cpp	/^Type *ConstantDataSequential::getElementType() const {$/;"	f	class:ConstantDataSequential
getElementValue	Constants.cpp	/^Constant *ConstantAggregateZero::getElementValue(Constant *C) const {$/;"	f	class:ConstantAggregateZero
getElementValue	Constants.cpp	/^Constant *ConstantAggregateZero::getElementValue(unsigned Idx) const {$/;"	f	class:ConstantAggregateZero
getElementValue	Constants.cpp	/^UndefValue *UndefValue::getElementValue(Constant *C) const {$/;"	f	class:UndefValue
getElementValue	Constants.cpp	/^UndefValue *UndefValue::getElementValue(unsigned Idx) const {$/;"	f	class:UndefValue
getEmptyKey	ConstantsContext.h	/^    static inline ConstantClass* getEmptyKey() {$/;"	f	struct:llvm::ConstantAggrUniqueMap::MapInfo
getEmptyKey	LLVMContextImpl.h	/^  static inline FunctionType* getEmptyKey() {$/;"	f	struct:llvm::FunctionTypeKeyInfo
getEmptyKey	LLVMContextImpl.h	/^  static inline KeyTy getEmptyKey() { $/;"	f	struct:llvm::DenseMapAPFloatKeyInfo
getEmptyKey	LLVMContextImpl.h	/^  static inline KeyTy getEmptyKey() { return KeyTy(APInt(1,0), 0); }$/;"	f	struct:llvm::DenseMapAPIntKeyInfo
getEmptyKey	LLVMContextImpl.h	/^  static inline StructType* getEmptyKey() {$/;"	f	struct:llvm::AnonStructTypeKeyInfo
getEndianness	Module.cpp	/^Module::Endianness Module::getEndianness() const {$/;"	f	class:Module
getEnumTypes	DebugInfo.cpp	/^DIArray DICompileUnit::getEnumTypes() const {$/;"	f	class:DICompileUnit
getExtendedIntegerVT	ValueTypes.cpp	/^EVT EVT::getExtendedIntegerVT(LLVMContext &Context, unsigned BitWidth) {$/;"	f	class:EVT
getExtendedSizeInBits	ValueTypes.cpp	/^unsigned EVT::getExtendedSizeInBits() const {$/;"	f	class:EVT
getExtendedVectorElementType	ValueTypes.cpp	/^EVT EVT::getExtendedVectorElementType() const {$/;"	f	class:EVT
getExtendedVectorNumElements	ValueTypes.cpp	/^unsigned EVT::getExtendedVectorNumElements() const {$/;"	f	class:EVT
getExtendedVectorVT	ValueTypes.cpp	/^EVT EVT::getExtendedVectorVT(LLVMContext &Context, EVT VT,$/;"	f	class:EVT
getExtractElement	Constants.cpp	/^Constant *ConstantExpr::getExtractElement(Constant *Val, Constant *Idx) {$/;"	f	class:ConstantExpr
getExtractValue	Constants.cpp	/^Constant *ConstantExpr::getExtractValue(Constant *Agg,$/;"	f	class:ConstantExpr
getFAdd	Constants.cpp	/^Constant *ConstantExpr::getFAdd(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getFCmp	Constants.cpp	/^ConstantExpr::getFCmp(unsigned short pred, Constant *LHS, Constant *RHS) {$/;"	f	class:ConstantExpr
getFDiv	Constants.cpp	/^Constant *ConstantExpr::getFDiv(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getFMul	Constants.cpp	/^Constant *ConstantExpr::getFMul(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getFNeg	Constants.cpp	/^Constant *ConstantExpr::getFNeg(Constant *C) {$/;"	f	class:ConstantExpr
getFNegArgument	Instructions.cpp	/^Value *BinaryOperator::getFNegArgument(Value *BinOp) {$/;"	f	class:BinaryOperator
getFNegArgument	Instructions.cpp	/^const Value *BinaryOperator::getFNegArgument(const Value *BinOp) {$/;"	f	class:BinaryOperator
getFP128PtrTy	Type.cpp	/^PointerType *Type::getFP128PtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getFP128Ty	Type.cpp	/^Type *Type::getFP128Ty(LLVMContext &C) { return &C.pImpl->FP128Ty; }$/;"	f	class:Type
getFPAccuracy	Instructions.cpp	/^float FPMathOperator::getFPAccuracy() const {$/;"	f	class:FPMathOperator
getFPCast	Constants.cpp	/^Constant *ConstantExpr::getFPCast(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getFPExtend	Constants.cpp	/^Constant *ConstantExpr::getFPExtend(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getFPMantissaWidth	Type.cpp	/^int Type::getFPMantissaWidth() const {$/;"	f	class:Type
getFPToSI	Constants.cpp	/^Constant *ConstantExpr::getFPToSI(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getFPToUI	Constants.cpp	/^Constant *ConstantExpr::getFPToUI(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getFPTrunc	Constants.cpp	/^Constant *ConstantExpr::getFPTrunc(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getFRem	Constants.cpp	/^Constant *ConstantExpr::getFRem(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getFSub	Constants.cpp	/^Constant *ConstantExpr::getFSub(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getFalse	Constants.cpp	/^Constant *ConstantInt::getFalse(Type *Ty) {$/;"	f	class:ConstantInt
getFalse	Constants.cpp	/^ConstantInt *ConstantInt::getFalse(LLVMContext &Context) {$/;"	f	class:ConstantInt
getFilename	DebugInfo.cpp	/^StringRef DIScope::getFilename() const {$/;"	f	class:DIScope
getFirstInsertionPt	BasicBlock.cpp	/^BasicBlock::iterator BasicBlock::getFirstInsertionPt() {$/;"	f	class:BasicBlock
getFirstNonPHI	BasicBlock.cpp	/^Instruction* BasicBlock::getFirstNonPHI() {$/;"	f	class:BasicBlock
getFirstNonPHIOrDbg	BasicBlock.cpp	/^Instruction* BasicBlock::getFirstNonPHIOrDbg() {$/;"	f	class:BasicBlock
getFirstNonPHIOrDbgOrLifetime	BasicBlock.cpp	/^Instruction* BasicBlock::getFirstNonPHIOrDbgOrLifetime() {$/;"	f	class:BasicBlock
getFloatPtrTy	Type.cpp	/^PointerType *Type::getFloatPtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getFloatTy	Type.cpp	/^Type *Type::getFloatTy(LLVMContext &C) { return &C.pImpl->FloatTy; }$/;"	f	class:Type
getFnSpecificMDNode	DebugInfo.cpp	/^NamedMDNode *llvm::getFnSpecificMDNode(const Module &M, DISubprogram Fn) {$/;"	f	class:llvm
getFoldedAlignOf	ConstantFold.cpp	/^static Constant *getFoldedAlignOf(Type *Ty, Type *DestTy,$/;"	f	file:
getFoldedCast	Constants.cpp	/^static inline Constant *getFoldedCast($/;"	f	file:
getFoldedOffsetOf	ConstantFold.cpp	/^static Constant *getFoldedOffsetOf(Type *Ty, Constant *FieldNo,$/;"	f	file:
getFoldedSizeOf	ConstantFold.cpp	/^static Constant *getFoldedSizeOf(Type *Ty, Type *DestTy,$/;"	f	file:
getFromDILexicalBlock	DebugLoc.cpp	/^DebugLoc DebugLoc::getFromDILexicalBlock(MDNode *N) {$/;"	f	class:DebugLoc
getFromDILocation	DebugLoc.cpp	/^DebugLoc DebugLoc::getFromDILocation(MDNode *N) {$/;"	f	class:DebugLoc
getFunction	Metadata.cpp	/^const Function *MDNode::getFunction() const {$/;"	f	class:MDNode
getFunction	Module.cpp	/^Function *Module::getFunction(StringRef Name) const {$/;"	f	class:Module
getFunctionField	DebugInfo.cpp	/^Function *DIDescriptor::getFunctionField(unsigned Elt) const {$/;"	f	class:DIDescriptor
getFunctionForValue	Metadata.cpp	/^static const Function *getFunctionForValue(Value *V) {$/;"	f	file:
getFunctionNumParams	Type.cpp	/^unsigned Type::getFunctionNumParams() const {$/;"	f	class:Type
getFunctionParamType	Type.cpp	/^Type *Type::getFunctionParamType(unsigned i) const {$/;"	f	class:Type
getFunctionType	Function.cpp	/^FunctionType *Function::getFunctionType() const {$/;"	f	class:Function
getFunctionType	InlineAsm.cpp	/^FunctionType *InlineAsm::getFunctionType() const {$/;"	f	class:InlineAsm
getGC	Function.cpp	/^const char *Function::getGC() const {$/;"	f	class:Function
getGetElementPtr	Constants.cpp	/^Constant *ConstantExpr::getGetElementPtr(Constant *C, ArrayRef<Value *> Idxs,$/;"	f	class:ConstantExpr
getGlobalContext	LLVMContext.cpp	/^LLVMContext& llvm::getGlobalContext() {$/;"	f	class:llvm
getGlobalSlot	AsmWriter.cpp	/^int SlotTracker::getGlobalSlot(const GlobalValue *V) {$/;"	f	class:SlotTracker
getGlobalVariable	Module.cpp	/^GlobalVariable *Module::getGlobalVariable(StringRef Name,$/;"	f	class:Module
getGlobalVariableField	DebugInfo.cpp	/^GlobalVariable *DIDescriptor::getGlobalVariableField(unsigned Elt) const {$/;"	f	class:DIDescriptor
getGlobalVariables	DebugInfo.cpp	/^DIArray DICompileUnit::getGlobalVariables() const {$/;"	f	class:DICompileUnit
getHalfPtrTy	Type.cpp	/^PointerType *Type::getHalfPtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getHalfTy	Type.cpp	/^Type *Type::getHalfTy(LLVMContext &C) { return &C.pImpl->HalfTy; }$/;"	f	class:Type
getHashValue	ConstantsContext.h	/^    static unsigned getHashValue(const ConstantClass *CP) {$/;"	f	struct:llvm::ConstantAggrUniqueMap::MapInfo
getHashValue	ConstantsContext.h	/^    static unsigned getHashValue(const LookupKey &Val) {$/;"	f	struct:llvm::ConstantAggrUniqueMap::MapInfo
getHashValue	DebugLoc.cpp	/^unsigned DenseMapInfo<DebugLoc>::getHashValue(const DebugLoc &Key) {$/;"	f	class:DenseMapInfo
getHashValue	LLVMContextImpl.h	/^  static unsigned getHashValue(const FunctionType *FT) {$/;"	f	struct:llvm::FunctionTypeKeyInfo
getHashValue	LLVMContextImpl.h	/^  static unsigned getHashValue(const KeyTy &Key) {$/;"	f	struct:llvm::DenseMapAPFloatKeyInfo
getHashValue	LLVMContextImpl.h	/^  static unsigned getHashValue(const KeyTy &Key) {$/;"	f	struct:llvm::DenseMapAPIntKeyInfo
getHashValue	LLVMContextImpl.h	/^  static unsigned getHashValue(const KeyTy& Key) {$/;"	f	struct:llvm::AnonStructTypeKeyInfo
getHashValue	LLVMContextImpl.h	/^  static unsigned getHashValue(const KeyTy& Key) {$/;"	f	struct:llvm::FunctionTypeKeyInfo
getHashValue	LLVMContextImpl.h	/^  static unsigned getHashValue(const StructType *ST) {$/;"	f	struct:llvm::AnonStructTypeKeyInfo
getICmp	Constants.cpp	/^ConstantExpr::getICmp(unsigned short pred, Constant *LHS, Constant *RHS) {$/;"	f	class:ConstantExpr
getIfExists	Metadata.cpp	/^MDNode *MDNode::getIfExists(LLVMContext &Context, ArrayRef<Value*> Vals) {$/;"	f	class:MDNode
getImpl	Constants.cpp	/^Constant *ConstantDataSequential::getImpl(StringRef Elements, Type *Ty) {$/;"	f	class:ConstantDataSequential
getImpl	PassRegistry.cpp	/^void *PassRegistry::getImpl() const {$/;"	f	class:PassRegistry
getImpliedUser	Use.cpp	/^const Use *Use::getImpliedUser() const {$/;"	f	class:llvm::Use
getIndexedOffset	DataLayout.cpp	/^uint64_t DataLayout::getIndexedOffset(Type *ptrTy,$/;"	f	class:DataLayout
getIndexedType	Instructions.cpp	/^Type *ExtractValueInst::getIndexedType(Type *Agg,$/;"	f	class:ExtractValueInst
getIndexedType	Instructions.cpp	/^Type *GetElementPtrInst::getIndexedType(Type *Ptr, ArrayRef<Value *> IdxList) {$/;"	f	class:GetElementPtrInst
getIndexedType	Instructions.cpp	/^Type *GetElementPtrInst::getIndexedType(Type *Ptr, ArrayRef<uint64_t> IdxList) {$/;"	f	class:GetElementPtrInst
getIndexedType	Instructions.cpp	/^Type *GetElementPtrInst::getIndexedType(Type *Ptr,$/;"	f	class:GetElementPtrInst
getIndexedTypeInternal	Instructions.cpp	/^static Type *getIndexedTypeInternal(Type *Ptr, ArrayRef<IndexTy> IdxList) {$/;"	f	file:
getIndices	Constants.cpp	/^ArrayRef<unsigned> ConstantExpr::getIndices() const {$/;"	f	class:ConstantExpr
getInfinity	Constants.cpp	/^ConstantFP *ConstantFP::getInfinity(Type *Ty, bool Negative) {$/;"	f	class:ConstantFP
getInlineAsmDiagnosticContext	LLVMContext.cpp	/^void *LLVMContext::getInlineAsmDiagnosticContext() const {$/;"	f	class:LLVMContext
getInlineAsmDiagnosticHandler	LLVMContext.cpp	/^LLVMContext::getInlineAsmDiagnosticHandler() const {$/;"	f	class:LLVMContext
getInlinedAt	DebugInfo.cpp	/^MDNode *DIVariable::getInlinedAt() const {$/;"	f	class:DIVariable
getInlinedAt	DebugLoc.cpp	/^MDNode *DebugLoc::getInlinedAt(const LLVMContext &Ctx) const {$/;"	f	class:DebugLoc
getInsertElement	Constants.cpp	/^Constant *ConstantExpr::getInsertElement(Constant *Val, Constant *Elt, $/;"	f	class:ConstantExpr
getInsertValue	Constants.cpp	/^Constant *ConstantExpr::getInsertValue(Constant *Agg, Constant *Val,$/;"	f	class:ConstantExpr
getInt	DataLayout.cpp	/^static int getInt(StringRef R) {$/;"	f	file:
getInt16PtrTy	Type.cpp	/^PointerType *Type::getInt16PtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getInt16Ty	Type.cpp	/^IntegerType *Type::getInt16Ty(LLVMContext &C) { return &C.pImpl->Int16Ty; }$/;"	f	class:Type
getInt1PtrTy	Type.cpp	/^PointerType *Type::getInt1PtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getInt1Ty	Type.cpp	/^IntegerType *Type::getInt1Ty(LLVMContext &C) { return &C.pImpl->Int1Ty; }$/;"	f	class:Type
getInt32PtrTy	Type.cpp	/^PointerType *Type::getInt32PtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getInt32Ty	Type.cpp	/^IntegerType *Type::getInt32Ty(LLVMContext &C) { return &C.pImpl->Int32Ty; }$/;"	f	class:Type
getInt64PtrTy	Type.cpp	/^PointerType *Type::getInt64PtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getInt64Ty	Type.cpp	/^IntegerType *Type::getInt64Ty(LLVMContext &C) { return &C.pImpl->Int64Ty; }$/;"	f	class:Type
getInt8PtrTy	Type.cpp	/^PointerType *Type::getInt8PtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getInt8Ty	Type.cpp	/^IntegerType *Type::getInt8Ty(LLVMContext &C) { return &C.pImpl->Int8Ty; }$/;"	f	class:Type
getIntNPtrTy	Type.cpp	/^PointerType *Type::getIntNPtrTy(LLVMContext &C, unsigned N, unsigned AS) {$/;"	f	class:Type
getIntNTy	Type.cpp	/^IntegerType *Type::getIntNTy(LLVMContext &C, unsigned N) {$/;"	f	class:Type
getIntPtrType	DataLayout.cpp	/^IntegerType *DataLayout::getIntPtrType(LLVMContext &C,$/;"	f	class:DataLayout
getIntToPtr	Constants.cpp	/^Constant *ConstantExpr::getIntToPtr(Constant *C, Type *DstTy) {$/;"	f	class:ConstantExpr
getIntegerBitWidth	Type.cpp	/^unsigned Type::getIntegerBitWidth() const {$/;"	f	class:Type
getIntegerCast	Constants.cpp	/^Constant *ConstantExpr::getIntegerCast(Constant *C, Type *Ty, $/;"	f	class:ConstantExpr
getIntegerValue	Constants.cpp	/^Constant *Constant::getIntegerValue(Type *Ty, const APInt &V) {$/;"	f	class:Constant
getIntrinsicID	Function.cpp	/^unsigned Function::getIntrinsicID() const {$/;"	f	class:Function
getIntrinsicInfoTableEntries	Function.cpp	/^void Intrinsic::getIntrinsicInfoTableEntries(ID id, $/;"	f	class:Intrinsic
getInversePredicate	Instructions.cpp	/^CmpInst::Predicate CmpInst::getInversePredicate(Predicate pred) {$/;"	f	class:CmpInst
getLShr	Constants.cpp	/^Constant *ConstantExpr::getLShr(Constant *C1, Constant *C2, bool isExact) {$/;"	f	class:ConstantExpr
getLabelTy	Type.cpp	/^Type *Type::getLabelTy(LLVMContext &C) { return &C.pImpl->LabelTy; }$/;"	f	class:Type
getLandingPadInst	BasicBlock.cpp	/^LandingPadInst *BasicBlock::getLandingPadInst() {$/;"	f	class:BasicBlock
getLandingPadInst	BasicBlock.cpp	/^const LandingPadInst *BasicBlock::getLandingPadInst() const {$/;"	f	class:BasicBlock
getLandingPadInst	Instructions.cpp	/^LandingPadInst *InvokeInst::getLandingPadInst() const {$/;"	f	class:InvokeInst
getLocalSlot	AsmWriter.cpp	/^int SlotTracker::getLocalSlot(const Value *V) {$/;"	f	class:SlotTracker
getMDKindID	LLVMContext.cpp	/^unsigned LLVMContext::getMDKindID(StringRef Name) const {$/;"	f	class:LLVMContext
getMDKindID	Module.cpp	/^unsigned Module::getMDKindID(StringRef Name) const {$/;"	f	class:Module
getMDKindNames	LLVMContext.cpp	/^void LLVMContext::getMDKindNames(SmallVectorImpl<StringRef> &Names) const {$/;"	f	class:LLVMContext
getMDKindNames	Module.cpp	/^void Module::getMDKindNames(SmallVectorImpl<StringRef> &Result) const {$/;"	f	class:Module
getMDNode	Metadata.cpp	/^MDNode *MDNode::getMDNode(LLVMContext &Context, ArrayRef<Value*> Vals,$/;"	f	class:MDNode
getMask	Type.cpp	/^APInt IntegerType::getMask() const {$/;"	f	class:IntegerType
getMaskValue	Instructions.cpp	/^int ShuffleVectorInst::getMaskValue(Constant *Mask, unsigned i) {$/;"	f	class:ShuffleVectorInst
getMetadataImpl	Metadata.cpp	/^MDNode *Instruction::getMetadataImpl(StringRef Kind) const {$/;"	f	class:Instruction
getMetadataImpl	Metadata.cpp	/^MDNode *Instruction::getMetadataImpl(unsigned KindID) const {$/;"	f	class:Instruction
getMetadataSlot	AsmWriter.cpp	/^int SlotTracker::getMetadataSlot(const MDNode *N) {$/;"	f	class:SlotTracker
getMetadataTy	Type.cpp	/^Type *Type::getMetadataTy(LLVMContext &C) { return &C.pImpl->MetadataTy; }$/;"	f	class:Type
getModuleFlagsMetadata	Module.cpp	/^NamedMDNode *Module::getModuleFlagsMetadata() const {$/;"	f	class:Module
getModuleFlagsMetadata	Module.cpp	/^getModuleFlagsMetadata(SmallVectorImpl<ModuleFlagEntry> &Flags) const {$/;"	f	class:Module
getModuleFromVal	AsmWriter.cpp	/^static const Module *getModuleFromVal(const Value *V) {$/;"	f	file:
getMostGenericFPMath	Metadata.cpp	/^MDNode *MDNode::getMostGenericFPMath(MDNode *A, MDNode *B) {$/;"	f	class:MDNode
getMostGenericRange	Metadata.cpp	/^MDNode *MDNode::getMostGenericRange(MDNode *A, MDNode *B) {$/;"	f	class:MDNode
getMostGenericTBAA	Metadata.cpp	/^MDNode *MDNode::getMostGenericTBAA(MDNode *A, MDNode *B) {$/;"	f	class:MDNode
getMul	Constants.cpp	/^Constant *ConstantExpr::getMul(Constant *C1, Constant *C2,$/;"	f	class:ConstantExpr
getNMDOps	Metadata.cpp	/^static SmallVector<TrackingVH<MDNode>, 4> &getNMDOps(void *Operands) {$/;"	f	file:
getName	Function.cpp	/^std::string Intrinsic::getName(ID id, ArrayRef<Type*> Tys) {$/;"	f	class:Intrinsic
getName	Metadata.cpp	/^StringRef NamedMDNode::getName() const {$/;"	f	class:NamedMDNode
getName	Type.cpp	/^StringRef StructType::getName() const {$/;"	f	class:StructType
getName	Value.cpp	/^StringRef Value::getName() const {$/;"	f	class:Value
getNamedAlias	Module.cpp	/^GlobalAlias *Module::getNamedAlias(StringRef Name) const {$/;"	f	class:Module
getNamedMetadata	Module.cpp	/^NamedMDNode *Module::getNamedMetadata(const Twine &Name) const {$/;"	f	class:Module
getNamedValue	Module.cpp	/^GlobalValue *Module::getNamedValue(StringRef Name) const {$/;"	f	class:Module
getNeg	Constants.cpp	/^Constant *ConstantExpr::getNeg(Constant *C, bool HasNUW, bool HasNSW) {$/;"	f	class:ConstantExpr
getNegArgument	Instructions.cpp	/^Value *BinaryOperator::getNegArgument(Value *BinOp) {$/;"	f	class:BinaryOperator
getNegArgument	Instructions.cpp	/^const Value *BinaryOperator::getNegArgument(const Value *BinOp) {$/;"	f	class:BinaryOperator
getNegativeZero	Constants.cpp	/^ConstantFP *ConstantFP::getNegativeZero(Type *Ty) {$/;"	f	class:ConstantFP
getNonCompileUnitScope	DIBuilder.cpp	/^static MDNode *getNonCompileUnitScope(MDNode *N) {$/;"	f	file:
getNot	Constants.cpp	/^Constant *ConstantExpr::getNot(Constant *C) {$/;"	f	class:ConstantExpr
getNotArgument	Instructions.cpp	/^Value *BinaryOperator::getNotArgument(Value *BinOp) {$/;"	f	class:BinaryOperator
getNotArgument	Instructions.cpp	/^const Value *BinaryOperator::getNotArgument(const Value *BinOp) {$/;"	f	class:BinaryOperator
getNullValue	Constants.cpp	/^Constant *Constant::getNullValue(Type *Ty) {$/;"	f	class:Constant
getNumAddrElements	DebugInfo.cpp	/^unsigned DIVariable::getNumAddrElements() const {$/;"	f	class:DIVariable
getNumAttrs	Attributes.cpp	/^unsigned AttrListPtr::getNumAttrs() const {$/;"	f	class:AttrListPtr
getNumElements	Constants.cpp	/^unsigned ConstantDataSequential::getNumElements() const {$/;"	f	class:ConstantDataSequential
getNumElements	DebugInfo.cpp	/^unsigned DIArray::getNumElements() const {$/;"	f	class:DIArray
getNumOperands	Metadata.cpp	/^unsigned NamedMDNode::getNumOperands() const {$/;"	f	class:NamedMDNode
getNumSlots	Attributes.cpp	/^unsigned AttrListPtr::getNumSlots() const {$/;"	f	class:AttrListPtr
getNumSuccessorsV	Instructions.cpp	/^unsigned BranchInst::getNumSuccessorsV() const {$/;"	f	class:BranchInst
getNumSuccessorsV	Instructions.cpp	/^unsigned IndirectBrInst::getNumSuccessorsV() const {$/;"	f	class:IndirectBrInst
getNumSuccessorsV	Instructions.cpp	/^unsigned InvokeInst::getNumSuccessorsV() const {$/;"	f	class:InvokeInst
getNumSuccessorsV	Instructions.cpp	/^unsigned ResumeInst::getNumSuccessorsV() const {$/;"	f	class:ResumeInst
getNumSuccessorsV	Instructions.cpp	/^unsigned ReturnInst::getNumSuccessorsV() const {$/;"	f	class:ReturnInst
getNumSuccessorsV	Instructions.cpp	/^unsigned SwitchInst::getNumSuccessorsV() const {$/;"	f	class:SwitchInst
getNumSuccessorsV	Instructions.cpp	/^unsigned UnreachableInst::getNumSuccessorsV() const {$/;"	f	class:UnreachableInst
getNumUses	Value.cpp	/^unsigned Value::getNumUses() const {$/;"	f	class:Value
getObjCProperty	DebugInfo.cpp	/^MDNode *DIDerivedType::getObjCProperty() const {$/;"	f	class:DIDerivedType
getOffsetOf	Constants.cpp	/^Constant *ConstantExpr::getOffsetOf(StructType* STy, unsigned FieldNo) {$/;"	f	class:ConstantExpr
getOffsetOf	Constants.cpp	/^Constant *ConstantExpr::getOffsetOf(Type* Ty, Constant *FieldNo) {$/;"	f	class:ConstantExpr
getOnTheFlyPass	PassManager.cpp	/^Pass *PMDataManager::getOnTheFlyPass(Pass *P, AnalysisID PI, Function &F) {$/;"	f	class:PMDataManager
getOnTheFlyPass	PassManager.cpp	/^Pass* MPPassManager::getOnTheFlyPass(Pass *MP, AnalysisID PI, Function &F){$/;"	f	class:MPPassManager
getOpcodeName	Constants.cpp	/^const char *ConstantExpr::getOpcodeName() const {$/;"	f	class:ConstantExpr
getOpcodeName	Instruction.cpp	/^const char *Instruction::getOpcodeName(unsigned OpCode) {$/;"	f	class:Instruction
getOperand	Metadata.cpp	/^MDNode *NamedMDNode::getOperand(unsigned i) const {$/;"	f	class:NamedMDNode
getOperand	Metadata.cpp	/^Value *MDNode::getOperand(unsigned i) const {$/;"	f	class:MDNode
getOperandPtr	Metadata.cpp	/^static MDNodeOperand *getOperandPtr(MDNode *N, unsigned Op) {$/;"	f	file:
getOr	Constants.cpp	/^Constant *ConstantExpr::getOr(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getOrAddScopeInlinedAtIdxEntry	DebugLoc.cpp	/^int LLVMContextImpl::getOrAddScopeInlinedAtIdxEntry(MDNode *Scope, MDNode *IA,$/;"	f	class:LLVMContextImpl
getOrAddScopeRecordIdxEntry	DebugLoc.cpp	/^int LLVMContextImpl::getOrAddScopeRecordIdxEntry(MDNode *Scope,$/;"	f	class:LLVMContextImpl
getOrCreate	ConstantsContext.h	/^  ConstantClass *getOrCreate(TypeClass *Ty, Operands V) {$/;"	f	class:llvm::ConstantAggrUniqueMap
getOrCreate	ConstantsContext.h	/^  ConstantClass *getOrCreate(TypeClass *Ty, ValRefType V) {$/;"	f	class:llvm::ConstantUniqueMap
getOrCreateArray	DIBuilder.cpp	/^DIArray DIBuilder::getOrCreateArray(ArrayRef<Value *> Elements) {$/;"	f	class:DIBuilder
getOrCreateSubrange	DIBuilder.cpp	/^DISubrange DIBuilder::getOrCreateSubrange(int64_t Lo, int64_t Hi) {$/;"	f	class:DIBuilder
getOrInsertFnSpecificMDNode	DebugInfo.cpp	/^NamedMDNode *llvm::getOrInsertFnSpecificMDNode(Module &M, DISubprogram Fn) {$/;"	f	class:llvm
getOrInsertFunction	Module.cpp	/^Constant *Module::getOrInsertFunction(StringRef Name,$/;"	f	class:Module
getOrInsertGlobal	Module.cpp	/^Constant *Module::getOrInsertGlobal(StringRef Name, Type *Ty) {$/;"	f	class:Module
getOrInsertModuleFlagsMetadata	Module.cpp	/^NamedMDNode *Module::getOrInsertModuleFlagsMetadata() {$/;"	f	class:Module
getOrInsertNamedMetadata	Module.cpp	/^NamedMDNode *Module::getOrInsertNamedMetadata(StringRef Name) {$/;"	f	class:Module
getOrInsertTargetIntrinsic	Module.cpp	/^Constant *Module::getOrInsertTargetIntrinsic(StringRef Name,$/;"	f	class:Module
getOriginalTypeSize	DebugInfo.cpp	/^uint64_t DIDerivedType::getOriginalTypeSize() const {$/;"	f	class:DIDerivedType
getPPC_FP128PtrTy	Type.cpp	/^PointerType *Type::getPPC_FP128PtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getPPC_FP128Ty	Type.cpp	/^Type *Type::getPPC_FP128Ty(LLVMContext &C) { return &C.pImpl->PPC_FP128Ty; }$/;"	f	class:Type
getParamAlignment	Function.cpp	/^unsigned Argument::getParamAlignment() const {$/;"	f	class:Argument
getParent	Metadata.cpp	/^  MDNode *getParent() {$/;"	f	class:llvm::MDNodeOperand	file:
getPassInfo	PassRegistry.cpp	/^const PassInfo *PassRegistry::getPassInfo(StringRef Arg) const {$/;"	f	class:PassRegistry
getPassInfo	PassRegistry.cpp	/^const PassInfo *PassRegistry::getPassInfo(const void *TI) const {$/;"	f	class:PassRegistry
getPassManagerType	PassManager.cpp	/^  virtual PassManagerType getPassManagerType() const {$/;"	f	class:__anon7::BBPassManager
getPassManagerType	PassManager.cpp	/^  virtual PassManagerType getPassManagerType() const {$/;"	f	class:llvm::MPPassManager
getPassName	Pass.cpp	/^const char *Pass::getPassName() const {$/;"	f	class:Pass
getPassName	PassManager.cpp	/^  virtual const char *getPassName() const {$/;"	f	class:__anon7::BBPassManager
getPassName	PassManager.cpp	/^  virtual const char *getPassName() const {$/;"	f	class:llvm::MPPassManager
getPassRegistry	PassRegistry.cpp	/^PassRegistry *PassRegistry::getPassRegistry() {$/;"	f	class:PassRegistry
getPassTimer	PassManager.cpp	/^  Timer *getPassTimer(Pass *P) {$/;"	f	class:__anon8::TimingInfo
getPassTimer	PassManager.cpp	/^Timer *llvm::getPassTimer(Pass *P) {$/;"	f	class:llvm
getPointerAddressSpace	Type.cpp	/^unsigned Type::getPointerAddressSpace() const {$/;"	f	class:Type
getPointerCast	Constants.cpp	/^Constant *ConstantExpr::getPointerCast(Constant *S, Type *Ty) {$/;"	f	class:ConstantExpr
getPointerSize	Module.cpp	/^Module::PointerSize Module::getPointerSize() const {$/;"	f	class:Module
getPointerTo	Type.cpp	/^PointerType *Type::getPointerTo(unsigned addrs) {$/;"	f	class:Type
getPotentialPassManagerType	Pass.cpp	/^PassManagerType BasicBlockPass::getPotentialPassManagerType() const {$/;"	f	class:BasicBlockPass
getPotentialPassManagerType	Pass.cpp	/^PassManagerType FunctionPass::getPotentialPassManagerType() const {$/;"	f	class:FunctionPass
getPotentialPassManagerType	Pass.cpp	/^PassManagerType ModulePass::getPotentialPassManagerType() const {$/;"	f	class:ModulePass
getPotentialPassManagerType	Pass.cpp	/^PassManagerType Pass::getPotentialPassManagerType() const {$/;"	f	class:Pass
getPredicate	Constants.cpp	/^unsigned ConstantExpr::getPredicate() const {$/;"	f	class:ConstantExpr
getPredicateText	AsmWriter.cpp	/^static const char *getPredicateText(unsigned predicate) {$/;"	f	file:
getPrefTypeAlignment	DataLayout.cpp	/^unsigned DataLayout::getPrefTypeAlignment(Type *Ty) const {$/;"	f	class:DataLayout
getPreferredAlignment	DataLayout.cpp	/^unsigned DataLayout::getPreferredAlignment(const GlobalVariable *GV) const {$/;"	f	class:DataLayout
getPreferredAlignmentLog	DataLayout.cpp	/^unsigned DataLayout::getPreferredAlignmentLog(const GlobalVariable *GV) const {$/;"	f	class:DataLayout
getPreferredTypeAlignmentShift	DataLayout.cpp	/^unsigned DataLayout::getPreferredTypeAlignmentShift(Type *Ty) const {$/;"	f	class:DataLayout
getPrimitiveSizeInBits	Type.cpp	/^unsigned Type::getPrimitiveSizeInBits() const {$/;"	f	class:Type
getPrimitiveType	Type.cpp	/^Type *Type::getPrimitiveType(LLVMContext &C, TypeID IDNumber) {$/;"	f	class:Type
getPtrToInt	Constants.cpp	/^Constant *ConstantExpr::getPtrToInt(Constant *C, Type *DstTy) {$/;"	f	class:ConstantExpr
getRawDataValues	Constants.cpp	/^StringRef ConstantDataSequential::getRawDataValues() const {$/;"	f	class:ConstantDataSequential
getRelocationInfo	Constants.cpp	/^Constant::PossibleRelocationsTy Constant::getRelocationInfo() const {$/;"	f	class:Constant
getRetainedTypes	DebugInfo.cpp	/^DIArray DICompileUnit::getRetainedTypes() const {$/;"	f	class:DICompileUnit
getReturnType	Function.cpp	/^Type *Function::getReturnType() const {$/;"	f	class:Function
getSDiv	Constants.cpp	/^Constant *ConstantExpr::getSDiv(Constant *C1, Constant *C2, bool isExact) {$/;"	f	class:ConstantExpr
getSExt	Constants.cpp	/^Constant *ConstantExpr::getSExt(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getSExtOrBitCast	Constants.cpp	/^Constant *ConstantExpr::getSExtOrBitCast(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getSIToFP	Constants.cpp	/^Constant *ConstantExpr::getSIToFP(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getSRem	Constants.cpp	/^Constant *ConstantExpr::getSRem(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getScalarSizeInBits	Type.cpp	/^unsigned Type::getScalarSizeInBits() {$/;"	f	class:Type
getScalarType	Type.cpp	/^Type *Type::getScalarType() {$/;"	f	class:Type
getScope	DebugLoc.cpp	/^MDNode *DebugLoc::getScope(const LLVMContext &Ctx) const {$/;"	f	class:DebugLoc
getScopeAndInlinedAt	DebugLoc.cpp	/^void DebugLoc::getScopeAndInlinedAt(MDNode *&Scope, MDNode *&IA,$/;"	f	class:DebugLoc
getSelect	Constants.cpp	/^Constant *ConstantExpr::getSelect(Constant *C, Constant *V1, Constant *V2) {$/;"	f	class:ConstantExpr
getSequentialElement	Constants.cpp	/^Constant *ConstantAggregateZero::getSequentialElement() const {$/;"	f	class:ConstantAggregateZero
getSequentialElement	Constants.cpp	/^UndefValue *UndefValue::getSequentialElement() const {$/;"	f	class:UndefValue
getSequentialElementType	Type.cpp	/^Type *Type::getSequentialElementType() const {$/;"	f	class:Type
getShl	Constants.cpp	/^Constant *ConstantExpr::getShl(Constant *C1, Constant *C2,$/;"	f	class:ConstantExpr
getShuffleMask	Instructions.cpp	/^void ShuffleVectorInst::getShuffleMask(Constant *Mask,$/;"	f	class:ShuffleVectorInst
getShuffleVector	Constants.cpp	/^Constant *ConstantExpr::getShuffleVector(Constant *V1, Constant *V2, $/;"	f	class:ConstantExpr
getSigned	Constants.cpp	/^Constant *ConstantInt::getSigned(Type *Ty, int64_t V) {$/;"	f	class:ConstantInt
getSigned	Constants.cpp	/^ConstantInt *ConstantInt::getSigned(IntegerType *Ty, int64_t V) {$/;"	f	class:ConstantInt
getSignedPredicate	Instructions.cpp	/^ICmpInst::Predicate ICmpInst::getSignedPredicate(Predicate pred) {$/;"	f	class:ICmpInst
getSinglePredecessor	BasicBlock.cpp	/^BasicBlock *BasicBlock::getSinglePredecessor() {$/;"	f	class:BasicBlock
getSizeOf	Constants.cpp	/^Constant *ConstantExpr::getSizeOf(Type* Ty) {$/;"	f	class:ConstantExpr
getSlot	Attributes.cpp	/^const AttributeWithIndex &AttrListPtr::getSlot(unsigned Slot) const {$/;"	f	class:AttrListPtr
getSplat	Constants.cpp	/^Constant *ConstantDataVector::getSplat(unsigned NumElts, Constant *V) {$/;"	f	class:ConstantDataVector
getSplat	Constants.cpp	/^Constant *ConstantVector::getSplat(unsigned NumElts, Constant *V) {$/;"	f	class:ConstantVector
getSplatValue	Constants.cpp	/^Constant *ConstantDataVector::getSplatValue() const {$/;"	f	class:ConstantDataVector
getSplatValue	Constants.cpp	/^Constant *ConstantVector::getSplatValue() const {$/;"	f	class:ConstantVector
getStackAlignment	Attributes.cpp	/^uint64_t AttrBuilder::getStackAlignment() const {$/;"	f	class:AttrBuilder
getStackAlignment	Attributes.cpp	/^uint64_t AttributesImpl::getStackAlignment() const {$/;"	f	class:AttributesImpl
getStackAlignment	Attributes.cpp	/^unsigned Attributes::getStackAlignment() const {$/;"	f	class:Attributes
getString	Constants.cpp	/^Constant *ConstantDataArray::getString(LLVMContext &Context,$/;"	f	class:ConstantDataArray
getStringField	DebugInfo.cpp	/^DIDescriptor::getStringField(unsigned Elt) const {$/;"	f	class:DIDescriptor
getStringRepresentation	DataLayout.cpp	/^std::string DataLayout::getStringRepresentation() const {$/;"	f	class:DataLayout
getStructElement	Constants.cpp	/^Constant *ConstantAggregateZero::getStructElement(unsigned Elt) const {$/;"	f	class:ConstantAggregateZero
getStructElement	Constants.cpp	/^UndefValue *UndefValue::getStructElement(unsigned Elt) const {$/;"	f	class:UndefValue
getStructElementType	Type.cpp	/^Type *Type::getStructElementType(unsigned N) const {$/;"	f	class:Type
getStructLayout	DataLayout.cpp	/^const StructLayout *DataLayout::getStructLayout(StructType *Ty) const {$/;"	f	class:DataLayout
getStructName	Type.cpp	/^StringRef Type::getStructName() const {$/;"	f	class:Type
getStructNumElements	Type.cpp	/^unsigned Type::getStructNumElements() const {$/;"	f	class:Type
getSub	Constants.cpp	/^Constant *ConstantExpr::getSub(Constant *C1, Constant *C2,$/;"	f	class:ConstantExpr
getSubprograms	DebugInfo.cpp	/^DIArray DICompileUnit::getSubprograms() const {$/;"	f	class:DICompileUnit
getSuccessorV	Instructions.cpp	/^BasicBlock *BranchInst::getSuccessorV(unsigned idx) const {$/;"	f	class:BranchInst
getSuccessorV	Instructions.cpp	/^BasicBlock *IndirectBrInst::getSuccessorV(unsigned idx) const {$/;"	f	class:IndirectBrInst
getSuccessorV	Instructions.cpp	/^BasicBlock *InvokeInst::getSuccessorV(unsigned idx) const {$/;"	f	class:InvokeInst
getSuccessorV	Instructions.cpp	/^BasicBlock *ResumeInst::getSuccessorV(unsigned idx) const {$/;"	f	class:ResumeInst
getSuccessorV	Instructions.cpp	/^BasicBlock *ReturnInst::getSuccessorV(unsigned idx) const {$/;"	f	class:ReturnInst
getSuccessorV	Instructions.cpp	/^BasicBlock *SwitchInst::getSuccessorV(unsigned idx) const {$/;"	f	class:SwitchInst
getSuccessorV	Instructions.cpp	/^BasicBlock *UnreachableInst::getSuccessorV(unsigned idx) const {$/;"	f	class:UnreachableInst
getSwappedPredicate	Instructions.cpp	/^CmpInst::Predicate CmpInst::getSwappedPredicate(Predicate pred) {$/;"	f	class:CmpInst
getSymTab	Value.cpp	/^static bool getSymTab(Value *V, ValueSymbolTable *&ST) {$/;"	f	file:
getTemporary	Metadata.cpp	/^MDNode *MDNode::getTemporary(LLVMContext &Context, ArrayRef<Value*> Vals) {$/;"	f	class:MDNode
getTerminator	BasicBlock.cpp	/^TerminatorInst *BasicBlock::getTerminator() {$/;"	f	class:BasicBlock
getTerminator	BasicBlock.cpp	/^const TerminatorInst *BasicBlock::getTerminator() const {$/;"	f	class:BasicBlock
getTombstoneKey	ConstantsContext.h	/^    static inline ConstantClass* getTombstoneKey() {$/;"	f	struct:llvm::ConstantAggrUniqueMap::MapInfo
getTombstoneKey	LLVMContextImpl.h	/^  static inline FunctionType* getTombstoneKey() {$/;"	f	struct:llvm::FunctionTypeKeyInfo
getTombstoneKey	LLVMContextImpl.h	/^  static inline KeyTy getTombstoneKey() { $/;"	f	struct:llvm::DenseMapAPFloatKeyInfo
getTombstoneKey	LLVMContextImpl.h	/^  static inline KeyTy getTombstoneKey() { return KeyTy(APInt(1,1), 0); }$/;"	f	struct:llvm::DenseMapAPIntKeyInfo
getTombstoneKey	LLVMContextImpl.h	/^  static inline StructType* getTombstoneKey() {$/;"	f	struct:llvm::AnonStructTypeKeyInfo
getTopLevelPassManagerType	PassManager.cpp	/^  virtual PassManagerType getTopLevelPassManagerType() {$/;"	f	class:llvm::FunctionPassManagerImpl
getTopLevelPassManagerType	PassManager.cpp	/^  virtual PassManagerType getTopLevelPassManagerType() {$/;"	f	class:llvm::PassManagerImpl
getTrue	Constants.cpp	/^Constant *ConstantInt::getTrue(Type *Ty) {$/;"	f	class:ConstantInt
getTrue	Constants.cpp	/^ConstantInt *ConstantInt::getTrue(LLVMContext &Context) {$/;"	f	class:ConstantInt
getTrunc	Constants.cpp	/^Constant *ConstantExpr::getTrunc(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getTruncOrBitCast	Constants.cpp	/^Constant *ConstantExpr::getTruncOrBitCast(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getType	Function.cpp	/^FunctionType *Intrinsic::getType(LLVMContext &Context,$/;"	f	class:Intrinsic
getTypeAtIndex	Type.cpp	/^Type *CompositeType::getTypeAtIndex(const Value *V) {$/;"	f	class:CompositeType
getTypeAtIndex	Type.cpp	/^Type *CompositeType::getTypeAtIndex(unsigned Idx) {$/;"	f	class:CompositeType
getTypeByName	Type.cpp	/^StructType *Module::getTypeByName(StringRef Name) const {$/;"	f	class:Module
getTypeForEVT	ValueTypes.cpp	/^Type *EVT::getTypeForEVT(LLVMContext &Context) const {$/;"	f	class:EVT
getTypeForElements	Constants.cpp	/^StructType *ConstantStruct::getTypeForElements(ArrayRef<Constant*> V,$/;"	f	class:ConstantStruct
getTypeForElements	Constants.cpp	/^StructType *ConstantStruct::getTypeForElements(LLVMContext &Context,$/;"	f	class:ConstantStruct
getTypeSizeInBits	DataLayout.cpp	/^uint64_t DataLayout::getTypeSizeInBits(Type *Ty) const {$/;"	f	class:DataLayout
getUDiv	Constants.cpp	/^Constant *ConstantExpr::getUDiv(Constant *C1, Constant *C2, bool isExact) {$/;"	f	class:ConstantExpr
getUIToFP	Constants.cpp	/^Constant *ConstantExpr::getUIToFP(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getUInt64Field	DebugInfo.cpp	/^uint64_t DIDescriptor::getUInt64Field(unsigned Elt) const {$/;"	f	class:DIDescriptor
getURem	Constants.cpp	/^Constant *ConstantExpr::getURem(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getUniquePredecessor	BasicBlock.cpp	/^BasicBlock *BasicBlock::getUniquePredecessor() {$/;"	f	class:BasicBlock
getUnsignedPredicate	Instructions.cpp	/^ICmpInst::Predicate ICmpInst::getUnsignedPredicate(Predicate pred) {$/;"	f	class:ICmpInst
getUser	Use.cpp	/^User *Use::getUser() const {$/;"	f	class:llvm::Use
getValType	ConstantsContext.h	/^  static ValType getValType(ConstantClass *C) {$/;"	f	struct:llvm::ConstantKeyData
getValType	ConstantsContext.h	/^  static ValType getValType(ConstantExpr *CE) {$/;"	f	struct:llvm::ConstantKeyData
getValType	ConstantsContext.h	/^  static ValType getValType(InlineAsm *Asm) {$/;"	f	struct:llvm::ConstantKeyData
getValue	IntrinsicInst.cpp	/^Value *DbgValueInst::getValue() {$/;"	f	class:DbgValueInst
getValue	IntrinsicInst.cpp	/^const Value *DbgValueInst::getValue() const {$/;"	f	class:DbgValueInst
getValueSymbolTable	BasicBlock.cpp	/^ValueSymbolTable *BasicBlock::getValueSymbolTable() {$/;"	f	class:BasicBlock
getVariables	DebugInfo.cpp	/^DIArray DISubprogram::getVariables() const {$/;"	f	class:DISubprogram
getVariablesNodes	DebugInfo.cpp	/^MDNode *DISubprogram::getVariablesNodes() const {$/;"	f	class:DISubprogram
getVectorNumElements	Type.cpp	/^unsigned Type::getVectorNumElements() const {$/;"	f	class:Type
getVoidTy	Type.cpp	/^Type *Type::getVoidTy(LLVMContext &C) { return &C.pImpl->VoidTy; }$/;"	f	class:Type
getWhenValsUnresolved	Metadata.cpp	/^MDNode *MDNode::getWhenValsUnresolved(LLVMContext &Context,$/;"	f	class:MDNode
getWithOperandReplaced	Constants.cpp	/^ConstantExpr::getWithOperandReplaced(unsigned OpNo, Constant *Op) const {$/;"	f	class:ConstantExpr
getWithOperands	Constants.cpp	/^getWithOperands(ArrayRef<Constant*> Ops, Type *Ty) const {$/;"	f	class:ConstantExpr
getX86_FP80PtrTy	Type.cpp	/^PointerType *Type::getX86_FP80PtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getX86_FP80Ty	Type.cpp	/^Type *Type::getX86_FP80Ty(LLVMContext &C) { return &C.pImpl->X86_FP80Ty; }$/;"	f	class:Type
getX86_MMXPtrTy	Type.cpp	/^PointerType *Type::getX86_MMXPtrTy(LLVMContext &C, unsigned AS) {$/;"	f	class:Type
getX86_MMXTy	Type.cpp	/^Type *Type::getX86_MMXTy(LLVMContext &C) { return &C.pImpl->X86_MMXTy; }$/;"	f	class:Type
getXor	Constants.cpp	/^Constant *ConstantExpr::getXor(Constant *C1, Constant *C2) {$/;"	f	class:ConstantExpr
getZExt	Constants.cpp	/^Constant *ConstantExpr::getZExt(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getZExtOrBitCast	Constants.cpp	/^Constant *ConstantExpr::getZExtOrBitCast(Constant *C, Type *Ty) {$/;"	f	class:ConstantExpr
getZeroValueForNegation	Constants.cpp	/^Constant *ConstantFP::getZeroValueForNegation(Type *Ty) {$/;"	f	class:ConstantFP
growOperands	Instructions.cpp	/^void IndirectBrInst::growOperands() {$/;"	f	class:IndirectBrInst
growOperands	Instructions.cpp	/^void LandingPadInst::growOperands(unsigned Size) {$/;"	f	class:LandingPadInst
growOperands	Instructions.cpp	/^void PHINode::growOperands() {$/;"	f	class:PHINode
growOperands	Instructions.cpp	/^void SwitchInst::growOperands() {$/;"	f	class:SwitchInst
hasAddressTaken	Function.cpp	/^bool Function::hasAddressTaken(const User* *PutOffender) const {$/;"	f	class:Function
hasAlignmentAttr	Attributes.cpp	/^bool AttrBuilder::hasAlignmentAttr() const {$/;"	f	class:AttrBuilder
hasAllConstantIndices	Instructions.cpp	/^bool GetElementPtrInst::hasAllConstantIndices() const {$/;"	f	class:GetElementPtrInst
hasAllZeroIndices	Instructions.cpp	/^bool GetElementPtrInst::hasAllZeroIndices() const {$/;"	f	class:GetElementPtrInst
hasAttrSomewhere	Attributes.cpp	/^bool AttrListPtr::hasAttrSomewhere(Attributes::AttrVal Attr) const {$/;"	f	class:AttrListPtr
hasAttribute	Attributes.cpp	/^bool AttrBuilder::hasAttribute(Attributes::AttrVal A) const {$/;"	f	class:AttrBuilder
hasAttribute	Attributes.cpp	/^bool Attributes::hasAttribute(AttrVal Val) const {$/;"	f	class:Attributes
hasAttribute	Attributes.cpp	/^bool AttributesImpl::hasAttribute(uint64_t A) const {$/;"	f	class:AttributesImpl
hasAttributes	Attributes.cpp	/^bool AttrBuilder::hasAttributes() const {$/;"	f	class:AttrBuilder
hasAttributes	Attributes.cpp	/^bool AttrBuilder::hasAttributes(const Attributes &A) const {$/;"	f	class:AttrBuilder
hasAttributes	Attributes.cpp	/^bool Attributes::hasAttributes() const {$/;"	f	class:Attributes
hasAttributes	Attributes.cpp	/^bool Attributes::hasAttributes(const Attributes &A) const {$/;"	f	class:Attributes
hasAttributes	Attributes.cpp	/^bool AttributesImpl::hasAttributes() const {$/;"	f	class:AttributesImpl
hasAttributes	Attributes.cpp	/^bool AttributesImpl::hasAttributes(const Attributes &A) const {$/;"	f	class:AttributesImpl
hasByValAttr	Function.cpp	/^bool Argument::hasByValAttr() const {$/;"	f	class:Argument
hasConstantValue	Instructions.cpp	/^Value *PHINode::hasConstantValue() const {$/;"	f	class:PHINode
hasFnAttr	Instructions.cpp	/^bool CallInst::hasFnAttr(Attributes::AttrVal A) const {$/;"	f	class:CallInst
hasFnAttr	Instructions.cpp	/^bool InvokeInst::hasFnAttr(Attributes::AttrVal A) const {$/;"	f	class:InvokeInst
hasGC	Function.cpp	/^bool Function::hasGC() const {$/;"	f	class:Function
hasGarbage	LeaksContext.h	/^  bool hasGarbage(const std::string& Message) {$/;"	f	struct:llvm::LeakDetectorImpl
hasIndices	Constants.cpp	/^bool ConstantExpr::hasIndices() const {$/;"	f	class:ConstantExpr
hasNUses	Value.cpp	/^bool Value::hasNUses(unsigned N) const {$/;"	f	class:Value
hasNUsesOrMore	Value.cpp	/^bool Value::hasNUsesOrMore(unsigned N) const {$/;"	f	class:Value
hasNestAttr	Function.cpp	/^bool Argument::hasNestAttr() const {$/;"	f	class:Argument
hasNoAliasAttr	Function.cpp	/^bool Argument::hasNoAliasAttr() const {$/;"	f	class:Argument
hasNoCaptureAttr	Function.cpp	/^bool Argument::hasNoCaptureAttr() const {$/;"	f	class:Argument
hasNoSignedWrap	Instructions.cpp	/^bool BinaryOperator::hasNoSignedWrap() const {$/;"	f	class:BinaryOperator
hasNoUnsignedWrap	Instructions.cpp	/^bool BinaryOperator::hasNoUnsignedWrap() const {$/;"	f	class:BinaryOperator
hasStructRetAttr	Function.cpp	/^bool Argument::hasStructRetAttr() const {$/;"	f	class:Argument
has_side_effects	ConstantsContext.h	/^  bool has_side_effects;$/;"	m	struct:llvm::InlineAsmKeyType
hash_value	LLVMContextImpl.h	/^    friend hash_code hash_value(const KeyTy &Key) {$/;"	f	struct:llvm::DenseMapAPFloatKeyInfo::KeyTy
hash_value	LLVMContextImpl.h	/^    friend hash_code hash_value(const KeyTy &Key) {$/;"	f	struct:llvm::DenseMapAPIntKeyInfo::KeyTy
incorporateFunction	AsmWriter.cpp	/^  void incorporateFunction(const Function *F) {$/;"	f	class:__anon2::SlotTracker
incorporateMDNode	TypeFinder.cpp	/^void TypeFinder::incorporateMDNode(const MDNode *V) {$/;"	f	class:TypeFinder
incorporateType	TypeFinder.cpp	/^void TypeFinder::incorporateType(Type *Ty) {$/;"	f	class:TypeFinder
incorporateTypes	AsmWriter.cpp	/^void TypePrinting::incorporateTypes(const Module &M) {$/;"	f	class:TypePrinting
incorporateValue	TypeFinder.cpp	/^void TypeFinder::incorporateValue(const Value *V) {$/;"	f	class:TypeFinder
indexValid	Type.cpp	/^bool CompositeType::indexValid(const Value *V) const {$/;"	f	class:CompositeType
indexValid	Type.cpp	/^bool CompositeType::indexValid(unsigned Idx) const {$/;"	f	class:CompositeType
indices	ConstantsContext.h	/^  SmallVector<unsigned, 4> indices;$/;"	m	struct:llvm::ExprMapKeyType
init	DataLayout.cpp	/^void DataLayout::init() {$/;"	f	class:DataLayout
init	Instructions.cpp	/^void BinaryOperator::init(BinaryOps iType) {$/;"	f	class:BinaryOperator
init	Instructions.cpp	/^void CallInst::init(Value *Func, ArrayRef<Value *> Args, const Twine &NameStr) {$/;"	f	class:CallInst
init	Instructions.cpp	/^void CallInst::init(Value *Func, const Twine &NameStr) {$/;"	f	class:CallInst
init	Instructions.cpp	/^void ExtractValueInst::init(ArrayRef<unsigned> Idxs, const Twine &Name) {$/;"	f	class:ExtractValueInst
init	Instructions.cpp	/^void GetElementPtrInst::init(Value *Ptr, ArrayRef<Value *> IdxList,$/;"	f	class:GetElementPtrInst
init	Instructions.cpp	/^void IndirectBrInst::init(Value *Address, unsigned NumDests) {$/;"	f	class:IndirectBrInst
init	Instructions.cpp	/^void InsertValueInst::init(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, $/;"	f	class:InsertValueInst
init	Instructions.cpp	/^void InvokeInst::init(Value *Fn, BasicBlock *IfNormal, BasicBlock *IfException,$/;"	f	class:InvokeInst
init	Instructions.cpp	/^void LandingPadInst::init(Value *PersFn, unsigned NumReservedValues,$/;"	f	class:LandingPadInst
init	Instructions.cpp	/^void SwitchInst::init(Value *Value, BasicBlock *Default, unsigned NumReserved) {$/;"	f	class:SwitchInst
initTags	Use.cpp	/^Use *Use::initTags(Use * const Start, Use *Stop) {$/;"	f	class:llvm::Use
initialize	AsmWriter.cpp	/^inline void SlotTracker::initialize() {$/;"	f	class:SlotTracker
initializeAllAnalysisInfo	PassManager.cpp	/^void PMTopLevelManager::initializeAllAnalysisInfo() {$/;"	f	class:PMTopLevelManager
initializeAnalysisImpl	PassManager.cpp	/^void PMDataManager::initializeAnalysisImpl(Pass *P) {$/;"	f	class:PMDataManager
initializeCore	Core.cpp	/^void llvm::initializeCore(PassRegistry &Registry) {$/;"	f	class:llvm
initializePass	Pass.cpp	/^void ImmutablePass::initializePass() {$/;"	f	class:ImmutablePass
insert	ConstantsContext.h	/^  void insert(ConstantClass *CP) {$/;"	f	class:llvm::ConstantAggrUniqueMap
insertAfter	Instruction.cpp	/^void Instruction::insertAfter(Instruction *InsertPos) {$/;"	f	class:Instruction
insertBefore	Instruction.cpp	/^void Instruction::insertBefore(Instruction *InsertPos) {$/;"	f	class:Instruction
insertDbgValueIntrinsic	DIBuilder.cpp	/^Instruction *DIBuilder::insertDbgValueIntrinsic(Value *V, uint64_t Offset,$/;"	f	class:DIBuilder
insertDeclare	DIBuilder.cpp	/^Instruction *DIBuilder::insertDeclare(Value *Storage, DIVariable VarInfo,$/;"	f	class:DIBuilder
isAllOnesValue	Constants.cpp	/^bool Constant::isAllOnesValue() const {$/;"	f	class:Constant
isAllZeros	Constants.cpp	/^static bool isAllZeros(StringRef Arr) {$/;"	f	file:
isArrayAllocation	Instructions.cpp	/^bool AllocaInst::isArrayAllocation() const {$/;"	f	class:AllocaInst
isAssociative	Instruction.cpp	/^bool Instruction::isAssociative(unsigned Opcode) {$/;"	f	class:Instruction
isBasicType	DebugInfo.cpp	/^bool DIDescriptor::isBasicType() const {$/;"	f	class:DIDescriptor
isCString	Constants.cpp	/^bool ConstantDataSequential::isCString() const {$/;"	f	class:ConstantDataSequential
isCast	Constants.cpp	/^bool ConstantExpr::isCast() const {$/;"	f	class:ConstantExpr
isCastable	Instructions.cpp	/^bool CastInst::isCastable(Type *SrcTy, Type *DestTy) {$/;"	f	class:CastInst
isCommutative	Instruction.cpp	/^bool Instruction::isCommutative(unsigned op) {$/;"	f	class:Instruction
isCommutative	Instructions.cpp	/^bool CmpInst::isCommutative() const {$/;"	f	class:CmpInst
isCompare	Constants.cpp	/^bool ConstantExpr::isCompare() const {$/;"	f	class:ConstantExpr
isCompileUnit	DebugInfo.cpp	/^bool DIDescriptor::isCompileUnit() const {$/;"	f	class:DIDescriptor
isCompositeType	DebugInfo.cpp	/^bool DIDescriptor::isCompositeType() const {$/;"	f	class:DIDescriptor
isConstantAllOnes	Instructions.cpp	/^static inline bool isConstantAllOnes(const Value *V) {$/;"	f	file:
isConstantUsed	Constants.cpp	/^bool Constant::isConstantUsed() const {$/;"	f	class:Constant
isContiguous	Metadata.cpp	/^static bool isContiguous(const ConstantRange &A, const ConstantRange &B) {$/;"	f	file:
isContiguous	Verifier.cpp	/^static bool isContiguous(const ConstantRange &A, const ConstantRange &B) {$/;"	f	file:
isDeclaration	Globals.cpp	/^bool GlobalValue::isDeclaration() const {$/;"	f	class:GlobalValue
isDefTriviallyDead	Function.cpp	/^bool Function::isDefTriviallyDead() const {$/;"	f	class:Function
isDematerializable	Globals.cpp	/^bool GlobalValue::isDematerializable() const {$/;"	f	class:GlobalValue
isDematerializable	Module.cpp	/^bool Module::isDematerializable(const GlobalValue *GV) const {$/;"	f	class:Module
isDereferenceablePointer	Value.cpp	/^bool Value::isDereferenceablePointer() const {$/;"	f	class:Value
isDereferenceablePointer	Value.cpp	/^static bool isDereferenceablePointer(const Value *V,$/;"	f	file:
isDerivedType	DebugInfo.cpp	/^bool DIDescriptor::isDerivedType() const {$/;"	f	class:DIDescriptor
isElementTypeCompatible	Constants.cpp	/^bool ConstantDataSequential::isElementTypeCompatible(const Type *Ty) {$/;"	f	class:ConstantDataSequential
isEliminableCastPair	Instructions.cpp	/^unsigned CastInst::isEliminableCastPair($/;"	f	class:CastInst
isEmptyTy	Type.cpp	/^bool Type::isEmptyTy() const {$/;"	f	class:Type
isEnumerator	DebugInfo.cpp	/^bool DIDescriptor::isEnumerator() const {$/;"	f	class:DIDescriptor
isEqual	ConstantsContext.h	/^    static bool isEqual(const ConstantClass *LHS, const ConstantClass *RHS) {$/;"	f	struct:llvm::ConstantAggrUniqueMap::MapInfo
isEqual	ConstantsContext.h	/^    static bool isEqual(const LookupKey &LHS, const ConstantClass *RHS) {$/;"	f	struct:llvm::ConstantAggrUniqueMap::MapInfo
isEqual	LLVMContextImpl.h	/^  static bool isEqual(const FunctionType *LHS, const FunctionType *RHS) {$/;"	f	struct:llvm::FunctionTypeKeyInfo
isEqual	LLVMContextImpl.h	/^  static bool isEqual(const KeyTy &LHS, const KeyTy &RHS) {$/;"	f	struct:llvm::DenseMapAPFloatKeyInfo
isEqual	LLVMContextImpl.h	/^  static bool isEqual(const KeyTy &LHS, const KeyTy &RHS) {$/;"	f	struct:llvm::DenseMapAPIntKeyInfo
isEqual	LLVMContextImpl.h	/^  static bool isEqual(const KeyTy& LHS, const FunctionType *RHS) {$/;"	f	struct:llvm::FunctionTypeKeyInfo
isEqual	LLVMContextImpl.h	/^  static bool isEqual(const KeyTy& LHS, const StructType *RHS) {$/;"	f	struct:llvm::AnonStructTypeKeyInfo
isEqual	LLVMContextImpl.h	/^  static bool isEqual(const StructType *LHS, const StructType *RHS) {$/;"	f	struct:llvm::AnonStructTypeKeyInfo
isEquality	Instructions.cpp	/^bool CmpInst::isEquality() const {$/;"	f	class:CmpInst
isExact	Instructions.cpp	/^bool BinaryOperator::isExact() const {$/;"	f	class:BinaryOperator
isExactlyValue	Constants.cpp	/^bool ConstantFP::isExactlyValue(const APFloat &V) const {$/;"	f	class:ConstantFP
isExtended1024BitVector	ValueTypes.cpp	/^bool EVT::isExtended1024BitVector() const {$/;"	f	class:EVT
isExtended128BitVector	ValueTypes.cpp	/^bool EVT::isExtended128BitVector() const {$/;"	f	class:EVT
isExtended16BitVector	ValueTypes.cpp	/^bool EVT::isExtended16BitVector() const {$/;"	f	class:EVT
isExtended256BitVector	ValueTypes.cpp	/^bool EVT::isExtended256BitVector() const {$/;"	f	class:EVT
isExtended32BitVector	ValueTypes.cpp	/^bool EVT::isExtended32BitVector() const {$/;"	f	class:EVT
isExtended512BitVector	ValueTypes.cpp	/^bool EVT::isExtended512BitVector() const {$/;"	f	class:EVT
isExtended64BitVector	ValueTypes.cpp	/^bool EVT::isExtended64BitVector() const {$/;"	f	class:EVT
isExtendedFloatingPoint	ValueTypes.cpp	/^bool EVT::isExtendedFloatingPoint() const {$/;"	f	class:EVT
isExtendedInteger	ValueTypes.cpp	/^bool EVT::isExtendedInteger() const {$/;"	f	class:EVT
isExtendedVector	ValueTypes.cpp	/^bool EVT::isExtendedVector() const {$/;"	f	class:EVT
isFNeg	Instructions.cpp	/^bool BinaryOperator::isFNeg(const Value *V) {$/;"	f	class:BinaryOperator
isFPOrFPVectorTy	Type.cpp	/^bool Type::isFPOrFPVectorTy() const {$/;"	f	class:Type
isFalseWhenEqual	Instructions.cpp	/^bool CmpInst::isFalseWhenEqual(unsigned short predicate) {$/;"	f	class:CmpInst
isFile	DebugInfo.cpp	/^bool DIDescriptor::isFile() const {$/;"	f	class:DIDescriptor
isFunctionLocalValue	Metadata.cpp	/^static bool isFunctionLocalValue(Value *V) {$/;"	f	file:
isFunctionVarArg	Type.cpp	/^bool Type::isFunctionVarArg() const {$/;"	f	class:Type
isGCDAFile	GCOV.cpp	/^static bool isGCDAFile(GCOV::GCOVFormat Format) {$/;"	f	file:
isGCNOFile	GCOV.cpp	/^static bool isGCNOFile(GCOV::GCOVFormat Format) {$/;"	f	file:
isGEPWithNoNotionalOverIndexing	Constants.cpp	/^bool ConstantExpr::isGEPWithNoNotionalOverIndexing() const {$/;"	f	class:ConstantExpr
isGlobal	DebugInfo.cpp	/^bool DIDescriptor::isGlobal() const {$/;"	f	class:DIDescriptor
isGlobalVariable	DebugInfo.cpp	/^bool DIDescriptor::isGlobalVariable() const {$/;"	f	class:DIDescriptor
isIdempotent	Instruction.cpp	/^bool Instruction::isIdempotent(unsigned Opcode) {$/;"	f	class:Instruction
isIdenticalTo	Instruction.cpp	/^bool Instruction::isIdenticalTo(const Instruction *I) const {$/;"	f	class:Instruction
isIdenticalToWhenDefined	Instruction.cpp	/^bool Instruction::isIdenticalToWhenDefined(const Instruction *I) const {$/;"	f	class:Instruction
isInBounds	Instructions.cpp	/^bool GetElementPtrInst::isInBounds() const {$/;"	f	class:GetElementPtrInst
isInBoundsIndices	ConstantFold.cpp	/^static bool isInBoundsIndices(ArrayRef<IndexTy> Idxs) {$/;"	f	file:
isInlinedFnArgument	DebugInfo.cpp	/^bool DIVariable::isInlinedFnArgument(const Function *CurFn) {$/;"	f	class:DIVariable
isIntOrIntVectorTy	Type.cpp	/^bool Type::isIntOrIntVectorTy() const {$/;"	f	class:Type
isIntegerCast	Instructions.cpp	/^bool CastInst::isIntegerCast() const {$/;"	f	class:CastInst
isIntegerTy	Type.cpp	/^bool Type::isIntegerTy(unsigned Bitwidth) const {$/;"	f	class:Type
isLandingPad	BasicBlock.cpp	/^bool BasicBlock::isLandingPad() const {$/;"	f	class:BasicBlock
isLayoutIdentical	Type.cpp	/^bool StructType::isLayoutIdentical(StructType *Other) const {$/;"	f	class:StructType
isLexicalBlock	DebugInfo.cpp	/^bool DIDescriptor::isLexicalBlock() const {$/;"	f	class:DIDescriptor
isLexicalBlockFile	DebugInfo.cpp	/^bool DIDescriptor::isLexicalBlockFile() const {$/;"	f	class:DIDescriptor
isLosslessCast	Instructions.cpp	/^bool CastInst::isLosslessCast() const {$/;"	f	class:CastInst
isMaterializable	Globals.cpp	/^bool GlobalValue::isMaterializable() const {$/;"	f	class:GlobalValue
isMaterializable	Module.cpp	/^bool Module::isMaterializable(const GlobalValue *GV) const {$/;"	f	class:Module
isMaybeZeroSizedType	ConstantFold.cpp	/^static bool isMaybeZeroSizedType(Type *Ty) {$/;"	f	file:
isNameSpace	DebugInfo.cpp	/^bool DIDescriptor::isNameSpace() const {$/;"	f	class:DIDescriptor
isNeg	Instructions.cpp	/^bool BinaryOperator::isNeg(const Value *V) {$/;"	f	class:BinaryOperator
isNegativeZeroValue	Constants.cpp	/^bool Constant::isNegativeZeroValue() const {$/;"	f	class:Constant
isNilpotent	Instruction.cpp	/^bool Instruction::isNilpotent(unsigned Opcode) {$/;"	f	class:Instruction
isNoopCast	Instructions.cpp	/^bool CastInst::isNoopCast(Instruction::CastOps Opcode,$/;"	f	class:CastInst
isNoopCast	Instructions.cpp	/^bool CastInst::isNoopCast(Type *IntPtrTy) const {$/;"	f	class:CastInst
isNot	Instructions.cpp	/^bool BinaryOperator::isNot(const Value *V) {$/;"	f	class:BinaryOperator
isNullValue	Constants.cpp	/^bool Constant::isNullValue() const {$/;"	f	class:Constant
isObjCProperty	DebugInfo.cpp	/^bool DIDescriptor::isObjCProperty() const {$/;"	f	class:DIDescriptor
isOptimized	DebugInfo.cpp	/^unsigned DISubprogram::isOptimized() const {$/;"	f	class:DISubprogram
isOrdered	Instructions.cpp	/^bool CmpInst::isOrdered(unsigned short predicate) {$/;"	f	class:CmpInst
isOverloaded	Function.cpp	/^bool Intrinsic::isOverloaded(ID id) {$/;"	f	class:Intrinsic
isPacked	LLVMContextImpl.h	/^    bool isPacked;$/;"	m	struct:llvm::AnonStructTypeKeyInfo::KeyTy
isPassDebuggingExecutionsOrMore	PassManager.cpp	/^bool PMDataManager::isPassDebuggingExecutionsOrMore() const {$/;"	f	class:PMDataManager
isPowerOf2ByteWidth	Type.cpp	/^bool IntegerType::isPowerOf2ByteWidth() const {$/;"	f	class:IntegerType
isReachableFromEntry	Dominators.cpp	/^bool DominatorTree::isReachableFromEntry(const Use &U) const {$/;"	f	class:DominatorTree
isSameOperationAs	Instruction.cpp	/^bool Instruction::isSameOperationAs(const Instruction *I,$/;"	f	class:Instruction
isScope	DebugInfo.cpp	/^bool DIDescriptor::isScope() const {$/;"	f	class:DIDescriptor
isSigned	Instructions.cpp	/^bool CmpInst::isSigned(unsigned short predicate) {$/;"	f	class:CmpInst
isSingleEdge	Dominators.cpp	/^bool BasicBlockEdge::isSingleEdge() const {$/;"	f	class:BasicBlockEdge
isSized	Type.cpp	/^bool StructType::isSized() const {$/;"	f	class:StructType
isSizedDerivedType	Type.cpp	/^bool Type::isSizedDerivedType() const {$/;"	f	class:Type
isStaticAlloca	Instructions.cpp	/^bool AllocaInst::isStaticAlloca() const {$/;"	f	class:AllocaInst
isString	Constants.cpp	/^bool ConstantDataSequential::isString() const {$/;"	f	class:ConstantDataSequential
isSubprogram	DebugInfo.cpp	/^bool DIDescriptor::isSubprogram() const {$/;"	f	class:DIDescriptor
isSubprogramContext	DebugInfo.cpp	/^bool llvm::isSubprogramContext(const MDNode *Context) {$/;"	f	class:llvm
isSubrange	DebugInfo.cpp	/^bool DIDescriptor::isSubrange() const {$/;"	f	class:DIDescriptor
isTemplateTypeParameter	DebugInfo.cpp	/^bool DIDescriptor::isTemplateTypeParameter() const {$/;"	f	class:DIDescriptor
isTemplateValueParameter	DebugInfo.cpp	/^bool DIDescriptor::isTemplateValueParameter() const {$/;"	f	class:DIDescriptor
isTrueWhenEqual	Instructions.cpp	/^bool CmpInst::isTrueWhenEqual(unsigned short predicate) {$/;"	f	class:CmpInst
isType	DebugInfo.cpp	/^bool DIDescriptor::isType() const {$/;"	f	class:DIDescriptor
isUnordered	Instructions.cpp	/^bool CmpInst::isUnordered(unsigned short predicate) {$/;"	f	class:CmpInst
isUnsigned	Instructions.cpp	/^bool CmpInst::isUnsigned(unsigned short predicate) {$/;"	f	class:CmpInst
isUnsignedDIType	DebugInfo.cpp	/^bool DIType::isUnsignedDIType() {$/;"	f	class:DIType
isUnspecifiedParameter	DebugInfo.cpp	/^bool DIDescriptor::isUnspecifiedParameter() const {$/;"	f	class:DIDescriptor
isUsedInBasicBlock	Value.cpp	/^bool Value::isUsedInBasicBlock(const BasicBlock *BB) const {$/;"	f	class:Value
isUsedOutsideOfBlock	Instruction.cpp	/^bool Instruction::isUsedOutsideOfBlock(const BasicBlock *BB) const {$/;"	f	class:Instruction
isValidArgumentType	Type.cpp	/^bool FunctionType::isValidArgumentType(Type *ArgTy) {$/;"	f	class:FunctionType
isValidElementType	Type.cpp	/^bool ArrayType::isValidElementType(Type *ElemTy) {$/;"	f	class:ArrayType
isValidElementType	Type.cpp	/^bool PointerType::isValidElementType(Type *ElemTy) {$/;"	f	class:PointerType
isValidElementType	Type.cpp	/^bool StructType::isValidElementType(Type *ElemTy) {$/;"	f	class:StructType
isValidElementType	Type.cpp	/^bool VectorType::isValidElementType(Type *ElemTy) {$/;"	f	class:VectorType
isValidName	LLVMContext.cpp	/^static bool isValidName(StringRef MDName) {$/;"	f	file:
isValidOperands	Instructions.cpp	/^bool ExtractElementInst::isValidOperands(const Value *Val, const Value *Index) {$/;"	f	class:ExtractElementInst
isValidOperands	Instructions.cpp	/^bool InsertElementInst::isValidOperands(const Value *Vec, const Value *Elt, $/;"	f	class:InsertElementInst
isValidOperands	Instructions.cpp	/^bool ShuffleVectorInst::isValidOperands(const Value *V1, const Value *V2,$/;"	f	class:ShuffleVectorInst
isValidReturnType	Type.cpp	/^bool FunctionType::isValidReturnType(Type *RetTy) {$/;"	f	class:FunctionType
isValueValidForType	Constants.cpp	/^bool ConstantFP::isValueValidForType(Type *Ty, const APFloat& Val) {$/;"	f	class:ConstantFP
isValueValidForType	Constants.cpp	/^bool ConstantInt::isValueValidForType(Type *Ty, int64_t Val) {$/;"	f	class:ConstantInt
isValueValidForType	Constants.cpp	/^bool ConstantInt::isValueValidForType(Type *Ty, uint64_t Val) {$/;"	f	class:ConstantInt
isVarArg	Function.cpp	/^bool Function::isVarArg() const {$/;"	f	class:Function
isVarArg	LLVMContextImpl.h	/^    bool isVarArg;$/;"	m	struct:llvm::FunctionTypeKeyInfo::KeyTy
isVariable	DebugInfo.cpp	/^bool DIDescriptor::isVariable() const {$/;"	f	class:DIDescriptor
is_align_stack	ConstantsContext.h	/^  bool is_align_stack;$/;"	m	struct:llvm::InlineAsmKeyType
llvm	Attributes.cpp	/^namespace llvm {$/;"	n	file:
llvm	AttributesImpl.h	/^namespace llvm {$/;"	n
llvm	ConstantFold.h	/^namespace llvm {$/;"	n
llvm	ConstantsContext.h	/^namespace llvm {$/;"	n
llvm	LLVMContextImpl.h	/^namespace llvm {$/;"	n
llvm	LeaksContext.h	/^namespace llvm {$/;"	n
llvm	Metadata.cpp	/^namespace llvm {$/;"	n	file:
llvm	PassManager.cpp	/^namespace llvm {$/;"	n	file:
llvm	SymbolTableListTraitsImpl.h	/^namespace llvm {$/;"	n
llvm	Use.cpp	/^namespace llvm {$/;"	n	file:
llvm	User.cpp	/^namespace llvm {$/;"	n	file:
lookupPassInfo	Pass.cpp	/^const PassInfo *Pass::lookupPassInfo(StringRef Arg) {$/;"	f	class:Pass
lookupPassInfo	Pass.cpp	/^const PassInfo *Pass::lookupPassInfo(const void *TI) {$/;"	f	class:Pass
mMap	AsmWriter.cpp	/^  ValueMap mMap;$/;"	m	class:__anon2::SlotTracker	file:
mNext	AsmWriter.cpp	/^  unsigned mNext;$/;"	m	class:__anon2::SlotTracker	file:
makeConstantRange	Instructions.cpp	/^ICmpInst::makeConstantRange(Predicate pred, const APInt &C) {$/;"	f	class:ICmpInst
map_begin	ConstantsContext.h	/^  typename MapTy::iterator map_begin() { return Map.begin(); }$/;"	f	class:llvm::ConstantAggrUniqueMap
map_begin	ConstantsContext.h	/^  typename MapTy::iterator map_begin() { return Map.begin(); }$/;"	f	class:llvm::ConstantUniqueMap
map_end	ConstantsContext.h	/^  typename MapTy::iterator map_end() { return Map.end(); }$/;"	f	class:llvm::ConstantAggrUniqueMap
map_end	ConstantsContext.h	/^  typename MapTy::iterator map_end() { return Map.end(); }$/;"	f	class:llvm::ConstantUniqueMap
map_from_llvmopcode	Core.cpp	/^static int map_from_llvmopcode(LLVMOpcode code)$/;"	f	file:
map_to_llvmopcode	Core.cpp	/^static LLVMOpcode map_to_llvmopcode(int opcode)$/;"	f	file:
mayReadFromMemory	Instruction.cpp	/^bool Instruction::mayReadFromMemory() const {$/;"	f	class:Instruction
mayThrow	Instruction.cpp	/^bool Instruction::mayThrow() const {$/;"	f	class:Instruction
mayWriteToMemory	Instruction.cpp	/^bool Instruction::mayWriteToMemory() const {$/;"	f	class:Instruction
mdnMap	AsmWriter.cpp	/^  DenseMap<const MDNode*, unsigned> mdnMap;$/;"	m	class:__anon2::SlotTracker	file:
mdnNext	AsmWriter.cpp	/^  unsigned mdnNext;$/;"	m	class:__anon2::SlotTracker	file:
mdn_begin	AsmWriter.cpp	/^  mdn_iterator mdn_begin() { return mdnMap.begin(); }$/;"	f	class:__anon2::SlotTracker
mdn_empty	AsmWriter.cpp	/^  bool mdn_empty() const { return mdnMap.empty(); }$/;"	f	class:__anon2::SlotTracker
mdn_end	AsmWriter.cpp	/^  mdn_iterator mdn_end() { return mdnMap.end(); }$/;"	f	class:__anon2::SlotTracker
mdn_iterator	AsmWriter.cpp	/^  typedef DenseMap<const MDNode*, unsigned>::iterator mdn_iterator;$/;"	t	class:__anon2::SlotTracker	file:
mdn_size	AsmWriter.cpp	/^  unsigned mdn_size() const { return mdnMap.size(); }$/;"	f	class:__anon2::SlotTracker
moveAfter	BasicBlock.cpp	/^void BasicBlock::moveAfter(BasicBlock *MovePos) {$/;"	f	class:BasicBlock
moveBefore	BasicBlock.cpp	/^void BasicBlock::moveBefore(BasicBlock *MovePos) {$/;"	f	class:BasicBlock
moveBefore	Instruction.cpp	/^void Instruction::moveBefore(Instruction *MovePos) {$/;"	f	class:Instruction
mustPreserveAnalysisID	Pass.cpp	/^bool Pass::mustPreserveAnalysisID(char &AID) const {$/;"	f	class:Pass
opcode	ConstantsContext.h	/^  uint8_t opcode;$/;"	m	struct:llvm::ExprMapKeyType
operands	ConstantsContext.h	/^  std::vector<Constant*> operands;$/;"	m	struct:llvm::ExprMapKeyType
operator !=	ConstantsContext.h	/^  bool operator!=(const ExprMapKeyType& that) const {$/;"	f	struct:llvm::ExprMapKeyType
operator !=	ConstantsContext.h	/^  bool operator!=(const InlineAsmKeyType& that) const {$/;"	f	struct:llvm::InlineAsmKeyType
operator !=	LLVMContextImpl.h	/^    bool operator!=(const KeyTy& that) const {$/;"	f	struct:llvm::AnonStructTypeKeyInfo::KeyTy
operator !=	LLVMContextImpl.h	/^    bool operator!=(const KeyTy& that) const {$/;"	f	struct:llvm::DenseMapAPFloatKeyInfo::KeyTy
operator !=	LLVMContextImpl.h	/^    bool operator!=(const KeyTy& that) const {$/;"	f	struct:llvm::DenseMapAPIntKeyInfo::KeyTy
operator !=	LLVMContextImpl.h	/^    bool operator!=(const KeyTy& that) const {$/;"	f	struct:llvm::FunctionTypeKeyInfo::KeyTy
operator ()	LLVMContextImpl.cpp	/^  void operator()(const PairT &P) {$/;"	f	struct:__anon5::DropFirst
operator ()	LLVMContextImpl.cpp	/^  void operator()(const PairT &P) {$/;"	f	struct:__anon5::DropReferences
operator <	ConstantsContext.h	/^  bool operator<(const ExprMapKeyType & that) const {$/;"	f	struct:llvm::ExprMapKeyType
operator <	ConstantsContext.h	/^  bool operator<(const InlineAsmKeyType& that) const {$/;"	f	struct:llvm::InlineAsmKeyType
operator =	Attributes.cpp	/^const AttrListPtr &AttrListPtr::operator=(const AttrListPtr &RHS) {$/;"	f	class:AttrListPtr
operator ==	ConstantsContext.h	/^  bool operator==(const ExprMapKeyType& that) const {$/;"	f	struct:llvm::ExprMapKeyType
operator ==	ConstantsContext.h	/^  bool operator==(const InlineAsmKeyType& that) const {$/;"	f	struct:llvm::InlineAsmKeyType
operator ==	DataLayout.cpp	/^LayoutAlignElem::operator==(const LayoutAlignElem &rhs) const {$/;"	f	class:LayoutAlignElem
operator ==	DataLayout.cpp	/^PointerAlignElem::operator==(const PointerAlignElem &rhs) const {$/;"	f	class:PointerAlignElem
operator ==	LLVMContextImpl.h	/^    bool operator==(const KeyTy& that) const {$/;"	f	struct:llvm::AnonStructTypeKeyInfo::KeyTy
operator ==	LLVMContextImpl.h	/^    bool operator==(const KeyTy& that) const {$/;"	f	struct:llvm::DenseMapAPFloatKeyInfo::KeyTy
operator ==	LLVMContextImpl.h	/^    bool operator==(const KeyTy& that) const {$/;"	f	struct:llvm::DenseMapAPIntKeyInfo::KeyTy
operator ==	LLVMContextImpl.h	/^    bool operator==(const KeyTy& that) const {$/;"	f	struct:llvm::FunctionTypeKeyInfo::KeyTy
operator []	DataLayout.cpp	/^  StructLayout *&operator[](StructType *STy) {$/;"	f	class:__anon4::StructLayoutMap
operator delete	User.cpp	/^void User::operator delete(void *Usr) {$/;"	f	class:llvm::User
operator new	ConstantsContext.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::BinaryConstantExpr
operator new	ConstantsContext.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::CompareConstantExpr
operator new	ConstantsContext.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ExtractElementConstantExpr
operator new	ConstantsContext.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ExtractValueConstantExpr
operator new	ConstantsContext.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::InsertElementConstantExpr
operator new	ConstantsContext.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::InsertValueConstantExpr
operator new	ConstantsContext.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::SelectConstantExpr
operator new	ConstantsContext.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::ShuffleVectorConstantExpr
operator new	ConstantsContext.h	/^  void *operator new(size_t s) {$/;"	f	class:llvm::UnaryConstantExpr
operator new	User.cpp	/^void *User::operator new(size_t s, unsigned Us) {$/;"	f	class:llvm::User
paramHasAttr	Instructions.cpp	/^bool CallInst::paramHasAttr(unsigned i, Attributes::AttrVal A) const {$/;"	f	class:CallInst
paramHasAttr	Instructions.cpp	/^bool InvokeInst::paramHasAttr(unsigned i, Attributes::AttrVal A) const {$/;"	f	class:InvokeInst
parseSpecifier	DataLayout.cpp	/^std::string DataLayout::parseSpecifier(StringRef Desc, DataLayout *td) {$/;"	f	class:DataLayout
passEnumerate	Pass.cpp	/^    void passEnumerate(const PassInfo *P) {$/;"	f	struct:__anon6::GetCFGOnlyPasses
pop	PassManager.cpp	/^void PMStack::pop() {$/;"	f	class:PMStack
predicate	ConstantsContext.h	/^  unsigned short predicate;$/;"	m	class:llvm::CompareConstantExpr
preparePassManager	Pass.cpp	/^void Pass::preparePassManager(PMStack &) {$/;"	f	class:Pass
preserveHigherLevelAnalysis	PassManager.cpp	/^bool PMDataManager::preserveHigherLevelAnalysis(Pass *P) {$/;"	f	class:PMDataManager
print	AsmWriter.cpp	/^void Module::print(raw_ostream &ROS, AssemblyAnnotationWriter *AAW) const {$/;"	f	class:Module
print	AsmWriter.cpp	/^void NamedMDNode::print(raw_ostream &ROS, AssemblyAnnotationWriter *AAW) const {$/;"	f	class:NamedMDNode
print	AsmWriter.cpp	/^void Type::print(raw_ostream &OS) const {$/;"	f	class:Type
print	AsmWriter.cpp	/^void TypePrinting::print(Type *Ty, raw_ostream &OS) {$/;"	f	class:TypePrinting
print	AsmWriter.cpp	/^void Value::print(raw_ostream &ROS, AssemblyAnnotationWriter *AAW) const {$/;"	f	class:Value
print	DebugInfo.cpp	/^void DIDescriptor::print(raw_ostream &OS) const {$/;"	f	class:DIDescriptor
print	Dominators.cpp	/^void DominatorTree::print(raw_ostream &OS, const Module *) const {$/;"	f	class:DominatorTree
print	GCOV.cpp	/^void FileInfo::print() {$/;"	f	class:FileInfo
print	LeaksContext.h	/^  static void print(const T* P) { errs() << P; }$/;"	f	struct:llvm::PrinterTrait
print	LeaksContext.h	/^  static void print(const Value* P) { errs() << *P; }$/;"	f	struct:llvm::PrinterTrait
print	Pass.cpp	/^void Pass::print(raw_ostream &O,const Module*) const {$/;"	f	class:Pass
print	PassManager.cpp	/^void PassManagerPrettyStackEntry::print(raw_ostream &OS) const {$/;"	f	class:PassManagerPrettyStackEntry
printAlias	AsmWriter.cpp	/^void AssemblyWriter::printAlias(const GlobalAlias *GA) {$/;"	f	class:AssemblyWriter
printArgument	AsmWriter.cpp	/^void AssemblyWriter::printArgument(const Argument *Arg,$/;"	f	class:AssemblyWriter
printBasicBlock	AsmWriter.cpp	/^void AssemblyWriter::printBasicBlock(const BasicBlock *BB) {$/;"	f	class:AssemblyWriter
printCustom	AsmWriter.cpp	/^void Value::printCustom(raw_ostream &OS) const {$/;"	f	class:Value
printDebugLoc	DebugInfo.cpp	/^static void printDebugLoc(DebugLoc DL, raw_ostream &CommentOS,$/;"	f	file:
printExtendedName	DebugInfo.cpp	/^void DIVariable::printExtendedName(raw_ostream &OS) const {$/;"	f	class:DIVariable
printFunction	AsmWriter.cpp	/^void AssemblyWriter::printFunction(const Function *F) {$/;"	f	class:AssemblyWriter
printGlobal	AsmWriter.cpp	/^void AssemblyWriter::printGlobal(const GlobalVariable *GV) {$/;"	f	class:AssemblyWriter
printInfoComment	AsmWriter.cpp	/^void AssemblyWriter::printInfoComment(const Value &V) {$/;"	f	class:AssemblyWriter
printInstruction	AsmWriter.cpp	/^void AssemblyWriter::printInstruction(const Instruction &I) {$/;"	f	class:AssemblyWriter
printInternal	DebugInfo.cpp	/^void DICompileUnit::printInternal(raw_ostream &OS) const {$/;"	f	class:DICompileUnit
printInternal	DebugInfo.cpp	/^void DICompositeType::printInternal(raw_ostream &OS) const {$/;"	f	class:DICompositeType
printInternal	DebugInfo.cpp	/^void DIDerivedType::printInternal(raw_ostream &OS) const {$/;"	f	class:DIDerivedType
printInternal	DebugInfo.cpp	/^void DIEnumerator::printInternal(raw_ostream &OS) const {$/;"	f	class:DIEnumerator
printInternal	DebugInfo.cpp	/^void DIGlobalVariable::printInternal(raw_ostream &OS) const {$/;"	f	class:DIGlobalVariable
printInternal	DebugInfo.cpp	/^void DIObjCProperty::printInternal(raw_ostream &OS) const {$/;"	f	class:DIObjCProperty
printInternal	DebugInfo.cpp	/^void DIScope::printInternal(raw_ostream &OS) const {$/;"	f	class:DIScope
printInternal	DebugInfo.cpp	/^void DISubprogram::printInternal(raw_ostream &OS) const {$/;"	f	class:DISubprogram
printInternal	DebugInfo.cpp	/^void DISubrange::printInternal(raw_ostream &OS) const {$/;"	f	class:DISubrange
printInternal	DebugInfo.cpp	/^void DIType::printInternal(raw_ostream &OS) const {$/;"	f	class:DIType
printInternal	DebugInfo.cpp	/^void DIVariable::printInternal(raw_ostream &OS) const {$/;"	f	class:DIVariable
printMDNodeBody	AsmWriter.cpp	/^void AssemblyWriter::printMDNodeBody(const MDNode *Node) {$/;"	f	class:AssemblyWriter
printModule	AsmWriter.cpp	/^void AssemblyWriter::printModule(const Module *M) {$/;"	f	class:AssemblyWriter
printNamedMDNode	AsmWriter.cpp	/^void AssemblyWriter::printNamedMDNode(const NamedMDNode *NMD) {$/;"	f	class:AssemblyWriter
printStructBody	AsmWriter.cpp	/^void TypePrinting::printStructBody(StructType *STy, raw_ostream &OS) {$/;"	f	class:TypePrinting
printTypeIdentities	AsmWriter.cpp	/^void AssemblyWriter::printTypeIdentities() {$/;"	f	class:AssemblyWriter
processDeclare	DebugInfo.cpp	/^void DebugInfoFinder::processDeclare(DbgDeclareInst *DDI) {$/;"	f	class:DebugInfoFinder
processFunction	AsmWriter.cpp	/^void SlotTracker::processFunction() {$/;"	f	class:SlotTracker
processLexicalBlock	DebugInfo.cpp	/^void DebugInfoFinder::processLexicalBlock(DILexicalBlock LB) {$/;"	f	class:DebugInfoFinder
processLocation	DebugInfo.cpp	/^void DebugInfoFinder::processLocation(DILocation Loc) {$/;"	f	class:DebugInfoFinder
processModule	AsmWriter.cpp	/^void SlotTracker::processModule() {$/;"	f	class:SlotTracker
processModule	DebugInfo.cpp	/^void DebugInfoFinder::processModule(Module &M) {$/;"	f	class:DebugInfoFinder
processSubprogram	DebugInfo.cpp	/^void DebugInfoFinder::processSubprogram(DISubprogram SP) {$/;"	f	class:DebugInfoFinder
processType	DebugInfo.cpp	/^void DebugInfoFinder::processType(DIType DT) {$/;"	f	class:DebugInfoFinder
purgeFunction	AsmWriter.cpp	/^void SlotTracker::purgeFunction() {$/;"	f	class:SlotTracker
push	PassManager.cpp	/^void PMStack::push(PMDataManager *PM) {$/;"	f	class:PMStack
rangeOnlyContains	Constants.cpp	/^static bool rangeOnlyContains(ItTy Start, ItTy End, EltTy Elt) {$/;"	f	file:
read	GCOV.cpp	/^bool GCOVFile::read(GCOVBuffer &Buffer) {$/;"	f	class:GCOVFile
read	GCOV.cpp	/^bool GCOVFunction::read(GCOVBuffer &Buff, GCOV::GCOVFormat Format) {$/;"	f	class:GCOVFunction
recordAvailableAnalysis	PassManager.cpp	/^void PMDataManager::recordAvailableAnalysis(Pass *P) {$/;"	f	class:PMDataManager
registerAnalysisGroup	PassRegistry.cpp	/^void PassRegistry::registerAnalysisGroup(const void *InterfaceID, $/;"	f	class:PassRegistry
registerPass	PassRegistry.cpp	/^void PassRegistry::registerPass(const PassInfo &PI, bool ShouldFree) {$/;"	f	class:PassRegistry
reinsertValue	ValueSymbolTable.cpp	/^void ValueSymbolTable::reinsertValue(Value* V) {$/;"	f	class:ValueSymbolTable
releaseMemory	Pass.cpp	/^void Pass::releaseMemory() {$/;"	f	class:Pass
releaseMemoryOnTheFly	PassManager.cpp	/^void FunctionPassManagerImpl::releaseMemoryOnTheFly() {$/;"	f	class:FunctionPassManagerImpl
remove	ConstantsContext.h	/^  void remove(ConstantClass *CP) {$/;"	f	class:llvm::ConstantAggrUniqueMap
remove	ConstantsContext.h	/^  void remove(ConstantClass *CP) {$/;"	f	class:llvm::ConstantUniqueMap
removeAttr	Attributes.cpp	/^AttrListPtr AttrListPtr::removeAttr(LLVMContext &C, unsigned Idx,$/;"	f	class:AttrListPtr
removeAttr	Function.cpp	/^void Argument::removeAttr(Attributes attr) {$/;"	f	class:Argument
removeAttribute	Attributes.cpp	/^AttrBuilder &AttrBuilder::removeAttribute(Attributes::AttrVal Val) {$/;"	f	class:AttrBuilder
removeAttribute	Function.cpp	/^void Function::removeAttribute(unsigned i, Attributes attr) {$/;"	f	class:Function
removeAttribute	Instructions.cpp	/^void CallInst::removeAttribute(unsigned i, Attributes attr) {$/;"	f	class:CallInst
removeAttribute	Instructions.cpp	/^void InvokeInst::removeAttribute(unsigned i, Attributes attr) {$/;"	f	class:InvokeInst
removeAttributes	Attributes.cpp	/^AttrBuilder &AttrBuilder::removeAttributes(const Attributes &A){$/;"	f	class:AttrBuilder
removeCase	Instructions.cpp	/^void SwitchInst::removeCase(CaseIt& i) {$/;"	f	class:SwitchInst
removeDeadConstantUsers	Constants.cpp	/^void Constant::removeDeadConstantUsers() const {$/;"	f	class:Constant
removeDeadPasses	PassManager.cpp	/^void PMDataManager::removeDeadPasses(Pass *P, StringRef Msg,$/;"	f	class:PMDataManager
removeDeadUsersOfConstant	Constants.cpp	/^static bool removeDeadUsersOfConstant(const Constant *C) {$/;"	f	file:
removeDestination	Instructions.cpp	/^void IndirectBrInst::removeDestination(unsigned idx) {$/;"	f	class:IndirectBrInst
removeFromParent	BasicBlock.cpp	/^void BasicBlock::removeFromParent() {$/;"	f	class:BasicBlock
removeFromParent	Function.cpp	/^void Function::removeFromParent() {$/;"	f	class:Function
removeFromParent	Globals.cpp	/^void GlobalAlias::removeFromParent() {$/;"	f	class:GlobalAlias
removeFromParent	Globals.cpp	/^void GlobalVariable::removeFromParent() {$/;"	f	class:GlobalVariable
removeFromParent	Instruction.cpp	/^void Instruction::removeFromParent() {$/;"	f	class:Instruction
removeGarbage	LeaksContext.h	/^  void removeGarbage(const T* o) {$/;"	f	struct:llvm::LeakDetectorImpl
removeGarbageObjectImpl	LeakDetector.cpp	/^void LeakDetector::removeGarbageObjectImpl(const Value *Object) {$/;"	f	class:LeakDetector
removeGarbageObjectImpl	LeakDetector.cpp	/^void LeakDetector::removeGarbageObjectImpl(void *Object) {$/;"	f	class:LeakDetector
removeIncomingValue	Instructions.cpp	/^Value *PHINode::removeIncomingValue(unsigned Idx, bool DeletePHIIfEmpty) {$/;"	f	class:PHINode
removeLibrary	Module.cpp	/^void Module::removeLibrary(StringRef Lib) {$/;"	f	class:Module
removeModule	LLVMContext.cpp	/^void LLVMContext::removeModule(Module *M) {$/;"	f	class:LLVMContext
removeNodeFromList	SymbolTableListTraitsImpl.h	/^::removeNodeFromList(ValueSubClass *V) {$/;"	f	class:llvm::SymbolTableListTraits
removeNotPreservedAnalysis	PassManager.cpp	/^void PMDataManager::removeNotPreservedAnalysis(Pass *P) {$/;"	f	class:PMDataManager
removePredecessor	BasicBlock.cpp	/^void BasicBlock::removePredecessor(BasicBlock *Pred,$/;"	f	class:BasicBlock
removeRegistrationListener	PassRegistry.cpp	/^void PassRegistry::removeRegistrationListener(PassRegistrationListener *L) {$/;"	f	class:PassRegistry
removeValueName	ValueSymbolTable.cpp	/^void ValueSymbolTable::removeValueName(ValueName *V) {$/;"	f	class:ValueSymbolTable
replaceAllUsesWith	DebugInfo.cpp	/^void DIType::replaceAllUsesWith(DIDescriptor &D) {$/;"	f	class:DIType
replaceAllUsesWith	DebugInfo.cpp	/^void DIType::replaceAllUsesWith(MDNode *D) {$/;"	f	class:DIType
replaceAllUsesWith	Value.cpp	/^void Value::replaceAllUsesWith(Value *New) {$/;"	f	class:Value
replaceFunctionField	DebugInfo.cpp	/^void DIDescriptor::replaceFunctionField(unsigned Elt, Function *F) {$/;"	f	class:DIDescriptor
replaceOperand	Metadata.cpp	/^void MDNode::replaceOperand(MDNodeOperand *Op, Value *To) {$/;"	f	class:MDNode
replaceOperandWith	Metadata.cpp	/^void MDNode::replaceOperandWith(unsigned i, Value *Val) {$/;"	f	class:MDNode
replaceSuccessorsPhiUsesWith	BasicBlock.cpp	/^void BasicBlock::replaceSuccessorsPhiUsesWith(BasicBlock *New) {$/;"	f	class:BasicBlock
replaceUsesOfWith	User.cpp	/^void User::replaceUsesOfWith(Value *From, Value *To) {$/;"	f	class:llvm::User
replaceUsesOfWithOnConstant	Constants.cpp	/^void BlockAddress::replaceUsesOfWithOnConstant(Value *From, Value *To, Use *U) {$/;"	f	class:BlockAddress
replaceUsesOfWithOnConstant	Constants.cpp	/^void ConstantArray::replaceUsesOfWithOnConstant(Value *From, Value *To,$/;"	f	class:ConstantArray
replaceUsesOfWithOnConstant	Constants.cpp	/^void ConstantExpr::replaceUsesOfWithOnConstant(Value *From, Value *ToV,$/;"	f	class:ConstantExpr
replaceUsesOfWithOnConstant	Constants.cpp	/^void ConstantStruct::replaceUsesOfWithOnConstant(Value *From, Value *To,$/;"	f	class:ConstantStruct
replaceUsesOfWithOnConstant	Constants.cpp	/^void ConstantVector::replaceUsesOfWithOnConstant(Value *From, Value *To,$/;"	f	class:ConstantVector
replaceUsesOfWithOnConstant	Globals.cpp	/^void GlobalVariable::replaceUsesOfWithOnConstant(Value *From, Value *To,$/;"	f	class:GlobalVariable
resolveAliasedGlobal	Globals.cpp	/^const GlobalValue *GlobalAlias::resolveAliasedGlobal(bool stopOnWeak) const {$/;"	f	class:GlobalAlias
retainType	DIBuilder.cpp	/^void DIBuilder::retainType(DIType T) {$/;"	f	class:DIBuilder
run	PassManager.cpp	/^bool FunctionPassManager::run(Function &F) {$/;"	f	class:FunctionPassManager
run	PassManager.cpp	/^bool FunctionPassManagerImpl::run(Function &F) {$/;"	f	class:FunctionPassManagerImpl
run	PassManager.cpp	/^bool PassManager::run(Module &M) {$/;"	f	class:PassManager
run	PassManager.cpp	/^bool PassManagerImpl::run(Module &M) {$/;"	f	class:PassManagerImpl
run	TypeFinder.cpp	/^void TypeFinder::run(const Module &M, bool onlyNamed) {$/;"	f	class:TypeFinder
runOnFunction	Dominators.cpp	/^bool DominatorTree::runOnFunction(Function &F) {$/;"	f	class:DominatorTree
runOnFunction	PassManager.cpp	/^bool BBPassManager::runOnFunction(Function &F) {$/;"	f	class:BBPassManager
runOnFunction	PassManager.cpp	/^bool FPPassManager::runOnFunction(Function &F) {$/;"	f	class:FPPassManager
runOnFunction	PrintModulePass.cpp	/^    bool runOnFunction(Function &F) {$/;"	f	class:__anon10::PrintFunctionPass
runOnFunction	Verifier.cpp	/^    bool runOnFunction(Function &F) {$/;"	f	struct:__anon12::PreVerifier
runOnFunction	Verifier.cpp	/^    bool runOnFunction(Function &F) {$/;"	f	struct:__anon13::Verifier
runOnModule	PassManager.cpp	/^MPPassManager::runOnModule(Module &M) {$/;"	f	class:MPPassManager
runOnModule	PassManager.cpp	/^bool FPPassManager::runOnModule(Module &M) {$/;"	f	class:FPPassManager
runOnModule	PrintModulePass.cpp	/^    bool runOnModule(Module &M) {$/;"	f	class:__anon10::PrintModulePass
schedulePass	PassManager.cpp	/^void PMTopLevelManager::schedulePass(Pass *P) {$/;"	f	class:PMTopLevelManager
selectAlternative	InlineAsm.cpp	/^void InlineAsm::ConstraintInfo::selectAlternative(unsigned index) {$/;"	f	class:InlineAsm::ConstraintInfo
set	Metadata.cpp	/^  void set(Value *V) {$/;"	f	class:llvm::MDNodeOperand
setAliasee	Globals.cpp	/^void GlobalAlias::setAliasee(Constant *Aliasee) {$/;"	f	class:GlobalAlias
setAlignment	DataLayout.cpp	/^DataLayout::setAlignment(AlignTypeEnum align_type, unsigned abi_align,$/;"	f	class:DataLayout
setAlignment	Globals.cpp	/^void GlobalValue::setAlignment(unsigned Align) {$/;"	f	class:GlobalValue
setAlignment	Instructions.cpp	/^void AllocaInst::setAlignment(unsigned Align) {$/;"	f	class:AllocaInst
setAlignment	Instructions.cpp	/^void LoadInst::setAlignment(unsigned Align) {$/;"	f	class:LoadInst
setAlignment	Instructions.cpp	/^void StoreInst::setAlignment(unsigned Align) {$/;"	f	class:StoreInst
setAsFirstOperand	Metadata.cpp	/^  void setAsFirstOperand(unsigned V) { this->setValPtrInt(V); }$/;"	f	class:llvm::MDNodeOperand
setBody	Type.cpp	/^void StructType::setBody(ArrayRef<Type*> Elements, bool isPacked) {$/;"	f	class:StructType
setBody	Type.cpp	/^void StructType::setBody(Type *type, ...) {$/;"	f	class:StructType
setGC	Function.cpp	/^void Function::setGC(const char *Str) {$/;"	f	class:Function
setHasNoSignedWrap	Instructions.cpp	/^void BinaryOperator::setHasNoSignedWrap(bool b) {$/;"	f	class:BinaryOperator
setHasNoUnsignedWrap	Instructions.cpp	/^void BinaryOperator::setHasNoUnsignedWrap(bool b) {$/;"	f	class:BinaryOperator
setInitializer	Globals.cpp	/^void GlobalVariable::setInitializer(Constant *InitVal) {$/;"	f	class:GlobalVariable
setInlineAsmDiagnosticHandler	LLVMContext.cpp	/^setInlineAsmDiagnosticHandler(InlineAsmDiagHandlerTy DiagHandler,$/;"	f	class:LLVMContext
setIsExact	Instructions.cpp	/^void BinaryOperator::setIsExact(bool b) {$/;"	f	class:BinaryOperator
setIsInBounds	Instructions.cpp	/^void GetElementPtrInst::setIsInBounds(bool B) {$/;"	f	class:GetElementPtrInst
setIsNotUniqued	Metadata.cpp	/^void MDNode::setIsNotUniqued() {$/;"	f	class:MDNode
setLastUser	PassManager.cpp	/^PMTopLevelManager::setLastUser(ArrayRef<Pass*> AnalysisPasses, Pass *P) {$/;"	f	class:PMTopLevelManager
setMaterializer	Module.cpp	/^void Module::setMaterializer(GVMaterializer *GVM) {$/;"	f	class:Module
setMetadata	Metadata.cpp	/^void Instruction::setMetadata(StringRef Kind, MDNode *Node) {$/;"	f	class:Instruction
setMetadata	Metadata.cpp	/^void Instruction::setMetadata(unsigned KindID, MDNode *Node) {$/;"	f	class:Instruction
setName	LeaksContext.h	/^  void setName(const char* n) { $/;"	f	struct:llvm::LeakDetectorImpl
setName	Type.cpp	/^void StructType::setName(StringRef Name) {$/;"	f	class:StructType
setName	Value.cpp	/^void Value::setName(const Twine &NewName) {$/;"	f	class:Value
setParent	BasicBlock.cpp	/^void BasicBlock::setParent(Function *parent) {$/;"	f	class:BasicBlock
setParent	Function.cpp	/^void Argument::setParent(Function *parent) {$/;"	f	class:Argument
setParent	Function.cpp	/^void Function::setParent(Module *parent) {$/;"	f	class:Function
setParent	Globals.cpp	/^void GlobalAlias::setParent(Module *parent) {$/;"	f	class:GlobalAlias
setParent	Globals.cpp	/^void GlobalVariable::setParent(Module *parent) {$/;"	f	class:GlobalVariable
setParent	Instruction.cpp	/^void Instruction::setParent(BasicBlock *P) {$/;"	f	class:Instruction
setPointerAlignment	DataLayout.cpp	/^DataLayout::setPointerAlignment(uint32_t addr_space, unsigned abi_align,$/;"	f	class:DataLayout
setPreservesCFG	Pass.cpp	/^void AnalysisUsage::setPreservesCFG() {$/;"	f	class:AnalysisUsage
setResolver	Pass.cpp	/^void Pass::setResolver(AnalysisResolver *AR) {$/;"	f	class:Pass
setSuccessorV	Instructions.cpp	/^void BranchInst::setSuccessorV(unsigned idx, BasicBlock *B) {$/;"	f	class:BranchInst
setSuccessorV	Instructions.cpp	/^void IndirectBrInst::setSuccessorV(unsigned idx, BasicBlock *B) {$/;"	f	class:IndirectBrInst
setSuccessorV	Instructions.cpp	/^void InvokeInst::setSuccessorV(unsigned idx, BasicBlock *B) {$/;"	f	class:InvokeInst
setSuccessorV	Instructions.cpp	/^void ResumeInst::setSuccessorV(unsigned idx, BasicBlock *NewSucc) {$/;"	f	class:ResumeInst
setSuccessorV	Instructions.cpp	/^void ReturnInst::setSuccessorV(unsigned idx, BasicBlock *NewSucc) {$/;"	f	class:ReturnInst
setSuccessorV	Instructions.cpp	/^void SwitchInst::setSuccessorV(unsigned idx, BasicBlock *B) {$/;"	f	class:SwitchInst
setSuccessorV	Instructions.cpp	/^void UnreachableInst::setSuccessorV(unsigned idx, BasicBlock *NewSucc) {$/;"	f	class:UnreachableInst
setSymTabObject	SymbolTableListTraitsImpl.h	/^::setSymTabObject(TPtr *Dest, TPtr Src) {$/;"	f	class:llvm::SymbolTableListTraits
splitBasicBlock	BasicBlock.cpp	/^BasicBlock *BasicBlock::splitBasicBlock(iterator I, const Twine &BBName) {$/;"	f	class:BasicBlock
stripInBoundsConstantOffsets	Value.cpp	/^Value *Value::stripInBoundsConstantOffsets() {$/;"	f	class:Value
stripInBoundsOffsets	Value.cpp	/^Value *Value::stripInBoundsOffsets() {$/;"	f	class:Value
stripPointerCasts	Value.cpp	/^Value *Value::stripPointerCasts() {$/;"	f	class:Value
stripPointerCastsAndOffsets	Value.cpp	/^static Value *stripPointerCastsAndOffsets(Value *V) {$/;"	f	namespace:__anon11
subclassdata	ConstantsContext.h	/^  uint16_t subclassdata;$/;"	m	struct:llvm::ExprMapKeyType
subclassoptionaldata	ConstantsContext.h	/^  uint8_t subclassoptionaldata;$/;"	m	struct:llvm::ExprMapKeyType
swap	Use.cpp	/^void Use::swap(Use &RHS) {$/;"	f	class:llvm::Use
swapOperands	Instructions.cpp	/^bool BinaryOperator::swapOperands() {$/;"	f	class:BinaryOperator
swapOperands	Instructions.cpp	/^void CmpInst::swapOperands() {$/;"	f	class:CmpInst
swapSuccessors	Instructions.cpp	/^void BranchInst::swapSuccessors() {$/;"	f	class:BranchInst
takeName	Value.cpp	/^void Value::takeName(Value *V) {$/;"	f	class:Value
transferNodesFromList	SymbolTableListTraitsImpl.h	/^::transferNodesFromList(ilist_traits<ValueSubClass> &L2,$/;"	f	class:llvm::SymbolTableListTraits
tryMergeRange	Metadata.cpp	/^static bool tryMergeRange(SmallVector<Value*, 4> &EndPoints, ConstantInt *Low,$/;"	f	file:
type	LLVMContextImpl.h	/^    Type* type;$/;"	m	struct:llvm::DenseMapAPIntKeyInfo::KeyTy
typeIncompatible	Attributes.cpp	/^Attributes Attributes::typeIncompatible(Type *Ty) {$/;"	f	class:Attributes
unregisterPass	PassRegistry.cpp	/^void PassRegistry::unregisterPass(const PassInfo &PI) {$/;"	f	class:PassRegistry
uses	ConstantsContext.h	/^  static unsigned uses(Constant * const & v) {$/;"	f	struct:llvm::ConstantTraits
uses	ConstantsContext.h	/^  static unsigned uses(const std::vector<T, Alloc>& v) {$/;"	f	struct:llvm::ConstantTraits
val	LLVMContextImpl.h	/^    APFloat val;$/;"	m	struct:llvm::DenseMapAPFloatKeyInfo::KeyTy
val	LLVMContextImpl.h	/^    APInt val;$/;"	m	struct:llvm::DenseMapAPIntKeyInfo::KeyTy
verifyAnalysis	Dominators.cpp	/^void DominatorTree::verifyAnalysis() const {$/;"	f	class:DominatorTree
verifyAnalysis	Pass.cpp	/^void Pass::verifyAnalysis() const {$/;"	f	class:Pass
verifyDominatesUse	Verifier.cpp	/^void Verifier::verifyDominatesUse(Instruction &I, unsigned i) {$/;"	f	class:Verifier
verifyFunction	Verifier.cpp	/^bool llvm::verifyFunction(const Function &f, VerifierFailureAction action) {$/;"	f	class:llvm
verifyModule	Verifier.cpp	/^bool llvm::verifyModule(const Module &M, VerifierFailureAction action,$/;"	f	class:llvm
verifyPreservedAnalysis	PassManager.cpp	/^void PMDataManager::verifyPreservedAnalysis(Pass *P) {$/;"	f	class:PMDataManager
visit	Verifier.cpp	/^void Verifier::visit(Instruction &I) {$/;"	f	class:Verifier
visitAllocaInst	Verifier.cpp	/^void Verifier::visitAllocaInst(AllocaInst &AI) {$/;"	f	class:Verifier
visitAtomicCmpXchgInst	Verifier.cpp	/^void Verifier::visitAtomicCmpXchgInst(AtomicCmpXchgInst &CXI) {$/;"	f	class:Verifier
visitAtomicRMWInst	Verifier.cpp	/^void Verifier::visitAtomicRMWInst(AtomicRMWInst &RMWI) {$/;"	f	class:Verifier
visitBasicBlock	Verifier.cpp	/^void Verifier::visitBasicBlock(BasicBlock &BB) {$/;"	f	class:Verifier
visitBinaryOperator	Verifier.cpp	/^void Verifier::visitBinaryOperator(BinaryOperator &B) {$/;"	f	class:Verifier
visitBitCastInst	Verifier.cpp	/^void Verifier::visitBitCastInst(BitCastInst &I) {$/;"	f	class:Verifier
visitBranchInst	Verifier.cpp	/^void Verifier::visitBranchInst(BranchInst &BI) {$/;"	f	class:Verifier
visitCallInst	Verifier.cpp	/^void Verifier::visitCallInst(CallInst &CI) {$/;"	f	class:Verifier
visitExtractElementInst	Verifier.cpp	/^void Verifier::visitExtractElementInst(ExtractElementInst &EI) {$/;"	f	class:Verifier
visitExtractValueInst	Verifier.cpp	/^void Verifier::visitExtractValueInst(ExtractValueInst &EVI) {$/;"	f	class:Verifier
visitFCmpInst	Verifier.cpp	/^void Verifier::visitFCmpInst(FCmpInst &FC) {$/;"	f	class:Verifier
visitFPExtInst	Verifier.cpp	/^void Verifier::visitFPExtInst(FPExtInst &I) {$/;"	f	class:Verifier
visitFPToSIInst	Verifier.cpp	/^void Verifier::visitFPToSIInst(FPToSIInst &I) {$/;"	f	class:Verifier
visitFPToUIInst	Verifier.cpp	/^void Verifier::visitFPToUIInst(FPToUIInst &I) {$/;"	f	class:Verifier
visitFPTruncInst	Verifier.cpp	/^void Verifier::visitFPTruncInst(FPTruncInst &I) {$/;"	f	class:Verifier
visitFenceInst	Verifier.cpp	/^void Verifier::visitFenceInst(FenceInst &FI) {$/;"	f	class:Verifier
visitFunction	Verifier.cpp	/^void Verifier::visitFunction(Function &F) {$/;"	f	class:Verifier
visitGetElementPtrInst	Verifier.cpp	/^void Verifier::visitGetElementPtrInst(GetElementPtrInst &GEP) {$/;"	f	class:Verifier
visitGlobalAlias	Verifier.cpp	/^void Verifier::visitGlobalAlias(GlobalAlias &GA) {$/;"	f	class:Verifier
visitGlobalValue	Verifier.cpp	/^void Verifier::visitGlobalValue(GlobalValue &GV) {$/;"	f	class:Verifier
visitGlobalVariable	Verifier.cpp	/^void Verifier::visitGlobalVariable(GlobalVariable &GV) {$/;"	f	class:Verifier
visitICmpInst	Verifier.cpp	/^void Verifier::visitICmpInst(ICmpInst &IC) {$/;"	f	class:Verifier
visitIndirectBrInst	Verifier.cpp	/^void Verifier::visitIndirectBrInst(IndirectBrInst &BI) {$/;"	f	class:Verifier
visitInsertElementInst	Verifier.cpp	/^void Verifier::visitInsertElementInst(InsertElementInst &IE) {$/;"	f	class:Verifier
visitInsertValueInst	Verifier.cpp	/^void Verifier::visitInsertValueInst(InsertValueInst &IVI) {$/;"	f	class:Verifier
visitInstruction	Verifier.cpp	/^void Verifier::visitInstruction(Instruction &I) {$/;"	f	class:Verifier
visitIntToPtrInst	Verifier.cpp	/^void Verifier::visitIntToPtrInst(IntToPtrInst &I) {$/;"	f	class:Verifier
visitIntrinsicFunctionCall	Verifier.cpp	/^void Verifier::visitIntrinsicFunctionCall(Intrinsic::ID ID, CallInst &CI) {$/;"	f	class:Verifier
visitInvokeInst	Verifier.cpp	/^void Verifier::visitInvokeInst(InvokeInst &II) {$/;"	f	class:Verifier
visitLandingPadInst	Verifier.cpp	/^void Verifier::visitLandingPadInst(LandingPadInst &LPI) {$/;"	f	class:Verifier
visitLoadInst	Verifier.cpp	/^void Verifier::visitLoadInst(LoadInst &LI) {$/;"	f	class:Verifier
visitMDNode	Verifier.cpp	/^void Verifier::visitMDNode(MDNode &MD, Function *F) {$/;"	f	class:Verifier
visitNamedMDNode	Verifier.cpp	/^void Verifier::visitNamedMDNode(NamedMDNode &NMD) {$/;"	f	class:Verifier
visitPHINode	Verifier.cpp	/^void Verifier::visitPHINode(PHINode &PN) {$/;"	f	class:Verifier
visitPtrToIntInst	Verifier.cpp	/^void Verifier::visitPtrToIntInst(PtrToIntInst &I) {$/;"	f	class:Verifier
visitReturnInst	Verifier.cpp	/^void Verifier::visitReturnInst(ReturnInst &RI) {$/;"	f	class:Verifier
visitSExtInst	Verifier.cpp	/^void Verifier::visitSExtInst(SExtInst &I) {$/;"	f	class:Verifier
visitSIToFPInst	Verifier.cpp	/^void Verifier::visitSIToFPInst(SIToFPInst &I) {$/;"	f	class:Verifier
visitSelectInst	Verifier.cpp	/^void Verifier::visitSelectInst(SelectInst &SI) {$/;"	f	class:Verifier
visitShuffleVectorInst	Verifier.cpp	/^void Verifier::visitShuffleVectorInst(ShuffleVectorInst &SV) {$/;"	f	class:Verifier
visitStoreInst	Verifier.cpp	/^void Verifier::visitStoreInst(StoreInst &SI) {$/;"	f	class:Verifier
visitSwitchInst	Verifier.cpp	/^void Verifier::visitSwitchInst(SwitchInst &SI) {$/;"	f	class:Verifier
visitTerminatorInst	Verifier.cpp	/^void Verifier::visitTerminatorInst(TerminatorInst &I) {$/;"	f	class:Verifier
visitTruncInst	Verifier.cpp	/^void Verifier::visitTruncInst(TruncInst &I) {$/;"	f	class:Verifier
visitUIToFPInst	Verifier.cpp	/^void Verifier::visitUIToFPInst(UIToFPInst &I) {$/;"	f	class:Verifier
visitUserOp1	Verifier.cpp	/^void Verifier::visitUserOp1(Instruction &I) {$/;"	f	class:Verifier
visitUserOp2	Verifier.cpp	/^    void visitUserOp2(Instruction &I) { visitUserOp1(I); }$/;"	f	struct:__anon13::Verifier
visitVAArgInst	Verifier.cpp	/^    void visitVAArgInst(VAArgInst &VAA) { visitInstruction(VAA); }$/;"	f	struct:__anon13::Verifier
visitZExtInst	Verifier.cpp	/^void Verifier::visitZExtInst(ZExtInst &I) {$/;"	f	class:Verifier
wasRun	PassManager.cpp	/^  bool wasRun;$/;"	m	class:llvm::FunctionPassManagerImpl	file:
writeAllMDNodes	AsmWriter.cpp	/^void AssemblyWriter::writeAllMDNodes() {$/;"	f	class:AssemblyWriter
writeAtomic	AsmWriter.cpp	/^void AssemblyWriter::writeAtomic(AtomicOrdering Ordering,$/;"	f	class:AssemblyWriter
writeAtomicRMWOperation	AsmWriter.cpp	/^static void writeAtomicRMWOperation(raw_ostream &Out,$/;"	f	file:
writeOperand	AsmWriter.cpp	/^void AssemblyWriter::writeOperand(const Value *Operand, bool PrintType) {$/;"	f	class:AssemblyWriter
writeParamOperand	AsmWriter.cpp	/^void AssemblyWriter::writeParamOperand(const Value *Operand,$/;"	f	class:AssemblyWriter
zap	Use.cpp	/^void Use::zap(Use *Start, const Use *Stop, bool del) {$/;"	f	class:llvm::Use
~AllocaInst	Instructions.cpp	/^AllocaInst::~AllocaInst() {$/;"	f	class:AllocaInst
~AssemblyAnnotationWriter	AsmWriter.cpp	/^AssemblyAnnotationWriter::~AssemblyAnnotationWriter() {}$/;"	f	class:AssemblyAnnotationWriter
~AttrListPtr	Attributes.cpp	/^AttrListPtr::~AttrListPtr() {$/;"	f	class:AttrListPtr
~AttributeListImpl	Attributes.cpp	/^AttributeListImpl::~AttributeListImpl() {$/;"	f	class:AttributeListImpl
~BasicBlock	BasicBlock.cpp	/^BasicBlock::~BasicBlock() {$/;"	f	class:BasicBlock
~CallInst	Instructions.cpp	/^CallInst::~CallInst() {$/;"	f	class:CallInst
~DataLayout	DataLayout.cpp	/^DataLayout::~DataLayout() {$/;"	f	class:DataLayout
~Function	Function.cpp	/^Function::~Function() {$/;"	f	class:Function
~FunctionPassManager	PassManager.cpp	/^FunctionPassManager::~FunctionPassManager() {$/;"	f	class:FunctionPassManager
~GCOVBlock	GCOV.cpp	/^GCOVBlock::~GCOVBlock() {$/;"	f	class:GCOVBlock
~GCOVFile	GCOV.cpp	/^GCOVFile::~GCOVFile() {$/;"	f	class:GCOVFile
~GCOVFunction	GCOV.cpp	/^GCOVFunction::~GCOVFunction() {$/;"	f	class:GCOVFunction
~GVMaterializer	GVMaterializer.cpp	/^GVMaterializer::~GVMaterializer() {}$/;"	f	class:GVMaterializer
~ImmutablePass	Pass.cpp	/^ImmutablePass::~ImmutablePass() { }$/;"	f	class:ImmutablePass
~IndirectBrInst	Instructions.cpp	/^IndirectBrInst::~IndirectBrInst() {$/;"	f	class:IndirectBrInst
~InlineAsm	InlineAsm.cpp	/^InlineAsm::~InlineAsm() {$/;"	f	class:InlineAsm
~Instruction	Instruction.cpp	/^Instruction::~Instruction() {$/;"	f	class:Instruction
~LLVMContext	LLVMContext.cpp	/^LLVMContext::~LLVMContext() { delete pImpl; }$/;"	f	class:LLVMContext
~LLVMContextImpl	LLVMContextImpl.cpp	/^LLVMContextImpl::~LLVMContextImpl() {$/;"	f	class:LLVMContextImpl
~LandingPadInst	Instructions.cpp	/^LandingPadInst::~LandingPadInst() {$/;"	f	class:LandingPadInst
~MDNode	Metadata.cpp	/^MDNode::~MDNode() {$/;"	f	class:MDNode
~MDNodeOperand	Metadata.cpp	/^  ~MDNodeOperand() {}$/;"	f	class:llvm::MDNodeOperand
~MPPassManager	PassManager.cpp	/^  virtual ~MPPassManager() {$/;"	f	class:llvm::MPPassManager
~Module	Module.cpp	/^Module::~Module() {$/;"	f	class:Module
~ModulePass	Pass.cpp	/^ModulePass::~ModulePass() { }$/;"	f	class:ModulePass
~NamedMDNode	Metadata.cpp	/^NamedMDNode::~NamedMDNode() {$/;"	f	class:NamedMDNode
~PHINode	Instructions.cpp	/^PHINode::~PHINode() {$/;"	f	class:PHINode
~PMDataManager	PassManager.cpp	/^PMDataManager::~PMDataManager() {$/;"	f	class:PMDataManager
~PMTopLevelManager	PassManager.cpp	/^PMTopLevelManager::~PMTopLevelManager() {$/;"	f	class:PMTopLevelManager
~Pass	Pass.cpp	/^Pass::~Pass() {$/;"	f	class:Pass
~PassManager	PassManager.cpp	/^PassManager::~PassManager() {$/;"	f	class:PassManager
~PassManagerBase	PassManager.cpp	/^PassManagerBase::~PassManagerBase() {}$/;"	f	class:PassManagerBase
~PassNameParser	Pass.cpp	/^PassNameParser::~PassNameParser() {}$/;"	f	class:PassNameParser
~PassRegistrationListener	Pass.cpp	/^PassRegistrationListener::~PassRegistrationListener() {$/;"	f	class:PassRegistrationListener
~PassRegistry	PassRegistry.cpp	/^PassRegistry::~PassRegistry() {$/;"	f	class:PassRegistry
~PrintFunctionPass	PrintModulePass.cpp	/^    ~PrintFunctionPass() {$/;"	f	class:__anon10::PrintFunctionPass
~PrintModulePass	PrintModulePass.cpp	/^    ~PrintModulePass() {$/;"	f	class:__anon10::PrintModulePass
~ReturnInst	Instructions.cpp	/^ReturnInst::~ReturnInst() {$/;"	f	class:ReturnInst
~StructLayoutMap	DataLayout.cpp	/^  virtual ~StructLayoutMap() {$/;"	f	class:__anon4::StructLayoutMap
~SwitchInst	Instructions.cpp	/^SwitchInst::~SwitchInst() {$/;"	f	class:SwitchInst
~TerminatorInst	Instructions.cpp	/^TerminatorInst::~TerminatorInst() {$/;"	f	class:TerminatorInst
~TimingInfo	PassManager.cpp	/^  ~TimingInfo() {$/;"	f	class:__anon8::TimingInfo
~TypePrinting	AsmWriter.cpp	/^  ~TypePrinting() {}$/;"	f	class:__anon1::TypePrinting
~UnaryInstruction	Instructions.cpp	/^UnaryInstruction::~UnaryInstruction() {$/;"	f	class:UnaryInstruction
~Value	Value.cpp	/^Value::~Value() {$/;"	f	class:Value
~ValueSymbolTable	ValueSymbolTable.cpp	/^ValueSymbolTable::~ValueSymbolTable() {$/;"	f	class:ValueSymbolTable
