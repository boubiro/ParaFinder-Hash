!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	asan/lit_tests/initialization-nobug.cc	/^int A = (1 << 1) + (1 << 3) + (1 << 5), B;$/;"	v
A	tsan/lit_tests/vptr_benign_race.cc	/^  A() {$/;"	f	struct:A
A	tsan/lit_tests/vptr_benign_race.cc	/^struct A {$/;"	s	file:
A	tsan/lit_tests/vptr_harmful_race.cc	/^  A() {$/;"	f	struct:A
A	tsan/lit_tests/vptr_harmful_race.cc	/^struct A {$/;"	s	file:
AAA	tsan/lit_tests/virtual_inheritance_compile_bug.cc	/^struct AAA              {  virtual long aaa () { return 0; } };  \/\/ NOLINT$/;"	s	file:
ACCESS_ADDRESS	asan/asan_interceptors.cc	32;"	d	file:
ACCESS_MEMORY_RANGE	asan/asan_interceptors.cc	47;"	d	file:
AK_Float	ubsan/ubsan_diag.h	/^    AK_Float,  \/\/\/< A floating-point argument.$/;"	e	enum:__ubsan::Diag::ArgKind
AK_Pointer	ubsan/ubsan_diag.h	/^    AK_Pointer \/\/\/< A pointer argument, displayed in hexadecimal.$/;"	e	enum:__ubsan::Diag::ArgKind
AK_SInt	ubsan/ubsan_diag.h	/^    AK_SInt,   \/\/\/< A signed integer argument.$/;"	e	enum:__ubsan::Diag::ArgKind
AK_String	ubsan/ubsan_diag.h	/^    AK_String, \/\/\/< A string argument, displayed as-is.$/;"	e	enum:__ubsan::Diag::ArgKind
AK_UInt	ubsan/ubsan_diag.h	/^    AK_UInt,   \/\/\/< An unsigned integer argument.$/;"	e	enum:__ubsan::Diag::ArgKind
ALIAS	sanitizer_common/sanitizer_internal_defs.h	31;"	d
ALIGNED	sanitizer_common/sanitizer_internal_defs.h	32;"	d
ALWAYS_INLINE	sanitizer_common/sanitizer_internal_defs.h	29;"	d
ARM_EABI_FNALIAS	adddf3.c	/^ARM_EABI_FNALIAS(dadd, adddf3)$/;"	f
ARM_EABI_FNALIAS	addsf3.c	/^ARM_EABI_FNALIAS(fadd, addsf3)$/;"	f
ARM_EABI_FNALIAS	ashldi3.c	/^ARM_EABI_FNALIAS(llsl, ashldi3)$/;"	f
ARM_EABI_FNALIAS	ashrdi3.c	/^ARM_EABI_FNALIAS(lasr, ashrdi3)$/;"	f
ARM_EABI_FNALIAS	divdf3.c	/^ARM_EABI_FNALIAS(ddiv, divdf3)$/;"	f
ARM_EABI_FNALIAS	divsf3.c	/^ARM_EABI_FNALIAS(fdiv, divsf3)$/;"	f
ARM_EABI_FNALIAS	divsi3.c	/^ARM_EABI_FNALIAS(idiv, divsi3)$/;"	f
ARM_EABI_FNALIAS	extendsfdf2.c	/^ARM_EABI_FNALIAS(f2d, extendsfdf2)$/;"	f
ARM_EABI_FNALIAS	fixdfdi.c	/^ARM_EABI_FNALIAS(d2lz, fixdfdi)$/;"	f
ARM_EABI_FNALIAS	fixdfsi.c	/^ARM_EABI_FNALIAS(d2iz, fixdfsi)$/;"	f
ARM_EABI_FNALIAS	fixsfdi.c	/^ARM_EABI_FNALIAS(d2lz, fixsfdi)$/;"	f
ARM_EABI_FNALIAS	fixsfsi.c	/^ARM_EABI_FNALIAS(f2iz, fixsfsi)$/;"	f
ARM_EABI_FNALIAS	fixunsdfdi.c	/^ARM_EABI_FNALIAS(d2ulz, fixunsdfdi)$/;"	f
ARM_EABI_FNALIAS	fixunsdfsi.c	/^ARM_EABI_FNALIAS(d2uiz, fixunsdfsi)$/;"	f
ARM_EABI_FNALIAS	fixunssfdi.c	/^ARM_EABI_FNALIAS(f2ulz, fixunssfdi)$/;"	f
ARM_EABI_FNALIAS	fixunssfsi.c	/^ARM_EABI_FNALIAS(f2uiz, fixunssfsi)$/;"	f
ARM_EABI_FNALIAS	floatdidf.c	/^ARM_EABI_FNALIAS(l2d, floatdidf)$/;"	f
ARM_EABI_FNALIAS	floatdisf.c	/^ARM_EABI_FNALIAS(l2f, floatdisf)$/;"	f
ARM_EABI_FNALIAS	floatsidf.c	/^ARM_EABI_FNALIAS(i2d, floatsidf)$/;"	f
ARM_EABI_FNALIAS	floatsisf.c	/^ARM_EABI_FNALIAS(i2f, floatsisf)$/;"	f
ARM_EABI_FNALIAS	floatundidf.c	/^ARM_EABI_FNALIAS(ul2d, floatundidf)$/;"	f
ARM_EABI_FNALIAS	floatundisf.c	/^ARM_EABI_FNALIAS(ul2f, floatundisf)$/;"	f
ARM_EABI_FNALIAS	floatunsidf.c	/^ARM_EABI_FNALIAS(ui2d, floatunsidf)$/;"	f
ARM_EABI_FNALIAS	floatunsisf.c	/^ARM_EABI_FNALIAS(ui2f, floatunsisf)$/;"	f
ARM_EABI_FNALIAS	int_lib.h	26;"	d
ARM_EABI_FNALIAS	int_lib.h	30;"	d
ARM_EABI_FNALIAS	lshrdi3.c	/^ARM_EABI_FNALIAS(llsr, lshrdi3)$/;"	f
ARM_EABI_FNALIAS	muldf3.c	/^ARM_EABI_FNALIAS(dmul, muldf3)$/;"	f
ARM_EABI_FNALIAS	muldi3.c	/^ARM_EABI_FNALIAS(lmul, muldi3)$/;"	f
ARM_EABI_FNALIAS	mulsf3.c	/^ARM_EABI_FNALIAS(fmul, mulsf3)$/;"	f
ARM_EABI_FNALIAS	negdf2.c	/^ARM_EABI_FNALIAS(dneg, negdf2)$/;"	f
ARM_EABI_FNALIAS	negsf2.c	/^ARM_EABI_FNALIAS(fneg, negsf2)$/;"	f
ARM_EABI_FNALIAS	subdf3.c	/^ARM_EABI_FNALIAS(dsub, subdf3)$/;"	f
ARM_EABI_FNALIAS	subsf3.c	/^ARM_EABI_FNALIAS(fsub, subsf3)$/;"	f
ARM_EABI_FNALIAS	truncdfsf2.c	/^ARM_EABI_FNALIAS(d2f, truncdfsf2)$/;"	f
ARM_EABI_FNALIAS	udivsi3.c	/^ARM_EABI_FNALIAS(uidiv, udivsi3)$/;"	f
ARRAY_SIZE	sanitizer_common/sanitizer_internal_defs.h	142;"	d
ASAN_ALLOCATOR_H	asan/asan_allocator.h	16;"	d
ASAN_ANDROID	asan/asan_internal.h	48;"	d
ASAN_ANDROID	asan/asan_internal.h	50;"	d
ASAN_DEFAULT_FAILURE_EXITCODE	asan/asan_internal.h	27;"	d
ASAN_FLAGS_H	asan/asan_flags.h	16;"	d
ASAN_FLEXIBLE_MAPPING_AND_OFFSET	asan/asan_internal.h	80;"	d
ASAN_HAS_EXCEPTIONS	asan/asan_internal.h	74;"	d
ASAN_INTERCEPTED_FUNCTIONS_H	asan/asan_intercepted_functions.h	15;"	d
ASAN_INTERCEPTORS_H	asan/asan_interceptors.h	15;"	d
ASAN_INTERCEPT_ATOLL_AND_STRTOLL	asan/asan_intercepted_functions.h	25;"	d
ASAN_INTERCEPT_FUNC	asan/asan_interceptors.cc	588;"	d	file:
ASAN_INTERCEPT_INDEX	asan/asan_intercepted_functions.h	29;"	d
ASAN_INTERCEPT_MLOCKX	asan/asan_intercepted_functions.h	31;"	d
ASAN_INTERCEPT_PTHREAD_CREATE	asan/asan_intercepted_functions.h	30;"	d
ASAN_INTERCEPT_SIGLONGJMP	asan/asan_intercepted_functions.h	63;"	d
ASAN_INTERCEPT_SIGNAL_AND_SIGACTION	asan/asan_intercepted_functions.h	55;"	d
ASAN_INTERCEPT_STRCASECMP_AND_STRNCASECMP	asan/asan_intercepted_functions.h	28;"	d
ASAN_INTERCEPT_STRDUP	asan/asan_intercepted_functions.h	27;"	d
ASAN_INTERCEPT_STRNLEN	asan/asan_intercepted_functions.h	49;"	d
ASAN_INTERCEPT__LONGJMP	asan/asan_intercepted_functions.h	26;"	d
ASAN_INTERCEPT___CXA_THROW	asan/asan_intercepted_functions.h	69;"	d
ASAN_INTERNAL_H	asan/asan_internal.h	15;"	d
ASAN_LINUX	asan/asan_internal.h	30;"	d
ASAN_LINUX	asan/asan_internal.h	32;"	d
ASAN_LOCK_H	asan/asan_lock.h	15;"	d
ASAN_LOW_MEMORY	asan/asan_internal.h	87;"	d
ASAN_LOW_MEMORY	asan/asan_internal.h	89;"	d
ASAN_LOW_MEMORY	asan/tests/asan_test_config.h	47;"	d
ASAN_MAC	asan/asan_internal.h	36;"	d
ASAN_MAC	asan/asan_internal.h	38;"	d
ASAN_MAC_H	asan/asan_mac.h	15;"	d
ASAN_MAPPING_H	asan/asan_mapping.h	15;"	d
ASAN_NEEDS_SEGV	asan/asan_internal.h	66;"	d
ASAN_NEEDS_SEGV	asan/asan_internal.h	68;"	d
ASAN_OnSIGSEGV	asan/asan_posix.cc	/^static void     ASAN_OnSIGSEGV(int, siginfo_t *siginfo, void *context) {$/;"	f	namespace:__asan
ASAN_PCRE_DOTALL	asan/tests/asan_test_config.h	50;"	d
ASAN_POSIX	asan/asan_internal.h	54;"	d
ASAN_READ_RANGE	asan/asan_interceptors.cc	55;"	d	file:
ASAN_REPORT_ERROR	asan/asan_rtl.cc	186;"	d	file:
ASAN_STACK_H	asan/asan_stack.h	15;"	d
ASAN_STATS_H	asan/asan_stats.h	15;"	d
ASAN_TEST_CONFIG_H	asan/tests/asan_test_config.h	18;"	d
ASAN_TEST_UTILS_H	asan/tests/asan_test_utils.h	15;"	d
ASAN_THREAD_H	asan/asan_thread.h	15;"	d
ASAN_THREAD_REGISTRY_H	asan/asan_thread_registry.h	16;"	d
ASAN_THROW	asan/tests/asan_test.cc	38;"	d	file:
ASAN_THROW	asan/tests/asan_test.cc	40;"	d	file:
ASAN_USE_ALIAS_ATTRIBUTE_FOR_INDEX	asan/asan_intercepted_functions.h	43;"	d
ASAN_WINDOWS	asan/asan_internal.h	42;"	d
ASAN_WINDOWS	asan/asan_internal.h	44;"	d
ASAN_WRITE_RANGE	asan/asan_interceptors.cc	59;"	d	file:
ATOMIC_RMW	atomic.c	289;"	d	file:
ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS	asan/tests/asan_test_utils.h	44;"	d
ATTRIBUTE_NO_ADDRESS_SAFETY_ANALYSIS	asan/tests/asan_test_utils.h	47;"	d
Abort	sanitizer_common/sanitizer_posix.cc	/^void Abort() {$/;"	f	namespace:__sanitizer
Abort	sanitizer_common/sanitizer_win.cc	/^void Abort() {$/;"	f	namespace:__sanitizer
Access	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Access(void *addr, bool is_write,$/;"	f	class:ScopedThread
AccessThread	asan/lit_tests/deep_thread_stack.cc	/^void *AccessThread(void *arg) {$/;"	f
Acquire	tsan/rtl/tsan_rtl_mutex.cc	/^void Acquire(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
Action	asan/tests/asan_exceptions_test.cc	/^  Action() {}$/;"	f	class:Action
Action	asan/tests/asan_exceptions_test.cc	/^class Action {$/;"	c	file:
AddArg	ubsan/ubsan_diag.h	/^  Diag &AddArg(Arg A) {$/;"	f	class:__ubsan::Diag
AddExpectRace	tsan/rtl/tsan_interface_ann.cc	/^static void AddExpectRace(ExpectRace *list,$/;"	f	namespace:__tsan
AddLocation	tsan/rtl/tsan_rtl_report.cc	/^void ScopedReport::AddLocation(uptr addr, uptr size) {$/;"	f	class:__tsan::ScopedReport
AddMemoryAccess	tsan/rtl/tsan_rtl_report.cc	/^void ScopedReport::AddMemoryAccess(uptr addr, Shadow s,$/;"	f	class:__tsan::ScopedReport
AddMutex	tsan/rtl/tsan_rtl_report.cc	/^void ScopedReport::AddMutex(const SyncVar *s) {$/;"	f	class:__tsan::ScopedReport
AddRacyStacks	tsan/rtl/tsan_rtl_report.cc	/^static void AddRacyStacks(ThreadState *thr, const StackTrace (&traces)[2],$/;"	f	namespace:__tsan
AddSleep	tsan/rtl/tsan_rtl_report.cc	/^void ScopedReport::AddSleep(u32 stack_id) {$/;"	f	class:__tsan::ScopedReport
AddStack	tsan/rtl/tsan_rtl_report.cc	/^void ScopedReport::AddStack(const StackTrace *stack) {$/;"	f	class:__tsan::ScopedReport
AddThread	tsan/rtl/tsan_rtl_report.cc	/^void ScopedReport::AddThread(const ThreadContext *tctx) {$/;"	f	class:__tsan::ScopedReport
AdditionalSize	sanitizer_common/sanitizer_allocator64.h	/^  static uptr AdditionalSize() {$/;"	f	class:__sanitizer::SizeClassAllocator64
Addr0AndSizeAreEqual	tsan/rtl/tsan_rtl.h	/^  static inline bool Addr0AndSizeAreEqual(const Shadow s1, const Shadow s2) {$/;"	f	class:__tsan::Shadow
Addr2LineSymbolizer	asan/scripts/asan_symbolize.py	/^class Addr2LineSymbolizer(Symbolizer):$/;"	c
AddrIsAlignedByGranularity	asan/asan_mapping.h	/^static inline bool AddrIsAlignedByGranularity(uptr a) {$/;"	f	namespace:__asan
AddrIsAtLeft	asan/asan_allocator.cc	/^bool AsanChunkView::AddrIsAtLeft(uptr addr, uptr access_size, uptr *offset) {$/;"	f	class:__asan::AsanChunkView
AddrIsAtRight	asan/asan_allocator.cc	/^bool AsanChunkView::AddrIsAtRight(uptr addr, uptr access_size, uptr *offset) {$/;"	f	class:__asan::AsanChunkView
AddrIsInFakeStack	asan/asan_allocator.cc	/^uptr FakeStack::AddrIsInFakeStack(uptr addr) {$/;"	f	class:__asan::FakeStack
AddrIsInHighMem	asan/asan_mapping.h	/^static inline bool AddrIsInHighMem(uptr a) {$/;"	f	namespace:__asan
AddrIsInHighShadow	asan/asan_mapping.h	/^static inline bool AddrIsInHighShadow(uptr a) {$/;"	f	namespace:__asan
AddrIsInLowMem	asan/asan_mapping.h	/^static inline bool AddrIsInLowMem(uptr a) {$/;"	f	namespace:__asan
AddrIsInLowShadow	asan/asan_mapping.h	/^static inline bool AddrIsInLowShadow(uptr a) {$/;"	f	namespace:__asan
AddrIsInMem	asan/asan_mapping.h	/^static inline bool AddrIsInMem(uptr a) {$/;"	f	namespace:__asan
AddrIsInShadow	asan/asan_mapping.h	/^static inline bool AddrIsInShadow(uptr a) {$/;"	f	namespace:__asan
AddrIsInShadowGap	asan/asan_mapping.h	/^static inline bool AddrIsInShadowGap(uptr a) {$/;"	f	namespace:__asan
AddrIsInSizeClass	asan/asan_allocator.cc	/^bool FakeStack::AddrIsInSizeClass(uptr addr, uptr size_class) {$/;"	f	class:__asan::FakeStack
AddrIsInStack	asan/asan_thread.h	/^  bool AddrIsInStack(uptr addr) {$/;"	f	class:__asan::AsanThread
AddrIsInside	asan/asan_allocator.cc	/^bool AsanChunkView::AddrIsInside(uptr addr, uptr access_size, uptr *offset) {$/;"	f	class:__asan::AsanChunkView
AddressInfo	sanitizer_common/sanitizer_symbolizer.h	/^  AddressInfo() {$/;"	f	struct:__sanitizer::AddressInfo
AddressInfo	sanitizer_common/sanitizer_symbolizer.h	/^struct AddressInfo {$/;"	s	namespace:__sanitizer
AddressIsPoisoned	asan/asan_mapping.h	/^static inline bool AddressIsPoisoned(uptr a) {$/;"	f	namespace:__asan
AddressRange	sanitizer_common/sanitizer_symbolizer.h	/^  struct AddressRange {$/;"	s	class:__sanitizer::LoadedModule
AfterSleep	tsan/rtl/tsan_rtl_mutex.cc	/^void AfterSleep(ThreadState *thr, uptr pc) {$/;"	f	namespace:__tsan
Alignment	ubsan/ubsan_handlers.h	/^  uptr Alignment;$/;"	m	struct:__ubsan::TypeMismatchData
AllocBeg	sanitizer_common/sanitizer_allocator64.h	/^  static uptr AllocBeg()  { return kSpaceBeg; }$/;"	f	class:__sanitizer::SizeClassAllocator64
AllocEnd	sanitizer_common/sanitizer_allocator64.h	/^  static uptr AllocEnd()  { return kSpaceBeg  + kSpaceSize + AdditionalSize(); }$/;"	f	class:__sanitizer::SizeClassAllocator64
AllocGoroutine	tsan/go/tsan_go.cc	/^static void AllocGoroutine(int tid) {$/;"	f	file:
AllocSize	sanitizer_common/sanitizer_allocator64.h	/^  static uptr AllocSize() { return kSpaceSize + AdditionalSize(); }$/;"	f	class:__sanitizer::SizeClassAllocator64
AllocThread	asan/lit_tests/deep_thread_stack.cc	/^void *AllocThread(void *arg) {$/;"	f
AllocThread	tsan/lit_tests/race_on_heap.cc	/^void *AllocThread(void* arg) {$/;"	f
AllocTid	asan/asan_allocator.cc	/^uptr AsanChunkView::AllocTid() { return chunk_->alloc_tid; }$/;"	f	class:__asan::AsanChunkView
Allocate	asan/asan_allocator.cc	/^static u8 *Allocate(uptr alignment, uptr size, StackTrace *stack) {$/;"	f	namespace:__asan
Allocate	sanitizer_common/sanitizer_allocator.cc	/^void *LowLevelAllocator::Allocate(uptr size) {$/;"	f	class:__sanitizer::LowLevelAllocator
Allocate	sanitizer_common/sanitizer_allocator64.h	/^  void *Allocate(AllocatorCache *cache, uptr size, uptr alignment,$/;"	f	class:__sanitizer::CombinedAllocator
Allocate	sanitizer_common/sanitizer_allocator64.h	/^  void *Allocate(SizeClassAllocator *allocator, uptr class_id) {$/;"	f	struct:__sanitizer::SizeClassAllocatorLocalCache
Allocate	sanitizer_common/sanitizer_allocator64.h	/^  void *Allocate(uptr size, uptr alignment) {$/;"	f	class:__sanitizer::LargeMmapAllocator
Allocate	sanitizer_common/sanitizer_allocator64.h	/^  void *Allocate(uptr size, uptr alignment) {$/;"	f	class:__sanitizer::SizeClassAllocator64
AllocateBySizeClass	sanitizer_common/sanitizer_allocator64.h	/^  void *AllocateBySizeClass(uptr class_id) {$/;"	f	class:__sanitizer::SizeClassAllocator64
AllocateChunks	asan/asan_allocator.cc	/^  AsanChunk *AllocateChunks(u8 size_class, uptr n_chunks) {$/;"	f	class:__asan::MallocInfo
AllocateOneSizeClass	asan/asan_allocator.cc	/^void FakeStack::AllocateOneSizeClass(uptr size_class) {$/;"	f	class:__asan::FakeStack
AllocateStack	asan/asan_allocator.cc	/^uptr FakeStack::AllocateStack(uptr size, uptr real_stack) {$/;"	f	class:__asan::FakeStack
AllocationSize	asan/asan_allocator.cc	/^  uptr AllocationSize(uptr ptr) {$/;"	f	class:__asan::MallocInfo
Allocator	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^  SizeClassAllocator64<kAllocatorSpace, kAllocatorSize, 16, SCMap> Allocator;$/;"	t	file:
Allocator	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^          SecondaryAllocator> Allocator;$/;"	t	namespace:__anon26	file:
Allocator	tsan/rtl/tsan_rtl.h	/^    SecondaryAllocator> Allocator;$/;"	t	namespace:__tsan
AllocatorCache	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^  AllocatorCache;$/;"	t	file:
AllocatorCache	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^  PrimaryAllocator> AllocatorCache;$/;"	t	namespace:__anon26	file:
AllocatorCache	tsan/rtl/tsan_rtl.h	/^    PrimaryAllocator> AllocatorCache;$/;"	t	namespace:__tsan
AllocatorFreeList	sanitizer_common/sanitizer_allocator64.h	/^typedef IntrusiveList<AllocatorListNode> AllocatorFreeList;$/;"	t	namespace:__sanitizer
AllocatorListNode	sanitizer_common/sanitizer_allocator64.h	/^struct AllocatorListNode {$/;"	s	namespace:__sanitizer
AlloctorThreadFinish	tsan/rtl/tsan_mman.cc	/^void AlloctorThreadFinish(ThreadState *thr) {$/;"	f	namespace:__tsan
AlternativeAddress	tsan/rtl/tsan_platform.h	/^static inline uptr AlternativeAddress(uptr addr) {$/;"	f	namespace:__tsan
AnnotateBenignRace	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateBenignRace(char *f, int l, uptr mem, char *desc) {$/;"	f
AnnotateBenignRaceSized	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateBenignRaceSized(char *f, int l, uptr mem, uptr size, char *desc) {$/;"	f
AnnotateCondVarSignal	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateCondVarSignal(char *f, int l, uptr cv) {$/;"	f
AnnotateCondVarSignalAll	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateCondVarSignalAll(char *f, int l, uptr cv) {$/;"	f
AnnotateCondVarWait	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateCondVarWait(char *f, int l, uptr cv, uptr lock) {$/;"	f
AnnotateEnableRaceDetection	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateEnableRaceDetection(char *f, int l, int enable) {$/;"	f
AnnotateExpectRace	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateExpectRace(char *f, int l, uptr mem, char *desc) {$/;"	f
AnnotateFlushExpectedRaces	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateFlushExpectedRaces(char *f, int l) {$/;"	f
AnnotateFlushState	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateFlushState(char *f, int l) {$/;"	f
AnnotateHappensAfter	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateHappensAfter(char *f, int l, uptr addr) {$/;"	f
AnnotateHappensBefore	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateHappensBefore(char *f, int l, uptr addr) {$/;"	f
AnnotateIgnoreReadsBegin	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateIgnoreReadsBegin(char *f, int l) {$/;"	f
AnnotateIgnoreReadsEnd	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateIgnoreReadsEnd(char *f, int l) {$/;"	f
AnnotateIgnoreWritesBegin	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateIgnoreWritesBegin(char *f, int l) {$/;"	f
AnnotateIgnoreWritesEnd	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateIgnoreWritesEnd(char *f, int l) {$/;"	f
AnnotateMutexIsNotPHB	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateMutexIsNotPHB(char *f, int l, uptr mu) {$/;"	f
AnnotateMutexIsUsedAsCondVar	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateMutexIsUsedAsCondVar(char *f, int l, uptr mu) {$/;"	f
AnnotateNewMemory	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateNewMemory(char *f, int l, uptr mem, uptr size) {$/;"	f
AnnotateNoOp	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateNoOp(char *f, int l, uptr mem) {$/;"	f
AnnotatePCQCreate	tsan/rtl/tsan_interface_ann.cc	/^void AnnotatePCQCreate(char *f, int l, uptr pcq) {$/;"	f
AnnotatePCQDestroy	tsan/rtl/tsan_interface_ann.cc	/^void AnnotatePCQDestroy(char *f, int l, uptr pcq) {$/;"	f
AnnotatePCQGet	tsan/rtl/tsan_interface_ann.cc	/^void AnnotatePCQGet(char *f, int l, uptr pcq) {$/;"	f
AnnotatePCQPut	tsan/rtl/tsan_interface_ann.cc	/^void AnnotatePCQPut(char *f, int l, uptr pcq) {$/;"	f
AnnotatePublishMemoryRange	tsan/rtl/tsan_interface_ann.cc	/^void AnnotatePublishMemoryRange(char *f, int l, uptr addr, uptr size) {$/;"	f
AnnotateRWLockAcquired	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateRWLockAcquired(char *f, int l, uptr m, uptr is_w) {$/;"	f
AnnotateRWLockCreate	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateRWLockCreate(char *f, int l, uptr m) {$/;"	f
AnnotateRWLockCreateStatic	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateRWLockCreateStatic(char *f, int l, uptr m) {$/;"	f
AnnotateRWLockDestroy	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateRWLockDestroy(char *f, int l, uptr m) {$/;"	f
AnnotateRWLockReleased	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateRWLockReleased(char *f, int l, uptr m, uptr is_w) {$/;"	f
AnnotateThreadName	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateThreadName(char *f, int l, char *name) {$/;"	f
AnnotateTraceMemory	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateTraceMemory(char *f, int l, uptr mem) {$/;"	f
AnnotateUnpublishMemoryRange	tsan/rtl/tsan_interface_ann.cc	/^void AnnotateUnpublishMemoryRange(char *f, int l, uptr addr, uptr size) {$/;"	f
AppendChar	sanitizer_common/sanitizer_printf.cc	/^static int AppendChar(char **buff, const char *buff_end, char c) {$/;"	f	namespace:__sanitizer
AppendPointer	sanitizer_common/sanitizer_printf.cc	/^static int AppendPointer(char **buff, const char *buff_end, u64 ptr_value) {$/;"	f	namespace:__sanitizer
AppendSignedDecimal	sanitizer_common/sanitizer_printf.cc	/^static int AppendSignedDecimal(char **buff, const char *buff_end, s64 num) {$/;"	f	namespace:__sanitizer
AppendString	sanitizer_common/sanitizer_printf.cc	/^static int AppendString(char **buff, const char *buff_end, const char *s) {$/;"	f	namespace:__sanitizer
AppendToErrorMessageBuffer	asan/asan_report.cc	/^void AppendToErrorMessageBuffer(const char *buffer) {$/;"	f	namespace:__asan
AppendUnsigned	sanitizer_common/sanitizer_printf.cc	/^static int AppendUnsigned(char **buff, const char *buff_end, u64 num,$/;"	f	namespace:__sanitizer
Arg	ubsan/ubsan_diag.h	/^    Arg() {}$/;"	f	struct:__ubsan::Diag::Arg
Arg	ubsan/ubsan_diag.h	/^    Arg(FloatMax Float) : Kind(AK_Float), Float(Float) {}$/;"	f	struct:__ubsan::Diag::Arg
Arg	ubsan/ubsan_diag.h	/^    Arg(SIntMax SInt) : Kind(AK_SInt), SInt(SInt) {}$/;"	f	struct:__ubsan::Diag::Arg
Arg	ubsan/ubsan_diag.h	/^    Arg(UIntMax UInt) : Kind(AK_UInt), UInt(UInt) {}$/;"	f	struct:__ubsan::Diag::Arg
Arg	ubsan/ubsan_diag.h	/^    Arg(const char *String) : Kind(AK_String), String(String) {}$/;"	f	struct:__ubsan::Diag::Arg
Arg	ubsan/ubsan_diag.h	/^    Arg(const void *Pointer) : Kind(AK_Pointer), Pointer(Pointer) {}$/;"	f	struct:__ubsan::Diag::Arg
Arg	ubsan/ubsan_diag.h	/^  struct Arg {$/;"	s	class:__ubsan::Diag
ArgKind	ubsan/ubsan_diag.h	/^  enum ArgKind {$/;"	g	class:__ubsan::Diag
Args	ubsan/ubsan_diag.h	/^  Arg Args[MaxArgs];$/;"	m	class:__ubsan::Diag
AsanCheckFailed	asan/asan_rtl.cc	/^static void AsanCheckFailed(const char *file, int line, const char *cond,$/;"	f	namespace:__asan
AsanChunk	asan/asan_allocator.cc	/^struct AsanChunk: public ChunkBase {$/;"	s	namespace:__asan	file:
AsanChunkFifoList	asan/asan_allocator.h	/^  AsanChunkFifoList() { clear(); }$/;"	f	class:__asan::AsanChunkFifoList
AsanChunkFifoList	asan/asan_allocator.h	/^  explicit AsanChunkFifoList(LinkerInitialized) { }$/;"	f	class:__asan::AsanChunkFifoList
AsanChunkFifoList	asan/asan_allocator.h	/^class AsanChunkFifoList {$/;"	c	namespace:__asan
AsanChunkView	asan/asan_allocator.h	/^  explicit AsanChunkView(AsanChunk *chunk) : chunk_(chunk) {}$/;"	f	class:__asan::AsanChunkView
AsanChunkView	asan/asan_allocator.h	/^class AsanChunkView {$/;"	c	namespace:__asan
AsanDie	asan/asan_rtl.cc	/^static void AsanDie() {$/;"	f	namespace:__asan
AsanDoesNotSupportStaticLinkage	asan/asan_linux.cc	/^void *AsanDoesNotSupportStaticLinkage() {$/;"	f	namespace:__asan
AsanDoesNotSupportStaticLinkage	asan/asan_mac.cc	/^void *AsanDoesNotSupportStaticLinkage() {$/;"	f	namespace:__asan
AsanDoesNotSupportStaticLinkage	asan/asan_win.cc	/^void *AsanDoesNotSupportStaticLinkage() {$/;"	f	namespace:__asan
AsanDynamicFunctions	asan/dynamic/Makefile.mk	/^AsanDynamicFunctions := $(Sources:%.cc=%)$/;"	m
AsanFunctions	asan/Makefile.mk	/^AsanFunctions := $(Sources:%.cc=%)$/;"	m
AsanInterceptsSignal	asan/asan_linux.cc	/^bool AsanInterceptsSignal(int signum) {$/;"	f	namespace:__asan
AsanInterceptsSignal	asan/asan_mac.cc	/^bool AsanInterceptsSignal(int signum) {$/;"	f	namespace:__asan
AsanLock	asan/asan_linux.cc	/^AsanLock::AsanLock(LinkerInitialized) {$/;"	f	class:__asan::AsanLock
AsanLock	asan/asan_lock.h	/^class AsanLock {$/;"	c	namespace:__asan
AsanLock	asan/asan_mac.cc	/^AsanLock::AsanLock(LinkerInitialized) {$/;"	f	class:__asan::AsanLock
AsanLock	asan/asan_win.cc	/^AsanLock::AsanLock(LinkerInitialized li) {$/;"	f	class:__asan::AsanLock
AsanMallocStats	asan/asan_stats.h	/^struct AsanMallocStats {$/;"	s	namespace:__asan
AsanPlatformThreadInit	asan/asan_linux.cc	/^void AsanPlatformThreadInit() {$/;"	f	namespace:__asan
AsanPlatformThreadInit	asan/asan_mac.cc	/^void AsanPlatformThreadInit() {$/;"	f	namespace:__asan
AsanPlatformThreadInit	asan/asan_win.cc	/^void AsanPlatformThreadInit() {$/;"	f	namespace:__asan
AsanStats	asan/asan_stats.cc	/^AsanStats::AsanStats() {$/;"	f	class:__asan::AsanStats
AsanStats	asan/asan_stats.h	/^  explicit AsanStats(LinkerInitialized) { }$/;"	f	struct:__asan::AsanStats
AsanStats	asan/asan_stats.h	/^struct AsanStats {$/;"	s	namespace:__asan
AsanTSDGet	asan/asan_posix.cc	/^void *AsanTSDGet() {$/;"	f	namespace:__asan
AsanTSDGet	asan/asan_win.cc	/^void *AsanTSDGet() {$/;"	f	namespace:__asan
AsanTSDInit	asan/asan_posix.cc	/^void AsanTSDInit(void (*destructor)(void *tsd)) {$/;"	f	namespace:__asan
AsanTSDInit	asan/asan_win.cc	/^void AsanTSDInit(void (*destructor)(void *tsd)) {$/;"	f	namespace:__asan
AsanTSDSet	asan/asan_posix.cc	/^void AsanTSDSet(void *tsd) {$/;"	f	namespace:__asan
AsanTSDSet	asan/asan_win.cc	/^void AsanTSDSet(void *tsd) {$/;"	f	namespace:__asan
AsanThread	asan/asan_thread.cc	/^AsanThread::AsanThread(LinkerInitialized x)$/;"	f	class:__asan::AsanThread
AsanThread	asan/asan_thread.h	/^class AsanThread {$/;"	c	namespace:__asan
AsanThreadLocalMallocStorage	asan/asan_allocator.h	/^  AsanThreadLocalMallocStorage() {$/;"	f	struct:__asan::AsanThreadLocalMallocStorage
AsanThreadLocalMallocStorage	asan/asan_allocator.h	/^  explicit AsanThreadLocalMallocStorage(LinkerInitialized x)$/;"	f	struct:__asan::AsanThreadLocalMallocStorage
AsanThreadLocalMallocStorage	asan/asan_allocator.h	/^struct AsanThreadLocalMallocStorage {$/;"	s	namespace:__asan
AsanThreadRegistry	asan/asan_thread_registry.cc	/^AsanThreadRegistry::AsanThreadRegistry(LinkerInitialized x)$/;"	f	class:__asan::AsanThreadRegistry
AsanThreadRegistry	asan/asan_thread_registry.h	/^class AsanThreadRegistry {$/;"	c	namespace:__asan
AsanThreadSummary	asan/asan_thread.h	/^  explicit AsanThreadSummary(LinkerInitialized) { }  \/\/ for T0.$/;"	f	class:__asan::AsanThreadSummary
AsanThreadSummary	asan/asan_thread.h	/^class AsanThreadSummary {$/;"	c	namespace:__asan
AsmInstructionMatch	interception/mach_override/mach_override.c	/^}	AsmInstructionMatch;$/;"	t	typeref:struct:__anon10	file:
AsmSources	arm/Makefile.mk	/^AsmSources := $(foreach file,$(wildcard $(Dir)\/*.S),$(notdir $(file)))$/;"	m
AsmSources	i386/Makefile.mk	/^AsmSources := $(foreach file,$(wildcard $(Dir)\/*.S),$(notdir $(file)))$/;"	m
AsmSources	ppc/Makefile.mk	/^AsmSources := $(foreach file,$(wildcard $(Dir)\/*.S),$(notdir $(file)))$/;"	m
AsmSources	tsan/rtl/Makefile.mk	/^AsmSources := $(foreach file,$(wildcard $(Dir)\/*.S),$(notdir $(file)))$/;"	m
AsmSources	x86_64/Makefile.mk	/^AsmSources := $(foreach file,$(wildcard $(Dir)\/*.S),$(notdir $(file)))$/;"	m
AsyncInit	tsan/lit_tests/static_init5.cc	/^void *AsyncInit(void *p) {$/;"	f
AtExit	tsan/tests/rtl/tsan_test_util_linux.cc	/^static void AtExit() {$/;"	f	file:
AtExitContext	tsan/rtl/tsan_interceptors.cc	/^  AtExitContext()$/;"	f	class:AtExitContext
AtExitContext	tsan/rtl/tsan_interceptors.cc	/^class AtExitContext {$/;"	c	file:
Atexit	sanitizer_common/sanitizer_posix.cc	/^int Atexit(void (*function)(void)) {$/;"	f	namespace:__sanitizer
Atexit	sanitizer_common/sanitizer_win.cc	/^int Atexit(void (*function)(void)) {$/;"	f	namespace:__sanitizer
AtomicCAS	tsan/rtl/tsan_interface_atomic.cc	/^static bool AtomicCAS(ThreadState *thr, uptr pc,$/;"	f	file:
AtomicExchange	tsan/rtl/tsan_interface_atomic.cc	/^static T AtomicExchange(ThreadState *thr, uptr pc, volatile T *a, T v,$/;"	f	file:
AtomicFence	tsan/rtl/tsan_interface_atomic.cc	/^static void AtomicFence(ThreadState *thr, uptr pc, morder mo) {$/;"	f	file:
AtomicFetchAdd	tsan/rtl/tsan_interface_atomic.cc	/^static T AtomicFetchAdd(ThreadState *thr, uptr pc, volatile T *a, T v,$/;"	f	file:
AtomicFetchAnd	tsan/rtl/tsan_interface_atomic.cc	/^static T AtomicFetchAnd(ThreadState *thr, uptr pc, volatile T *a, T v,$/;"	f	file:
AtomicFetchOr	tsan/rtl/tsan_interface_atomic.cc	/^static T AtomicFetchOr(ThreadState *thr, uptr pc, volatile T *a, T v,$/;"	f	file:
AtomicFetchSub	tsan/rtl/tsan_interface_atomic.cc	/^static T AtomicFetchSub(ThreadState *thr, uptr pc, volatile T *a, T v,$/;"	f	file:
AtomicFetchXor	tsan/rtl/tsan_interface_atomic.cc	/^static T AtomicFetchXor(ThreadState *thr, uptr pc, volatile T *a, T v,$/;"	f	file:
AtomicLoad	tsan/rtl/tsan_interface_atomic.cc	/^static T AtomicLoad(ThreadState *thr, uptr pc, const volatile T *a,$/;"	f	file:
AtomicStatInc	tsan/rtl/tsan_interface_atomic.cc	/^static void AtomicStatInc(ThreadState *thr, uptr size, morder mo, StatType t) {$/;"	f	file:
AtomicStore	tsan/rtl/tsan_interface_atomic.cc	/^static void AtomicStore(ThreadState *thr, uptr pc, volatile T *a, T v,$/;"	f	file:
B	asan/lit_tests/initialization-nobug.cc	/^int A = (1 << 1) + (1 << 3) + (1 << 5), B;$/;"	v
B	tsan/lit_tests/race_on_barrier.c	/^pthread_barrier_t B;$/;"	v
B	tsan/lit_tests/race_on_barrier2.c	/^pthread_barrier_t B;$/;"	v
B	tsan/lit_tests/vptr_benign_race.cc	/^struct B : A {$/;"	s	file:
B	tsan/lit_tests/vptr_harmful_race.cc	/^struct B : A {$/;"	s	file:
BAD_ACCESS	asan/tests/asan_noinst_test.cc	540;"	d	file:
BBB	tsan/lit_tests/virtual_inheritance_compile_bug.cc	/^struct BBB: virtual AAA { unsigned long bbb; };  \/\/ NOLINT$/;"	s	file:
Backoff	tsan/rtl/tsan_mutex.cc	/^  Backoff()$/;"	f	class:__tsan::Backoff
Backoff	tsan/rtl/tsan_mutex.cc	/^class Backoff {$/;"	c	namespace:__tsan	file:
Backoff	tsan/tests/unit/tsan_mutex_test.cc	/^  void Backoff() {$/;"	f	class:__tsan::TestData
BeforeInitThread	tsan/tests/rtl/tsan_test_util_linux.cc	/^static void *BeforeInitThread(void *param) {$/;"	f	file:
Beg	asan/asan_allocator.cc	/^  uptr Beg() { return RoundUpTo((uptr)this + 1, 1 << alignment_log); }$/;"	f	struct:__asan::ChunkBase
Beg	asan/asan_allocator.cc	/^uptr AsanChunkView::Beg() { return chunk_->Beg(); }$/;"	f	class:__asan::AsanChunkView
Begin	tsan/rtl/tsan_sync.cc	/^const uptr *StackTrace::Begin() const {$/;"	f	class:__tsan::StackTrace
Benchmark	tsan/tests/rtl/tsan_bench.cc	/^static void Benchmark() {$/;"	f	file:
BenignRaceImpl	tsan/rtl/tsan_interface_ann.cc	/^static void BenignRaceImpl(char *f, int l, uptr mem, uptr size, char *desc) {$/;"	f	file:
BorderAccessFunc	asan/tests/asan_benchmarks_test.cc	/^static void BorderAccessFunc(char *x, size_t n_iter) {$/;"	f	file:
BothReads	tsan/rtl/tsan_rtl.cc	/^static inline bool BothReads(Shadow s, int kAccessIsWrite) {$/;"	f	namespace:__tsan
BranchIsland	interception/mach_override/mach_override.c	/^}	BranchIsland;$/;"	t	typeref:struct:__anon9	file:
BreakpadSymbolizer	asan/scripts/asan_symbolize.py	/^class BreakpadSymbolizer(Symbolizer):$/;"	c
BreakpadSymbolizerFactory	asan/scripts/asan_symbolize.py	/^def BreakpadSymbolizerFactory(binary):$/;"	f
BulkAllocate	sanitizer_common/sanitizer_allocator64.h	/^  void BulkAllocate(uptr class_id, AllocatorFreeList *free_list) {$/;"	f	class:__sanitizer::SizeClassAllocator64
BulkDeallocate	sanitizer_common/sanitizer_allocator64.h	/^  void BulkDeallocate(uptr class_id, AllocatorFreeList *free_list) {$/;"	f	class:__sanitizer::SizeClassAllocator64
BypassThreadLocalQuarantine	asan/asan_allocator.cc	/^  void BypassThreadLocalQuarantine(AsanChunk *chunk) {$/;"	f	class:__asan::MallocInfo
CALL	tsan/tests/rtl/tsan_test_util_linux.cc	/^    CALL,$/;"	e	enum:Event::Type	file:
CALLERPC	tsan/rtl/tsan_interface.cc	18;"	d	file:
CALLERPC	tsan/rtl/tsan_interface_ann.cc	23;"	d	file:
CALLERPC	tsan/rtl/tsan_interface_inl.h	17;"	d
CCC	tsan/lit_tests/virtual_inheritance_compile_bug.cc	/^struct CCC: virtual AAA { };$/;"	s	file:
CFAllocatorAllocateToGlob	asan/tests/asan_test.cc	/^void *CFAllocatorAllocateToGlob(void *unused) {$/;"	f	namespace:__anon2
CFAllocatorDeallocateFromGlob	asan/tests/asan_test.cc	/^void *CFAllocatorDeallocateFromGlob(void *unused) {$/;"	f	namespace:__anon2
CFAllocatorRef	asan/asan_intercepted_functions.h	/^typedef void* CFAllocatorRef;$/;"	t
CFAllocator_DoubleFreeOnPthread	asan/tests/asan_test.cc	/^void CFAllocator_DoubleFreeOnPthread() {$/;"	f
CFAllocator_PassMemoryToAnotherThread	asan/tests/asan_test.cc	/^void CFAllocator_PassMemoryToAnotherThread() {$/;"	f	namespace:__anon2
CFRuntimeBase	asan/asan_mac.h	/^} CFRuntimeBase;$/;"	t	typeref:struct:__CFRuntimeBase
CFStringRef	asan/asan_intercepted_functions.h	/^typedef void* CFStringRef;$/;"	t
CF_RC_BITS	asan/asan_mac.h	23;"	d
CF_RC_BITS	asan/asan_mac.h	27;"	d
CHECK	sanitizer_common/sanitizer_internal_defs.h	107;"	d
CHECK_EQ	sanitizer_common/sanitizer_internal_defs.h	108;"	d
CHECK_GE	sanitizer_common/sanitizer_internal_defs.h	113;"	d
CHECK_GT	sanitizer_common/sanitizer_internal_defs.h	112;"	d
CHECK_IMPL	sanitizer_common/sanitizer_internal_defs.h	97;"	d
CHECK_LE	sanitizer_common/sanitizer_internal_defs.h	111;"	d
CHECK_LT	sanitizer_common/sanitizer_internal_defs.h	110;"	d
CHECK_NE	sanitizer_common/sanitizer_internal_defs.h	109;"	d
CHECK_RANGES_OVERLAP	asan/asan_interceptors.cc	70;"	d	file:
CHUNK_ALLOCATED	asan/asan_allocator.cc	/^  CHUNK_ALLOCATED  = 0x32,$/;"	e	enum:__asan::__anon5	file:
CHUNK_AVAILABLE	asan/asan_allocator.cc	/^  CHUNK_AVAILABLE  = 0x57,$/;"	e	enum:__asan::__anon5	file:
CHUNK_MEMALIGN	asan/asan_allocator.cc	/^  CHUNK_MEMALIGN   = 0xDC$/;"	e	enum:__asan::__anon5	file:
CHUNK_QUARANTINE	asan/asan_allocator.cc	/^  CHUNK_QUARANTINE = 0x19,$/;"	e	enum:__asan::__anon5	file:
CLEAR_FRAME_AND_RETURN	arm/divmodsi4.S	/^#define CLEAR_FRAME_AND_RETURN \\$/;"	d
CLEAR_FRAME_AND_RETURN	arm/divsi3.S	/^#define CLEAR_FRAME_AND_RETURN \\$/;"	d
CLEAR_FRAME_AND_RETURN	arm/modsi3.S	/^#define CLEAR_FRAME_AND_RETURN \\$/;"	d
CLEAR_FRAME_AND_RETURN	arm/udivmodsi4.S	/^#define CLEAR_FRAME_AND_RETURN \\$/;"	d
CLEAR_FRAME_AND_RETURN	arm/udivsi3.S	/^#define CLEAR_FRAME_AND_RETURN \\$/;"	d
COMPILERRT_ASSEMBLY_H	assembly.h	17;"	d
COMPILER_CHECK	sanitizer_common/sanitizer_internal_defs.h	140;"	d
COMPILER_RT_ABI	int_lib.h	28;"	d
COMPILER_RT_ABI	int_lib.h	31;"	d
CRT_INFINITY	int_math.h	28;"	d
CRT_INFINITY	ppc/divtc3.c	9;"	d	file:
CTX	tsan/rtl/tsan_rtl.cc	/^Context *CTX() {$/;"	f	namespace:__tsan
Cache	tsan/lit_tests/static_init2.cc	/^  explicit Cache(int x)$/;"	f	struct:Cache
Cache	tsan/lit_tests/static_init2.cc	/^struct Cache {$/;"	s	file:
Cache	tsan/lit_tests/static_init3.cc	/^struct Cache {$/;"	s	file:
Cache	tsan/lit_tests/static_init4.cc	/^  explicit Cache(int x)$/;"	f	struct:Cache
Cache	tsan/lit_tests/static_init4.cc	/^struct Cache {$/;"	s	file:
Cache	tsan/lit_tests/static_init5.cc	/^  explicit Cache(int x)$/;"	f	struct:Cache
Cache	tsan/lit_tests/static_init5.cc	/^struct Cache {$/;"	s	file:
Call	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Call(void(*pc)()) {$/;"	f	class:ScopedThread
CallAtoi	asan/tests/asan_test.cc	/^void CallAtoi(const char *nptr) {$/;"	f
CallAtol	asan/tests/asan_test.cc	/^void CallAtol(const char *nptr) {$/;"	f
CallAtoll	asan/tests/asan_test.cc	/^void CallAtoll(const char *nptr) {$/;"	f
CallMemSetByPointer	asan/tests/asan_test.cc	/^void CallMemSetByPointer(PointerToMemSet MemSet) {$/;"	f
CallMemTransferByPointer	asan/tests/asan_test.cc	/^void CallMemTransferByPointer(PointerToMemTransfer MemTransfer) {$/;"	f
CallStrtol	asan/tests/asan_test.cc	/^void CallStrtol(const char *nptr, char **endptr, int base) {$/;"	f
CallStrtoll	asan/tests/asan_test.cc	/^void CallStrtoll(const char *nptr, char **endptr, int base) {$/;"	f
CanAllocate	sanitizer_common/sanitizer_allocator64.h	/^  bool CanAllocate(uptr size, uptr alignment) {$/;"	f	class:__sanitizer::SizeClassAllocator64
CanLockAdj	tsan/rtl/tsan_mutex.cc	/^static bool CanLockAdj[MutexTypeCount][MutexTypeCount];$/;"	m	namespace:__tsan	file:
CanLockTab	tsan/rtl/tsan_mutex.cc	/^static MutexType CanLockTab[MutexTypeCount][MutexTypeCount] = {$/;"	m	namespace:__tsan	file:
ChainSymbolizer	asan/scripts/asan_symbolize.py	/^class ChainSymbolizer(Symbolizer):$/;"	c
CharCaseCmp	asan/asan_interceptors.cc	/^static inline int CharCaseCmp(unsigned char c1, unsigned char c2) {$/;"	f	file:
CharCmp	asan/asan_interceptors.cc	/^static inline int CharCmp(unsigned char c1, unsigned char c2) {$/;"	f	file:
CheckConsistency	sanitizer_common/sanitizer_list.h	/^  void CheckConsistency() {$/;"	f	struct:__sanitizer::IntrusiveList
CheckContains	tsan/rtl/tsan_interface_ann.cc	/^static bool CheckContains(ExpectRace *list, uptr addr, uptr size) {$/;"	f	namespace:__tsan
CheckFailed	sanitizer_common/sanitizer_common.cc	/^void NORETURN CheckFailed(const char *file, int line, const char *cond,$/;"	f	namespace:__sanitizer
CheckFailed	ubsan/ubsan_handlers.cc	/^NORETURN void __sanitizer::CheckFailed(const char *File, int Line,$/;"	f	class:__sanitizer
CheckFailedCallback	sanitizer_common/sanitizer_common.cc	/^static CheckFailedCallbackType CheckFailedCallback;$/;"	m	namespace:__sanitizer	file:
CheckFailedCallbackType	sanitizer_common/sanitizer_common.h	/^typedef void (*CheckFailedCallbackType)(const char *, int, const char *,$/;"	t	namespace:__sanitizer
CheckList	sanitizer_common/tests/sanitizer_list_test.cc	/^static void CheckList(List *l, ListItem *i1, ListItem *i2 = 0, ListItem *i3 = 0,$/;"	f	namespace:__sanitizer
CheckLocked	tsan/rtl/tsan_mutex.cc	/^void Mutex::CheckLocked() {$/;"	f	class:__tsan::Mutex
CheckPIE	tsan/rtl/tsan_platform_linux.cc	/^static void CheckPIE() {$/;"	f	namespace:__tsan
Child	asan/lit_tests/Linux/clone_test.cc	/^int Child(void *arg) {$/;"	f
ChooseChunk	asan/asan_allocator.cc	/^  AsanChunk *ChooseChunk(uptr addr,$/;"	f	class:__asan::MallocInfo	file:
ChunkBase	asan/asan_allocator.cc	/^struct ChunkBase {$/;"	s	namespace:__asan	file:
ClassID	sanitizer_common/sanitizer_allocator64.h	/^  static uptr ClassID(uptr size) {$/;"	f	class:__sanitizer::DefaultSizeClassMap
ClassID	sanitizer_common/sanitizer_allocator64.h	/^  uptr ClassID(uptr size) { return SizeClassMap::ClassID(size); }$/;"	f	class:__sanitizer::SizeClassAllocator64
ClassMmapSize	asan/asan_allocator.cc	/^uptr FakeStack::ClassMmapSize(uptr size_class) {$/;"	f	class:__asan::FakeStack
ClassSize	asan/asan_allocator.h	/^  uptr ClassSize(uptr size_class) {$/;"	f	class:__asan::FakeStack
ClassWithStatic	tsan/tests/rtl/tsan_mop.cc	/^struct ClassWithStatic {$/;"	s	file:
Cleanup	asan/asan_allocator.cc	/^void FakeStack::Cleanup() {$/;"	f	class:__asan::FakeStack
Clear	sanitizer_common/sanitizer_symbolizer.cc	/^void AddressInfo::Clear() {$/;"	f	class:__sanitizer::AddressInfo
ClearIgnoreBit	tsan/rtl/tsan_rtl.h	/^  void ClearIgnoreBit() { x_ &= ~kIgnoreBit; }$/;"	f	class:__tsan::FastState
ClearShadowForThreadStack	asan/asan_thread.cc	/^void AsanThread::ClearShadowForThreadStack() {$/;"	f	class:__asan::AsanThread
Column	ubsan/ubsan_value.h	/^  u32 Column;$/;"	m	class:__ubsan::SourceLocation
CombinedAllocator	sanitizer_common/sanitizer_allocator64.h	/^class CombinedAllocator {$/;"	c	namespace:__sanitizer
CommitBack	asan/asan_allocator.cc	/^void AsanThreadLocalMallocStorage::CommitBack() {$/;"	f	class:__asan::AsanThreadLocalMallocStorage
CompressStack	sanitizer_common/sanitizer_stacktrace.cc	/^uptr StackTrace::CompressStack(StackTrace *stack, u32 *compressed, uptr size) {$/;"	f	class:__sanitizer::StackTrace
CompressStackTraceBenchmark	asan/tests/asan_noinst_test.cc	/^void CompressStackTraceBenchmark(size_t n_iter) {$/;"	f
CompressStackTraceTest	asan/tests/asan_noinst_test.cc	/^void CompressStackTraceTest(size_t n_iter) {$/;"	f
ComputeSearchOffset	tsan/rtl/tsan_rtl.h	/^  unsigned ComputeSearchOffset() {$/;"	f	class:__tsan::Shadow
ComputeSizeClass	asan/asan_allocator.cc	/^inline uptr FakeStack::ComputeSizeClass(uptr alloc_size) {$/;"	f	class:__asan::FakeStack
CondContext	tsan/tests/rtl/tsan_posix.cc	/^struct CondContext {$/;"	s	file:
ConstGlob	asan/tests/asan_test.cc	/^const char ConstGlob[7] = {1, 2, 3, 4, 5, 6, 7};$/;"	v
Contention	tsan/rtl/tsan_mutex.cc	/^  u64 Contention() const {$/;"	f	class:__tsan::Backoff
Context	tsan/rtl/tsan_rtl.cc	/^Context::Context()$/;"	f	class:__tsan::Context
Context	tsan/rtl/tsan_rtl.h	/^struct Context {$/;"	s	namespace:__tsan
CopyFrom	sanitizer_common/sanitizer_stacktrace.h	/^  void CopyFrom(uptr *src, uptr src_size) {$/;"	f	struct:__sanitizer::StackTrace
CopyFrom	tsan/rtl/tsan_sync.cc	/^void StackTrace::CopyFrom(const StackTrace& other) {$/;"	f	class:__tsan::StackTrace
CopyTo	sanitizer_common/sanitizer_stacktrace.h	/^  void CopyTo(uptr *dst, uptr dst_size) {$/;"	f	struct:__sanitizer::StackTrace
Create	asan/asan_thread.cc	/^AsanThread *AsanThread::Create(u32 parent_tid, thread_callback_t start_routine,$/;"	f	class:__asan::AsanThread
Create	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Create(const Mutex &m) {$/;"	f	class:ScopedThread
CreateCache	tsan/lit_tests/static_init3.cc	/^Cache *CreateCache() {$/;"	f
CreateCache	tsan/lit_tests/static_init4.cc	/^Cache *CreateCache() {$/;"	f
CreateCache	tsan/lit_tests/static_init5.cc	/^Cache *CreateCache() {$/;"	f
CurrentStackId	tsan/rtl/tsan_rtl.cc	/^u32 CurrentStackId(ThreadState *thr, uptr pc) {$/;"	f	namespace:__tsan
DCHECK	sanitizer_common/sanitizer_internal_defs.h	116;"	d
DCHECK_EQ	sanitizer_common/sanitizer_internal_defs.h	117;"	d
DCHECK_GE	sanitizer_common/sanitizer_internal_defs.h	122;"	d
DCHECK_GT	sanitizer_common/sanitizer_internal_defs.h	121;"	d
DCHECK_LE	sanitizer_common/sanitizer_internal_defs.h	120;"	d
DCHECK_LT	sanitizer_common/sanitizer_internal_defs.h	119;"	d
DCHECK_NE	sanitizer_common/sanitizer_internal_defs.h	118;"	d
DD	ppc/DD.h	/^}DD;$/;"	t	typeref:union:__anon23
DDD	tsan/lit_tests/virtual_inheritance_compile_bug.cc	/^DDD::DDD()  { }$/;"	f	class:DDD
DDD	tsan/lit_tests/virtual_inheritance_compile_bug.cc	/^struct DDD: CCC, BBB { DDD(); };  \/\/ NOLINT$/;"	s	file:
DEBUG	asan/scripts/asan_symbolize.py	/^DEBUG = False$/;"	v
DEBUG_DISASM	interception/mach_override/mach_override.c	20;"	d	file:
DECLARE_FUNCTION_AND_WRAPPER	asan/asan_intercepted_functions.h	74;"	d
DECLARE_REAL	interception/interception.h	119;"	d
DECLARE_REAL	interception/interception.h	126;"	d
DECLARE_REAL_AND_INTERCEPTOR	interception/interception.h	130;"	d
DECLARE_SYMBOL_VISIBILITY	assembly.h	40;"	d
DECLARE_SYMBOL_VISIBILITY	assembly.h	43;"	d
DECLARE_WRAPPER	interception/interception.h	104;"	d
DECLARE_WRAPPER	interception/interception.h	109;"	d
DECLARE_WRAPPER	interception/interception.h	93;"	d
DEFINE_AEABI_FUNCTION_ALIAS	assembly.h	67;"	d
DEFINE_AEABI_FUNCTION_ALIAS	assembly.h	70;"	d
DEFINE_COMPILERRT_FUNCTION	assembly.h	46;"	d
DEFINE_COMPILERRT_FUNCTION_ALIAS	assembly.h	62;"	d
DEFINE_COMPILERRT_PRIVATE_FUNCTION	assembly.h	52;"	d
DEFINE_COMPILERRT_PRIVATE_FUNCTION_UNMANGLED	assembly.h	57;"	d
DEFINE_REAL	interception/interception.h	139;"	d
DEFINE_REAL	interception/interception.h	145;"	d
DOUBLE_PRECISION	adddf3.c	15;"	d	file:
DOUBLE_PRECISION	comparedf2.c	40;"	d	file:
DOUBLE_PRECISION	divdf3.c	19;"	d	file:
DOUBLE_PRECISION	fixdfsi.c	16;"	d	file:
DOUBLE_PRECISION	floatsidf.c	16;"	d	file:
DOUBLE_PRECISION	floatunsidf.c	16;"	d	file:
DOUBLE_PRECISION	muldf3.c	15;"	d	file:
DOUBLE_PRECISION	negdf2.c	14;"	d	file:
DOUBLE_PRECISION	subdf3.c	15;"	d	file:
DPrintf	tsan/rtl/tsan_rtl.h	457;"	d
DPrintf	tsan/rtl/tsan_rtl.h	459;"	d
DPrintf2	tsan/rtl/tsan_rtl.h	463;"	d
DPrintf2	tsan/rtl/tsan_rtl.h	465;"	d
DST_REP_C	extendsfdf2.c	51;"	d	file:
DST_REP_C	truncdfsf2.c	49;"	d	file:
DWORD	sanitizer_common/sanitizer_internal_defs.h	/^typedef unsigned long    DWORD;  \/\/ NOLINT$/;"	t
DW_EH_PE_absptr	gcc_personality_v0.c	63;"	d	file:
DW_EH_PE_aligned	gcc_personality_v0.c	77;"	d	file:
DW_EH_PE_datarel	gcc_personality_v0.c	75;"	d	file:
DW_EH_PE_funcrel	gcc_personality_v0.c	76;"	d	file:
DW_EH_PE_indirect	gcc_personality_v0.c	78;"	d	file:
DW_EH_PE_omit	gcc_personality_v0.c	61;"	d	file:
DW_EH_PE_pcrel	gcc_personality_v0.c	73;"	d	file:
DW_EH_PE_sdata2	gcc_personality_v0.c	69;"	d	file:
DW_EH_PE_sdata4	gcc_personality_v0.c	70;"	d	file:
DW_EH_PE_sdata8	gcc_personality_v0.c	71;"	d	file:
DW_EH_PE_sleb128	gcc_personality_v0.c	68;"	d	file:
DW_EH_PE_textrel	gcc_personality_v0.c	74;"	d	file:
DW_EH_PE_udata2	gcc_personality_v0.c	65;"	d	file:
DW_EH_PE_udata4	gcc_personality_v0.c	66;"	d	file:
DW_EH_PE_udata8	gcc_personality_v0.c	67;"	d	file:
DW_EH_PE_uleb128	gcc_personality_v0.c	64;"	d	file:
DarwinSymbolizer	asan/scripts/asan_symbolize.py	/^class DarwinSymbolizer(Symbolizer):$/;"	c
Data	tsan/tests/rtl/tsan_mop.cc	/^  static int Data[4];$/;"	m	struct:ClassWithStatic	file:
Data	tsan/tests/rtl/tsan_mop.cc	/^int ClassWithStatic::Data[4];$/;"	m	class:ClassWithStatic	file:
DeadlockDetector	tsan/rtl/tsan_mutex.cc	/^DeadlockDetector::DeadlockDetector() {$/;"	f	class:__tsan::DeadlockDetector
DeadlockDetector	tsan/rtl/tsan_mutex.h	/^class DeadlockDetector {$/;"	c	namespace:__tsan
Deallocate	asan/asan_allocator.cc	/^static void Deallocate(u8 *ptr, StackTrace *stack) {$/;"	f	namespace:__asan
Deallocate	sanitizer_common/sanitizer_allocator64.h	/^  void Deallocate(AllocatorCache *cache, void *p) {$/;"	f	class:__sanitizer::CombinedAllocator
Deallocate	sanitizer_common/sanitizer_allocator64.h	/^  void Deallocate(SizeClassAllocator *allocator, uptr class_id, void *p) {$/;"	f	struct:__sanitizer::SizeClassAllocatorLocalCache
Deallocate	sanitizer_common/sanitizer_allocator64.h	/^  void Deallocate(void *p) {$/;"	f	class:__sanitizer::LargeMmapAllocator
Deallocate	sanitizer_common/sanitizer_allocator64.h	/^  void Deallocate(void *p) {$/;"	f	class:__sanitizer::SizeClassAllocator64
DeallocateBySizeClass	sanitizer_common/sanitizer_allocator64.h	/^  void DeallocateBySizeClass(void *p, uptr class_id) {$/;"	f	class:__sanitizer::SizeClassAllocator64
DeallocateFrame	asan/asan_allocator.cc	/^void FakeStack::DeallocateFrame(FakeFrame *fake_frame) {$/;"	f	class:__asan::FakeStack
DeepFree	asan/lit_tests/deep_stack_uaf.cc	/^struct DeepFree {$/;"	s	file:
DeepFree	asan/lit_tests/deep_stack_uaf.cc	/^struct DeepFree<0> {$/;"	s	file:
DefaultSizeClassMap	sanitizer_common/sanitizer_allocator64.h	/^class DefaultSizeClassMap {$/;"	c	namespace:__sanitizer
Dependencies	Makefile.mk	/^Dependencies := $(wildcard $(Dir)\/*.h)$/;"	m
Dependencies	arm/Makefile.mk	/^Dependencies := $(wildcard lib\/*.h $(Dir)\/*.h)$/;"	m
Dependencies	asan/Makefile.mk	/^Dependencies := $(wildcard $(Dir)\/*.h)$/;"	m
Dependencies	asan/dynamic/Makefile.mk	/^Dependencies := $(wildcard $(Dir)\/*.h)$/;"	m
Dependencies	i386/Makefile.mk	/^Dependencies := $(wildcard lib\/*.h $(Dir)\/*.h)$/;"	m
Dependencies	interception/Makefile.mk	/^Dependencies := $(wildcard $(Dir)\/*.h)$/;"	m
Dependencies	interception/mach_override/Makefile.mk	/^Dependencies := $(wildcard $(Dir)\/*.h)$/;"	m
Dependencies	ppc/Makefile.mk	/^Dependencies := $(wildcard lib\/*.h $(Dir)\/*.h)$/;"	m
Dependencies	profile/Makefile.mk	/^Dependencies := $(wildcard $(Dir)\/*.h)$/;"	m
Dependencies	sanitizer_common/Makefile.mk	/^Dependencies := $(wildcard $(Dir)\/*.h)$/;"	m
Dependencies	tsan/Makefile.mk	/^Dependencies :=$/;"	m
Dependencies	tsan/rtl/Makefile.mk	/^Dependencies := $(wildcard $(Dir)\/*.h)$/;"	m
Dependencies	x86_64/Makefile.mk	/^Dependencies := $(wildcard lib\/*.h $(Dir)\/*.h)$/;"	m
DescribeAccessToHeapChunk	asan/asan_report.cc	/^static void DescribeAccessToHeapChunk(AsanChunkView chunk, uptr addr,$/;"	f	namespace:__asan
DescribeAddress	asan/asan_report.cc	/^void DescribeAddress(uptr addr, uptr access_size) {$/;"	f	namespace:__asan
DescribeAddressIfGlobal	asan/asan_globals.cc	/^bool DescribeAddressIfGlobal(uptr addr) {$/;"	f	namespace:__asan
DescribeAddressIfShadow	asan/asan_report.cc	/^bool DescribeAddressIfShadow(uptr addr) {$/;"	f	namespace:__asan
DescribeAddressIfStack	asan/asan_report.cc	/^bool DescribeAddressIfStack(uptr addr, uptr access_size) {$/;"	f	namespace:__asan
DescribeAddressRelativeToGlobal	asan/asan_report.cc	/^bool DescribeAddressRelativeToGlobal(uptr addr, const __asan_global &g) {$/;"	f	namespace:__asan
DescribeHeapAddress	asan/asan_report.cc	/^void DescribeHeapAddress(uptr addr, uptr access_size) {$/;"	f	namespace:__asan
DescribeThread	asan/asan_report.cc	/^void DescribeThread(AsanThreadSummary *summary) {$/;"	f	namespace:__asan
Destroy	asan/asan_thread.cc	/^void AsanThread::Destroy() {$/;"	f	class:__asan::AsanThread
Destroy	tsan/tests/rtl/tsan_test_util_linux.cc	/^void Mutex::Destroy() {$/;"	f	class:Mutex
Destroy	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Destroy(const Mutex &m) {$/;"	f	class:ScopedThread
DestroyAndFree	tsan/rtl/tsan_mman.h	/^void DestroyAndFree(T *&p) {$/;"	f	namespace:__tsan
Detach	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Detach() {$/;"	f	class:ScopedThread
Diag	ubsan/ubsan_diag.h	/^  Diag(const SourceLocation &Loc, const char *Message)$/;"	f	class:__ubsan::Diag
Diag	ubsan/ubsan_diag.h	/^class Diag {$/;"	c	namespace:__ubsan
Die	sanitizer_common/sanitizer_common.cc	/^void NORETURN Die() {$/;"	f	namespace:__sanitizer
Die	ubsan/ubsan_handlers.cc	/^NORETURN void __sanitizer::Die() {$/;"	f	class:__sanitizer
DieCallback	sanitizer_common/sanitizer_common.cc	/^static void (*DieCallback)(void);$/;"	m	namespace:__sanitizer	file:
Disable	tsan/rtl/tsan_clock.cc	/^void ThreadClock::Disable(unsigned tid) {$/;"	f	class:__tsan::ThreadClock
DisableCoreDumper	sanitizer_common/sanitizer_posix.cc	/^void DisableCoreDumper() {$/;"	f	namespace:__sanitizer
DisableCoreDumper	sanitizer_common/sanitizer_win.cc	/^void DisableCoreDumper() {$/;"	f	namespace:__sanitizer
DlIteratePhdrCtx	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^struct DlIteratePhdrCtx {$/;"	s	namespace:__tsan	file:
DlIteratePhdrData	sanitizer_common/sanitizer_symbolizer_linux.cc	/^struct DlIteratePhdrData {$/;"	s	namespace:__sanitizer	file:
Do	tsan/rtl/tsan_mutex.cc	/^  bool Do() {$/;"	f	class:__tsan::Backoff
DoDoubleFree	asan/tests/asan_noinst_test.cc	/^static void DoDoubleFree() {$/;"	f	file:
DoLargeMallocForGetFreeBytesTestAndDie	asan/tests/asan_noinst_test.cc	/^static void DoLargeMallocForGetFreeBytesTestAndDie() {$/;"	f	file:
Done	tsan/lit_tests/vptr_benign_race.cc	/^  void Done() {$/;"	f	struct:A
Done	tsan/lit_tests/vptr_harmful_race.cc	/^  void Done() {$/;"	f	struct:A
DoubleFree	asan/tests/asan_test.cc	/^void DoubleFree() {$/;"	f
Drain	sanitizer_common/sanitizer_allocator64.h	/^  void Drain(SizeClassAllocator *allocator) {$/;"	f	struct:__sanitizer::SizeClassAllocatorLocalCache
DrainHalf	sanitizer_common/sanitizer_allocator64.h	/^  void DrainHalf(SizeClassAllocator *allocator, uptr class_id) {$/;"	f	struct:__sanitizer::SizeClassAllocatorLocalCache
DumpProcessMap	sanitizer_common/sanitizer_posix.cc	/^void DumpProcessMap() {$/;"	f	namespace:__sanitizer
DumpProcessMap	sanitizer_common/sanitizer_win.cc	/^void DumpProcessMap() {$/;"	f	namespace:__sanitizer
DynamicAnnContext	tsan/rtl/tsan_interface_ann.cc	/^  DynamicAnnContext()$/;"	f	struct:__tsan::DynamicAnnContext
DynamicAnnContext	tsan/rtl/tsan_interface_ann.cc	/^struct DynamicAnnContext {$/;"	s	namespace:__tsan	file:
EBUSY	tsan/rtl/tsan_interceptors.cc	/^const int EBUSY = 16;$/;"	v
EINVAL	tsan/rtl/tsan_interceptors.cc	/^const int EINVAL = 22;$/;"	v
END_MACH_OVERRIDE	interception/mach_override/mach_override.h	126;"	d
ENSURE_ASAN_INITED	asan/asan_interceptors.cc	80;"	d	file:
EPOLL_CTL_ADD	tsan/rtl/tsan_interceptors.cc	/^const int EPOLL_CTL_ADD = 1;$/;"	v
ESTABLISH_FRAME	arm/divmodsi4.S	/^#define ESTABLISH_FRAME    \\$/;"	d
ESTABLISH_FRAME	arm/divsi3.S	/^#define ESTABLISH_FRAME \\$/;"	d
ESTABLISH_FRAME	arm/divsi3.S	/^ESTABLISH_FRAME$/;"	l
ESTABLISH_FRAME	arm/modsi3.S	/^#define ESTABLISH_FRAME \\$/;"	d
ESTABLISH_FRAME	arm/udivmodsi4.S	/^#define ESTABLISH_FRAME    \\$/;"	d
ESTABLISH_FRAME	arm/udivsi3.S	/^#define ESTABLISH_FRAME \\$/;"	d
Elf_Phdr	sanitizer_common/sanitizer_symbolizer_linux.cc	/^typedef ElfW(Phdr) Elf_Phdr;$/;"	t	namespace:__sanitizer	file:
End	asan/asan_allocator.cc	/^uptr AsanChunkView::End() { return Beg() + UsedSize(); }$/;"	f	class:__asan::AsanChunkView
EnsureSize	tsan/rtl/tsan_vector.h	/^  void EnsureSize(uptr size) {$/;"	f	class:__tsan::Vector
ErrorReportCallbackOneToZ	asan/tests/asan_noinst_test.cc	/^static void ErrorReportCallbackOneToZ(const char *report) {$/;"	f	file:
Event	tsan/rtl/tsan_trace.h	/^typedef u64 Event;$/;"	t	namespace:__tsan
Event	tsan/tests/rtl/tsan_test_util_linux.cc	/^  Event(Type type, const void *ptr = 0, uptr arg = 0, uptr arg2 = 0)$/;"	f	struct:Event
Event	tsan/tests/rtl/tsan_test_util_linux.cc	/^struct Event {$/;"	s	file:
EventType	tsan/rtl/tsan_trace.h	/^enum EventType {$/;"	g	namespace:__tsan
EventTypeFuncEnter	tsan/rtl/tsan_trace.h	/^  EventTypeFuncEnter,$/;"	e	enum:__tsan::EventType
EventTypeFuncExit	tsan/rtl/tsan_trace.h	/^  EventTypeFuncExit,$/;"	e	enum:__tsan::EventType
EventTypeLock	tsan/rtl/tsan_trace.h	/^  EventTypeLock,$/;"	e	enum:__tsan::EventType
EventTypeMop	tsan/rtl/tsan_trace.h	/^  EventTypeMop,$/;"	e	enum:__tsan::EventType
EventTypeRLock	tsan/rtl/tsan_trace.h	/^  EventTypeRLock,$/;"	e	enum:__tsan::EventType
EventTypeRUnlock	tsan/rtl/tsan_trace.h	/^  EventTypeRUnlock$/;"	e	enum:__tsan::EventType
EventTypeUnlock	tsan/rtl/tsan_trace.h	/^  EventTypeUnlock,$/;"	e	enum:__tsan::EventType
ExcludedSources	Makefile.mk	/^ExcludedSources := atomic.c$/;"	m
Exit	sanitizer_common/sanitizer_posix.cc	/^void Exit(int exitcode) {$/;"	f	namespace:__sanitizer
Exit	sanitizer_common/sanitizer_win.cc	/^void Exit(int exitcode) {$/;"	f	namespace:__sanitizer
ExpectRace	tsan/rtl/tsan_interface_ann.cc	/^struct ExpectRace {$/;"	s	namespace:__tsan	file:
ExpectReport	tsan/tests/rtl/tsan_test_util_linux.cc	/^  void ExpectReport(ReportType type) {$/;"	f	struct:Event
ExternalSymbolizer	sanitizer_common/sanitizer_symbolizer.cc	/^  ExternalSymbolizer(const char *path, int input_fd, int output_fd)$/;"	f	class:__sanitizer::ExternalSymbolizer
ExternalSymbolizer	sanitizer_common/sanitizer_symbolizer.cc	/^class ExternalSymbolizer {$/;"	c	namespace:__sanitizer	file:
ExtractInt	sanitizer_common/sanitizer_symbolizer.cc	/^static const char *ExtractInt(const char *str, const char *delims,$/;"	f	namespace:__sanitizer
ExtractToken	sanitizer_common/sanitizer_symbolizer.cc	/^static const char *ExtractToken(const char *str, const char *delims,$/;"	f	namespace:__sanitizer
F	tsan/lit_tests/vptr_benign_race.cc	/^  virtual void F() {$/;"	f	struct:A
F	tsan/lit_tests/vptr_benign_race.cc	/^  virtual void F() {$/;"	f	struct:B
F	tsan/lit_tests/vptr_harmful_race.cc	/^  virtual void F() {$/;"	f	struct:A
F	tsan/lit_tests/vptr_harmful_race.cc	/^  virtual void F() {$/;"	f	struct:B
F	tsan/rtl/tsan_md5.cc	17;"	d	file:
FILE_LEVEL_DIRECTIVE	assembly.h	28;"	d
FILE_LEVEL_DIRECTIVE	assembly.h	32;"	d
FIRST_32_SECOND_64	sanitizer_common/sanitizer_common.h	176;"	d
FIRST_32_SECOND_64	sanitizer_common/sanitizer_common.h	178;"	d
FORMAT	sanitizer_common/sanitizer_internal_defs.h	33;"	d
FP_LIB_HEADER	fp_lib.h	22;"	d
FUNC_TYPE	interception/interception.h	117;"	d
F_LOCK	tsan/rtl/tsan_interceptors.cc	74;"	d	file:
F_TEST	tsan/rtl/tsan_interceptors.cc	76;"	d	file:
F_TLOCK	tsan/rtl/tsan_interceptors.cc	75;"	d	file:
F_ULOCK	tsan/rtl/tsan_interceptors.cc	73;"	d	file:
FailInAssertionOnOOM	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^void FailInAssertionOnOOM() {$/;"	f
FakeFrame	asan/asan_allocator.h	/^struct FakeFrame {$/;"	s	namespace:__asan
FakeFrameFifo	asan/asan_allocator.h	/^struct FakeFrameFifo {$/;"	s	namespace:__asan
FakeFrameLifo	asan/asan_allocator.h	/^class FakeFrameLifo {$/;"	c	namespace:__asan
FakeStack	asan/asan_allocator.cc	/^FakeStack::FakeStack() {$/;"	f	class:__asan::FakeStack
FakeStack	asan/asan_allocator.h	/^  explicit FakeStack(LinkerInitialized) {}$/;"	f	class:__asan::FakeStack
FakeStack	asan/asan_allocator.h	/^class FakeStack {$/;"	c	namespace:__asan
FastState	tsan/rtl/tsan_rtl.h	/^  FastState(u64 tid, u64 epoch) {$/;"	f	class:__tsan::FastState
FastState	tsan/rtl/tsan_rtl.h	/^  explicit FastState(u64 x)$/;"	f	class:__tsan::FastState
FastState	tsan/rtl/tsan_rtl.h	/^class FastState {$/;"	c	namespace:__tsan
FastUnwindStack	sanitizer_common/sanitizer_stacktrace.cc	/^void StackTrace::FastUnwindStack(uptr pc, uptr bp,$/;"	f	class:__sanitizer::StackTrace
FifoPop	asan/asan_allocator.cc	/^FakeFrame *FakeFrameFifo::FifoPop() {$/;"	f	class:__asan::FakeFrameFifo
FifoPush	asan/asan_allocator.cc	/^void FakeFrameFifo::FifoPush(FakeFrame *node) {$/;"	f	class:__asan::FakeFrameFifo
Filename	ubsan/ubsan_value.h	/^  const char *Filename;$/;"	m	class:__ubsan::SourceLocation
FillAddressAndModuleInfo	sanitizer_common/sanitizer_symbolizer.h	/^  void FillAddressAndModuleInfo(uptr addr, const char *mod_name,$/;"	f	struct:__sanitizer::AddressInfo
FillMallocStatistics	asan/asan_thread_registry.cc	/^void AsanThreadRegistry::FillMallocStatistics(AsanMallocStats *malloc_stats) {$/;"	f	class:__asan::AsanThreadRegistry
Finalize	tsan/rtl/tsan_rtl.cc	/^int Finalize(ThreadState *thr) {$/;"	f	namespace:__tsan
FinalizePlatform	tsan/rtl/tsan_platform_linux.cc	/^void FinalizePlatform() {$/;"	f	namespace:__tsan
FinalizePlatform	tsan/rtl/tsan_platform_mac.cc	/^void FinalizePlatform() {$/;"	f	namespace:__tsan
FindByTid	asan/asan_thread_registry.cc	/^AsanThreadSummary *AsanThreadRegistry::FindByTid(u32 tid) {$/;"	f	class:__asan::AsanThreadRegistry
FindChunkByAddr	asan/asan_allocator.cc	/^  AsanChunk *FindChunkByAddr(uptr addr) {$/;"	f	class:__asan::MallocInfo
FindChunkByAddrUnlocked	asan/asan_allocator.cc	/^  AsanChunk *FindChunkByAddrUnlocked(uptr addr) {$/;"	f	class:__asan::MallocInfo	file:
FindHeapChunkByAddress	asan/asan_allocator.cc	/^AsanChunkView FindHeapChunkByAddress(uptr address) {$/;"	f	namespace:__asan
FindModuleForAddress	sanitizer_common/sanitizer_symbolizer.cc	/^  LoadedModule *FindModuleForAddress(uptr address) {$/;"	f	class:__sanitizer::Symbolizer	file:
FindPageGroup	asan/asan_allocator.cc	/^  PageGroup *FindPageGroup(uptr addr) {$/;"	f	class:__asan::MallocInfo
FindPageGroupUnlocked	asan/asan_allocator.cc	/^  PageGroup *FindPageGroupUnlocked(uptr addr) {$/;"	f	class:__asan::MallocInfo	file:
FindRace	tsan/rtl/tsan_interface_ann.cc	/^static ExpectRace *FindRace(ExpectRace *list, uptr addr, uptr size) {$/;"	f	namespace:__tsan
FindThread	tsan/rtl/tsan_rtl_report.cc	/^static ThreadContext *FindThread(int unique_id) {$/;"	f	namespace:__tsan
FindThreadByStackAddress	asan/asan_thread_registry.cc	/^AsanThread *AsanThreadRegistry::FindThreadByStackAddress(uptr addr) {$/;"	f	class:__asan::AsanThreadRegistry
FiredSuppression	tsan/rtl/tsan_rtl.h	/^struct FiredSuppression {$/;"	s	namespace:__tsan
FixRealStrtolEndptr	asan/asan_interceptors.cc	/^static inline void FixRealStrtolEndptr(const char *nptr, char **endptr) {$/;"	f	file:
Flags	asan/asan_flags.h	/^struct Flags {$/;"	s	namespace:__asan
Flags	tsan/rtl/tsan_flags.h	/^struct Flags {$/;"	s	namespace:__tsan
Float	ubsan/ubsan_diag.h	/^      FloatMax Float;$/;"	m	union:__ubsan::Diag::Arg::__anon31
FloatCastOverflowData	ubsan/ubsan_handlers.h	/^struct FloatCastOverflowData {$/;"	s	namespace:__ubsan
FloatMax	ubsan/ubsan_value.h	/^typedef long double FloatMax;$/;"	t	namespace:__ubsan
FlushShadowMemory	tsan/rtl/tsan_platform_linux.cc	/^void FlushShadowMemory() {$/;"	f	namespace:__tsan
FlushShadowMemory	tsan/rtl/tsan_platform_mac.cc	/^void FlushShadowMemory() {$/;"	f	namespace:__tsan
FlushToAccumulatedStatsUnlocked	asan/asan_thread_registry.cc	/^void AsanThreadRegistry::FlushToAccumulatedStatsUnlocked(AsanStats *stats) {$/;"	f	class:__asan::AsanThreadRegistry
ForceLock	asan/asan_allocator.cc	/^  void ForceLock() {$/;"	f	class:__asan::MallocInfo
ForceUnlock	asan/asan_allocator.cc	/^  void ForceUnlock() {$/;"	f	class:__asan::MallocInfo
Frame0	asan/tests/asan_test.cc	/^NOINLINE static void Frame0(int frame, char *a, char *b, char *c) {$/;"	f	file:
Frame1	asan/tests/asan_test.cc	/^NOINLINE static void Frame1(int frame, char *a, char *b) {$/;"	f	file:
Frame2	asan/tests/asan_test.cc	/^NOINLINE static void Frame2(int frame, char *a) {$/;"	f	file:
Frame3	asan/tests/asan_test.cc	/^NOINLINE static void Frame3(int frame) {$/;"	f	file:
FreeThread	asan/lit_tests/deep_thread_stack.cc	/^void *FreeThread(void *arg) {$/;"	f
FreeTid	asan/asan_allocator.cc	/^uptr AsanChunkView::FreeTid() { return chunk_->free_tid; }$/;"	f	class:__asan::AsanChunkView
FromType	ubsan/ubsan_handlers.h	/^  const TypeDescriptor &FromType;$/;"	m	struct:__ubsan::FloatCastOverflowData
Func1	asan/lit_tests/stack-use-after-return.cc	/^char *Func1() {$/;"	f
Func2	asan/lit_tests/stack-use-after-return.cc	/^void Func2(char *x) {$/;"	f
FuncEntry	tsan/rtl/tsan_rtl.cc	/^void FuncEntry(ThreadState *thr, uptr pc) {$/;"	f	namespace:__tsan
FuncExit	tsan/rtl/tsan_rtl.cc	/^void FuncExit(ThreadState *thr) {$/;"	f	namespace:__tsan
FuncWithStack	asan/tests/asan_test.cc	/^NOINLINE static void FuncWithStack() {$/;"	f	file:
FunctionWithLargeStack	asan/tests/asan_benchmarks_test.cc	/^static void FunctionWithLargeStack() {$/;"	f	file:
G	tsan/rtl/tsan_md5.cc	18;"	d	file:
GET	tsan/rtl/tsan_md5.cc	29;"	d	file:
GET_ASAN_BLOCK	asan/asan_mac.cc	404;"	d	file:
GET_CALLER_PC	sanitizer_common/sanitizer_internal_defs.h	175;"	d
GET_CALLER_PC	sanitizer_common/sanitizer_internal_defs.h	180;"	d
GET_CALLER_PC_BP_SP	sanitizer_common/sanitizer_stacktrace.h	60;"	d
GET_CURRENT_FRAME	sanitizer_common/sanitizer_internal_defs.h	176;"	d
GET_CURRENT_FRAME	sanitizer_common/sanitizer_internal_defs.h	184;"	d
GET_CURRENT_PC_BP_SP	sanitizer_common/sanitizer_stacktrace.h	68;"	d
GET_STACK_TRACE_HERE	asan/asan_stack.h	38;"	d
GET_STACK_TRACE_HERE_FOR_FREE	asan/asan_stack.h	45;"	d
GET_STACK_TRACE_HERE_FOR_MALLOC	asan/asan_stack.h	42;"	d
GET_STACK_TRACE_WITH_PC_AND_BP	asan/asan_stack.h	30;"	d
GET_ZONE_FOR_PTR	asan/asan_malloc_mac.cc	175;"	d	file:
GE_EQUAL	comparedf2.c	/^    GE_EQUAL     =  0,$/;"	e	enum:GE_RESULT	file:
GE_EQUAL	comparesf2.c	/^    GE_EQUAL     =  0,$/;"	e	enum:GE_RESULT	file:
GE_GREATER	comparedf2.c	/^    GE_GREATER   =  1,$/;"	e	enum:GE_RESULT	file:
GE_GREATER	comparesf2.c	/^    GE_GREATER   =  1,$/;"	e	enum:GE_RESULT	file:
GE_LESS	comparedf2.c	/^    GE_LESS      = -1,$/;"	e	enum:GE_RESULT	file:
GE_LESS	comparesf2.c	/^    GE_LESS      = -1,$/;"	e	enum:GE_RESULT	file:
GE_RESULT	comparedf2.c	/^enum GE_RESULT {$/;"	g	file:
GE_RESULT	comparesf2.c	/^enum GE_RESULT {$/;"	g	file:
GE_UNORDERED	comparedf2.c	/^    GE_UNORDERED = -1   \/\/ Note: different from LE_UNORDERED$/;"	e	enum:GE_RESULT	file:
GE_UNORDERED	comparesf2.c	/^    GE_UNORDERED = -1   \/\/ Note: different from LE_UNORDERED$/;"	e	enum:GE_RESULT	file:
GLOB	asan/lit_tests/SharedLibs/shared-lib-test-so.cc	/^int GLOB[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};$/;"	v
GLOB	asan/tests/asan_test.cc	/^void *GLOB;$/;"	m	namespace:__anon2	file:
GLUE	assembly.h	36;"	d
GLUE2	assembly.h	35;"	d
GOOD_ACCESS	asan/tests/asan_noinst_test.cc	537;"	d	file:
GarbageThread	tsan/benchmarks/vts_many_threads_bench.cc	/^void* GarbageThread(void *unused) {$/;"	f
GenericScopedLock	sanitizer_common/sanitizer_mutex.h	/^  explicit GenericScopedLock(MutexType *mu)$/;"	f	class:__sanitizer::GenericScopedLock
GenericScopedLock	sanitizer_common/sanitizer_mutex.h	/^class GenericScopedLock {$/;"	c	namespace:__sanitizer
GenericScopedReadLock	sanitizer_common/sanitizer_mutex.h	/^  explicit GenericScopedReadLock(MutexType *mu)$/;"	f	class:__sanitizer::GenericScopedReadLock
GenericScopedReadLock	sanitizer_common/sanitizer_mutex.h	/^class GenericScopedReadLock {$/;"	c	namespace:__sanitizer
Get	tsan/rtl/tsan_sync.cc	/^uptr StackTrace::Get(uptr i) const {$/;"	f	class:__tsan::StackTrace
GetAccumulatedStats	asan/asan_thread_registry.cc	/^AsanStats AsanThreadRegistry::GetAccumulatedStats() {$/;"	f	class:__asan::AsanThreadRegistry
GetActuallyAllocatedSize	sanitizer_common/sanitizer_allocator64.h	/^  static uptr GetActuallyAllocatedSize(void *p) {$/;"	f	class:__sanitizer::SizeClassAllocator64
GetActuallyAllocatedSize	sanitizer_common/sanitizer_allocator64.h	/^  uptr GetActuallyAllocatedSize(void *p) {$/;"	f	class:__sanitizer::CombinedAllocator
GetActuallyAllocatedSize	sanitizer_common/sanitizer_allocator64.h	/^  uptr GetActuallyAllocatedSize(void *p) {$/;"	f	class:__sanitizer::LargeMmapAllocator
GetAlignedSize	asan/asan_globals.cc	/^static uptr GetAlignedSize(uptr size) {$/;"	f	namespace:__asan
GetAllocStack	asan/asan_allocator.cc	/^void AsanChunkView::GetAllocStack(StackTrace *stack) {$/;"	f	class:__asan::AsanChunkView
GetAndLock	tsan/rtl/tsan_sync.cc	/^SyncVar* SyncTab::GetAndLock(ThreadState *thr, uptr pc,$/;"	f	class:__tsan::SyncTab
GetAndRemove	tsan/rtl/tsan_sync.cc	/^SyncVar* SyncTab::GetAndRemove(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	class:__tsan::SyncTab
GetBlockBegin	sanitizer_common/sanitizer_allocator64.h	/^  static void *GetBlockBegin(void *p) {$/;"	f	class:__sanitizer::SizeClassAllocator64
GetBlockBegin	sanitizer_common/sanitizer_allocator64.h	/^  void *GetBlockBegin(void *p) {$/;"	f	class:__sanitizer::CombinedAllocator
GetBlockBegin	sanitizer_common/sanitizer_allocator64.h	/^  void *GetBlockBegin(void *p) {$/;"	f	class:__sanitizer::LargeMmapAllocator
GetChunkIdx	sanitizer_common/sanitizer_allocator64.h	/^  static uptr GetChunkIdx(uptr chunk, uptr size) {$/;"	f	class:__sanitizer::SizeClassAllocator64
GetCurrent	asan/asan_thread_registry.cc	/^AsanThread *AsanThreadRegistry::GetCurrent() {$/;"	f	class:__asan::AsanThreadRegistry
GetCurrentAllocatedBytes	asan/asan_thread_registry.cc	/^uptr AsanThreadRegistry::GetCurrentAllocatedBytes() {$/;"	f	class:__asan::AsanThreadRegistry
GetCurrentPc	sanitizer_common/sanitizer_stacktrace.cc	/^uptr StackTrace::GetCurrentPc() {$/;"	f	class:__sanitizer::StackTrace
GetCurrentThreadStats	asan/asan_thread_registry.cc	/^AsanStats &AsanThreadRegistry::GetCurrentThreadStats() {$/;"	f	class:__asan::AsanThreadRegistry
GetCurrentTidOrInvalid	asan/asan_thread_registry.h	/^  u32 GetCurrentTidOrInvalid() {$/;"	f	class:__asan::AsanThreadRegistry
GetEnv	sanitizer_common/sanitizer_linux.cc	/^const char *GetEnv(const char *name) {$/;"	f	namespace:__sanitizer
GetEnv	sanitizer_common/sanitizer_mac.cc	/^const char *GetEnv(const char *name) {$/;"	f	namespace:__sanitizer
GetEnv	sanitizer_common/sanitizer_win.cc	/^const char *GetEnv(const char *name) {$/;"	f	namespace:__sanitizer
GetFlagValue	sanitizer_common/sanitizer_flags.cc	/^static bool GetFlagValue(const char *env, const char *name,$/;"	f	namespace:__sanitizer
GetFrameNameByAddr	asan/asan_thread.cc	/^const char *AsanThread::GetFrameNameByAddr(uptr addr, uptr *offset) {$/;"	f	class:__asan::AsanThread
GetFreeBytes	asan/asan_thread_registry.cc	/^uptr AsanThreadRegistry::GetFreeBytes() {$/;"	f	class:__asan::AsanThreadRegistry
GetFreeStack	asan/asan_allocator.cc	/^void AsanChunkView::GetFreeStack(StackTrace *stack) {$/;"	f	class:__asan::AsanChunkView
GetFreedAndReset	tsan/rtl/tsan_rtl.h	/^  bool GetFreedAndReset() {$/;"	f	class:__tsan::Shadow
GetHeader	sanitizer_common/sanitizer_allocator64.h	/^  Header *GetHeader(uptr p) { return reinterpret_cast<Header*>(p - kPageSize); }$/;"	f	class:__sanitizer::LargeMmapAllocator
GetHeader	sanitizer_common/sanitizer_allocator64.h	/^  Header *GetHeader(void *p) { return GetHeader(reinterpret_cast<uptr>(p)); }$/;"	f	class:__sanitizer::LargeMmapAllocator
GetHeapSize	asan/asan_thread_registry.cc	/^uptr AsanThreadRegistry::GetHeapSize() {$/;"	f	class:__asan::AsanThreadRegistry
GetIgnoreBit	tsan/rtl/tsan_rtl.h	/^  bool GetIgnoreBit() const { return x_ & kIgnoreBit; }$/;"	f	class:__tsan::FastState
GetListOfModules	sanitizer_common/sanitizer_symbolizer_linux.cc	/^uptr GetListOfModules(LoadedModule *modules, uptr max_modules) {$/;"	f	namespace:__sanitizer
GetListOfModules	sanitizer_common/sanitizer_symbolizer_mac.cc	/^uptr GetListOfModules(LoadedModule *modules, uptr max_modules) {$/;"	f	namespace:__sanitizer
GetListOfModules	sanitizer_common/sanitizer_symbolizer_win.cc	/^uptr GetListOfModules(LoadedModule *modules, uptr max_modules) {$/;"	f	namespace:__sanitizer
GetMacosVersion	asan/asan_mac.cc	/^int GetMacosVersion() {$/;"	f	namespace:__asan
GetMain	asan/asan_thread_registry.cc	/^AsanThread *AsanThreadRegistry::GetMain() {$/;"	f	class:__asan::AsanThreadRegistry
GetMemoryConsumption	tsan/rtl/tsan_sync.cc	/^uptr SyncTab::GetMemoryConsumption(uptr *nsync) {$/;"	f	class:__tsan::SyncTab
GetMemoryConsumption	tsan/rtl/tsan_sync.cc	/^uptr SyncVar::GetMemoryConsumption() {$/;"	f	class:__tsan::SyncVar
GetMetaData	sanitizer_common/sanitizer_allocator64.h	/^  void *GetMetaData(void *p) {$/;"	f	class:__sanitizer::CombinedAllocator
GetMetaData	sanitizer_common/sanitizer_allocator64.h	/^  void *GetMetaData(void *p) {$/;"	f	class:__sanitizer::LargeMmapAllocator
GetMetaData	sanitizer_common/sanitizer_allocator64.h	/^  void *GetMetaData(void *p) {$/;"	f	class:__sanitizer::SizeClassAllocator64
GetNewChunks	asan/asan_allocator.cc	/^  AsanChunk *GetNewChunks(u8 size_class) {$/;"	f	class:__asan::MallocInfo	file:
GetObjectNameAndOffset	sanitizer_common/sanitizer_linux.cc	/^bool MemoryMappingLayout::GetObjectNameAndOffset(uptr addr, uptr *offset,$/;"	f	class:__sanitizer::MemoryMappingLayout
GetObjectNameAndOffset	sanitizer_common/sanitizer_mac.cc	/^bool MemoryMappingLayout::GetObjectNameAndOffset(uptr addr, uptr *offset,$/;"	f	class:__sanitizer::MemoryMappingLayout
GetObjectNameAndOffset	sanitizer_common/sanitizer_procmaps.h	/^  bool GetObjectNameAndOffset(uptr addr, uptr *offset,$/;"	f	class:__sanitizer::MemoryMappingLayout
GetPcSpBp	asan/asan_linux.cc	/^void GetPcSpBp(void *context, uptr *pc, uptr *sp, uptr *bp) {$/;"	f	namespace:__asan
GetPcSpBp	asan/asan_mac.cc	/^void GetPcSpBp(void *context, uptr *pc, uptr *sp, uptr *bp) {$/;"	f	namespace:__asan
GetPid	sanitizer_common/sanitizer_posix.cc	/^int GetPid() {$/;"	f	namespace:__sanitizer
GetPid	sanitizer_common/sanitizer_win.cc	/^int GetPid() {$/;"	f	namespace:__sanitizer
GetPwd	sanitizer_common/sanitizer_posix.cc	/^const char *GetPwd() {$/;"	f	namespace:__sanitizer
GetPwd	sanitizer_common/sanitizer_win.cc	/^const char *GetPwd() {$/;"	f	namespace:__sanitizer
GetRealFunctionAddress	interception/interception_linux.cc	/^bool GetRealFunctionAddress(const char *func_name, uptr *func_addr,$/;"	f	namespace:__interception
GetRealFunctionAddress	interception/interception_win.cc	/^bool GetRealFunctionAddress(const char *func_name, uptr *func_addr) {$/;"	f	namespace:__interception
GetRegionInfo	sanitizer_common/sanitizer_allocator64.h	/^  RegionInfo *GetRegionInfo(uptr class_id) {$/;"	f	class:__sanitizer::SizeClassAllocator64
GetReport	tsan/rtl/tsan_rtl_report.cc	/^const ReportDesc *ScopedReport::GetReport() const {$/;"	f	class:__tsan::ScopedReport
GetSectionDesc	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^static SectionDesc *GetSectionDesc(uptr addr) {$/;"	f	namespace:__tsan
GetShadowMemoryConsumption	tsan/rtl/tsan_platform_linux.cc	/^uptr GetShadowMemoryConsumption() {$/;"	f	namespace:__tsan
GetShadowMemoryConsumption	tsan/rtl/tsan_platform_mac.cc	/^uptr GetShadowMemoryConsumption() {$/;"	f	namespace:__tsan
GetSizeClass	sanitizer_common/sanitizer_allocator64.h	/^  static uptr GetSizeClass(void *p) {$/;"	f	class:__sanitizer::SizeClassAllocator64
GetStackTrace	asan/asan_linux.cc	/^void GetStackTrace(StackTrace *stack, uptr max_s, uptr pc, uptr bp) {$/;"	f	namespace:__asan
GetStackTrace	asan/asan_mac.cc	/^void GetStackTrace(StackTrace *stack, uptr max_s, uptr pc, uptr bp) {$/;"	f	namespace:__asan
GetStackTrace	asan/asan_win.cc	/^void GetStackTrace(StackTrace *stack, uptr max_s, uptr pc, uptr bp) {$/;"	f	namespace:__asan
GetThreadSelf	sanitizer_common/sanitizer_posix.cc	/^uptr GetThreadSelf() {$/;"	f	namespace:__sanitizer
GetThreadSelf	sanitizer_common/sanitizer_win.cc	/^uptr GetThreadSelf() {$/;"	f	namespace:__sanitizer
GetThreadStackAndTls	tsan/rtl/tsan_platform_linux.cc	/^void GetThreadStackAndTls(bool main, uptr *stk_addr, uptr *stk_size,$/;"	f	namespace:__tsan
GetThreadStackAndTls	tsan/rtl/tsan_platform_mac.cc	/^void GetThreadStackAndTls(bool main, uptr *stk_addr, uptr *stk_size,$/;"	f	namespace:__tsan
GetThreadStackTopAndBottom	sanitizer_common/sanitizer_linux.cc	/^void GetThreadStackTopAndBottom(bool at_initialization, uptr *stack_top,$/;"	f	namespace:__sanitizer
GetThreadStackTopAndBottom	sanitizer_common/sanitizer_mac.cc	/^void GetThreadStackTopAndBottom(bool at_initialization, uptr *stack_top,$/;"	f	namespace:__sanitizer
GetThreadStackTopAndBottom	sanitizer_common/sanitizer_win.cc	/^void GetThreadStackTopAndBottom(bool at_initialization, uptr *stack_top,$/;"	f	namespace:__sanitizer
GetTid	sanitizer_common/sanitizer_linux.cc	/^uptr GetTid() {$/;"	f	namespace:__sanitizer
GetTid	sanitizer_common/sanitizer_mac.cc	/^uptr GetTid() {$/;"	f	namespace:__sanitizer
GetTlsSize	tsan/rtl/tsan_platform_linux.cc	/^uptr GetTlsSize() {$/;"	f	namespace:__tsan
GetTlsSize	tsan/rtl/tsan_platform_mac.cc	/^uptr GetTlsSize() {$/;"	f	namespace:__tsan
GetUser	sanitizer_common/sanitizer_allocator64.h	/^  void *GetUser(Header *h) {$/;"	f	class:__sanitizer::LargeMmapAllocator
Global	asan/asan_globals.cc	/^typedef __asan_global Global;$/;"	t	namespace:__asan	file:
Global	tsan/lit_tests/race_on_barrier.c	/^int Global;$/;"	v
Global	tsan/lit_tests/race_on_barrier2.c	/^int Global;$/;"	v
Global	tsan/lit_tests/race_on_mutex.c	/^int Global;$/;"	v
Global	tsan/lit_tests/simple_race.c	/^int Global;$/;"	v
Global	tsan/lit_tests/simple_race.cc	/^int Global;$/;"	v
Global	tsan/lit_tests/simple_stack.c	/^int Global;$/;"	v
Global	tsan/lit_tests/simple_stack2.cc	/^int Global;$/;"	v
Global	tsan/lit_tests/tiny_race.c	/^int Global;$/;"	v
GlobalsTest	asan/tests/asan_globals_test.cc	/^int GlobalsTest(int zero) {$/;"	f
H	tsan/rtl/tsan_md5.cc	19;"	d	file:
HACKY_CALL	tsan/rtl/tsan_rtl.h	525;"	d
HACKY_CALL	tsan/rtl/tsan_rtl.h	533;"	d
HANDLE_EINTR	sanitizer_common/sanitizer_internal_defs.h	187;"	d
HAVE_INT128_T	ubsan/ubsan_value.h	29;"	d
HAVE_INT128_T	ubsan/ubsan_value.h	31;"	d
HAVE_SYSCONF	enable_execute_stack.c	19;"	d	file:
HEX_DIGIT	interception/mach_override/mach_override.c	905;"	d	file:
HIDDEN_DIRECTIVE	assembly.h	26;"	d
HIDDEN_DIRECTIVE	assembly.h	30;"	d
HandleEvent	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Impl::HandleEvent(Event *ev) {$/;"	f	class:ScopedThread::Impl
HandleRace	tsan/rtl/tsan_rtl.cc	/^static inline void HandleRace(ThreadState *thr, u64 *shadow_mem,$/;"	f	namespace:__tsan
HandleRacyStacks	tsan/rtl/tsan_rtl_report.cc	/^static bool HandleRacyStacks(ThreadState *thr, const StackTrace (&traces)[2],$/;"	f	namespace:__tsan
HandleSignedOverflow	ubsan/ubsan_handlers.cc	/^template<typename T> static void HandleSignedOverflow(OverflowData *Data,$/;"	f	file:
HappensBefore	tsan/rtl/tsan_rtl.cc	/^static inline bool HappensBefore(Shadow old, ThreadState *thr) {$/;"	f	namespace:__tsan
Header	sanitizer_common/sanitizer_allocator64.h	/^  struct Header {$/;"	s	class:__sanitizer::LargeMmapAllocator
I	tsan/rtl/tsan_md5.cc	20;"	d	file:
IMPL_COMPILER_ASSERT	sanitizer_common/sanitizer_internal_defs.h	145;"	d
IMPL_PASTE	sanitizer_common/sanitizer_internal_defs.h	144;"	d
INCLUDED_FROM_ASAN_TEST_UTILS_H	asan/tests/asan_test_utils.h	18;"	d
INCLUDED_FROM_ASAN_TEST_UTILS_H	asan/tests/asan_test_utils.h	20;"	d
INCLUDED_FROM_INTERCEPTION_LIB	interception/interception.h	180;"	d
INCLUDED_FROM_INTERCEPTION_LIB	interception/interception.h	195;"	d
INLINE	sanitizer_common/sanitizer_internal_defs.h	22;"	d
INT32_MAX	sanitizer_common/sanitizer_internal_defs.h	161;"	d
INT32_MAX	sanitizer_common/sanitizer_internal_defs.h	162;"	d
INT32_MIN	sanitizer_common/sanitizer_internal_defs.h	159;"	d
INT32_MIN	sanitizer_common/sanitizer_internal_defs.h	160;"	d
INT64_MAX	sanitizer_common/sanitizer_internal_defs.h	167;"	d
INT64_MAX	sanitizer_common/sanitizer_internal_defs.h	168;"	d
INT64_MIN	sanitizer_common/sanitizer_internal_defs.h	165;"	d
INT64_MIN	sanitizer_common/sanitizer_internal_defs.h	166;"	d
INTERCEPTION_H	interception/interception.h	16;"	d
INTERCEPTION_LINUX_H	interception/interception_linux.h	22;"	d
INTERCEPTION_MAC_H	interception/interception_mac.h	22;"	d
INTERCEPTION_WIN_H	interception/interception_win.h	22;"	d
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(char*, strcat, char *to, const char *from) {  \/\/ NOLINT$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(char*, strchr, const char *str, int c) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(char*, strcpy, char *to, const char *from) {  \/\/ NOLINT$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(char*, strdup, const char *s) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(char*, strncat, char *to, const char *from, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(char*, strncpy, char *to, const char *from, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, atoi, const char *nptr) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, memcmp, const void *a1, const void *a2, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, mlock, const void *addr, uptr len) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, mlockall, int flags) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, munlock, const void *addr, uptr len) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, munlockall, void) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, pthread_create, void *thread,$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, sigaction, int signum, const struct sigaction *act,$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, strcasecmp, const char *s1, const char *s2) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, strcmp, const char *s1, const char *s2) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, strncasecmp, const char *s1, const char *s2, uptr n) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(int, strncmp, const char *s1, const char *s2, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(long long, atoll, const char *nptr) {  \/\/ NOLINT$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(long long, strtoll, const char *nptr,  \/\/ NOLINT$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(long, atol, const char *nptr) {  \/\/ NOLINT$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(long, strtol, const char *nptr,  \/\/ NOLINT$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(uptr, strlen, const char *s) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(uptr, strnlen, const char *s, uptr maxlen) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(void*, memcpy, void *to, const void *from, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(void*, memmove, void *to, const void *from, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(void*, memset, void *block, int c, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(void*, signal, int signum, void *handler) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(void, __cxa_throw, void *a, void *b, void *c) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(void, _longjmp, void *env, int val) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(void, longjmp, void *env, int val) {$/;"	f
INTERCEPTOR	asan/asan_interceptors.cc	/^INTERCEPTOR(void, siglongjmp, void *env, int val) {$/;"	f
INTERCEPTOR	asan/asan_mac.cc	/^INTERCEPTOR(CFStringRef, CFStringCreateCopy, CFAllocatorRef alloc,$/;"	f
INTERCEPTOR	asan/asan_mac.cc	/^INTERCEPTOR(int, pthread_workqueue_additem_np, pthread_workqueue_t workq,$/;"	f
INTERCEPTOR	asan/asan_mac.cc	/^INTERCEPTOR(void, dispatch_after,$/;"	f
INTERCEPTOR	asan/asan_mac.cc	/^INTERCEPTOR(void, dispatch_after_f, dispatch_time_t when,$/;"	f
INTERCEPTOR	asan/asan_mac.cc	/^INTERCEPTOR(void, dispatch_async,$/;"	f
INTERCEPTOR	asan/asan_mac.cc	/^INTERCEPTOR(void, dispatch_group_async,$/;"	f
INTERCEPTOR	asan/asan_mac.cc	/^INTERCEPTOR(void, dispatch_group_async_f, dispatch_group_t group,$/;"	f
INTERCEPTOR	asan/asan_mac.cc	/^INTERCEPTOR(void, dispatch_source_set_cancel_handler,$/;"	f
INTERCEPTOR	asan/asan_mac.cc	/^INTERCEPTOR(void, dispatch_source_set_event_handler,$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(int, mallopt, int cmd, int value) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(int, posix_memalign, void **memptr, uptr alignment, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(struct fake_mallinfo, mallinfo, void) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(uptr, malloc_usable_size, void *ptr) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(void*, calloc, uptr nmemb, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(void*, malloc, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(void*, memalign, uptr boundary, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(void*, pvalloc, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(void*, realloc, void *ptr, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(void*, valloc, uptr size) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(void, cfree, void *ptr) {$/;"	f
INTERCEPTOR	asan/asan_malloc_linux.cc	/^INTERCEPTOR(void, free, void *ptr) {$/;"	f
INTERCEPTOR	asan/asan_malloc_mac.cc	/^INTERCEPTOR(void, __CFInitialize, void) {$/;"	f
INTERCEPTOR	asan/asan_malloc_mac.cc	/^INTERCEPTOR(void, free, void *ptr) {$/;"	f
INTERCEPTOR	interception/interception.h	148;"	d
INTERCEPTOR_ATTRIBUTE	interception/interception.h	102;"	d
INTERCEPTOR_ATTRIBUTE	interception/interception.h	108;"	d
INTERCEPTOR_ATTRIBUTE	interception/interception.h	92;"	d
INTERCEPTOR_ATTRIBUTE	interception/interception.h	98;"	d
INTERCEPTOR_WINAPI	asan/asan_interceptors.cc	/^INTERCEPTOR_WINAPI(DWORD, CreateThread,$/;"	f
INTERCEPTOR_WINAPI	interception/interception.h	156;"	d
INTERCEPT_DISPATCH_X_F_3	asan/asan_mac.cc	339;"	d	file:
INTERCEPT_FUNCTION	interception/interception.h	184;"	d
INTERCEPT_FUNCTION_LINUX	interception/interception_linux.h	30;"	d
INTERCEPT_FUNCTION_MAC	interception/interception_mac.h	46;"	d
INTERCEPT_FUNCTION_WIN	interception/interception_win.h	33;"	d
INTERFACE_ATTRIBUTE	sanitizer_common/sanitizer_internal_defs.h	23;"	d
INTERNAL_FUNCTION	tsan/rtl/tsan_platform_linux.cc	/^    __attribute__((weak)) INTERNAL_FUNCTION;$/;"	m	namespace:__tsan	file:
INTERNAL_FUNCTION	tsan/rtl/tsan_platform_linux.cc	175;"	d	file:
INTERNAL_FUNCTION	tsan/rtl/tsan_platform_linux.cc	177;"	d	file:
INTERPOSE_FUNCTION	asan/dynamic/asan_interceptors_dynamic.cc	27;"	d	file:
INTERPOSE_FUNCTION_2	asan/dynamic/asan_interceptors_dynamic.cc	31;"	d	file:
INT_ENDIANNESS_H	int_endianness.h	17;"	d
INT_LIB_H	int_lib.h	17;"	d
INT_MATH_H	int_math.h	22;"	d
INT_TYPES_H	int_types.h	19;"	d
INT_UTIL_H	int_util.h	20;"	d
IS_LOCK_FREE_1	atomic.c	112;"	d	file:
IS_LOCK_FREE_16	atomic.c	116;"	d	file:
IS_LOCK_FREE_2	atomic.c	113;"	d	file:
IS_LOCK_FREE_4	atomic.c	114;"	d	file:
IS_LOCK_FREE_8	atomic.c	115;"	d	file:
Ident	asan/lit_tests/stack-use-after-return.cc	/^char *Ident(char *x) {$/;"	f
Ident	asan/tests/asan_test_utils.h	/^static T Ident(T t) {$/;"	f
IgnoreCtl	tsan/rtl/tsan_rtl.cc	/^void IgnoreCtl(ThreadState *thr, bool write, bool begin) {$/;"	f	namespace:__tsan
Impl	tsan/tests/rtl/tsan_test_util_linux.cc	/^struct ScopedThread::Impl {$/;"	s	class:ScopedThread	file:
Implementation	Makefile.mk	/^Implementation := Generic$/;"	m
Implementation	arm/Makefile.mk	/^Implementation := Optimized$/;"	m
Implementation	asan/Makefile.mk	/^Implementation := Generic$/;"	m
Implementation	asan/dynamic/Makefile.mk	/^Implementation := Generic$/;"	m
Implementation	i386/Makefile.mk	/^Implementation := Optimized$/;"	m
Implementation	interception/Makefile.mk	/^Implementation := Generic$/;"	m
Implementation	interception/mach_override/Makefile.mk	/^Implementation := Generic$/;"	m
Implementation	ppc/Makefile.mk	/^Implementation := Optimized$/;"	m
Implementation	profile/Makefile.mk	/^Implementation := Generic$/;"	m
Implementation	sanitizer_common/Makefile.mk	/^Implementation := Generic$/;"	m
Implementation	tsan/Makefile.mk	/^Implementation := Generic$/;"	m
Implementation	tsan/rtl/Makefile.mk	/^Implementation := Generic$/;"	m
Implementation	x86_64/Makefile.mk	/^Implementation := Optimized$/;"	m
InRange	asan/asan_allocator.cc	/^  bool InRange(uptr addr) {$/;"	f	struct:__asan::PageGroup
IncrementEpoch	tsan/rtl/tsan_rtl.h	/^  void IncrementEpoch() {$/;"	f	class:__tsan::FastState
Inf	ubsan/lit_tests/Float/cast-overflow.cpp	/^float Inf;$/;"	v
Init	asan/asan_allocator.cc	/^void FakeStack::Init(uptr stack_size) {$/;"	f	class:__asan::FakeStack
Init	asan/asan_thread.cc	/^void AsanThread::Init() {$/;"	f	class:__asan::AsanThread
Init	asan/asan_thread.h	/^  void Init(u32 parent_tid, StackTrace *stack) {$/;"	f	class:__asan::AsanThreadSummary
Init	asan/asan_thread_registry.cc	/^void AsanThreadRegistry::Init() {$/;"	f	class:__asan::AsanThreadRegistry
Init	sanitizer_common/sanitizer_allocator64.h	/^  void Init() {$/;"	f	class:__sanitizer::CombinedAllocator
Init	sanitizer_common/sanitizer_allocator64.h	/^  void Init() {$/;"	f	class:__sanitizer::LargeMmapAllocator
Init	sanitizer_common/sanitizer_allocator64.h	/^  void Init() {$/;"	f	class:__sanitizer::SizeClassAllocator64
Init	sanitizer_common/sanitizer_allocator64.h	/^  void Init() {$/;"	f	struct:__sanitizer::SizeClassAllocatorLocalCache
Init	sanitizer_common/sanitizer_mutex.h	/^  void Init() {$/;"	f	class:__sanitizer::StaticSpinMutex
Init	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^void Init() {$/;"	f	namespace:__anon26
Init	tsan/rtl/tsan_sync.cc	/^void StackTrace::Init(const uptr *pcs, uptr cnt) {$/;"	f	class:__tsan::StackTrace
Init	tsan/tests/rtl/tsan_test_util_linux.cc	/^void Mutex::Init() {$/;"	f	class:Mutex
InitDataSeg	tsan/rtl/tsan_platform_linux.cc	/^static void InitDataSeg() {$/;"	f	namespace:__tsan
InitList	tsan/rtl/tsan_interface_ann.cc	/^static void InitList(ExpectRace *list) {$/;"	f	namespace:__tsan
InitModule	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^static void NOINLINE InitModule(ModuleDesc *m) {$/;"	f	namespace:__tsan
InitSections	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^static SectionDesc *InitSections() {$/;"	f	namespace:__tsan
InitTlsSize	tsan/rtl/tsan_platform_linux.cc	/^static int InitTlsSize() {$/;"	f	namespace:__tsan
Initialize	tsan/rtl/tsan_rtl.cc	/^void Initialize(ThreadState *thr) {$/;"	f	namespace:__tsan
InitializeAllocator	tsan/rtl/tsan_mman.cc	/^void InitializeAllocator() {$/;"	f	namespace:__tsan
InitializeAsanInterceptors	asan/asan_interceptors.cc	/^void InitializeAsanInterceptors() {$/;"	f	namespace:__asan
InitializeDynamicAnnotations	tsan/go/tsan_go.cc	/^void InitializeDynamicAnnotations() {$/;"	f	namespace:__tsan
InitializeDynamicAnnotations	tsan/rtl/tsan_interface_ann.cc	/^void InitializeDynamicAnnotations() {$/;"	f	namespace:__tsan
InitializeExternalSymbolizer	sanitizer_common/sanitizer_symbolizer.cc	/^  bool InitializeExternalSymbolizer(const char *path_to_symbolizer) {$/;"	f	class:__sanitizer::Symbolizer
InitializeExternalSymbolizer	sanitizer_common/sanitizer_symbolizer.cc	/^bool InitializeExternalSymbolizer(const char *path_to_symbolizer) {$/;"	f	namespace:__sanitizer
InitializeFlags	asan/asan_rtl.cc	/^void InitializeFlags(Flags *f, const char *env) {$/;"	f	namespace:__asan
InitializeFlags	tsan/rtl/tsan_flags.cc	/^void InitializeFlags(Flags *f, const char *env) {$/;"	f	namespace:__tsan
InitializeInterceptors	tsan/go/tsan_go.cc	/^void InitializeInterceptors() {$/;"	f	namespace:__tsan
InitializeInterceptors	tsan/rtl/tsan_interceptors.cc	/^void InitializeInterceptors() {$/;"	f	namespace:__tsan
InitializeMacInterceptors	asan/asan_mac.cc	/^void InitializeMacInterceptors() {$/;"	f	namespace:__asan
InitializeMemoryFlush	tsan/rtl/tsan_rtl.cc	/^static void InitializeMemoryFlush() {$/;"	f	namespace:__tsan
InitializeMemoryProfile	tsan/rtl/tsan_rtl.cc	/^static void InitializeMemoryProfile() {$/;"	f	namespace:__tsan
InitializeMutex	tsan/rtl/tsan_mutex.cc	/^void InitializeMutex() {$/;"	f	namespace:__tsan
InitializePlatform	tsan/rtl/tsan_platform_linux.cc	/^const char *InitializePlatform() {$/;"	f	namespace:__tsan
InitializePlatform	tsan/rtl/tsan_platform_mac.cc	/^const char *InitializePlatform() {$/;"	f	namespace:__tsan
InitializeShadowMemory	tsan/rtl/tsan_platform_linux.cc	/^void InitializeShadowMemory() {$/;"	f	namespace:__tsan
InitializeShadowMemory	tsan/rtl/tsan_platform_mac.cc	/^void InitializeShadowMemory() {$/;"	f	namespace:__tsan
InitializeSuppressions	tsan/rtl/tsan_suppressions.cc	/^void InitializeSuppressions() {$/;"	f	namespace:__tsan
InitializeWindowsInterceptors	asan/asan_interceptors.cc	/^void InitializeWindowsInterceptors() {$/;"	f	namespace:__asan
InstallSignalHandlers	asan/asan_posix.cc	/^void InstallSignalHandlers() {$/;"	f	namespace:__asan
InstallSignalHandlers	asan/asan_win.cc	/^void InstallSignalHandlers() {$/;"	f	namespace:__asan
Integer	asan/lit_tests/initialization-nobug.cc	/^  constexpr Integer(int x = 0) : value(x) {}$/;"	f	class:Integer
Integer	asan/lit_tests/initialization-nobug.cc	/^class Integer {$/;"	c	file:
InterceptionFunctions	interception/Makefile.mk	/^InterceptionFunctions := $(Sources:%.cc=%)$/;"	m
InternalAlloc	sanitizer_common/sanitizer_allocator.cc	/^void *InternalAlloc(uptr size) {$/;"	f	namespace:__sanitizer
InternalAllocBlock	sanitizer_common/sanitizer_allocator.cc	/^void *InternalAllocBlock(void *p) {$/;"	f	namespace:__sanitizer
InternalFree	sanitizer_common/sanitizer_allocator.cc	/^void InternalFree(void *addr) {$/;"	f	namespace:__sanitizer
InternalScopedBuffer	sanitizer_common/sanitizer_common.h	/^  explicit InternalScopedBuffer(uptr cnt) {$/;"	f	class:__sanitizer::InternalScopedBuffer
InternalScopedBuffer	sanitizer_common/sanitizer_common.h	/^class InternalScopedBuffer {$/;"	c	namespace:__sanitizer
IntervalsAreSeparate	sanitizer_common/sanitizer_posix.cc	/^static inline bool IntervalsAreSeparate(uptr start1, uptr end1,$/;"	f	namespace:__sanitizer
IntrusiveList	sanitizer_common/sanitizer_list.h	/^struct IntrusiveList {$/;"	s	namespace:__sanitizer
IsASCII	asan/asan_report.cc	/^static bool IsASCII(unsigned char c) {$/;"	f	namespace:__asan
IsAcquireOrder	tsan/rtl/tsan_interface_atomic.cc	/^static bool IsAcquireOrder(morder mo) {$/;"	f	file:
IsAligned	asan/asan_allocator.cc	/^static inline bool IsAligned(uptr a, uptr alignment) {$/;"	f	namespace:__asan
IsAppMem	tsan/rtl/tsan_platform.h	/^static inline bool IsAppMem(uptr mem) {$/;"	f	namespace:__tsan
IsDecimal	sanitizer_common/sanitizer_linux.cc	/^static bool IsDecimal(char c) {$/;"	f	namespace:__sanitizer
IsDigit	sanitizer_common/sanitizer_common.h	/^INLINE bool IsDigit(int c) {$/;"	f	namespace:__sanitizer
IsEmpty	tsan/rtl/tsan_sync.cc	/^bool StackTrace::IsEmpty() const {$/;"	f	class:__tsan::StackTrace
IsExpectedReport	tsan/go/tsan_go.cc	/^bool IsExpectedReport(uptr addr, uptr size) {$/;"	f	namespace:__tsan
IsExpectedReport	tsan/rtl/tsan_interface_ann.cc	/^bool IsExpectedReport(uptr addr, uptr size) {$/;"	f	namespace:__tsan
IsFiredSuppression	tsan/rtl/tsan_rtl_report.cc	/^bool IsFiredSuppression(Context *ctx,$/;"	f	namespace:__tsan
IsGlobalVar	tsan/rtl/tsan_platform_linux.cc	/^bool IsGlobalVar(uptr addr) {$/;"	f	namespace:__tsan
IsLoadOrder	tsan/rtl/tsan_interface_atomic.cc	/^static bool IsLoadOrder(morder mo) {$/;"	f	file:
IsLocked	asan/asan_lock.h	/^  bool IsLocked() { return owner_ != 0; }$/;"	f	class:__asan::AsanLock
IsOnOf	sanitizer_common/sanitizer_linux.cc	/^static bool IsOnOf(char c, char c1, char c2) {$/;"	f	namespace:__sanitizer
IsPowerOfTwo	sanitizer_common/sanitizer_common.h	/^INLINE bool IsPowerOfTwo(uptr x) {$/;"	f	namespace:__sanitizer
IsReleaseOrder	tsan/rtl/tsan_interface_atomic.cc	/^static bool IsReleaseOrder(morder mo) {$/;"	f	file:
IsShadowMem	tsan/rtl/tsan_platform.h	/^static inline bool IsShadowMem(uptr mem) {$/;"	f	namespace:__tsan
IsSorted	sanitizer_common/tests/sanitizer_common_test.cc	/^static bool IsSorted(const uptr *array, uptr n) {$/;"	f	namespace:__sanitizer
IsSpace	sanitizer_common/sanitizer_common.h	/^INLINE bool IsSpace(int c) {$/;"	f	namespace:__sanitizer
IsStoreOrder	tsan/rtl/tsan_interface_atomic.cc	/^static bool IsStoreOrder(morder mo) {$/;"	f	file:
IsSuppressed	tsan/rtl/tsan_suppressions.cc	/^uptr IsSuppressed(ReportType typ, const ReportStack *stack) {$/;"	f	namespace:__tsan
IsValid	asan/asan_allocator.h	/^  bool IsValid() { return chunk_ != 0; }$/;"	f	class:__asan::AsanChunkView
IsValidStrtolBase	asan/asan_interceptors.cc	/^static inline bool IsValidStrtolBase(int base) {$/;"	f	file:
IsZero	tsan/rtl/tsan_rtl.h	/^  bool IsZero() const { return x_ == 0; }$/;"	f	class:__tsan::Shadow
Kind	ubsan/ubsan_diag.h	/^    ArgKind Kind;$/;"	m	struct:__ubsan::Diag::Arg
Kind	ubsan/ubsan_value.h	/^  enum Kind {$/;"	g	class:__ubsan::TypeDescriptor
LE_EQUAL	comparedf2.c	/^    LE_EQUAL     =  0,$/;"	e	enum:LE_RESULT	file:
LE_EQUAL	comparesf2.c	/^    LE_EQUAL     =  0,$/;"	e	enum:LE_RESULT	file:
LE_GREATER	comparedf2.c	/^    LE_GREATER   =  1,$/;"	e	enum:LE_RESULT	file:
LE_GREATER	comparesf2.c	/^    LE_GREATER   =  1,$/;"	e	enum:LE_RESULT	file:
LE_LESS	comparedf2.c	/^    LE_LESS      = -1,$/;"	e	enum:LE_RESULT	file:
LE_LESS	comparesf2.c	/^    LE_LESS      = -1,$/;"	e	enum:LE_RESULT	file:
LE_RESULT	comparedf2.c	/^enum LE_RESULT {$/;"	g	file:
LE_RESULT	comparesf2.c	/^enum LE_RESULT {$/;"	g	file:
LE_UNORDERED	comparedf2.c	/^    LE_UNORDERED =  1$/;"	e	enum:LE_RESULT	file:
LE_UNORDERED	comparesf2.c	/^    LE_UNORDERED =  1$/;"	e	enum:LE_RESULT	file:
LHSType	ubsan/ubsan_handlers.h	/^  const TypeDescriptor &LHSType;$/;"	m	struct:__ubsan::ShiftOutOfBoundsData
LIBC_FREE	sanitizer_common/sanitizer_allocator.cc	22;"	d	file:
LIBC_FREE	sanitizer_common/sanitizer_allocator.cc	26;"	d	file:
LIBC_MALLOC	sanitizer_common/sanitizer_allocator.cc	21;"	d	file:
LIBC_MALLOC	sanitizer_common/sanitizer_allocator.cc	25;"	d	file:
LIKELY	sanitizer_common/sanitizer_internal_defs.h	55;"	d
LINKER_INITIALIZED	sanitizer_common/sanitizer_internal_defs.h	/^enum LinkerInitialized { LINKER_INITIALIZED = 0 };$/;"	e	enum:LinkerInitialized
LLVMSymbolizer	asan/scripts/asan_symbolize.py	/^class LLVMSymbolizer(Symbolizer):$/;"	c
LLVMSymbolizerFactory	asan/scripts/asan_symbolize.py	/^def LLVMSymbolizerFactory(system):$/;"	f
LOCAL_LABEL	assembly.h	27;"	d
LOCAL_LABEL	assembly.h	31;"	d
LOCK_FREE_ACTION	atomic.c	147;"	d	file:
LOCK_FREE_ACTION	atomic.c	151;"	d	file:
LOCK_FREE_ACTION	atomic.c	161;"	d	file:
LOCK_FREE_ACTION	atomic.c	165;"	d	file:
LOCK_FREE_ACTION	atomic.c	179;"	d	file:
LOCK_FREE_ACTION	atomic.c	183;"	d	file:
LOCK_FREE_ACTION	atomic.c	199;"	d	file:
LOCK_FREE_ACTION	atomic.c	204;"	d	file:
LOCK_FREE_CASES	atomic.c	120;"	d	file:
LOCK_READY	asan/asan_win.cc	/^  LOCK_READY = -1,$/;"	e	enum:__asan::LockState	file:
LOCK_UNINITIALIZED	asan/asan_win.cc	/^  LOCK_UNINITIALIZED = 0,$/;"	e	enum:__asan::LockState	file:
LOWORDER	ppc/DD.h	19;"	d
LargeFunction	asan/lit_tests/large_func_test.cc	/^static void LargeFunction(int *x, int zero) {$/;"	f	file:
LargeFunction	asan/tests/asan_test.cc	/^NOINLINE static int LargeFunction(bool do_bad_access) {$/;"	f	file:
LargeMmapAllocator	sanitizer_common/sanitizer_allocator64.h	/^class LargeMmapAllocator {$/;"	c	namespace:__sanitizer
LargeStruct	asan/tests/asan_test.cc	/^struct LargeStruct {$/;"	s	file:
LeftOOBErrorMessage	asan/tests/asan_test.cc	/^static string LeftOOBErrorMessage(int oob_distance) {$/;"	f	file:
LifoPop	asan/asan_allocator.h	/^  void LifoPop() {$/;"	f	class:__asan::FakeFrameLifo
LifoPush	asan/asan_allocator.h	/^  void LifoPush(FakeFrame *node) {$/;"	f	class:__asan::FakeFrameLifo
Line	ubsan/ubsan_value.h	/^  u32 Line;$/;"	m	class:__ubsan::SourceLocation
LinkerInitialized	sanitizer_common/sanitizer_internal_defs.h	/^enum LinkerInitialized { LINKER_INITIALIZED = 0 };$/;"	g
List	sanitizer_common/tests/sanitizer_list_test.cc	/^typedef IntrusiveList<ListItem> List;$/;"	t	namespace:__sanitizer	file:
ListItem	sanitizer_common/tests/sanitizer_list_test.cc	/^struct ListItem {$/;"	s	namespace:__sanitizer	file:
ListOfGlobals	asan/asan_globals.cc	/^struct ListOfGlobals {$/;"	s	namespace:__asan	file:
LoadShadow	tsan/rtl/tsan_rtl.cc	/^static Shadow LoadShadow(u64 *p) {$/;"	f	namespace:__tsan
LoadedModule	sanitizer_common/sanitizer_symbolizer.cc	/^LoadedModule::LoadedModule(const char *module_name, uptr base_address) {$/;"	f	class:__sanitizer::LoadedModule
LoadedModule	sanitizer_common/sanitizer_symbolizer.h	/^class LoadedModule {$/;"	c	namespace:__sanitizer
Loc	ubsan/ubsan_diag.h	/^  const SourceLocation &Loc;$/;"	m	class:__ubsan::Diag
Loc	ubsan/ubsan_handlers.h	/^  SourceLocation Loc;$/;"	m	struct:__ubsan::OverflowData
Loc	ubsan/ubsan_handlers.h	/^  SourceLocation Loc;$/;"	m	struct:__ubsan::ShiftOutOfBoundsData
Loc	ubsan/ubsan_handlers.h	/^  SourceLocation Loc;$/;"	m	struct:__ubsan::TypeMismatchData
Loc	ubsan/ubsan_handlers.h	/^  SourceLocation Loc;$/;"	m	struct:__ubsan::UnreachableData
Loc	ubsan/ubsan_handlers.h	/^  SourceLocation Loc;$/;"	m	struct:__ubsan::VLABoundData
Lock	asan/asan_linux.cc	/^void AsanLock::Lock() {$/;"	f	class:__asan::AsanLock
Lock	asan/asan_mac.cc	/^void AsanLock::Lock() {$/;"	f	class:__asan::AsanLock
Lock	asan/asan_win.cc	/^void AsanLock::Lock() {$/;"	f	class:__asan::AsanLock
Lock	atomic.c	/^typedef _Atomic(uintptr_t) Lock;$/;"	t	file:
Lock	atomic.c	/^typedef struct _usem Lock;$/;"	t	typeref:struct:_usem	file:
Lock	sanitizer_common/sanitizer_mutex.h	/^  void Lock() {$/;"	f	class:__sanitizer::StaticSpinMutex
Lock	tsan/benchmarks/vts_many_threads_bench.cc	/^  void Lock() { pthread_mutex_lock(&m_); }$/;"	f	class:Mutex
Lock	tsan/rtl/tsan_mutex.cc	/^void DeadlockDetector::Lock(MutexType t) {$/;"	f	class:__tsan::DeadlockDetector
Lock	tsan/rtl/tsan_mutex.cc	/^void Mutex::Lock() {$/;"	f	class:__tsan::Mutex
Lock	tsan/rtl/tsan_mutex.h	/^typedef GenericScopedLock<Mutex> Lock;$/;"	t	namespace:__tsan
Lock	tsan/tests/rtl/tsan_test_util_linux.cc	/^void Mutex::Lock() {$/;"	f	class:Mutex
Lock	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Lock(const Mutex &m) {$/;"	f	class:ScopedThread
Lock	tsan/tests/unit/tsan_mutex_test.cc	/^  typedef GenericScopedLock<MutexType> Lock;$/;"	t	class:__tsan::TestData	file:
LockSlow	sanitizer_common/sanitizer_mutex.h	/^  void NOINLINE LockSlow() {$/;"	f	class:__sanitizer::StaticSpinMutex
LockState	asan/asan_win.cc	/^enum LockState {$/;"	g	namespace:__asan	file:
Log2	asan/asan_allocator.cc	/^static inline uptr Log2(uptr x) {$/;"	f	namespace:__asan
LongJmpFunc1	asan/tests/asan_test.cc	/^NOINLINE void LongJmpFunc1(jmp_buf buf) {$/;"	f
LotsOfStackReuse	asan/tests/asan_test.cc	/^static void LotsOfStackReuse() {$/;"	f	file:
LowLevelAllocateCallback	sanitizer_common/sanitizer_common.h	/^typedef void (*LowLevelAllocateCallback)(uptr ptr, uptr size);$/;"	t	namespace:__sanitizer
LowLevelAllocator	sanitizer_common/sanitizer_common.h	/^class LowLevelAllocator {$/;"	c	namespace:__sanitizer
MACH_OVERRIDE	interception/mach_override/mach_override.h	108;"	d
MACOS_VERSION_LEOPARD	asan/asan_mac.h	/^  MACOS_VERSION_LEOPARD,$/;"	e	enum:__anon3
MACOS_VERSION_LION	asan/asan_mac.h	/^  MACOS_VERSION_LION,$/;"	e	enum:__anon3
MACOS_VERSION_MOUNTAIN_LION	asan/asan_mac.h	/^  MACOS_VERSION_MOUNTAIN_LION$/;"	e	enum:__anon3
MACOS_VERSION_SNOW_LEOPARD	asan/asan_mac.h	/^  MACOS_VERSION_SNOW_LEOPARD,$/;"	e	enum:__anon3
MACOS_VERSION_UNKNOWN	asan/asan_mac.h	/^  MACOS_VERSION_UNKNOWN = 0,$/;"	e	enum:__anon3
MAC_INTERPOSE_FUNCTIONS	interception/interception.h	86;"	d
MAP_FAILED	tsan/rtl/tsan_interceptors.cc	/^void *const MAP_FAILED = (void*)-1;$/;"	v
MAP_FIXED	tsan/rtl/tsan_interceptors.cc	/^const int MAP_FIXED = 0x10;$/;"	v
MBlock	tsan/rtl/tsan_rtl.h	/^struct MBlock {$/;"	s	namespace:__tsan
MBlockAtExit	tsan/rtl/tsan_mman.h	/^  MBlockAtExit,$/;"	e	enum:__tsan::MBlockType
MBlockClock	tsan/rtl/tsan_mman.h	/^  MBlockClock,$/;"	e	enum:__tsan::MBlockType
MBlockDeadInfo	tsan/rtl/tsan_mman.h	/^  MBlockDeadInfo,$/;"	e	enum:__tsan::MBlockType
MBlockExpectRace	tsan/rtl/tsan_mman.h	/^  MBlockExpectRace,$/;"	e	enum:__tsan::MBlockType
MBlockFlag	tsan/rtl/tsan_mman.h	/^  MBlockFlag,$/;"	e	enum:__tsan::MBlockType
MBlockRacyAddresses	tsan/rtl/tsan_mman.h	/^  MBlockRacyAddresses,$/;"	e	enum:__tsan::MBlockType
MBlockRacyStacks	tsan/rtl/tsan_mman.h	/^  MBlockRacyStacks,$/;"	e	enum:__tsan::MBlockType
MBlockReport	tsan/rtl/tsan_mman.h	/^  MBlockReport,$/;"	e	enum:__tsan::MBlockType
MBlockReportLoc	tsan/rtl/tsan_mman.h	/^  MBlockReportLoc,$/;"	e	enum:__tsan::MBlockType
MBlockReportMop	tsan/rtl/tsan_mman.h	/^  MBlockReportMop,$/;"	e	enum:__tsan::MBlockType
MBlockReportMutex	tsan/rtl/tsan_mman.h	/^  MBlockReportMutex,$/;"	e	enum:__tsan::MBlockType
MBlockReportStack	tsan/rtl/tsan_mman.h	/^  MBlockReportStack,$/;"	e	enum:__tsan::MBlockType
MBlockReportThread	tsan/rtl/tsan_mman.h	/^  MBlockReportThread,$/;"	e	enum:__tsan::MBlockType
MBlockScopedBuf	tsan/rtl/tsan_mman.h	/^  MBlockScopedBuf,$/;"	e	enum:__tsan::MBlockType
MBlockShadowStack	tsan/rtl/tsan_mman.h	/^  MBlockShadowStack,$/;"	e	enum:__tsan::MBlockType
MBlockSignal	tsan/rtl/tsan_mman.h	/^  MBlockSignal,$/;"	e	enum:__tsan::MBlockType
MBlockStackTrace	tsan/rtl/tsan_mman.h	/^  MBlockStackTrace,$/;"	e	enum:__tsan::MBlockType
MBlockString	tsan/rtl/tsan_mman.h	/^  MBlockString,$/;"	e	enum:__tsan::MBlockType
MBlockSuppression	tsan/rtl/tsan_mman.h	/^  MBlockSuppression,$/;"	e	enum:__tsan::MBlockType
MBlockSync	tsan/rtl/tsan_mman.h	/^  MBlockSync,$/;"	e	enum:__tsan::MBlockType
MBlockThreadContex	tsan/rtl/tsan_mman.h	/^  MBlockThreadContex,$/;"	e	enum:__tsan::MBlockType
MBlockType	tsan/rtl/tsan_mman.h	/^enum MBlockType {$/;"	g	namespace:__tsan
MBlockTypeCount	tsan/rtl/tsan_mman.h	/^  MBlockTypeCount$/;"	e	enum:__tsan::MBlockType
MD5Hash	tsan/rtl/tsan_defs.h	/^struct MD5Hash {$/;"	s	namespace:__tsan
MD5_CTX	tsan/rtl/tsan_md5.cc	/^} MD5_CTX;$/;"	t	namespace:__tsan	typeref:struct:__tsan::__anon29	file:
MD5_Final	tsan/rtl/tsan_md5.cc	/^void MD5_Final(unsigned char *result, MD5_CTX *ctx) {$/;"	f	namespace:__tsan
MD5_Init	tsan/rtl/tsan_md5.cc	/^void MD5_Init(MD5_CTX *ctx) {$/;"	f	namespace:__tsan
MD5_Update	tsan/rtl/tsan_md5.cc	/^void MD5_Update(MD5_CTX *ctx, void *data, ulong_t size) {$/;"	f	namespace:__tsan
MD5_u32plus	tsan/rtl/tsan_md5.cc	/^typedef unsigned int MD5_u32plus;$/;"	t	namespace:__tsan	file:
MEMCPY	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MEMCPY,$/;"	e	enum:Event::Type	file:
MEMSET	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MEMSET$/;"	e	enum:Event::Type	file:
MEM_TO_SHADOW	asan/asan_mapping.h	42;"	d
MUTEX_CREATE	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MUTEX_CREATE,$/;"	e	enum:Event::Type	file:
MUTEX_DESTROY	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MUTEX_DESTROY,$/;"	e	enum:Event::Type	file:
MUTEX_LOCK	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MUTEX_LOCK,$/;"	e	enum:Event::Type	file:
MUTEX_READLOCK	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MUTEX_READLOCK,$/;"	e	enum:Event::Type	file:
MUTEX_READUNLOCK	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MUTEX_READUNLOCK,$/;"	e	enum:Event::Type	file:
MUTEX_TRYLOCK	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MUTEX_TRYLOCK,$/;"	e	enum:Event::Type	file:
MUTEX_TRYREADLOCK	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MUTEX_TRYREADLOCK,$/;"	e	enum:Event::Type	file:
MUTEX_UNLOCK	tsan/tests/rtl/tsan_test_util_linux.cc	/^    MUTEX_UNLOCK,$/;"	e	enum:Event::Type	file:
MainThread	tsan/tests/rtl/tsan_test_util.h	/^  MainThread()$/;"	f	class:MainThread
MainThread	tsan/tests/rtl/tsan_test_util.h	/^class MainThread : public ScopedThread {$/;"	c
MakeShadowValid	asan/tests/asan_noinst_test.cc	/^static void MakeShadowValid(bool *shadow, int length, int granularity) {$/;"	f	file:
MallocAndMemsetString	asan/tests/asan_test.cc	/^static inline char* MallocAndMemsetString(size_t size) {$/;"	f	file:
MallocAndMemsetString	asan/tests/asan_test.cc	/^static inline char* MallocAndMemsetString(size_t size, char ch) {$/;"	f	file:
MallocDebug	asan/asan_malloc_linux.cc	/^struct MallocDebug {$/;"	s	file:
MallocInfo	asan/asan_allocator.cc	/^  explicit MallocInfo(LinkerInitialized x) : mu_(x) { }$/;"	f	class:__asan::MallocInfo
MallocInfo	asan/asan_allocator.cc	/^class MallocInfo {$/;"	c	namespace:__asan	file:
MallocIntrospectionLockForker	asan/tests/asan_test.cc	/^void *MallocIntrospectionLockForker(void *_) {$/;"	f
MallocIntrospectionLockWorker	asan/tests/asan_test.cc	/^void *MallocIntrospectionLockWorker(void *_) {$/;"	f
MallocStress	asan/tests/asan_noinst_test.cc	/^static void MallocStress(size_t n) {$/;"	f	file:
MallocStress	asan/tests/asan_test.cc	/^static void MallocStress(size_t n) {$/;"	f	file:
ManyAccessFunc	asan/tests/asan_benchmarks_test.cc	/^static void ManyAccessFunc(T *x, size_t n_elements, size_t n_iter) {$/;"	f	file:
ManyThreadsWithStatsWorker	asan/tests/asan_noinst_test.cc	/^void *ManyThreadsWithStatsWorker(void *arg) {$/;"	f
ManyThreadsWorker	asan/tests/asan_test.cc	/^void *ManyThreadsWorker(void *a) {$/;"	f
MapFileToMemory	sanitizer_common/sanitizer_posix.cc	/^void *MapFileToMemory(const char *file_name, uptr *buff_size) {$/;"	f	namespace:__sanitizer
MapFileToMemory	sanitizer_common/sanitizer_win.cc	/^void *MapFileToMemory(const char *file_name, uptr *buff_size) {$/;"	f	namespace:__sanitizer
MarkAsFreed	tsan/rtl/tsan_rtl.h	/^  void MarkAsFreed() {$/;"	f	class:__tsan::Shadow
Max	sanitizer_common/sanitizer_common.h	/^template<class T> T Max(T a, T b) { return a > b ? a : b; }$/;"	f	namespace:__sanitizer
MaxArgs	ubsan/ubsan_diag.h	/^  static const unsigned MaxArgs = 5;$/;"	m	class:__ubsan::Diag
MaxCached	sanitizer_common/sanitizer_allocator64.h	/^  static uptr MaxCached(uptr class_id) {$/;"	f	class:__sanitizer::DefaultSizeClassMap
MaybeInstallSigaction	asan/asan_posix.cc	/^static void MaybeInstallSigaction(int signum,$/;"	f	namespace:__asan
MaybeRealStrnlen	asan/asan_interceptors.cc	/^static inline uptr MaybeRealStrnlen(const char *s, uptr maxlen) {$/;"	f	namespace:__asan
MaybeReexec	asan/asan_linux.cc	/^void MaybeReexec() {$/;"	f	namespace:__asan
MaybeReexec	asan/asan_mac.cc	/^void MaybeReexec() {$/;"	f	namespace:__asan
MaybeReexec	asan/asan_win.cc	/^void MaybeReexec() {$/;"	f	namespace:__asan
MaybeReportThreadLeak	tsan/rtl/tsan_rtl_thread.cc	/^static void MaybeReportThreadLeak(ThreadContext *tctx) {$/;"	f	namespace:__tsan
MemCpyWrapper	asan/tests/asan_test.cc	/^class MemCpyWrapper {$/;"	c	file:
MemLoc	tsan/tests/rtl/tsan_test_util.h	/^  explicit MemLoc(void *const real_addr) : loc_(real_addr) { }$/;"	f	class:MemLoc
MemLoc	tsan/tests/rtl/tsan_test_util.h	/^class MemLoc {$/;"	c
MemLoc	tsan/tests/rtl/tsan_test_util_linux.cc	/^MemLoc::MemLoc(int offset_from_aligned)$/;"	f	class:MemLoc
MemMoveWrapper	asan/tests/asan_test.cc	/^class MemMoveWrapper {$/;"	c	file:
MemSetOOBTestTemplate	asan/tests/asan_test.cc	/^void MemSetOOBTestTemplate(size_t length) {$/;"	f
MemToShadow	asan/asan_mapping.h	/^static inline uptr MemToShadow(uptr p) {$/;"	f	namespace:__asan
MemToShadow	tsan/rtl/tsan_platform.h	42;"	d
MemToShadow	tsan/rtl/tsan_platform.h	45;"	d
MemTransferOOBTestTemplate	asan/tests/asan_test.cc	/^void MemTransferOOBTestTemplate(size_t length) {$/;"	f
Memcpy	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Memcpy(void *dst, const void *src, int size,$/;"	f	class:ScopedThread
MemoryAccess	tsan/rtl/tsan_rtl.cc	/^void MemoryAccess(ThreadState *thr, uptr pc, uptr addr,$/;"	f	namespace:__tsan
MemoryAccessImpl	tsan/rtl/tsan_rtl.cc	/^void MemoryAccessImpl(ThreadState *thr, uptr addr,$/;"	f	namespace:__tsan
MemoryAccessRange	tsan/rtl/tsan_rtl_thread.cc	/^void MemoryAccessRange(ThreadState *thr, uptr pc, uptr addr,$/;"	f	namespace:__tsan
MemoryFlushThread	tsan/rtl/tsan_rtl.cc	/^static void MemoryFlushThread(void *arg) {$/;"	f	namespace:__tsan
MemoryMappingLayout	sanitizer_common/sanitizer_linux.cc	/^MemoryMappingLayout::MemoryMappingLayout() {$/;"	f	class:__sanitizer::MemoryMappingLayout
MemoryMappingLayout	sanitizer_common/sanitizer_mac.cc	/^MemoryMappingLayout::MemoryMappingLayout() {$/;"	f	class:__sanitizer::MemoryMappingLayout
MemoryMappingLayout	sanitizer_common/sanitizer_procmaps.h	/^  MemoryMappingLayout() {}$/;"	f	class:__sanitizer::MemoryMappingLayout
MemoryMappingLayout	sanitizer_common/sanitizer_procmaps.h	/^class MemoryMappingLayout {$/;"	c	namespace:__sanitizer
MemoryProfileThread	tsan/rtl/tsan_rtl.cc	/^static void MemoryProfileThread(void *arg) {$/;"	f	namespace:__tsan
MemoryRangeFreed	tsan/rtl/tsan_rtl.cc	/^void MemoryRangeFreed(ThreadState *thr, uptr pc, uptr addr, uptr size) {$/;"	f	namespace:__tsan
MemoryRangeImitateWrite	tsan/rtl/tsan_rtl.cc	/^void MemoryRangeImitateWrite(ThreadState *thr, uptr pc, uptr addr, uptr size) {$/;"	f	namespace:__tsan
MemoryRangeIsAvailable	sanitizer_common/sanitizer_posix.cc	/^bool MemoryRangeIsAvailable(uptr range_start, uptr range_end) {$/;"	f	namespace:__sanitizer
MemoryRangeIsAvailable	sanitizer_common/sanitizer_win.cc	/^bool MemoryRangeIsAvailable(uptr range_start, uptr range_end) {$/;"	f	namespace:__sanitizer
MemoryRangeSet	tsan/rtl/tsan_rtl.cc	/^static void MemoryRangeSet(ThreadState *thr, uptr pc, uptr addr, uptr size,$/;"	f	namespace:__tsan
MemoryRead1Byte	tsan/rtl/tsan_rtl_thread.cc	/^void MemoryRead1Byte(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
MemoryRead8Byte	tsan/rtl/tsan_rtl_thread.cc	/^void MemoryRead8Byte(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
MemoryResetRange	tsan/rtl/tsan_rtl.cc	/^void MemoryResetRange(ThreadState *thr, uptr pc, uptr addr, uptr size) {$/;"	f	namespace:__tsan
MemoryWrite1Byte	tsan/rtl/tsan_rtl_thread.cc	/^void MemoryWrite1Byte(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
MemoryWrite8Byte	tsan/rtl/tsan_rtl_thread.cc	/^void MemoryWrite8Byte(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
Memset	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Memset(void *dst, int val, int size,$/;"	f	class:ScopedThread
Message	ubsan/ubsan_diag.h	/^  const char *Message;$/;"	m	class:__ubsan::Diag
Min	sanitizer_common/sanitizer_common.h	/^template<class T> T Min(T a, T b) { return a < b ? a : b; }$/;"	f	namespace:__sanitizer
MlockIsUnsupported	asan/asan_interceptors.cc	/^static void MlockIsUnsupported() {$/;"	f	file:
MmapFixedNoReserve	sanitizer_common/sanitizer_posix.cc	/^void *MmapFixedNoReserve(uptr fixed_addr, uptr size) {$/;"	f	namespace:__sanitizer
MmapFixedNoReserve	sanitizer_common/sanitizer_win.cc	/^void *MmapFixedNoReserve(uptr fixed_addr, uptr size) {$/;"	f	namespace:__sanitizer
MmapNewPagesAndPoisonShadow	asan/asan_allocator.cc	/^static u8 *MmapNewPagesAndPoisonShadow(uptr size) {$/;"	f	namespace:__asan
MmapOrDie	sanitizer_common/sanitizer_posix.cc	/^void *MmapOrDie(uptr size, const char *mem_type) {$/;"	f	namespace:__sanitizer
MmapOrDie	sanitizer_common/sanitizer_win.cc	/^void *MmapOrDie(uptr size, const char *mem_type) {$/;"	f	namespace:__sanitizer
ModuleDesc	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^struct ModuleDesc {$/;"	s	namespace:__tsan	file:
ModuleName	Makefile.mk	/^ModuleName := builtins$/;"	m
ModuleName	arm/Makefile.mk	/^ModuleName := builtins$/;"	m
ModuleName	asan/Makefile.mk	/^ModuleName := asan$/;"	m
ModuleName	asan/dynamic/Makefile.mk	/^ModuleName := asan_dynamic$/;"	m
ModuleName	i386/Makefile.mk	/^ModuleName := builtins$/;"	m
ModuleName	interception/Makefile.mk	/^ModuleName := interception$/;"	m
ModuleName	interception/mach_override/Makefile.mk	/^ModuleName := interception$/;"	m
ModuleName	ppc/Makefile.mk	/^ModuleName := builtins$/;"	m
ModuleName	profile/Makefile.mk	/^ModuleName := profile$/;"	m
ModuleName	sanitizer_common/Makefile.mk	/^ModuleName := sanitizer_common$/;"	m
ModuleName	tsan/Makefile.mk	/^ModuleName := tsan$/;"	m
ModuleName	tsan/rtl/Makefile.mk	/^ModuleName := tsan$/;"	m
ModuleName	x86_64/Makefile.mk	/^ModuleName := builtins$/;"	m
Mprotect	sanitizer_common/sanitizer_posix.cc	/^void *Mprotect(uptr fixed_addr, uptr size) {$/;"	f	namespace:__sanitizer
Mprotect	sanitizer_common/sanitizer_win.cc	/^void *Mprotect(uptr fixed_addr, uptr size) {$/;"	f	namespace:__sanitizer
Mtx	tsan/lit_tests/race_on_mutex.c	/^pthread_mutex_t Mtx;$/;"	v
Mutex	tsan/benchmarks/vts_many_threads_bench.cc	/^  Mutex()  { pthread_mutex_init(&m_, NULL); }$/;"	f	class:Mutex
Mutex	tsan/benchmarks/vts_many_threads_bench.cc	/^class __attribute__((aligned(64))) Mutex {$/;"	c	file:
Mutex	tsan/rtl/tsan_mutex.cc	/^Mutex::Mutex(MutexType type, StatType stat_type) {$/;"	f	class:__tsan::Mutex
Mutex	tsan/rtl/tsan_mutex.h	/^class Mutex {$/;"	c	namespace:__tsan
Mutex	tsan/tests/rtl/tsan_test_util.h	/^class Mutex {$/;"	c
Mutex	tsan/tests/rtl/tsan_test_util_linux.cc	/^Mutex::Mutex(Type type)$/;"	f	class:Mutex
MutexCreate	tsan/rtl/tsan_rtl_mutex.cc	/^void MutexCreate(ThreadState *thr, uptr pc, uptr addr,$/;"	f	namespace:__tsan
MutexDestroy	tsan/rtl/tsan_rtl_mutex.cc	/^void MutexDestroy(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
MutexLock	tsan/rtl/tsan_rtl_mutex.cc	/^void MutexLock(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
MutexReadLock	tsan/rtl/tsan_rtl_mutex.cc	/^void MutexReadLock(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
MutexReadOrWriteUnlock	tsan/rtl/tsan_rtl_mutex.cc	/^void MutexReadOrWriteUnlock(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
MutexReadUnlock	tsan/rtl/tsan_rtl_mutex.cc	/^void MutexReadUnlock(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
MutexType	tsan/rtl/tsan_mutex.h	/^enum MutexType {$/;"	g	namespace:__tsan
MutexTypeAnnotations	tsan/rtl/tsan_mutex.h	/^  MutexTypeAnnotations,$/;"	e	enum:__tsan::MutexType
MutexTypeAtExit	tsan/rtl/tsan_mutex.h	/^  MutexTypeAtExit,$/;"	e	enum:__tsan::MutexType
MutexTypeCount	tsan/rtl/tsan_mutex.h	/^  MutexTypeCount$/;"	e	enum:__tsan::MutexType
MutexTypeInvalid	tsan/rtl/tsan_mutex.h	/^  MutexTypeInvalid,$/;"	e	enum:__tsan::MutexType
MutexTypeLeaf	tsan/rtl/tsan_mutex.cc	/^const MutexType MutexTypeLeaf = (MutexType)-1;$/;"	m	namespace:__tsan	file:
MutexTypeReport	tsan/rtl/tsan_mutex.h	/^  MutexTypeReport,$/;"	e	enum:__tsan::MutexType
MutexTypeSlab	tsan/rtl/tsan_mutex.h	/^  MutexTypeSlab,$/;"	e	enum:__tsan::MutexType
MutexTypeSyncTab	tsan/rtl/tsan_mutex.h	/^  MutexTypeSyncTab,$/;"	e	enum:__tsan::MutexType
MutexTypeSyncVar	tsan/rtl/tsan_mutex.h	/^  MutexTypeSyncVar,$/;"	e	enum:__tsan::MutexType
MutexTypeThreads	tsan/rtl/tsan_mutex.h	/^  MutexTypeThreads,$/;"	e	enum:__tsan::MutexType
MutexTypeTrace	tsan/rtl/tsan_mutex.h	/^  MutexTypeTrace,$/;"	e	enum:__tsan::MutexType
MutexUnlock	tsan/rtl/tsan_rtl_mutex.cc	/^void MutexUnlock(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
MyDeathCallback	asan/tests/asan_noinst_test.cc	/^static void MyDeathCallback() {$/;"	f	file:
MyMatch	tsan/tests/unit/tsan_suppressions_test.cc	/^static bool MyMatch(const char *templ, const char *func) {$/;"	f	namespace:__tsan
MySleep	tsan/lit_tests/sleep_sync.cc	/^void MySleep() {$/;"	f
N	asan/tests/asan_racy_double_free_test.cc	/^const int N = 1000;$/;"	v
N	tsan/lit_tests/suppress_same_stacks.cc	/^volatile int N;  \/\/ Prevent loop unrolling.$/;"	v
NOINLINE	asan/tests/asan_test_utils.h	32;"	d
NOINLINE	asan/tests/asan_test_utils.h	35;"	d
NOINLINE	sanitizer_common/sanitizer_internal_defs.h	34;"	d
NORETURN	sanitizer_common/sanitizer_internal_defs.h	35;"	d
NOTHROW	sanitizer_common/sanitizer_internal_defs.h	37;"	d
NOT_HERE_BEFORE_10_6	apple_versioning.c	15;"	d	file:
NOT_HERE_BEFORE_10_6	apple_versioning.c	17;"	d	file:
NOT_HERE_BEFORE_10_6	apple_versioning.c	25;"	d	file:
NOT_HERE_UNTIL_AFTER_4_3	apple_versioning.c	147;"	d	file:
NaN	ubsan/lit_tests/Float/cast-overflow.cpp	/^float NaN;$/;"	v
NewReportStackEntry	tsan/go/tsan_go.cc	/^ReportStack *NewReportStackEntry(uptr addr) {$/;"	f	namespace:__tsan
NewReportStackEntry	tsan/rtl/tsan_symbolize.cc	/^ReportStack *NewReportStackEntry(uptr addr) {$/;"	f	namespace:__tsan
NewReportStackEntry	tsan/rtl/tsan_symbolize.cc	/^static ReportStack *NewReportStackEntry(const AddressInfo &info) {$/;"	f	namespace:__tsan
Next	sanitizer_common/sanitizer_linux.cc	/^bool MemoryMappingLayout::Next(uptr *start, uptr *end, uptr *offset,$/;"	f	class:__sanitizer::MemoryMappingLayout
Next	sanitizer_common/sanitizer_mac.cc	/^bool MemoryMappingLayout::Next(uptr *start, uptr *end, uptr *offset,$/;"	f	class:__sanitizer::MemoryMappingLayout
NextSegmentLoad	sanitizer_common/sanitizer_mac.cc	/^bool MemoryMappingLayout::NextSegmentLoad($/;"	f	class:__sanitizer::MemoryMappingLayout
NoAddressSafety	asan/tests/asan_test.cc	/^static void NoAddressSafety() {$/;"	f	file:
Normal	tsan/tests/rtl/tsan_test_util.h	/^  enum Type { Normal, Spin, RW };$/;"	e	enum:Mutex::Type
NullDeref	asan/lit_tests/null_deref.cc	/^static void NullDeref(int *ptr) {$/;"	f	file:
NumArgs	ubsan/ubsan_diag.h	/^  unsigned NumArgs;$/;"	m	class:__ubsan::Diag
OOBTest	asan/tests/asan_test.cc	/^void OOBTest() {$/;"	f
OPERATOR_DELETE_BODY	asan/asan_new_delete.cc	49;"	d	file:
OPERATOR_DELETE_BODY	tsan/rtl/tsan_interceptors.cc	360;"	d	file:
OPERATOR_NEW_BODY	asan/asan_new_delete.cc	34;"	d	file:
OPERATOR_NEW_BODY	tsan/rtl/tsan_interceptors.cc	338;"	d	file:
OPTIMISED_CASE	atomic.c	224;"	d	file:
OPTIMISED_CASE	atomic.c	235;"	d	file:
OPTIMISED_CASE	atomic.c	237;"	d	file:
OPTIMISED_CASE	atomic.c	250;"	d	file:
OPTIMISED_CASE	atomic.c	252;"	d	file:
OPTIMISED_CASE	atomic.c	264;"	d	file:
OPTIMISED_CASE	atomic.c	266;"	d	file:
OPTIMISED_CASE	atomic.c	284;"	d	file:
OPTIMISED_CASE	atomic.c	301;"	d	file:
OPTIMISED_CASE	atomic.c	303;"	d	file:
OPTIMISED_CASE	atomic.c	304;"	d	file:
OPTIMISED_CASE	atomic.c	306;"	d	file:
OPTIMISED_CASE	atomic.c	307;"	d	file:
OPTIMISED_CASE	atomic.c	309;"	d	file:
OPTIMISED_CASE	atomic.c	310;"	d	file:
OPTIMISED_CASE	atomic.c	312;"	d	file:
OPTIMISED_CASE	atomic.c	313;"	d	file:
OPTIMISED_CASE	atomic.c	315;"	d	file:
OPTIMISED_CASES	atomic.c	216;"	d	file:
OVERRIDE_FUNCTION_MAC	interception/interception_mac.h	41;"	d
ObjNames	Makefile.mk	/^ObjNames := $(Sources:%.c=%.o)$/;"	m
ObjNames	arm/Makefile.mk	/^ObjNames := $(Sources:%.c=%.o) $(AsmSources:%.S=%.o)$/;"	m
ObjNames	asan/Makefile.mk	/^ObjNames := $(Sources:%.cc=%.o)$/;"	m
ObjNames	asan/dynamic/Makefile.mk	/^ObjNames := $(Sources:%.cc=%.o)$/;"	m
ObjNames	i386/Makefile.mk	/^ObjNames := $(Sources:%.c=%.o) $(AsmSources:%.S=%.o)$/;"	m
ObjNames	interception/Makefile.mk	/^ObjNames := $(Sources:%.cc=%.o)$/;"	m
ObjNames	interception/mach_override/Makefile.mk	/^ObjNames := $(Sources:%.c=%.o)$/;"	m
ObjNames	ppc/Makefile.mk	/^ObjNames := $(Sources:%.c=%.o) $(AsmSources:%.S=%.o)$/;"	m
ObjNames	profile/Makefile.mk	/^ObjNames := $(Sources:%.c=%.o)$/;"	m
ObjNames	sanitizer_common/Makefile.mk	/^ObjNames := $(Sources:%.cc=%.o)$/;"	m
ObjNames	tsan/Makefile.mk	/^ObjNames :=$/;"	m
ObjNames	tsan/rtl/Makefile.mk	/^ObjNames := $(Sources:%.cc=%.o) $(AsmSources:%.S=%.o)$/;"	m
ObjNames	x86_64/Makefile.mk	/^ObjNames := $(Sources:%.c=%.o) $(AsmSources:%.S=%.o)$/;"	m
ObtainCurrent	tsan/rtl/tsan_sync.cc	/^void StackTrace::ObtainCurrent(ThreadState *thr, uptr toppc) {$/;"	f	class:__tsan::StackTrace
OldIsInSameSynchEpoch	tsan/rtl/tsan_rtl.cc	/^static inline bool OldIsInSameSynchEpoch(Shadow old, ThreadState *thr) {$/;"	f	namespace:__tsan
OldIsRWStronger	tsan/rtl/tsan_rtl.cc	/^static inline bool OldIsRWStronger(Shadow old, int kAccessIsWrite) {$/;"	f	namespace:__tsan
OldIsRWWeaker	tsan/rtl/tsan_rtl.cc	/^static inline bool OldIsRWWeaker(Shadow old, int kAccessIsWrite) {$/;"	f	namespace:__tsan
OnFree	asan/asan_allocator.cc	/^void FakeStack::OnFree(uptr ptr, uptr size, uptr real_stack) {$/;"	f	class:__asan::FakeStack
OnLowLevelAllocate	asan/asan_rtl.cc	/^static void OnLowLevelAllocate(uptr ptr, uptr size) {$/;"	f	namespace:__asan
OnReport	tsan/rtl/tsan_rtl_report.cc	/^bool WEAK OnReport(const ReportDesc *rep, bool suppressed) {$/;"	f	namespace:__tsan
OnReport	tsan/tests/rtl/tsan_test_util_linux.cc	/^bool OnReport(const ReportDesc *rep, bool suppressed) {$/;"	f	namespace:__tsan
OnlyArchs	arm/Makefile.mk	/^OnlyArchs := armv5 armv6 armv7 armv7f armv7k armv7s$/;"	m
OnlyArchs	i386/Makefile.mk	/^OnlyArchs := i386$/;"	m
OnlyArchs	ppc/Makefile.mk	/^OnlyArchs := ppc$/;"	m
OnlyArchs	x86_64/Makefile.mk	/^OnlyArchs := x86_64$/;"	m
OutputReport	tsan/rtl/tsan_rtl_report.cc	/^bool OutputReport(Context *ctx,$/;"	f	namespace:__tsan
OverflowData	ubsan/ubsan_handlers.h	/^struct OverflowData {$/;"	s	namespace:__ubsan
OverlapErrorMessage	asan/tests/asan_test.cc	/^static string OverlapErrorMessage(const string &func) {$/;"	f	file:
OverrideFlags	tsan/rtl/tsan_flags.cc	/^void WEAK OverrideFlags(Flags *f) {$/;"	f	namespace:__tsan
OverrideFunction	interception/interception_mac.cc	/^bool OverrideFunction(uptr old_func, uptr new_func, uptr *orig_old_func) {$/;"	f	namespace:__interception
OverrideFunction	interception/interception_win.cc	/^bool OverrideFunction(uptr old_func, uptr new_func, uptr *orig_old_func) {$/;"	f	namespace:__interception
P	tsan/lit_tests/static_init1.cc	/^struct P {$/;"	s	file:
PAGE_EXECUTE_READWRITE	asan/asan_malloc_win.cc	/^const int PAGE_EXECUTE_READWRITE = 0x40;$/;"	v
PLATFORM_HAS_DIFFERENT_MEMCPY_AND_MEMMOVE	asan/asan_internal.h	141;"	d
PLATFORM_HAS_DIFFERENT_MEMCPY_AND_MEMMOVE	asan/asan_internal.h	144;"	d
PRINT_CURRENT_STACK	asan/asan_stack.h	48;"	d
PTHREAD_BARRIER_SERIAL_THREAD	tsan/rtl/tsan_interceptors.cc	/^const int PTHREAD_BARRIER_SERIAL_THREAD = -1;$/;"	v
PTHREAD_MUTEX_RECURSIVE	tsan/rtl/tsan_interceptors.cc	/^const int PTHREAD_MUTEX_RECURSIVE = 1;$/;"	v
PTHREAD_MUTEX_RECURSIVE_NP	tsan/rtl/tsan_interceptors.cc	/^const int PTHREAD_MUTEX_RECURSIVE_NP = 1;$/;"	v
PTR_TO_REAL	interception/interception.h	115;"	d
PageGroup	asan/asan_allocator.cc	/^struct PageGroup {$/;"	s	namespace:__asan	file:
ParseFlag	sanitizer_common/sanitizer_flags.cc	/^void ParseFlag(const char *env, bool *flag, const char *name) {$/;"	f	namespace:__sanitizer
ParseFlag	sanitizer_common/sanitizer_flags.cc	/^void ParseFlag(const char *env, const char **flag, const char *name) {$/;"	f	namespace:__sanitizer
ParseFlag	sanitizer_common/sanitizer_flags.cc	/^void ParseFlag(const char *env, int *flag, const char *name) {$/;"	f	namespace:__sanitizer
ParseFlagsFromString	asan/asan_rtl.cc	/^static void ParseFlagsFromString(Flags *f, const char *str) {$/;"	f	namespace:__asan
ParseHex	sanitizer_common/sanitizer_linux.cc	/^static uptr ParseHex(char **str) {$/;"	f	namespace:__sanitizer
Part	tsan/rtl/tsan_sync.cc	/^SyncTab::Part::Part()$/;"	f	class:__tsan::SyncTab::Part
Part	tsan/rtl/tsan_sync.h	/^  struct Part {$/;"	s	class:__tsan::SyncTab
PartIdx	tsan/rtl/tsan_sync.cc	/^int SyncTab::PartIdx(uptr addr) {$/;"	f	class:__tsan::SyncTab
PlatformHasDifferentMemcpyAndMemmove	asan/asan_mac.cc	/^bool PlatformHasDifferentMemcpyAndMemmove() {$/;"	f	namespace:__asan
Pointer	ubsan/ubsan_diag.h	/^      const void *Pointer;$/;"	m	union:__ubsan::Diag::Arg::__anon31
PointerIsMine	sanitizer_common/sanitizer_allocator64.h	/^  bool PointerIsMine(void *p) {$/;"	f	class:__sanitizer::CombinedAllocator
PointerIsMine	sanitizer_common/sanitizer_allocator64.h	/^  bool PointerIsMine(void *p) {$/;"	f	class:__sanitizer::LargeMmapAllocator
PointerIsMine	sanitizer_common/sanitizer_allocator64.h	/^  static bool PointerIsMine(void *p) {$/;"	f	class:__sanitizer::SizeClassAllocator64
PointerToCallAtoi	asan/tests/asan_test.cc	/^typedef void(*PointerToCallAtoi)(const char*);$/;"	t	file:
PointerToCallStrtol	asan/tests/asan_test.cc	/^typedef void(*PointerToCallStrtol)(const char*, char**, int);$/;"	t	file:
PointerToMemSet	asan/tests/asan_test.cc	/^typedef void*(*PointerToMemSet)(void*, int, size_t);$/;"	t	file:
PointerToMemTransfer	asan/tests/asan_test.cc	/^typedef void*(*PointerToMemTransfer)(void*, const void*, size_t);$/;"	t	file:
PointerToStrChr1	asan/tests/asan_test.cc	/^typedef char*(*PointerToStrChr1)(const char*, int);$/;"	t	file:
PointerToStrChr2	asan/tests/asan_test.cc	/^typedef char*(*PointerToStrChr2)(char*, int);$/;"	t	file:
PointerToStrCmp	asan/tests/asan_test.cc	/^typedef int(*PointerToStrCmp)(const char*, const char*);$/;"	t	file:
PointerToStrNCmp	asan/tests/asan_test.cc	/^typedef int(*PointerToStrNCmp)(const char*, const char*, size_t);$/;"	t	file:
PoisonGlobalAndRedzones	asan/asan_globals.cc	/^static void PoisonGlobalAndRedzones(const Global *g) {$/;"	f	namespace:__asan
PoisonHeapPartialRightRedzone	asan/asan_allocator.cc	/^static void PoisonHeapPartialRightRedzone(uptr mem, uptr size) {$/;"	f	namespace:__asan
PoisonRedZones	asan/asan_globals.cc	/^void PoisonRedZones(const Global &g)  {$/;"	f	namespace:__asan
PoisonShadow	asan/asan_poisoning.cc	/^void PoisonShadow(uptr addr, uptr size, u8 value) {$/;"	f	namespace:__asan
PoisonShadowPartialRightRedzone	asan/asan_poisoning.cc	/^void PoisonShadowPartialRightRedzone(uptr addr,$/;"	f	namespace:__asan
Pop	asan/asan_allocator.cc	/^AsanChunk *AsanChunkFifoList::Pop() {$/;"	f	class:__asan::AsanChunkFifoList
PopulateFreeList	sanitizer_common/sanitizer_allocator64.h	/^  void PopulateFreeList(uptr class_id, RegionInfo *region) {$/;"	f	class:__sanitizer::SizeClassAllocator64
PrimaryAllocator	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^  DefaultSizeClassMap> PrimaryAllocator;$/;"	t	namespace:__anon26	file:
PrimaryAllocator	tsan/rtl/tsan_rtl.h	/^    DefaultSizeClassMap> PrimaryAllocator;$/;"	t	namespace:__tsan
Print	asan/asan_stats.cc	/^void AsanStats::Print() {$/;"	f	class:__asan::AsanStats
PrintAccumulatedStats	asan/asan_stats.cc	/^static void PrintAccumulatedStats() {$/;"	f	namespace:__asan
PrintBytes	asan/asan_report.cc	/^static void PrintBytes(const char *before, uptr *a) {$/;"	f	namespace:__asan
PrintCurrentStack	tsan/rtl/tsan_rtl_report.cc	/^void PrintCurrentStack(ThreadState *thr, uptr pc) {$/;"	f	namespace:__tsan
PrintGlobalNameIfASCII	asan/asan_report.cc	/^static void PrintGlobalNameIfASCII(const __asan_global &g) {$/;"	f	namespace:__asan
PrintHeader	tsan/rtl/tsan_report.cc	/^static void PrintHeader(ReportType typ) {$/;"	f	namespace:__tsan
PrintHex	ubsan/ubsan_diag.cc	/^static void PrintHex(UIntMax Val) {$/;"	f	file:
PrintLocation	tsan/rtl/tsan_report.cc	/^static void PrintLocation(const ReportLocation *loc) {$/;"	f	namespace:__tsan
PrintMallocStatsArray	asan/asan_stats.cc	/^static void PrintMallocStatsArray(const char *prefix,$/;"	f	namespace:__asan
PrintModuleAndOffset	sanitizer_common/sanitizer_stacktrace.cc	/^static void PrintModuleAndOffset(const char *module, uptr offset,$/;"	f	namespace:__sanitizer
PrintMop	tsan/rtl/tsan_report.cc	/^static void PrintMop(const ReportMop *mop, bool first) {$/;"	f	namespace:__tsan
PrintMutex	tsan/rtl/tsan_report.cc	/^static void PrintMutex(const ReportMutex *rm) {$/;"	f	namespace:__tsan
PrintReport	tsan/rtl/tsan_report.cc	/^void PrintReport(const ReportDesc *rep) {$/;"	f	namespace:__tsan
PrintRes	tsan/check_analyze.sh	/^PrintRes() {$/;"	f
PrintShadow	asan/tests/asan_noinst_test.cc	/^static void PrintShadow(const char *tag, uptr ptr, size_t size) {$/;"	f	file:
PrintShadowMemoryForAddress	asan/asan_report.cc	/^static void PrintShadowMemoryForAddress(uptr addr) {$/;"	f	namespace:__asan
PrintSleep	tsan/rtl/tsan_report.cc	/^static void PrintSleep(const ReportStack *s) {$/;"	f	namespace:__tsan
PrintSourceLocation	sanitizer_common/sanitizer_stacktrace.cc	/^static void PrintSourceLocation(const char *file, int line, int column,$/;"	f	namespace:__sanitizer
PrintStack	asan/asan_stack.cc	/^void PrintStack(StackTrace *stack) {$/;"	f	namespace:__asan
PrintStack	sanitizer_common/sanitizer_stacktrace.cc	/^void StackTrace::PrintStack(const uptr *addr, uptr size,$/;"	f	class:__sanitizer::StackTrace
PrintStack	tsan/rtl/tsan_report.cc	/^void PrintStack(const ReportStack *ent) {$/;"	f	namespace:__tsan
PrintStackFramePrefix	sanitizer_common/sanitizer_stacktrace.cc	/^static void PrintStackFramePrefix(uptr frame_num, uptr pc) {$/;"	f	namespace:__sanitizer
PrintStatus	asan/asan_allocator.cc	/^  void PrintStatus() {$/;"	f	class:__asan::MallocInfo
PrintString	asan/tests/asan_exceptions_test.cc	/^  void PrintString(const std::string& msg) const {$/;"	f	class:Action
PrintThread	tsan/rtl/tsan_report.cc	/^static void PrintThread(const ReportThread *rt) {$/;"	f	namespace:__tsan
PrintZoneForPointer	asan/asan_report.cc	/^static void PrintZoneForPointer(uptr ptr, uptr zone_ptr,$/;"	f	namespace:__asan
Printf	sanitizer_common/sanitizer_printf.cc	/^void Printf(const char *format, ...) {$/;"	f	namespace:__sanitizer
PrintfAndReportCallback	sanitizer_common/sanitizer_printf.cc	/^static void (*PrintfAndReportCallback)(const char *);$/;"	m	namespace:__sanitizer	file:
ProtectRange	tsan/rtl/tsan_platform_linux.cc	/^static void ProtectRange(uptr beg, uptr end) {$/;"	f	namespace:__tsan
PthreadExit	asan/tests/asan_test.cc	/^static void *PthreadExit(void *a) {$/;"	f	file:
PtrToChunk	asan/asan_allocator.cc	/^static AsanChunk *PtrToChunk(uptr ptr) {$/;"	f	namespace:__asan
Push	asan/asan_allocator.cc	/^void AsanChunkFifoList::Push(AsanChunk *n) {$/;"	f	class:__asan::AsanChunkFifoList
PushBack	tsan/rtl/tsan_vector.h	/^  T *PushBack(T v = T()) {$/;"	f	class:__tsan::Vector
PushList	asan/asan_allocator.cc	/^void AsanChunkFifoList::PushList(AsanChunkFifoList *q) {$/;"	f	class:__asan::AsanChunkFifoList
QuarantinePop	asan/asan_allocator.cc	/^  void QuarantinePop() {$/;"	f	class:__asan::MallocInfo	file:
RAW_CHECK	sanitizer_common/sanitizer_internal_defs.h	95;"	d
RAW_CHECK_MSG	sanitizer_common/sanitizer_internal_defs.h	88;"	d
READ	tsan/tests/rtl/tsan_test_util_linux.cc	/^    READ,$/;"	e	enum:Event::Type	file:
REAL	interception/interception.h	116;"	d
REAL	interception/interception.h	125;"	d
REDZONE	asan/asan_allocator.cc	46;"	d	file:
REL_ADDR	i386/floatdidf.S	/^#define REL_ADDR(_a)	(_a)-0b(%eax)$/;"	d
REL_ADDR	i386/floatundidf.S	/^#define REL_ADDR(_a)	(_a)-0b(%eax)$/;"	d
REL_ADDR	i386/floatundixf.S	/^#define REL_ADDR(_a)	(_a)-0b(%eax)$/;"	d
REL_ADDR	x86_64/floatundidf.S	/^#define REL_ADDR(_a)	(_a)(%rip)$/;"	d
REL_ADDR	x86_64/floatundisf.S	/^#define REL_ADDR(_a)	(_a)(%rip)$/;"	d
REL_ADDR	x86_64/floatundixf.S	/^#define REL_ADDR(_a)	(_a)(%rip)$/;"	d
REP_C	fp_lib.h	34;"	d
REP_C	fp_lib.h	53;"	d
RETURN	tsan/tests/rtl/tsan_test_util_linux.cc	/^    RETURN,$/;"	e	enum:Event::Type	file:
RHSType	ubsan/ubsan_handlers.h	/^  const TypeDescriptor &RHSType;$/;"	m	struct:__ubsan::ShiftOutOfBoundsData
RW	tsan/tests/rtl/tsan_test_util.h	/^  enum Type { Normal, Spin, RW };$/;"	e	enum:Mutex::Type
RacyAddress	tsan/rtl/tsan_rtl.h	/^struct RacyAddress {$/;"	s	namespace:__tsan
RacyStacks	tsan/rtl/tsan_rtl.h	/^struct RacyStacks {$/;"	s	namespace:__tsan
RangesOverlap	asan/asan_interceptors.cc	/^static inline bool RangesOverlap(const char *offset1, uptr length1,$/;"	f	namespace:__asan
RawWrite	sanitizer_common/sanitizer_common.cc	/^void RawWrite(const char *buffer) {$/;"	f	namespace:__sanitizer
ReExec	sanitizer_common/sanitizer_linux.cc	/^void ReExec() {$/;"	f	namespace:__sanitizer
ReExec	sanitizer_common/sanitizer_mac.cc	/^void ReExec() {$/;"	f	namespace:__sanitizer
ReExec	sanitizer_common/sanitizer_win.cc	/^void ReExec() {$/;"	f	namespace:__sanitizer
Read	tsan/tests/rtl/tsan_test_util.h	/^  void Read(const MemLoc &ml, int size, bool expect_race = false) {$/;"	f	class:ScopedThread
Read	tsan/tests/unit/tsan_mutex_test.cc	/^  void Read() {$/;"	f	class:__tsan::TestData
Read1	tsan/tests/rtl/tsan_test_util.h	/^  void Read1(const MemLoc &ml, bool expect_race = false) {$/;"	f	class:ScopedThread
Read2	tsan/tests/rtl/tsan_test_util.h	/^  void Read2(const MemLoc &ml, bool expect_race = false) {$/;"	f	class:ScopedThread
Read4	tsan/tests/rtl/tsan_test_util.h	/^  void Read4(const MemLoc &ml, bool expect_race = false) {$/;"	f	class:ScopedThread
Read8	tsan/tests/rtl/tsan_test_util.h	/^  void Read8(const MemLoc &ml, bool expect_race = false) {$/;"	f	class:ScopedThread
ReadFile	tsan/rtl/tsan_suppressions.cc	/^static char *ReadFile(const char *filename) {$/;"	f	namespace:__tsan
ReadFileToBuffer	sanitizer_common/sanitizer_common.cc	/^uptr ReadFileToBuffer(const char *file_name, char **buff,$/;"	f	namespace:__sanitizer
ReadLock	tsan/rtl/tsan_mutex.cc	/^void Mutex::ReadLock() {$/;"	f	class:__tsan::Mutex
ReadLock	tsan/rtl/tsan_mutex.h	/^typedef GenericScopedReadLock<Mutex> ReadLock;$/;"	t	namespace:__tsan
ReadLock	tsan/tests/rtl/tsan_test_util_linux.cc	/^void Mutex::ReadLock() {$/;"	f	class:Mutex
ReadLock	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::ReadLock(const Mutex &m) {$/;"	f	class:ScopedThread
ReadUnlock	tsan/rtl/tsan_mutex.cc	/^void Mutex::ReadUnlock() {$/;"	f	class:__tsan::Mutex
ReadUnlock	tsan/tests/rtl/tsan_test_util_linux.cc	/^void Mutex::ReadUnlock() {$/;"	f	class:Mutex
ReadUnlock	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::ReadUnlock(const Mutex &m) {$/;"	f	class:ScopedThread
Reallocate	asan/asan_allocator.cc	/^static u8 *Reallocate(u8 *old_ptr, uptr new_size,$/;"	f	namespace:__asan
Reallocate	sanitizer_common/sanitizer_allocator64.h	/^  void *Reallocate(AllocatorCache *cache, void *p, uptr new_size,$/;"	f	class:__sanitizer::CombinedAllocator
RegionInfo	sanitizer_common/sanitizer_allocator64.h	/^  struct RegionInfo {$/;"	s	class:__sanitizer::SizeClassAllocator64
RegisterGlobal	asan/asan_globals.cc	/^static void RegisterGlobal(const Global *g) {$/;"	f	namespace:__asan
RegisterThread	asan/asan_thread_registry.cc	/^void AsanThreadRegistry::RegisterThread(AsanThread *thread) {$/;"	f	class:__asan::AsanThreadRegistry
Release	tsan/rtl/tsan_rtl_mutex.cc	/^void Release(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
ReleaseStore	tsan/rtl/tsan_clock.cc	/^void ThreadClock::ReleaseStore(SyncClock *dst) const {$/;"	f	class:__tsan::ThreadClock
ReleaseStore	tsan/rtl/tsan_rtl_mutex.cc	/^void ReleaseStore(ThreadState *thr, uptr pc, uptr addr) {$/;"	f	namespace:__tsan
ReplaceCFAllocator	asan/asan_malloc_mac.cc	/^void ReplaceCFAllocator() {$/;"	f	namespace:__asan
ReplaceOperatorsNewAndDelete	asan/asan_new_delete.cc	/^void ReplaceOperatorsNewAndDelete() { }$/;"	f	namespace:__asan
ReplaceSystemMalloc	asan/asan_malloc_linux.cc	/^void ReplaceSystemMalloc() {$/;"	f	namespace:__asan
ReplaceSystemMalloc	asan/asan_malloc_mac.cc	/^void ReplaceSystemMalloc() {$/;"	f	namespace:__asan
ReplaceSystemMalloc	asan/asan_malloc_win.cc	/^void ReplaceSystemMalloc() {$/;"	f	namespace:__asan
Report	sanitizer_common/sanitizer_printf.cc	/^void Report(const char *format, ...) {$/;"	f	namespace:__sanitizer
ReportAsanGetAllocatedSizeNotOwned	asan/asan_report.cc	/^void ReportAsanGetAllocatedSizeNotOwned(uptr addr, StackTrace *stack) {$/;"	f	namespace:__asan
ReportDesc	tsan/rtl/tsan_report.cc	/^ReportDesc::ReportDesc()$/;"	f	class:__tsan::ReportDesc
ReportDesc	tsan/rtl/tsan_report.h	/^class ReportDesc {$/;"	c	namespace:__tsan
ReportDoubleFree	asan/asan_report.cc	/^void ReportDoubleFree(uptr addr, StackTrace *stack) {$/;"	f	namespace:__asan
ReportExternalSymbolizerError	sanitizer_common/sanitizer_symbolizer.cc	/^  void ReportExternalSymbolizerError(const char *msg) {$/;"	f	class:__sanitizer::Symbolizer	file:
ReportFreeNotMalloced	asan/asan_report.cc	/^void ReportFreeNotMalloced(uptr addr, StackTrace *stack) {$/;"	f	namespace:__asan
ReportLocation	tsan/rtl/tsan_report.h	/^struct ReportLocation {$/;"	s	namespace:__tsan
ReportLocationGlobal	tsan/rtl/tsan_report.h	/^  ReportLocationGlobal,$/;"	e	enum:__tsan::ReportLocationType
ReportLocationHeap	tsan/rtl/tsan_report.h	/^  ReportLocationHeap,$/;"	e	enum:__tsan::ReportLocationType
ReportLocationStack	tsan/rtl/tsan_report.h	/^  ReportLocationStack$/;"	e	enum:__tsan::ReportLocationType
ReportLocationType	tsan/rtl/tsan_report.h	/^enum ReportLocationType {$/;"	g	namespace:__tsan
ReportMacCfReallocUnknown	asan/asan_report.cc	/^void ReportMacCfReallocUnknown($/;"	f	namespace:__asan
ReportMacMzReallocUnknown	asan/asan_report.cc	/^void ReportMacMzReallocUnknown($/;"	f	namespace:__asan
ReportMallocUsableSizeNotOwned	asan/asan_report.cc	/^void ReportMallocUsableSizeNotOwned(uptr addr, StackTrace *stack) {$/;"	f	namespace:__asan
ReportMissedExpectedRace	tsan/rtl/tsan_interface_ann.cc	/^static void ReportMissedExpectedRace(ExpectRace *race) {$/;"	f	file:
ReportMop	tsan/rtl/tsan_report.h	/^struct ReportMop {$/;"	s	namespace:__tsan
ReportMutex	tsan/rtl/tsan_report.h	/^struct ReportMutex {$/;"	s	namespace:__tsan
ReportRace	tsan/rtl/tsan_rtl_report.cc	/^void ReportRace(ThreadState *thr) {$/;"	f	namespace:__tsan
ReportSIGSEGV	asan/asan_report.cc	/^void ReportSIGSEGV(uptr pc, uptr sp, uptr bp, uptr addr) {$/;"	f	namespace:__asan
ReportStack	tsan/rtl/tsan_report.h	/^struct ReportStack {$/;"	s	namespace:__tsan
ReportStringFunctionMemoryRangesOverlap	asan/asan_report.cc	/^void ReportStringFunctionMemoryRangesOverlap($/;"	f	namespace:__asan
ReportThread	tsan/rtl/tsan_report.h	/^struct ReportThread {$/;"	s	namespace:__tsan
ReportType	tsan/rtl/tsan_report.h	/^enum ReportType {$/;"	g	namespace:__tsan
ReportTypeErrnoInSignal	tsan/rtl/tsan_report.h	/^  ReportTypeErrnoInSignal$/;"	e	enum:__tsan::ReportType
ReportTypeMutexDestroyLocked	tsan/rtl/tsan_report.h	/^  ReportTypeMutexDestroyLocked,$/;"	e	enum:__tsan::ReportType
ReportTypeRace	tsan/rtl/tsan_report.h	/^  ReportTypeRace,$/;"	e	enum:__tsan::ReportType
ReportTypeSignalUnsafe	tsan/rtl/tsan_report.h	/^  ReportTypeSignalUnsafe,$/;"	e	enum:__tsan::ReportType
ReportTypeThreadLeak	tsan/rtl/tsan_report.h	/^  ReportTypeThreadLeak,$/;"	e	enum:__tsan::ReportType
ReportTypeUseAfterFree	tsan/rtl/tsan_report.h	/^  ReportTypeUseAfterFree,$/;"	e	enum:__tsan::ReportType
ReserveShadowMemoryRange	asan/asan_rtl.cc	/^static void ReserveShadowMemoryRange(uptr beg, uptr end) {$/;"	f	namespace:__asan
Reset	sanitizer_common/sanitizer_linux.cc	/^void MemoryMappingLayout::Reset() {$/;"	f	class:__sanitizer::MemoryMappingLayout
Reset	sanitizer_common/sanitizer_mac.cc	/^void MemoryMappingLayout::Reset() {$/;"	f	class:__sanitizer::MemoryMappingLayout
Reset	tsan/rtl/tsan_clock.h	/^  void Reset() {$/;"	f	class:__tsan::SyncClock
Reset	tsan/rtl/tsan_sync.cc	/^void StackTrace::Reset() {$/;"	f	class:__tsan::StackTrace
Reset	tsan/rtl/tsan_vector.h	/^  void Reset() {$/;"	f	class:__tsan::Vector
Resize	tsan/rtl/tsan_vector.h	/^  void Resize(uptr size) {$/;"	f	class:__tsan::Vector
Restart	sanitizer_common/sanitizer_symbolizer.cc	/^  bool Restart() {$/;"	f	class:__sanitizer::ExternalSymbolizer
RestoreStack	tsan/rtl/tsan_rtl_report.cc	/^void RestoreStack(int tid, const u64 epoch, StackTrace *stk) {$/;"	f	namespace:__tsan
Return	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Return() {$/;"	f	class:ScopedThread
ReturnsPointerToALocalObject	asan/tests/asan_test.cc	/^int *ReturnsPointerToALocalObject() {$/;"	f
RightOOBErrorMessage	asan/tests/asan_test.cc	/^static string RightOOBErrorMessage(int oob_distance) {$/;"	f	file:
RoundUp	tsan/rtl/tsan_defs.h	/^T RoundUp(T p, int align) {$/;"	f	namespace:__tsan
RoundUpMapSize	sanitizer_common/sanitizer_allocator64.h	/^  uptr RoundUpMapSize(uptr size) {$/;"	f	class:__sanitizer::LargeMmapAllocator
RoundUpTo	sanitizer_common/sanitizer_common.h	/^INLINE uptr RoundUpTo(uptr size, uptr boundary) {$/;"	f	namespace:__sanitizer
RoundUpToPowerOfTwo	asan/asan_allocator.cc	/^static inline uptr RoundUpToPowerOfTwo(uptr size) {$/;"	f	namespace:__asan
Run	tsan/benchmarks/mini_bench_local.cc	/^void Run(int idx) {$/;"	f
Run	tsan/benchmarks/mini_bench_shared.cc	/^void Run(int idx) {$/;"	f
RunAtoiOOBTest	asan/tests/asan_test.cc	/^void RunAtoiOOBTest(PointerToCallAtoi Atoi) {$/;"	f
RunGetHeapSizeTestAndDie	asan/tests/asan_noinst_test.cc	/^static void RunGetHeapSizeTestAndDie() {$/;"	f	file:
RunStrChrTest	asan/tests/asan_test.cc	/^USED static void RunStrChrTest(PointerToStrChr1 StrChr) {$/;"	f	file:
RunStrChrTest	asan/tests/asan_test.cc	/^USED static void RunStrChrTest(PointerToStrChr2 StrChr) {$/;"	f	file:
RunStrCmpTest	asan/tests/asan_test.cc	/^void RunStrCmpTest(PointerToStrCmp StrCmp) {$/;"	f
RunStrNCmpTest	asan/tests/asan_test.cc	/^void RunStrNCmpTest(PointerToStrNCmp StrNCmp) {$/;"	f
RunStrtolOOBTest	asan/tests/asan_test.cc	/^void RunStrtolOOBTest(PointerToCallStrtol Strtol) {$/;"	f
RunThread	asan/lit_tests/deep_thread_stack.cc	/^void RunThread(callback_type function) {$/;"	f
RunnerThread	asan/lit_tests/deep_thread_stack.cc	/^void *RunnerThread(void *function) {$/;"	f
RunningOnValgrind	tsan/rtl/tsan_interface_ann.cc	/^int RunningOnValgrind() {$/;"	f
S	ubsan/lit_tests/TypeCheck/misaligned.cpp	/^struct S {$/;"	s	file:
S	ubsan/lit_tests/TypeCheck/null.cpp	/^struct S {$/;"	s	file:
SANITIZER_ALLOCATOR_H	sanitizer_common/sanitizer_allocator64.h	18;"	d
SANITIZER_ATOMIC_CLANG_H	sanitizer_common/sanitizer_atomic_clang.h	16;"	d
SANITIZER_ATOMIC_H	sanitizer_common/sanitizer_atomic.h	15;"	d
SANITIZER_ATOMIC_MSVC_H	sanitizer_common/sanitizer_atomic_msvc.h	16;"	d
SANITIZER_COMMON_H	sanitizer_common/sanitizer_common.h	17;"	d
SANITIZER_DEFS_H	sanitizer_common/sanitizer_internal_defs.h	14;"	d
SANITIZER_FLAGS_H	sanitizer_common/sanitizer_flags.h	15;"	d
SANITIZER_LIBC_H	sanitizer_common/sanitizer_libc.h	17;"	d
SANITIZER_LIST_H	sanitizer_common/sanitizer_list.h	15;"	d
SANITIZER_MUTEX_H	sanitizer_common/sanitizer_mutex.h	15;"	d
SANITIZER_PLACEMENT_NEW_H	sanitizer_common/sanitizer_placement_new.h	17;"	d
SANITIZER_PROCMAPS_H	sanitizer_common/sanitizer_procmaps.h	15;"	d
SANITIZER_STACKDEPOT_H	sanitizer_common/sanitizer_stackdepot.h	14;"	d
SANITIZER_STACKTRACE_H	sanitizer_common/sanitizer_stacktrace.h	14;"	d
SANITIZER_SYMBOLIZER_H	sanitizer_common/sanitizer_symbolizer.h	25;"	d
SA_SIGINFO	tsan/rtl/tsan_interceptors.cc	/^const int SA_SIGINFO = 4;$/;"	v
SCMap	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^typedef DefaultSizeClassMap SCMap;$/;"	t	file:
SCOPED_ANNOTATION	tsan/rtl/tsan_interface_ann.cc	51;"	d	file:
SCOPED_ATOMIC	tsan/rtl/tsan_interface_atomic.cc	82;"	d	file:
SCOPED_INTERCEPTOR_RAW	tsan/rtl/tsan_interceptors.h	32;"	d
SCOPED_TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.h	43;"	d
SEPARATOR	assembly.h	20;"	d
SEPARATOR	assembly.h	22;"	d
SET	tsan/rtl/tsan_md5.cc	27;"	d	file:
SHADOW_GRANULARITY	asan/asan_mapping.h	41;"	d
SHADOW_OFFSET	asan/asan_mapping.h	26;"	d
SHADOW_OFFSET	asan/asan_mapping.h	30;"	d
SHADOW_OFFSET	asan/asan_mapping.h	34;"	d
SHADOW_OFFSET	asan/asan_mapping.h	36;"	d
SHADOW_SCALE	asan/asan_mapping.h	25;"	d
SHADOW_SCALE	asan/asan_mapping.h	29;"	d
SHADOW_SCALE	asan/asan_mapping.h	32;"	d
SHADOW_TO_MEM	asan/asan_mapping.h	43;"	d
SHUTDOWN	tsan/tests/rtl/tsan_test_util_linux.cc	/^    SHUTDOWN,$/;"	e	enum:Event::Type	file:
SIGABRT	tsan/rtl/tsan_interceptors.cc	/^const int SIGABRT = 6;$/;"	v
SIGBUS	tsan/rtl/tsan_interceptors.cc	/^const int SIGBUS = 7;$/;"	v
SIGFPE	tsan/rtl/tsan_interceptors.cc	/^const int SIGFPE = 8;$/;"	v
SIGILL	tsan/rtl/tsan_interceptors.cc	/^const int SIGILL = 4;$/;"	v
SIGPIPE	tsan/rtl/tsan_interceptors.cc	/^const int SIGPIPE = 13;$/;"	v
SIGSEGV	tsan/rtl/tsan_interceptors.cc	/^const int SIGSEGV = 11;$/;"	v
SIG_DFL	tsan/rtl/tsan_interceptors.cc	/^const sighandler_t SIG_DFL = (sighandler_t)0;$/;"	v
SIG_ERR	tsan/rtl/tsan_interceptors.cc	/^const sighandler_t SIG_ERR = (sighandler_t)-1;$/;"	v
SIG_IGN	tsan/rtl/tsan_interceptors.cc	/^const sighandler_t SIG_IGN = (sighandler_t)1;$/;"	v
SIG_SETMASK	tsan/rtl/tsan_interceptors.cc	/^const int SIG_SETMASK = 2;$/;"	v
SINGLE_PRECISION	addsf3.c	15;"	d	file:
SINGLE_PRECISION	comparesf2.c	40;"	d	file:
SINGLE_PRECISION	divsf3.c	19;"	d	file:
SINGLE_PRECISION	fixsfsi.c	16;"	d	file:
SINGLE_PRECISION	floatsisf.c	16;"	d	file:
SINGLE_PRECISION	floatunsisf.c	16;"	d	file:
SINGLE_PRECISION	mulsf3.c	15;"	d	file:
SINGLE_PRECISION	negsf2.c	14;"	d	file:
SINGLE_PRECISION	subsf3.c	15;"	d	file:
SInt	ubsan/ubsan_diag.h	/^      SIntMax SInt;$/;"	m	union:__ubsan::Diag::Arg::__anon31
SIntMax	ubsan/ubsan_value.h	/^typedef s128 SIntMax;$/;"	t	namespace:__ubsan
SPINLOCK_COUNT	atomic.c	42;"	d	file:
SPINLOCK_MASK	atomic.c	/^static const long SPINLOCK_MASK = SPINLOCK_COUNT - 1;$/;"	v	file:
SRC_REP_C	extendsfdf2.c	45;"	d	file:
SRC_REP_C	truncdfsf2.c	44;"	d	file:
STEP	tsan/rtl/tsan_md5.cc	22;"	d	file:
STICKY	i386/floatundisf.S	/^#define			STICKY			sticky-0b(%ecx,%eax,8)$/;"	d
SYMBOL_NAME	assembly.h	37;"	d
SanitizerCommonFunctions	sanitizer_common/Makefile.mk	/^SanitizerCommonFunctions := $(Sources:%.cc=%)$/;"	m
ScopedAnnotation	tsan/rtl/tsan_interface_ann.cc	/^  ScopedAnnotation(ThreadState *thr, const char *aname, const char *f, int l,$/;"	f	class:__tsan::ScopedAnnotation
ScopedAnnotation	tsan/rtl/tsan_interface_ann.cc	/^class ScopedAnnotation {$/;"	c	namespace:__tsan	file:
ScopedAtomic	tsan/rtl/tsan_interface_atomic.cc	/^  ScopedAtomic(ThreadState *thr, uptr pc, const char *func)$/;"	f	class:ScopedAtomic
ScopedAtomic	tsan/rtl/tsan_interface_atomic.cc	/^class ScopedAtomic {$/;"	c	file:
ScopedInErrorReport	asan/asan_report.cc	/^  ScopedInErrorReport() {$/;"	f	class:__asan::ScopedInErrorReport
ScopedInErrorReport	asan/asan_report.cc	/^class ScopedInErrorReport {$/;"	c	namespace:__asan	file:
ScopedInRtl	tsan/rtl/tsan_platform_linux.cc	/^ScopedInRtl::ScopedInRtl()$/;"	f	class:__tsan::ScopedInRtl
ScopedInRtl	tsan/rtl/tsan_platform_mac.cc	/^ScopedInRtl::ScopedInRtl() {$/;"	f	class:__tsan::ScopedInRtl
ScopedInRtl	tsan/rtl/tsan_rtl.h	/^class ScopedInRtl {$/;"	c	namespace:__tsan
ScopedInterceptor	tsan/rtl/tsan_interceptors.cc	/^ScopedInterceptor::ScopedInterceptor(ThreadState *thr, const char *fname,$/;"	f	class:ScopedInterceptor
ScopedInterceptor	tsan/rtl/tsan_interceptors.h	/^class ScopedInterceptor {$/;"	c	namespace:__tsan
ScopedLock	asan/asan_lock.h	/^typedef GenericScopedLock<AsanLock> ScopedLock;$/;"	t	namespace:__asan
ScopedReport	tsan/rtl/tsan_rtl.h	/^class ScopedReport {$/;"	c	namespace:__tsan
ScopedReport	tsan/rtl/tsan_rtl_report.cc	/^ScopedReport::ScopedReport(ReportType typ) {$/;"	f	class:__tsan::ScopedReport
ScopedThread	tsan/tests/rtl/tsan_test_util.h	/^class ScopedThread {$/;"	c
ScopedThread	tsan/tests/rtl/tsan_test_util_linux.cc	/^ScopedThread::ScopedThread(bool detached, bool main) {$/;"	f	class:ScopedThread
ScopedThreadCallback	tsan/tests/rtl/tsan_test_util_linux.cc	/^void *ScopedThread::Impl::ScopedThreadCallback(void *arg) {$/;"	f	class:ScopedThread::Impl
SecondaryAllocator	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^typedef LargeMmapAllocator SecondaryAllocator;$/;"	t	namespace:__anon26	file:
SecondaryAllocator	tsan/rtl/tsan_rtl.h	/^typedef LargeMmapAllocator SecondaryAllocator;$/;"	t	namespace:__tsan
SectionDesc	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^struct SectionDesc {$/;"	s	namespace:__tsan	file:
SetAddr0AndSizeLog	tsan/rtl/tsan_rtl.h	/^  void SetAddr0AndSizeLog(u64 addr0, unsigned kAccessSizeLog) {$/;"	f	class:__tsan::Shadow
SetAlternateSignalStack	asan/asan_posix.cc	/^void SetAlternateSignalStack() {$/;"	f	namespace:__asan
SetAlternateSignalStack	asan/asan_win.cc	/^void SetAlternateSignalStack() {$/;"	f	namespace:__asan
SetCheckFailedCallback	sanitizer_common/sanitizer_common.cc	/^void SetCheckFailedCallback(CheckFailedCallbackType callback) {$/;"	f	namespace:__sanitizer
SetCurrent	asan/asan_thread_registry.cc	/^void AsanThreadRegistry::SetCurrent(AsanThread *t) {$/;"	f	class:__asan::AsanThreadRegistry
SetDieCallback	sanitizer_common/sanitizer_common.cc	/^void SetDieCallback(void (*callback)(void)) {$/;"	f	namespace:__sanitizer
SetIgnoreBit	tsan/rtl/tsan_rtl.h	/^  void SetIgnoreBit() { x_ |= kIgnoreBit; }$/;"	f	class:__tsan::FastState
SetList	sanitizer_common/tests/sanitizer_list_test.cc	/^static void SetList(List *l, ListItem *x = 0,$/;"	f	namespace:__sanitizer
SetLowLevelAllocateCallback	sanitizer_common/sanitizer_allocator.cc	/^void SetLowLevelAllocateCallback(LowLevelAllocateCallback callback) {$/;"	f	namespace:__sanitizer
SetPrintfAndReportCallback	sanitizer_common/sanitizer_printf.cc	/^void SetPrintfAndReportCallback(void (*callback)(const char *)) {$/;"	f	namespace:__sanitizer
SetStackSizeLimitInBytes	sanitizer_common/sanitizer_posix.cc	/^void SetStackSizeLimitInBytes(uptr limit) {$/;"	f	namespace:__sanitizer
SetStackSizeLimitInBytes	sanitizer_common/sanitizer_win.cc	/^void SetStackSizeLimitInBytes(uptr limit) {$/;"	f	namespace:__sanitizer
SetThreadStackTopAndBottom	asan/asan_thread.cc	/^void AsanThread::SetThreadStackTopAndBottom() {$/;"	f	class:__asan::AsanThread
SetWrite	tsan/rtl/tsan_rtl.h	/^  void SetWrite(unsigned kAccessIsWrite) {$/;"	f	class:__tsan::Shadow
Shadow	tsan/rtl/tsan_rtl.h	/^  explicit Shadow(const FastState &s) : FastState(s.x_) { }$/;"	f	class:__tsan::Shadow
Shadow	tsan/rtl/tsan_rtl.h	/^  explicit Shadow(u64 x) : FastState(x) { }$/;"	f	class:__tsan::Shadow
Shadow	tsan/rtl/tsan_rtl.h	/^class Shadow : public FastState {$/;"	c	namespace:__tsan
ShadowSegmentEndpoint	asan/asan_poisoning.cc	/^  explicit ShadowSegmentEndpoint(uptr address) {$/;"	f	struct:__asan::ShadowSegmentEndpoint
ShadowSegmentEndpoint	asan/asan_poisoning.cc	/^struct ShadowSegmentEndpoint {$/;"	s	namespace:__asan	file:
ShadowToMem	tsan/rtl/tsan_platform.h	/^static inline uptr ShadowToMem(uptr shadow) {$/;"	f	namespace:__tsan
ShiftOutOfBoundsData	ubsan/ubsan_handlers.h	/^struct ShiftOutOfBoundsData {$/;"	s	namespace:__ubsan
ShowStatsAndAbort	asan/asan_rtl.cc	/^void ShowStatsAndAbort() {$/;"	f	namespace:__asan
SigCtx	tsan/rtl/tsan_interceptors.cc	/^static SignalContext *SigCtx(ThreadState *thr) {$/;"	f	file:
SigLongJmpFunc1	asan/tests/asan_test.cc	/^NOINLINE void SigLongJmpFunc1(sigjmp_buf buf) {$/;"	f
SignalContext	tsan/rtl/tsan_interceptors.cc	/^struct SignalContext {$/;"	s	namespace:__tsan	file:
SignalDesc	tsan/rtl/tsan_interceptors.cc	/^struct SignalDesc {$/;"	s	namespace:__tsan	file:
SignalUnsafeCall	tsan/rtl/tsan_mman.cc	/^static void SignalUnsafeCall(ThreadState *thr, uptr pc) {$/;"	f	namespace:__tsan
SimpleBugOnSTack	asan/tests/asan_test.cc	/^void *SimpleBugOnSTack(void *x = 0) {$/;"	f
Size	asan/asan_allocator.cc	/^  uptr Size() { return SizeClassToSize(size_class); }$/;"	f	struct:__asan::ChunkBase
Size	sanitizer_common/sanitizer_allocator64.h	/^  static uptr Size(uptr class_id) {$/;"	f	class:__sanitizer::DefaultSizeClassMap
Size	tsan/rtl/tsan_sync.cc	/^uptr StackTrace::Size() const {$/;"	f	class:__tsan::StackTrace
Size	tsan/rtl/tsan_vector.h	/^  uptr Size() const {$/;"	f	class:__tsan::Vector
SizeClass	asan/asan_allocator.cc	/^  u8 SizeClass() { return size_class; }$/;"	f	struct:__asan::ChunkBase
SizeClassAllocator64	sanitizer_common/sanitizer_allocator64.h	/^class SizeClassAllocator64 {$/;"	c	namespace:__sanitizer
SizeClassAllocatorLocalCache	sanitizer_common/sanitizer_allocator64.h	/^struct SizeClassAllocatorLocalCache {$/;"	s	namespace:__sanitizer
SizeClassMap	sanitizer_common/sanitizer_allocator64.h	/^  typedef typename SizeClassAllocator::SizeClassMapT SizeClassMap;$/;"	t	struct:__sanitizer::SizeClassAllocatorLocalCache
SizeClassMapT	sanitizer_common/sanitizer_allocator64.h	/^  typedef SizeClassMap SizeClassMapT;$/;"	t	class:__sanitizer::SizeClassAllocator64
SizeClassToSize	asan/asan_allocator.cc	/^static inline uptr SizeClassToSize(u8 size_class) {$/;"	f	namespace:__asan
SizeToSizeClass	asan/asan_allocator.cc	/^static inline u8 SizeToSizeClass(uptr size) {$/;"	f	namespace:__asan
SizedStackTest	asan/tests/asan_test.cc	/^NOINLINE void SizedStackTest() {$/;"	f
SleepForMillis	sanitizer_common/sanitizer_posix.cc	/^void SleepForMillis(int millis) {$/;"	f	namespace:__sanitizer
SleepForMillis	sanitizer_common/sanitizer_win.cc	/^void SleepForMillis(int millis) {$/;"	f	namespace:__sanitizer
SleepForSeconds	sanitizer_common/sanitizer_posix.cc	/^void SleepForSeconds(int seconds) {$/;"	f	namespace:__sanitizer
SleepForSeconds	sanitizer_common/sanitizer_win.cc	/^void SleepForSeconds(int seconds) {$/;"	f	namespace:__sanitizer
SortArray	sanitizer_common/sanitizer_common.cc	/^void SortArray(uptr *array, uptr size) {$/;"	f	namespace:__sanitizer
SourceLocation	ubsan/ubsan_value.h	/^  SourceLocation() : Filename(), Line(), Column() {}$/;"	f	class:__ubsan::SourceLocation
SourceLocation	ubsan/ubsan_value.h	/^  SourceLocation(const char *Filename, unsigned Line, unsigned Column)$/;"	f	class:__ubsan::SourceLocation
SourceLocation	ubsan/ubsan_value.h	/^class SourceLocation {$/;"	c	namespace:__ubsan
Sources	Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.c),$(filter-out $(ExcludedSources),$(notdir $(file))))$/;"	m
Sources	arm/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.c),$(notdir $(file)))$/;"	m
Sources	asan/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.cc),$(notdir $(file)))$/;"	m
Sources	asan/dynamic/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.cc),$(notdir $(file)))$/;"	m
Sources	i386/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.c),$(notdir $(file)))$/;"	m
Sources	interception/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.cc),$(notdir $(file)))$/;"	m
Sources	interception/mach_override/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.c),$(notdir $(file)))$/;"	m
Sources	ppc/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.c),$(notdir $(file)))$/;"	m
Sources	profile/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.c),$(notdir $(file)))$/;"	m
Sources	sanitizer_common/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.cc),$(notdir $(file)))$/;"	m
Sources	tsan/Makefile.mk	/^Sources :=$/;"	m
Sources	tsan/rtl/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.cc),$(notdir $(file)))$/;"	m
Sources	x86_64/Makefile.mk	/^Sources := $(foreach file,$(wildcard $(Dir)\/*.c),$(notdir $(file)))$/;"	m
Spin	tsan/tests/rtl/tsan_test_util.h	/^  enum Type { Normal, Spin, RW };$/;"	e	enum:Mutex::Type
SpinMutex	sanitizer_common/sanitizer_mutex.h	/^  SpinMutex() {$/;"	f	class:__sanitizer::SpinMutex
SpinMutex	sanitizer_common/sanitizer_mutex.h	/^class SpinMutex : public StaticSpinMutex {$/;"	c	namespace:__sanitizer
SpinMutexLock	sanitizer_common/sanitizer_mutex.h	/^typedef GenericScopedLock<StaticSpinMutex> SpinMutexLock;$/;"	t	namespace:__sanitizer
StackDepotGet	sanitizer_common/sanitizer_stackdepot.cc	/^const uptr *StackDepotGet(u32 id, uptr *size) {$/;"	f	namespace:__sanitizer
StackDepotPut	sanitizer_common/sanitizer_stackdepot.cc	/^u32 StackDepotPut(const uptr *stack, uptr size) {$/;"	f	namespace:__sanitizer
StackDesc	sanitizer_common/sanitizer_stackdepot.cc	/^struct StackDesc {$/;"	s	namespace:__sanitizer	file:
StackReuseAndException	asan/tests/asan_test.cc	/^NOINLINE static void StackReuseAndException() {$/;"	f	file:
StackSize	asan/asan_allocator.h	/^  bool StackSize() { return stack_size_; }$/;"	f	class:__asan::FakeStack
StackSizeIsUnlimited	sanitizer_common/sanitizer_posix.cc	/^bool StackSizeIsUnlimited() {$/;"	f	namespace:__sanitizer
StackSizeIsUnlimited	sanitizer_common/sanitizer_win.cc	/^bool StackSizeIsUnlimited() {$/;"	f	namespace:__sanitizer
StackStripMain	tsan/rtl/tsan_rtl_report.cc	/^static void StackStripMain(ReportStack *stack) {$/;"	f	namespace:__tsan
StackTrace	sanitizer_common/sanitizer_stacktrace.h	/^struct StackTrace {$/;"	s	namespace:__sanitizer
StackTrace	tsan/rtl/tsan_sync.cc	/^StackTrace::StackTrace()$/;"	f	class:__tsan::StackTrace
StackTrace	tsan/rtl/tsan_sync.cc	/^StackTrace::StackTrace(uptr *buf, uptr cnt)$/;"	f	class:__tsan::StackTrace
StackTrace	tsan/rtl/tsan_sync.h	/^class StackTrace {$/;"	c	namespace:__tsan
StartSymbolizerSubprocess	sanitizer_common/sanitizer_symbolizer_linux.cc	/^bool StartSymbolizerSubprocess(const char *path_to_symbolizer,$/;"	f	namespace:__sanitizer
StartSymbolizerSubprocess	sanitizer_common/sanitizer_symbolizer_mac.cc	/^bool StartSymbolizerSubprocess(const char *path_to_symbolizer,$/;"	f	namespace:__sanitizer
StartSymbolizerSubprocess	sanitizer_common/sanitizer_symbolizer_win.cc	/^bool StartSymbolizerSubprocess(const char *path_to_symbolizer,$/;"	f	namespace:__sanitizer
StartThread	tsan/lit_tests/simple_stack.c	/^void StartThread(pthread_t *t, void *(*f)(void*)) {$/;"	f
StartsWith	sanitizer_common/sanitizer_flags.cc	/^static bool StartsWith(const char *flag, int flag_length, const char *value) {$/;"	f	namespace:__sanitizer
StatAggregate	tsan/rtl/tsan_stat.cc	/^void StatAggregate(u64 *dst, u64 *src) {$/;"	f	namespace:__tsan
StatAnnotateBenignRace	tsan/rtl/tsan_stat.h	/^  StatAnnotateBenignRace,$/;"	e	enum:__tsan::StatType
StatAnnotateBenignRaceSized	tsan/rtl/tsan_stat.h	/^  StatAnnotateBenignRaceSized,$/;"	e	enum:__tsan::StatType
StatAnnotateCondVarSignal	tsan/rtl/tsan_stat.h	/^  StatAnnotateCondVarSignal,$/;"	e	enum:__tsan::StatType
StatAnnotateCondVarSignalAll	tsan/rtl/tsan_stat.h	/^  StatAnnotateCondVarSignalAll,$/;"	e	enum:__tsan::StatType
StatAnnotateCondVarWait	tsan/rtl/tsan_stat.h	/^  StatAnnotateCondVarWait,$/;"	e	enum:__tsan::StatType
StatAnnotateEnableRaceDetection	tsan/rtl/tsan_stat.h	/^  StatAnnotateEnableRaceDetection,$/;"	e	enum:__tsan::StatType
StatAnnotateExpectRace	tsan/rtl/tsan_stat.h	/^  StatAnnotateExpectRace,$/;"	e	enum:__tsan::StatType
StatAnnotateFlushExpectedRaces	tsan/rtl/tsan_stat.h	/^  StatAnnotateFlushExpectedRaces,$/;"	e	enum:__tsan::StatType
StatAnnotateFlushState	tsan/rtl/tsan_stat.h	/^  StatAnnotateFlushState,$/;"	e	enum:__tsan::StatType
StatAnnotateHappensAfter	tsan/rtl/tsan_stat.h	/^  StatAnnotateHappensAfter,$/;"	e	enum:__tsan::StatType
StatAnnotateHappensBefore	tsan/rtl/tsan_stat.h	/^  StatAnnotateHappensBefore,$/;"	e	enum:__tsan::StatType
StatAnnotateIgnoreReadsBegin	tsan/rtl/tsan_stat.h	/^  StatAnnotateIgnoreReadsBegin,$/;"	e	enum:__tsan::StatType
StatAnnotateIgnoreReadsEnd	tsan/rtl/tsan_stat.h	/^  StatAnnotateIgnoreReadsEnd,$/;"	e	enum:__tsan::StatType
StatAnnotateIgnoreWritesBegin	tsan/rtl/tsan_stat.h	/^  StatAnnotateIgnoreWritesBegin,$/;"	e	enum:__tsan::StatType
StatAnnotateIgnoreWritesEnd	tsan/rtl/tsan_stat.h	/^  StatAnnotateIgnoreWritesEnd,$/;"	e	enum:__tsan::StatType
StatAnnotateMutexIsNotPHB	tsan/rtl/tsan_stat.h	/^  StatAnnotateMutexIsNotPHB,$/;"	e	enum:__tsan::StatType
StatAnnotateMutexIsUsedAsCondVar	tsan/rtl/tsan_stat.h	/^  StatAnnotateMutexIsUsedAsCondVar,$/;"	e	enum:__tsan::StatType
StatAnnotateNewMemory	tsan/rtl/tsan_stat.h	/^  StatAnnotateNewMemory,$/;"	e	enum:__tsan::StatType
StatAnnotateNoOp	tsan/rtl/tsan_stat.h	/^  StatAnnotateNoOp,$/;"	e	enum:__tsan::StatType
StatAnnotatePCQCreate	tsan/rtl/tsan_stat.h	/^  StatAnnotatePCQCreate,$/;"	e	enum:__tsan::StatType
StatAnnotatePCQDestroy	tsan/rtl/tsan_stat.h	/^  StatAnnotatePCQDestroy,$/;"	e	enum:__tsan::StatType
StatAnnotatePCQGet	tsan/rtl/tsan_stat.h	/^  StatAnnotatePCQGet,$/;"	e	enum:__tsan::StatType
StatAnnotatePCQPut	tsan/rtl/tsan_stat.h	/^  StatAnnotatePCQPut,$/;"	e	enum:__tsan::StatType
StatAnnotatePublishMemoryRange	tsan/rtl/tsan_stat.h	/^  StatAnnotatePublishMemoryRange,$/;"	e	enum:__tsan::StatType
StatAnnotateRWLockAcquired	tsan/rtl/tsan_stat.h	/^  StatAnnotateRWLockAcquired,$/;"	e	enum:__tsan::StatType
StatAnnotateRWLockCreate	tsan/rtl/tsan_stat.h	/^  StatAnnotateRWLockCreate,$/;"	e	enum:__tsan::StatType
StatAnnotateRWLockCreateStatic	tsan/rtl/tsan_stat.h	/^  StatAnnotateRWLockCreateStatic,$/;"	e	enum:__tsan::StatType
StatAnnotateRWLockDestroy	tsan/rtl/tsan_stat.h	/^  StatAnnotateRWLockDestroy,$/;"	e	enum:__tsan::StatType
StatAnnotateRWLockReleased	tsan/rtl/tsan_stat.h	/^  StatAnnotateRWLockReleased,$/;"	e	enum:__tsan::StatType
StatAnnotateThreadName	tsan/rtl/tsan_stat.h	/^  StatAnnotateThreadName,$/;"	e	enum:__tsan::StatType
StatAnnotateTraceMemory	tsan/rtl/tsan_stat.h	/^  StatAnnotateTraceMemory,$/;"	e	enum:__tsan::StatType
StatAnnotateUnpublishMemoryRange	tsan/rtl/tsan_stat.h	/^  StatAnnotateUnpublishMemoryRange,$/;"	e	enum:__tsan::StatType
StatAnnotation	tsan/rtl/tsan_stat.h	/^  StatAnnotation,$/;"	e	enum:__tsan::StatType
StatAtomic	tsan/rtl/tsan_stat.h	/^  StatAtomic,$/;"	e	enum:__tsan::StatType
StatAtomic1	tsan/rtl/tsan_stat.h	/^  StatAtomic1,$/;"	e	enum:__tsan::StatType
StatAtomic2	tsan/rtl/tsan_stat.h	/^  StatAtomic2,$/;"	e	enum:__tsan::StatType
StatAtomic4	tsan/rtl/tsan_stat.h	/^  StatAtomic4,$/;"	e	enum:__tsan::StatType
StatAtomic8	tsan/rtl/tsan_stat.h	/^  StatAtomic8,$/;"	e	enum:__tsan::StatType
StatAtomicAcq_Rel	tsan/rtl/tsan_stat.h	/^  StatAtomicAcq_Rel,$/;"	e	enum:__tsan::StatType
StatAtomicAcquire	tsan/rtl/tsan_stat.h	/^  StatAtomicAcquire,$/;"	e	enum:__tsan::StatType
StatAtomicCAS	tsan/rtl/tsan_stat.h	/^  StatAtomicCAS,$/;"	e	enum:__tsan::StatType
StatAtomicConsume	tsan/rtl/tsan_stat.h	/^  StatAtomicConsume,$/;"	e	enum:__tsan::StatType
StatAtomicExchange	tsan/rtl/tsan_stat.h	/^  StatAtomicExchange,$/;"	e	enum:__tsan::StatType
StatAtomicFence	tsan/rtl/tsan_stat.h	/^  StatAtomicFence,$/;"	e	enum:__tsan::StatType
StatAtomicFetchAdd	tsan/rtl/tsan_stat.h	/^  StatAtomicFetchAdd,$/;"	e	enum:__tsan::StatType
StatAtomicFetchAnd	tsan/rtl/tsan_stat.h	/^  StatAtomicFetchAnd,$/;"	e	enum:__tsan::StatType
StatAtomicFetchOr	tsan/rtl/tsan_stat.h	/^  StatAtomicFetchOr,$/;"	e	enum:__tsan::StatType
StatAtomicFetchSub	tsan/rtl/tsan_stat.h	/^  StatAtomicFetchSub,$/;"	e	enum:__tsan::StatType
StatAtomicFetchXor	tsan/rtl/tsan_stat.h	/^  StatAtomicFetchXor,$/;"	e	enum:__tsan::StatType
StatAtomicLoad	tsan/rtl/tsan_stat.h	/^  StatAtomicLoad,$/;"	e	enum:__tsan::StatType
StatAtomicRelaxed	tsan/rtl/tsan_stat.h	/^  StatAtomicRelaxed,$/;"	e	enum:__tsan::StatType
StatAtomicRelease	tsan/rtl/tsan_stat.h	/^  StatAtomicRelease,$/;"	e	enum:__tsan::StatType
StatAtomicSeq_Cst	tsan/rtl/tsan_stat.h	/^  StatAtomicSeq_Cst,$/;"	e	enum:__tsan::StatType
StatAtomicStore	tsan/rtl/tsan_stat.h	/^  StatAtomicStore,$/;"	e	enum:__tsan::StatType
StatCnt	tsan/rtl/tsan_stat.h	/^  StatCnt$/;"	e	enum:__tsan::StatType
StatEvents	tsan/rtl/tsan_stat.h	/^  StatEvents,$/;"	e	enum:__tsan::StatType
StatFuncEnter	tsan/rtl/tsan_stat.h	/^  StatFuncEnter,$/;"	e	enum:__tsan::StatType
StatFuncExit	tsan/rtl/tsan_stat.h	/^  StatFuncExit,$/;"	e	enum:__tsan::StatType
StatInc	tsan/rtl/tsan_rtl.h	/^void ALWAYS_INLINE INLINE StatInc(ThreadState *thr, StatType typ, u64 n = 1) {$/;"	f	namespace:__tsan
StatInt__ZdaPv	tsan/rtl/tsan_stat.h	/^  StatInt__ZdaPv,$/;"	e	enum:__tsan::StatType
StatInt__ZdaPvRKSt9nothrow_t	tsan/rtl/tsan_stat.h	/^  StatInt__ZdaPvRKSt9nothrow_t,$/;"	e	enum:__tsan::StatType
StatInt__ZdlPv	tsan/rtl/tsan_stat.h	/^  StatInt__ZdlPv,$/;"	e	enum:__tsan::StatType
StatInt__ZdlPvRKSt9nothrow_t	tsan/rtl/tsan_stat.h	/^  StatInt__ZdlPvRKSt9nothrow_t,$/;"	e	enum:__tsan::StatType
StatInt__Znam	tsan/rtl/tsan_stat.h	/^  StatInt__Znam,$/;"	e	enum:__tsan::StatType
StatInt__ZnamRKSt9nothrow_t	tsan/rtl/tsan_stat.h	/^  StatInt__ZnamRKSt9nothrow_t,$/;"	e	enum:__tsan::StatType
StatInt__Znwm	tsan/rtl/tsan_stat.h	/^  StatInt__Znwm,$/;"	e	enum:__tsan::StatType
StatInt__ZnwmRKSt9nothrow_t	tsan/rtl/tsan_stat.h	/^  StatInt__ZnwmRKSt9nothrow_t,$/;"	e	enum:__tsan::StatType
StatInt___cxa_guard_acquire	tsan/rtl/tsan_stat.h	/^  StatInt___cxa_guard_acquire,$/;"	e	enum:__tsan::StatType
StatInt___cxa_guard_release	tsan/rtl/tsan_stat.h	/^  StatInt___cxa_guard_release,$/;"	e	enum:__tsan::StatType
StatInt_atexit	tsan/rtl/tsan_stat.h	/^  StatInt_atexit,$/;"	e	enum:__tsan::StatType
StatInt_calloc	tsan/rtl/tsan_stat.h	/^  StatInt_calloc,$/;"	e	enum:__tsan::StatType
StatInt_cfree	tsan/rtl/tsan_stat.h	/^  StatInt_cfree,$/;"	e	enum:__tsan::StatType
StatInt_epoll_ctl	tsan/rtl/tsan_stat.h	/^  StatInt_epoll_ctl,$/;"	e	enum:__tsan::StatType
StatInt_epoll_wait	tsan/rtl/tsan_stat.h	/^  StatInt_epoll_wait,$/;"	e	enum:__tsan::StatType
StatInt_fopen	tsan/rtl/tsan_stat.h	/^  StatInt_fopen,$/;"	e	enum:__tsan::StatType
StatInt_fread	tsan/rtl/tsan_stat.h	/^  StatInt_fread,$/;"	e	enum:__tsan::StatType
StatInt_free	tsan/rtl/tsan_stat.h	/^  StatInt_free,$/;"	e	enum:__tsan::StatType
StatInt_fwrite	tsan/rtl/tsan_stat.h	/^  StatInt_fwrite,$/;"	e	enum:__tsan::StatType
StatInt_kill	tsan/rtl/tsan_stat.h	/^  StatInt_kill,$/;"	e	enum:__tsan::StatType
StatInt_longjmp	tsan/rtl/tsan_stat.h	/^  StatInt_longjmp,$/;"	e	enum:__tsan::StatType
StatInt_malloc	tsan/rtl/tsan_stat.h	/^  StatInt_malloc,$/;"	e	enum:__tsan::StatType
StatInt_memalign	tsan/rtl/tsan_stat.h	/^  StatInt_memalign,$/;"	e	enum:__tsan::StatType
StatInt_memchr	tsan/rtl/tsan_stat.h	/^  StatInt_memchr,$/;"	e	enum:__tsan::StatType
StatInt_memcmp	tsan/rtl/tsan_stat.h	/^  StatInt_memcmp,$/;"	e	enum:__tsan::StatType
StatInt_memcpy	tsan/rtl/tsan_stat.h	/^  StatInt_memcpy,$/;"	e	enum:__tsan::StatType
StatInt_memmove	tsan/rtl/tsan_stat.h	/^  StatInt_memmove,$/;"	e	enum:__tsan::StatType
StatInt_memrchr	tsan/rtl/tsan_stat.h	/^  StatInt_memrchr,$/;"	e	enum:__tsan::StatType
StatInt_memset	tsan/rtl/tsan_stat.h	/^  StatInt_memset,$/;"	e	enum:__tsan::StatType
StatInt_mmap	tsan/rtl/tsan_stat.h	/^  StatInt_mmap,$/;"	e	enum:__tsan::StatType
StatInt_mmap64	tsan/rtl/tsan_stat.h	/^  StatInt_mmap64,$/;"	e	enum:__tsan::StatType
StatInt_munmap	tsan/rtl/tsan_stat.h	/^  StatInt_munmap,$/;"	e	enum:__tsan::StatType
StatInt_nanosleep	tsan/rtl/tsan_stat.h	/^  StatInt_nanosleep,$/;"	e	enum:__tsan::StatType
StatInt_opendir	tsan/rtl/tsan_stat.h	/^  StatInt_opendir,$/;"	e	enum:__tsan::StatType
StatInt_posix_memalign	tsan/rtl/tsan_stat.h	/^  StatInt_posix_memalign,$/;"	e	enum:__tsan::StatType
StatInt_pread	tsan/rtl/tsan_stat.h	/^  StatInt_pread,$/;"	e	enum:__tsan::StatType
StatInt_pread64	tsan/rtl/tsan_stat.h	/^  StatInt_pread64,$/;"	e	enum:__tsan::StatType
StatInt_preadv64	tsan/rtl/tsan_stat.h	/^  StatInt_preadv64,$/;"	e	enum:__tsan::StatType
StatInt_pthread_barrier_destroy	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_barrier_destroy,$/;"	e	enum:__tsan::StatType
StatInt_pthread_barrier_init	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_barrier_init,$/;"	e	enum:__tsan::StatType
StatInt_pthread_barrier_wait	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_barrier_wait,$/;"	e	enum:__tsan::StatType
StatInt_pthread_cond_broadcast	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_cond_broadcast,$/;"	e	enum:__tsan::StatType
StatInt_pthread_cond_destroy	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_cond_destroy,$/;"	e	enum:__tsan::StatType
StatInt_pthread_cond_init	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_cond_init,$/;"	e	enum:__tsan::StatType
StatInt_pthread_cond_signal	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_cond_signal,$/;"	e	enum:__tsan::StatType
StatInt_pthread_cond_timedwait	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_cond_timedwait,$/;"	e	enum:__tsan::StatType
StatInt_pthread_cond_wait	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_cond_wait,$/;"	e	enum:__tsan::StatType
StatInt_pthread_create	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_create,$/;"	e	enum:__tsan::StatType
StatInt_pthread_detach	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_detach,$/;"	e	enum:__tsan::StatType
StatInt_pthread_join	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_join,$/;"	e	enum:__tsan::StatType
StatInt_pthread_kill	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_kill,$/;"	e	enum:__tsan::StatType
StatInt_pthread_mutex_destroy	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_mutex_destroy,$/;"	e	enum:__tsan::StatType
StatInt_pthread_mutex_init	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_mutex_init,$/;"	e	enum:__tsan::StatType
StatInt_pthread_mutex_lock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_mutex_lock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_mutex_timedlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_mutex_timedlock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_mutex_trylock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_mutex_trylock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_mutex_unlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_mutex_unlock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_once	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_once,$/;"	e	enum:__tsan::StatType
StatInt_pthread_rwlock_destroy	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_rwlock_destroy,$/;"	e	enum:__tsan::StatType
StatInt_pthread_rwlock_init	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_rwlock_init,$/;"	e	enum:__tsan::StatType
StatInt_pthread_rwlock_rdlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_rwlock_rdlock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_rwlock_timedrdlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_rwlock_timedrdlock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_rwlock_timedwrlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_rwlock_timedwrlock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_rwlock_tryrdlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_rwlock_tryrdlock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_rwlock_trywrlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_rwlock_trywrlock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_rwlock_unlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_rwlock_unlock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_rwlock_wrlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_rwlock_wrlock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_spin_destroy	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_spin_destroy,$/;"	e	enum:__tsan::StatType
StatInt_pthread_spin_init	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_spin_init,$/;"	e	enum:__tsan::StatType
StatInt_pthread_spin_lock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_spin_lock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_spin_trylock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_spin_trylock,$/;"	e	enum:__tsan::StatType
StatInt_pthread_spin_unlock	tsan/rtl/tsan_stat.h	/^  StatInt_pthread_spin_unlock,$/;"	e	enum:__tsan::StatType
StatInt_puts	tsan/rtl/tsan_stat.h	/^  StatInt_puts,$/;"	e	enum:__tsan::StatType
StatInt_pvalloc	tsan/rtl/tsan_stat.h	/^  StatInt_pvalloc,$/;"	e	enum:__tsan::StatType
StatInt_pwrite	tsan/rtl/tsan_stat.h	/^  StatInt_pwrite,$/;"	e	enum:__tsan::StatType
StatInt_pwrite64	tsan/rtl/tsan_stat.h	/^  StatInt_pwrite64,$/;"	e	enum:__tsan::StatType
StatInt_pwritev64	tsan/rtl/tsan_stat.h	/^  StatInt_pwritev64,$/;"	e	enum:__tsan::StatType
StatInt_raise	tsan/rtl/tsan_stat.h	/^  StatInt_raise,$/;"	e	enum:__tsan::StatType
StatInt_read	tsan/rtl/tsan_stat.h	/^  StatInt_read,$/;"	e	enum:__tsan::StatType
StatInt_readv	tsan/rtl/tsan_stat.h	/^  StatInt_readv,$/;"	e	enum:__tsan::StatType
StatInt_realloc	tsan/rtl/tsan_stat.h	/^  StatInt_realloc,$/;"	e	enum:__tsan::StatType
StatInt_recv	tsan/rtl/tsan_stat.h	/^  StatInt_recv,$/;"	e	enum:__tsan::StatType
StatInt_recvmsg	tsan/rtl/tsan_stat.h	/^  StatInt_recvmsg,$/;"	e	enum:__tsan::StatType
StatInt_rmdir	tsan/rtl/tsan_stat.h	/^  StatInt_rmdir,$/;"	e	enum:__tsan::StatType
StatInt_sem_destroy	tsan/rtl/tsan_stat.h	/^  StatInt_sem_destroy,$/;"	e	enum:__tsan::StatType
StatInt_sem_getvalue	tsan/rtl/tsan_stat.h	/^  StatInt_sem_getvalue,$/;"	e	enum:__tsan::StatType
StatInt_sem_init	tsan/rtl/tsan_stat.h	/^  StatInt_sem_init,$/;"	e	enum:__tsan::StatType
StatInt_sem_post	tsan/rtl/tsan_stat.h	/^  StatInt_sem_post,$/;"	e	enum:__tsan::StatType
StatInt_sem_timedwait	tsan/rtl/tsan_stat.h	/^  StatInt_sem_timedwait,$/;"	e	enum:__tsan::StatType
StatInt_sem_trywait	tsan/rtl/tsan_stat.h	/^  StatInt_sem_trywait,$/;"	e	enum:__tsan::StatType
StatInt_sem_wait	tsan/rtl/tsan_stat.h	/^  StatInt_sem_wait,$/;"	e	enum:__tsan::StatType
StatInt_send	tsan/rtl/tsan_stat.h	/^  StatInt_send,$/;"	e	enum:__tsan::StatType
StatInt_sendmsg	tsan/rtl/tsan_stat.h	/^  StatInt_sendmsg,$/;"	e	enum:__tsan::StatType
StatInt_sigaction	tsan/rtl/tsan_stat.h	/^  StatInt_sigaction,$/;"	e	enum:__tsan::StatType
StatInt_siglongjmp	tsan/rtl/tsan_stat.h	/^  StatInt_siglongjmp,$/;"	e	enum:__tsan::StatType
StatInt_signal	tsan/rtl/tsan_stat.h	/^  StatInt_signal,$/;"	e	enum:__tsan::StatType
StatInt_sleep	tsan/rtl/tsan_stat.h	/^  StatInt_sleep,$/;"	e	enum:__tsan::StatType
StatInt_strchr	tsan/rtl/tsan_stat.h	/^  StatInt_strchr,$/;"	e	enum:__tsan::StatType
StatInt_strchrnul	tsan/rtl/tsan_stat.h	/^  StatInt_strchrnul,$/;"	e	enum:__tsan::StatType
StatInt_strcmp	tsan/rtl/tsan_stat.h	/^  StatInt_strcmp,$/;"	e	enum:__tsan::StatType
StatInt_strcpy	tsan/rtl/tsan_stat.h	/^  StatInt_strcpy,$/;"	e	enum:__tsan::StatType
StatInt_strlen	tsan/rtl/tsan_stat.h	/^  StatInt_strlen,$/;"	e	enum:__tsan::StatType
StatInt_strncmp	tsan/rtl/tsan_stat.h	/^  StatInt_strncmp,$/;"	e	enum:__tsan::StatType
StatInt_strncpy	tsan/rtl/tsan_stat.h	/^  StatInt_strncpy,$/;"	e	enum:__tsan::StatType
StatInt_strrchr	tsan/rtl/tsan_stat.h	/^  StatInt_strrchr,$/;"	e	enum:__tsan::StatType
StatInt_strstr	tsan/rtl/tsan_stat.h	/^  StatInt_strstr,$/;"	e	enum:__tsan::StatType
StatInt_unlink	tsan/rtl/tsan_stat.h	/^  StatInt_unlink,$/;"	e	enum:__tsan::StatType
StatInt_usleep	tsan/rtl/tsan_stat.h	/^  StatInt_usleep,$/;"	e	enum:__tsan::StatType
StatInt_valloc	tsan/rtl/tsan_stat.h	/^  StatInt_valloc,$/;"	e	enum:__tsan::StatType
StatInt_write	tsan/rtl/tsan_stat.h	/^  StatInt_write,$/;"	e	enum:__tsan::StatType
StatInt_writev	tsan/rtl/tsan_stat.h	/^  StatInt_writev,$/;"	e	enum:__tsan::StatType
StatInterceptor	tsan/rtl/tsan_stat.h	/^  StatInterceptor,$/;"	e	enum:__tsan::StatType
StatMop	tsan/rtl/tsan_stat.h	/^  StatMop,$/;"	e	enum:__tsan::StatType
StatMop1	tsan/rtl/tsan_stat.h	/^  StatMop1,  \/\/ These must be consequtive.$/;"	e	enum:__tsan::StatType
StatMop2	tsan/rtl/tsan_stat.h	/^  StatMop2,$/;"	e	enum:__tsan::StatType
StatMop4	tsan/rtl/tsan_stat.h	/^  StatMop4,$/;"	e	enum:__tsan::StatType
StatMop8	tsan/rtl/tsan_stat.h	/^  StatMop8,$/;"	e	enum:__tsan::StatType
StatMopRange	tsan/rtl/tsan_stat.h	/^  StatMopRange,$/;"	e	enum:__tsan::StatType
StatMopRead	tsan/rtl/tsan_stat.h	/^  StatMopRead,$/;"	e	enum:__tsan::StatType
StatMopSame	tsan/rtl/tsan_stat.h	/^  StatMopSame,$/;"	e	enum:__tsan::StatType
StatMopWrite	tsan/rtl/tsan_stat.h	/^  StatMopWrite,$/;"	e	enum:__tsan::StatType
StatMtxAnnotations	tsan/rtl/tsan_stat.h	/^  StatMtxAnnotations,$/;"	e	enum:__tsan::StatType
StatMtxAtExit	tsan/rtl/tsan_stat.h	/^  StatMtxAtExit,$/;"	e	enum:__tsan::StatType
StatMtxReport	tsan/rtl/tsan_stat.h	/^  StatMtxReport,$/;"	e	enum:__tsan::StatType
StatMtxSlab	tsan/rtl/tsan_stat.h	/^  StatMtxSlab,$/;"	e	enum:__tsan::StatType
StatMtxSyncTab	tsan/rtl/tsan_stat.h	/^  StatMtxSyncTab,$/;"	e	enum:__tsan::StatType
StatMtxSyncVar	tsan/rtl/tsan_stat.h	/^  StatMtxSyncVar,$/;"	e	enum:__tsan::StatType
StatMtxThreads	tsan/rtl/tsan_stat.h	/^  StatMtxThreads,$/;"	e	enum:__tsan::StatType
StatMtxTotal	tsan/rtl/tsan_stat.h	/^  StatMtxTotal,$/;"	e	enum:__tsan::StatType
StatMtxTrace	tsan/rtl/tsan_stat.h	/^  StatMtxTrace,$/;"	e	enum:__tsan::StatType
StatMutexCreate	tsan/rtl/tsan_stat.h	/^  StatMutexCreate,$/;"	e	enum:__tsan::StatType
StatMutexDestroy	tsan/rtl/tsan_stat.h	/^  StatMutexDestroy,$/;"	e	enum:__tsan::StatType
StatMutexLock	tsan/rtl/tsan_stat.h	/^  StatMutexLock,$/;"	e	enum:__tsan::StatType
StatMutexReadLock	tsan/rtl/tsan_stat.h	/^  StatMutexReadLock,$/;"	e	enum:__tsan::StatType
StatMutexReadUnlock	tsan/rtl/tsan_stat.h	/^  StatMutexReadUnlock,$/;"	e	enum:__tsan::StatType
StatMutexRecLock	tsan/rtl/tsan_stat.h	/^  StatMutexRecLock,$/;"	e	enum:__tsan::StatType
StatMutexRecUnlock	tsan/rtl/tsan_stat.h	/^  StatMutexRecUnlock,$/;"	e	enum:__tsan::StatType
StatMutexUnlock	tsan/rtl/tsan_stat.h	/^  StatMutexUnlock,$/;"	e	enum:__tsan::StatType
StatOutput	tsan/rtl/tsan_stat.cc	/^void StatOutput(u64 *stat) {$/;"	f	namespace:__tsan
StatShadowAnotherThread	tsan/rtl/tsan_stat.h	/^  StatShadowAnotherThread,$/;"	e	enum:__tsan::StatType
StatShadowIntersect	tsan/rtl/tsan_stat.h	/^  StatShadowIntersect,$/;"	e	enum:__tsan::StatType
StatShadowNonZero	tsan/rtl/tsan_stat.h	/^  StatShadowNonZero,  \/\/ Derived.$/;"	e	enum:__tsan::StatType
StatShadowNotIntersect	tsan/rtl/tsan_stat.h	/^  StatShadowNotIntersect,$/;"	e	enum:__tsan::StatType
StatShadowProcessed	tsan/rtl/tsan_stat.h	/^  StatShadowProcessed,$/;"	e	enum:__tsan::StatType
StatShadowReplace	tsan/rtl/tsan_stat.h	/^  StatShadowReplace,$/;"	e	enum:__tsan::StatType
StatShadowSameSize	tsan/rtl/tsan_stat.h	/^  StatShadowSameSize,$/;"	e	enum:__tsan::StatType
StatShadowSameThread	tsan/rtl/tsan_stat.h	/^  StatShadowSameThread,$/;"	e	enum:__tsan::StatType
StatShadowZero	tsan/rtl/tsan_stat.h	/^  StatShadowZero,$/;"	e	enum:__tsan::StatType
StatSyncAcquire	tsan/rtl/tsan_stat.h	/^  StatSyncAcquire,$/;"	e	enum:__tsan::StatType
StatSyncCreated	tsan/rtl/tsan_stat.h	/^  StatSyncCreated,$/;"	e	enum:__tsan::StatType
StatSyncDestroyed	tsan/rtl/tsan_stat.h	/^  StatSyncDestroyed,$/;"	e	enum:__tsan::StatType
StatSyncRelease	tsan/rtl/tsan_stat.h	/^  StatSyncRelease,$/;"	e	enum:__tsan::StatType
StatThreadCreate	tsan/rtl/tsan_stat.h	/^  StatThreadCreate,$/;"	e	enum:__tsan::StatType
StatThreadFinish	tsan/rtl/tsan_stat.h	/^  StatThreadFinish,$/;"	e	enum:__tsan::StatType
StatThreadMaxAlive	tsan/rtl/tsan_stat.h	/^  StatThreadMaxAlive,$/;"	e	enum:__tsan::StatType
StatThreadMaxTid	tsan/rtl/tsan_stat.h	/^  StatThreadMaxTid,$/;"	e	enum:__tsan::StatType
StatThreadReuse	tsan/rtl/tsan_stat.h	/^  StatThreadReuse,$/;"	e	enum:__tsan::StatType
StatType	tsan/rtl/tsan_stat.h	/^enum StatType {$/;"	g	namespace:__tsan
StaticConstGlob	asan/tests/asan_test.cc	/^static const char StaticConstGlob[3] = {9, 8, 7};$/;"	v	file:
StaticInit	tsan/tests/rtl/tsan_test_util_linux.cc	/^void Mutex::StaticInit() {$/;"	f	class:Mutex
StaticSpinMutex	sanitizer_common/sanitizer_mutex.h	/^class StaticSpinMutex {$/;"	c	namespace:__sanitizer
StopUsingFakeStack	asan/asan_allocator.h	/^  void StopUsingFakeStack() { alive_ = false; }$/;"	f	class:__asan::FakeStack
StoreIfNotYetStored	tsan/rtl/tsan_rtl.cc	/^static void StoreIfNotYetStored(u64 *sp, u64 *s) {$/;"	f	namespace:__tsan
StoreShadow	tsan/rtl/tsan_rtl.cc	/^static void StoreShadow(u64 *sp, u64 s) {$/;"	f	namespace:__tsan
StrLenOOBTestTemplate	asan/tests/asan_test.cc	/^void StrLenOOBTestTemplate(char *str, size_t length, bool is_global) {$/;"	f
String	ubsan/ubsan_diag.h	/^      const char *String;$/;"	m	union:__ubsan::Diag::Arg::__anon31
StripPathPrefix	sanitizer_common/sanitizer_stacktrace.cc	/^static const char *StripPathPrefix(const char *filepath,$/;"	f	namespace:__sanitizer
StructWithBitField	asan/tests/asan_test.cc	/^struct StructWithBitField {$/;"	s	file:
StructWithBitFields_8_24	asan/tests/asan_test.cc	/^struct StructWithBitFields_8_24 {$/;"	s	file:
SubDirs	Makefile.mk	/^SubDirs :=$/;"	m
SubDirs	arm/Makefile.mk	/^SubDirs := $/;"	m
SubDirs	asan/Makefile.mk	/^SubDirs := dynamic$/;"	m
SubDirs	asan/dynamic/Makefile.mk	/^SubDirs :=$/;"	m
SubDirs	i386/Makefile.mk	/^SubDirs := $/;"	m
SubDirs	interception/Makefile.mk	/^SubDirs := mach_override$/;"	m
SubDirs	interception/mach_override/Makefile.mk	/^SubDirs :=$/;"	m
SubDirs	ppc/Makefile.mk	/^SubDirs := $/;"	m
SubDirs	profile/Makefile.mk	/^SubDirs :=$/;"	m
SubDirs	sanitizer_common/Makefile.mk	/^SubDirs :=$/;"	m
SubDirs	tsan/Makefile.mk	/^SubDirs := rtl$/;"	m
SubDirs	tsan/rtl/Makefile.mk	/^SubDirs :=$/;"	m
SubDirs	x86_64/Makefile.mk	/^SubDirs := $/;"	m
Suppression	tsan/rtl/tsan_suppressions.h	/^struct Suppression {$/;"	s	namespace:__tsan
SuppressionMatch	tsan/rtl/tsan_suppressions.cc	/^bool SuppressionMatch(char *templ, const char *str) {$/;"	f	namespace:__tsan
SuppressionMutex	tsan/rtl/tsan_suppressions.h	/^  SuppressionMutex,$/;"	e	enum:__tsan::SuppressionType
SuppressionParse	tsan/rtl/tsan_suppressions.cc	/^Suppression *SuppressionParse(const char* supp) {$/;"	f	namespace:__tsan
SuppressionRace	tsan/rtl/tsan_suppressions.h	/^  SuppressionRace,$/;"	e	enum:__tsan::SuppressionType
SuppressionSignal	tsan/rtl/tsan_suppressions.h	/^  SuppressionSignal$/;"	e	enum:__tsan::SuppressionType
SuppressionThread	tsan/rtl/tsan_suppressions.h	/^  SuppressionThread,$/;"	e	enum:__tsan::SuppressionType
SuppressionType	tsan/rtl/tsan_suppressions.h	/^enum SuppressionType {$/;"	g	namespace:__tsan
SwallowCache	sanitizer_common/sanitizer_allocator64.h	/^  void SwallowCache(AllocatorCache *cache) {$/;"	f	class:__sanitizer::CombinedAllocator
SwallowThreadLocalMallocStorage	asan/asan_allocator.cc	/^  void SwallowThreadLocalMallocStorage(AsanThreadLocalMallocStorage *x,$/;"	f	class:__asan::MallocInfo
Swap	sanitizer_common/sanitizer_common.h	/^template<class T> void Swap(T& a, T& b) {$/;"	f	namespace:__sanitizer
SymbolizationLoop	asan/scripts/asan_symbolize.py	/^class SymbolizationLoop(object):$/;"	c
SymbolizeCallback	sanitizer_common/sanitizer_stacktrace.h	/^  typedef bool (*SymbolizeCallback)(const void *pc, char *out_buffer,$/;"	t	struct:__sanitizer::StackTrace
SymbolizeCode	sanitizer_common/sanitizer_symbolizer.cc	/^  uptr SymbolizeCode(uptr addr, AddressInfo *frames, uptr max_frames) {$/;"	f	class:__sanitizer::Symbolizer
SymbolizeCode	sanitizer_common/sanitizer_symbolizer.cc	/^  uptr SymbolizeCode(uptr addr, const char *module_name, uptr module_offset,$/;"	f	class:__sanitizer::ExternalSymbolizer
SymbolizeCode	sanitizer_common/sanitizer_symbolizer.cc	/^uptr SymbolizeCode(uptr address, AddressInfo *frames, uptr max_frames) {$/;"	f	namespace:__sanitizer
SymbolizeCode	tsan/go/tsan_go.cc	/^ReportStack *SymbolizeCode(uptr addr) {$/;"	f	namespace:__tsan
SymbolizeCode	tsan/rtl/tsan_symbolize.cc	/^ReportStack *SymbolizeCode(uptr addr) {$/;"	f	namespace:__tsan
SymbolizeCodeAddr2Line	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^ReportStack *SymbolizeCodeAddr2Line(uptr addr) {$/;"	f	namespace:__tsan
SymbolizeData	tsan/go/tsan_go.cc	/^ReportStack *SymbolizeData(uptr addr) {$/;"	f	namespace:__tsan
SymbolizeData	tsan/rtl/tsan_symbolize.cc	/^ReportStack *SymbolizeData(uptr addr) {$/;"	f	namespace:__tsan
SymbolizeDataAddr2Line	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^ReportStack *SymbolizeDataAddr2Line(uptr addr) {$/;"	f	namespace:__tsan
SymbolizeStack	tsan/rtl/tsan_rtl_report.cc	/^static ReportStack *SymbolizeStack(const StackTrace& trace) {$/;"	f	namespace:__tsan
Symbolizer	asan/scripts/asan_symbolize.py	/^class Symbolizer(object):$/;"	c
Symbolizer	sanitizer_common/sanitizer_symbolizer.cc	/^class Symbolizer {$/;"	c	namespace:__sanitizer	file:
SyncClock	tsan/rtl/tsan_clock.cc	/^SyncClock::SyncClock()$/;"	f	class:__tsan::SyncClock
SyncClock	tsan/rtl/tsan_clock.h	/^class SyncClock {$/;"	c	namespace:__tsan
SyncTab	tsan/rtl/tsan_sync.cc	/^SyncTab::SyncTab() {$/;"	f	class:__tsan::SyncTab
SyncTab	tsan/rtl/tsan_sync.h	/^class SyncTab {$/;"	c	namespace:__tsan
SyncVar	tsan/rtl/tsan_sync.cc	/^SyncVar::SyncVar(uptr addr)$/;"	f	class:__tsan::SyncVar
SyncVar	tsan/rtl/tsan_sync.h	/^struct SyncVar {$/;"	s	namespace:__tsan
SystemSymbolizerFactory	asan/scripts/asan_symbolize.py	/^def SystemSymbolizerFactory(system, addr, binary):$/;"	f
T	tsan/tests/unit/tsan_mutex_test.cc	/^  typedef u64 T;$/;"	t	class:__tsan::TestData	file:
TEST	asan/tests/asan_benchmarks_test.cc	/^TEST(AddressSanitizer, BorderAccessBenchmark) {$/;"	f
TEST	asan/tests/asan_benchmarks_test.cc	/^TEST(AddressSanitizer, FakeStackBenchmark) {$/;"	f
TEST	asan/tests/asan_benchmarks_test.cc	/^TEST(AddressSanitizer, ManyAccessBenchmark) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizer, CompressStackTraceBenchmark) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizer, CompressStackTraceTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizer, DISABLED_InternalPrintShadow) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizer, InternalSimpleDeathTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizer, MemsetWildAddressTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizer, NoInstMallocTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizer, QuarantineTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizer, ThreadedOneSizeMallocStressTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizer, ThreadedQuarantineTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, DISABLED_InvalidPoisonAndUnpoisonCallsTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, DeathCallbackTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, ExitCode) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, GetAllocatedSizeAndOwnershipTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, GetCurrentAllocatedBytesTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, GetEstimatedAllocatedSize) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, GetFreeBytesTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, GetHeapSizeTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, GetOwnershipStressTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, ManyThreadsWithStatsStressTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, OverlappingPoisonMemoryRegionTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, PoisoningStressTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, PushAndPopWithPoisoningTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, SetErrorReportCallbackTest) {$/;"	f
TEST	asan/tests/asan_noinst_test.cc	/^TEST(AddressSanitizerInterface, SimplePoisonMemoryRegionTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, AtoiAndFriendsOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, AttributeNoAddressSafetyTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, BitFieldNegativeTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, BitFieldPositiveTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, BufferOverflowAfterManyFrees) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, CallocTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, CxxExceptionTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoDoubleFreeTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoFunctionStaticTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoNullDerefTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoOOBLeftHigh) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoOOBLeftLow) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoOOBRightHigh) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoOOBRightLow) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoOOM) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoStackTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoThreadStackTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoThreadedTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoTooMuchMemoryTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoUAFHigh) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoUAFLowIn) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoUAFLowLeft) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_DemoUAFLowRight) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_LargeFunctionSymbolizeTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_MallocFreeUnwindAndSymbolizeTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_MemIntrinsicCallByPointerTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_MemIntrinsicUnalignedAccessTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_StressStackReuseAndExceptionsTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DISABLED_TSDTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, DoubleFreeTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, FileNameInGlobalReportTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, GlobalStringConstTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, GlobalTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, GuiltyStackFrame0Test) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, GuiltyStackFrame1Test) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, GuiltyStackFrame2Test) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, GuiltyStackFrame3Test) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, HasFeatureAddressSanitizerTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, HugeMallocTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, IgnoreTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, LargeMallocTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, LargeStructCopyTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, LocalReferenceReturnTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, LongDoubleNegativeTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, LongJmpTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, MallocStressTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, MallocUsableSizeTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, ManyStackObjectsTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, ManyThreadsTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, MemCmpOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, MemCpyOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, MemMoveOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, MemSetOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, MlockTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, OOBRightTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, OOB_char) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, OOB_int) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, OutOfMemoryTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, PthreadExitTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, PvallocTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, ReallocTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, ShadowGapTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, SigLongJmpTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, SignalTest) {$/;"	f	namespace:__anon1
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, SimpleDeathTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, SimpleStackTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, Store128Test) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrArgsOverlapTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrCaseCmpOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrCatOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrChrAndIndexOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrCmpAndFriendsLogicTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrCmpOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrCpyOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrDupOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrDupTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrLenOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrNCaseCmpOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrNCatOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrNCmpOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrNCpyOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrNLenOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StressStackReuseTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrtolOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, StrtollOOBTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, ThreadStackReuseTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, ThreadedMallocStressTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, ThreadedStressStackReuseTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, ThreadedTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, UAF_char) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, UnderscopeLongJmpTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, UseThenFreeThenUseTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, VallocTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, VariousMallocsTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, WildAddressTest) {$/;"	f	namespace:__anon1
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizer, WrongFreeTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, CFAllocatorDefaultDoubleFree) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, CFAllocatorDefaultDoubleFree_ChildPhread) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, CFAllocatorMallocDoubleFree) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, CFAllocator_PassMemoryToAnotherThread) {$/;"	f	namespace:__anon2
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, CFStringCreateCopy) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, DISABLED_CFAllocatorMallocZoneDoubleFree) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, DISABLED_CFAllocatorSystemDefaultDoubleFree) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, DISABLED_TSDWorkqueueTest) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, GCDDispatchAfter) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, GCDDispatchAsync) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, GCDDispatchSync) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, GCDGroupAsync) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, GCDReuseWqthreadsAsync) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, GCDReuseWqthreadsSync) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, GCDSourceCancel) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, GCDSourceEvent) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, MallocIntrospectionLock) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, Mstats) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, NSObjectOOB) {$/;"	f
TEST	asan/tests/asan_test.cc	/^TEST(AddressSanitizerMac, NSURLDeallocation) {$/;"	f
TEST	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^TEST(SanitizerCommon, CombinedAllocator) {$/;"	f
TEST	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^TEST(SanitizerCommon, DefaultSizeClassMap) {$/;"	f
TEST	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^TEST(SanitizerCommon, LargeMmapAllocator) {$/;"	f
TEST	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^TEST(SanitizerCommon, SizeClassAllocator64) {$/;"	f
TEST	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^TEST(SanitizerCommon, SizeClassAllocator64MetadataStress) {$/;"	f
TEST	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^TEST(SanitizerCommon, SizeClassAllocator64Overflow) {$/;"	f
TEST	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^TEST(SanitizerCommon, SizeClassAllocatorLocalCache) {$/;"	f
TEST	sanitizer_common/tests/sanitizer_allocator_test.cc	/^TEST(Allocator, Basic) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_allocator_test.cc	/^TEST(Allocator, ScopedBuffer) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_allocator_test.cc	/^TEST(Allocator, Stress) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_common_test.cc	/^TEST(SanitizerCommon, SortTest) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_flags_test.cc	/^TEST(SanitizerCommon, BooleanFlags) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_flags_test.cc	/^TEST(SanitizerCommon, IntFlags) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_flags_test.cc	/^TEST(SanitizerCommon, StrFlags) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_list_test.cc	/^TEST(SanitizerCommon, IntrusiveList) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_stackdepot_test.cc	/^TEST(SanitizerCommon, StackDepotAbsent) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_stackdepot_test.cc	/^TEST(SanitizerCommon, StackDepotBasic) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_stackdepot_test.cc	/^TEST(SanitizerCommon, StackDepotEmptyStack) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_stackdepot_test.cc	/^TEST(SanitizerCommon, StackDepotSame) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_stackdepot_test.cc	/^TEST(SanitizerCommon, StackDepotSeveral) {$/;"	f	namespace:__sanitizer
TEST	sanitizer_common/tests/sanitizer_stackdepot_test.cc	/^TEST(SanitizerCommon, StackDepotZeroId) {$/;"	f	namespace:__sanitizer
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, FuncCall) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop1) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop1Read) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop1Write) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop2) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop2Read) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop2Write) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop4) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop4Read) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop4Write) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop8) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop8Read) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, Mop8Write) {$/;"	f
TEST	tsan/tests/rtl/tsan_bench.cc	/^TEST(DISABLED_BENCH, MutexLocal) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, BenignRaceOnVptr) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, HarmfulRaceOnVptr) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, LockedWriteThenRead) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, NoRaceWithOffset) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, RaceWithDeadThread) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, RaceWithOffset) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, RaceWithOffset2) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, ReadReadNoRace) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, ReadWriteRace) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, ReportDeadThread) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, ReportRace) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, SimpleWrite) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, SimpleWriteWrite) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, WriteReadRace) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, WriteThenLockedRead) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, WriteThenRead) {$/;"	f
TEST	tsan/tests/rtl/tsan_mop.cc	/^TEST(ThreadSanitizer, WriteWriteRace) {$/;"	f
TEST	tsan/tests/rtl/tsan_mutex.cc	/^TEST(DISABLED_BENCH_ThreadSanitizer, Singleton) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_mutex.cc	/^TEST(DISABLED_BENCH_ThreadSanitizer, StopFlag) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_mutex.cc	/^TEST(ThreadSanitizer, BasicMutex) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_mutex.cc	/^TEST(ThreadSanitizer, BasicRwMutex) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_mutex.cc	/^TEST(ThreadSanitizer, BasicSpinMutex) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_mutex.cc	/^TEST(ThreadSanitizer, Mutex) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_mutex.cc	/^TEST(ThreadSanitizer, RwMutex) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_mutex.cc	/^TEST(ThreadSanitizer, SpinMutex) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_mutex.cc	/^TEST(ThreadSanitizer, StaticMutex) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_posix.cc	/^TEST(Posix, CondBasic) {$/;"	f
TEST	tsan/tests/rtl/tsan_posix.cc	/^TEST(Posix, ThreadLocalAccesses) {$/;"	f
TEST	tsan/tests/rtl/tsan_posix.cc	/^TEST(Posix, ThreadSpecificDtors) {$/;"	f
TEST	tsan/tests/rtl/tsan_string.cc	/^TEST(ThreadSanitizer, Memcpy) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_string.cc	/^TEST(ThreadSanitizer, MemcpyRace1) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_string.cc	/^TEST(ThreadSanitizer, MemcpyRace2) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_string.cc	/^TEST(ThreadSanitizer, MemcpyRace3) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_string.cc	/^TEST(ThreadSanitizer, MemcpyStack) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_string.cc	/^TEST(ThreadSanitizer, MemsetRace1) {$/;"	f	namespace:__tsan
TEST	tsan/tests/rtl/tsan_test.cc	/^TEST(ThreadSanitizer, FuncCall) {$/;"	f
TEST	tsan/tests/rtl/tsan_thread.cc	/^TEST(DISABLED_SLOW_ThreadSanitizer, ThreadALot) {$/;"	f
TEST	tsan/tests/rtl/tsan_thread.cc	/^TEST(ThreadSanitizer, ThreadDetach1) {$/;"	f
TEST	tsan/tests/rtl/tsan_thread.cc	/^TEST(ThreadSanitizer, ThreadDetach2) {$/;"	f
TEST	tsan/tests/rtl/tsan_thread.cc	/^TEST(ThreadSanitizer, ThreadSync) {$/;"	f
TEST	tsan/tests/unit/tsan_clock_test.cc	/^TEST(Clock, AcquireRelease) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_clock_test.cc	/^TEST(Clock, ChunkedBasic) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_clock_test.cc	/^TEST(Clock, DifferentSizes) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_clock_test.cc	/^TEST(Clock, ManyThreads) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_clock_test.cc	/^TEST(Clock, VectorBasic) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_flags_test.cc	/^TEST(Flags, Basic) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_flags_test.cc	/^TEST(Flags, DefaultValues) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_mman_test.cc	/^TEST(Mman, Internal) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_mman_test.cc	/^TEST(Mman, User) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_mman_test.cc	/^TEST(Mman, UserRealloc) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_mutex_test.cc	/^TEST(Mutex, ReadWrite) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_mutex_test.cc	/^TEST(Mutex, SpinWrite) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_mutex_test.cc	/^TEST(Mutex, Write) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_platform_test.cc	/^TEST(Platform, FileOps) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_platform_test.cc	/^TEST(Platform, ThreadInfoMain) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_platform_test.cc	/^TEST(Platform, ThreadInfoWorker) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_printf_test.cc	/^TEST(Printf, Basic) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_printf_test.cc	/^TEST(Printf, MinMax) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_printf_test.cc	/^TEST(Printf, OverflowInt) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_printf_test.cc	/^TEST(Printf, OverflowPtr) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_printf_test.cc	/^TEST(Printf, OverflowStr) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_printf_test.cc	/^TEST(Printf, OverflowUint) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_shadow_test.cc	/^TEST(Shadow, Celling) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_shadow_test.cc	/^TEST(Shadow, Mapping) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_stack_test.cc	/^TEST(StackTrace, Basic) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_stack_test.cc	/^TEST(StackTrace, StaticBasic) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_stack_test.cc	/^TEST(StackTrace, StaticTrim) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_suppressions_test.cc	/^TEST(Suppressions, Match) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_suppressions_test.cc	/^TEST(Suppressions, Parse) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_suppressions_test.cc	/^TEST(Suppressions, Parse2) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_suppressions_test.cc	/^TEST(Suppressions, Parse3) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_suppressions_test.cc	/^TEST(Suppressions, ParseType) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_sync_test.cc	/^TEST(Sync, Table) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_vector_test.cc	/^TEST(Vector, Basic) {$/;"	f	namespace:__tsan
TEST	tsan/tests/unit/tsan_vector_test.cc	/^TEST(Vector, Stride) {$/;"	f	namespace:__tsan
THREADLOCAL	sanitizer_common/sanitizer_internal_defs.h	36;"	d
THREAD_CALLING_CONV	sanitizer_common/sanitizer_internal_defs.h	63;"	d
THREAD_CALLING_CONV	sanitizer_common/sanitizer_internal_defs.h	66;"	d
TK_Float	ubsan/ubsan_value.h	/^    TK_Float = 0x0001,$/;"	e	enum:__ubsan::TypeDescriptor::Kind
TK_Integer	ubsan/ubsan_value.h	/^    TK_Integer = 0x0000,$/;"	e	enum:__ubsan::TypeDescriptor::Kind
TK_Unknown	ubsan/ubsan_value.h	/^    TK_Unknown = 0xffff$/;"	e	enum:__ubsan::TypeDescriptor::Kind
TRAMPOLINE_SIZE	enable_execute_stack.c	26;"	d	file:
TRAMPOLINE_SIZE	enable_execute_stack.c	28;"	d	file:
TSAN_CLOCK_H	tsan/rtl/tsan_clock.h	14;"	d
TSAN_DEBUG	tsan/rtl/tsan_defs.h	22;"	d
TSAN_DEFS_H	tsan/rtl/tsan_defs.h	15;"	d
TSAN_FLAGS_H	tsan/rtl/tsan_flags.h	15;"	d
TSAN_HISTORY_SIZE	tsan/rtl/tsan_trace.h	23;"	d
TSAN_INTERCEPT	tsan/rtl/tsan_interceptors.h	50;"	d
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(char*, strchr, char *s, int c) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(char*, strchrnul, char *s, int c) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(char*, strcpy, char *dst, const char *src) {  \/\/ NOLINT$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(char*, strncpy, char *dst, char *src, uptr n) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(char*, strrchr, char *s, int c) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(const char*, strstr, const char *s1, const char *s2) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, __cxa_guard_acquire, char *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, atexit, void (*f)()) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, epoll_ctl, int epfd, int op, int fd, void *ev) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, epoll_wait, int epfd, void *ev, int cnt, int timeout) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, kill, int pid, int sig) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, memcmp, const void *s1, const void *s2, uptr n) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, munmap, void *addr, long_t sz) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, nanosleep, void *req, void *rem) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, posix_memalign, void **memptr, uptr align, uptr sz) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_barrier_destroy, void *b) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_barrier_init, void *b, void *a, unsigned count) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_barrier_wait, void *b) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_cond_broadcast, void *c) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_cond_destroy, void *c) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_cond_init, void *c, void *a) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_cond_signal, void *c) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_cond_timedwait, void *c, void *m, void *abstime) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_cond_wait, void *c, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_create,$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_detach, void *th) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_join, void *th, void **ret) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_kill, void *tid, int sig) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_mutex_destroy, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_mutex_init, void *m, void *a) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_mutex_lock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_mutex_timedlock, void *m, void *abstime) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_mutex_trylock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_mutex_unlock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_once, void *o, void (*f)()) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_rwlock_destroy, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_rwlock_init, void *m, void *a) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_rwlock_rdlock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_rwlock_timedrdlock, void *m, void *abstime) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_rwlock_timedwrlock, void *m, void *abstime) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_rwlock_tryrdlock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_rwlock_trywrlock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_rwlock_unlock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_rwlock_wrlock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_spin_destroy, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_spin_init, void *m, int pshared) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_spin_lock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_spin_trylock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, pthread_spin_unlock, void *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, puts, const char *s) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, raise, int sig) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, rmdir, char *path) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, sem_destroy, void *s) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, sem_getvalue, void *s, int *sval) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, sem_init, void *s, int pshared, unsigned value) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, sem_post, void *s) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, sem_timedwait, void *s, void *abstime) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, sem_trywait, void *s) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, sem_wait, void *s) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, sigaction, int sig, sigaction_t *act, sigaction_t *old) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, strcmp, const char *s1, const char *s2) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, strncmp, const char *s1, const char *s2, uptr n) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, unlink, char *path) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(int, usleep, long_t usec) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, pread, int fd, void *buf, long_t sz, unsigned off) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, pread64, int fd, void *buf, long_t sz, u64 off) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, preadv64, int fd, void *vec, int cnt, u64 off) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, pwrite, int fd, void *buf, long_t sz, unsigned off) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, pwrite64, int fd, void *buf, long_t sz, u64 off) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, pwritev64, int fd, void *vec, int cnt, u64 off) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, read, int fd, void *buf, long_t sz) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, readv, int fd, void *vec, int cnt) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, recv, int fd, void *buf, long_t len, int flags) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, recvmsg, int fd, void *msg, int flags) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, send, int fd, void *buf, long_t len, int flags) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, sendmsg, int fd, void *msg, int flags) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, write, int fd, void *buf, long_t sz) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(long_t, writev, int fd, void *vec, int cnt) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(sighandler_t, signal, int sig, sighandler_t h) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(unsigned, sleep, unsigned sec) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(uptr, fread, void *ptr, uptr size, uptr nmemb, void *f) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(uptr, fwrite, const void *p, uptr size, uptr nmemb, void *f) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(uptr, strlen, const char *s) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, calloc, uptr size, uptr n) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, fopen, char *path, char *mode) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, malloc, uptr size) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, memalign, uptr align, uptr sz) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, memchr, void *s, int c, uptr n) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, memcpy, void *dst, const void *src, uptr size) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, memmove, void *dst, void *src, uptr n) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, memrchr, char *s, int c, uptr n) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, memset, void *dst, int v, uptr size) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, mmap, void *addr, long_t sz, int prot,$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, mmap64, void *addr, long_t sz, int prot,$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, opendir, char *path) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, pvalloc, uptr sz) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, realloc, void *p, uptr size) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void*, valloc, uptr sz) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void, __cxa_guard_release, char *m) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void, cfree, void *p) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void, free, void *p) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void, longjmp, void *env, int val) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.cc	/^TSAN_INTERCEPTOR(void, siglongjmp, void *env, int val) {$/;"	f
TSAN_INTERCEPTOR	tsan/rtl/tsan_interceptors.h	49;"	d
TSAN_INTERCEPTORS_H	tsan/rtl/tsan_interceptors.h	15;"	d
TSAN_INTERFACE_ANN_H	tsan/rtl/tsan_interface_ann.h	15;"	d
TSAN_INTERFACE_ATOMIC_H	tsan/rtl/tsan_interface_atomic.h	14;"	d
TSAN_INTERFACE_H	tsan/rtl/tsan_interface.h	17;"	d
TSAN_MMAN_H	tsan/rtl/tsan_mman.h	14;"	d
TSAN_MUTEX_H	tsan/rtl/tsan_mutex.h	14;"	d
TSAN_PLATFORM_H	tsan/rtl/tsan_platform.h	16;"	d
TSAN_REPORT_H	tsan/rtl/tsan_report.h	14;"	d
TSAN_RTL_H	tsan/rtl/tsan_rtl.h	27;"	d
TSAN_STAT_H	tsan/rtl/tsan_stat.h	15;"	d
TSAN_SUPPRESSIONS_H	tsan/rtl/tsan_suppressions.h	14;"	d
TSAN_SYMBOLIZE_H	tsan/rtl/tsan_symbolize.h	14;"	d
TSAN_SYNC_H	tsan/rtl/tsan_sync.h	14;"	d
TSAN_TEST_UTIL_H	tsan/tests/rtl/tsan_test_util.h	15;"	d
TSAN_TRACE_H	tsan/rtl/tsan_trace.h	14;"	d
TSAN_VECTOR_H	tsan/rtl/tsan_vector.h	17;"	d
TSDAllocWorker	asan/tests/asan_test.cc	/^void *TSDAllocWorker(void *test_key) {$/;"	f
TSDDestructor	asan/tests/asan_test.cc	/^void TSDDestructor(void *tsd) {$/;"	f
TSDDtor	asan/asan_thread.cc	/^void AsanThreadSummary::TSDDtor(void *tsd) {$/;"	f	class:__asan::AsanThreadSummary
TSDWorker	asan/tests/asan_test.cc	/^void *TSDWorker(void *test_key) {$/;"	f
TWOp52	i386/floatundisf.S	/^#define			TWOp52			twop52-0b(%ecx)$/;"	d
TestData	tsan/tests/unit/tsan_mutex_test.cc	/^  explicit TestData(MutexType *mtx)$/;"	f	class:__tsan::TestData
TestData	tsan/tests/unit/tsan_mutex_test.cc	/^class TestData {$/;"	c	namespace:__tsan	file:
TestFlag	sanitizer_common/tests/sanitizer_flags_test.cc	/^static void TestFlag(T start_value, const char *env, T final_value) {$/;"	f	namespace:__sanitizer
TestLargeMalloc	asan/tests/asan_test.cc	/^static void TestLargeMalloc(size_t size) {$/;"	f	file:
TestMinMax	tsan/tests/unit/tsan_printf_test.cc	/^static void TestMinMax(const char *fmt, T min, T max) {$/;"	f	namespace:__tsan
TestMutexBeforeInit	tsan/tests/rtl/tsan_test_util_linux.cc	/^void TestMutexBeforeInit() {$/;"	f
TestOnlyUnmap	sanitizer_common/sanitizer_allocator64.h	/^  void TestOnlyUnmap() { primary_.TestOnlyUnmap(); }$/;"	f	class:__sanitizer::CombinedAllocator
TestOnlyUnmap	sanitizer_common/sanitizer_allocator64.h	/^  void TestOnlyUnmap() {$/;"	f	class:__sanitizer::SizeClassAllocator64
TestStackTrace	tsan/tests/unit/tsan_stack_test.cc	/^static void TestStackTrace(StackTrace *trace) {$/;"	f	namespace:__tsan
TestStrFlag	sanitizer_common/tests/sanitizer_flags_test.cc	/^static void TestStrFlag(const char *start_value, const char *env,$/;"	f	namespace:__sanitizer
TestThreadInfo	tsan/tests/unit/tsan_platform_test.cc	/^static void TestThreadInfo(bool main) {$/;"	f	namespace:__tsan
Thread	tsan/benchmarks/mini_bench_local.cc	/^void *Thread(void *arg) {$/;"	f
Thread	tsan/benchmarks/mini_bench_shared.cc	/^void *Thread(void *arg) {$/;"	f
Thread	tsan/benchmarks/start_many_threads.cc	/^void* Thread(void *unused) {$/;"	f
Thread	tsan/benchmarks/vts_many_threads_bench.cc	/^void *Thread(void *arg) {$/;"	f
Thread	tsan/lit_tests/heap_race.cc	/^void *Thread(void *a) {$/;"	f
Thread	tsan/lit_tests/mutex_destroy_locked.cc	/^void *Thread(void *p) {$/;"	f
Thread	tsan/lit_tests/sleep_sync.cc	/^void *Thread(void *p) {$/;"	f
Thread	tsan/lit_tests/sleep_sync2.cc	/^void *Thread(void *p) {$/;"	f
Thread	tsan/lit_tests/static_init1.cc	/^void *Thread(void *x) {$/;"	f
Thread	tsan/lit_tests/static_init2.cc	/^void *Thread(void *x) {$/;"	f
Thread	tsan/lit_tests/thread_leak.c	/^void *Thread(void *x) {$/;"	f
Thread	tsan/lit_tests/thread_leak2.c	/^void *Thread(void *x) {$/;"	f
Thread	tsan/lit_tests/thread_leak3.c	/^void *Thread(void *x) {$/;"	f
Thread1	asan/tests/asan_racy_double_free_test.cc	/^void *Thread1(void *unused) {$/;"	f
Thread1	tsan/lit_tests/free_race.c	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/memcpy_race.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/mop_with_offset.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/mop_with_offset2.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/race_on_barrier.c	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/race_on_barrier2.c	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/race_on_heap.cc	/^void *Thread1(void *p) {$/;"	f
Thread1	tsan/lit_tests/race_on_mutex.c	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/race_with_finished_thread.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/simple_race.c	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/simple_race.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/simple_stack.c	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/simple_stack2.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/static_init3.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/static_init4.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/static_init5.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/suppress_same_address.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/suppress_same_stacks.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/tiny_race.c	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/vptr_benign_race.cc	/^void *Thread1(void *x) {$/;"	f
Thread1	tsan/lit_tests/vptr_harmful_race.cc	/^void *Thread1(void *x) {$/;"	f
Thread2	asan/tests/asan_racy_double_free_test.cc	/^void *Thread2(void *unused) {$/;"	f
Thread2	tsan/lit_tests/free_race.c	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/memcpy_race.cc	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/mop_with_offset.cc	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/mop_with_offset2.cc	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/race_on_barrier.c	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/race_on_barrier2.c	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/race_on_heap.cc	/^void *Thread2(void *p) {$/;"	f
Thread2	tsan/lit_tests/race_on_mutex.c	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/race_with_finished_thread.cc	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/simple_race.c	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/simple_race.cc	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/simple_stack.c	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/static_init3.cc	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/suppress_same_address.cc	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/vptr_benign_race.cc	/^void *Thread2(void *x) {$/;"	f
Thread2	tsan/lit_tests/vptr_harmful_race.cc	/^void *Thread2(void *x) {$/;"	f
ThreadClock	tsan/rtl/tsan_clock.cc	/^ThreadClock::ThreadClock() {$/;"	f	class:__tsan::ThreadClock
ThreadClock	tsan/rtl/tsan_clock.h	/^struct ThreadClock {$/;"	s	namespace:__tsan
ThreadContext	tsan/rtl/tsan_rtl.cc	/^ThreadContext::ThreadContext(int tid)$/;"	f	class:__tsan::ThreadContext
ThreadContext	tsan/rtl/tsan_rtl.h	/^struct ThreadContext {$/;"	s	namespace:__tsan
ThreadCreate	tsan/rtl/tsan_rtl_thread.cc	/^int ThreadCreate(ThreadState *thr, uptr pc, uptr uid, bool detached) {$/;"	f	namespace:__tsan
ThreadDead	tsan/rtl/tsan_rtl_thread.cc	/^static void ThreadDead(ThreadState *thr, ThreadContext *tctx) {$/;"	f	namespace:__tsan
ThreadDeadInfo	tsan/rtl/tsan_rtl.h	/^struct ThreadDeadInfo {$/;"	s	namespace:__tsan
ThreadDetach	tsan/rtl/tsan_rtl_thread.cc	/^void ThreadDetach(ThreadState *thr, uptr pc, int tid) {$/;"	f	namespace:__tsan
ThreadFinalize	tsan/rtl/tsan_rtl_thread.cc	/^void ThreadFinalize(ThreadState *thr) {$/;"	f	namespace:__tsan
ThreadFinalizerGoroutine	tsan/rtl/tsan_rtl_thread.cc	/^void ThreadFinalizerGoroutine(ThreadState *thr) {$/;"	f	namespace:__tsan
ThreadFinish	tsan/rtl/tsan_rtl_thread.cc	/^void ThreadFinish(ThreadState *thr) {$/;"	f	namespace:__tsan
ThreadJoin	tsan/rtl/tsan_rtl_thread.cc	/^void ThreadJoin(ThreadState *thr, uptr pc, int tid) {$/;"	f	namespace:__tsan
ThreadParam	tsan/rtl/tsan_interceptors.cc	/^struct ThreadParam {$/;"	s	file:
ThreadSanitizerQuery	tsan/rtl/tsan_interface_ann.cc	/^const char *ThreadSanitizerQuery(const char *query) {$/;"	f
ThreadStackReuseFunc1	asan/tests/asan_test.cc	/^void *ThreadStackReuseFunc1(void *unused) {$/;"	f
ThreadStackReuseFunc2	asan/tests/asan_test.cc	/^void *ThreadStackReuseFunc2(void *unused) {$/;"	f
ThreadStart	asan/asan_thread.cc	/^thread_return_t AsanThread::ThreadStart() {$/;"	f	class:__asan::AsanThread
ThreadStart	tsan/rtl/tsan_rtl_thread.cc	/^void ThreadStart(ThreadState *thr, int tid, uptr os_id) {$/;"	f	namespace:__tsan
ThreadState	tsan/rtl/tsan_rtl.cc	/^ThreadState::ThreadState(Context *ctx, int tid, int unique_id, u64 epoch,$/;"	f	class:__tsan::ThreadState
ThreadState	tsan/rtl/tsan_rtl.h	/^struct ThreadState {$/;"	s	namespace:__tsan
ThreadStatus	tsan/rtl/tsan_rtl.h	/^enum ThreadStatus {$/;"	g	namespace:__tsan
ThreadStatusCreated	tsan/rtl/tsan_rtl.h	/^  ThreadStatusCreated,   \/\/ Created but not yet running.$/;"	e	enum:__tsan::ThreadStatus
ThreadStatusDead	tsan/rtl/tsan_rtl.h	/^  ThreadStatusDead       \/\/ Joined, but some info (trace) is still alive.$/;"	e	enum:__tsan::ThreadStatus
ThreadStatusFinished	tsan/rtl/tsan_rtl.h	/^  ThreadStatusFinished,  \/\/ Joinable thread is finished but not yet joined.$/;"	e	enum:__tsan::ThreadStatus
ThreadStatusInvalid	tsan/rtl/tsan_rtl.h	/^  ThreadStatusInvalid,   \/\/ Non-existent thread, data is invalid.$/;"	e	enum:__tsan::ThreadStatus
ThreadStatusRunning	tsan/rtl/tsan_rtl.h	/^  ThreadStatusRunning,   \/\/ The thread is currently running.$/;"	e	enum:__tsan::ThreadStatus
ThreadTid	tsan/rtl/tsan_rtl_thread.cc	/^int ThreadTid(ThreadState *thr, uptr pc, uptr uid) {$/;"	f	namespace:__tsan
ThreadedOneSizeMallocStress	asan/tests/asan_noinst_test.cc	/^void *ThreadedOneSizeMallocStress(void *unused) {$/;"	f
ThreadedQuarantineTestWorker	asan/tests/asan_noinst_test.cc	/^void *ThreadedQuarantineTestWorker(void *unused) {$/;"	f
ThreadedTestAlloc	asan/tests/asan_test.cc	/^void *ThreadedTestAlloc(void *a) {$/;"	f
ThreadedTestFree	asan/tests/asan_test.cc	/^void *ThreadedTestFree(void *a) {$/;"	f
ThreadedTestSpawn	asan/tests/asan_test.cc	/^void ThreadedTestSpawn() {$/;"	f
ThreadedTestUse	asan/tests/asan_test.cc	/^void *ThreadedTestUse(void *a) {$/;"	f
Throw	asan/tests/asan_exceptions_test.cc	/^  void Throw(const char& arg) const {$/;"	f	class:Action
ThrowFunc	asan/tests/asan_test.cc	/^NOINLINE void ThrowFunc() {$/;"	f
TidsAreEqual	tsan/rtl/tsan_rtl.h	/^  static inline bool TidsAreEqual(const Shadow s1, const Shadow s2) {$/;"	f	class:__tsan::Shadow
ToLower	sanitizer_common/sanitizer_common.h	/^INLINE int ToLower(int c) {$/;"	f	namespace:__sanitizer
ToType	ubsan/ubsan_handlers.h	/^  const TypeDescriptor &ToType;$/;"	m	struct:__ubsan::FloatCastOverflowData
TotalMemoryUsed	sanitizer_common/sanitizer_allocator64.h	/^  uptr TotalMemoryUsed() {$/;"	f	class:__sanitizer::CombinedAllocator
TotalMemoryUsed	sanitizer_common/sanitizer_allocator64.h	/^  uptr TotalMemoryUsed() {$/;"	f	class:__sanitizer::LargeMmapAllocator
TotalMemoryUsed	sanitizer_common/sanitizer_allocator64.h	/^  uptr TotalMemoryUsed() {$/;"	f	class:__sanitizer::SizeClassAllocator64
TouchStackFunc	asan/tests/asan_test.cc	/^NOINLINE void TouchStackFunc() {$/;"	f
Trace	tsan/rtl/tsan_trace.h	/^  Trace()$/;"	f	struct:__tsan::Trace
Trace	tsan/rtl/tsan_trace.h	/^struct Trace {$/;"	s	namespace:__tsan
TraceAddEvent	tsan/rtl/tsan_rtl.h	/^void ALWAYS_INLINE INLINE TraceAddEvent(ThreadState *thr, u64 epoch,$/;"	f	namespace:__tsan
TraceHeader	tsan/rtl/tsan_trace.h	/^  TraceHeader()$/;"	f	struct:__tsan::TraceHeader
TraceHeader	tsan/rtl/tsan_trace.h	/^struct TraceHeader {$/;"	s	namespace:__tsan
TraceSwitch	tsan/rtl/tsan_rtl.cc	/^void TraceSwitch(ThreadState *thr) {$/;"	f	namespace:__tsan
TryLock	tsan/tests/rtl/tsan_test_util_linux.cc	/^bool Mutex::TryLock() {$/;"	f	class:Mutex
TryLock	tsan/tests/rtl/tsan_test_util_linux.cc	/^bool ScopedThread::TryLock(const Mutex &m) {$/;"	f	class:ScopedThread
TryReadLock	tsan/tests/rtl/tsan_test_util_linux.cc	/^bool Mutex::TryReadLock() {$/;"	f	class:Mutex
TryReadLock	tsan/tests/rtl/tsan_test_util_linux.cc	/^bool ScopedThread::TryReadLock(const Mutex &m) {$/;"	f	class:ScopedThread
TsanCheckFailed	tsan/rtl/tsan_rtl_report.cc	/^void TsanCheckFailed(const char *file, int line, const char *cond,$/;"	f	namespace:__tsan
TsanFunctions	tsan/Makefile.mk	/^TsanFunctions :=$/;"	m
TsanPrintf	tsan/rtl/tsan_printf.cc	/^void TsanPrintf(const char *format, ...) {$/;"	f	namespace:__tsan
TwoRangesIntersect	tsan/rtl/tsan_rtl.h	/^  static inline bool TwoRangesIntersect(Shadow s1, Shadow s2,$/;"	f	class:__tsan::Shadow
TwoRangesIntersectSLOW	tsan/rtl/tsan_rtl.h	/^  static bool TwoRangesIntersectSLOW(const Shadow s1, const Shadow s2) {$/;"	f	class:__tsan::Shadow
Type	sanitizer_common/sanitizer_atomic.h	/^  typedef u16 Type;$/;"	t	struct:__sanitizer::atomic_uint16_t
Type	sanitizer_common/sanitizer_atomic.h	/^  typedef u32 Type;$/;"	t	struct:__sanitizer::atomic_uint32_t
Type	sanitizer_common/sanitizer_atomic.h	/^  typedef u64 Type;$/;"	t	struct:__sanitizer::atomic_uint64_t
Type	sanitizer_common/sanitizer_atomic.h	/^  typedef u8 Type;$/;"	t	struct:__sanitizer::atomic_uint8_t
Type	sanitizer_common/sanitizer_atomic.h	/^  typedef uptr Type;$/;"	t	struct:__sanitizer::atomic_uintptr_t
Type	tsan/tests/rtl/tsan_test_util.h	/^  enum Type { Normal, Spin, RW };$/;"	g	class:Mutex
Type	tsan/tests/rtl/tsan_test_util_linux.cc	/^  enum Type {$/;"	g	struct:Event	file:
Type	ubsan/ubsan_handlers.h	/^  const TypeDescriptor &Type;$/;"	m	struct:__ubsan::OverflowData
Type	ubsan/ubsan_handlers.h	/^  const TypeDescriptor &Type;$/;"	m	struct:__ubsan::TypeMismatchData
Type	ubsan/ubsan_handlers.h	/^  const TypeDescriptor &Type;$/;"	m	struct:__ubsan::VLABoundData
Type	ubsan/ubsan_value.h	/^  const TypeDescriptor &Type;$/;"	m	class:__ubsan::Value
TypeCheckKind	ubsan/ubsan_handlers.h	/^  unsigned char TypeCheckKind;$/;"	m	struct:__ubsan::TypeMismatchData
TypeDescriptor	ubsan/ubsan_value.h	/^class TypeDescriptor {$/;"	c	namespace:__ubsan
TypeInfo	ubsan/ubsan_value.h	/^  u16 TypeInfo;$/;"	m	class:__ubsan::TypeDescriptor
TypeKind	ubsan/ubsan_value.h	/^  u16 TypeKind;$/;"	m	class:__ubsan::TypeDescriptor
TypeMismatchData	ubsan/ubsan_handlers.h	/^struct TypeMismatchData {$/;"	s	namespace:__ubsan
TypeName	ubsan/ubsan_value.h	/^  char TypeName[1];$/;"	m	class:__ubsan::TypeDescriptor
U1	asan/tests/asan_test.cc	/^typedef uint8_t   U1;$/;"	t	file:
U2	asan/tests/asan_test.cc	/^typedef uint16_t  U2;$/;"	t	file:
U4	asan/tests/asan_test.cc	/^typedef uint32_t  U4;$/;"	t	file:
U8	asan/tests/asan_test.cc	/^typedef uint64_t  U8;$/;"	t	file:
UBSAN_DIAG_H	ubsan/ubsan_diag.h	14;"	d
UBSAN_HANDLERS_H	ubsan/ubsan_handlers.h	14;"	d
UBSAN_VALUE_H	ubsan/ubsan_value.h	15;"	d
UINT32_MAX	sanitizer_common/sanitizer_internal_defs.h	163;"	d
UINT32_MAX	sanitizer_common/sanitizer_internal_defs.h	164;"	d
UINT64_MAX	sanitizer_common/sanitizer_internal_defs.h	169;"	d
UINT64_MAX	sanitizer_common/sanitizer_internal_defs.h	170;"	d
UInt	ubsan/ubsan_diag.h	/^      UIntMax UInt;$/;"	m	union:__ubsan::Diag::Arg::__anon31
UIntMax	ubsan/ubsan_value.h	/^typedef u128 UIntMax;$/;"	t	namespace:__ubsan
UNIMPLEMENTED	sanitizer_common/sanitizer_internal_defs.h	138;"	d
UNLIKELY	sanitizer_common/sanitizer_internal_defs.h	56;"	d
UNREACHABLE	sanitizer_common/sanitizer_internal_defs.h	133;"	d
UNUSED	sanitizer_common/sanitizer_internal_defs.h	57;"	d
UNWIND_CONTINUE	asan/asan_linux.cc	106;"	d	file:
UNWIND_CONTINUE	asan/asan_linux.cc	109;"	d	file:
UNWIND_STOP	asan/asan_linux.cc	105;"	d	file:
UNWIND_STOP	asan/asan_linux.cc	108;"	d	file:
USED	asan/tests/asan_test_utils.h	33;"	d
USED	asan/tests/asan_test_utils.h	36;"	d
USED	sanitizer_common/sanitizer_internal_defs.h	58;"	d
UncompressStack	sanitizer_common/sanitizer_stacktrace.cc	/^void StackTrace::UncompressStack(StackTrace *stack,$/;"	f	class:__sanitizer::StackTrace
UnderscopeLongJmpFunc1	asan/tests/asan_test.cc	/^NOINLINE void UnderscopeLongJmpFunc1(jmp_buf buf) {$/;"	f
Unlock	asan/asan_linux.cc	/^void AsanLock::Unlock() {$/;"	f	class:__asan::AsanLock
Unlock	asan/asan_mac.cc	/^void AsanLock::Unlock() {$/;"	f	class:__asan::AsanLock
Unlock	asan/asan_win.cc	/^void AsanLock::Unlock() {$/;"	f	class:__asan::AsanLock
Unlock	sanitizer_common/sanitizer_mutex.h	/^  void Unlock() {$/;"	f	class:__sanitizer::StaticSpinMutex
Unlock	tsan/benchmarks/vts_many_threads_bench.cc	/^  void Unlock() { pthread_mutex_unlock(&m_); }$/;"	f	class:Mutex
Unlock	tsan/rtl/tsan_mutex.cc	/^void DeadlockDetector::Unlock(MutexType t) {$/;"	f	class:__tsan::DeadlockDetector
Unlock	tsan/rtl/tsan_mutex.cc	/^void Mutex::Unlock() {$/;"	f	class:__tsan::Mutex
Unlock	tsan/tests/rtl/tsan_test_util_linux.cc	/^void Mutex::Unlock() {$/;"	f	class:Mutex
Unlock	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Unlock(const Mutex &m) {$/;"	f	class:ScopedThread
UnmapOrDie	sanitizer_common/sanitizer_posix.cc	/^void UnmapOrDie(void *addr, uptr size) {$/;"	f	namespace:__sanitizer
UnmapOrDie	sanitizer_common/sanitizer_win.cc	/^void UnmapOrDie(void *addr, uptr size) {$/;"	f	namespace:__sanitizer
UnpoisonGlobal	asan/asan_globals.cc	/^static void UnpoisonGlobal(const Global *g) {$/;"	f	namespace:__asan
UnreachableData	ubsan/ubsan_handlers.h	/^struct UnreachableData {$/;"	s	namespace:__ubsan
UnregisterGlobal	asan/asan_globals.cc	/^static void UnregisterGlobal(const Global *g) {$/;"	f	namespace:__asan
UnregisterThread	asan/asan_thread_registry.cc	/^void AsanThreadRegistry::UnregisterThread(AsanThread *thread) {$/;"	f	class:__asan::AsanThreadRegistry
UnsetAlternateSignalStack	asan/asan_posix.cc	/^void UnsetAlternateSignalStack() {$/;"	f	namespace:__asan
UnsetAlternateSignalStack	asan/asan_win.cc	/^void UnsetAlternateSignalStack() {$/;"	f	namespace:__asan
Unwind_GetIP	asan/asan_linux.cc	/^uptr Unwind_GetIP(struct _Unwind_Context *ctx) {$/;"	f	namespace:__asan
Unwind_Trace	asan/asan_linux.cc	/^_Unwind_Reason_Code Unwind_Trace(struct _Unwind_Context *ctx,$/;"	f	namespace:__asan
UpdateAccumulatedStatsUnlocked	asan/asan_thread_registry.cc	/^void AsanThreadRegistry::UpdateAccumulatedStatsUnlocked() {$/;"	f	class:__asan::AsanThreadRegistry
UseThenFreeThenUse	asan/tests/asan_test.cc	/^NOINLINE static void UseThenFreeThenUse() {$/;"	f	file:
UsedSize	asan/asan_allocator.cc	/^uptr AsanChunkView::UsedSize() { return chunk_->used_size; }$/;"	f	class:__asan::AsanChunkView
VLABoundData	ubsan/ubsan_handlers.h	/^struct VLABoundData {$/;"	s	namespace:__ubsan
VPTR_UPDATE	tsan/tests/rtl/tsan_test_util_linux.cc	/^    VPTR_UPDATE,$/;"	e	enum:Event::Type	file:
VSNPrintf	sanitizer_common/sanitizer_printf.cc	/^int VSNPrintf(char *buff, int buff_length,$/;"	f	namespace:__sanitizer
Val	ubsan/ubsan_value.h	/^  ValueHandle Val;$/;"	m	class:__ubsan::Value
ValgrindSlowdown	tsan/rtl/tsan_interface_ann.cc	/^double __attribute__((weak)) ValgrindSlowdown(void) {$/;"	f
Value	ubsan/ubsan_value.h	/^  Value(const TypeDescriptor &Type, ValueHandle Val) : Type(Type), Val(Val) {}$/;"	f	class:__ubsan::Value
Value	ubsan/ubsan_value.h	/^class Value {$/;"	c	namespace:__ubsan
ValueHandle	ubsan/ubsan_value.h	/^typedef uptr ValueHandle;$/;"	t	namespace:__ubsan
Vector	tsan/rtl/tsan_vector.h	/^  explicit Vector(MBlockType typ)$/;"	f	class:__tsan::Vector
Vector	tsan/rtl/tsan_vector.h	/^class Vector {$/;"	c	namespace:__tsan
VptrUpdate	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::VptrUpdate(const MemLoc &vptr,$/;"	f	class:ScopedThread
WEAK	sanitizer_common/sanitizer_internal_defs.h	24;"	d
WRAP	interception/interception.h	100;"	d
WRAP	interception/interception.h	106;"	d
WRAP	interception/interception.h	90;"	d
WRAP	interception/interception.h	96;"	d
WRAPPER_NAME	interception/interception.h	101;"	d
WRAPPER_NAME	interception/interception.h	107;"	d
WRAPPER_NAME	interception/interception.h	91;"	d
WRAPPER_NAME	interception/interception.h	97;"	d
WRITE	tsan/tests/rtl/tsan_test_util_linux.cc	/^    WRITE,$/;"	e	enum:Event::Type	file:
WTFAnnotateBenignRaceSized	tsan/rtl/tsan_interface_ann.cc	/^void WTFAnnotateBenignRaceSized(char *f, int l, uptr mem, uptr sz, char *desc) {$/;"	f
WTFAnnotateHappensAfter	tsan/rtl/tsan_interface_ann.cc	/^void WTFAnnotateHappensAfter(char *f, int l, uptr addr) {$/;"	f
WTFAnnotateHappensBefore	tsan/rtl/tsan_interface_ann.cc	/^void WTFAnnotateHappensBefore(char *f, int l, uptr addr) {$/;"	f
WarnMacFreeUnallocated	asan/asan_report.cc	/^void WarnMacFreeUnallocated($/;"	f	namespace:__asan
WorkerThread	tsan/tests/unit/tsan_platform_test.cc	/^static void *WorkerThread(void *arg) {$/;"	f	namespace:__tsan
Write	tsan/tests/rtl/tsan_test_util.h	/^  void Write(const MemLoc &ml, int size, bool expect_race = false) {$/;"	f	class:ScopedThread
Write	tsan/tests/unit/tsan_mutex_test.cc	/^  void Write() {$/;"	f	class:__tsan::TestData
Write1	tsan/tests/rtl/tsan_test_util.h	/^  void Write1(const MemLoc &ml, bool expect_race = false) {$/;"	f	class:ScopedThread
Write2	tsan/tests/rtl/tsan_test_util.h	/^  void Write2(const MemLoc &ml, bool expect_race = false) {$/;"	f	class:ScopedThread
Write4	tsan/tests/rtl/tsan_test_util.h	/^  void Write4(const MemLoc &ml, bool expect_race = false) {$/;"	f	class:ScopedThread
Write8	tsan/tests/rtl/tsan_test_util.h	/^  void Write8(const MemLoc &ml, bool expect_race = false) {$/;"	f	class:ScopedThread
WriteJumpInstruction	interception/interception_win.cc	/^static void WriteJumpInstruction(char *jmp_from, char *to) {$/;"	f	namespace:__interception
WriteMemoryProfile	tsan/rtl/tsan_rtl.cc	/^static void WriteMemoryProfile(char *buf, uptr buf_size, int num) {$/;"	f	namespace:__tsan
WrongFree	asan/tests/asan_test.cc	/^void WrongFree() {$/;"	f
X	tsan/lit_tests/sleep_sync.cc	/^int X = 0;$/;"	v
X	tsan/lit_tests/sleep_sync2.cc	/^int X = 0;$/;"	v
X	tsan/lit_tests/suppress_same_address.cc	/^int X;$/;"	v
_CrtDbgReport	asan/asan_malloc_win.cc	/^int _CrtDbgReport(int, const char*, int,$/;"	f
_CrtDbgReportW	asan/asan_malloc_win.cc	/^int _CrtDbgReportW(int reportType, const wchar_t*, int,$/;"	f
_CrtSetReportMode	asan/asan_malloc_win.cc	/^int _CrtSetReportMode(int, int) {$/;"	f
_DYNAMIC	asan/asan_linux.cc	/^extern "C" void* _DYNAMIC;$/;"	v
_UA_CLEANUP_PHASE	gcc_personality_v0.c	/^    _UA_CLEANUP_PHASE = 2,$/;"	e	enum:__anon8	file:
_UA_END_OF_STACK	gcc_personality_v0.c	/^    _UA_END_OF_STACK = 16$/;"	e	enum:__anon8	file:
_UA_FORCE_UNWIND	gcc_personality_v0.c	/^    _UA_FORCE_UNWIND = 8,$/;"	e	enum:__anon8	file:
_UA_HANDLER_FRAME	gcc_personality_v0.c	/^    _UA_HANDLER_FRAME = 4,$/;"	e	enum:__anon8	file:
_UA_SEARCH_PHASE	gcc_personality_v0.c	/^    _UA_SEARCH_PHASE = 1,$/;"	e	enum:__anon8	file:
_URC_CONTINUE_UNWIND	gcc_personality_v0.c	/^    _URC_CONTINUE_UNWIND = 8$/;"	e	enum:__anon7	file:
_URC_END_OF_STACK	gcc_personality_v0.c	/^    _URC_END_OF_STACK = 5,$/;"	e	enum:__anon7	file:
_URC_FATAL_PHASE1_ERROR	gcc_personality_v0.c	/^    _URC_FATAL_PHASE1_ERROR = 3,$/;"	e	enum:__anon7	file:
_URC_FATAL_PHASE2_ERROR	gcc_personality_v0.c	/^    _URC_FATAL_PHASE2_ERROR = 2,$/;"	e	enum:__anon7	file:
_URC_FOREIGN_EXCEPTION_CAUGHT	gcc_personality_v0.c	/^    _URC_FOREIGN_EXCEPTION_CAUGHT = 1,$/;"	e	enum:__anon7	file:
_URC_HANDLER_FOUND	gcc_personality_v0.c	/^    _URC_HANDLER_FOUND = 6,$/;"	e	enum:__anon7	file:
_URC_INSTALL_CONTEXT	gcc_personality_v0.c	/^    _URC_INSTALL_CONTEXT = 7,$/;"	e	enum:__anon7	file:
_URC_NORMAL_STOP	gcc_personality_v0.c	/^    _URC_NORMAL_STOP = 4,$/;"	e	enum:__anon7	file:
_URC_NO_REASON	gcc_personality_v0.c	/^    _URC_NO_REASON = 0,$/;"	e	enum:__anon7	file:
_Unwind_Action	gcc_personality_v0.c	/^} _Unwind_Action;$/;"	t	typeref:enum:__anon8	file:
_Unwind_Context_t	gcc_personality_v0.c	/^typedef struct _Unwind_Context* _Unwind_Context_t;$/;"	t	typeref:struct:_Unwind_Context	file:
_Unwind_Exception	gcc_personality_v0.c	/^struct _Unwind_Exception {$/;"	s	file:
_Unwind_Reason_Code	gcc_personality_v0.c	/^} _Unwind_Reason_Code;$/;"	t	typeref:enum:__anon7	file:
_YUGA_BIG_ENDIAN	int_endianness.h	24;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	27;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	39;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	42;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	52;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	55;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	68;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	75;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	88;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	91;"	d
_YUGA_BIG_ENDIAN	int_endianness.h	99;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	23;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	26;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	38;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	41;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	51;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	54;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	67;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	74;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	87;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	90;"	d
_YUGA_LITTLE_ENDIAN	int_endianness.h	98;"	d
__CFRuntimeBase	asan/asan_mac.h	/^typedef struct __CFRuntimeBase {$/;"	s
__CFStrIsConstant	asan/asan_mac.cc	/^int __CFStrIsConstant(CFStringRef str) {$/;"	f
__DD_HEADER	ppc/DD.h	2;"	d
__INT64_C	sanitizer_common/sanitizer_internal_defs.h	150;"	d
__INT64_C	sanitizer_common/sanitizer_internal_defs.h	153;"	d
__UINT64_C	sanitizer_common/sanitizer_internal_defs.h	151;"	d
__UINT64_C	sanitizer_common/sanitizer_internal_defs.h	154;"	d
__WORDSIZE	asan/tests/asan_test_utils.h	52;"	d
__WORDSIZE	asan/tests/asan_test_utils.h	54;"	d
__WORDSIZE	sanitizer_common/sanitizer_internal_defs.h	74;"	d
__WORDSIZE	sanitizer_common/sanitizer_internal_defs.h	76;"	d
__absvdi2	absvdi2.c	/^__absvdi2(di_int a)$/;"	f
__absvsi2	absvsi2.c	/^__absvsi2(si_int a)$/;"	f
__absvti2	absvti2.c	/^__absvti2(ti_int a)$/;"	f
__addvdi3	addvdi3.c	/^__addvdi3(di_int a, di_int b)$/;"	f
__addvsi3	addvsi3.c	/^__addvsi3(si_int a, si_int b)$/;"	f
__addvti3	addvti3.c	/^__addvti3(ti_int a, ti_int b)$/;"	f
__asan	asan/asan_allocator.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_allocator.h	/^namespace __asan {$/;"	n
__asan	asan/asan_flags.h	/^namespace __asan {$/;"	n
__asan	asan/asan_globals.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_interceptors.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_interceptors.h	/^namespace __asan {$/;"	n
__asan	asan/asan_internal.h	/^namespace __asan {$/;"	n
__asan	asan/asan_linux.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_lock.h	/^namespace __asan {$/;"	n
__asan	asan/asan_mac.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_mac.h	/^namespace __asan {$/;"	n
__asan	asan/asan_malloc_linux.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_malloc_mac.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_malloc_win.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_mapping.h	/^namespace __asan {$/;"	n
__asan	asan/asan_new_delete.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_poisoning.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_posix.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_report.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_report.h	/^namespace __asan {$/;"	n
__asan	asan/asan_rtl.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_stack.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_stack.h	/^namespace __asan {$/;"	n
__asan	asan/asan_stats.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_stats.h	/^namespace __asan {$/;"	n
__asan	asan/asan_thread.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_thread.h	/^namespace __asan {$/;"	n
__asan	asan/asan_thread_registry.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/asan_thread_registry.h	/^namespace __asan {$/;"	n
__asan	asan/asan_win.cc	/^namespace __asan {$/;"	n	file:
__asan	asan/dynamic/asan_interceptors_dynamic.cc	/^namespace __asan {$/;"	n	file:
__asan_address_is_poisoned	asan/asan_poisoning.cc	/^bool __asan_address_is_poisoned(void const volatile *addr) {$/;"	f
__asan_after_dynamic_init	asan/asan_globals.cc	/^void __asan_after_dynamic_init() {$/;"	f
__asan_before_dynamic_init	asan/asan_globals.cc	/^void __asan_before_dynamic_init(uptr first_addr, uptr last_addr) {$/;"	f
__asan_default_options	asan/asan_rtl.cc	/^const char* __asan_default_options() { return ""; }$/;"	f
__asan_default_options	asan/lit_tests/default_options.cc	/^const char *__asan_default_options() {$/;"	f
__asan_free_hook	asan/asan_allocator.cc	/^void __asan_free_hook(void *ptr) {$/;"	f
__asan_free_hook	asan/lit_tests/malloc_hook.cc	/^void __asan_free_hook(void *ptr) {$/;"	f
__asan_get_allocated_size	asan/asan_allocator.cc	/^uptr __asan_get_allocated_size(const void *p) {$/;"	f
__asan_get_current_allocated_bytes	asan/asan_stats.cc	/^uptr __asan_get_current_allocated_bytes() {$/;"	f
__asan_get_estimated_allocated_size	asan/asan_allocator.cc	/^uptr __asan_get_estimated_allocated_size(uptr size) {$/;"	f
__asan_get_free_bytes	asan/asan_stats.cc	/^uptr __asan_get_free_bytes() {$/;"	f
__asan_get_heap_size	asan/asan_stats.cc	/^uptr __asan_get_heap_size() {$/;"	f
__asan_get_ownership	asan/asan_allocator.cc	/^bool __asan_get_ownership(const void *p) {$/;"	f
__asan_get_unmapped_bytes	asan/asan_stats.cc	/^uptr __asan_get_unmapped_bytes() {$/;"	f
__asan_handle_no_return	asan/asan_rtl.cc	/^void NOINLINE __asan_handle_no_return() {$/;"	f
__asan_init	asan/asan_rtl.cc	/^void __asan_init() {$/;"	f
__asan_mach_override_ptr	interception/mach_override/mach_override.c	/^__asan_mach_override_ptr($/;"	f
__asan_mach_override_ptr_custom	interception/mach_override/mach_override.c	/^__asan_mach_override_ptr_custom($/;"	f
__asan_malloc_hook	asan/asan_allocator.cc	/^void __asan_malloc_hook(void *ptr, uptr size) {$/;"	f
__asan_malloc_hook	asan/lit_tests/malloc_hook.cc	/^void __asan_malloc_hook(void *ptr, size_t sz) {$/;"	f
__asan_on_error	asan/asan_report.cc	/^void __asan_on_error() {}$/;"	f
__asan_on_error	asan/lit_tests/on_error_callback.cc	/^void __asan_on_error() {$/;"	f
__asan_poison_memory_region	asan/asan_poisoning.cc	/^void __asan_poison_memory_region(void const volatile *addr, uptr size) {$/;"	f
__asan_preinit	asan/asan_rtl.cc	/^  __declspec(allocate(".CRT$XIB")) void (*__asan_preinit)() = __asan_init;$/;"	v
__asan_print_accumulated_stats	asan/asan_stats.cc	/^void __asan_print_accumulated_stats() {$/;"	f
__asan_register_global	asan/asan_globals.cc	/^void __asan_register_global(uptr addr, uptr size,$/;"	f
__asan_register_globals	asan/asan_globals.cc	/^void __asan_register_globals(__asan_global *globals, uptr n) {$/;"	f
__asan_report_error	asan/asan_report.cc	/^void __asan_report_error(uptr pc, uptr bp, uptr sp,$/;"	f
__asan_set_death_callback	asan/asan_rtl.cc	/^void NOINLINE __asan_set_death_callback(void (*callback)(void)) {$/;"	f
__asan_set_error_exit_code	asan/asan_rtl.cc	/^int NOINLINE __asan_set_error_exit_code(int exit_code) {$/;"	f
__asan_set_error_report_callback	asan/asan_report.cc	/^void NOINLINE __asan_set_error_report_callback(void (*callback)(const char*)) {$/;"	f
__asan_stack_free	asan/asan_allocator.cc	/^void __asan_stack_free(uptr ptr, uptr size, uptr real_stack) {$/;"	f
__asan_stack_malloc	asan/asan_allocator.cc	/^uptr __asan_stack_malloc(uptr size, uptr real_stack) {$/;"	f
__asan_symbolize	asan/asan_stack.cc	/^bool __asan_symbolize(const void *pc, char *out_buffer, int out_size) {$/;"	f
__asan_symbolize	asan/asan_win.cc	/^bool __asan_symbolize(const void *addr, char *out_buffer, int buffer_size) {$/;"	f
__asan_symbolize	asan/lit_tests/symbolize_callback.cc	/^bool __asan_symbolize(const void *pc, char *out_buffer, int out_size) {$/;"	f
__asan_unpoison_memory_region	asan/asan_poisoning.cc	/^void __asan_unpoison_memory_region(void const volatile *addr, uptr size) {$/;"	f
__asan_unregister_globals	asan/asan_globals.cc	/^void __asan_unregister_globals(__asan_global *globals, uptr n) {$/;"	f
__ashlti3	ashlti3.c	/^__ashlti3(ti_int a, si_int b)$/;"	f
__ashrti3	ashrti3.c	/^__ashrti3(ti_int a, si_int b)$/;"	f
__atomic_compare_exchange_c	atomic.c	/^int __atomic_compare_exchange_c(int size, void *ptr, void *expected,$/;"	f
__atomic_exchange_c	atomic.c	/^void __atomic_exchange_c(int size, void *ptr, void *val, void *old, int model) {$/;"	f
__atomic_load_c	atomic.c	/^void __atomic_load_c(int size, void *src, void *dest, int model) {$/;"	f
__atomic_store_c	atomic.c	/^void __atomic_store_c(int size, void *dest, void *src, int model) {$/;"	f
__clear_cache	clear_cache.c	/^void __clear_cache(void* start, void* end)$/;"	f
__clzdi2	clzdi2.c	/^__clzdi2(di_int a)$/;"	f
__clzsi2	clzsi2.c	/^__clzsi2(si_int a)$/;"	f
__clzti2	clzti2.c	/^__clzti2(ti_int a)$/;"	f
__cmpdi2	cmpdi2.c	/^__cmpdi2(di_int a, di_int b)$/;"	f
__cmpti2	cmpti2.c	/^__cmpti2(ti_int a, ti_int b)$/;"	f
__ctzdi2	ctzdi2.c	/^__ctzdi2(di_int a)$/;"	f
__ctzsi2	ctzsi2.c	/^__ctzsi2(si_int a)$/;"	f
__ctzti2	ctzti2.c	/^__ctzti2(ti_int a)$/;"	f
__divdc3	divdc3.c	/^__divdc3(double __a, double __b, double __c, double __d)$/;"	f
__divdi3	divdi3.c	/^__divdi3(di_int a, di_int b)$/;"	f
__divmoddi4	divmoddi4.c	/^__divmoddi4(di_int a, di_int b, di_int* rem)$/;"	f
__divmodsi4	divmodsi4.c	/^__divmodsi4(si_int a, si_int b, si_int* rem)$/;"	f
__divsc3	divsc3.c	/^__divsc3(float __a, float __b, float __c, float __d)$/;"	f
__divtc3	ppc/divtc3.c	/^__divtc3(long double a, long double b, long double c, long double d)$/;"	f
__divti3	divti3.c	/^__divti3(ti_int a, ti_int b)$/;"	f
__divxc3	divxc3.c	/^__divxc3(long double __a, long double __b, long double __c, long double __d)$/;"	f
__enable_execute_stack	enable_execute_stack.c	/^void __enable_execute_stack(void* addr)$/;"	f
__eprintf	eprintf.c	/^void __eprintf(const char* format, const char* assertion_expression,$/;"	f
__eqdf2	comparedf2.c	/^enum LE_RESULT __eqdf2(fp_t a, fp_t b) {$/;"	f
__eqsf2	comparesf2.c	/^enum LE_RESULT __eqsf2(fp_t a, fp_t b) {$/;"	f
__ffsdi2	ffsdi2.c	/^__ffsdi2(di_int a)$/;"	f
__ffsti2	ffsti2.c	/^__ffsti2(ti_int a)$/;"	f
__fixdfti	fixdfti.c	/^__fixdfti(double a)$/;"	f
__fixsfti	fixsfti.c	/^__fixsfti(float a)$/;"	f
__fixtfdi	ppc/fixtfdi.c	/^uint64_t __fixtfdi(long double input)$/;"	f
__fixunsdfti	fixunsdfti.c	/^__fixunsdfti(double a)$/;"	f
__fixunssfti	fixunssfti.c	/^__fixunssfti(float a)$/;"	f
__fixunstfdi	ppc/fixunstfdi.c	/^uint64_t __fixunstfdi(long double input)$/;"	f
__fixunsxfdi	fixunsxfdi.c	/^__fixunsxfdi(long double a)$/;"	f
__fixunsxfsi	fixunsxfsi.c	/^__fixunsxfsi(long double a)$/;"	f
__fixunsxfti	fixunsxfti.c	/^__fixunsxfti(long double a)$/;"	f
__fixxfdi	fixxfdi.c	/^__fixxfdi(long double a)$/;"	f
__fixxfti	fixxfti.c	/^__fixxfti(long double a)$/;"	f
__floatdidf	x86_64/floatdidf.c	/^double __floatdidf(int64_t a)$/;"	f
__floatdisf	x86_64/floatdisf.c	/^float __floatdisf(int64_t a)$/;"	f
__floatditf	ppc/floatditf.c	/^long double __floatditf(int64_t a) {$/;"	f
__floatdixf	floatdixf.c	/^__floatdixf(di_int a)$/;"	f
__floatdixf	x86_64/floatdixf.c	/^long double __floatdixf(int64_t a)$/;"	f
__floattidf	floattidf.c	/^__floattidf(ti_int a)$/;"	f
__floattisf	floattisf.c	/^__floattisf(ti_int a)$/;"	f
__floattixf	floattixf.c	/^__floattixf(ti_int a)$/;"	f
__floatunditf	ppc/floatunditf.c	/^long double __floatunditf(uint64_t a) {$/;"	f
__floatundixf	floatundixf.c	/^__floatundixf(du_int a)$/;"	f
__floatuntidf	floatuntidf.c	/^__floatuntidf(tu_int a)$/;"	f
__floatuntisf	floatuntisf.c	/^__floatuntisf(tu_int a)$/;"	f
__floatuntixf	floatuntixf.c	/^__floatuntixf(tu_int a)$/;"	f
__gcc_personality_sj0	gcc_personality_v0.c	/^_Unwind_Reason_Code __gcc_personality_sj0(int version, _Unwind_Action actions,$/;"	f
__gcc_qadd	ppc/gcc_qadd.c	/^long double __gcc_qadd(long double x, long double y)$/;"	f
__gcc_qdiv	ppc/gcc_qdiv.c	/^long double __gcc_qdiv(long double a, long double b)$/;"	f
__gcc_qmul	ppc/gcc_qmul.c	/^long double __gcc_qmul(long double x, long double y)$/;"	f
__gcc_qsub	ppc/gcc_qsub.c	/^long double __gcc_qsub(long double x, long double y)$/;"	f
__gedf2	comparedf2.c	/^enum GE_RESULT __gedf2(fp_t a, fp_t b) {$/;"	f
__gesf2	comparesf2.c	/^enum GE_RESULT __gesf2(fp_t a, fp_t b) {$/;"	f
__gtdf2	comparedf2.c	/^enum GE_RESULT __gtdf2(fp_t a, fp_t b) {$/;"	f
__gtsf2	comparesf2.c	/^enum GE_RESULT __gtsf2(fp_t a, fp_t b) {$/;"	f
__has_builtin	int_math.h	25;"	d
__has_feature	asan/tests/asan_test_utils.h	40;"	d
__init__	asan/scripts/asan_symbolize.py	/^  def __init__(self):$/;"	m	class:Symbolizer
__init__	asan/scripts/asan_symbolize.py	/^  def __init__(self, addr, binary):$/;"	m	class:DarwinSymbolizer
__init__	asan/scripts/asan_symbolize.py	/^  def __init__(self, binary):$/;"	m	class:Addr2LineSymbolizer
__init__	asan/scripts/asan_symbolize.py	/^  def __init__(self, binary_name_filter=None):$/;"	m	class:SymbolizationLoop
__init__	asan/scripts/asan_symbolize.py	/^  def __init__(self, filename):$/;"	m	class:BreakpadSymbolizer
__init__	asan/scripts/asan_symbolize.py	/^  def __init__(self, symbolizer_list):$/;"	m	class:ChainSymbolizer
__init__	asan/scripts/asan_symbolize.py	/^  def __init__(self, symbolizer_path):$/;"	m	class:LLVMSymbolizer
__interception	interception/interception.h	/^namespace __interception {$/;"	n
__interception	interception/interception_linux.cc	/^namespace __interception {$/;"	n	file:
__interception	interception/interception_linux.h	/^namespace __interception {$/;"	n
__interception	interception/interception_mac.cc	/^namespace __interception {$/;"	n	file:
__interception	interception/interception_mac.h	/^namespace __interception {$/;"	n
__interception	interception/interception_win.cc	/^namespace __interception {$/;"	n	file:
__interception	interception/interception_win.h	/^namespace __interception {$/;"	n
__interception_allocate_island	asan/asan_mac.cc	/^mach_error_t __interception_allocate_island(void **ptr,$/;"	f	namespace:__asan
__interception_deallocate_island	asan/asan_mac.cc	/^mach_error_t __interception_deallocate_island(void *ptr) {$/;"	f	namespace:__asan
__ledf2	comparedf2.c	/^enum LE_RESULT __ledf2(fp_t a, fp_t b) {$/;"	f
__lesf2	comparesf2.c	/^enum LE_RESULT __lesf2(fp_t a, fp_t b) {$/;"	f
__libc_malloc_dispatch	asan/asan_malloc_linux.cc	/^extern "C" const MallocDebug* __libc_malloc_dispatch;$/;"	v
__lshrti3	lshrti3.c	/^__lshrti3(ti_int a, si_int b)$/;"	f
__ltdf2	comparedf2.c	/^enum LE_RESULT __ltdf2(fp_t a, fp_t b) {$/;"	f
__ltsf2	comparesf2.c	/^enum LE_RESULT __ltsf2(fp_t a, fp_t b) {$/;"	f
__moddi3	moddi3.c	/^__moddi3(di_int a, di_int b)$/;"	f
__modsi3	modsi3.c	/^__modsi3(si_int a, si_int b)$/;"	f
__modti3	modti3.c	/^__modti3(ti_int a, ti_int b)$/;"	f
__muldc3	muldc3.c	/^__muldc3(double __a, double __b, double __c, double __d)$/;"	f
__mulddi3	multi3.c	/^__mulddi3(du_int a, du_int b)$/;"	f	file:
__muldsi3	muldi3.c	/^__muldsi3(su_int a, su_int b)$/;"	f	file:
__mulodi4	mulodi4.c	/^__mulodi4(di_int a, di_int b, int* overflow)$/;"	f
__mulosi4	mulosi4.c	/^__mulosi4(si_int a, si_int b, int* overflow)$/;"	f
__muloti4	muloti4.c	/^__muloti4(ti_int a, ti_int b, int* overflow)$/;"	f
__mulsc3	mulsc3.c	/^__mulsc3(float __a, float __b, float __c, float __d)$/;"	f
__multc3	ppc/multc3.c	/^__multc3(long double a, long double b, long double c, long double d)$/;"	f
__multi3	multi3.c	/^__multi3(ti_int a, ti_int b)$/;"	f
__mulvdi3	mulvdi3.c	/^__mulvdi3(di_int a, di_int b)$/;"	f
__mulvsi3	mulvsi3.c	/^__mulvsi3(si_int a, si_int b)$/;"	f
__mulvti3	mulvti3.c	/^__mulvti3(ti_int a, ti_int b)$/;"	f
__mulxc3	mulxc3.c	/^__mulxc3(long double __a, long double __b, long double __c, long double __d)$/;"	f
__nedf2	comparedf2.c	/^enum LE_RESULT __nedf2(fp_t a, fp_t b) {$/;"	f
__negdi2	negdi2.c	/^__negdi2(di_int a)$/;"	f
__negti2	negti2.c	/^__negti2(ti_int a)$/;"	f
__negvdi2	negvdi2.c	/^__negvdi2(di_int a)$/;"	f
__negvsi2	negvsi2.c	/^__negvsi2(si_int a)$/;"	f
__negvti2	negvti2.c	/^__negvti2(ti_int a)$/;"	f
__nesf2	comparesf2.c	/^enum LE_RESULT __nesf2(fp_t a, fp_t b) {$/;"	f
__paritydi2	paritydi2.c	/^__paritydi2(di_int a)$/;"	f
__paritysi2	paritysi2.c	/^__paritysi2(si_int a)$/;"	f
__parityti2	parityti2.c	/^__parityti2(ti_int a)$/;"	f
__popcountdi2	popcountdi2.c	/^__popcountdi2(di_int a)$/;"	f
__popcountsi2	popcountsi2.c	/^__popcountsi2(si_int a)$/;"	f
__popcountti2	popcountti2.c	/^__popcountti2(ti_int a)$/;"	f
__powidf2	powidf2.c	/^__powidf2(double a, si_int b)$/;"	f
__powisf2	powisf2.c	/^__powisf2(float a, si_int b)$/;"	f
__powitf2	powitf2.c	/^__powitf2(long double a, si_int b)$/;"	f
__powixf2	powixf2.c	/^__powixf2(long double a, si_int b)$/;"	f
__sanitizer	sanitizer_common/sanitizer_allocator.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_allocator64.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_atomic.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_atomic_clang.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_atomic_msvc.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_common.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_common.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_flags.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_flags.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_internal_defs.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_libc.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_libc.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_linux.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_list.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_mac.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_mutex.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_placement_new.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_posix.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_printf.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_procmaps.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_stackdepot.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_stackdepot.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_stacktrace.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_stacktrace.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_symbolizer.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_symbolizer.h	/^namespace __sanitizer {$/;"	n
__sanitizer	sanitizer_common/sanitizer_symbolizer_linux.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_symbolizer_mac.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_symbolizer_win.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/sanitizer_win.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/tests/sanitizer_allocator_test.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/tests/sanitizer_common_test.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/tests/sanitizer_flags_test.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/tests/sanitizer_list_test.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	sanitizer_common/tests/sanitizer_stackdepot_test.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer	tsan/rtl/tsan_printf.cc	/^namespace __sanitizer {$/;"	n	file:
__sanitizer_set_report_path	sanitizer_common/sanitizer_common.cc	/^void __sanitizer_set_report_path(const char *path) {$/;"	f
__subvdi3	subvdi3.c	/^__subvdi3(di_int a, di_int b)$/;"	f
__subvsi3	subvsi3.c	/^__subvsi3(si_int a, si_int b)$/;"	f
__subvti3	subvti3.c	/^__subvti3(ti_int a, ti_int b)$/;"	f
__trampoline_setup	trampoline_setup.c	/^void __trampoline_setup(uint32_t* trampOnStack, int trampSizeAllocated, $/;"	f
__tsan	tsan/go/tsan_go.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_clock.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_clock.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_defs.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_flags.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_flags.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_interceptors.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_interceptors.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_interface_ann.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_md5.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_mman.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_mman.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_mutex.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_mutex.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_platform.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_platform_linux.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_platform_mac.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_printf.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_report.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_report.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_rtl.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_rtl.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_rtl_mutex.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_rtl_report.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_rtl_thread.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_stat.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_stat.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_suppressions.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_suppressions.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_symbolize.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_symbolize.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_sync.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/rtl/tsan_sync.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_trace.h	/^namespace __tsan {$/;"	n
__tsan	tsan/rtl/tsan_vector.h	/^namespace __tsan {$/;"	n
__tsan	tsan/tests/rtl/tsan_mutex.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/rtl/tsan_string.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/rtl/tsan_test_util_linux.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_clock_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_flags_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_mman_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_mutex_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_platform_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_printf_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_shadow_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_stack_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_suppressions_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_sync_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan	tsan/tests/unit/tsan_vector_test.cc	/^namespace __tsan {$/;"	n	file:
__tsan_acquire	tsan/go/tsan_go.cc	/^void __tsan_acquire(int goid, void *addr) {$/;"	f
__tsan_acquire	tsan/rtl/tsan_interface.cc	/^void __tsan_acquire(void *addr) {$/;"	f
__tsan_atomic16	tsan/rtl/tsan_interface_atomic.h	/^typedef short __tsan_atomic16;  \/\/ NOLINT$/;"	t
__tsan_atomic16_compare_exchange_strong	tsan/rtl/tsan_interface_atomic.cc	/^int __tsan_atomic16_compare_exchange_strong(volatile a16 *a, a16 *c, a16 v,$/;"	f
__tsan_atomic16_compare_exchange_weak	tsan/rtl/tsan_interface_atomic.cc	/^int __tsan_atomic16_compare_exchange_weak(volatile a16 *a, a16 *c, a16 v,$/;"	f
__tsan_atomic16_exchange	tsan/rtl/tsan_interface_atomic.cc	/^a16 __tsan_atomic16_exchange(volatile a16 *a, a16 v, morder mo) {$/;"	f
__tsan_atomic16_fetch_add	tsan/rtl/tsan_interface_atomic.cc	/^a16 __tsan_atomic16_fetch_add(volatile a16 *a, a16 v, morder mo) {$/;"	f
__tsan_atomic16_fetch_and	tsan/rtl/tsan_interface_atomic.cc	/^a16 __tsan_atomic16_fetch_and(volatile a16 *a, a16 v, morder mo) {$/;"	f
__tsan_atomic16_fetch_or	tsan/rtl/tsan_interface_atomic.cc	/^a16 __tsan_atomic16_fetch_or(volatile a16 *a, a16 v, morder mo) {$/;"	f
__tsan_atomic16_fetch_sub	tsan/rtl/tsan_interface_atomic.cc	/^a16 __tsan_atomic16_fetch_sub(volatile a16 *a, a16 v, morder mo) {$/;"	f
__tsan_atomic16_fetch_xor	tsan/rtl/tsan_interface_atomic.cc	/^a16 __tsan_atomic16_fetch_xor(volatile a16 *a, a16 v, morder mo) {$/;"	f
__tsan_atomic16_load	tsan/rtl/tsan_interface_atomic.cc	/^a16 __tsan_atomic16_load(const volatile a16 *a, morder mo) {$/;"	f
__tsan_atomic16_store	tsan/rtl/tsan_interface_atomic.cc	/^void __tsan_atomic16_store(volatile a16 *a, a16 v, morder mo) {$/;"	f
__tsan_atomic32	tsan/rtl/tsan_interface_atomic.h	/^typedef int   __tsan_atomic32;$/;"	t
__tsan_atomic32_compare_exchange_strong	tsan/rtl/tsan_interface_atomic.cc	/^int __tsan_atomic32_compare_exchange_strong(volatile a32 *a, a32 *c, a32 v,$/;"	f
__tsan_atomic32_compare_exchange_weak	tsan/rtl/tsan_interface_atomic.cc	/^int __tsan_atomic32_compare_exchange_weak(volatile a32 *a, a32 *c, a32 v,$/;"	f
__tsan_atomic32_exchange	tsan/rtl/tsan_interface_atomic.cc	/^a32 __tsan_atomic32_exchange(volatile a32 *a, a32 v, morder mo) {$/;"	f
__tsan_atomic32_fetch_add	tsan/rtl/tsan_interface_atomic.cc	/^a32 __tsan_atomic32_fetch_add(volatile a32 *a, a32 v, morder mo) {$/;"	f
__tsan_atomic32_fetch_and	tsan/rtl/tsan_interface_atomic.cc	/^a32 __tsan_atomic32_fetch_and(volatile a32 *a, a32 v, morder mo) {$/;"	f
__tsan_atomic32_fetch_or	tsan/rtl/tsan_interface_atomic.cc	/^a32 __tsan_atomic32_fetch_or(volatile a32 *a, a32 v, morder mo) {$/;"	f
__tsan_atomic32_fetch_sub	tsan/rtl/tsan_interface_atomic.cc	/^a32 __tsan_atomic32_fetch_sub(volatile a32 *a, a32 v, morder mo) {$/;"	f
__tsan_atomic32_fetch_xor	tsan/rtl/tsan_interface_atomic.cc	/^a32 __tsan_atomic32_fetch_xor(volatile a32 *a, a32 v, morder mo) {$/;"	f
__tsan_atomic32_load	tsan/rtl/tsan_interface_atomic.cc	/^a32 __tsan_atomic32_load(const volatile a32 *a, morder mo) {$/;"	f
__tsan_atomic32_store	tsan/rtl/tsan_interface_atomic.cc	/^void __tsan_atomic32_store(volatile a32 *a, a32 v, morder mo) {$/;"	f
__tsan_atomic64	tsan/rtl/tsan_interface_atomic.h	/^typedef long  __tsan_atomic64;  \/\/ NOLINT$/;"	t
__tsan_atomic64_compare_exchange_strong	tsan/rtl/tsan_interface_atomic.cc	/^int __tsan_atomic64_compare_exchange_strong(volatile a64 *a, a64 *c, a64 v,$/;"	f
__tsan_atomic64_compare_exchange_weak	tsan/rtl/tsan_interface_atomic.cc	/^int __tsan_atomic64_compare_exchange_weak(volatile a64 *a, a64 *c, a64 v,$/;"	f
__tsan_atomic64_exchange	tsan/rtl/tsan_interface_atomic.cc	/^a64 __tsan_atomic64_exchange(volatile a64 *a, a64 v, morder mo) {$/;"	f
__tsan_atomic64_fetch_add	tsan/rtl/tsan_interface_atomic.cc	/^a64 __tsan_atomic64_fetch_add(volatile a64 *a, a64 v, morder mo) {$/;"	f
__tsan_atomic64_fetch_and	tsan/rtl/tsan_interface_atomic.cc	/^a64 __tsan_atomic64_fetch_and(volatile a64 *a, a64 v, morder mo) {$/;"	f
__tsan_atomic64_fetch_or	tsan/rtl/tsan_interface_atomic.cc	/^a64 __tsan_atomic64_fetch_or(volatile a64 *a, a64 v, morder mo) {$/;"	f
__tsan_atomic64_fetch_sub	tsan/rtl/tsan_interface_atomic.cc	/^a64 __tsan_atomic64_fetch_sub(volatile a64 *a, a64 v, morder mo) {$/;"	f
__tsan_atomic64_fetch_xor	tsan/rtl/tsan_interface_atomic.cc	/^a64 __tsan_atomic64_fetch_xor(volatile a64 *a, a64 v, morder mo) {$/;"	f
__tsan_atomic64_load	tsan/rtl/tsan_interface_atomic.cc	/^a64 __tsan_atomic64_load(const volatile a64 *a, morder mo) {$/;"	f
__tsan_atomic64_store	tsan/rtl/tsan_interface_atomic.cc	/^void __tsan_atomic64_store(volatile a64 *a, a64 v, morder mo) {$/;"	f
__tsan_atomic8	tsan/rtl/tsan_interface_atomic.h	/^typedef char  __tsan_atomic8;$/;"	t
__tsan_atomic8_compare_exchange_strong	tsan/rtl/tsan_interface_atomic.cc	/^int __tsan_atomic8_compare_exchange_strong(volatile a8 *a, a8 *c, a8 v,$/;"	f
__tsan_atomic8_compare_exchange_weak	tsan/rtl/tsan_interface_atomic.cc	/^int __tsan_atomic8_compare_exchange_weak(volatile a8 *a, a8 *c, a8 v,$/;"	f
__tsan_atomic8_exchange	tsan/rtl/tsan_interface_atomic.cc	/^a8 __tsan_atomic8_exchange(volatile a8 *a, a8 v, morder mo) {$/;"	f
__tsan_atomic8_fetch_add	tsan/rtl/tsan_interface_atomic.cc	/^a8 __tsan_atomic8_fetch_add(volatile a8 *a, a8 v, morder mo) {$/;"	f
__tsan_atomic8_fetch_and	tsan/rtl/tsan_interface_atomic.cc	/^a8 __tsan_atomic8_fetch_and(volatile a8 *a, a8 v, morder mo) {$/;"	f
__tsan_atomic8_fetch_or	tsan/rtl/tsan_interface_atomic.cc	/^a8 __tsan_atomic8_fetch_or(volatile a8 *a, a8 v, morder mo) {$/;"	f
__tsan_atomic8_fetch_sub	tsan/rtl/tsan_interface_atomic.cc	/^a8 __tsan_atomic8_fetch_sub(volatile a8 *a, a8 v, morder mo) {$/;"	f
__tsan_atomic8_fetch_xor	tsan/rtl/tsan_interface_atomic.cc	/^a8 __tsan_atomic8_fetch_xor(volatile a8 *a, a8 v, morder mo) {$/;"	f
__tsan_atomic8_load	tsan/rtl/tsan_interface_atomic.cc	/^a8 __tsan_atomic8_load(const volatile a8 *a, morder mo) {$/;"	f
__tsan_atomic8_store	tsan/rtl/tsan_interface_atomic.cc	/^void __tsan_atomic8_store(volatile a8 *a, a8 v, morder mo) {$/;"	f
__tsan_atomic_signal_fence	tsan/rtl/tsan_interface_atomic.cc	/^void __tsan_atomic_signal_fence(morder mo) {$/;"	f
__tsan_atomic_thread_fence	tsan/rtl/tsan_interface_atomic.cc	/^void __tsan_atomic_thread_fence(morder mo) {$/;"	f
__tsan_finalizer_goroutine	tsan/go/tsan_go.cc	/^void __tsan_finalizer_goroutine(int goid) {$/;"	f
__tsan_fini	tsan/go/tsan_go.cc	/^void __tsan_fini() {$/;"	f
__tsan_free	tsan/go/tsan_go.cc	/^void __tsan_free(void *p) {$/;"	f
__tsan_free_hook	tsan/rtl/tsan_mman.cc	/^extern "C" void WEAK __tsan_free_hook(void *ptr) {$/;"	f
__tsan_func_enter	tsan/go/tsan_go.cc	/^void __tsan_func_enter(int goid, void *pc) {$/;"	f
__tsan_func_entry	tsan/rtl/tsan_interface_inl.h	/^void __tsan_func_entry(void *pc) {$/;"	f
__tsan_func_exit	tsan/go/tsan_go.cc	/^void __tsan_func_exit(int goid) {$/;"	f
__tsan_func_exit	tsan/rtl/tsan_interface_inl.h	/^void __tsan_func_exit() {$/;"	f
__tsan_go_end	tsan/go/tsan_go.cc	/^void __tsan_go_end(int goid) {$/;"	f
__tsan_go_start	tsan/go/tsan_go.cc	/^void __tsan_go_start(int pgoid, int chgoid, void *pc) {$/;"	f
__tsan_init	tsan/go/tsan_go.cc	/^void __tsan_init() {$/;"	f
__tsan_init	tsan/rtl/tsan_interface.cc	/^void __tsan_init() {$/;"	f
__tsan_malloc	tsan/go/tsan_go.cc	/^void __tsan_malloc(int goid, void *p, uptr sz, void *pc) {$/;"	f
__tsan_malloc_hook	tsan/rtl/tsan_mman.cc	/^extern "C" void WEAK __tsan_malloc_hook(void *ptr, uptr size) {$/;"	f
__tsan_memory_order	tsan/rtl/tsan_interface_atomic.h	/^} __tsan_memory_order;$/;"	t	typeref:enum:__anon30
__tsan_memory_order_acq_rel	tsan/rtl/tsan_interface_atomic.h	/^  __tsan_memory_order_acq_rel = 1 << 4,$/;"	e	enum:__anon30
__tsan_memory_order_acquire	tsan/rtl/tsan_interface_atomic.h	/^  __tsan_memory_order_acquire = 1 << 2,$/;"	e	enum:__anon30
__tsan_memory_order_consume	tsan/rtl/tsan_interface_atomic.h	/^  __tsan_memory_order_consume = 1 << 1,$/;"	e	enum:__anon30
__tsan_memory_order_relaxed	tsan/rtl/tsan_interface_atomic.h	/^  __tsan_memory_order_relaxed = 1 << 0,$/;"	e	enum:__anon30
__tsan_memory_order_release	tsan/rtl/tsan_interface_atomic.h	/^  __tsan_memory_order_release = 1 << 3,$/;"	e	enum:__anon30
__tsan_memory_order_seq_cst	tsan/rtl/tsan_interface_atomic.h	/^  __tsan_memory_order_seq_cst = 1 << 5$/;"	e	enum:__anon30
__tsan_read	tsan/go/tsan_go.cc	/^void __tsan_read(int goid, void *addr, void *pc) {$/;"	f
__tsan_read1	tsan/rtl/tsan_interface_inl.h	/^void __tsan_read1(void *addr) {$/;"	f
__tsan_read16	tsan/rtl/tsan_interface.cc	/^void __tsan_read16(void *addr) {$/;"	f
__tsan_read2	tsan/rtl/tsan_interface_inl.h	/^void __tsan_read2(void *addr) {$/;"	f
__tsan_read4	tsan/rtl/tsan_interface_inl.h	/^void __tsan_read4(void *addr) {$/;"	f
__tsan_read8	tsan/rtl/tsan_interface_inl.h	/^void __tsan_read8(void *addr) {$/;"	f
__tsan_release	tsan/go/tsan_go.cc	/^void __tsan_release(int goid, void *addr) {$/;"	f
__tsan_release	tsan/rtl/tsan_interface.cc	/^void __tsan_release(void *addr) {$/;"	f
__tsan_release_merge	tsan/go/tsan_go.cc	/^void __tsan_release_merge(int goid, void *addr) {$/;"	f
__tsan_report_race	tsan/rtl/tsan_rtl.cc	/^extern "C" void __tsan_report_race() {$/;"	f	namespace:__tsan
__tsan_report_race_thunk	tsan/rtl/tsan_rtl_amd64.S	/^__tsan_report_race_thunk:$/;"	l
__tsan_resume	tsan/rtl/tsan_rtl.cc	/^extern "C" void __tsan_resume() {$/;"	f
__tsan_resumed	tsan/rtl/tsan_rtl.cc	/^volatile int __tsan_resumed = 0;$/;"	v
__tsan_symbolize	tsan/go/test.c	/^int __tsan_symbolize(void *pc, char **img, char **rtn, char **file, int *l) {$/;"	f
__tsan_thread_start_func	tsan/rtl/tsan_interceptors.cc	/^extern "C" void *__tsan_thread_start_func(void *arg) {$/;"	f
__tsan_trace_switch	tsan/rtl/tsan_rtl.cc	/^extern "C" void __tsan_trace_switch() {$/;"	f	namespace:__tsan
__tsan_trace_switch_thunk	tsan/rtl/tsan_rtl_amd64.S	/^__tsan_trace_switch_thunk:$/;"	l
__tsan_vptr_update	tsan/rtl/tsan_interface_inl.h	/^void __tsan_vptr_update(void **vptr_p, void *new_val) {$/;"	f
__tsan_write	tsan/go/tsan_go.cc	/^void __tsan_write(int goid, void *addr, void *pc) {$/;"	f
__tsan_write1	tsan/rtl/tsan_interface_inl.h	/^void __tsan_write1(void *addr) {$/;"	f
__tsan_write16	tsan/rtl/tsan_interface.cc	/^void __tsan_write16(void *addr) {$/;"	f
__tsan_write2	tsan/rtl/tsan_interface_inl.h	/^void __tsan_write2(void *addr) {$/;"	f
__tsan_write4	tsan/rtl/tsan_interface_inl.h	/^void __tsan_write4(void *addr) {$/;"	f
__tsan_write8	tsan/rtl/tsan_interface_inl.h	/^void __tsan_write8(void *addr) {$/;"	f
__ubsan	ubsan/ubsan_diag.h	/^namespace __ubsan {$/;"	n
__ubsan	ubsan/ubsan_handlers.h	/^namespace __ubsan {$/;"	n
__ubsan	ubsan/ubsan_value.h	/^namespace __ubsan {$/;"	n
__ubsan_handle_add_overflow	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_add_overflow(OverflowData *Data,$/;"	f	class:__ubsan
__ubsan_handle_builtin_unreachable	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_builtin_unreachable(UnreachableData *Data) {$/;"	f	class:__ubsan
__ubsan_handle_divrem_overflow	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_divrem_overflow(OverflowData *Data,$/;"	f	class:__ubsan
__ubsan_handle_float_cast_overflow	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_float_cast_overflow(FloatCastOverflowData *Data,$/;"	f	class:__ubsan
__ubsan_handle_missing_return	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_missing_return(UnreachableData *Data) {$/;"	f	class:__ubsan
__ubsan_handle_mul_overflow	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_mul_overflow(OverflowData *Data,$/;"	f	class:__ubsan
__ubsan_handle_negate_overflow	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_negate_overflow(OverflowData *Data,$/;"	f	class:__ubsan
__ubsan_handle_shift_out_of_bounds	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_shift_out_of_bounds(ShiftOutOfBoundsData *Data,$/;"	f	class:__ubsan
__ubsan_handle_sub_overflow	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_sub_overflow(OverflowData *Data,$/;"	f	class:__ubsan
__ubsan_handle_type_mismatch	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_type_mismatch(TypeMismatchData *Data,$/;"	f	class:__ubsan
__ubsan_handle_vla_bound_not_positive	ubsan/ubsan_handlers.cc	/^void __ubsan::__ubsan_handle_vla_bound_not_positive(VLABoundData *Data,$/;"	f	class:__ubsan
__ucmpdi2	ucmpdi2.c	/^__ucmpdi2(du_int a, du_int b)$/;"	f
__ucmpti2	ucmpti2.c	/^__ucmpti2(tu_int a, tu_int b)$/;"	f
__udivdi3	udivdi3.c	/^__udivdi3(du_int a, du_int b)$/;"	f
__udivmoddi4	udivmoddi4.c	/^__udivmoddi4(du_int a, du_int b, du_int* rem)$/;"	f
__udivmodsi4	udivmodsi4.c	/^__udivmodsi4(su_int a, su_int b, su_int* rem)$/;"	f
__udivmodti4	udivmodti4.c	/^__udivmodti4(tu_int a, tu_int b, tu_int* rem)$/;"	f
__udivti3	udivti3.c	/^__udivti3(tu_int a, tu_int b)$/;"	f
__umoddi3	umoddi3.c	/^__umoddi3(du_int a, du_int b)$/;"	f
__umodsi3	umodsi3.c	/^__umodsi3(su_int a, su_int b)$/;"	f
__umodti3	umodti3.c	/^__umodti3(tu_int a, tu_int b)$/;"	f
__unorddf2	comparedf2.c	/^int __unorddf2(fp_t a, fp_t b) {$/;"	f
__unordsf2	comparesf2.c	/^int __unordsf2(fp_t a, fp_t b) {$/;"	f
_calloc_dbg	asan/asan_malloc_win.cc	/^void* _calloc_dbg(size_t n, size_t size, int, const char*, int) {$/;"	f
_calloc_impl	asan/asan_malloc_win.cc	/^void *_calloc_impl(size_t nmemb, size_t size, int *errno_tmp) {$/;"	f
_cfinfo	asan/asan_mac.h	/^  u8 _cfinfo[4];$/;"	m	struct:__CFRuntimeBase
_cfisa	asan/asan_mac.h	/^  uptr _cfisa;$/;"	m	struct:__CFRuntimeBase
_free_dbg	asan/asan_malloc_win.cc	/^void _free_dbg(void* ptr, int) {$/;"	f
_mach_override_	interception/mach_override/mach_override.h	48;"	d
_malloc_dbg	asan/asan_malloc_win.cc	/^void* _malloc_dbg(size_t size, int , const char*, int) {$/;"	f
_memcpy	interception/interception_win.cc	/^static void _memcpy(void *dst, void *src, size_t sz) {$/;"	f	namespace:__interception
_memset	interception/interception_win.cc	/^static void _memset(void *p, int value, size_t sz) {$/;"	f	namespace:__interception
_msize	asan/asan_malloc_win.cc	/^size_t _msize(void *ptr) {$/;"	f
_rc	asan/asan_mac.h	/^  u32 _rc;$/;"	m	struct:__CFRuntimeBase
_realloc_dbg	asan/asan_malloc_win.cc	/^void *_realloc_dbg(void *ptr, size_t size, int) {$/;"	f
_recalloc	asan/asan_malloc_win.cc	/^void* _recalloc(void* p, size_t n, size_t elem_size) {$/;"	f
a	arm/udivmodsi4.S	/^#define a r0$/;"	d
a	arm/udivsi3.S	/^#define a r0$/;"	d
a	arm/umodsi3.S	/^#define a r0$/;"	d
a	asan/tests/asan_test.cc	/^  int a:8;$/;"	m	struct:StructWithBitFields_8_24	file:
a	tsan/benchmarks/mini_bench_local.cc	/^int *a;$/;"	v
a	tsan/benchmarks/mini_bench_shared.cc	/^int *a;$/;"	v
a	tsan/rtl/tsan_md5.cc	/^  MD5_u32plus a, b, c, d;$/;"	m	struct:__tsan::__anon29	file:
a16	tsan/rtl/tsan_interface_atomic.cc	/^typedef __tsan_atomic16 a16;$/;"	t	file:
a32	tsan/rtl/tsan_interface_atomic.cc	/^typedef __tsan_atomic32 a32;$/;"	t	file:
a64	tsan/rtl/tsan_interface_atomic.cc	/^typedef __tsan_atomic64 a64;$/;"	t	file:
a8	tsan/rtl/tsan_interface_atomic.cc	/^typedef __tsan_atomic8 a8;$/;"	t	file:
aaa	tsan/lit_tests/virtual_inheritance_compile_bug.cc	/^struct AAA              {  virtual long aaa () { return 0; } };  \/\/ NOLINT$/;"	f	struct:AAA
ab	asan/lit_tests/Helpers/initialization-nobug-extra.cc	/^static int ab = getAB();$/;"	v	file:
abort_on_error	asan/asan_flags.h	/^  bool abort_on_error;$/;"	m	struct:__asan::Flags
absMask	fp_lib.h	99;"	d
accumulated_stats_	asan/asan_thread_registry.h	/^  AsanStats accumulated_stats_;$/;"	m	class:__asan::AsanThreadRegistry
acq_rel	tsan/rtl/tsan_clock.cc	/^void ThreadClock::acq_rel(SyncClock *dst) {$/;"	f	class:__tsan::ThreadClock
acquire	tsan/rtl/tsan_clock.cc	/^void ThreadClock::acquire(const SyncClock *src) {$/;"	f	class:__tsan::ThreadClock
addAddressRange	sanitizer_common/sanitizer_symbolizer.cc	/^void LoadedModule::addAddressRange(uptr beg, uptr end) {$/;"	f	class:__sanitizer::LoadedModule
addr	tsan/rtl/tsan_interface_ann.cc	/^  uptr addr;$/;"	m	struct:__tsan::ExpectRace	file:
addr	tsan/rtl/tsan_report.h	/^  uptr addr;$/;"	m	struct:__tsan::ReportLocation
addr	tsan/rtl/tsan_report.h	/^  uptr addr;$/;"	m	struct:__tsan::ReportMop
addr	tsan/rtl/tsan_sync.h	/^  const uptr addr;$/;"	m	struct:__tsan::SyncVar
addr0	tsan/rtl/tsan_rtl.h	/^  u64 addr0() const { return x_ & 7; }$/;"	f	class:__tsan::Shadow
addr_max	tsan/rtl/tsan_rtl.h	/^  uptr addr_max;$/;"	m	struct:__tsan::RacyAddress
addr_min	tsan/rtl/tsan_rtl.h	/^  uptr addr_min;$/;"	m	struct:__tsan::RacyAddress
address	sanitizer_common/sanitizer_symbolizer.h	/^  uptr address;$/;"	m	struct:__sanitizer::AddressInfo
align	tsan/rtl/tsan_interceptors.cc	/^  void *align;$/;"	m	union:pthread_attr_t	file:
alignment_log	asan/asan_allocator.cc	/^  uptr alignment_log : 8;$/;"	m	struct:__asan::ChunkBase	file:
alive_	asan/asan_allocator.h	/^  bool   alive_;$/;"	m	class:__asan::FakeStack
alive_	tsan/tests/rtl/tsan_test_util.h	/^  bool alive_;$/;"	m	class:Mutex
alive_threads	tsan/rtl/tsan_rtl.h	/^  int alive_threads;$/;"	m	struct:__tsan::Context
all	int_types.h	/^    di_int all;$/;"	m	union:__anon11
all	int_types.h	/^    du_int all;$/;"	m	union:__anon13
all	int_types.h	/^    ti_int all;$/;"	m	union:__anon15
all	int_types.h	/^    tu_int all;$/;"	m	union:__anon17
all_threads_ready	tsan/benchmarks/start_many_threads.cc	/^pthread_barrier_t all_threads_ready;$/;"	v
all_threads_ready	tsan/benchmarks/vts_many_threads_bench.cc	/^pthread_barrier_t all_threads_ready, main_threads_ready;$/;"	v
alloc	tsan/lit_tests/race_on_heap.cc	/^void *alloc() {$/;"	f
allocDesc	sanitizer_common/sanitizer_stackdepot.cc	/^static StackDesc *allocDesc(uptr size) {$/;"	f	namespace:__sanitizer
alloc_asan_context	asan/asan_mac.cc	/^asan_block_context_t *alloc_asan_context(void *ctxt, dispatch_function_t func,$/;"	f
alloc_cache	tsan/rtl/tsan_rtl.h	/^  AllocatorCache alloc_cache;$/;"	m	struct:__tsan::ThreadState
alloc_stack_id	tsan/rtl/tsan_rtl.h	/^  u32 alloc_stack_id;$/;"	m	struct:__tsan::MBlock
alloc_tid	asan/asan_allocator.cc	/^  uptr  alloc_tid   : 24;$/;"	m	struct:__asan::ChunkBase	file:
alloc_tid	tsan/rtl/tsan_rtl.h	/^  u32 alloc_tid;$/;"	m	struct:__tsan::MBlock
allocateBranchIsland	interception/mach_override/mach_override.c	/^allocateBranchIsland($/;"	f	file:
allocate_addr	tsan/tests/rtl/tsan_test_util_linux.cc	/^static void* allocate_addr(int size, int offset_from_aligned = 0) {$/;"	f	file:
allocatedHigh	interception/mach_override/mach_override.c	/^	int		allocatedHigh;$/;"	m	struct:__anon9	file:
allocated_current_	sanitizer_common/sanitizer_common.h	/^  char *allocated_current_;$/;"	m	class:__sanitizer::LowLevelAllocator
allocated_end_	sanitizer_common/sanitizer_common.h	/^  char *allocated_end_;$/;"	m	class:__sanitizer::LowLevelAllocator
allocated_meta	sanitizer_common/sanitizer_allocator64.h	/^    uptr allocated_meta;  \/\/ Bytes allocated for metadata.$/;"	m	struct:__sanitizer::SizeClassAllocator64::RegionInfo
allocated_size_classes_	asan/asan_allocator.h	/^  uptr allocated_size_classes_[kNumberOfSizeClasses];$/;"	m	class:__asan::FakeStack
allocated_user	sanitizer_common/sanitizer_allocator64.h	/^    uptr allocated_user;  \/\/ Bytes allocated for user memory.$/;"	m	struct:__sanitizer::SizeClassAllocator64::RegionInfo
allocator	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^static Allocator allocator;$/;"	m	namespace:__anon26	file:
allocator	tsan/rtl/tsan_mman.cc	/^Allocator *allocator() {$/;"	f	namespace:__tsan
allocator_for_flags	sanitizer_common/sanitizer_flags.cc	/^static LowLevelAllocator allocator_for_flags;$/;"	m	namespace:__sanitizer	file:
allocator_for_globals	asan/asan_globals.cc	/^static LowLevelAllocator allocator_for_globals;$/;"	m	namespace:__asan	file:
allow_reexec	asan/asan_flags.h	/^  bool allow_reexec;$/;"	m	struct:__asan::Flags
allow_user_poisoning	asan/asan_flags.h	/^  bool allow_user_poisoning;$/;"	m	struct:__asan::Flags
announced	asan/asan_thread.h	/^  bool announced() { return announced_; }$/;"	f	class:__asan::AsanThreadSummary
announced_	asan/asan_thread.h	/^  bool announced_;$/;"	m	class:__asan::AsanThreadSummary
append_back	sanitizer_common/sanitizer_list.h	/^  void append_back(IntrusiveList<Item> *l) {$/;"	f	struct:__sanitizer::IntrusiveList
append_front	sanitizer_common/sanitizer_list.h	/^  void append_front(IntrusiveList<Item> *l) {$/;"	f	struct:__sanitizer::IntrusiveList
append_symbolizer	asan/scripts/asan_symbolize.py	/^  def append_symbolizer(self, symbolizer):$/;"	m	class:ChainSymbolizer
arg	tsan/tests/rtl/tsan_test_util_linux.cc	/^  uptr arg;$/;"	m	struct:Event	file:
arg2	tsan/tests/rtl/tsan_test_util_linux.cc	/^  uptr arg2;$/;"	m	struct:Event	file:
arg_	asan/asan_thread.h	/^  void *arg_;$/;"	m	class:__asan::AsanThread
armed	tsan/rtl/tsan_interceptors.cc	/^  bool armed;$/;"	m	struct:__tsan::SignalDesc	file:
asanThreadRegistry	asan/asan_thread_registry.cc	/^AsanThreadRegistry &asanThreadRegistry() {$/;"	f	namespace:__asan
asan_atexit	asan/asan_rtl.cc	/^static void asan_atexit() {$/;"	f	namespace:__asan
asan_block_context_t	asan/asan_mac.cc	/^} asan_block_context_t;$/;"	t	namespace:__asan	typeref:struct:__asan::__anon4	file:
asan_calloc	asan/asan_allocator.cc	/^void *asan_calloc(uptr nmemb, uptr size, StackTrace *stack) {$/;"	f	namespace:__asan
asan_dispatch_call_block_and_release	asan/asan_mac.cc	/^void asan_dispatch_call_block_and_release(void *block) {$/;"	f	namespace:__asan
asan_flags	asan/asan_rtl.cc	/^static Flags asan_flags;$/;"	m	namespace:__asan	file:
asan_free	asan/asan_allocator.cc	/^void asan_free(void *ptr, StackTrace *stack) {$/;"	f	namespace:__asan
asan_init_is_running	asan/asan_rtl.cc	/^bool asan_init_is_running;$/;"	m	namespace:__asan	file:
asan_inited	asan/asan_rtl.cc	/^int asan_inited;$/;"	m	namespace:__asan	file:
asan_malloc	asan/asan_allocator.cc	/^void *asan_malloc(uptr size, StackTrace *stack) {$/;"	f	namespace:__asan
asan_malloc_usable_size	asan/asan_allocator.cc	/^uptr asan_malloc_usable_size(void *ptr, StackTrace *stack) {$/;"	f	namespace:__asan
asan_memalign	asan/asan_allocator.cc	/^void *asan_memalign(uptr alignment, uptr size, StackTrace *stack) {$/;"	f	namespace:__asan
asan_mz_force_lock	asan/asan_allocator.cc	/^void asan_mz_force_lock() {$/;"	f	namespace:__asan
asan_mz_force_unlock	asan/asan_allocator.cc	/^void asan_mz_force_unlock() {$/;"	f	namespace:__asan
asan_mz_size	asan/asan_allocator.cc	/^uptr asan_mz_size(const void *ptr) {$/;"	f	namespace:__asan
asan_posix_memalign	asan/asan_allocator.cc	/^int asan_posix_memalign(void **memptr, uptr alignment, uptr size,$/;"	f	namespace:__asan
asan_pvalloc	asan/asan_allocator.cc	/^void *asan_pvalloc(uptr size, StackTrace *stack) {$/;"	f	namespace:__asan
asan_realloc	asan/asan_allocator.cc	/^void *asan_realloc(void *p, uptr size, StackTrace *stack) {$/;"	f	namespace:__asan
asan_register_worker_thread	asan/asan_mac.cc	/^void asan_register_worker_thread(int parent_tid, StackTrace *stack) {$/;"	f	namespace:__asan
asan_thread_start	asan/asan_interceptors.cc	/^static thread_return_t THREAD_CALLING_CONV asan_thread_start(void *arg) {$/;"	f	file:
asan_valloc	asan/asan_allocator.cc	/^void *asan_valloc(uptr size, StackTrace *stack) {$/;"	f	namespace:__asan
asan_write	asan/tests/asan_test.cc	/^NOINLINE void asan_write(T *a) {$/;"	f
asan_write_sized_aligned	asan/tests/asan_test.cc	/^NOINLINE void asan_write_sized_aligned(uint8_t *p, size_t size) {$/;"	f
asan_zone	asan/asan_malloc_mac.cc	/^static malloc_zone_t asan_zone;$/;"	v	file:
at_dlclose	asan/lit_tests/SharedLibs/dlclose-test-so.cc	/^void at_dlclose() {$/;"	f
at_dlopen	asan/lit_tests/SharedLibs/dlclose-test-so.cc	/^void at_dlopen() {$/;"	f
atexit	asan/asan_flags.h	/^  bool atexit;$/;"	m	struct:__asan::Flags
atexit	tsan/rtl/tsan_interceptors.cc	/^  int atexit(ThreadState *thr, uptr pc, atexit_t f) {$/;"	f	class:AtExitContext
atexit_ctx	tsan/rtl/tsan_interceptors.cc	/^static AtExitContext *atexit_ctx;$/;"	v	file:
atexit_sleep_ms	tsan/rtl/tsan_flags.h	/^  int atexit_sleep_ms;$/;"	m	struct:__tsan::Flags
atexit_t	tsan/rtl/tsan_interceptors.cc	/^  typedef void(*atexit_t)();$/;"	t	class:AtExitContext	file:
atomic_compare_exchange_strong	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE bool atomic_compare_exchange_strong(volatile T *a,$/;"	f	namespace:__sanitizer
atomic_compare_exchange_strong	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE bool atomic_compare_exchange_strong(volatile atomic_uintptr_t *a,$/;"	f	namespace:__sanitizer
atomic_compare_exchange_weak	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE bool atomic_compare_exchange_weak(volatile T *a,$/;"	f	namespace:__sanitizer
atomic_compare_exchange_weak	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE bool atomic_compare_exchange_weak(volatile T *a,$/;"	f	namespace:__sanitizer
atomic_exchange	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE typename T::Type atomic_exchange(volatile T *a,$/;"	f	namespace:__sanitizer
atomic_exchange	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE u16 atomic_exchange(volatile atomic_uint16_t *a,$/;"	f	namespace:__sanitizer
atomic_exchange	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE u8 atomic_exchange(volatile atomic_uint8_t *a,$/;"	f	namespace:__sanitizer
atomic_fetch_add	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE typename T::Type atomic_fetch_add(volatile T *a,$/;"	f	namespace:__sanitizer
atomic_fetch_add	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE u32 atomic_fetch_add(volatile atomic_uint32_t *a,$/;"	f	namespace:__sanitizer
atomic_fetch_sub	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE typename T::Type atomic_fetch_sub(volatile T *a,$/;"	f	namespace:__sanitizer
atomic_load	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE typename T::Type atomic_load($/;"	f	namespace:__sanitizer
atomic_load	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE typename T::Type atomic_load($/;"	f	namespace:__sanitizer
atomic_mov64	interception/mach_override/mach_override.c	/^void atomic_mov64($/;"	f
atomic_signal_fence	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE void atomic_signal_fence(memory_order) {$/;"	f	namespace:__sanitizer
atomic_signal_fence	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE void atomic_signal_fence(memory_order) {$/;"	f	namespace:__sanitizer
atomic_store	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE void atomic_store(volatile T *a, typename T::Type v, memory_order mo) {$/;"	f	namespace:__sanitizer
atomic_store	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE void atomic_store(volatile T *a, typename T::Type v, memory_order mo) {$/;"	f	namespace:__sanitizer
atomic_thread_fence	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE void atomic_thread_fence(memory_order) {$/;"	f	namespace:__sanitizer
atomic_thread_fence	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE void atomic_thread_fence(memory_order) {$/;"	f	namespace:__sanitizer
atomic_uint16_t	sanitizer_common/sanitizer_atomic.h	/^struct atomic_uint16_t {$/;"	s	namespace:__sanitizer
atomic_uint32_t	sanitizer_common/sanitizer_atomic.h	/^struct atomic_uint32_t {$/;"	s	namespace:__sanitizer
atomic_uint64_t	sanitizer_common/sanitizer_atomic.h	/^struct atomic_uint64_t {$/;"	s	namespace:__sanitizer
atomic_uint8_t	sanitizer_common/sanitizer_atomic.h	/^struct atomic_uint8_t {$/;"	s	namespace:__sanitizer
atomic_uintptr_t	sanitizer_common/sanitizer_atomic.h	/^struct atomic_uintptr_t {$/;"	s	namespace:__sanitizer
b	arm/udivmodsi4.S	/^#define b r1$/;"	d
b	arm/udivsi3.S	/^#define b r1$/;"	d
b	arm/umodsi3.S	/^#define b r1$/;"	d
b	asan/tests/asan_test.cc	/^  int b:24;$/;"	m	struct:StructWithBitFields_8_24	file:
b	tsan/rtl/tsan_md5.cc	/^  MD5_u32plus a, b, c, d;$/;"	m	struct:__tsan::__anon29	file:
back	sanitizer_common/sanitizer_list.h	/^  Item *back() { return last_; }$/;"	f	struct:__sanitizer::IntrusiveList
badGlobal	asan/lit_tests/blacklist.cc	/^int badGlobal;$/;"	v
bar	tsan/lit_tests/free_race2.c	/^void __attribute__((noinline)) bar(int *mem) {$/;"	f
bar	tsan/tests/rtl/tsan_mop.cc	/^static void bar() {$/;"	f	file:
bar	tsan/tests/rtl/tsan_test.cc	/^static void bar() {}$/;"	f	file:
bar1	tsan/lit_tests/simple_stack.c	/^void __attribute__((noinline)) bar1() {$/;"	f
bar1	tsan/lit_tests/simple_stack2.cc	/^void __attribute__((noinline)) bar1() {$/;"	f
bar2	tsan/lit_tests/simple_stack.c	/^void __attribute__((noinline)) bar2() {$/;"	f
bar2	tsan/lit_tests/simple_stack2.cc	/^void __attribute__((noinline)) bar2() {$/;"	f
base	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  uptr base;$/;"	m	struct:__tsan::ModuleDesc	file:
base	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  uptr base;$/;"	m	struct:__tsan::SectionDesc	file:
base_address	sanitizer_common/sanitizer_symbolizer.h	/^  uptr base_address() const { return base_address_; }$/;"	f	class:__sanitizer::LoadedModule
base_address_	sanitizer_common/sanitizer_symbolizer.h	/^  uptr base_address_;$/;"	m	class:__sanitizer::LoadedModule
bbb	tsan/lit_tests/virtual_inheritance_compile_bug.cc	/^struct BBB: virtual AAA { unsigned long bbb; };  \/\/ NOLINT$/;"	m	struct:BBB	file:
beg	asan/asan_allocator.cc	/^  uptr beg;$/;"	m	struct:__asan::PageGroup	file:
beg	sanitizer_common/sanitizer_symbolizer.h	/^    uptr beg;$/;"	m	struct:__sanitizer::LoadedModule::AddressRange
begin_	tsan/rtl/tsan_vector.h	/^  T *begin_;$/;"	m	class:__tsan::Vector
benign	tsan/rtl/tsan_interface_ann.cc	/^  ExpectRace benign;$/;"	m	struct:__tsan::DynamicAnnContext	file:
bf1	asan/tests/asan_test.cc	/^  int bf1:1;$/;"	m	struct:StructWithBitField	file:
bf2	asan/tests/asan_test.cc	/^  int bf2:1;$/;"	m	struct:StructWithBitField	file:
bf3	asan/tests/asan_test.cc	/^  int bf3:1;$/;"	m	struct:StructWithBitField	file:
bf4	asan/tests/asan_test.cc	/^  int bf4:29;$/;"	m	struct:StructWithBitField	file:
bisect	asan/scripts/asan_symbolize.py	/^import bisect$/;"	i
block	asan/asan_mac.cc	/^  void *block;$/;"	m	struct:__asan::__anon4	file:
block	tsan/rtl/tsan_md5.cc	/^  MD5_u32plus block[16];$/;"	m	struct:__tsan::__anon29	file:
blocks_in_use	asan/asan_stats.h	/^  uptr blocks_in_use;$/;"	m	struct:__asan::AsanMallocStats
body	tsan/rtl/tsan_md5.cc	/^static void *body(MD5_CTX *ctx, void *data, ulong_t size) {$/;"	f	namespace:__tsan
break_optimization	asan/tests/asan_break_optimization.cc	/^extern "C" void break_optimization(void *x) {$/;"	f
brokenFunction	asan/lit_tests/blacklist.cc	/^int brokenFunction(int argc) {$/;"	f
buf	tsan/go/test.c	/^char buf[10];$/;"	v
buffer	tsan/rtl/tsan_md5.cc	/^  unsigned char buffer[64];$/;"	m	struct:__tsan::__anon29	file:
build_consistency	tsan/rtl/tsan_defs.h	/^static inline void USED build_consistency() {$/;"	f	namespace:__tsan
build_consistency_debug	tsan/rtl/tsan_rtl.cc	/^void build_consistency_debug() {}$/;"	f	namespace:__tsan
build_consistency_nostats	tsan/rtl/tsan_rtl.cc	/^void build_consistency_nostats() {}$/;"	f	namespace:__tsan
build_consistency_release	tsan/rtl/tsan_rtl.cc	/^void build_consistency_release() {}$/;"	f	namespace:__tsan
build_consistency_shadow1	tsan/rtl/tsan_rtl.cc	/^void build_consistency_shadow1() {}$/;"	f	namespace:__tsan
build_consistency_shadow2	tsan/rtl/tsan_rtl.cc	/^void build_consistency_shadow2() {}$/;"	f	namespace:__tsan
build_consistency_shadow4	tsan/rtl/tsan_rtl.cc	/^void build_consistency_shadow4() {}$/;"	f	namespace:__tsan
build_consistency_shadow8	tsan/rtl/tsan_rtl.cc	/^void build_consistency_shadow8() {}$/;"	f	namespace:__tsan
build_consistency_stats	tsan/rtl/tsan_rtl.cc	/^void build_consistency_stats() {}$/;"	f	namespace:__tsan
c	tsan/rtl/tsan_md5.cc	/^  MD5_u32plus a, b, c, d;$/;"	m	struct:__tsan::__anon29	file:
c	tsan/tests/rtl/tsan_posix.cc	/^  pthread_cond_t c;$/;"	m	struct:CondContext	file:
c0	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr c0 = 256;$/;"	m	class:__sanitizer::DefaultSizeClassMap
c1	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr c1 = 64;$/;"	m	class:__sanitizer::DefaultSizeClassMap
c2	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr c2 = 16;$/;"	m	class:__sanitizer::DefaultSizeClassMap
c3	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr c3 = 4;$/;"	m	class:__sanitizer::DefaultSizeClassMap
c4	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr c4 = 1;$/;"	m	class:__sanitizer::DefaultSizeClassMap
c_	tsan/rtl/tsan_sync.h	/^  const uptr c_;$/;"	m	class:__tsan::StackTrace
cache	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^static THREADLOCAL AllocatorCache cache;$/;"	m	namespace:__anon26	file:
call1	asan/lit_tests/deep_tail_call.cc	/^void __attribute__((noinline)) call1(int i) { call2(i); }$/;"	f
call2	asan/lit_tests/deep_tail_call.cc	/^void __attribute__((noinline)) call2(int i) { call3(i); }$/;"	f
call3	asan/lit_tests/deep_tail_call.cc	/^void __attribute__((noinline)) call3(int i) { call4(i); }$/;"	f
call4	asan/lit_tests/deep_tail_call.cc	/^void __attribute__((noinline)) call4(int i) { global[i+10]++; }$/;"	f
call_stack_	asan/asan_allocator.h	/^  FakeFrameLifo call_stack_;$/;"	m	class:__asan::FakeStack
callback	tsan/rtl/tsan_interceptors.cc	/^  void* (*callback)(void *arg);$/;"	m	struct:ThreadParam	file:
callback_type	asan/lit_tests/deep_thread_stack.cc	/^typedef void* (*callback_type)(void* arg);$/;"	t	file:
calloc	asan/asan_malloc_linux.cc	/^  void* (*calloc)(uptr n_elements, uptr elem_size);$/;"	m	struct:MallocDebug	file:
calloc	asan/asan_malloc_win.cc	/^void *calloc(size_t nmemb, size_t size) {$/;"	f
calloc	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^void *calloc(size_t nmemb, size_t size) {$/;"	f
cf_asan	asan/asan_malloc_mac.cc	/^CFAllocatorRef cf_asan = 0;$/;"	v
cf_free	asan/asan_malloc_mac.cc	/^void cf_free(void *ptr, void *info) {$/;"	f	namespace:__anon6
cf_malloc	asan/asan_malloc_mac.cc	/^void *cf_malloc(CFIndex size, CFOptionFlags hint, void *info) {$/;"	f	namespace:__anon6
cf_realloc	asan/asan_malloc_mac.cc	/^void *cf_realloc(void *ptr, CFIndex size, CFOptionFlags hint, void *info) {$/;"	f	namespace:__anon6
cfree	asan/asan_malloc_win.cc	/^void cfree(void *ptr) {$/;"	f
check	tsan/check_analyze.sh	/^check() {$/;"	f
check_initialization_order	asan/asan_flags.h	/^  bool check_initialization_order;$/;"	m	struct:__asan::Flags
check_malloc_usable_size	asan/asan_flags.h	/^  bool check_malloc_usable_size;$/;"	m	struct:__asan::Flags
chunk	asan/asan_poisoning.cc	/^  u8 *chunk;$/;"	m	struct:__asan::ShadowSegmentEndpoint	file:
chunk_	asan/asan_allocator.h	/^  AsanChunk *const chunk_;$/;"	m	class:__asan::AsanChunkView
chunk_state	asan/asan_allocator.cc	/^  uptr  chunk_state : 8;$/;"	m	struct:__asan::ChunkBase	file:
clear	asan/asan_allocator.h	/^  void clear() {$/;"	f	class:__asan::AsanChunkFifoList
clear	sanitizer_common/sanitizer_list.h	/^  void clear() {$/;"	f	struct:__sanitizer::IntrusiveList
clk_	tsan/rtl/tsan_clock.h	/^  Vector<u64> clk_;$/;"	m	class:__tsan::SyncClock
clk_	tsan/rtl/tsan_clock.h	/^  u64 clk_[kMaxTidInClock];$/;"	m	struct:__tsan::ThreadClock
clock	tsan/rtl/tsan_rtl.h	/^  ThreadClock clock;$/;"	m	struct:__tsan::ThreadState
clock	tsan/rtl/tsan_sync.h	/^  SyncClock clock;$/;"	m	struct:__tsan::SyncVar
cnt	tsan/tests/rtl/tsan_posix.cc	/^  int *cnt;$/;"	m	struct:thread_key	file:
cnt_	sanitizer_common/sanitizer_common.h	/^  uptr cnt_;$/;"	m	class:__sanitizer::InternalScopedBuffer
codeMatchesInstruction	interception/mach_override/mach_override.c	/^static Boolean codeMatchesInstruction(unsigned char *code, AsmInstructionMatch* instruction) $/;"	f	file:
col	tsan/rtl/tsan_report.h	/^  int col;$/;"	m	struct:__tsan::ReportStack
column	sanitizer_common/sanitizer_symbolizer.h	/^  int column;$/;"	m	struct:__sanitizer::AddressInfo
compilerrt_abort	int_util.h	23;"	d
compilerrt_abort_impl	int_util.c	/^void compilerrt_abort_impl(const char *file, int line, const char *function) {$/;"	f
compressed_alloc_stack	asan/asan_allocator.cc	/^  u32 *compressed_alloc_stack() {$/;"	f	struct:__asan::AsanChunk
compressed_alloc_stack_size	asan/asan_allocator.cc	/^  uptr compressed_alloc_stack_size() {$/;"	f	struct:__asan::AsanChunk
compressed_free_stack	asan/asan_allocator.cc	/^  u32 *compressed_free_stack() {$/;"	f	struct:__asan::AsanChunk
compressed_free_stack_size	asan/asan_allocator.cc	/^  uptr compressed_free_stack_size() {$/;"	f	struct:__asan::AsanChunk
cond_thread	tsan/tests/rtl/tsan_posix.cc	/^static void *cond_thread(void *p) {$/;"	f	file:
condition	asan/lit_tests/initialization-nobug.cc	/^bool condition = true;$/;"	v
constraint	interception/mach_override/mach_override.c	/^	unsigned char constraint[15]; \/\/ sequence of bytes in memory order$/;"	m	struct:__anon10	file:
containsAddress	sanitizer_common/sanitizer_symbolizer.cc	/^bool LoadedModule::containsAddress(uptr address) const {$/;"	f	class:__sanitizer::LoadedModule
coolest_integer	asan/lit_tests/Helpers/initialization-nobug-extra.cc	/^static int coolest_integer = getCoolestInteger();$/;"	v	file:
countCalls	asan/lit_tests/initialization-nobug.cc	/^int countCalls() {$/;"	f
creation_stack	tsan/rtl/tsan_rtl.h	/^  StackTrace creation_stack;$/;"	m	struct:__tsan::ThreadContext
creation_stack	tsan/rtl/tsan_sync.h	/^  StackTrace creation_stack;$/;"	m	struct:__tsan::SyncVar
crt_copysign	int_math.h	47;"	d
crt_copysignf	int_math.h	48;"	d
crt_copysignl	int_math.h	49;"	d
crt_fabs	int_math.h	51;"	d
crt_fabsf	int_math.h	52;"	d
crt_fabsl	int_math.h	53;"	d
crt_fmax	int_math.h	55;"	d
crt_fmaxf	int_math.h	56;"	d
crt_fmaxl	int_math.h	57;"	d
crt_isfinite	int_math.h	38;"	d
crt_isfinite	int_math.h	40;"	d
crt_isinf	int_math.h	30;"	d
crt_isnan	int_math.h	31;"	d
crt_logb	int_math.h	59;"	d
crt_logbf	int_math.h	60;"	d
crt_logbl	int_math.h	61;"	d
crt_scalbn	int_math.h	63;"	d
crt_scalbnf	int_math.h	64;"	d
crt_scalbnl	int_math.h	65;"	d
ctx	tsan/rtl/tsan_interceptors.cc	/^  ucontext_t ctx;$/;"	m	struct:__tsan::SignalDesc	file:
ctx	tsan/rtl/tsan_rtl.cc	/^static Context *ctx;$/;"	m	namespace:__tsan	file:
ctx_	tsan/rtl/tsan_rtl.h	/^  Context *ctx_;$/;"	m	class:__tsan::ScopedReport
cur_thread	tsan/rtl/tsan_rtl.h	/^INLINE ThreadState *cur_thread() {$/;"	f	namespace:__tsan
current_n	sanitizer_common/sanitizer_symbolizer_linux.cc	/^  uptr current_n;$/;"	m	struct:__sanitizer::DlIteratePhdrData	file:
d	ppc/DD.h	/^	double d;$/;"	m	union:__anon25
d	tsan/rtl/tsan_md5.cc	/^  MD5_u32plus a, b, c, d;$/;"	m	struct:__tsan::__anon29	file:
data	sanitizer_common/sanitizer_common.h	/^  T *data() { return ptr_; }$/;"	f	class:__sanitizer::InternalScopedBuffer
data	tsan/lit_tests/memcpy_race.cc	/^char *data = new char[10];$/;"	v
data	tsan/lit_tests/suppress_same_stacks.cc	/^int **data;$/;"	v
data	tsan/tests/rtl/tsan_posix.cc	/^  int data;$/;"	m	struct:CondContext	file:
data1	tsan/lit_tests/memcpy_race.cc	/^char *data1 = new char[10];$/;"	v
data2	tsan/lit_tests/memcpy_race.cc	/^char *data2 = new char[10];$/;"	v
data_	tsan/tests/unit/tsan_mutex_test.cc	/^  T data_[kSize];$/;"	m	class:__tsan::TestData	file:
dbghelp_initialized	asan/asan_win.cc	/^static bool dbghelp_initialized = false;$/;"	m	namespace:__asan	file:
dead_info	tsan/rtl/tsan_rtl.h	/^  ThreadDeadInfo *dead_info;$/;"	m	struct:__tsan::ThreadContext
dead_list_head	tsan/rtl/tsan_rtl.h	/^  ThreadContext* dead_list_head;$/;"	m	struct:__tsan::Context
dead_list_size	tsan/rtl/tsan_rtl.h	/^  int dead_list_size;$/;"	m	struct:__tsan::Context
dead_list_tail	tsan/rtl/tsan_rtl.h	/^  ThreadContext* dead_list_tail;$/;"	m	struct:__tsan::Context
dead_next	tsan/rtl/tsan_rtl.h	/^  ThreadContext *dead_next;  \/\/ In dead thread list.$/;"	m	struct:__tsan::ThreadContext
deadlock_detector	tsan/rtl/tsan_rtl.h	/^  DeadlockDetector deadlock_detector;$/;"	m	struct:__tsan::ThreadState
death_callback	asan/asan_rtl.cc	/^void (*death_callback)(void);$/;"	m	namespace:__asan	file:
debug	asan/asan_flags.h	/^  bool debug;$/;"	m	struct:__asan::Flags
defaultIslandFree	interception/mach_override/mach_override.c	/^defaultIslandFree($/;"	f	file:
defaultIslandMalloc	interception/mach_override/mach_override.c	/^defaultIslandMalloc($/;"	f	file:
depot	sanitizer_common/sanitizer_stackdepot.cc	/^} depot;$/;"	m	namespace:__sanitizer	typeref:struct:__sanitizer::__anon27	file:
desc	tsan/rtl/tsan_interface_ann.cc	/^  char desc[kMaxDescLen];$/;"	m	struct:__tsan::ExpectRace	file:
descr	asan/asan_allocator.h	/^  uptr descr;  \/\/ Modified by the instrumented code.$/;"	m	struct:__asan::FakeFrame
detached	tsan/rtl/tsan_rtl.h	/^  bool detached;$/;"	m	struct:__tsan::ThreadContext
detached	tsan/tests/rtl/tsan_test_util_linux.cc	/^  bool detached;$/;"	m	struct:ScopedThread::Impl	file:
di_int	int_types.h	/^typedef          long long di_int;$/;"	t
different_sign	ppc/DD.h	/^different_sign(double x, double y)$/;"	f
dir2addr	tsan/rtl/tsan_interceptors.cc	/^static uptr dir2addr(char *path) {$/;"	f	file:
disable_core	asan/asan_flags.h	/^  bool disable_core;$/;"	m	struct:__asan::Flags
dispatch_function_t	asan/asan_intercepted_functions.h	/^typedef void (*dispatch_function_t)(void *block);$/;"	t
dispatch_function_t	asan/asan_mac.cc	/^typedef void (*dispatch_function_t)(void *block);$/;"	t	namespace:__asan	file:
dispatch_group_t	asan/asan_intercepted_functions.h	/^typedef void* dispatch_group_t;$/;"	t
dispatch_group_t	asan/asan_mac.cc	/^typedef void* dispatch_group_t;$/;"	t	namespace:__asan	file:
dispatch_queue_t	asan/asan_intercepted_functions.h	/^typedef void* dispatch_queue_t;$/;"	t
dispatch_queue_t	asan/asan_mac.cc	/^typedef void* dispatch_queue_t;$/;"	t	namespace:__asan	file:
dispatch_source_t	asan/asan_intercepted_functions.h	/^typedef void* dispatch_source_t;$/;"	t
dispatch_source_t	asan/asan_mac.cc	/^typedef void* dispatch_source_t;$/;"	t	namespace:__asan	file:
dispatch_time_t	asan/asan_intercepted_functions.h	/^typedef u64 dispatch_time_t;$/;"	t
dispatch_time_t	asan/asan_mac.cc	/^typedef u64 dispatch_time_t;$/;"	t	namespace:__asan	file:
dl_iterate_phdr_cb	sanitizer_common/sanitizer_symbolizer_linux.cc	/^static int dl_iterate_phdr_cb(dl_phdr_info *info, size_t size, void *arg) {$/;"	f	namespace:__sanitizer
dl_iterate_phdr_cb	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^static int dl_iterate_phdr_cb(dl_phdr_info *info, size_t size, void *arg) {$/;"	f	namespace:__tsan
double_bits	int_types.h	/^} double_bits;$/;"	t	typeref:union:__anon20
doublebits	ppc/DD.h	/^} doublebits;$/;"	t	typeref:union:__anon25
dstFromRep	extendsfdf2.c	/^static inline dst_t dstFromRep(dst_rep_t x) {$/;"	f	file:
dstFromRep	truncdfsf2.c	/^static inline dst_t dstFromRep(dst_rep_t x) {$/;"	f	file:
dstSigBits	extendsfdf2.c	/^static const int dstSigBits = 52;$/;"	v	file:
dstSigBits	truncdfsf2.c	/^static const int dstSigBits = 23;$/;"	v	file:
dst_rep_t	extendsfdf2.c	/^typedef uint64_t dst_rep_t;$/;"	t	file:
dst_rep_t	truncdfsf2.c	/^typedef uint32_t dst_rep_t;$/;"	t	file:
dst_t	extendsfdf2.c	/^typedef double dst_t;$/;"	t	file:
dst_t	truncdfsf2.c	/^typedef float dst_t;$/;"	t	file:
dtors_thread	tsan/tests/rtl/tsan_posix.cc	/^static void *dtors_thread(void *p) {$/;"	f	file:
du_int	int_types.h	/^typedef unsigned long long du_int;$/;"	t
dump16Bytes	interception/mach_override/mach_override.c	/^dump16Bytes($/;"	f	file:
dwords	int_types.h	/^} dwords;$/;"	t	typeref:union:__anon11
dyn_ann_ctx	tsan/rtl/tsan_interface_ann.cc	/^static DynamicAnnContext *dyn_ann_ctx;$/;"	m	namespace:__tsan	file:
eatKnownInstructions	interception/mach_override/mach_override.c	/^eatKnownInstructions( $/;"	f	file:
empty	sanitizer_common/sanitizer_list.h	/^  bool empty() const { return size_ == 0; }$/;"	f	struct:__sanitizer::IntrusiveList
enable_annotations	tsan/rtl/tsan_flags.h	/^  bool enable_annotations;$/;"	m	struct:__tsan::Flags
end	asan/asan_allocator.cc	/^  uptr end;$/;"	m	struct:__asan::PageGroup	file:
end	sanitizer_common/sanitizer_symbolizer.h	/^    uptr end;$/;"	m	struct:__sanitizer::LoadedModule::AddressRange
end	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  uptr end;$/;"	m	struct:__tsan::SectionDesc	file:
end_	tsan/rtl/tsan_vector.h	/^  T *end_;$/;"	m	class:__tsan::Vector
epoch	tsan/rtl/tsan_rtl.h	/^  u64 epoch() const {$/;"	f	class:__tsan::FastState
epoch0	tsan/rtl/tsan_rtl.h	/^  u64 epoch0;$/;"	m	struct:__tsan::ThreadContext
epoch0	tsan/rtl/tsan_trace.h	/^  u64        epoch0;  \/\/ Start epoch for the trace.$/;"	m	struct:__tsan::TraceHeader
epoch1	tsan/rtl/tsan_rtl.h	/^  u64 epoch1;$/;"	m	struct:__tsan::ThreadContext
epollfd2addr	tsan/rtl/tsan_interceptors.cc	/^static uptr epollfd2addr(int fd) {$/;"	f	file:
err_cannot_override	interception/mach_override/mach_override.h	60;"	d
errno	tsan/rtl/tsan_interceptors.cc	80;"	d	file:
errno_	tsan/rtl/tsan_rtl.h	/^  int errno_;$/;"	m	class:__tsan::ScopedInRtl
error_message_buffer	asan/asan_report.cc	/^static char *error_message_buffer = 0;$/;"	m	namespace:__asan	file:
error_message_buffer_pos	asan/asan_report.cc	/^static uptr error_message_buffer_pos = 0;$/;"	m	namespace:__asan	file:
error_message_buffer_size	asan/asan_report.cc	/^static uptr error_message_buffer_size = 0;$/;"	m	namespace:__asan	file:
error_report_callback	asan/asan_report.cc	/^static void (*error_report_callback)(const char*);$/;"	m	namespace:__asan	file:
event	tsan/tests/rtl/tsan_test_util_linux.cc	/^  atomic_uintptr_t event;  \/\/ Event*$/;"	m	struct:ScopedThread::Impl	file:
events	tsan/rtl/tsan_trace.h	/^  Event events[kTraceSize];$/;"	m	struct:__tsan::Trace
exception_class	gcc_personality_v0.c	/^    uint64_t                exception_class;$/;"	m	struct:_Unwind_Exception	file:
exception_cleanup	gcc_personality_v0.c	/^    void                    (*exception_cleanup)(_Unwind_Reason_Code reason, $/;"	m	struct:_Unwind_Exception	file:
exit	tsan/rtl/tsan_interceptors.cc	/^  void exit(ThreadState *thr, uptr pc) {$/;"	f	class:AtExitContext
exitcode	asan/asan_flags.h	/^  int  exitcode;$/;"	m	struct:__asan::Flags
exitcode	tsan/rtl/tsan_flags.h	/^  int exitcode;$/;"	m	struct:__tsan::Flags
expect	tsan/rtl/tsan_interface_ann.cc	/^  ExpectRace expect;$/;"	m	struct:__tsan::DynamicAnnContext	file:
expect_report	tsan/tests/rtl/tsan_test_util_linux.cc	/^  bool expect_report;$/;"	m	struct:Event	file:
expect_report	tsan/tests/rtl/tsan_test_util_linux.cc	/^static __thread bool expect_report;$/;"	v	file:
expect_report_reported	tsan/tests/rtl/tsan_test_util_linux.cc	/^static __thread bool expect_report_reported;$/;"	v	file:
expect_report_type	tsan/tests/rtl/tsan_test_util_linux.cc	/^static __thread ReportType expect_report_type;$/;"	v	file:
exponentBias	fp_lib.h	94;"	d
exponentBits	fp_lib.h	92;"	d
exponentMask	fp_lib.h	100;"	d
externalBrokenFunction	asan/lit_tests/Helpers/blacklist-extra.cc	/^int externalBrokenFunction(int argc) {$/;"	f
external_symbolizer_	sanitizer_common/sanitizer_symbolizer.cc	/^  ExternalSymbolizer *external_symbolizer_;  \/\/ Leaked.$/;"	m	class:__sanitizer::Symbolizer	file:
external_symbolizer_path	tsan/rtl/tsan_flags.h	/^  const char *external_symbolizer_path;$/;"	m	struct:__tsan::Flags
f	int_types.h	/^    double  f;$/;"	m	union:__anon20
f	int_types.h	/^    float f;$/;"	m	union:__anon19
f	int_types.h	/^    long double f;$/;"	m	union:__anon22
f	ubsan/lit_tests/Misc/missing_return.cpp	/^int f() {$/;"	f
f	ubsan/lit_tests/TypeCheck/misaligned.cpp	/^  int f() { return 0; }$/;"	f	struct:S
f	ubsan/lit_tests/TypeCheck/null.cpp	/^  int f() { return 0; }$/;"	f	struct:S
fabs	ppc/DD.h	/^fabs(double x)$/;"	f
fake_mallinfo	asan/asan_malloc_linux.cc	/^struct fake_mallinfo {$/;"	s	file:
fake_stack	asan/asan_thread.h	/^  FakeStack &fake_stack() { return fake_stack_; }$/;"	f	class:__asan::AsanThread
fake_stack_	asan/asan_thread.h	/^  FakeStack fake_stack_;$/;"	m	class:__asan::AsanThread
fake_tsd	asan/asan_win.cc	/^static __declspec(thread) void *fake_tsd = 0;$/;"	m	namespace:__asan	file:
fast_state	tsan/rtl/tsan_rtl.h	/^  FastState fast_state;$/;"	m	struct:__tsan::ThreadState
fast_synch_epoch	tsan/rtl/tsan_rtl.h	/^  u64 fast_synch_epoch;$/;"	m	struct:__tsan::ThreadState
fd2addr	tsan/rtl/tsan_interceptors.cc	/^static uptr fd2addr(int fd) {$/;"	f	file:
fd_t	sanitizer_common/sanitizer_libc.h	/^typedef int fd_t;$/;"	t	namespace:__sanitizer
file	sanitizer_common/sanitizer_symbolizer.h	/^  char *file;$/;"	m	struct:__sanitizer::AddressInfo
file	tsan/rtl/tsan_interface_ann.cc	/^  char *file;$/;"	m	struct:__tsan::ExpectRace	file:
file	tsan/rtl/tsan_report.h	/^  char *file;$/;"	m	struct:__tsan::ReportLocation
file	tsan/rtl/tsan_report.h	/^  char *file;$/;"	m	struct:__tsan::ReportStack
file2addr	tsan/rtl/tsan_interceptors.cc	/^static uptr file2addr(char *path) {$/;"	f	file:
filetypes	asan/scripts/asan_symbolize.py	/^filetypes = {}$/;"	v
finalize	tsan/rtl/tsan_interceptors.cc	/^static void finalize(void *arg) {$/;"	f	file:
find	sanitizer_common/sanitizer_stackdepot.cc	/^static u32 find(StackDesc *s, const uptr *stack, uptr size, u32 hash) {$/;"	f	namespace:__sanitizer
fired_suppressions	tsan/rtl/tsan_rtl.h	/^  Vector<FiredSuppression> fired_suppressions;$/;"	m	struct:__tsan::Context
first_	asan/asan_allocator.h	/^  AsanChunk *first_;$/;"	m	class:__asan::AsanChunkFifoList
first_	asan/asan_allocator.h	/^  FakeFrame *first_, *last_;$/;"	m	struct:__asan::FakeFrameFifo
first_	sanitizer_common/sanitizer_list.h	/^  Item *first_;$/;"	m	struct:__sanitizer::IntrusiveList
fix_filename	asan/scripts/asan_symbolize.py	/^def fix_filename(file_name):$/;"	f
fix_mmap_addr	tsan/rtl/tsan_interceptors.cc	/^static bool fix_mmap_addr(void **addr, long_t sz, int flags) {$/;"	f	file:
fixupInstructions	interception/mach_override/mach_override.c	/^fixupInstructions($/;"	f	file:
flags	asan/asan_rtl.cc	/^Flags *flags() {$/;"	f	namespace:__asan
flags	tsan/rtl/tsan_flags.cc	/^Flags *flags() {$/;"	f	namespace:__tsan
flags	tsan/rtl/tsan_rtl.h	/^  Flags flags;$/;"	m	struct:__tsan::Context
float_bits	int_types.h	/^} float_bits;$/;"	t	typeref:union:__anon19
flush_memory_ms	tsan/rtl/tsan_flags.h	/^  int flush_memory_ms;$/;"	m	struct:__tsan::Flags
foo	asan/lit_tests/force_inline_opt0.cc	/^void foo(int *x) {$/;"	f
foo	asan/tests/asan_test.cc	/^  int foo[100];$/;"	m	struct:LargeStruct	file:
foo	tsan/lit_tests/free_race2.c	/^void __attribute__((noinline)) foo(int *mem) {$/;"	f
foo	tsan/lit_tests/static_init2.cc	/^void foo(Cache *my) {$/;"	f
foo	tsan/tests/rtl/tsan_mop.cc	/^static void foo() {$/;"	f	file:
foo	tsan/tests/rtl/tsan_test.cc	/^static void foo() {}$/;"	f	file:
foo1	tsan/lit_tests/simple_stack.c	/^void __attribute__((noinline)) foo1() {$/;"	f
foo1	tsan/lit_tests/simple_stack2.cc	/^void __attribute__((noinline)) foo1() {$/;"	f
foo2	tsan/lit_tests/simple_stack.c	/^void __attribute__((noinline)) foo2() {$/;"	f
foo2	tsan/lit_tests/simple_stack2.cc	/^void __attribute__((noinline)) foo2() {$/;"	f
foobar	tsan/lit_tests/race_with_finished_thread.cc	/^void __attribute__((noinline)) foobar(int *p) {$/;"	f
foobarbaz	tsan/tests/rtl/tsan_mop.cc	/^static void foobarbaz() {}$/;"	f	file:
force_interface_symbols	asan/asan_rtl.cc	/^static NOINLINE void force_interface_symbols() {$/;"	f	namespace:__asan
force_seq_cst_atomics	tsan/rtl/tsan_flags.h	/^  bool force_seq_cst_atomics;$/;"	m	struct:__tsan::Flags
fp_t	fp_lib.h	/^typedef double fp_t;$/;"	t
fp_t	fp_lib.h	/^typedef float fp_t;$/;"	t
free	asan/asan_malloc_linux.cc	/^  void  (*free)(void* mem);$/;"	m	struct:MallocDebug	file:
free	asan/asan_malloc_win.cc	/^void free(void *ptr) {$/;"	f
free	asan/lit_tests/deep_stack_uaf.cc	/^  static void free(char *x) {$/;"	f	struct:DeepFree
free	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^void free(void *p) {$/;"	f
freeBranchIsland	interception/mach_override/mach_override.c	/^freeBranchIsland($/;"	f	file:
free_aaa	asan/tests/asan_test.cc	/^NOINLINE void free_aaa(void *p) { free_bbb(p); break_optimization(0);}$/;"	f
free_bbb	asan/tests/asan_test.cc	/^NOINLINE void free_bbb(void *p) { free_ccc(p); break_optimization(0);}$/;"	f
free_ccc	asan/tests/asan_test.cc	/^NOINLINE void free_ccc(void *p) { free(p); break_optimization(0);}$/;"	f
free_common	asan/asan_malloc_mac.cc	/^void ALWAYS_INLINE free_common(void *context, void *ptr) {$/;"	f	namespace:__anon6
free_list	sanitizer_common/sanitizer_allocator64.h	/^    AllocatorFreeList free_list;$/;"	m	struct:__sanitizer::SizeClassAllocator64::RegionInfo
free_lists_	asan/asan_allocator.cc	/^  AsanChunk *free_lists_[kNumberOfSizeClasses];$/;"	m	class:__asan::MallocInfo	file:
free_lists_	asan/asan_allocator.h	/^  AsanChunk *free_lists_[kNumberOfSizeClasses];$/;"	m	struct:__asan::AsanThreadLocalMallocStorage
free_lists_	sanitizer_common/sanitizer_allocator64.h	/^  AllocatorFreeList free_lists_[kNumClasses];$/;"	m	struct:__sanitizer::SizeClassAllocatorLocalCache
free_tid	asan/asan_allocator.cc	/^  uptr  free_tid    : 24;$/;"	m	struct:__asan::ChunkBase	file:
freed	asan/asan_stats.h	/^  uptr freed;$/;"	m	struct:__asan::AsanStats
freed_by_size	asan/asan_stats.h	/^  uptr freed_by_size[kNumberOfSizeClasses];$/;"	m	struct:__asan::AsanStats
frees	asan/asan_stats.h	/^  uptr frees;$/;"	m	struct:__asan::AsanStats
fromRep	fp_lib.h	/^static inline fp_t fromRep(rep_t x) {$/;"	f
front	sanitizer_common/sanitizer_list.h	/^  Item *front() { return first_; }$/;"	f	struct:__sanitizer::IntrusiveList
full_name	sanitizer_common/sanitizer_symbolizer.h	/^  const char *full_name() const { return full_name_; }$/;"	f	class:__sanitizer::LoadedModule
full_name_	sanitizer_common/sanitizer_symbolizer.h	/^  char *full_name_;$/;"	m	class:__sanitizer::LoadedModule
fullname	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  const char *fullname;$/;"	m	struct:__tsan::ModuleDesc	file:
fun_t	asan/lit_tests/dlclose-test.cc	/^typedef int *(fun_t)();$/;"	t	file:
fun_t	asan/lit_tests/shared-lib-test.cc	/^typedef void (fun_t)(int x);$/;"	t	file:
func	asan/asan_mac.cc	/^  dispatch_function_t func;$/;"	m	struct:__asan::__anon4	file:
func	tsan/rtl/tsan_report.h	/^  char *func;$/;"	m	struct:__tsan::ReportStack
function	sanitizer_common/sanitizer_symbolizer.h	/^  char *function;$/;"	m	struct:__sanitizer::AddressInfo
g	asan/asan_globals.cc	/^  const Global *g;$/;"	m	struct:__asan::ListOfGlobals	file:
g_cache	tsan/lit_tests/static_init3.cc	/^Cache g_cache;$/;"	v
g_data	tsan/lit_tests/race_with_finished_thread.cc	/^int g_data;$/;"	v
g_data_end	tsan/rtl/tsan_platform_linux.cc	/^static uptr g_data_end;$/;"	m	namespace:__tsan	file:
g_data_start	tsan/rtl/tsan_platform_linux.cc	/^static uptr g_data_start;$/;"	m	namespace:__tsan	file:
g_other	tsan/lit_tests/static_init4.cc	/^int g_other;$/;"	v
g_suppressions	tsan/rtl/tsan_suppressions.cc	/^static Suppression *g_suppressions;$/;"	m	namespace:__tsan	file:
g_thread_finalize_key	tsan/rtl/tsan_interceptors.cc	/^static unsigned g_thread_finalize_key;$/;"	v	file:
g_tls_size	tsan/rtl/tsan_platform_linux.cc	/^static uptr g_tls_size;$/;"	m	namespace:__tsan	file:
get	tsan/rtl/tsan_clock.h	/^  u64 get(unsigned tid) const {$/;"	f	struct:__tsan::ThreadClock
getAB	asan/lit_tests/initialization-nobug.cc	/^int getAB() {$/;"	f
getColumn	ubsan/ubsan_value.h	/^  unsigned getColumn() const { return Column; }$/;"	f	class:__ubsan::SourceLocation
getCoolestInteger	asan/lit_tests/initialization-nobug.cc	/^int getCoolestInteger() { return coolestInteger.getValue(); }$/;"	f
getFilename	ubsan/ubsan_value.h	/^  const char *getFilename() const { return Filename; }$/;"	f	class:__ubsan::SourceLocation
getFloatBitWidth	ubsan/ubsan_value.h	/^  unsigned getFloatBitWidth() const {$/;"	f	class:__ubsan::TypeDescriptor
getFloatValue	ubsan/ubsan_value.cc	/^FloatMax Value::getFloatValue() const {$/;"	f	class:Value
getIntegerBitWidth	ubsan/ubsan_value.h	/^  unsigned getIntegerBitWidth() const {$/;"	f	class:__ubsan::TypeDescriptor
getKind	ubsan/ubsan_value.h	/^  Kind getKind() const {$/;"	f	class:__ubsan::TypeDescriptor
getLine	ubsan/ubsan_value.h	/^  unsigned getLine() const { return Line; }$/;"	f	class:__ubsan::SourceLocation
getPositiveIntValue	ubsan/ubsan_value.cc	/^UIntMax Value::getPositiveIntValue() const {$/;"	f	class:Value
getSIntValue	ubsan/ubsan_value.cc	/^SIntMax Value::getSIntValue() const {$/;"	f	class:Value
getType	ubsan/ubsan_value.h	/^  const TypeDescriptor &getType() const { return Type; }$/;"	f	class:__ubsan::Value
getTypeName	ubsan/ubsan_value.h	/^  const char *getTypeName() const { return TypeName; }$/;"	f	class:__ubsan::TypeDescriptor
getUIntValue	ubsan/ubsan_value.cc	/^UIntMax Value::getUIntValue() const {$/;"	f	class:Value
getValue	asan/lit_tests/initialization-nobug.cc	/^  int getValue() {return value;}$/;"	f	class:Integer
get_address_of_static_var	asan/lit_tests/SharedLibs/dlclose-test-so.cc	/^int *get_address_of_static_var() {$/;"	f
get_asm	tsan/analyze_libtsan.sh	/^get_asm() {$/;"	f
get_saved_cfallocator_ref	asan/asan_malloc_mac.cc	/^void* ALWAYS_INLINE get_saved_cfallocator_ref(void *ptr) {$/;"	f
get_sym_file_line	asan/scripts/asan_symbolize.py	/^  def get_sym_file_line(self, addr):$/;"	m	class:BreakpadSymbolizer
glob5	asan/tests/asan_test.cc	/^char glob5[5];$/;"	v
global	asan/lit_tests/deep_tail_call.cc	/^int global[10];$/;"	v
global_seed	asan/tests/asan_noinst_test.cc	/^static u32 global_seed = 0;$/;"	v	file:
global_seed	asan/tests/asan_test.cc	/^static uint32_t global_seed = 0;$/;"	v	file:
global_string	asan/tests/asan_test.cc	/^static char global_string[] = "global";$/;"	v	file:
global_string_length	asan/tests/asan_test.cc	/^static size_t global_string_length = 6;$/;"	v	file:
goroutines	tsan/go/tsan_go.cc	/^static ThreadState *goroutines[kMaxGoroutinesEver];$/;"	m	namespace:__tsan	file:
handle_segv	asan/asan_flags.h	/^  bool handle_segv;$/;"	m	struct:__asan::Flags
hash	sanitizer_common/sanitizer_stackdepot.cc	/^  u32 hash;$/;"	m	struct:__sanitizer::StackDesc	file:
hash	sanitizer_common/sanitizer_stackdepot.cc	/^static u32 hash(const uptr *stack, uptr size) {$/;"	f	namespace:__sanitizer
hash	tsan/rtl/tsan_defs.h	/^  u64 hash[2];$/;"	m	struct:__tsan::MD5Hash
hash	tsan/rtl/tsan_rtl.h	/^  MD5Hash hash[2];$/;"	m	struct:__tsan::RacyStacks
head	tsan/rtl/tsan_rtl.h	/^  SyncVar *head;$/;"	m	struct:__tsan::MBlock
headers	tsan/rtl/tsan_trace.h	/^  TraceHeader headers[kTraceParts];$/;"	m	struct:__tsan::Trace
hi	ppc/DD.h	/^		double hi;$/;"	m	struct:__anon23::__anon24
hi	tsan/rtl/tsan_md5.cc	/^  MD5_u32plus lo, hi;$/;"	m	struct:__tsan::__anon29	file:
hiWord	fp_lib.h	68;"	d
high	int_types.h	/^        di_int high;$/;"	m	struct:__anon15::__anon16
high	int_types.h	/^        du_int high;$/;"	m	struct:__anon17::__anon18
high	int_types.h	/^        si_int high;$/;"	m	struct:__anon11::__anon12
high	int_types.h	/^        su_int high;$/;"	m	struct:__anon13::__anon14
high	int_types.h	/^    udwords high;$/;"	m	struct:__anon21
high26bits	ppc/DD.h	/^high26bits(double x)$/;"	f
hitcount	tsan/rtl/tsan_interface_ann.cc	/^  int hitcount;$/;"	m	struct:__tsan::ExpectRace	file:
i	arm/udivmodsi4.S	/^#define i r3$/;"	d
i	arm/udivsi3.S	/^#define i r3$/;"	d
i	arm/umodsi3.S	/^#define i r3$/;"	d
id	sanitizer_common/sanitizer_stackdepot.cc	/^  u32 id;$/;"	m	struct:__sanitizer::StackDesc	file:
id	tsan/rtl/tsan_report.h	/^  int id;$/;"	m	struct:__tsan::ReportMutex
id	tsan/rtl/tsan_report.h	/^  int id;$/;"	m	struct:__tsan::ReportThread
ignore_reads_and_writes	tsan/rtl/tsan_rtl.h	/^  int ignore_reads_and_writes;$/;"	m	struct:__tsan::ThreadState
impl_	tsan/tests/rtl/tsan_test_util.h	/^  Impl *impl_;$/;"	m	class:ScopedThread
implicitBit	fp_lib.h	96;"	d
in_rtl	tsan/rtl/tsan_rtl.h	/^  int in_rtl;$/;"	m	struct:__tsan::ThreadState
in_rtl_	tsan/rtl/tsan_interceptors.h	/^  const int in_rtl_;$/;"	m	class:__tsan::ScopedInterceptor
in_rtl_	tsan/rtl/tsan_interface_ann.cc	/^  const int in_rtl_;$/;"	m	class:__tsan::ScopedAnnotation	file:
in_rtl_	tsan/rtl/tsan_interface_atomic.cc	/^  ScopedInRtl in_rtl_;$/;"	m	class:ScopedAtomic	file:
in_rtl_	tsan/rtl/tsan_rtl.h	/^  int in_rtl_;$/;"	m	class:__tsan::ScopedInRtl
in_signal_handler	tsan/rtl/tsan_rtl.h	/^  bool in_signal_handler;$/;"	m	struct:__tsan::ThreadState
inc	asan/lit_tests/SharedLibs/shared-lib-test-so.cc	/^void inc(int index) {$/;"	f
infRep	fp_lib.h	102;"	d
initX	asan/lit_tests/Linux/initialization-bug-any-order.cc	/^int __attribute__((noinline)) initX() {$/;"	f
initX	asan/lit_tests/initialization-bug.cc	/^int __attribute__((noinline)) initX() {$/;"	f
initY	asan/lit_tests/Helpers/initialization-bug-extra.cc	/^int initY() {$/;"	f
initY	asan/lit_tests/Helpers/initialization-bug-extra2.cc	/^int __attribute__((noinline)) initY() {$/;"	f
initZ	asan/lit_tests/initialization-bug.cc	/^int initZ() {$/;"	f
inited	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^static int inited = 0;$/;"	m	namespace:__anon26	file:
inited_	asan/asan_thread_registry.h	/^  bool inited_;$/;"	m	class:__asan::AsanThreadRegistry
initializeSameTU	asan/lit_tests/initialization-nobug.cc	/^int initializeSameTU() {$/;"	f
initialized	tsan/rtl/tsan_rtl.h	/^  bool initialized;$/;"	m	struct:__tsan::Context
inp_fd	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  int inp_fd;$/;"	m	struct:__tsan::ModuleDesc	file:
input_fd_	sanitizer_common/sanitizer_symbolizer.cc	/^  int input_fd_;$/;"	m	class:__sanitizer::ExternalSymbolizer	file:
instructions	interception/mach_override/mach_override.c	/^	char	instructions[sizeof(kIslandTemplate)];$/;"	m	struct:__anon9	file:
int16_t	asan/tests/asan_test_utils.h	/^typedef __int16          int16_t;$/;"	t
int32_t	asan/tests/asan_test_utils.h	/^typedef __int32          int32_t;$/;"	t
int64_t	asan/tests/asan_test_utils.h	/^typedef __int64          int64_t;$/;"	t
int8_t	asan/tests/asan_test_utils.h	/^typedef __int8           int8_t;$/;"	t
int_alloc_cnt	tsan/rtl/tsan_rtl.h	/^  u64 int_alloc_cnt[MBlockTypeCount];$/;"	m	struct:__tsan::Context
int_alloc_siz	tsan/rtl/tsan_rtl.h	/^  u64 int_alloc_siz[MBlockTypeCount];$/;"	m	struct:__tsan::Context
int_signal_send	tsan/rtl/tsan_interceptors.cc	/^  int int_signal_send;$/;"	m	struct:__tsan::SignalContext	file:
internal_alloc	tsan/go/tsan_go.cc	/^void *internal_alloc(MBlockType typ, uptr sz) {$/;"	f	namespace:__tsan
internal_alloc	tsan/rtl/tsan_mman.cc	/^void *internal_alloc(MBlockType typ, uptr sz) {$/;"	f	namespace:__tsan
internal_atoll	sanitizer_common/sanitizer_libc.cc	/^s64 internal_atoll(const char *nptr) {$/;"	f	namespace:__sanitizer
internal_close	sanitizer_common/sanitizer_linux.cc	/^int internal_close(fd_t fd) {$/;"	f	namespace:__sanitizer
internal_close	sanitizer_common/sanitizer_mac.cc	/^int internal_close(fd_t fd) {$/;"	f	namespace:__sanitizer
internal_close	sanitizer_common/sanitizer_win.cc	/^int internal_close(fd_t fd) {$/;"	f	namespace:__sanitizer
internal_dup2	sanitizer_common/sanitizer_linux.cc	/^int internal_dup2(int oldfd, int newfd) {$/;"	f	namespace:__sanitizer
internal_dup2	sanitizer_common/sanitizer_mac.cc	/^int internal_dup2(int oldfd, int newfd) {$/;"	f	namespace:__sanitizer
internal_dup2	sanitizer_common/sanitizer_win.cc	/^int internal_dup2(int oldfd, int newfd) {$/;"	f	namespace:__sanitizer
internal_filesize	sanitizer_common/sanitizer_linux.cc	/^uptr internal_filesize(fd_t fd) {$/;"	f	namespace:__sanitizer
internal_filesize	sanitizer_common/sanitizer_mac.cc	/^uptr internal_filesize(fd_t fd) {$/;"	f	namespace:__sanitizer
internal_filesize	sanitizer_common/sanitizer_win.cc	/^uptr internal_filesize(fd_t fd) {$/;"	f	namespace:__sanitizer
internal_free	tsan/go/tsan_go.cc	/^void internal_free(void *p) {$/;"	f	namespace:__tsan
internal_free	tsan/rtl/tsan_mman.cc	/^void internal_free(void *p) {$/;"	f	namespace:__tsan
internal_memchr	sanitizer_common/sanitizer_libc.cc	/^void *internal_memchr(const void *s, int c, uptr n) {$/;"	f	namespace:__sanitizer
internal_memcmp	sanitizer_common/sanitizer_libc.cc	/^int internal_memcmp(const void* s1, const void* s2, uptr n) {$/;"	f	namespace:__sanitizer
internal_memcpy	sanitizer_common/sanitizer_libc.cc	/^void *internal_memcpy(void *dest, const void *src, uptr n) {$/;"	f	namespace:__sanitizer
internal_memmove	sanitizer_common/sanitizer_libc.cc	/^void *internal_memmove(void *dest, const void *src, uptr n) {$/;"	f	namespace:__sanitizer
internal_memset	sanitizer_common/sanitizer_libc.cc	/^void *internal_memset(void* s, int c, uptr n) {$/;"	f	namespace:__sanitizer
internal_mmap	sanitizer_common/sanitizer_linux.cc	/^void *internal_mmap(void *addr, uptr length, int prot, int flags,$/;"	f	namespace:__sanitizer
internal_mmap	sanitizer_common/sanitizer_mac.cc	/^void *internal_mmap(void *addr, size_t length, int prot, int flags,$/;"	f	namespace:__sanitizer
internal_mmap	sanitizer_common/sanitizer_win.cc	/^void *internal_mmap(void *addr, uptr length, int prot, int flags,$/;"	f	namespace:__sanitizer
internal_munmap	sanitizer_common/sanitizer_linux.cc	/^int internal_munmap(void *addr, uptr length) {$/;"	f	namespace:__sanitizer
internal_munmap	sanitizer_common/sanitizer_mac.cc	/^int internal_munmap(void *addr, uptr length) {$/;"	f	namespace:__sanitizer
internal_munmap	sanitizer_common/sanitizer_win.cc	/^int internal_munmap(void *addr, uptr length) {$/;"	f	namespace:__sanitizer
internal_open	sanitizer_common/sanitizer_linux.cc	/^fd_t internal_open(const char *filename, bool write) {$/;"	f	namespace:__sanitizer
internal_open	sanitizer_common/sanitizer_mac.cc	/^fd_t internal_open(const char *filename, bool write) {$/;"	f	namespace:__sanitizer
internal_open	sanitizer_common/sanitizer_win.cc	/^fd_t internal_open(const char *filename, bool write) {$/;"	f	namespace:__sanitizer
internal_read	sanitizer_common/sanitizer_linux.cc	/^uptr internal_read(fd_t fd, void *buf, uptr count) {$/;"	f	namespace:__sanitizer
internal_read	sanitizer_common/sanitizer_mac.cc	/^uptr internal_read(fd_t fd, void *buf, uptr count) {$/;"	f	namespace:__sanitizer
internal_read	sanitizer_common/sanitizer_win.cc	/^uptr internal_read(fd_t fd, void *buf, uptr count) {$/;"	f	namespace:__sanitizer
internal_readlink	sanitizer_common/sanitizer_linux.cc	/^uptr internal_readlink(const char *path, char *buf, uptr bufsize) {$/;"	f	namespace:__sanitizer
internal_readlink	sanitizer_common/sanitizer_mac.cc	/^uptr internal_readlink(const char *path, char *buf, uptr bufsize) {$/;"	f	namespace:__sanitizer
internal_readlink	sanitizer_common/sanitizer_win.cc	/^uptr internal_readlink(const char *path, char *buf, uptr bufsize) {$/;"	f	namespace:__sanitizer
internal_sched_yield	sanitizer_common/sanitizer_linux.cc	/^int internal_sched_yield() {$/;"	f	namespace:__sanitizer
internal_sched_yield	sanitizer_common/sanitizer_mac.cc	/^int internal_sched_yield() {$/;"	f	namespace:__sanitizer
internal_sched_yield	sanitizer_common/sanitizer_win.cc	/^int internal_sched_yield() {$/;"	f	namespace:__sanitizer
internal_simple_strtoll	sanitizer_common/sanitizer_libc.cc	/^s64 internal_simple_strtoll(const char *nptr, char **endptr, int base) {$/;"	f	namespace:__sanitizer
internal_snprintf	sanitizer_common/sanitizer_printf.cc	/^int internal_snprintf(char *buffer, uptr length, const char *format, ...) {$/;"	f	namespace:__sanitizer
internal_start_thread	tsan/go/tsan_go.cc	/^void internal_start_thread(void(*func)(void*), void *arg) {$/;"	f	namespace:__tsan
internal_start_thread	tsan/rtl/tsan_interceptors.cc	/^void internal_start_thread(void(*func)(void *arg), void *arg) {$/;"	f	namespace:__tsan
internal_strchr	sanitizer_common/sanitizer_libc.cc	/^char* internal_strchr(const char *s, int c) {$/;"	f	namespace:__sanitizer
internal_strcmp	sanitizer_common/sanitizer_libc.cc	/^int internal_strcmp(const char *s1, const char *s2) {$/;"	f	namespace:__sanitizer
internal_strcspn	sanitizer_common/sanitizer_libc.cc	/^uptr internal_strcspn(const char *s, const char *reject) {$/;"	f	namespace:__sanitizer
internal_strdup	sanitizer_common/sanitizer_libc.cc	/^char* internal_strdup(const char *s) {$/;"	f	namespace:__sanitizer
internal_strlen	sanitizer_common/sanitizer_libc.cc	/^uptr internal_strlen(const char *s) {$/;"	f	namespace:__sanitizer
internal_strncat	sanitizer_common/sanitizer_libc.cc	/^char *internal_strncat(char *dst, const char *src, uptr n) {$/;"	f	namespace:__sanitizer
internal_strncmp	sanitizer_common/sanitizer_libc.cc	/^int internal_strncmp(const char *s1, const char *s2, uptr n) {$/;"	f	namespace:__sanitizer
internal_strncpy	sanitizer_common/sanitizer_libc.cc	/^char *internal_strncpy(char *dst, const char *src, uptr n) {$/;"	f	namespace:__sanitizer
internal_strnlen	sanitizer_common/sanitizer_libc.cc	/^uptr internal_strnlen(const char *s, uptr maxlen) {$/;"	f	namespace:__sanitizer
internal_strrchr	sanitizer_common/sanitizer_libc.cc	/^char *internal_strrchr(const char *s, int c) {$/;"	f	namespace:__sanitizer
internal_strstr	sanitizer_common/sanitizer_libc.cc	/^char *internal_strstr(const char *haystack, const char *needle) {$/;"	f	namespace:__sanitizer
internal_write	sanitizer_common/sanitizer_linux.cc	/^uptr internal_write(fd_t fd, const void *buf, uptr count) {$/;"	f	namespace:__sanitizer
internal_write	sanitizer_common/sanitizer_mac.cc	/^uptr internal_write(fd_t fd, const void *buf, uptr count) {$/;"	f	namespace:__sanitizer
internal_write	sanitizer_common/sanitizer_win.cc	/^uptr internal_write(fd_t fd, const void *buf, uptr count) {$/;"	f	namespace:__sanitizer
interpose_substitution	asan/dynamic/asan_interceptors_dynamic.cc	/^struct interpose_substitution {$/;"	s	namespace:__asan	file:
invoke_free_hook	tsan/rtl/tsan_mman.cc	/^void invoke_free_hook(void *ptr) {$/;"	f	namespace:__tsan
invoke_malloc_hook	tsan/rtl/tsan_mman.cc	/^void invoke_malloc_hook(void *ptr, uptr size) {$/;"	f	namespace:__tsan
isFloatTy	ubsan/ubsan_value.h	/^  bool isFloatTy() const { return getKind() == TK_Float; }$/;"	f	class:__ubsan::TypeDescriptor
isInlineInt	ubsan/ubsan_value.h	/^  bool isInlineInt() const {$/;"	f	class:__ubsan::Value
isIntegerTy	ubsan/ubsan_value.h	/^  bool isIntegerTy() const { return getKind() == TK_Integer; }$/;"	f	class:__ubsan::TypeDescriptor
isInvalid	ubsan/ubsan_value.h	/^  bool isInvalid() const { return !Filename; }$/;"	f	class:__ubsan::SourceLocation
isMinusOne	ubsan/ubsan_value.h	/^  bool isMinusOne() const {$/;"	f	class:__ubsan::Value
isNegative	ubsan/ubsan_value.h	/^  bool isNegative() const {$/;"	f	class:__ubsan::Value
isSignedIntegerTy	ubsan/ubsan_value.h	/^  bool isSignedIntegerTy() const {$/;"	f	class:__ubsan::TypeDescriptor
isUnsignedIntegerTy	ubsan/ubsan_value.h	/^  bool isUnsignedIntegerTy() const {$/;"	f	class:__ubsan::TypeDescriptor
is_alive	tsan/rtl/tsan_rtl.h	/^  bool is_alive;$/;"	m	struct:__tsan::ThreadState
is_broken	tsan/rtl/tsan_sync.h	/^  bool is_broken;$/;"	m	struct:__tsan::SyncVar
is_first	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  bool is_first;$/;"	m	struct:__tsan::DlIteratePhdrCtx	file:
is_linker_init	tsan/rtl/tsan_sync.h	/^  bool is_linker_init;$/;"	m	struct:__tsan::SyncVar
is_recursive	tsan/rtl/tsan_sync.h	/^  bool is_recursive;$/;"	m	struct:__tsan::SyncVar
is_rw	tsan/rtl/tsan_sync.h	/^  bool is_rw;$/;"	m	struct:__tsan::SyncVar
is_write	tsan/rtl/tsan_rtl.h	/^  bool is_write() const { return x_ & 32; }$/;"	f	class:__tsan::Shadow
island_allocator_pos	asan/asan_mac.cc	/^static void *island_allocator_pos = 0;$/;"	m	namespace:__asan	file:
island_free	interception/mach_override/mach_override.h	/^typedef mach_error_t island_free( void *ptr );$/;"	t
island_malloc	interception/mach_override/mach_override.h	/^typedef mach_error_t island_malloc( void **ptr, size_t size, void *hint );$/;"	t
iter_	tsan/rtl/tsan_mutex.cc	/^  int iter_;$/;"	m	class:__tsan::Backoff	file:
k	ubsan/lit_tests/TypeCheck/misaligned.cpp	/^  int k;$/;"	m	struct:S	file:
k	ubsan/lit_tests/TypeCheck/null.cpp	/^  int k;$/;"	m	struct:S	file:
kActiveSpinCnt	tsan/rtl/tsan_mutex.cc	/^  static const int kActiveSpinCnt = 20;$/;"	m	class:__tsan::Backoff	file:
kActiveSpinIters	tsan/rtl/tsan_mutex.cc	/^  static const int kActiveSpinIters = 10;$/;"	m	class:__tsan::Backoff	file:
kAddressHi	interception/mach_override/mach_override.c	43;"	d	file:
kAddressLo	interception/mach_override/mach_override.c	44;"	d	file:
kAllocateHigh	interception/mach_override/mach_override.c	86;"	d	file:
kAllocateNormal	interception/mach_override/mach_override.c	87;"	d	file:
kAllocatorSize	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^static const uptr kAllocatorSize = 0x10000000000;  \/\/ 1T.$/;"	v	file:
kAllocatorSize	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^static const uptr kAllocatorSize = 0x10000000000;  \/\/ 1T.$/;"	m	namespace:__anon26	file:
kAllocatorSize	tsan/rtl/tsan_rtl.h	/^const uptr kAllocatorSize  =  0x10000000000ULL;  \/\/ 1T.$/;"	m	namespace:__tsan
kAllocatorSpace	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^static const uptr kAllocatorSpace = 0x600000000000ULL;$/;"	v	file:
kAllocatorSpace	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^static const uptr kAllocatorSpace = 0x600000000000ULL;$/;"	m	namespace:__anon26	file:
kAllocatorSpace	tsan/rtl/tsan_rtl.h	/^const uptr kAllocatorSpace = 0x7d0000000000ULL;$/;"	m	namespace:__tsan
kAltStackSize	asan/asan_posix.cc	/^static const uptr kAltStackSize = SIGSTKSZ * 4;  \/\/ SIGSTKSZ is not enough.$/;"	v	file:
kAsanDefaultOptions	asan/lit_tests/default_options.cc	/^const char *kAsanDefaultOptions="verbosity=1 foo=bar";$/;"	v
kAsanGlobalRedzoneMagic	asan/asan_internal.h	/^const int kAsanGlobalRedzoneMagic = 0xf9;$/;"	m	namespace:__asan
kAsanHeapFreeMagic	asan/asan_internal.h	/^const int kAsanHeapFreeMagic = 0xfd;$/;"	m	namespace:__asan
kAsanHeapLeftRedzoneMagic	asan/asan_internal.h	/^const int kAsanHeapLeftRedzoneMagic = 0xfa;$/;"	m	namespace:__asan
kAsanHeapRightRedzoneMagic	asan/asan_internal.h	/^const int kAsanHeapRightRedzoneMagic = 0xfb;$/;"	m	namespace:__asan
kAsanInitializationOrderMagic	asan/asan_internal.h	/^const int kAsanInitializationOrderMagic = 0xf6;$/;"	m	namespace:__asan
kAsanInternalHeapMagic	asan/asan_internal.h	/^const int kAsanInternalHeapMagic = 0xfe;$/;"	m	namespace:__asan
kAsanStackAfterReturnMagic	asan/asan_internal.h	/^const int kAsanStackAfterReturnMagic = 0xf5;$/;"	m	namespace:__asan
kAsanStackLeftRedzoneMagic	asan/asan_internal.h	/^const int kAsanStackLeftRedzoneMagic = 0xf1;$/;"	m	namespace:__asan
kAsanStackMidRedzoneMagic	asan/asan_internal.h	/^const int kAsanStackMidRedzoneMagic = 0xf2;$/;"	m	namespace:__asan
kAsanStackPartialRedzoneMagic	asan/asan_internal.h	/^const int kAsanStackPartialRedzoneMagic = 0xf4;$/;"	m	namespace:__asan
kAsanStackRightRedzoneMagic	asan/asan_internal.h	/^const int kAsanStackRightRedzoneMagic = 0xf3;$/;"	m	namespace:__asan
kAsanUserPoisonedMemoryMagic	asan/asan_internal.h	/^const int kAsanUserPoisonedMemoryMagic = 0xf7;$/;"	m	namespace:__asan
kBlockMagic	sanitizer_common/sanitizer_allocator.cc	/^const u64 kBlockMagic = 0x6A6CB03ABCEBC041ull;$/;"	m	namespace:__sanitizer	file:
kCacheLineSize	sanitizer_common/sanitizer_allocator64.h	/^  COMPILER_CHECK(sizeof(RegionInfo) == kCacheLineSize);$/;"	m	class:__sanitizer::SizeClassAllocator64
kCacheLineSize	sanitizer_common/sanitizer_common.h	/^const uptr kCacheLineSize = 64;$/;"	m	namespace:__sanitizer
kClkBits	tsan/rtl/tsan_defs.h	/^const int kClkBits = 43;$/;"	m	namespace:__tsan
kClkShift	tsan/rtl/tsan_rtl.h	/^  static const int kClkShift = kTidShift - kClkBits;$/;"	m	class:__tsan::FastState
kCollectStats	tsan/rtl/tsan_defs.h	/^const bool kCollectStats = false;$/;"	m	namespace:__tsan
kCollectStats	tsan/rtl/tsan_defs.h	/^const bool kCollectStats = true;$/;"	m	namespace:__tsan
kCurrentStackFrameMagic	asan/asan_internal.h	/^static const uptr kCurrentStackFrameMagic = 0x41B58AB3;$/;"	m	namespace:__asan
kDeafultMallocContextSize	asan/asan_rtl.cc	/^static const int kDeafultMallocContextSize = 30;$/;"	m	namespace:__asan	file:
kDefaultAlignment	tsan/rtl/tsan_mman.h	/^const uptr kDefaultAlignment = 16;$/;"	m	namespace:__tsan
kDyldInsertLibraries	asan/asan_mac.cc	/^static const char kDyldInsertLibraries[] = "DYLD_INSERT_LIBRARIES";$/;"	m	namespace:__asan	file:
kFlagName	sanitizer_common/tests/sanitizer_flags_test.cc	/^static const char kFlagName[] = "flag_name";$/;"	m	namespace:__sanitizer	file:
kFreedBit	tsan/rtl/tsan_rtl.h	/^  static const u64 kFreedBit = 1ull << 63;$/;"	m	class:__tsan::FastState
kGetAllocatedSizeErrorMsg	asan/tests/asan_noinst_test.cc	/^static const char* kGetAllocatedSizeErrorMsg =$/;"	v	file:
kGlobalAndStackRedzone	asan/asan_mapping.h	66;"	d
kHighMemBeg	asan/asan_mapping.h	58;"	d
kHighMemEnd	asan/asan_mapping.h	/^  static const uptr kHighMemEnd = 0x00007fffffffffffUL;$/;"	v
kHighMemEnd	asan/asan_mapping.h	/^  static const uptr kHighMemEnd = 0xffffffff;$/;"	v
kHighShadowBeg	asan/asan_mapping.h	60;"	d
kHighShadowEnd	asan/asan_mapping.h	61;"	d
kIgnoreBit	tsan/rtl/tsan_rtl.h	/^  static const u64 kIgnoreBit = 1ull;$/;"	m	class:__tsan::FastState
kInstructionHi	interception/mach_override/mach_override.c	45;"	d	file:
kInstructionLo	interception/mach_override/mach_override.c	46;"	d	file:
kInstructions	interception/mach_override/mach_override.c	62;"	d	file:
kInvalidFd	sanitizer_common/sanitizer_libc.h	/^const fd_t kInvalidFd = -1;$/;"	m	namespace:__sanitizer
kInvalidPoisonMessage	asan/tests/asan_noinst_test.cc	/^static const char *kInvalidPoisonMessage = "invalid-poison-memory-range";$/;"	v	file:
kInvalidTid	asan/asan_thread.h	/^const u32 kInvalidTid = 0xffffff;  \/\/ Must fit into 24 bits.$/;"	m	namespace:__asan
kInvalidTid	tsan/rtl/tsan_sync.h	/^  static const int kInvalidTid = -1;$/;"	m	struct:__tsan::SyncVar
kInvalidUnpoisonMessage	asan/tests/asan_noinst_test.cc	/^static const char *kInvalidUnpoisonMessage = "invalid-unpoison-memory-range";$/;"	v	file:
kIslandBeg	asan/asan_mac.cc	184;"	d	file:
kIslandBeg	asan/asan_mac.cc	187;"	d	file:
kIslandEnd	asan/asan_mac.cc	183;"	d	file:
kIslandEnd	asan/asan_mac.cc	186;"	d	file:
kIslandTemplate	interception/mach_override/mach_override.c	/^long kIslandTemplate[] = {$/;"	v	file:
kIslandTemplate	interception/mach_override/mach_override.c	/^unsigned char kIslandTemplate[] = {$/;"	v	file:
kIters	tsan/tests/unit/tsan_mutex_test.cc	/^const int kIters = 16*1024;$/;"	m	namespace:__tsan	file:
kIters	tsan/tests/unit/tsan_mutex_test.cc	/^const int kIters = 64*1024;$/;"	m	namespace:__tsan	file:
kJumpAddress	interception/mach_override/mach_override.c	63;"	d	file:
kJumpAddress	interception/mach_override/mach_override.c	68;"	d	file:
kLargeMalloc	asan/tests/asan_test.cc	/^const size_t kLargeMalloc = 1 << 24;$/;"	v
kLinuxAppMemBeg	tsan/rtl/tsan_platform.h	/^static const uptr kLinuxAppMemBeg = 0x000000000000ULL;$/;"	m	namespace:__tsan
kLinuxAppMemEnd	tsan/rtl/tsan_platform.h	/^static const uptr kLinuxAppMemEnd = 0x00fcffffffffULL;$/;"	m	namespace:__tsan
kLinuxAppMemMsk	tsan/rtl/tsan_platform.h	/^static const uptr kLinuxAppMemMsk = 0x7c0000000000ULL;$/;"	m	namespace:__tsan
kLinuxShadowBeg	tsan/rtl/tsan_platform.h	/^static const uptr kLinuxShadowBeg = MemToShadow(kLinuxAppMemBeg);$/;"	m	namespace:__tsan
kLinuxShadowEnd	tsan/rtl/tsan_platform.h	/^static const uptr kLinuxShadowEnd =$/;"	m	namespace:__tsan
kLinuxShadowMsk	tsan/rtl/tsan_platform.h	/^static const uptr kLinuxShadowMsk = 0x100000000000ULL;$/;"	m	namespace:__tsan
kLowMemBeg	asan/asan_mapping.h	52;"	d
kLowMemEnd	asan/asan_mapping.h	53;"	d
kLowShadowBeg	asan/asan_mapping.h	55;"	d
kLowShadowEnd	asan/asan_mapping.h	56;"	d
kMFCTRInstruction	interception/mach_override/mach_override.c	282;"	d	file:
kMFCTRMask	interception/mach_override/mach_override.c	281;"	d	file:
kMallocSizeClassStep	asan/asan_allocator.cc	/^static const uptr kMallocSizeClassStep = 1UL << kMallocSizeClassStepLog;$/;"	m	namespace:__asan	file:
kMallocSizeClassStepLog	asan/asan_allocator.cc	/^static const uptr kMallocSizeClassStepLog = 26;$/;"	m	namespace:__asan	file:
kMallocUsableSizeErrorMsg	asan/tests/asan_test.cc	/^static const char *kMallocUsableSizeErrorMsg =$/;"	v	file:
kManyThreadsIterations	asan/tests/asan_noinst_test.cc	/^static const size_t kManyThreadsIterations = 250;$/;"	v	file:
kManyThreadsMallocSizes	asan/tests/asan_noinst_test.cc	/^static const size_t kManyThreadsMallocSizes[] = {5, 1UL<<10, 1UL<<20, 357};$/;"	v	file:
kManyThreadsNumThreads	asan/tests/asan_noinst_test.cc	/^static const size_t kManyThreadsNumThreads = (__WORDSIZE == 32) ? 40 : 200;$/;"	v	file:
kMaxAllowedMallocSize	asan/asan_allocator.cc	/^static const uptr kMaxAllowedMallocSize =$/;"	m	namespace:__asan	file:
kMaxAtExit	tsan/rtl/tsan_interceptors.cc	/^  static const int kMaxAtExit = 128;$/;"	m	class:AtExitContext	file:
kMaxAvailableRam	asan/asan_allocator.cc	/^static const u64 kMaxAvailableRam = 128ULL << 30;  \/\/ 128G$/;"	m	namespace:__asan	file:
kMaxDescLen	tsan/rtl/tsan_interface_ann.cc	/^static const int kMaxDescLen = 128;$/;"	m	namespace:__tsan	file:
kMaxGoroutinesEver	tsan/go/tsan_go.cc	/^const int kMaxGoroutinesEver = 128*1024;$/;"	m	namespace:__tsan	file:
kMaxId	sanitizer_common/sanitizer_stackdepot.cc	/^const int kMaxId = 1 << kPartShift;$/;"	m	namespace:__sanitizer	file:
kMaxNumberOfAddressRanges	sanitizer_common/sanitizer_symbolizer.h	/^  static const uptr kMaxNumberOfAddressRanges = 6;$/;"	m	class:__sanitizer::LoadedModule
kMaxNumberOfModuleContexts	sanitizer_common/sanitizer_symbolizer.cc	/^  static const uptr kMaxNumberOfModuleContexts = 1 << 14;$/;"	m	class:__sanitizer::Symbolizer	file:
kMaxNumberOfThreads	asan/asan_thread_registry.h	/^  static const u32 kMaxNumberOfThreads = (1 << 22);  \/\/ 4M$/;"	m	class:__asan::AsanThreadRegistry
kMaxPathLength	sanitizer_common/sanitizer_symbolizer_linux.cc	/^static const uptr kMaxPathLength = 512;$/;"	m	namespace:__sanitizer	file:
kMaxSize	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr kMaxSize = l5;$/;"	m	class:__sanitizer::DefaultSizeClassMap
kMaxSizeForThreadLocalFreeList	asan/asan_allocator.cc	/^static const uptr kMaxSizeForThreadLocalFreeList =$/;"	m	namespace:__asan	file:
kMaxStackFrameSizeLog	asan/asan_allocator.h	/^  static const uptr kMaxStackFrameSizeLog = 16;  \/\/ Max stack frame is 64K.$/;"	m	class:__asan::FakeStack
kMaxStackMallocSize	asan/asan_allocator.h	/^  static const uptr kMaxStackMallocSize = 1 << kMaxStackFrameSizeLog;$/;"	m	class:__asan::FakeStack
kMaxThreadLocalQuarantine	asan/asan_allocator.cc	/^static const uptr kMaxThreadLocalQuarantine = 1 << 20;  \/\/ 1M$/;"	m	namespace:__asan	file:
kMaxTid	tsan/rtl/tsan_defs.h	/^const unsigned kMaxTid = 1 << kTidBits;$/;"	m	namespace:__tsan
kMaxTidInClock	tsan/rtl/tsan_defs.h	/^const unsigned kMaxTidInClock = kMaxTid * 2;  \/\/ This includes msb 'freed' bit.$/;"	m	namespace:__tsan
kMaxTimesRestarted	sanitizer_common/sanitizer_symbolizer.cc	/^  static const uptr kMaxTimesRestarted = 5;$/;"	m	class:__sanitizer::ExternalSymbolizer	file:
kMinAllocSize	asan/asan_allocator.cc	/^static const uptr kMinAllocSize = REDZONE * 2;$/;"	m	namespace:__asan	file:
kMinMmapSize	asan/asan_allocator.cc	/^static const uptr kMinMmapSize = (ASAN_LOW_MEMORY) ? 4UL << 17 : 4UL << 20;$/;"	m	namespace:__asan	file:
kMinSize	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr kMinSize = l0;$/;"	m	class:__sanitizer::DefaultSizeClassMap
kMinStackFrameSizeLog	asan/asan_allocator.h	/^  static const uptr kMinStackFrameSizeLog = 9;  \/\/ Min frame is 512B.$/;"	m	class:__asan::FakeStack
kMmapGranularity	sanitizer_common/sanitizer_common.h	/^const uptr kMmapGranularity = 1UL << 16;$/;"	m	namespace:__sanitizer
kMmapGranularity	sanitizer_common/sanitizer_common.h	/^const uptr kMmapGranularity = kPageSize;$/;"	m	namespace:__sanitizer
kNumClasses	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr kNumClasses = 256;  \/\/ Power of two <= 256$/;"	m	class:__sanitizer::SizeClassAllocator64
kNumClasses	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr kNumClasses = u4 + 1;$/;"	m	class:__sanitizer::DefaultSizeClassMap
kNumIter	tsan/benchmarks/mini_bench_local.cc	/^const int kNumIter = 1000;$/;"	v
kNumIter	tsan/benchmarks/mini_bench_shared.cc	/^const int kNumIter = 1000;$/;"	v
kNumMutexes	tsan/benchmarks/vts_many_threads_bench.cc	/^const int kNumMutexes = 1024;$/;"	v
kNumberOfSizeClasses	asan/asan_allocator.h	/^  static const uptr kNumberOfSizeClasses =$/;"	m	class:__asan::FakeStack
kNumberOfSizeClasses	asan/asan_allocator.h	/^static const uptr kNumberOfSizeClasses = 255;$/;"	m	namespace:__asan
kOriginalInstructionsSize	interception/mach_override/mach_override.c	50;"	d	file:
kOriginalInstructionsSize	interception/mach_override/mach_override.c	66;"	d	file:
kOverriddenHandler	asan/tests/asan_test.cc	/^const char kOverriddenHandler[] = "ASan signal handler has been overridden\\n";$/;"	m	namespace:__anon1	file:
kPageSize	asan/lit_tests/dlclose-test.cc	/^static const int kPageSize = 4096;$/;"	v	file:
kPageSize	asan/tests/asan_test.cc	/^static const int kPageSize = 4096;$/;"	v	file:
kPageSize	sanitizer_common/sanitizer_common.h	/^const uptr kPageSize = 1UL << kPageSizeBits;$/;"	m	namespace:__sanitizer
kPageSizeBits	sanitizer_common/sanitizer_common.h	/^const uptr kPageSizeBits = 12;$/;"	m	namespace:__sanitizer
kPartBits	sanitizer_common/sanitizer_stackdepot.cc	/^const int kPartBits = 8;$/;"	m	namespace:__sanitizer	file:
kPartCount	sanitizer_common/sanitizer_stackdepot.cc	/^const int kPartCount = 1 << kPartBits;  \/\/ Number of subparts in the table.$/;"	m	namespace:__sanitizer	file:
kPartCount	tsan/rtl/tsan_sync.h	/^  static const int kPartCount = 1009;$/;"	m	class:__tsan::SyncTab
kPartShift	sanitizer_common/sanitizer_stackdepot.cc	/^const int kPartShift = sizeof(u32) * 8 - kPartBits - 1;$/;"	m	namespace:__sanitizer	file:
kPartSize	sanitizer_common/sanitizer_stackdepot.cc	/^const int kPartSize = kTabSize \/ kPartCount;$/;"	m	namespace:__sanitizer	file:
kPopulateSize	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr kPopulateSize = 1 << 18;$/;"	m	class:__sanitizer::SizeClassAllocator64
kPthreadAttrSize	tsan/rtl/tsan_interceptors.cc	/^const int kPthreadAttrSize = 56;$/;"	v
kReadLock	tsan/rtl/tsan_mutex.cc	/^const uptr kReadLock = 2;$/;"	m	namespace:__tsan	file:
kRegionSize	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr kRegionSize = kSpaceSize \/ kNumClasses;$/;"	m	class:__sanitizer::SizeClassAllocator64
kRepeat	tsan/tests/rtl/tsan_bench.cc	/^const int kRepeat = 2*1024*1024;$/;"	v
kRetiredStackFrameMagic	asan/asan_internal.h	/^static const uptr kRetiredStackFrameMagic = 0x45E0360E;$/;"	m	namespace:__asan
kShadowCell	tsan/rtl/tsan_defs.h	/^const unsigned kShadowCell = 8;$/;"	m	namespace:__tsan
kShadowCnt	tsan/rtl/tsan_defs.h	/^const unsigned kShadowCnt = 8;$/;"	m	namespace:__tsan
kShadowCnt	tsan/rtl/tsan_defs.h	/^const unsigned kShadowCnt = TSAN_SHADOW_COUNT;$/;"	m	namespace:__tsan
kShadowFreed	tsan/rtl/tsan_rtl.h	/^const u64 kShadowFreed = 0xfffffffffffffff8ull;$/;"	m	namespace:__tsan
kShadowGapBeg	asan/asan_mapping.h	63;"	d
kShadowGapEnd	asan/asan_mapping.h	64;"	d
kShadowSize	tsan/rtl/tsan_defs.h	/^const unsigned kShadowSize = 8;$/;"	m	namespace:__tsan
kShadowStackSize	tsan/rtl/tsan_defs.h	/^const int kShadowStackSize = 4 * 1024;$/;"	m	namespace:__tsan
kSigCount	tsan/rtl/tsan_interceptors.cc	/^const int kSigCount = 128;$/;"	v
kSize	tsan/tests/rtl/tsan_bench.cc	/^const int kSize = 128;$/;"	v
kSize	tsan/tests/unit/tsan_mutex_test.cc	/^  static const int kSize = 64;$/;"	m	class:__tsan::TestData	file:
kStackTraceMax	sanitizer_common/sanitizer_stacktrace.h	/^static const uptr kStackTraceMax = 256;$/;"	m	namespace:__sanitizer
kTabSize	sanitizer_common/sanitizer_stackdepot.cc	/^const int kTabSize = 1024 * 1024;  \/\/ Hash table size.$/;"	m	namespace:__sanitizer	file:
kThreadQuarantineSize	tsan/rtl/tsan_rtl_thread.cc	/^const int kThreadQuarantineSize = 16;$/;"	m	namespace:__tsan	file:
kThreads	tsan/tests/unit/tsan_mutex_test.cc	/^const int kThreads = 8;$/;"	m	namespace:__tsan	file:
kTidBits	tsan/rtl/tsan_defs.h	/^const int kTidBits = 13;$/;"	m	namespace:__tsan
kTidShift	tsan/rtl/tsan_rtl.h	/^  static const int kTidShift = 64 - kTidBits - 1;$/;"	m	class:__tsan::FastState
kTracePartSize	tsan/rtl/tsan_trace.h	/^const int kTracePartSize = 16 * 1024;$/;"	m	namespace:__tsan
kTraceParts	tsan/rtl/tsan_trace.h	/^const int kTraceParts = TSAN_HISTORY_SIZE * 1024 \/ kTracePartSize;$/;"	m	namespace:__tsan
kTraceSize	tsan/rtl/tsan_trace.h	/^const int kTraceSize = kTracePartSize * kTraceParts;$/;"	m	namespace:__tsan
kTraceStackSize	tsan/rtl/tsan_defs.h	/^const int kTraceStackSize = 256;$/;"	m	namespace:__tsan
kUnknownCrash	asan/tests/asan_test.cc	/^const char kUnknownCrash[] = "AddressSanitizer: SEGV on unknown address";$/;"	m	namespace:__anon1	file:
kUnlocked	tsan/rtl/tsan_mutex.cc	/^const uptr kUnlocked = 0;$/;"	m	namespace:__tsan	file:
kUseAfterPoisonErrorMessage	asan/tests/asan_noinst_test.cc	/^static const char* kUseAfterPoisonErrorMessage = "use-after-poison";$/;"	v	file:
kWordSize	sanitizer_common/sanitizer_common.h	/^const uptr kWordSize = __WORDSIZE \/ 8;$/;"	m	namespace:__sanitizer
kWordSizeInBits	sanitizer_common/sanitizer_common.h	/^const uptr kWordSizeInBits = 8 * kWordSize;$/;"	m	namespace:__sanitizer
kWriteLock	tsan/rtl/tsan_mutex.cc	/^const uptr kWriteLock = 1;$/;"	m	namespace:__tsan	file:
kWriteRate	tsan/tests/unit/tsan_mutex_test.cc	/^const int kWriteRate = 1024;$/;"	m	namespace:__tsan	file:
key	tsan/tests/rtl/tsan_posix.cc	/^  pthread_key_t key;$/;"	m	struct:thread_key	file:
l0	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr l0 = 1 << 4;$/;"	m	class:__sanitizer::DefaultSizeClassMap
l1	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr l1 = 1 << 9;$/;"	m	class:__sanitizer::DefaultSizeClassMap
l2	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr l2 = 1 << 12;$/;"	m	class:__sanitizer::DefaultSizeClassMap
l3	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr l3 = 1 << 15;$/;"	m	class:__sanitizer::DefaultSizeClassMap
l4	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr l4 = 1 << 18;$/;"	m	class:__sanitizer::DefaultSizeClassMap
l5	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr l5 = 1 << 21;$/;"	m	class:__sanitizer::DefaultSizeClassMap
last_	asan/asan_allocator.h	/^  AsanChunk *last_;$/;"	m	class:__asan::AsanChunkFifoList
last_	asan/asan_allocator.h	/^  FakeFrame *first_, *last_;$/;"	m	struct:__asan::FakeFrameFifo
last_	sanitizer_common/sanitizer_list.h	/^  Item *last_;$/;"	m	struct:__sanitizer::IntrusiveList
last_	tsan/rtl/tsan_vector.h	/^  T *last_;$/;"	m	class:__tsan::Vector
last_chunk	asan/asan_allocator.cc	/^  uptr last_chunk;$/;"	m	struct:__asan::PageGroup	file:
last_lock	tsan/rtl/tsan_sync.h	/^  u64 last_lock;$/;"	m	struct:__tsan::SyncVar
last_sleep_clock	tsan/rtl/tsan_rtl.h	/^  ThreadClock last_sleep_clock;$/;"	m	struct:__tsan::ThreadState
last_sleep_stack_id	tsan/rtl/tsan_rtl.h	/^  u32 last_sleep_stack_id;$/;"	m	struct:__tsan::ThreadState
ld	ppc/DD.h	/^	long double ld;$/;"	m	union:__anon23
len	tsan/benchmarks/mini_bench_local.cc	/^int len;$/;"	v
len	tsan/benchmarks/mini_bench_shared.cc	/^int len;$/;"	v
length	interception/mach_override/mach_override.c	/^	unsigned int length; \/\/ max 15$/;"	m	struct:__anon10	file:
length_of_string	profile/GCDAProfiling.c	/^static uint32_t length_of_string(const char *s) {$/;"	f	file:
line	sanitizer_common/sanitizer_symbolizer.h	/^  int line;$/;"	m	struct:__sanitizer::AddressInfo
line	tsan/rtl/tsan_interface_ann.cc	/^  int line;$/;"	m	struct:__tsan::ExpectRace	file:
line	tsan/rtl/tsan_report.h	/^  int line;$/;"	m	struct:__tsan::ReportLocation
line	tsan/rtl/tsan_report.h	/^  int line;$/;"	m	struct:__tsan::ReportStack
link	sanitizer_common/sanitizer_stackdepot.cc	/^  StackDesc *link;$/;"	m	struct:__sanitizer::StackDesc	file:
list_	sanitizer_common/sanitizer_allocator64.h	/^  Header *list_;$/;"	m	class:__sanitizer::LargeMmapAllocator
list_of_all_globals	asan/asan_globals.cc	/^static ListOfGlobals *list_of_all_globals;$/;"	m	namespace:__asan	file:
list_of_dynamic_init_globals	asan/asan_globals.cc	/^static ListOfGlobals *list_of_dynamic_init_globals;$/;"	m	namespace:__asan	file:
llvm_gcda_emit_arcs	profile/GCDAProfiling.c	/^void llvm_gcda_emit_arcs(uint32_t num_counters, uint64_t *counters) {$/;"	f
llvm_gcda_emit_function	profile/GCDAProfiling.c	/^void llvm_gcda_emit_function(uint32_t ident, const char *function_name) {$/;"	f
llvm_gcda_end_file	profile/GCDAProfiling.c	/^void llvm_gcda_end_file() {$/;"	f
llvm_gcda_increment_indirect_counter	profile/GCDAProfiling.c	/^void llvm_gcda_increment_indirect_counter(uint32_t *predecessor,$/;"	f
llvm_gcda_start_file	profile/GCDAProfiling.c	/^void llvm_gcda_start_file(const char *orig_filename) {$/;"	f
llvm_symbolizer	asan/scripts/asan_symbolize.py	/^llvm_symbolizer = None$/;"	v
lo	ppc/DD.h	/^		double lo;$/;"	m	struct:__anon23::__anon24
lo	tsan/rtl/tsan_md5.cc	/^  MD5_u32plus lo, hi;$/;"	m	struct:__tsan::__anon29	file:
loWord	fp_lib.h	67;"	d
loc	tsan/tests/rtl/tsan_test_util.h	/^  void *loc() const { return loc_; }$/;"	f	class:MemLoc
loc_	tsan/tests/rtl/tsan_test_util.h	/^  void *const loc_;$/;"	m	class:MemLoc
local_thread	tsan/tests/rtl/tsan_posix.cc	/^static void *local_thread(void *p) {$/;"	f	file:
local_var	tsan/tests/rtl/tsan_posix.cc	/^static __thread int local_var;$/;"	v	file:
lock	atomic.c	/^inline static void lock(Lock *l) {$/;"	f	file:
lock	sanitizer_common/sanitizer_stackdepot.cc	/^static StackDesc *lock(atomic_uintptr_t *p) {$/;"	f	namespace:__sanitizer
lock_for_pointer	atomic.c	/^static inline Lock *lock_for_pointer(void *ptr) {$/;"	f	file:
locked_	tsan/rtl/tsan_mutex.h	/^  u64 locked_[MutexTypeCount];$/;"	m	class:__tsan::DeadlockDetector
locks	atomic.c	/^static Lock locks[SPINLOCK_COUNT] = { [0 ...  SPINLOCK_COUNT-1] = {0,1,0} };$/;"	v	file:
locks	atomic.c	/^static Lock locks[SPINLOCK_COUNT];$/;"	v	file:
locs	tsan/rtl/tsan_report.h	/^  Vector<ReportLocation*> locs;$/;"	m	class:__tsan::ReportDesc
log_fileno	tsan/rtl/tsan_flags.h	/^  int log_fileno;$/;"	m	struct:__tsan::Flags
log_path	asan/asan_flags.h	/^  const char *log_path;$/;"	m	struct:__asan::Flags
long_double_bits	int_types.h	/^} long_double_bits;$/;"	t	typeref:union:__anon22
long_t	tsan/rtl/tsan_interceptors.cc	/^typedef long long_t;  \/\/ NOLINT$/;"	t	file:
loop	asan/scripts/asan_symbolize.py	/^  loop = SymbolizationLoop()$/;"	v	class:SymbolizationLoop
low	int_types.h	/^        du_int low;$/;"	m	struct:__anon15::__anon16
low	int_types.h	/^        du_int low;$/;"	m	struct:__anon17::__anon18
low	int_types.h	/^        su_int low;$/;"	m	struct:__anon11::__anon12
low	int_types.h	/^        su_int low;$/;"	m	struct:__anon13::__anon14
low	int_types.h	/^    udwords low;$/;"	m	struct:__anon21
low_level_alloc_callback	sanitizer_common/sanitizer_allocator.cc	/^static LowLevelAllocateCallback low_level_alloc_callback;$/;"	m	namespace:__sanitizer	file:
m	tsan/tests/rtl/tsan_posix.cc	/^  pthread_mutex_t m;$/;"	m	struct:CondContext	file:
m_	tsan/benchmarks/vts_many_threads_bench.cc	/^  pthread_mutex_t m_;$/;"	m	class:Mutex	file:
mac_ignore_invalid_free	asan/asan_flags.h	/^  bool mac_ignore_invalid_free;$/;"	m	struct:__asan::Flags
magic	asan/asan_allocator.h	/^  uptr magic;  \/\/ Modified by the instrumented code.$/;"	m	struct:__asan::FakeFrame
main	asan/lit_tests/Linux/clone_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/Linux/initialization-bug-any-order.cc	/^int main() {$/;"	f
main	asan/lit_tests/Linux/interception_failure_test.cc	/^int main() {$/;"	f
main	asan/lit_tests/Linux/interception_malloc_test.cc	/^int main() {$/;"	f
main	asan/lit_tests/Linux/interception_test.cc	/^int main() {$/;"	f
main	asan/lit_tests/Linux/rlimit_mmap_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/blacklist.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/deep_stack_uaf.cc	/^int main() {$/;"	f
main	asan/lit_tests/deep_tail_call.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/deep_thread_stack.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	asan/lit_tests/default_options.cc	/^int main() {$/;"	f
main	asan/lit_tests/dlclose-test.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	asan/lit_tests/force_inline_opt0.cc	/^int main() {$/;"	f
main	asan/lit_tests/global-overflow.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/heap-overflow.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/initialization-bug.cc	/^int main() {$/;"	f
main	asan/lit_tests/initialization-nobug.cc	/^int main() { return 0; }$/;"	f
main	asan/lit_tests/interface_symbols.c	/^int main() { return 0; }$/;"	f
main	asan/lit_tests/large_func_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/log-path_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/malloc_hook.cc	/^int main() {$/;"	f
main	asan/lit_tests/memcmp_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/null_deref.cc	/^int main() {$/;"	f
main	asan/lit_tests/on_error_callback.cc	/^int main() {$/;"	f
main	asan/lit_tests/sanity_check_pure_c.c	/^int main() {$/;"	f
main	asan/lit_tests/shared-lib-test.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	asan/lit_tests/sleep_before_dying.c	/^int main() {$/;"	f
main	asan/lit_tests/stack-overflow.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/stack-use-after-return.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/strip_path_prefix.c	/^int main() {$/;"	f
main	asan/lit_tests/strncpy-overflow.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/lit_tests/symbolize_callback.cc	/^int main() {$/;"	f
main	asan/lit_tests/use-after-free.cc	/^int main() {$/;"	f
main	asan/tests/asan_benchmarks_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	asan/tests/asan_exceptions_test.cc	/^int main() {$/;"	f
main	asan/tests/asan_racy_double_free_test.cc	/^int main() {$/;"	f
main	asan/tests/asan_test_main.cc	/^int main(int argc, char **argv) {$/;"	f
main	sanitizer_common/tests/sanitizer_test_main.cc	/^int main(int argc, char **argv) {$/;"	f
main	tsan/benchmarks/mini_bench_local.cc	/^int main(int argc, char **argv) {$/;"	f
main	tsan/benchmarks/mini_bench_shared.cc	/^int main(int argc, char **argv) {$/;"	f
main	tsan/benchmarks/start_many_threads.cc	/^int main(int argc, char **argv) {$/;"	f
main	tsan/benchmarks/vts_many_threads_bench.cc	/^int main(int argc, char **argv) {$/;"	f
main	tsan/go/test.c	/^int main(void) {$/;"	f
main	tsan/lit_tests/free_race.c	/^int main() {$/;"	f
main	tsan/lit_tests/free_race2.c	/^int main() {$/;"	f
main	tsan/lit_tests/heap_race.cc	/^int main() {$/;"	f
main	tsan/lit_tests/memcpy_race.cc	/^int main() {$/;"	f
main	tsan/lit_tests/mop_with_offset.cc	/^int main() {$/;"	f
main	tsan/lit_tests/mop_with_offset2.cc	/^int main() {$/;"	f
main	tsan/lit_tests/mutex_destroy_locked.cc	/^int main() {$/;"	f
main	tsan/lit_tests/race_on_barrier.c	/^int main() {$/;"	f
main	tsan/lit_tests/race_on_barrier2.c	/^int main() {$/;"	f
main	tsan/lit_tests/race_on_heap.cc	/^int main() {$/;"	f
main	tsan/lit_tests/race_on_mutex.c	/^int main() {$/;"	f
main	tsan/lit_tests/race_with_finished_thread.cc	/^int main() {$/;"	f
main	tsan/lit_tests/simple_race.c	/^int main() {$/;"	f
main	tsan/lit_tests/simple_race.cc	/^int main() {$/;"	f
main	tsan/lit_tests/simple_stack.c	/^int main() {$/;"	f
main	tsan/lit_tests/simple_stack2.cc	/^int main() {$/;"	f
main	tsan/lit_tests/sleep_sync.cc	/^int main() {$/;"	f
main	tsan/lit_tests/sleep_sync2.cc	/^int main() {$/;"	f
main	tsan/lit_tests/static_init1.cc	/^int main() {$/;"	f
main	tsan/lit_tests/static_init2.cc	/^int main() {$/;"	f
main	tsan/lit_tests/static_init3.cc	/^int main() {$/;"	f
main	tsan/lit_tests/static_init4.cc	/^int main() {$/;"	f
main	tsan/lit_tests/static_init5.cc	/^int main() {$/;"	f
main	tsan/lit_tests/suppress_same_address.cc	/^int main() {$/;"	f
main	tsan/lit_tests/suppress_same_stacks.cc	/^int main() {$/;"	f
main	tsan/lit_tests/thread_leak.c	/^int main() {$/;"	f
main	tsan/lit_tests/thread_leak2.c	/^int main() {$/;"	f
main	tsan/lit_tests/thread_leak3.c	/^int main() {$/;"	f
main	tsan/lit_tests/tiny_race.c	/^int main() {$/;"	f
main	tsan/lit_tests/virtual_inheritance_compile_bug.cc	/^int main() {$/;"	f
main	tsan/lit_tests/vptr_benign_race.cc	/^int main() {$/;"	f
main	tsan/lit_tests/vptr_harmful_race.cc	/^int main() {$/;"	f
main	tsan/tests/rtl/tsan_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	tsan/tests/rtl/tsan_test_util_linux.cc	/^  bool main;$/;"	m	struct:ScopedThread::Impl	file:
main	ubsan/lit_tests/Float/cast-overflow.cpp	/^int main(int argc, char **argv) {$/;"	f
main	ubsan/lit_tests/Integer/add-overflow.cpp	/^int main() {$/;"	f
main	ubsan/lit_tests/Integer/div-overflow.cpp	/^int main() {$/;"	f
main	ubsan/lit_tests/Integer/div-zero.cpp	/^int main() {$/;"	f
main	ubsan/lit_tests/Integer/incdec-overflow.cpp	/^int main() {$/;"	f
main	ubsan/lit_tests/Integer/mul-overflow.cpp	/^int main() {$/;"	f
main	ubsan/lit_tests/Integer/negate-overflow.cpp	/^int main() {$/;"	f
main	ubsan/lit_tests/Integer/shift.cpp	/^int main() {$/;"	f
main	ubsan/lit_tests/Integer/sub-overflow.cpp	/^int main() {$/;"	f
main	ubsan/lit_tests/Misc/missing_return.cpp	/^int main(int, char **argv) {$/;"	f
main	ubsan/lit_tests/Misc/unreachable.cpp	/^int main(int, char **argv) {$/;"	f
main	ubsan/lit_tests/Misc/vla.c	/^int main(int argc, char **argv) {$/;"	f
main	ubsan/lit_tests/TypeCheck/misaligned.cpp	/^int main(int, char **argv) {$/;"	f
main	ubsan/lit_tests/TypeCheck/null.cpp	/^int main(int, char **argv) {$/;"	f
main_thread_	asan/asan_thread_registry.h	/^  AsanThread main_thread_;$/;"	m	class:__asan::AsanThreadRegistry
main_thread_summary_	asan/asan_thread_registry.h	/^  AsanThreadSummary main_thread_summary_;$/;"	m	class:__asan::AsanThreadRegistry
main_threads_ready	tsan/benchmarks/vts_many_threads_bench.cc	/^pthread_barrier_t all_threads_ready, main_threads_ready;$/;"	v
makeFinite	ppc/divtc3.c	12;"	d	file:
makeFinite	ppc/multc3.c	8;"	d	file:
makeIslandExecutable	interception/mach_override/mach_override.c	/^static mach_error_t makeIslandExecutable(void *address) {$/;"	f	file:
make_ti	int_types.h	/^static inline ti_int make_ti(di_int h, di_int l) {$/;"	f
make_tu	int_types.h	/^static inline tu_int make_tu(du_int h, du_int l) {$/;"	f
malloc	asan/asan_malloc_linux.cc	/^  void* (*malloc)(uptr bytes);$/;"	m	struct:MallocDebug	file:
malloc	asan/asan_malloc_win.cc	/^void *malloc(size_t size) {$/;"	f
malloc	asan/lit_tests/Linux/interception_malloc_test.cc	/^extern "C" void *malloc(size_t size) {$/;"	f
malloc	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^void *malloc(size_t size) {$/;"	f
malloc_aaa	asan/tests/asan_test.cc	/^NOINLINE void *malloc_aaa(size_t size) {$/;"	f
malloc_bbb	asan/tests/asan_test.cc	/^NOINLINE void *malloc_bbb(size_t size) {$/;"	f
malloc_ccc	asan/tests/asan_test.cc	/^NOINLINE void *malloc_ccc(size_t size) {$/;"	f
malloc_context_size	asan/asan_flags.h	/^  int  malloc_context_size;$/;"	m	struct:__asan::Flags
malloc_ddd	asan/tests/asan_test.cc	/^NOINLINE void *malloc_ddd(size_t size) {$/;"	f
malloc_eee	asan/tests/asan_test.cc	/^NOINLINE void *malloc_eee(size_t size) {$/;"	f
malloc_fff	asan/tests/asan_test.cc	/^NOINLINE void *malloc_fff(size_t size) {$/;"	f
malloc_large	asan/asan_stats.h	/^  uptr malloc_large;$/;"	m	struct:__asan::AsanStats
malloc_small_slow	asan/asan_stats.h	/^  uptr malloc_small_slow;$/;"	m	struct:__asan::AsanStats
malloc_storage	asan/asan_thread.h	/^  AsanThreadLocalMallocStorage &malloc_storage() { return malloc_storage_; }$/;"	f	class:__asan::AsanThread
malloc_storage_	asan/asan_thread.h	/^  AsanThreadLocalMallocStorage malloc_storage_;$/;"	m	class:__asan::AsanThread
malloced	asan/asan_stats.h	/^  uptr malloced;$/;"	m	struct:__asan::AsanStats
malloced_by_size	asan/asan_stats.h	/^  uptr malloced_by_size[kNumberOfSizeClasses];$/;"	m	struct:__asan::AsanStats
malloced_redzones	asan/asan_stats.h	/^  uptr malloced_redzones;$/;"	m	struct:__asan::AsanStats
mallocs	asan/asan_stats.h	/^  uptr mallocs;$/;"	m	struct:__asan::AsanStats
mangle_filename	profile/GCDAProfiling.c	/^static char *mangle_filename(const char *orig_filename) {$/;"	f	file:
map_beg	sanitizer_common/sanitizer_allocator64.h	/^    uptr map_beg;$/;"	m	struct:__sanitizer::LargeMmapAllocator::Header
map_size	sanitizer_common/sanitizer_allocator64.h	/^    uptr map_size;$/;"	m	struct:__sanitizer::LargeMmapAllocator::Header
mask	interception/mach_override/mach_override.c	/^	unsigned char mask[15]; \/\/ sequence of bytes in memory order$/;"	m	struct:__anon10	file:
max	tsan/rtl/tsan_defs.h	/^T max(T a, T b) {$/;"	f	namespace:__tsan
maxExponent	fp_lib.h	93;"	d
max_alive_threads	tsan/rtl/tsan_rtl.h	/^  int max_alive_threads;$/;"	m	struct:__tsan::Context
max_malloc_fill_size	asan/asan_flags.h	/^  int  max_malloc_fill_size;$/;"	m	struct:__asan::Flags
max_malloced_memory_	asan/asan_thread_registry.h	/^  uptr max_malloced_memory_;$/;"	m	class:__asan::AsanThreadRegistry
max_n	sanitizer_common/sanitizer_symbolizer_linux.cc	/^  uptr max_n;$/;"	m	struct:__sanitizer::DlIteratePhdrData	file:
max_size	sanitizer_common/sanitizer_stacktrace.h	/^  uptr max_size;$/;"	m	struct:__sanitizer::StackTrace
max_size_in_use	asan/asan_stats.h	/^  uptr max_size_in_use;$/;"	m	struct:__asan::AsanMallocStats
md5_hash	tsan/rtl/tsan_md5.cc	/^MD5Hash md5_hash(const void *data, uptr size) {$/;"	f	namespace:__tsan
mem	tsan/lit_tests/free_race.c	/^int *mem;$/;"	v
memalign	asan/asan_malloc_linux.cc	/^  void* (*memalign)(uptr alignment, uptr bytes);$/;"	m	struct:MallocDebug	file:
memalign	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^void *memalign() { assert(0); }$/;"	f
memalign_aaa	asan/tests/asan_test.cc	/^NOINLINE void *memalign_aaa(size_t alignment, size_t size) {$/;"	f
memalign_bbb	asan/tests/asan_test.cc	/^NOINLINE void *memalign_bbb(size_t alignment, size_t size) {$/;"	f
memalign_ccc	asan/tests/asan_test.cc	/^NOINLINE void *memalign_ccc(size_t alignment, size_t size) {$/;"	f
memalign_ddd	asan/tests/asan_test.cc	/^NOINLINE void *memalign_ddd(size_t alignment, size_t size) {$/;"	f
memalign_eee	asan/tests/asan_test.cc	/^NOINLINE void *memalign_eee(size_t alignment, size_t size) {$/;"	f
memalign_fff	asan/tests/asan_test.cc	/^NOINLINE void *memalign_fff(size_t alignment, size_t size) {$/;"	f
memory_order	sanitizer_common/sanitizer_atomic.h	/^enum memory_order {$/;"	g	namespace:__sanitizer
memory_order_acq_rel	sanitizer_common/sanitizer_atomic.h	/^  memory_order_acq_rel = 1 << 4,$/;"	e	enum:__sanitizer::memory_order
memory_order_acquire	sanitizer_common/sanitizer_atomic.h	/^  memory_order_acquire = 1 << 2,$/;"	e	enum:__sanitizer::memory_order
memory_order_consume	sanitizer_common/sanitizer_atomic.h	/^  memory_order_consume = 1 << 1,$/;"	e	enum:__sanitizer::memory_order
memory_order_relaxed	sanitizer_common/sanitizer_atomic.h	/^  memory_order_relaxed = 1 << 0,$/;"	e	enum:__sanitizer::memory_order
memory_order_release	sanitizer_common/sanitizer_atomic.h	/^  memory_order_release = 1 << 3,$/;"	e	enum:__sanitizer::memory_order
memory_order_seq_cst	sanitizer_common/sanitizer_atomic.h	/^  memory_order_seq_cst = 1 << 5$/;"	e	enum:__sanitizer::memory_order
mi_check	asan/asan_malloc_mac.cc	/^boolean_t mi_check(malloc_zone_t *zone) {$/;"	f	namespace:__anon6
mi_enumerator	asan/asan_malloc_mac.cc	/^kern_return_t mi_enumerator(task_t task, void *,$/;"	f	namespace:__anon6
mi_force_lock	asan/asan_malloc_mac.cc	/^void mi_force_lock(malloc_zone_t *zone) {$/;"	f	namespace:__anon6
mi_force_unlock	asan/asan_malloc_mac.cc	/^void mi_force_unlock(malloc_zone_t *zone) {$/;"	f	namespace:__anon6
mi_good_size	asan/asan_malloc_mac.cc	/^size_t mi_good_size(malloc_zone_t *zone, size_t size) {$/;"	f	namespace:__anon6
mi_log	asan/asan_malloc_mac.cc	/^void mi_log(malloc_zone_t *zone, void *address) {$/;"	f	namespace:__anon6
mi_print	asan/asan_malloc_mac.cc	/^void mi_print(malloc_zone_t *zone, boolean_t verbose) {$/;"	f	namespace:__anon6
mi_statistics	asan/asan_malloc_mac.cc	/^void mi_statistics(malloc_zone_t *zone, malloc_statistics_t *stats) {$/;"	f	namespace:__anon6
mi_zone_locked	asan/asan_malloc_mac.cc	/^boolean_t mi_zone_locked(malloc_zone_t *zone) {$/;"	f	namespace:__anon6
min	tsan/rtl/tsan_defs.h	/^T min(T a, T b) {$/;"	f	namespace:__tsan
mmaped	asan/asan_stats.h	/^  uptr mmaped;$/;"	m	struct:__asan::AsanStats
mmaped_by_size	asan/asan_stats.h	/^  uptr mmaped_by_size[kNumberOfSizeClasses];$/;"	m	struct:__asan::AsanStats
mmaps	asan/asan_stats.h	/^  uptr mmaps;$/;"	m	struct:__asan::AsanStats
mo_acq_rel	tsan/rtl/tsan_interface_atomic.cc	/^const int mo_acq_rel = __tsan_memory_order_acq_rel;$/;"	v
mo_acquire	tsan/rtl/tsan_interface_atomic.cc	/^const int mo_acquire = __tsan_memory_order_acquire;$/;"	v
mo_consume	tsan/rtl/tsan_interface_atomic.cc	/^const int mo_consume = __tsan_memory_order_consume;$/;"	v
mo_relaxed	tsan/rtl/tsan_interface_atomic.cc	/^const int mo_relaxed = __tsan_memory_order_relaxed;$/;"	v
mo_release	tsan/rtl/tsan_interface_atomic.cc	/^const int mo_release = __tsan_memory_order_release;$/;"	v
mo_seq_cst	tsan/rtl/tsan_interface_atomic.cc	/^const int mo_seq_cst = __tsan_memory_order_seq_cst;$/;"	v
module	sanitizer_common/sanitizer_symbolizer.h	/^  char *module;$/;"	m	struct:__sanitizer::AddressInfo
module	tsan/rtl/tsan_report.h	/^  char *module;$/;"	m	struct:__tsan::ReportStack
module	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  ModuleDesc *module;$/;"	m	struct:__tsan::SectionDesc	file:
module_offset	sanitizer_common/sanitizer_symbolizer.h	/^  uptr module_offset;$/;"	m	struct:__sanitizer::AddressInfo
modules	sanitizer_common/sanitizer_symbolizer_linux.cc	/^  LoadedModule *modules;$/;"	m	struct:__sanitizer::DlIteratePhdrData	file:
modules_	sanitizer_common/sanitizer_symbolizer.cc	/^  LoadedModule *modules_;  \/\/ Array of module descriptions is leaked.$/;"	m	class:__sanitizer::Symbolizer	file:
mops	tsan/rtl/tsan_report.h	/^  Vector<ReportMop*> mops;$/;"	m	class:__tsan::ReportDesc
morder	tsan/rtl/tsan_interface_atomic.cc	/^typedef __tsan_memory_order morder;$/;"	t	file:
mtx	sanitizer_common/sanitizer_stackdepot.cc	/^  StaticSpinMutex mtx;  \/\/ Protects alloc of new blocks for region allocator.$/;"	m	struct:__sanitizer::__anon27	file:
mtx	tsan/lit_tests/free_race.c	/^pthread_mutex_t mtx;$/;"	v
mtx	tsan/rtl/tsan_interface_ann.cc	/^  Mutex mtx;$/;"	m	struct:__tsan::DynamicAnnContext	file:
mtx	tsan/rtl/tsan_rtl.h	/^  Mutex mtx;$/;"	m	struct:__tsan::MBlock
mtx	tsan/rtl/tsan_sync.h	/^    Mutex mtx;$/;"	m	struct:__tsan::SyncTab::Part
mtx	tsan/rtl/tsan_sync.h	/^  Mutex mtx;$/;"	m	struct:__tsan::SyncVar
mtx	tsan/rtl/tsan_trace.h	/^  Mutex mtx;$/;"	m	struct:__tsan::Trace
mtx	tsan/tests/rtl/tsan_posix.cc	/^  pthread_mutex_t *mtx;$/;"	m	struct:thread_key	file:
mtx_	tsan/rtl/tsan_interceptors.cc	/^  Mutex mtx_;$/;"	m	class:AtExitContext	file:
mtx_	tsan/tests/rtl/tsan_test_util.h	/^  void *mtx_[128];$/;"	m	class:Mutex
mtx_	tsan/tests/unit/tsan_mutex_test.cc	/^  MutexType *mtx_;$/;"	m	class:__tsan::TestData	file:
mu_	asan/asan_allocator.cc	/^  AsanLock mu_;$/;"	m	class:__asan::MallocInfo	file:
mu_	asan/asan_thread_registry.h	/^  AsanLock mu_;$/;"	m	class:__asan::AsanThreadRegistry
mu_	sanitizer_common/sanitizer_mutex.h	/^  MutexType *mu_;$/;"	m	class:__sanitizer::GenericScopedLock
mu_	sanitizer_common/sanitizer_mutex.h	/^  MutexType *mu_;$/;"	m	class:__sanitizer::GenericScopedReadLock
mutex	sanitizer_common/sanitizer_allocator64.h	/^    SpinMutex mutex;$/;"	m	struct:__sanitizer::SizeClassAllocator64::RegionInfo
mutex	tsan/rtl/tsan_report.h	/^  int *mutex;$/;"	m	struct:__tsan::ReportMop
mutex_	sanitizer_common/sanitizer_allocator64.h	/^  SpinMutex mutex_;$/;"	m	class:__sanitizer::LargeMmapAllocator
mutexes	tsan/benchmarks/vts_many_threads_bench.cc	/^Mutex mutexes[kNumMutexes];$/;"	v
mutexes	tsan/rtl/tsan_report.h	/^  Vector<ReportMutex*> mutexes;$/;"	m	class:__tsan::ReportDesc
my_rand	asan/tests/asan_noinst_test.cc	/^static inline u32 my_rand(u32* state) {$/;"	f	file:
my_rand	asan/tests/asan_test.cc	/^static inline uint32_t my_rand(uint32_t* state) {$/;"	f	file:
my_sigaction_sighandler	asan/tests/asan_test.cc	/^void my_sigaction_sighandler(int, siginfo_t*, void*) {$/;"	f	namespace:__anon1
my_siginfo_t	tsan/rtl/tsan_interceptors.cc	/^struct my_siginfo_t {$/;"	s	file:
my_signal_sighandler	asan/tests/asan_test.cc	/^void my_signal_sighandler(int signum) {$/;"	f	namespace:__anon1
mz_calloc	asan/asan_malloc_mac.cc	/^void *mz_calloc(malloc_zone_t *zone, size_t nmemb, size_t size) {$/;"	f	namespace:__anon6
mz_destroy	asan/asan_malloc_mac.cc	/^void mz_destroy(malloc_zone_t* zone) {$/;"	f	namespace:__anon6
mz_free	asan/asan_malloc_mac.cc	/^void mz_free(malloc_zone_t *zone, void *ptr) {$/;"	f	namespace:__anon6
mz_malloc	asan/asan_malloc_mac.cc	/^void *mz_malloc(malloc_zone_t *zone, size_t size) {$/;"	f	namespace:__anon6
mz_memalign	asan/asan_malloc_mac.cc	/^void *mz_memalign(malloc_zone_t *zone, size_t align, size_t size) {$/;"	f	namespace:__anon6
mz_realloc	asan/asan_malloc_mac.cc	/^void *mz_realloc(malloc_zone_t *zone, void *ptr, size_t size) {$/;"	f	namespace:__anon6
mz_size	asan/asan_malloc_mac.cc	/^size_t mz_size(malloc_zone_t* zone, const void* ptr) {$/;"	f	namespace:__anon6
mz_valloc	asan/asan_malloc_mac.cc	/^void *mz_valloc(malloc_zone_t *zone, size_t size) {$/;"	f	namespace:__anon6
n_	tsan/rtl/tsan_sync.h	/^  uptr n_;$/;"	m	class:__tsan::StackTrace
n_iterations	tsan/benchmarks/vts_many_threads_bench.cc	/^int n_threads, n_iterations;$/;"	v
n_modules_	sanitizer_common/sanitizer_symbolizer.cc	/^  uptr n_modules_;$/;"	m	class:__sanitizer::Symbolizer	file:
n_page_groups_	asan/asan_allocator.cc	/^  atomic_uint32_t n_page_groups_;$/;"	m	class:__asan::MallocInfo	file:
n_ranges_	sanitizer_common/sanitizer_symbolizer.h	/^  uptr n_ranges_;$/;"	m	class:__sanitizer::LoadedModule
n_sorted_page_groups_	asan/asan_allocator.cc	/^  int n_sorted_page_groups_;$/;"	m	class:__asan::MallocInfo	file:
n_threads	tsan/benchmarks/vts_many_threads_bench.cc	/^int n_threads, n_iterations;$/;"	v
n_threads_	asan/asan_thread_registry.h	/^  u32 n_threads_;$/;"	m	class:__asan::AsanThreadRegistry
name	tsan/rtl/tsan_report.h	/^  char *name;$/;"	m	struct:__tsan::ReportLocation
name	tsan/rtl/tsan_report.h	/^  char *name;$/;"	m	struct:__tsan::ReportThread
name	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  const char *name;$/;"	m	struct:__tsan::ModuleDesc	file:
nclk_	tsan/rtl/tsan_clock.h	/^  uptr nclk_;$/;"	m	struct:__tsan::ThreadClock
next	asan/asan_allocator.cc	/^  AsanChunk *next;$/;"	m	struct:__asan::ChunkBase	file:
next	asan/asan_allocator.h	/^  FakeFrame *next;$/;"	m	struct:__asan::FakeFrame
next	asan/asan_globals.cc	/^  ListOfGlobals *next;$/;"	m	struct:__asan::ListOfGlobals	file:
next	sanitizer_common/sanitizer_allocator64.h	/^    Header *next;$/;"	m	struct:__sanitizer::LargeMmapAllocator::Header
next	sanitizer_common/sanitizer_allocator64.h	/^  AllocatorListNode *next;$/;"	m	struct:__sanitizer::AllocatorListNode
next	sanitizer_common/tests/sanitizer_list_test.cc	/^  ListItem *next;$/;"	m	struct:__sanitizer::ListItem	file:
next	tsan/rtl/tsan_interface_ann.cc	/^  ExpectRace *next;$/;"	m	struct:__tsan::ExpectRace	file:
next	tsan/rtl/tsan_report.h	/^  ReportStack *next;$/;"	m	struct:__tsan::ReportStack
next	tsan/rtl/tsan_suppressions.h	/^  Suppression *next;$/;"	m	struct:__tsan::Suppression
next	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  SectionDesc *next;$/;"	m	struct:__tsan::SectionDesc	file:
next	tsan/rtl/tsan_sync.h	/^  SyncVar *next;  \/\/ In SyncTab hashtable.$/;"	m	struct:__tsan::SyncVar
nmissed_expected	tsan/rtl/tsan_rtl.h	/^  int nmissed_expected;$/;"	m	struct:__tsan::Context
nmutex	tsan/rtl/tsan_report.h	/^  int nmutex;$/;"	m	struct:__tsan::ReportMop
noinstr	tsan/tests/rtl/tsan_bench.cc	/^void noinstr(void *p) {}$/;"	f
nomalloc	tsan/rtl/tsan_rtl.h	/^  int nomalloc;$/;"	m	struct:__tsan::ThreadState
normalize	fp_lib.h	/^static inline int normalize(rep_t *significand) {$/;"	f
nothrow_t	tsan/rtl/tsan_interceptors.cc	/^struct nothrow_t {};$/;"	s	namespace:std	file:
nreported	tsan/rtl/tsan_rtl.h	/^  int nreported;$/;"	m	struct:__tsan::Context
obj	tsan/lit_tests/vptr_benign_race.cc	/^static A *obj = new B;$/;"	v	file:
obj	tsan/lit_tests/vptr_harmful_race.cc	/^static A *obj = new B;$/;"	v	file:
offset	asan/asan_poisoning.cc	/^  s8 offset;  \/\/ in [0, SHADOW_GRANULARITY)$/;"	m	struct:__asan::ShadowSegmentEndpoint	file:
offset	tsan/rtl/tsan_report.h	/^  uptr offset;$/;"	m	struct:__tsan::ReportStack
one	arm/udivmodsi4.S	/^#define one lr$/;"	d
one	arm/udivsi3.S	/^#define one lr$/;"	d
one	asan/lit_tests/Helpers/initialization-nobug-extra.cc	/^static int one = countCalls();$/;"	v	file:
oneRep	fp_lib.h	101;"	d
oob_test	asan/tests/asan_test.cc	/^NOINLINE void oob_test(int size, int off) {$/;"	f
opaque	tsan/rtl/tsan_interceptors.cc	/^  int opaque[128];$/;"	m	struct:my_siginfo_t	file:
opaque	tsan/rtl/tsan_interceptors.cc	/^  uptr opaque[117];$/;"	m	struct:ucontext_t	file:
opaque_storage_	asan/asan_lock.h	/^  uptr opaque_storage_[10];$/;"	m	class:__asan::AsanLock
open_addr2line	asan/scripts/asan_symbolize.py	/^  def open_addr2line(self):$/;"	m	class:Addr2LineSymbolizer
open_atos	asan/scripts/asan_symbolize.py	/^  def open_atos(self):$/;"	m	class:DarwinSymbolizer
open_llvm_symbolizer	asan/scripts/asan_symbolize.py	/^  def open_llvm_symbolizer(self):$/;"	m	class:LLVMSymbolizer
operator <<	ubsan/ubsan_diag.cc	/^Diag &Diag::operator<<(const TypeDescriptor &V) {$/;"	f	class:Diag
operator <<	ubsan/ubsan_diag.cc	/^Diag &Diag::operator<<(const Value &V) {$/;"	f	class:Diag
operator <<	ubsan/ubsan_diag.h	/^  Diag &operator<<(const char *Str) { return AddArg(Str); }$/;"	f	class:__ubsan::Diag
operator <<	ubsan/ubsan_diag.h	/^  Diag &operator<<(const void *V) { return AddArg(V); }$/;"	f	class:__ubsan::Diag
operator <<	ubsan/ubsan_diag.h	/^  Diag &operator<<(unsigned long long V) { return AddArg(UIntMax(V)); }$/;"	f	class:__ubsan::Diag
operator ==	tsan/rtl/tsan_rtl.cc	/^bool MD5Hash::operator==(const MD5Hash &other) const {$/;"	f	class:__tsan::MD5Hash
operator ==	tsan/rtl/tsan_rtl.h	/^  bool operator==(const RacyStacks &other) const {$/;"	f	struct:__tsan::RacyStacks
operator []	sanitizer_common/sanitizer_common.h	/^  T &operator[](uptr i) { return ptr_[i]; }$/;"	f	class:__sanitizer::InternalScopedBuffer
operator []	tsan/rtl/tsan_vector.h	/^  T &operator[](uptr i) {$/;"	f	class:__tsan::Vector
operator []	tsan/rtl/tsan_vector.h	/^  const T &operator[](uptr i) const {$/;"	f	class:__tsan::Vector
operator delete	asan/asan_new_delete.cc	/^void operator delete(void *ptr) throw() { OPERATOR_DELETE_BODY; }$/;"	f
operator delete	asan/asan_new_delete.cc	/^void operator delete(void *ptr, std::nothrow_t const&) throw()$/;"	f
operator delete	tsan/rtl/tsan_interceptors.cc	/^void operator delete(void *ptr) {$/;"	f
operator delete	tsan/rtl/tsan_interceptors.cc	/^void operator delete(void *ptr, std::nothrow_t const&) {$/;"	f
operator delete[]	asan/asan_new_delete.cc	/^void operator delete[](void *ptr) throw() { OPERATOR_DELETE_BODY; }$/;"	f
operator delete[]	asan/asan_new_delete.cc	/^void operator delete[](void *ptr, std::nothrow_t const&) throw()$/;"	f
operator delete[]	tsan/rtl/tsan_interceptors.cc	/^void operator delete[](void *ptr) {$/;"	f
operator delete[]	tsan/rtl/tsan_interceptors.cc	/^void operator delete[](void *ptr, std::nothrow_t const&) {$/;"	f
operator new	asan/asan_new_delete.cc	/^void *operator new(size_t size) throw(std::bad_alloc) { OPERATOR_NEW_BODY; }$/;"	f
operator new	asan/asan_new_delete.cc	/^void *operator new(size_t size, std::nothrow_t const&) throw()$/;"	f
operator new	sanitizer_common/sanitizer_placement_new.h	/^inline void *operator new(__sanitizer::operator_new_ptr_type sz, void *p) {$/;"	f
operator new	tsan/rtl/tsan_interceptors.cc	/^void *operator new(__sanitizer::uptr size) {$/;"	f
operator new	tsan/rtl/tsan_interceptors.cc	/^void *operator new(__sanitizer::uptr size, std::nothrow_t const&) {$/;"	f
operator new[]	asan/asan_new_delete.cc	/^void *operator new[](size_t size) throw(std::bad_alloc) { OPERATOR_NEW_BODY; }$/;"	f
operator new[]	asan/asan_new_delete.cc	/^void *operator new[](size_t size, std::nothrow_t const&) throw()$/;"	f
operator new[]	tsan/rtl/tsan_interceptors.cc	/^void *operator new[](__sanitizer::uptr size) {$/;"	f
operator new[]	tsan/rtl/tsan_interceptors.cc	/^void *operator new[](__sanitizer::uptr size, std::nothrow_t const&) {$/;"	f
operator_new_ptr_type	sanitizer_common/sanitizer_placement_new.h	/^typedef uptr operator_new_ptr_type;$/;"	t	namespace:__sanitizer
original	asan/dynamic/asan_interceptors_dynamic.cc	/^  const uptr original;$/;"	m	struct:__asan::interpose_substitution	file:
os	asan/scripts/asan_symbolize.py	/^import os$/;"	i
os_id	tsan/rtl/tsan_rtl.h	/^  uptr os_id;  \/\/ pid$/;"	m	struct:__tsan::ThreadContext
out_fd	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  int out_fd;$/;"	m	struct:__tsan::ModuleDesc	file:
output_fd_	sanitizer_common/sanitizer_symbolizer.cc	/^  int output_fd_;$/;"	m	class:__sanitizer::ExternalSymbolizer	file:
output_file	profile/GCDAProfiling.c	/^static FILE *output_file = NULL;$/;"	v	file:
owner_	asan/asan_lock.h	/^  uptr owner_;  \/\/ for debugging and for malloc_introspection_t interface$/;"	m	class:__asan::AsanLock
owner_tid	tsan/rtl/tsan_sync.h	/^  int owner_tid;  \/\/ Set only by exclusive owners.$/;"	m	struct:__tsan::SyncVar
pad	asan/lit_tests/SharedLibs/shared-lib-test-so.cc	/^int pad[10];$/;"	v
pad	tsan/rtl/tsan_sync.h	/^    char pad[kCacheLineSize - sizeof(Mutex) - sizeof(SyncVar*)];  \/\/ NOLINT$/;"	m	struct:__tsan::SyncTab::Part
pad1	asan/lit_tests/SharedLibs/dlclose-test-so.cc	/^static int pad1;$/;"	v	file:
pad2	asan/lit_tests/SharedLibs/dlclose-test-so.cc	/^static int pad2;$/;"	v	file:
pad_	tsan/tests/unit/tsan_mutex_test.cc	/^  char pad_[kCacheLineSize];$/;"	m	class:__tsan::TestData	file:
padding	sanitizer_common/sanitizer_allocator64.h	/^    char padding[kCacheLineSize - 3 * sizeof(uptr) - sizeof(AllocatorFreeList)];$/;"	m	struct:__sanitizer::SizeClassAllocator64::RegionInfo
page_groups_	asan/asan_allocator.cc	/^  PageGroup *page_groups_[kMaxAvailableRam \/ kMinMmapSize];$/;"	m	class:__asan::MallocInfo	file:
param	tsan/rtl/tsan_interceptors.cc	/^  void *param;$/;"	m	struct:ThreadParam	file:
parent_tid	asan/asan_mac.cc	/^  u32 parent_tid;$/;"	m	struct:__asan::__anon4	file:
parent_tid	asan/asan_thread.h	/^  u32 parent_tid() { return parent_tid_; }$/;"	f	class:__asan::AsanThreadSummary
parent_tid_	asan/asan_thread.h	/^  u32 parent_tid_;$/;"	m	class:__asan::AsanThreadSummary
parse_lines	asan/scripts/asan_symbolize.py	/^  def parse_lines(self, lines):$/;"	m	class:BreakpadSymbolizer
patch_pc	sanitizer_common/sanitizer_stacktrace.cc	/^static uptr patch_pc(uptr pc) {$/;"	f	namespace:__sanitizer
path_	sanitizer_common/sanitizer_symbolizer.cc	/^  const char *path_;$/;"	m	class:__sanitizer::ExternalSymbolizer	file:
pc	tsan/rtl/tsan_report.h	/^  uptr pc;$/;"	m	struct:__tsan::ReportStack
pc	tsan/rtl/tsan_rtl.h	/^  uptr pc;$/;"	m	struct:__tsan::FiredSuppression
pc_array	asan/tests/asan_noinst_test.cc	/^static uptr pc_array[] = {$/;"	v	file:
pending_signal_count	tsan/rtl/tsan_interceptors.cc	/^  int pending_signal_count;$/;"	m	struct:__tsan::SignalContext	file:
pending_signals	tsan/rtl/tsan_interceptors.cc	/^  SignalDesc pending_signals[kSigCount];$/;"	m	struct:__tsan::SignalContext	file:
pid	tsan/rtl/tsan_report.h	/^  uptr pid;$/;"	m	struct:__tsan::ReportThread
pop_front	sanitizer_common/sanitizer_list.h	/^  void pop_front() {$/;"	f	struct:__sanitizer::IntrusiveList
pos_	tsan/rtl/tsan_interceptors.cc	/^  int pos_;$/;"	m	class:AtExitContext	file:
posix_memalign	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^int posix_memalign(void **memptr, size_t alignment, size_t size) {$/;"	f
possibleInstructions	interception/mach_override/mach_override.c	/^static AsmInstructionMatch possibleInstructions[] = {$/;"	v	file:
prev	sanitizer_common/sanitizer_allocator64.h	/^    Header *prev;$/;"	m	struct:__sanitizer::LargeMmapAllocator::Header
prev	tsan/rtl/tsan_interface_ann.cc	/^  ExpectRace *prev;$/;"	m	struct:__tsan::ExpectRace	file:
primary_	sanitizer_common/sanitizer_allocator64.h	/^  PrimaryAllocator primary_;$/;"	m	class:__sanitizer::CombinedAllocator
print_full_thread_history	asan/asan_flags.h	/^  bool print_full_thread_history;$/;"	m	struct:__asan::Flags
print_symbolized_lines	asan/scripts/asan_symbolize.py	/^  def print_symbolized_lines(self, symbolized_lines):$/;"	m	class:SymbolizationLoop
private_1	gcc_personality_v0.c	/^    uintptr_t                private_1;    $/;"	m	struct:_Unwind_Exception	file:
private_2	gcc_personality_v0.c	/^    uintptr_t                private_2;    $/;"	m	struct:_Unwind_Exception	file:
proc_yield	sanitizer_common/sanitizer_atomic_clang.h	/^INLINE void proc_yield(int cnt) {$/;"	f	namespace:__sanitizer
proc_yield	sanitizer_common/sanitizer_atomic_msvc.h	/^INLINE void proc_yield(int cnt) {$/;"	f	namespace:__sanitizer
process_pending_signals	tsan/rtl/tsan_interceptors.cc	/^static void process_pending_signals(ThreadState *thr) {$/;"	f	file:
process_stdin	asan/scripts/asan_symbolize.py	/^  def process_stdin(self):$/;"	m	class:SymbolizationLoop
profile_memory	tsan/rtl/tsan_flags.h	/^  const char *profile_memory;$/;"	m	struct:__tsan::Flags
pthread_attr_t	tsan/rtl/tsan_interceptors.cc	/^union pthread_attr_t {$/;"	u	file:
pthread_workitem_handle_t	asan/asan_intercepted_functions.h	/^typedef void* pthread_workitem_handle_t;$/;"	t
pthread_workitem_handle_t	asan/asan_mac.cc	/^typedef void* pthread_workitem_handle_t;$/;"	t	namespace:__asan	file:
pthread_workqueue_t	asan/asan_intercepted_functions.h	/^typedef void* pthread_workqueue_t;$/;"	t
pthread_workqueue_t	asan/asan_mac.cc	/^typedef void* pthread_workqueue_t;$/;"	t	namespace:__asan	file:
ptr	tsan/tests/rtl/tsan_test_util_linux.cc	/^  void *ptr;$/;"	m	struct:Event	file:
ptr_	sanitizer_common/sanitizer_common.h	/^  T *ptr_;$/;"	m	class:__sanitizer::InternalScopedBuffer
push_back	sanitizer_common/sanitizer_list.h	/^  void push_back(Item *x) {$/;"	f	struct:__sanitizer::IntrusiveList
push_front	sanitizer_common/sanitizer_list.h	/^  void push_front(Item *x) {$/;"	f	struct:__sanitizer::IntrusiveList
pvalloc	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^void *pvalloc(size_t size) {$/;"	f
q	arm/udivmodsi4.S	/^#define q ip$/;"	d
q	arm/udivsi3.S	/^#define q ip$/;"	d
qnanRep	fp_lib.h	104;"	d
quarantine_	asan/asan_allocator.cc	/^  AsanChunkFifoList quarantine_;$/;"	m	class:__asan::MallocInfo	file:
quarantine_	asan/asan_allocator.h	/^  AsanChunkFifoList quarantine_;$/;"	m	struct:__asan::AsanThreadLocalMallocStorage
quarantine_size	asan/asan_flags.h	/^  int  quarantine_size;$/;"	m	struct:__asan::Flags
quietBit	fp_lib.h	103;"	d
r	arm/udivmodsi4.S	/^#define r r4$/;"	d
r	arm/udivsi3.S	/^#define r r2$/;"	d
r	arm/umodsi3.S	/^#define r r2$/;"	d
racy_addresses	tsan/rtl/tsan_rtl.h	/^  Vector<RacyAddress> racy_addresses;$/;"	m	struct:__tsan::Context
racy_shadow_addr	tsan/rtl/tsan_rtl.h	/^  u64 *racy_shadow_addr;$/;"	m	struct:__tsan::ThreadState
racy_stacks	tsan/rtl/tsan_rtl.h	/^  Vector<RacyStacks> racy_stacks;$/;"	m	struct:__tsan::Context
racy_state	tsan/rtl/tsan_rtl.h	/^  u64 racy_state[2];$/;"	m	struct:__tsan::ThreadState
ranges_	sanitizer_common/sanitizer_symbolizer.h	/^  AddressRange ranges_[kMaxNumberOfAddressRanges];$/;"	m	class:__sanitizer::LoadedModule
raw	tsan/rtl/tsan_rtl.h	/^  u64 raw() const {$/;"	f	class:__tsan::FastState
re	asan/scripts/asan_symbolize.py	/^import re$/;"	i
readBadGlobal	asan/lit_tests/blacklist.cc	/^int readBadGlobal() {$/;"	f
readEncodedPointer	gcc_personality_v0.c	/^static uintptr_t readEncodedPointer(const uint8_t** data, uint8_t encoding)$/;"	f	file:
readFromSymbolizer	sanitizer_common/sanitizer_symbolizer.cc	/^  bool readFromSymbolizer(char *buffer, uptr max_length) {$/;"	f	class:__sanitizer::ExternalSymbolizer	file:
readULEB128	gcc_personality_v0.c	/^static uintptr_t readULEB128(const uint8_t** data)$/;"	f	file:
read_clock	tsan/rtl/tsan_sync.h	/^  SyncClock read_clock;  \/\/ Used for rw mutexes only.$/;"	m	struct:__tsan::SyncVar
read_int32	profile/GCDAProfiling.c	/^static uint32_t read_int32() {$/;"	f	file:
read_int64	profile/GCDAProfiling.c	/^static uint64_t read_int64() {$/;"	f	file:
read_mutex_thread	tsan/tests/unit/tsan_mutex_test.cc	/^static void *read_mutex_thread(void *param) {$/;"	f	namespace:__tsan
real_frees	asan/asan_stats.h	/^  uptr real_frees;$/;"	m	struct:__asan::AsanStats
real_stack	asan/asan_allocator.h	/^  u64 real_stack     : 48;$/;"	m	struct:__asan::FakeFrame
realloc	asan/asan_malloc_linux.cc	/^  void* (*realloc)(void* oldMem, uptr bytes);$/;"	m	struct:MallocDebug	file:
realloc	asan/asan_malloc_win.cc	/^void *realloc(void *ptr, size_t size) {$/;"	f
realloc	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^void *realloc(void *p, size_t new_size) {$/;"	f
realloced	asan/asan_stats.h	/^  uptr realloced;$/;"	m	struct:__asan::AsanStats
reallocs	asan/asan_stats.h	/^  uptr reallocs;$/;"	m	struct:__asan::AsanStats
really_freed	asan/asan_stats.h	/^  uptr really_freed;$/;"	m	struct:__asan::AsanStats
really_freed_by_size	asan/asan_stats.h	/^  uptr really_freed_by_size[kNumberOfSizeClasses];$/;"	m	struct:__asan::AsanStats
really_freed_redzones	asan/asan_stats.h	/^  uptr really_freed_redzones;$/;"	m	struct:__asan::AsanStats
recursion	tsan/rtl/tsan_sync.h	/^  int recursion;$/;"	m	struct:__tsan::SyncVar
recursive_mkdir	profile/GCDAProfiling.c	/^static void recursive_mkdir(char *filename) {$/;"	f	file:
redzone	asan/asan_flags.h	/^  int  redzone;$/;"	m	struct:__asan::Flags
region_end	sanitizer_common/sanitizer_stackdepot.cc	/^  atomic_uintptr_t region_end;$/;"	m	struct:__sanitizer::__anon27	file:
region_pos	sanitizer_common/sanitizer_stackdepot.cc	/^  atomic_uintptr_t region_pos;  \/\/ Region allocator for StackDesc's.$/;"	m	struct:__sanitizer::__anon27	file:
release	tsan/rtl/tsan_clock.cc	/^void ThreadClock::release(SyncClock *dst) const {$/;"	f	class:__tsan::ThreadClock
rep_	tsan/rtl/tsan_rtl.h	/^  ReportDesc *rep_;$/;"	m	class:__tsan::ScopedReport
rep_clz	fp_lib.h	/^static inline int rep_clz(rep_t a) {$/;"	f
rep_t	fp_lib.h	/^typedef uint32_t rep_t;$/;"	t
rep_t	fp_lib.h	/^typedef uint64_t rep_t;$/;"	t
replace_cfallocator	asan/asan_flags.h	/^  bool replace_cfallocator;$/;"	m	struct:__asan::Flags
replace_intrin	asan/asan_flags.h	/^  bool replace_intrin;$/;"	m	struct:__asan::Flags
replace_str	asan/asan_flags.h	/^  bool replace_str;$/;"	m	struct:__asan::Flags
replacement	asan/dynamic/asan_interceptors_dynamic.cc	/^  const uptr replacement;$/;"	m	struct:__asan::interpose_substitution	file:
report_destroy_locked	tsan/rtl/tsan_flags.h	/^  bool report_destroy_locked;$/;"	m	struct:__tsan::Flags
report_fd	sanitizer_common/sanitizer_common.cc	/^static fd_t report_fd = 2;  \/\/ By default, dump to stderr.$/;"	m	namespace:__sanitizer	file:
report_globals	asan/asan_flags.h	/^  int  report_globals;$/;"	m	struct:__asan::Flags
report_mtx	tsan/rtl/tsan_rtl.h	/^  Mutex report_mtx;$/;"	m	struct:__tsan::Context
report_path	sanitizer_common/sanitizer_common.cc	/^static char report_path[4096];  \/\/ Set via __sanitizer_set_report_path.$/;"	m	namespace:__sanitizer	file:
report_signal_unsafe	tsan/rtl/tsan_flags.h	/^  bool report_signal_unsafe;$/;"	m	struct:__tsan::Flags
report_thread_leaks	tsan/rtl/tsan_flags.h	/^  bool report_thread_leaks;$/;"	m	struct:__tsan::Flags
report_type	tsan/tests/rtl/tsan_test_util_linux.cc	/^  ReportType report_type;$/;"	m	struct:Event	file:
res	tsan/tests/rtl/tsan_test_util_linux.cc	/^  bool res;$/;"	m	struct:Event	file:
reuse_count	tsan/rtl/tsan_rtl.h	/^  int reuse_count;$/;"	m	struct:__tsan::ThreadContext
rtl_generic_sighandler	tsan/rtl/tsan_interceptors.cc	/^static void ALWAYS_INLINE rtl_generic_sighandler(bool sigact, int sig,$/;"	f	file:
rtl_sigaction	tsan/rtl/tsan_interceptors.cc	/^static void rtl_sigaction(int sig, my_siginfo_t *info, void *ctx) {$/;"	f	file:
rtl_sighandler	tsan/rtl/tsan_interceptors.cc	/^static void rtl_sighandler(int sig) {$/;"	f	file:
run_tests	tsan/tests/rtl/tsan_test.cc	/^int run_tests(int argc, char **argv) {$/;"	f
running	tsan/rtl/tsan_report.h	/^  bool running;$/;"	m	struct:__tsan::ReportThread
running_on_valgrind	tsan/rtl/tsan_flags.h	/^  bool running_on_valgrind;$/;"	m	struct:__tsan::Flags
s	int_types.h	/^    }s;$/;"	m	union:__anon11	typeref:struct:__anon11::__anon12
s	int_types.h	/^    }s;$/;"	m	union:__anon13	typeref:struct:__anon13::__anon14
s	int_types.h	/^    }s;$/;"	m	union:__anon15	typeref:struct:__anon15::__anon16
s	int_types.h	/^    }s;$/;"	m	union:__anon17	typeref:struct:__anon17::__anon18
s	ppc/DD.h	/^	}s;$/;"	m	union:__anon23	typeref:struct:__anon23::__anon24
s0	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr s0 = 1 << 4;$/;"	m	class:__sanitizer::DefaultSizeClassMap
s1	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr s1 = 1 << 6;$/;"	m	class:__sanitizer::DefaultSizeClassMap
s128	ubsan/ubsan_value.h	/^typedef __int128 s128;$/;"	t
s2	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr s2 = 1 << 9;$/;"	m	class:__sanitizer::DefaultSizeClassMap
s3	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr s3 = 1 << 12;$/;"	m	class:__sanitizer::DefaultSizeClassMap
s4	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr s4 = 1 << 15;$/;"	m	class:__sanitizer::DefaultSizeClassMap
s_	tsan/rtl/tsan_sync.h	/^  uptr *s_;$/;"	m	class:__tsan::StackTrace
sa_flags	tsan/rtl/tsan_interceptors.cc	/^  int sa_flags;$/;"	m	struct:sigaction_t	file:
sa_handler	tsan/rtl/tsan_interceptors.cc	/^    sighandler_t sa_handler;$/;"	m	union:sigaction_t::__anon28	file:
sa_mask	tsan/rtl/tsan_interceptors.cc	/^  sigset_t sa_mask;$/;"	m	struct:sigaction_t	file:
sa_restorer	tsan/rtl/tsan_interceptors.cc	/^  void (*sa_restorer)();$/;"	m	struct:sigaction_t	file:
sa_sigaction	tsan/rtl/tsan_interceptors.cc	/^    void (*sa_sigaction)(int sig, my_siginfo_t *siginfo, void *uctx);$/;"	m	union:sigaction_t::__anon28	file:
sameTU	asan/lit_tests/initialization-nobug.cc	/^int sameTU = initializeSameTU();$/;"	v
secondary_	sanitizer_common/sanitizer_allocator64.h	/^  SecondaryAllocator secondary_;$/;"	m	class:__sanitizer::CombinedAllocator
sections	tsan/rtl/tsan_symbolize_addr2line_linux.cc	/^  SectionDesc *sections;$/;"	m	struct:__tsan::DlIteratePhdrCtx	file:
sem_	tsan/lit_tests/vptr_benign_race.cc	/^  sem_t sem_;$/;"	m	struct:A	file:
sem_	tsan/lit_tests/vptr_harmful_race.cc	/^  sem_t sem_;$/;"	m	struct:A	file:
send	tsan/tests/rtl/tsan_test_util_linux.cc	/^void ScopedThread::Impl::send(Event *e) {$/;"	f	class:ScopedThread::Impl
seq	sanitizer_common/sanitizer_stackdepot.cc	/^  atomic_uint32_t seq[kPartCount];  \/\/ Unique id generators.$/;"	m	struct:__sanitizer::__anon27	file:
seq_	tsan/rtl/tsan_mutex.h	/^  u64 seq_;$/;"	m	class:__tsan::DeadlockDetector
set	tsan/rtl/tsan_clock.h	/^  void set(unsigned tid, u64 v) {$/;"	f	struct:__tsan::ThreadClock
setBranchIslandTarget	interception/mach_override/mach_override.c	/^setBranchIslandTarget($/;"	f	file:
setBranchIslandTarget_i386	interception/mach_override/mach_override.c	/^setBranchIslandTarget_i386($/;"	f	file:
set_announced	asan/asan_thread.h	/^  void set_announced(bool announced) { announced_ = announced; }$/;"	f	class:__asan::AsanThreadSummary
set_summary	asan/asan_thread.h	/^  void set_summary(AsanThreadSummary *summary) { summary_ = summary; }$/;"	f	class:__asan::AsanThread
set_thread	asan/asan_thread.h	/^  void set_thread(AsanThread *thread) { thread_ = thread; }$/;"	f	class:__asan::AsanThreadSummary
set_tid	asan/asan_thread.h	/^  void set_tid(u32 tid) { tid_ = tid; }$/;"	f	class:__asan::AsanThreadSummary
shadow_stack	tsan/rtl/tsan_rtl.h	/^  uptr *shadow_stack;$/;"	m	struct:__tsan::ThreadState
shadow_stack	tsan/rtl/tsan_rtl.h	/^  uptr shadow_stack[kShadowStackSize];$/;"	m	struct:__tsan::ThreadState
shadow_stack_end	tsan/rtl/tsan_rtl.h	/^  uptr *shadow_stack_end;$/;"	m	struct:__tsan::ThreadState
shadow_stack_pos	tsan/rtl/tsan_rtl.h	/^  uptr *shadow_stack_pos;$/;"	m	struct:__tsan::ThreadState
si_int	int_types.h	/^typedef      int si_int;$/;"	t
sigaction	tsan/rtl/tsan_interceptors.cc	/^  bool sigaction;$/;"	m	struct:__tsan::SignalDesc	file:
sigaction_t	tsan/rtl/tsan_interceptors.cc	/^struct sigaction_t {$/;"	s	file:
sigactions	tsan/rtl/tsan_interceptors.cc	/^static sigaction_t sigactions[kSigCount];$/;"	v	file:
sighandler_t	tsan/rtl/tsan_interceptors.cc	/^typedef void (*sighandler_t)(int sig);$/;"	t	file:
siginfo	tsan/rtl/tsan_interceptors.cc	/^  my_siginfo_t siginfo;$/;"	m	struct:__tsan::SignalDesc	file:
signBit	fp_lib.h	98;"	d
signal_ctx	tsan/rtl/tsan_rtl.h	/^  SignalContext *signal_ctx;$/;"	m	struct:__tsan::ThreadState
significandBits	fp_lib.h	35;"	d
significandBits	fp_lib.h	54;"	d
significandMask	fp_lib.h	97;"	d
sigset_t	tsan/rtl/tsan_interceptors.cc	/^struct sigset_t {$/;"	s	file:
singleton_thread	tsan/tests/rtl/tsan_mutex.cc	/^static void *singleton_thread(void *param) {$/;"	f	namespace:__tsan
size	asan/asan_allocator.h	/^  uptr size() { return size_; }$/;"	f	class:__asan::AsanChunkFifoList
size	sanitizer_common/sanitizer_allocator64.h	/^    uptr size;$/;"	m	struct:__sanitizer::LargeMmapAllocator::Header
size	sanitizer_common/sanitizer_common.h	/^  uptr size() { return cnt_ * sizeof(T); }$/;"	f	class:__sanitizer::InternalScopedBuffer
size	sanitizer_common/sanitizer_list.h	/^  uptr size() const { return size_; }$/;"	f	struct:__sanitizer::IntrusiveList
size	sanitizer_common/sanitizer_stackdepot.cc	/^  uptr size;$/;"	m	struct:__sanitizer::StackDesc	file:
size	sanitizer_common/sanitizer_stacktrace.h	/^  uptr size;$/;"	m	struct:__sanitizer::StackTrace
size	tsan/rtl/tsan_clock.h	/^  uptr size() const {$/;"	f	class:__tsan::SyncClock
size	tsan/rtl/tsan_clock.h	/^  uptr size() const {$/;"	f	struct:__tsan::ThreadClock
size	tsan/rtl/tsan_interceptors.cc	/^  char size[kPthreadAttrSize];$/;"	m	union:pthread_attr_t	file:
size	tsan/rtl/tsan_interface_ann.cc	/^  uptr size;$/;"	m	struct:__tsan::ExpectRace	file:
size	tsan/rtl/tsan_report.h	/^  int size;$/;"	m	struct:__tsan::ReportMop
size	tsan/rtl/tsan_report.h	/^  uptr size;$/;"	m	struct:__tsan::ReportLocation
size	tsan/rtl/tsan_rtl.h	/^  u64 size() const { return 1ull << size_log(); }$/;"	f	class:__tsan::Shadow
size	tsan/rtl/tsan_rtl.h	/^  uptr size;$/;"	m	struct:__tsan::MBlock
size_	asan/asan_allocator.h	/^  uptr size_;$/;"	m	class:__asan::AsanChunkFifoList
size_	sanitizer_common/sanitizer_list.h	/^  uptr size_;$/;"	m	struct:__sanitizer::IntrusiveList
size_allocated	asan/asan_stats.h	/^  uptr size_allocated;$/;"	m	struct:__asan::AsanMallocStats
size_class	asan/asan_allocator.cc	/^  uptr  size_class  : 8;$/;"	m	struct:__asan::ChunkBase	file:
size_classes_	asan/asan_allocator.h	/^  FakeFrameFifo size_classes_[kNumberOfSizeClasses];$/;"	m	class:__asan::FakeStack
size_in_use	asan/asan_stats.h	/^  uptr size_in_use;$/;"	m	struct:__asan::AsanMallocStats
size_log	tsan/rtl/tsan_rtl.h	/^  u64 size_log() const { return (x_ >> 3) & 3; }$/;"	f	class:__tsan::Shadow
size_minus_one	asan/asan_allocator.h	/^  u64 size_minus_one : 16;$/;"	m	struct:__asan::FakeFrame
size_of_chunk	asan/asan_allocator.cc	/^  uptr size_of_chunk;$/;"	m	struct:__asan::PageGroup	file:
sleep	tsan/rtl/tsan_report.h	/^  ReportStack *sleep;$/;"	m	class:__tsan::ReportDesc
sleep_before_dying	asan/asan_flags.h	/^  int  sleep_before_dying;$/;"	m	struct:__asan::Flags
srcSigBits	extendsfdf2.c	/^static const int srcSigBits = 23;$/;"	v	file:
srcSigBits	truncdfsf2.c	/^static const int srcSigBits = 52;$/;"	v	file:
srcToRep	extendsfdf2.c	/^static inline src_rep_t srcToRep(src_t x) {$/;"	f	file:
srcToRep	truncdfsf2.c	/^static inline src_rep_t srcToRep(src_t x) {$/;"	f	file:
src_rep_t	extendsfdf2.c	/^typedef uint32_t src_rep_t;$/;"	t	file:
src_rep_t	truncdfsf2.c	/^typedef uint64_t src_rep_t;$/;"	t	file:
src_rep_t_clz	extendsfdf2.c	47;"	d	file:
src_t	extendsfdf2.c	/^typedef float src_t;$/;"	t	file:
src_t	truncdfsf2.c	/^typedef double src_t;$/;"	t	file:
srep_t	fp_lib.h	/^typedef int32_t srep_t;$/;"	t
srep_t	fp_lib.h	/^typedef int64_t srep_t;$/;"	t
stack	asan/asan_thread.h	/^  StackTrace *stack() { return &stack_; }$/;"	f	class:__asan::AsanThreadSummary
stack	sanitizer_common/sanitizer_stackdepot.cc	/^  uptr stack[1];  \/\/ [size]$/;"	m	struct:__sanitizer::StackDesc	file:
stack	tsan/rtl/tsan_report.h	/^  ReportStack *stack;$/;"	m	struct:__tsan::ReportLocation
stack	tsan/rtl/tsan_report.h	/^  ReportStack *stack;$/;"	m	struct:__tsan::ReportMop
stack	tsan/rtl/tsan_report.h	/^  ReportStack *stack;$/;"	m	struct:__tsan::ReportMutex
stack	tsan/rtl/tsan_report.h	/^  ReportStack *stack;$/;"	m	struct:__tsan::ReportThread
stack0	tsan/rtl/tsan_trace.h	/^  StackTrace stack0;  \/\/ Start stack for the trace.$/;"	m	struct:__tsan::TraceHeader
stack0buf	tsan/rtl/tsan_trace.h	/^  uptr       stack0buf[kTraceStackSize];$/;"	m	struct:__tsan::TraceHeader
stack_	asan/asan_thread.h	/^  StackTrace stack_;$/;"	m	class:__asan::AsanThreadSummary
stack_	tsan/rtl/tsan_interceptors.cc	/^  atexit_t stack_[kMaxAtExit];$/;"	m	class:AtExitContext	file:
stack_bottom	asan/asan_thread.h	/^  uptr stack_bottom() { return stack_bottom_; }$/;"	f	class:__asan::AsanThread
stack_bottom_	asan/asan_thread.h	/^  uptr  stack_bottom_;$/;"	m	class:__asan::AsanThread
stack_size	asan/asan_thread.h	/^  uptr stack_size() { return stack_top_ - stack_bottom_; }$/;"	f	class:__asan::AsanThread
stack_size_	asan/asan_allocator.h	/^  uptr stack_size_;$/;"	m	class:__asan::FakeStack
stack_top	asan/asan_thread.h	/^  uptr stack_top() { return stack_top_; }$/;"	f	class:__asan::AsanThread
stack_top_	asan/asan_thread.h	/^  uptr  stack_top_;$/;"	m	class:__asan::AsanThread
stacks	tsan/rtl/tsan_report.h	/^  Vector<ReportStack*> stacks;$/;"	m	class:__tsan::ReportDesc
start_routine_	asan/asan_thread.h	/^  thread_callback_t start_routine_;$/;"	m	class:__asan::AsanThread
stat	tsan/rtl/tsan_rtl.h	/^  u64 stat[StatCnt];$/;"	m	struct:__tsan::Context
stat	tsan/rtl/tsan_rtl.h	/^  u64 stat[StatCnt];$/;"	m	struct:__tsan::ThreadState
stat_type_	tsan/rtl/tsan_mutex.h	/^  StatType stat_type_;$/;"	m	class:__tsan::Mutex
state_	sanitizer_common/sanitizer_mutex.h	/^  atomic_uint8_t state_;$/;"	m	class:__sanitizer::StaticSpinMutex
state_	tsan/rtl/tsan_mutex.h	/^  atomic_uintptr_t state_;$/;"	m	class:__tsan::Mutex
static10	asan/tests/asan_globals_test.cc	/^static char static10[10];$/;"	v	file:
static110	asan/tests/asan_test.cc	/^static char static110[110];$/;"	v	file:
static_allocator_cache	sanitizer_common/tests/sanitizer_allocator64_test.cc	/^static THREADLOCAL AllocatorCache static_allocator_cache;$/;"	v	file:
static_list	sanitizer_common/tests/sanitizer_list_test.cc	/^static THREADLOCAL List static_list;$/;"	m	namespace:__sanitizer	file:
static_var	asan/lit_tests/SharedLibs/dlclose-test-so.cc	/^static int static_var;$/;"	v	file:
stats	asan/asan_thread.h	/^  AsanStats &stats() { return stats_; }$/;"	f	class:__asan::AsanThread
stats_	asan/asan_thread.h	/^  AsanStats stats_;$/;"	m	class:__asan::AsanThread
status	tsan/rtl/tsan_rtl.h	/^  ThreadStatus status;$/;"	m	struct:__tsan::ThreadContext
std	tsan/rtl/tsan_interceptors.cc	/^namespace std {$/;"	n	file:
sticky	i386/floatundisf.S	/^sticky: .quad 0x0000000000000000$/;"	l
stk_addr	tsan/rtl/tsan_rtl.h	/^  const uptr stk_addr;$/;"	m	struct:__tsan::ThreadState
stk_size	tsan/rtl/tsan_rtl.h	/^  const uptr stk_size;$/;"	m	struct:__tsan::ThreadState
stop_on_start	tsan/rtl/tsan_flags.h	/^  bool stop_on_start;$/;"	m	struct:__tsan::Flags
strip_path_prefix	asan/asan_flags.h	/^  const char *strip_path_prefix;$/;"	m	struct:__asan::Flags
strip_path_prefix	tsan/rtl/tsan_flags.h	/^  const char *strip_path_prefix;$/;"	m	struct:__tsan::Flags
strtol	asan/lit_tests/Linux/interception_failure_test.cc	/^extern "C" long strtol(const char *nptr, char **endptr, int base) {$/;"	f
strtol	asan/lit_tests/Linux/interception_test.cc	/^extern "C" long strtol(const char *nptr, char **endptr, int base) {$/;"	f
su_int	int_types.h	/^typedef unsigned su_int;$/;"	t
subprocess	asan/scripts/asan_symbolize.py	/^import subprocess$/;"	i
substitutions	asan/dynamic/asan_interceptors_dynamic.cc	/^const interpose_substitution substitutions[]$/;"	m	namespace:__asan	file:
summary	asan/asan_thread.h	/^  AsanThreadSummary *summary() { return summary_; }$/;"	f	class:__asan::AsanThread
summary_	asan/asan_thread.h	/^  AsanThreadSummary *summary_;$/;"	m	class:__asan::AsanThread
suppress_equal_addresses	tsan/rtl/tsan_flags.h	/^  bool suppress_equal_addresses;$/;"	m	struct:__tsan::Flags
suppress_equal_stacks	tsan/rtl/tsan_flags.h	/^  bool suppress_equal_stacks;$/;"	m	struct:__tsan::Flags
suppressions	tsan/rtl/tsan_flags.h	/^  const char *suppressions;$/;"	m	struct:__tsan::Flags
symbolize	asan/asan_flags.h	/^  bool symbolize;$/;"	m	struct:__asan::Flags
symbolize	asan/scripts/asan_symbolize.py	/^  def symbolize(self, addr, binary, offset):$/;"	m	class:Addr2LineSymbolizer
symbolize	asan/scripts/asan_symbolize.py	/^  def symbolize(self, addr, binary, offset):$/;"	m	class:BreakpadSymbolizer
symbolize	asan/scripts/asan_symbolize.py	/^  def symbolize(self, addr, binary, offset):$/;"	m	class:ChainSymbolizer
symbolize	asan/scripts/asan_symbolize.py	/^  def symbolize(self, addr, binary, offset):$/;"	m	class:DarwinSymbolizer
symbolize	asan/scripts/asan_symbolize.py	/^  def symbolize(self, addr, binary, offset):$/;"	m	class:LLVMSymbolizer
symbolize	asan/scripts/asan_symbolize.py	/^  def symbolize(self, addr, binary, offset):$/;"	m	class:Symbolizer
symbolize_address	asan/scripts/asan_symbolize.py	/^  def symbolize_address(self, addr, binary, offset):$/;"	m	class:SymbolizationLoop
symbolizer	sanitizer_common/sanitizer_symbolizer.cc	/^static Symbolizer symbolizer;  \/\/ Linker initialized.$/;"	m	namespace:__sanitizer	file:
symbolizer_allocator	sanitizer_common/sanitizer_symbolizer.cc	/^static LowLevelAllocator symbolizer_allocator;  \/\/ Linker initialized.$/;"	m	namespace:__sanitizer	file:
symbolizers	asan/scripts/asan_symbolize.py	/^symbolizers = {}$/;"	v
sync	tsan/rtl/tsan_rtl.h	/^  SyncClock sync;$/;"	m	struct:__tsan::ThreadContext
synctab	tsan/rtl/tsan_rtl.h	/^  SyncTab synctab;$/;"	m	struct:__tsan::Context
sys	asan/scripts/asan_symbolize.py	/^import sys$/;"	i
system_malloc_zone	asan/asan_malloc_mac.cc	/^static malloc_zone_t *system_malloc_zone = 0;$/;"	v	file:
system_purgeable_zone	asan/asan_malloc_mac.cc	/^static malloc_zone_t *system_purgeable_zone = 0;$/;"	v	file:
tab	sanitizer_common/sanitizer_stackdepot.cc	/^  atomic_uintptr_t tab[kTabSize];  \/\/ Hash table of StackDesc's.$/;"	m	struct:__sanitizer::__anon27	file:
tab_	tsan/rtl/tsan_sync.h	/^  Part tab_[kPartCount];$/;"	m	class:__tsan::SyncTab
templ	tsan/rtl/tsan_suppressions.h	/^  char *templ;$/;"	m	struct:__tsan::Suppression
test_file	tsan/lit_tests/test_output.sh	/^test_file() {$/;"	f
thr	tsan/rtl/tsan_rtl.h	/^  ThreadState *thr;$/;"	m	struct:__tsan::ThreadContext
thr_	tsan/rtl/tsan_interceptors.h	/^  ThreadState *const thr_;$/;"	m	class:__tsan::ScopedInterceptor
thr_	tsan/rtl/tsan_interface_ann.cc	/^  ThreadState *const thr_;$/;"	m	class:__tsan::ScopedAnnotation	file:
thr_	tsan/rtl/tsan_interface_atomic.cc	/^  ThreadState *thr_;$/;"	m	class:ScopedAtomic	file:
thr_	tsan/rtl/tsan_rtl.h	/^  ThreadState*thr_;$/;"	m	class:__tsan::ScopedInRtl
thread	asan/asan_thread.h	/^  AsanThread *thread() { return thread_; }$/;"	f	class:__asan::AsanThreadSummary
thread	tsan/tests/rtl/tsan_test_util_linux.cc	/^  pthread_t thread;$/;"	m	struct:ScopedThread::Impl	file:
thread_	asan/asan_thread.h	/^  AsanThread *thread_;$/;"	m	class:__asan::AsanThreadSummary
thread_alot_func	tsan/tests/rtl/tsan_thread.cc	/^static void *thread_alot_func(void *arg) {$/;"	f	file:
thread_callback_t	sanitizer_common/sanitizer_internal_defs.h	/^typedef thread_return_t (THREAD_CALLING_CONV *thread_callback_t)(void* arg);$/;"	t
thread_finalize	tsan/rtl/tsan_interceptors.cc	/^static void thread_finalize(void *v) {$/;"	f	file:
thread_key	tsan/tests/rtl/tsan_posix.cc	/^  thread_key(pthread_key_t key, pthread_mutex_t *mtx, int val, int *cnt)$/;"	f	struct:thread_key
thread_key	tsan/tests/rtl/tsan_posix.cc	/^struct thread_key {$/;"	s	file:
thread_mtx	tsan/rtl/tsan_rtl.h	/^  Mutex thread_mtx;$/;"	m	struct:__tsan::Context
thread_return_t	sanitizer_common/sanitizer_internal_defs.h	/^typedef DWORD thread_return_t;$/;"	t
thread_return_t	sanitizer_common/sanitizer_internal_defs.h	/^typedef void* thread_return_t;$/;"	t
thread_secific_dtor	tsan/tests/rtl/tsan_posix.cc	/^static void thread_secific_dtor(void *v) {$/;"	f	file:
thread_seq	tsan/rtl/tsan_rtl.h	/^  unsigned thread_seq;$/;"	m	struct:__tsan::Context
thread_summaries_	asan/asan_thread_registry.h	/^  AsanThreadSummary *thread_summaries_[kMaxNumberOfThreads];$/;"	m	class:__asan::AsanThreadRegistry
threads	tsan/rtl/tsan_report.h	/^  Vector<ReportThread*> threads;$/;"	m	class:__tsan::ReportDesc
threads	tsan/rtl/tsan_rtl.h	/^  ThreadContext *threads[kMaxTid];$/;"	m	struct:__tsan::Context
ti_int	int_types.h	/^typedef int      ti_int __attribute__ ((mode (TI)));$/;"	t
tick	tsan/rtl/tsan_clock.h	/^  void tick(unsigned tid) {$/;"	f	struct:__tsan::ThreadClock
tid	asan/asan_thread.h	/^  u32 tid() { return summary_->tid(); }$/;"	f	class:__asan::AsanThread
tid	asan/asan_thread.h	/^  u32 tid() { return tid_; }$/;"	f	class:__asan::AsanThreadSummary
tid	tsan/rtl/tsan_interceptors.cc	/^  atomic_uintptr_t tid;$/;"	m	struct:ThreadParam	file:
tid	tsan/rtl/tsan_report.h	/^  int tid;$/;"	m	struct:__tsan::ReportLocation
tid	tsan/rtl/tsan_report.h	/^  int tid;$/;"	m	struct:__tsan::ReportMop
tid	tsan/rtl/tsan_rtl.h	/^  const int tid;$/;"	m	struct:__tsan::ThreadContext
tid	tsan/rtl/tsan_rtl.h	/^  const int tid;$/;"	m	struct:__tsan::ThreadState
tid	tsan/rtl/tsan_rtl.h	/^  u64 tid() const {$/;"	f	class:__tsan::FastState
tid_	asan/asan_thread.h	/^  u32 tid_;$/;"	m	class:__asan::AsanThreadSummary
times_restarted_	sanitizer_common/sanitizer_symbolizer.cc	/^  uptr times_restarted_;$/;"	m	class:__sanitizer::ExternalSymbolizer	file:
tls_addr	tsan/rtl/tsan_rtl.h	/^  const uptr tls_addr;$/;"	m	struct:__tsan::ThreadState
tls_size	tsan/rtl/tsan_rtl.h	/^  const uptr tls_size;$/;"	m	struct:__tsan::ThreadState
toRep	fp_lib.h	/^static inline rep_t toRep(fp_t x) {$/;"	f
top	asan/asan_allocator.h	/^  FakeFrame *top() { return top_; }$/;"	f	class:__asan::FakeFrameLifo
top_	asan/asan_allocator.h	/^  FakeFrame *top_;$/;"	m	class:__asan::FakeFrameLifo
trace	sanitizer_common/sanitizer_stacktrace.h	/^  uptr trace[kStackTraceMax];$/;"	m	struct:__sanitizer::StackTrace
trace	tsan/rtl/tsan_rtl.h	/^  Trace trace;$/;"	m	struct:__tsan::ThreadDeadInfo
trace	tsan/rtl/tsan_rtl.h	/^  Trace trace;$/;"	m	struct:__tsan::ThreadState
transfer	asan/tests/asan_test.cc	/^  static void* transfer(void *to, const void *from, size_t size) {$/;"	f	class:MemCpyWrapper
transfer	asan/tests/asan_test.cc	/^  static void* transfer(void *to, const void *from, size_t size) {$/;"	f	class:MemMoveWrapper
tryallocDesc	sanitizer_common/sanitizer_stackdepot.cc	/^static StackDesc *tryallocDesc(uptr memsz) {$/;"	f	namespace:__sanitizer
tsd_key	asan/asan_posix.cc	/^static pthread_key_t tsd_key;$/;"	m	namespace:__asan	file:
tsd_key_inited	asan/asan_posix.cc	/^static bool tsd_key_inited = false;$/;"	m	namespace:__asan	file:
tsd_key_inited	asan/asan_win.cc	/^static bool tsd_key_inited = false;$/;"	m	namespace:__asan	file:
tu_int	int_types.h	/^typedef unsigned tu_int __attribute__ ((mode (TI)));$/;"	t
twelve	i386/floatundisf.S	/^twelve:	.long 0x00000000$/;"	l
two	x86_64/floatundisf.S	/^two: .single 2.0$/;"	l
twop32	i386/floatdidf.S	/^twop32: .quad 0x41f0000000000000$/;"	l
twop52	i386/floatdidf.S	/^twop52: .quad 0x4330000000000000$/;"	l
twop52	i386/floatundidf.S	/^twop52: .quad 0x4330000000000000$/;"	l
twop52	i386/floatundisf.S	/^twop52: .quad 0x4330000000000000$/;"	l
twop52	i386/floatundixf.S	/^twop52: .quad 0x4330000000000000$/;"	l
twop52	x86_64/floatundidf.S	/^twop52: .quad 0x4330000000000000$/;"	l
twop64	x86_64/floatundixf.S	/^twop64: .quad 0x43f0000000000000$/;"	l
twop84	i386/floatundidf.S	/^twop84: .quad 0x4530000000000000$/;"	l
twop84	i386/floatundixf.S	/^twop84: .quad 0x4530000000000000$/;"	l
twop84	x86_64/floatundidf.S	/^twop84: .quad 0x4530000000000000$/;"	l
twop84_plus_twop52	i386/floatundidf.S	/^twop84_plus_twop52:$/;"	l
twop84_plus_twop52	x86_64/floatundidf.S	/^twop84_plus_twop52:$/;"	l
twop84_plus_twop52_neg	i386/floatundixf.S	/^twop84_plus_twop52_neg:$/;"	l
twords	int_types.h	/^} twords;$/;"	t	typeref:union:__anon15
typ	tsan/rtl/tsan_report.h	/^  ReportType typ;$/;"	m	class:__tsan::ReportDesc
typ_	tsan/rtl/tsan_vector.h	/^  const MBlockType typ_;$/;"	m	class:__tsan::Vector
type	tsan/rtl/tsan_report.h	/^  ReportLocationType type;$/;"	m	struct:__tsan::ReportLocation
type	tsan/rtl/tsan_rtl.h	/^  ReportType type;$/;"	m	struct:__tsan::FiredSuppression
type	tsan/rtl/tsan_suppressions.h	/^  SuppressionType type;$/;"	m	struct:__tsan::Suppression
type	tsan/tests/rtl/tsan_test_util_linux.cc	/^  Type type;$/;"	m	struct:Event	file:
typeWidth	fp_lib.h	91;"	d
type_	tsan/rtl/tsan_mutex.h	/^  MutexType type_;$/;"	m	class:__tsan::Mutex
type_	tsan/tests/rtl/tsan_test_util.h	/^  const Type type_;$/;"	m	class:Mutex
u	int_types.h	/^    su_int u;$/;"	m	union:__anon19
u	int_types.h	/^    udwords u;$/;"	m	union:__anon20
u	int_types.h	/^    uqwords     u;$/;"	m	union:__anon22
u0	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr u0 = 0  + (l1 - l0) \/ s0;$/;"	m	class:__sanitizer::DefaultSizeClassMap
u1	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr u1 = u0 + (l2 - l1) \/ s1;$/;"	m	class:__sanitizer::DefaultSizeClassMap
u128	ubsan/ubsan_value.h	/^typedef unsigned __int128 u128;$/;"	t
u2	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr u2 = u1 + (l3 - l2) \/ s2;$/;"	m	class:__sanitizer::DefaultSizeClassMap
u3	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr u3 = u2 + (l4 - l3) \/ s3;$/;"	m	class:__sanitizer::DefaultSizeClassMap
u4	sanitizer_common/sanitizer_allocator64.h	/^  static const uptr u4 = u3 + (l5 - l4) \/ s4;$/;"	m	class:__sanitizer::DefaultSizeClassMap
uaf_test	asan/tests/asan_test.cc	/^NOINLINE void uaf_test(int size, int off) {$/;"	f
ucontext_t	tsan/rtl/tsan_interceptors.cc	/^struct ucontext_t {$/;"	s	file:
udwords	int_types.h	/^} udwords;$/;"	t	typeref:union:__anon13
uint16_t	asan/tests/asan_test_utils.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_t	asan/tests/asan_test_utils.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	profile/GCDAProfiling.c	/^typedef unsigned int uint32_t;$/;"	t	file:
uint64_t	asan/tests/asan_test_utils.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	profile/GCDAProfiling.c	/^typedef unsigned int uint64_t;$/;"	t	file:
uint8_t	asan/tests/asan_test_utils.h	/^typedef unsigned __int8  uint8_t;$/;"	t
ulong_t	tsan/rtl/tsan_md5.cc	/^typedef unsigned long ulong_t;  \/\/ NOLINT$/;"	t	namespace:__tsan	file:
unique_id	tsan/rtl/tsan_rtl.h	/^  const int unique_id;$/;"	m	struct:__tsan::ThreadState
unique_id	tsan/rtl/tsan_rtl.h	/^  int unique_id;  \/\/ Non-rolling thread id.$/;"	m	struct:__tsan::ThreadContext
unique_thread_seq	tsan/rtl/tsan_rtl.h	/^  unsigned unique_thread_seq;$/;"	m	struct:__tsan::Context
unlock	atomic.c	/^inline static void unlock(Lock *l) {$/;"	f	file:
unlock	sanitizer_common/sanitizer_stackdepot.cc	/^static void unlock(atomic_uintptr_t *p, StackDesc *s) {$/;"	f	namespace:__sanitizer
unmap_shadow_on_exit	asan/asan_flags.h	/^  bool unmap_shadow_on_exit;$/;"	m	struct:__asan::Flags
uptr	interception/interception.h	/^typedef unsigned long long uptr;  \/\/ NOLINT$/;"	t	namespace:__interception
uqwords	int_types.h	/^} uqwords;$/;"	t	typeref:struct:__anon21
use_fake_stack	asan/asan_flags.h	/^  bool use_fake_stack;$/;"	m	struct:__asan::Flags
use_sigaltstack	asan/asan_flags.h	/^  bool use_sigaltstack;$/;"	m	struct:__asan::Flags
used_size	asan/asan_allocator.cc	/^  uptr used_size : FIRST_32_SECOND_64(32, 56);  \/\/ Size requested by the user.$/;"	m	struct:__asan::ChunkBase	file:
user_alloc	tsan/rtl/tsan_mman.cc	/^void *user_alloc(ThreadState *thr, uptr pc, uptr sz, uptr align) {$/;"	f	namespace:__tsan
user_free	tsan/rtl/tsan_mman.cc	/^void user_free(ThreadState *thr, uptr pc, void *p) {$/;"	f	namespace:__tsan
user_id	tsan/rtl/tsan_rtl.h	/^  uptr user_id;  \/\/ Some opaque user thread id (e.g. pthread_t).$/;"	m	struct:__tsan::ThreadContext
user_mblock	tsan/rtl/tsan_mman.cc	/^MBlock *user_mblock(ThreadState *thr, void *p) {$/;"	f	namespace:__tsan
user_realloc	tsan/rtl/tsan_mman.cc	/^void *user_realloc(ThreadState *thr, uptr pc, void *p, uptr sz) {$/;"	f	namespace:__tsan
utwords	int_types.h	/^} utwords;$/;"	t	typeref:union:__anon17
val	tsan/rtl/tsan_interceptors.cc	/^  u64 val[1024 \/ 8 \/ sizeof(u64)];$/;"	m	struct:sigset_t	file:
val	tsan/rtl/tsan_sync.h	/^    SyncVar *val;$/;"	m	struct:__tsan::SyncTab::Part
val	tsan/tests/rtl/tsan_posix.cc	/^  int val;$/;"	m	struct:thread_key	file:
val_dont_use	sanitizer_common/sanitizer_atomic.h	/^  volatile Type val_dont_use;$/;"	m	struct:__sanitizer::atomic_uint16_t
val_dont_use	sanitizer_common/sanitizer_atomic.h	/^  volatile Type val_dont_use;$/;"	m	struct:__sanitizer::atomic_uint32_t
val_dont_use	sanitizer_common/sanitizer_atomic.h	/^  volatile Type val_dont_use;$/;"	m	struct:__sanitizer::atomic_uint64_t
val_dont_use	sanitizer_common/sanitizer_atomic.h	/^  volatile Type val_dont_use;$/;"	m	struct:__sanitizer::atomic_uint8_t
val_dont_use	sanitizer_common/sanitizer_atomic.h	/^  volatile Type val_dont_use;$/;"	m	struct:__sanitizer::atomic_uintptr_t
valloc	sanitizer_common/tests/sanitizer_allocator64_testlib.cc	/^void *valloc(size_t size) {$/;"	f
value	asan/asan_poisoning.cc	/^  s8 value;  \/\/ = *chunk;$/;"	m	struct:__asan::ShadowSegmentEndpoint	file:
value	asan/lit_tests/initialization-nobug.cc	/^  int value;$/;"	m	class:Integer	file:
verbosity	asan/asan_flags.h	/^  int  verbosity;$/;"	m	struct:__asan::Flags
verbosity	tsan/rtl/tsan_flags.h	/^  int verbosity;$/;"	m	struct:__tsan::Flags
vmaddrs	asan/scripts/asan_symbolize.py	/^vmaddrs = {}$/;"	v
wideLeftShift	fp_lib.h	/^static inline void wideLeftShift(rep_t *hi, rep_t *lo, int count) {$/;"	f
wideMultiply	fp_lib.h	/^static inline void wideMultiply(rep_t a, rep_t b, rep_t *hi, rep_t *lo) {$/;"	f
wideRightShiftWithSticky	fp_lib.h	/^static inline void wideRightShiftWithSticky(rep_t *hi, rep_t *lo, unsigned int count) {$/;"	f
worker_t	asan/asan_intercepted_functions.h	/^typedef void* (*worker_t)(void *block);$/;"	t
worker_t	asan/asan_mac.cc	/^typedef void* (*worker_t)(void *block);$/;"	t	namespace:__asan	file:
wrap_workitem_func	asan/asan_mac.cc	/^void *wrap_workitem_func(void *arg) {$/;"	f
write	tsan/rtl/tsan_report.h	/^  bool write;$/;"	m	struct:__tsan::ReportMop
writeToSymbolizer	sanitizer_common/sanitizer_symbolizer.cc	/^  bool writeToSymbolizer(const char *buffer, uptr length) {$/;"	f	class:__sanitizer::ExternalSymbolizer	file:
write_addr_to_pipe	asan/scripts/asan_symbolize.py	/^  def write_addr_to_pipe(self, offset):$/;"	m	class:DarwinSymbolizer
write_int32	profile/GCDAProfiling.c	/^static void write_int32(uint32_t i) {$/;"	f	file:
write_int64	profile/GCDAProfiling.c	/^static void write_int64(uint64_t i) {$/;"	f	file:
write_mutex_thread	tsan/tests/unit/tsan_mutex_test.cc	/^static void *write_mutex_thread(void *param) {$/;"	f	namespace:__tsan
write_string	profile/GCDAProfiling.c	/^static void write_string(const char *s) {$/;"	f	file:
x	asan/asan_malloc_linux.cc	/^  int x[10];$/;"	m	struct:fake_mallinfo	file:
x	asan/lit_tests/Linux/initialization-bug-any-order.cc	/^static int x = initX();$/;"	v	file:
x	asan/lit_tests/Linux/rlimit_mmap_test.cc	/^static volatile void *x;$/;"	v	file:
x	asan/lit_tests/deep_thread_stack.cc	/^int *x;$/;"	v
x	asan/lit_tests/initialization-bug.cc	/^static int x = initX();$/;"	v	file:
x	asan/tests/asan_racy_double_free_test.cc	/^void *x[N];$/;"	v
x	ppc/DD.h	/^	uint64_t x;$/;"	m	union:__anon25
x	tsan/lit_tests/static_init1.cc	/^  int x;$/;"	m	struct:P	file:
x	tsan/lit_tests/static_init2.cc	/^  int x;$/;"	m	struct:Cache	file:
x	tsan/lit_tests/static_init3.cc	/^  int x;$/;"	m	struct:Cache	file:
x	tsan/lit_tests/static_init4.cc	/^  int x;$/;"	m	struct:Cache	file:
x	tsan/lit_tests/static_init5.cc	/^  int x;$/;"	m	struct:Cache	file:
x_	tsan/rtl/tsan_rtl.h	/^  u64 x_;$/;"	m	class:__tsan::FastState
y	asan/lit_tests/Helpers/initialization-bug-extra.cc	/^int y = initY();$/;"	v
y	asan/lit_tests/Helpers/initialization-bug-extra2.cc	/^int y = initY();$/;"	v
y	tsan/lit_tests/static_init1.cc	/^  int y;$/;"	m	struct:P	file:
z	asan/lit_tests/initialization-bug.cc	/^int z = initZ();$/;"	v
zeroNaN	ppc/multc3.c	13;"	d	file:
~A	tsan/lit_tests/vptr_benign_race.cc	/^  virtual ~A() {$/;"	f	struct:A
~A	tsan/lit_tests/vptr_harmful_race.cc	/^  virtual ~A() {$/;"	f	struct:A
~B	tsan/lit_tests/vptr_benign_race.cc	/^  virtual ~B() {$/;"	f	struct:B
~B	tsan/lit_tests/vptr_harmful_race.cc	/^  virtual ~B() { }$/;"	f	struct:B
~Diag	ubsan/ubsan_diag.cc	/^Diag::~Diag() {$/;"	f	class:Diag
~GenericScopedLock	sanitizer_common/sanitizer_mutex.h	/^  ~GenericScopedLock() {$/;"	f	class:__sanitizer::GenericScopedLock
~GenericScopedReadLock	sanitizer_common/sanitizer_mutex.h	/^  ~GenericScopedReadLock() {$/;"	f	class:__sanitizer::GenericScopedReadLock
~InternalScopedBuffer	sanitizer_common/sanitizer_common.h	/^  ~InternalScopedBuffer() {$/;"	f	class:__sanitizer::InternalScopedBuffer
~MemLoc	tsan/tests/rtl/tsan_test_util_linux.cc	/^MemLoc::~MemLoc() {$/;"	f	class:MemLoc
~MemoryMappingLayout	sanitizer_common/sanitizer_linux.cc	/^MemoryMappingLayout::~MemoryMappingLayout() {$/;"	f	class:__sanitizer::MemoryMappingLayout
~MemoryMappingLayout	sanitizer_common/sanitizer_mac.cc	/^MemoryMappingLayout::~MemoryMappingLayout() {$/;"	f	class:__sanitizer::MemoryMappingLayout
~Mutex	tsan/benchmarks/vts_many_threads_bench.cc	/^  ~Mutex() { pthread_mutex_destroy(&m_); }$/;"	f	class:Mutex
~Mutex	tsan/rtl/tsan_mutex.cc	/^Mutex::~Mutex() {$/;"	f	class:__tsan::Mutex
~Mutex	tsan/tests/rtl/tsan_test_util_linux.cc	/^Mutex::~Mutex() {$/;"	f	class:Mutex
~ReportDesc	tsan/rtl/tsan_report.cc	/^ReportDesc::~ReportDesc() {$/;"	f	class:__tsan::ReportDesc
~ScopedAnnotation	tsan/rtl/tsan_interface_ann.cc	/^  ~ScopedAnnotation() {$/;"	f	class:__tsan::ScopedAnnotation
~ScopedAtomic	tsan/rtl/tsan_interface_atomic.cc	/^  ~ScopedAtomic() {$/;"	f	class:ScopedAtomic
~ScopedInErrorReport	asan/asan_report.cc	/^  NORETURN ~ScopedInErrorReport() {$/;"	f	class:__asan::ScopedInErrorReport
~ScopedInRtl	tsan/rtl/tsan_platform_linux.cc	/^ScopedInRtl::~ScopedInRtl() {$/;"	f	class:__tsan::ScopedInRtl
~ScopedInRtl	tsan/rtl/tsan_platform_mac.cc	/^ScopedInRtl::~ScopedInRtl() {$/;"	f	class:__tsan::ScopedInRtl
~ScopedInterceptor	tsan/rtl/tsan_interceptors.cc	/^ScopedInterceptor::~ScopedInterceptor() {$/;"	f	class:ScopedInterceptor
~ScopedReport	tsan/rtl/tsan_rtl_report.cc	/^ScopedReport::~ScopedReport() {$/;"	f	class:__tsan::ScopedReport
~ScopedThread	tsan/tests/rtl/tsan_test_util_linux.cc	/^ScopedThread::~ScopedThread() {$/;"	f	class:ScopedThread
~StackTrace	tsan/rtl/tsan_sync.cc	/^StackTrace::~StackTrace() {$/;"	f	class:__tsan::StackTrace
~SyncTab	tsan/rtl/tsan_sync.cc	/^SyncTab::~SyncTab() {$/;"	f	class:__tsan::SyncTab
~Vector	tsan/rtl/tsan_vector.h	/^  ~Vector() {$/;"	f	class:__tsan::Vector
